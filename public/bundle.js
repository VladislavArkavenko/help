/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		5: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData === 0) {
/******/ 			return new Promise(function(resolve) { resolve(); });
/******/ 		}
/******/
/******/ 		// a Promise means "currently loading".
/******/ 		if(installedChunkData) {
/******/ 			return installedChunkData[2];
/******/ 		}
/******/
/******/ 		// setup Promise in chunk cache
/******/ 		var promise = new Promise(function(resolve, reject) {
/******/ 			installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 		});
/******/ 		installedChunkData[2] = promise;
/******/
/******/ 		// start chunk loading
/******/ 		var head = document.getElementsByTagName('head')[0];
/******/ 		var script = document.createElement('script');
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = 'utf-8';
/******/ 		script.async = true;
/******/ 		script.timeout = 120000;
/******/
/******/ 		if (__webpack_require__.nc) {
/******/ 			script.setAttribute("nonce", __webpack_require__.nc);
/******/ 		}
/******/ 		script.src = __webpack_require__.p + "" + chunkId + ".bundle.js";
/******/ 		var timeout = setTimeout(onScriptComplete, 120000);
/******/ 		script.onerror = script.onload = onScriptComplete;
/******/ 		function onScriptComplete() {
/******/ 			// avoid mem leaks in IE.
/******/ 			script.onerror = script.onload = null;
/******/ 			clearTimeout(timeout);
/******/ 			var chunk = installedChunks[chunkId];
/******/ 			if(chunk !== 0) {
/******/ 				if(chunk) {
/******/ 					chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));
/******/ 				}
/******/ 				installedChunks[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		head.appendChild(script);
/******/
/******/ 		return promise;
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 43);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(44);
} else {
  module.exports = __webpack_require__(45);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 1 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if (process.env.NODE_ENV !== 'production') {
  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;

  var isValidElement = function (object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }; // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod


  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(58)(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(59)();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function (condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;

    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame

    throw error;
  }
};

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var __DEV__ = process.env.NODE_ENV !== 'production';

var warning = function () {};

if (__DEV__) {
  var printWarning = function printWarning(format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);

    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function (condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);

    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (!condition) {
      printWarning.apply(null, [format].concat(args));
    }
  };
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__createBrowserHistory__ = __webpack_require__(62);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__createBrowserHistory__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__createHashHistory__ = __webpack_require__(65);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__createHashHistory__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__createMemoryHistory__ = __webpack_require__(66);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_2__createMemoryHistory__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__LocationUtils__ = __webpack_require__(9);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_3__LocationUtils__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_3__LocationUtils__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__PathUtils__ = __webpack_require__(7);
/* unused harmony reexport parsePath */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_4__PathUtils__["b"]; });









/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addLeadingSlash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return stripLeadingSlash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return hasBasename; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return stripBasename; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return stripTrailingSlash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return parsePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createPath; });
var addLeadingSlash = function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
};
var stripLeadingSlash = function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
};
var hasBasename = function hasBasename(path, prefix) {
  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
};
var stripBasename = function stripBasename(path, prefix) {
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
};
var stripTrailingSlash = function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
};
var parsePath = function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';
  var hashIndex = pathname.indexOf('#');

  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');

  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
};
var createPath = function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;
  var path = pathname || '/';
  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;
  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;
  return path;
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = function () {};

if (process.env.NODE_ENV !== 'production') {
  warning = function (condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);

    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.length < 10 || /^[s\W]*$/.test(format)) {
      throw new Error('The warning format should be able to uniquely identify this ' + 'warning. Please, use a more descriptive format than: ' + format);
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });

      if (typeof console !== 'undefined') {
        console.error(message);
      }

      try {
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    }
  };
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return locationsAreEqual; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_resolve_pathname__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_value_equal__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__PathUtils__ = __webpack_require__(7);
var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};




var createLocation = function createLocation(path, state, key, currentLocation) {
  var location = void 0;

  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = Object(__WEBPACK_IMPORTED_MODULE_2__PathUtils__["d" /* parsePath */])(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = _extends({}, path);
    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }

  if (key) location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = Object(__WEBPACK_IMPORTED_MODULE_0_resolve_pathname__["a" /* default */])(location.pathname, currentLocation.pathname);
    }
  } else {
    // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) {
      location.pathname = '/';
    }
  }

  return location;
};
var locationsAreEqual = function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && Object(__WEBPACK_IMPORTED_MODULE_1_value_equal__["a" /* default */])(a.state, b.state);
};

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}





/**
 * The public API for putting history on context.
 */

var Router = function (_React$Component) {
  _inherits(Router, _React$Component);

  function Router() {
    var _temp, _this, _ret;

    _classCallCheck(this, Router);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      match: _this.computeMatch(_this.props.history.location.pathname)
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Router.prototype.getChildContext = function getChildContext() {
    return {
      router: _extends({}, this.context.router, {
        history: this.props.history,
        route: {
          location: this.props.history.location,
          match: this.state.match
        }
      })
    };
  };

  Router.prototype.computeMatch = function computeMatch(pathname) {
    return {
      path: "/",
      url: "/",
      params: {},
      isExact: pathname === "/"
    };
  };

  Router.prototype.componentWillMount = function componentWillMount() {
    var _this2 = this;

    var _props = this.props,
        children = _props.children,
        history = _props.history;
    __WEBPACK_IMPORTED_MODULE_1_invariant___default()(children == null || __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.count(children) === 1, "A <Router> may have only one child element"); // Do this here so we can setState when a <Redirect> changes the
    // location in componentWillMount. This happens e.g. when doing
    // server rendering using a <StaticRouter>.

    this.unlisten = history.listen(function () {
      _this2.setState({
        match: _this2.computeMatch(history.location.pathname)
      });
    });
  };

  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(this.props.history === nextProps.history, "You cannot change <Router history>");
  };

  Router.prototype.componentWillUnmount = function componentWillUnmount() {
    this.unlisten();
  };

  Router.prototype.render = function render() {
    var children = this.props.children;
    return children ? __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.only(children) : null;
  };

  return Router;
}(__WEBPACK_IMPORTED_MODULE_2_react___default.a.Component);

Router.propTypes = {
  history: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
  children: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.node
};
Router.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object
};
Router.childContextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired
};
/* harmony default export */ __webpack_exports__["a"] = (Router);

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_path_to_regexp__);

var patternCache = {};
var cacheLimit = 10000;
var cacheCount = 0;

var compilePath = function compilePath(pattern, options) {
  var cacheKey = "" + options.end + options.strict + options.sensitive;
  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});
  if (cache[pattern]) return cache[pattern];
  var keys = [];
  var re = __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default()(pattern, keys, options);
  var compiledPattern = {
    re: re,
    keys: keys
  };

  if (cacheCount < cacheLimit) {
    cache[pattern] = compiledPattern;
    cacheCount++;
  }

  return compiledPattern;
};
/**
 * Public API for matching a URL pathname to a path pattern.
 */


var matchPath = function matchPath(pathname) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var parent = arguments[2];
  if (typeof options === "string") options = {
    path: options
  };
  var _options = options,
      path = _options.path,
      _options$exact = _options.exact,
      exact = _options$exact === undefined ? false : _options$exact,
      _options$strict = _options.strict,
      strict = _options$strict === undefined ? false : _options$strict,
      _options$sensitive = _options.sensitive,
      sensitive = _options$sensitive === undefined ? false : _options$sensitive;
  if (path == null) return parent;

  var _compilePath = compilePath(path, {
    end: exact,
    strict: strict,
    sensitive: sensitive
  }),
      re = _compilePath.re,
      keys = _compilePath.keys;

  var match = re.exec(pathname);
  if (!match) return null;
  var url = match[0],
      values = match.slice(1);
  var isExact = pathname === url;
  if (exact && !isExact) return null;
  return {
    path: path,
    // the path pattern used to match
    url: path === "/" && url === "" ? "/" : url,
    // the matched portion of the URL
    isExact: isExact,
    // whether or not we matched exactly
    params: keys.reduce(function (memo, key, index) {
      memo[key.name] = values[index];
      return memo;
    }, {})
  };
};

/* harmony default export */ __webpack_exports__["a"] = (matchPath);

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _extends;
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var printWarning = function () {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret = __webpack_require__(14);

  var loggedTypeFailures = {};

  printWarning = function (text) {
    var message = 'Warning: ' + text;

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */


function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }

        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }

        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : '';
          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}

module.exports = checkPropTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);


var createTransitionManager = function createTransitionManager() {
  var prompt = null;

  var setPrompt = function setPrompt(nextPrompt) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(prompt == null, 'A history supports only one prompt at a time');
    prompt = nextPrompt;
    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  };

  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(false, 'A history needs a getUserConfirmation function in order to use a prompt message');
          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  };

  var listeners = [];

  var appendListener = function appendListener(fn) {
    var isActive = true;

    var listener = function listener() {
      if (isActive) fn.apply(undefined, arguments);
    };

    listeners.push(listener);
    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  };

  var notifyListeners = function notifyListeners() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(undefined, args);
    });
  };

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
};

/* harmony default export */ __webpack_exports__["a"] = (createTransitionManager);

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Router__ = __webpack_require__(10);
// Written in this round about way for babel-transform-imports

/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Router__["a" /* default */]);

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__matchPath__ = __webpack_require__(11);
var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}







var isEmptyChildren = function isEmptyChildren(children) {
  return __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.count(children) === 0;
};
/**
 * The public API for matching a single path and rendering.
 */


var Route = function (_React$Component) {
  _inherits(Route, _React$Component);

  function Route() {
    var _temp, _this, _ret;

    _classCallCheck(this, Route);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      match: _this.computeMatch(_this.props, _this.context.router)
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Route.prototype.getChildContext = function getChildContext() {
    return {
      router: _extends({}, this.context.router, {
        route: {
          location: this.props.location || this.context.router.route.location,
          match: this.state.match
        }
      })
    };
  };

  Route.prototype.computeMatch = function computeMatch(_ref, router) {
    var computedMatch = _ref.computedMatch,
        location = _ref.location,
        path = _ref.path,
        strict = _ref.strict,
        exact = _ref.exact,
        sensitive = _ref.sensitive;
    if (computedMatch) return computedMatch; // <Switch> already computed the match for us

    __WEBPACK_IMPORTED_MODULE_1_invariant___default()(router, "You should not use <Route> or withRouter() outside a <Router>");
    var route = router.route;
    var pathname = (location || route.location).pathname;
    return Object(__WEBPACK_IMPORTED_MODULE_4__matchPath__["a" /* default */])(pathname, {
      path: path,
      strict: strict,
      exact: exact,
      sensitive: sensitive
    }, route.match);
  };

  Route.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(this.props.component && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored");
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(this.props.render && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored");
  };

  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
    this.setState({
      match: this.computeMatch(nextProps, nextContext.router)
    });
  };

  Route.prototype.render = function render() {
    var match = this.state.match;
    var _props = this.props,
        children = _props.children,
        component = _props.component,
        render = _props.render;
    var _context$router = this.context.router,
        history = _context$router.history,
        route = _context$router.route,
        staticContext = _context$router.staticContext;
    var location = this.props.location || route.location;
    var props = {
      match: match,
      location: location,
      history: history,
      staticContext: staticContext
    };
    if (component) return match ? __WEBPACK_IMPORTED_MODULE_2_react___default.a.createElement(component, props) : null;
    if (render) return match ? render(props) : null;
    if (typeof children === "function") return children(props);
    if (children && !isEmptyChildren(children)) return __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.only(children);
    return null;
  };

  return Route;
}(__WEBPACK_IMPORTED_MODULE_2_react___default.a.Component);

Route.propTypes = {
  computedMatch: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object,
  // private, from <Switch>
  path: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.string,
  exact: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool,
  strict: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool,
  sensitive: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool,
  component: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func,
  render: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func,
  children: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func, __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.node]),
  location: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object
};
Route.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.shape({
    history: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
    route: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
    staticContext: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object
  })
};
Route.childContextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired
};
/* harmony default export */ __webpack_exports__["a"] = (Route);

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_path_to_regexp__);

var patternCache = {};
var cacheLimit = 10000;
var cacheCount = 0;

var compileGenerator = function compileGenerator(pattern) {
  var cacheKey = pattern;
  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});
  if (cache[pattern]) return cache[pattern];
  var compiledGenerator = __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default.a.compile(pattern);

  if (cacheCount < cacheLimit) {
    cache[pattern] = compiledGenerator;
    cacheCount++;
  }

  return compiledGenerator;
};
/**
 * Public API for generating a URL pathname from a pattern and parameters.
 */


var generatePath = function generatePath() {
  var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (pattern === "/") {
    return pattern;
  }

  var generator = compileGenerator(pattern);
  return generator(params, {
    pretty: true
  });
};

/* harmony default export */ __webpack_exports__["a"] = (generatePath);

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = warning;
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */


  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */

}

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _objectWithoutPropertiesLoose;
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return createStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return combineReducers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return bindActionCreators; });
/* unused harmony export applyMiddleware */
/* unused harmony export compose */
/* unused harmony export __DO_NOT_USE__ActionTypes */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_symbol_observable__ = __webpack_require__(88);

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

var randomString = function randomString() {
  return Math.random().toString(36).substring(7).split('').join('.');
};

var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};
/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  var proto = obj;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(obj) === proto;
}
/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */


function createStore(reducer, preloadedState, enhancer) {
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function');
  }

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.');
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.');
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */


  function getState() {
    if (isDispatching) {
      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
    }

    return currentState;
  }
  /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */


  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected the listener to be a function.');
    }

    if (isDispatching) {
      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
    }

    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      if (isDispatching) {
        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
      }

      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
    };
  }
  /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */


  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;

    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }

    return action;
  }
  /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */


  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.');
    }

    currentReducer = nextReducer;
    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */


  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe(observer) {
        if (typeof observer !== 'object' || observer === null) {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe: unsubscribe
        };
      }
    }, _ref[__WEBPACK_IMPORTED_MODULE_0_symbol_observable__["a" /* default */]] = function () {
      return this;
    }, _ref;
  } // When a store is created, an "INIT" action is dispatched so that every
  // reducer returns their initial state. This effectively populates
  // the initial state tree.


  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[__WEBPACK_IMPORTED_MODULE_0_symbol_observable__["a" /* default */]] = observable, _ref2;
}
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */


function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */


  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
  } catch (e) {} // eslint-disable-line no-empty

}

function getUndefinedStateErrorMessage(key, action) {
  var actionType = action && action.type;
  var actionDescription = actionType && "action \"" + String(actionType) + "\"" || 'an action';
  return "Given " + actionDescription + ", reducer \"" + key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.";
}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!isPlainObject(inputState)) {
    return "The " + argumentName + " has unexpected type of \"" + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });
  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });
  if (action && action.type === ActionTypes.REPLACE) return;

  if (unexpectedKeys.length > 0) {
    return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
  }
}

function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, {
      type: ActionTypes.INIT
    });

    if (typeof initialState === 'undefined') {
      throw new Error("Reducer \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
    }

    if (typeof reducer(undefined, {
      type: ActionTypes.PROBE_UNKNOWN_ACTION()
    }) === 'undefined') {
      throw new Error("Reducer \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle " + ActionTypes.INIT + " or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
    }
  });
}
/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */


function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};

  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (process.env.NODE_ENV !== 'production') {
      if (typeof reducers[key] === 'undefined') {
        warning("No reducer provided for key \"" + key + "\"");
      }
    }

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }

  var finalReducerKeys = Object.keys(finalReducers);
  var unexpectedKeyCache;

  if (process.env.NODE_ENV !== 'production') {
    unexpectedKeyCache = {};
  }

  var shapeAssertionError;

  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination(state, action) {
    if (state === void 0) {
      state = {};
    }

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if (process.env.NODE_ENV !== 'production') {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

      if (warningMessage) {
        warning(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};

    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);

      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(_key, action);
        throw new Error(errorMessage);
      }

      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }

    return hasChanged ? nextState : state;
  };
}

function bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(this, arguments));
  };
}
/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass a single function as the first argument,
 * and get a function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */


function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch);
  }

  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error("bindActionCreators expected an object or a function, instead received " + (actionCreators === null ? 'null' : typeof actionCreators) + ". " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
  }

  var keys = Object.keys(actionCreators);
  var boundActionCreators = {};

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var actionCreator = actionCreators[key];

    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }

  return boundActionCreators;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}
/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */


function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(void 0, arguments));
    };
  });
}
/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */


function applyMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function () {
      var store = createStore.apply(void 0, arguments);

      var _dispatch = function dispatch() {
        throw new Error("Dispatching while constructing your middleware is not allowed. " + "Other middleware would not be applied to this dispatch.");
      };

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(void 0, arguments);
        }
      };
      var chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(void 0, chain)(store.dispatch);
      return _objectSpread({}, store, {
        dispatch: _dispatch
      });
    };
  };
}
/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */


function isCrushed() {}

if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
  warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
}


/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(48);
} else {
  module.exports = __webpack_require__(49);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var React = __webpack_require__(0);

var PropTypes = __webpack_require__(2);

var ALL_INITIALIZERS = [];
var READY_INITIALIZERS = [];

function isWebpackReady(getModuleIds) {
  if (( false ? "undefined" : _typeof(__webpack_require__.m)) !== "object") {
    return false;
  }

  return getModuleIds().every(function (moduleId) {
    return typeof moduleId !== "undefined" && typeof __webpack_require__.m[moduleId] !== "undefined";
  });
}

function load(loader) {
  var promise = loader();
  var state = {
    loading: true,
    loaded: null,
    error: null
  };
  state.promise = promise.then(function (loaded) {
    state.loading = false;
    state.loaded = loaded;
    return loaded;
  }).catch(function (err) {
    state.loading = false;
    state.error = err;
    throw err;
  });
  return state;
}

function loadMap(obj) {
  var state = {
    loading: false,
    loaded: {},
    error: null
  };
  var promises = [];

  try {
    Object.keys(obj).forEach(function (key) {
      var result = load(obj[key]);

      if (!result.loading) {
        state.loaded[key] = result.loaded;
        state.error = result.error;
      } else {
        state.loading = true;
      }

      promises.push(result.promise);
      result.promise.then(function (res) {
        state.loaded[key] = res;
      }).catch(function (err) {
        state.error = err;
      });
    });
  } catch (err) {
    state.error = err;
  }

  state.promise = Promise.all(promises).then(function (res) {
    state.loading = false;
    return res;
  }).catch(function (err) {
    state.loading = false;
    throw err;
  });
  return state;
}

function resolve(obj) {
  return obj && obj.__esModule ? obj.default : obj;
}

function render(loaded, props) {
  return React.createElement(resolve(loaded), props);
}

function createLoadableComponent(loadFn, options) {
  var _class, _temp;

  if (!options.loading) {
    throw new Error("react-loadable requires a `loading` component");
  }

  var opts = Object.assign({
    loader: null,
    loading: null,
    delay: 200,
    timeout: null,
    render: render,
    webpack: null,
    modules: null
  }, options);
  var res = null;

  function init() {
    if (!res) {
      res = loadFn(opts.loader);
    }

    return res.promise;
  }

  ALL_INITIALIZERS.push(init);

  if (typeof opts.webpack === "function") {
    READY_INITIALIZERS.push(function () {
      if (isWebpackReady(opts.webpack)) {
        return init();
      }
    });
  }

  return _temp = _class = function (_React$Component) {
    _inherits(LoadableComponent, _React$Component);

    function LoadableComponent(props) {
      _classCallCheck(this, LoadableComponent);

      var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

      _this.retry = function () {
        _this.setState({
          error: null,
          loading: true,
          timedOut: false
        });

        res = loadFn(opts.loader);

        _this._loadModule();
      };

      init();
      _this.state = {
        error: res.error,
        pastDelay: false,
        timedOut: false,
        loading: res.loading,
        loaded: res.loaded
      };
      return _this;
    }

    LoadableComponent.preload = function preload() {
      return init();
    };

    LoadableComponent.prototype.componentWillMount = function componentWillMount() {
      this._mounted = true;

      this._loadModule();
    };

    LoadableComponent.prototype._loadModule = function _loadModule() {
      var _this2 = this;

      if (this.context.loadable && Array.isArray(opts.modules)) {
        opts.modules.forEach(function (moduleName) {
          _this2.context.loadable.report(moduleName);
        });
      }

      if (!res.loading) {
        return;
      }

      if (typeof opts.delay === "number") {
        if (opts.delay === 0) {
          this.setState({
            pastDelay: true
          });
        } else {
          this._delay = setTimeout(function () {
            _this2.setState({
              pastDelay: true
            });
          }, opts.delay);
        }
      }

      if (typeof opts.timeout === "number") {
        this._timeout = setTimeout(function () {
          _this2.setState({
            timedOut: true
          });
        }, opts.timeout);
      }

      var update = function update() {
        if (!_this2._mounted) {
          return;
        }

        _this2.setState({
          error: res.error,
          loaded: res.loaded,
          loading: res.loading
        });

        _this2._clearTimeouts();
      };

      res.promise.then(function () {
        update();
      }).catch(function (err) {
        update();
      });
    };

    LoadableComponent.prototype.componentWillUnmount = function componentWillUnmount() {
      this._mounted = false;

      this._clearTimeouts();
    };

    LoadableComponent.prototype._clearTimeouts = function _clearTimeouts() {
      clearTimeout(this._delay);
      clearTimeout(this._timeout);
    };

    LoadableComponent.prototype.render = function render() {
      if (this.state.loading || this.state.error) {
        return React.createElement(opts.loading, {
          isLoading: this.state.loading,
          pastDelay: this.state.pastDelay,
          timedOut: this.state.timedOut,
          error: this.state.error,
          retry: this.retry
        });
      } else if (this.state.loaded) {
        return opts.render(this.state.loaded, this.props);
      } else {
        return null;
      }
    };

    return LoadableComponent;
  }(React.Component), _class.contextTypes = {
    loadable: PropTypes.shape({
      report: PropTypes.func.isRequired
    })
  }, _temp;
}

function Loadable(opts) {
  return createLoadableComponent(load, opts);
}

function LoadableMap(opts) {
  if (typeof opts.render !== "function") {
    throw new Error("LoadableMap requires a `render(loaded, props)` function");
  }

  return createLoadableComponent(loadMap, opts);
}

Loadable.Map = LoadableMap;

var Capture = function (_React$Component2) {
  _inherits(Capture, _React$Component2);

  function Capture() {
    _classCallCheck(this, Capture);

    return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));
  }

  Capture.prototype.getChildContext = function getChildContext() {
    return {
      loadable: {
        report: this.props.report
      }
    };
  };

  Capture.prototype.render = function render() {
    return React.Children.only(this.props.children);
  };

  return Capture;
}(React.Component);

Capture.propTypes = {
  report: PropTypes.func.isRequired
};
Capture.childContextTypes = {
  loadable: PropTypes.shape({
    report: PropTypes.func.isRequired
  }).isRequired
};
Loadable.Capture = Capture;

function flushInitializers(initializers) {
  var promises = [];

  while (initializers.length) {
    var init = initializers.pop();
    promises.push(init());
  }

  return Promise.all(promises).then(function () {
    if (initializers.length) {
      return flushInitializers(initializers);
    }
  });
}

Loadable.preloadAll = function () {
  return new Promise(function (resolve, reject) {
    flushInitializers(ALL_INITIALIZERS).then(resolve, reject);
  });
};

Loadable.preloadReady = function () {
  return new Promise(function (resolve, reject) {
    // We always will resolve, errors should be handled within loading UIs.
    flushInitializers(READY_INITIALIZERS).then(resolve, resolve);
  });
};

module.exports = Loadable;

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return canUseDOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addEventListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return removeEventListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getConfirmation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return supportsHistory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return supportsPopStateOnHashChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return supportsGoWithoutReloadUsingHash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isExtraneousPopstateEvent; });
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
var addEventListener = function addEventListener(node, event, listener) {
  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
};
var removeEventListener = function removeEventListener(node, event, listener) {
  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
};
var getConfirmation = function getConfirmation(message, callback) {
  return callback(window.confirm(message));
}; // eslint-disable-line no-alert

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

var supportsHistory = function supportsHistory() {
  var ua = window.navigator.userAgent;
  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
  return window.history && 'pushState' in window.history;
};
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */

var supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
};
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */

var supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
};
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */

var isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
};

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history__ = __webpack_require__(5);
var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}






var isModifiedEvent = function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
};
/**
 * The public API for rendering a history-aware <a>.
 */


var Link = function (_React$Component) {
  _inherits(Link, _React$Component);

  function Link() {
    var _temp, _this, _ret;

    _classCallCheck(this, Link);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
      if (_this.props.onClick) _this.props.onClick(event);

      if (!event.defaultPrevented && // onClick prevented default
      event.button === 0 && // ignore everything but left clicks
      !_this.props.target && // let browser handle "target=_blank" etc.
      !isModifiedEvent(event) // ignore clicks with modifier keys
      ) {
          event.preventDefault();
          var history = _this.context.router.history;
          var _this$props = _this.props,
              replace = _this$props.replace,
              to = _this$props.to;

          if (replace) {
            history.replace(to);
          } else {
            history.push(to);
          }
        }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Link.prototype.render = function render() {
    var _props = this.props,
        replace = _props.replace,
        to = _props.to,
        innerRef = _props.innerRef,
        props = _objectWithoutProperties(_props, ["replace", "to", "innerRef"]); // eslint-disable-line no-unused-vars


    __WEBPACK_IMPORTED_MODULE_2_invariant___default()(this.context.router, "You should not use <Link> outside a <Router>");
    __WEBPACK_IMPORTED_MODULE_2_invariant___default()(to !== undefined, 'You must specify the "to" property');
    var history = this.context.router.history;
    var location = typeof to === "string" ? Object(__WEBPACK_IMPORTED_MODULE_3_history__["c" /* createLocation */])(to, null, null, history.location) : to;
    var href = history.createHref(location);
    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("a", _extends({}, props, {
      onClick: this.handleClick,
      href: href,
      ref: innerRef
    }));
  };

  return Link;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

Link.propTypes = {
  onClick: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,
  target: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  replace: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  to: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object]).isRequired,
  innerRef: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func])
};
Link.defaultProps = {
  replace: false
};
Link.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
    history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
      push: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired,
      replace: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired,
      createHref: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired
    }).isRequired
  }).isRequired
};
/* harmony default export */ __webpack_exports__["a"] = (Link);

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(10);
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}






/**
 * The public API for a <Router> that stores location in memory.
 */

var MemoryRouter = function (_React$Component) {
  _inherits(MemoryRouter, _React$Component);

  function MemoryRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, MemoryRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = Object(__WEBPACK_IMPORTED_MODULE_3_history__["d" /* createMemoryHistory */])(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  MemoryRouter.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.");
  };

  MemoryRouter.prototype.render = function render() {
    return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__Router__["a" /* default */], {
      history: this.history,
      children: this.props.children
    });
  };

  return MemoryRouter;
}(__WEBPACK_IMPORTED_MODULE_1_react___default.a.Component);

MemoryRouter.propTypes = {
  initialEntries: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.array,
  initialIndex: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.number,
  getUserConfirmation: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func,
  keyLength: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.number,
  children: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.node
};
/* harmony default export */ __webpack_exports__["a"] = (MemoryRouter);

/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Route__ = __webpack_require__(17);
// Written in this round about way for babel-transform-imports

/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Route__["a" /* default */]);

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var isarray = __webpack_require__(70);
/**
 * Expose `pathToRegexp`.
 */


module.exports = pathToRegexp;
module.exports.parse = parse;
module.exports.compile = compile;
module.exports.tokensToFunction = tokensToFunction;
module.exports.tokensToRegExp = tokensToRegExp;
/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

var PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
'(\\\\.)', // Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');
/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length; // Ignore already escaped sequences.

    if (escaped) {
      path += escaped[1];
      continue;
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7]; // Push the current path onto the tokens.

    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;
    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
    });
  } // Match any characters still remaining.


  if (index < str.length) {
    path += str.substr(index);
  } // If the path exists, push it onto the end.


  if (path) {
    tokens.push(path);
  }

  return tokens;
}
/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */


function compile(str, options) {
  return tokensToFunction(parse(str, options));
}
/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */


function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */


function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Expose a method for transforming tokens into the path function.
 */


function tokensToFunction(tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length); // Compile all the patterns before compilation.

  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;
        continue;
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
        }

        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }

      path += token.prefix + segment;
    }

    return path;
  };
}
/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */


function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}
/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */


function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}
/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */


function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}
/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */


function flags(options) {
  return options.sensitive ? '' : 'i';
}
/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */


function regexpToRegexp(path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys);
}
/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
  return attachKeys(regexp, keys);
}
/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */


function tokensToRegExp(tokens, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};
  var strict = options.strict;
  var end = options.end !== false;
  var route = ''; // Iterate over the tokens and create our regexp string.

  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';
      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter; // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".

  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys);
}
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */


function pathToRegexp(path, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path,
    /** @type {!Array} */
    keys);
  }

  if (isarray(path)) {
    return arrayToRegexp(
    /** @type {!Array} */
    path,
    /** @type {!Array} */
    keys, options);
  }

  return stringToRegexp(
  /** @type {string} */
  path,
  /** @type {!Array} */
  keys, options);
}

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_invariant__);
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}




/**
 * The public API for prompting the user before navigating away
 * from a screen with a component.
 */

var Prompt = function (_React$Component) {
  _inherits(Prompt, _React$Component);

  function Prompt() {
    _classCallCheck(this, Prompt);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Prompt.prototype.enable = function enable(message) {
    if (this.unblock) this.unblock();
    this.unblock = this.context.router.history.block(message);
  };

  Prompt.prototype.disable = function disable() {
    if (this.unblock) {
      this.unblock();
      this.unblock = null;
    }
  };

  Prompt.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_2_invariant___default()(this.context.router, "You should not use <Prompt> outside a <Router>");
    if (this.props.when) this.enable(this.props.message);
  };

  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.when) {
      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);
    } else {
      this.disable();
    }
  };

  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
    this.disable();
  };

  Prompt.prototype.render = function render() {
    return null;
  };

  return Prompt;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

Prompt.propTypes = {
  when: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  message: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string]).isRequired
};
Prompt.defaultProps = {
  when: true
};
Prompt.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
    history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
      block: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired
    }).isRequired
  }).isRequired
};
/* harmony default export */ __webpack_exports__["a"] = (Prompt);

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_history__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__generatePath__ = __webpack_require__(18);
var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}







/**
 * The public API for updating the location programmatically
 * with a component.
 */

var Redirect = function (_React$Component) {
  _inherits(Redirect, _React$Component);

  function Redirect() {
    _classCallCheck(this, Redirect);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Redirect.prototype.isStatic = function isStatic() {
    return this.context.router && this.context.router.staticContext;
  };

  Redirect.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_3_invariant___default()(this.context.router, "You should not use <Redirect> outside a <Router>");
    if (this.isStatic()) this.perform();
  };

  Redirect.prototype.componentDidMount = function componentDidMount() {
    if (!this.isStatic()) this.perform();
  };

  Redirect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    var prevTo = Object(__WEBPACK_IMPORTED_MODULE_4_history__["c" /* createLocation */])(prevProps.to);
    var nextTo = Object(__WEBPACK_IMPORTED_MODULE_4_history__["c" /* createLocation */])(this.props.to);

    if (Object(__WEBPACK_IMPORTED_MODULE_4_history__["f" /* locationsAreEqual */])(prevTo, nextTo)) {
      __WEBPACK_IMPORTED_MODULE_2_warning___default()(false, "You tried to redirect to the same route you're currently on: " + ("\"" + nextTo.pathname + nextTo.search + "\""));
      return;
    }

    this.perform();
  };

  Redirect.prototype.computeTo = function computeTo(_ref) {
    var computedMatch = _ref.computedMatch,
        to = _ref.to;

    if (computedMatch) {
      if (typeof to === "string") {
        return Object(__WEBPACK_IMPORTED_MODULE_5__generatePath__["a" /* default */])(to, computedMatch.params);
      } else {
        return _extends({}, to, {
          pathname: Object(__WEBPACK_IMPORTED_MODULE_5__generatePath__["a" /* default */])(to.pathname, computedMatch.params)
        });
      }
    }

    return to;
  };

  Redirect.prototype.perform = function perform() {
    var history = this.context.router.history;
    var push = this.props.push;
    var to = this.computeTo(this.props);

    if (push) {
      history.push(to);
    } else {
      history.replace(to);
    }
  };

  Redirect.prototype.render = function render() {
    return null;
  };

  return Redirect;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

Redirect.propTypes = {
  computedMatch: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
  // private, from <Switch>
  push: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  from: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  to: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object]).isRequired
};
Redirect.defaultProps = {
  push: false
};
Redirect.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
    history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
      push: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired,
      replace: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired
    }).isRequired,
    staticContext: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object
  }).isRequired
};
/* harmony default export */ __webpack_exports__["a"] = (Redirect);

/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_history__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Router__ = __webpack_require__(10);
var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}








var addLeadingSlash = function addLeadingSlash(path) {
  return path.charAt(0) === "/" ? path : "/" + path;
};

var addBasename = function addBasename(basename, location) {
  if (!basename) return location;
  return _extends({}, location, {
    pathname: addLeadingSlash(basename) + location.pathname
  });
};

var stripBasename = function stripBasename(basename, location) {
  if (!basename) return location;
  var base = addLeadingSlash(basename);
  if (location.pathname.indexOf(base) !== 0) return location;
  return _extends({}, location, {
    pathname: location.pathname.substr(base.length)
  });
};

var createURL = function createURL(location) {
  return typeof location === "string" ? location : Object(__WEBPACK_IMPORTED_MODULE_4_history__["e" /* createPath */])(location);
};

var staticHandler = function staticHandler(methodName) {
  return function () {
    __WEBPACK_IMPORTED_MODULE_1_invariant___default()(false, "You cannot %s with <StaticRouter>", methodName);
  };
};

var noop = function noop() {};
/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */


var StaticRouter = function (_React$Component) {
  _inherits(StaticRouter, _React$Component);

  function StaticRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, StaticRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
      return addLeadingSlash(_this.props.basename + createURL(path));
    }, _this.handlePush = function (location) {
      var _this$props = _this.props,
          basename = _this$props.basename,
          context = _this$props.context;
      context.action = "PUSH";
      context.location = addBasename(basename, Object(__WEBPACK_IMPORTED_MODULE_4_history__["c" /* createLocation */])(location));
      context.url = createURL(context.location);
    }, _this.handleReplace = function (location) {
      var _this$props2 = _this.props,
          basename = _this$props2.basename,
          context = _this$props2.context;
      context.action = "REPLACE";
      context.location = addBasename(basename, Object(__WEBPACK_IMPORTED_MODULE_4_history__["c" /* createLocation */])(location));
      context.url = createURL(context.location);
    }, _this.handleListen = function () {
      return noop;
    }, _this.handleBlock = function () {
      return noop;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  StaticRouter.prototype.getChildContext = function getChildContext() {
    return {
      router: {
        staticContext: this.props.context
      }
    };
  };

  StaticRouter.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.");
  };

  StaticRouter.prototype.render = function render() {
    var _props = this.props,
        basename = _props.basename,
        context = _props.context,
        location = _props.location,
        props = _objectWithoutProperties(_props, ["basename", "context", "location"]);

    var history = {
      createHref: this.createHref,
      action: "POP",
      location: stripBasename(basename, Object(__WEBPACK_IMPORTED_MODULE_4_history__["c" /* createLocation */])(location)),
      push: this.handlePush,
      replace: this.handleReplace,
      go: staticHandler("go"),
      goBack: staticHandler("goBack"),
      goForward: staticHandler("goForward"),
      listen: this.handleListen,
      block: this.handleBlock
    };
    return __WEBPACK_IMPORTED_MODULE_2_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5__Router__["a" /* default */], _extends({}, props, {
      history: history
    }));
  };

  return StaticRouter;
}(__WEBPACK_IMPORTED_MODULE_2_react___default.a.Component);

StaticRouter.propTypes = {
  basename: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.string,
  context: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
  location: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object])
};
StaticRouter.defaultProps = {
  basename: "",
  location: "/"
};
StaticRouter.childContextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired
};
/* harmony default export */ __webpack_exports__["a"] = (StaticRouter);

/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__matchPath__ = __webpack_require__(11);
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}






/**
 * The public API for rendering the first <Route> that matches.
 */

var Switch = function (_React$Component) {
  _inherits(Switch, _React$Component);

  function Switch() {
    _classCallCheck(this, Switch);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Switch.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_3_invariant___default()(this.context.router, "You should not use <Switch> outside a <Router>");
  };

  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    __WEBPACK_IMPORTED_MODULE_2_warning___default()(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
    __WEBPACK_IMPORTED_MODULE_2_warning___default()(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
  };

  Switch.prototype.render = function render() {
    var route = this.context.router.route;
    var children = this.props.children;
    var location = this.props.location || route.location;
    var match = void 0,
        child = void 0;
    __WEBPACK_IMPORTED_MODULE_0_react___default.a.Children.forEach(children, function (element) {
      if (match == null && __WEBPACK_IMPORTED_MODULE_0_react___default.a.isValidElement(element)) {
        var _element$props = element.props,
            pathProp = _element$props.path,
            exact = _element$props.exact,
            strict = _element$props.strict,
            sensitive = _element$props.sensitive,
            from = _element$props.from;
        var path = pathProp || from;
        child = element;
        match = Object(__WEBPACK_IMPORTED_MODULE_4__matchPath__["a" /* default */])(location.pathname, {
          path: path,
          exact: exact,
          strict: strict,
          sensitive: sensitive
        }, route.match);
      }
    });
    return match ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(child, {
      location: location,
      computedMatch: match
    }) : null;
  };

  return Switch;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

Switch.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
    route: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object.isRequired
  }).isRequired
};
Switch.propTypes = {
  children: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node,
  location: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object
};
/* harmony default export */ __webpack_exports__["a"] = (Switch);

/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Route__ = __webpack_require__(17);
var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}





/**
 * A public higher-order component to access the imperative API
 */

var withRouter = function withRouter(Component) {
  var C = function C(props) {
    var wrappedComponentRef = props.wrappedComponentRef,
        remainingProps = _objectWithoutProperties(props, ["wrappedComponentRef"]);

    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__Route__["a" /* default */], {
      children: function children(routeComponentProps) {
        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(Component, _extends({}, remainingProps, routeComponentProps, {
          ref: wrappedComponentRef
        }));
      }
    });
  };

  C.displayName = "withRouter(" + (Component.displayName || Component.name) + ")";
  C.WrappedComponent = Component;
  C.propTypes = {
    wrappedComponentRef: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func
  };
  return __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics___default()(C, Component);
};

/* harmony default export */ __webpack_exports__["a"] = (withRouter);

/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _inheritsLoose;
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return subscriptionShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return storeShape; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_prop_types__);

var subscriptionShape = __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({
  trySubscribe: __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired,
  tryUnsubscribe: __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired,
  notifyNestedSubs: __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired,
  isSubscribed: __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired
});
var storeShape = __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape({
  subscribe: __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired,
  dispatch: __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired,
  getState: __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired
});

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (immutable) */ __webpack_exports__["a"] = connectAdvanced;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_inheritsLoose__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_extends__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_objectWithoutPropertiesLoose__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_hoist_non_react_statics__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_hoist_non_react_statics___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_hoist_non_react_statics__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_react_is__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_react_is___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_react_is__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__utils_Subscription__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__utils_PropTypes__ = __webpack_require__(35);










var hotReloadingVersion = 0;
var dummyState = {};

function noop() {}

function makeSelectorStateful(sourceSelector, store) {
  // wrap the selector in an object that tracks its results between runs.
  var selector = {
    run: function runComponentSelector(props) {
      try {
        var nextProps = sourceSelector(store.getState(), props);

        if (nextProps !== selector.props || selector.error) {
          selector.shouldComponentUpdate = true;
          selector.props = nextProps;
          selector.error = null;
        }
      } catch (error) {
        selector.shouldComponentUpdate = true;
        selector.error = error;
      }
    }
  };
  return selector;
}

function connectAdvanced(
/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/
selectorFactory, // options object:
_ref) {
  var _contextTypes, _childContextTypes;

  if (_ref === void 0) {
    _ref = {};
  }

  var _ref2 = _ref,
      _ref2$getDisplayName = _ref2.getDisplayName,
      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {
    return "ConnectAdvanced(" + name + ")";
  } : _ref2$getDisplayName,
      _ref2$methodName = _ref2.methodName,
      methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName,
      _ref2$renderCountProp = _ref2.renderCountProp,
      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,
      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,
      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,
      _ref2$storeKey = _ref2.storeKey,
      storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey,
      _ref2$withRef = _ref2.withRef,
      withRef = _ref2$withRef === void 0 ? false : _ref2$withRef,
      connectOptions = Object(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_objectWithoutPropertiesLoose__["a" /* default */])(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef"]);

  var subscriptionKey = storeKey + 'Subscription';
  var version = hotReloadingVersion++;
  var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = __WEBPACK_IMPORTED_MODULE_9__utils_PropTypes__["a" /* storeShape */], _contextTypes[subscriptionKey] = __WEBPACK_IMPORTED_MODULE_9__utils_PropTypes__["b" /* subscriptionShape */], _contextTypes);
  var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = __WEBPACK_IMPORTED_MODULE_9__utils_PropTypes__["b" /* subscriptionShape */], _childContextTypes);
  return function wrapWithConnect(WrappedComponent) {
    __WEBPACK_IMPORTED_MODULE_5_invariant___default()(Object(__WEBPACK_IMPORTED_MODULE_7_react_is__["isValidElementType"])(WrappedComponent), "You must pass a component to the function returned by " + (methodName + ". Instead received " + JSON.stringify(WrappedComponent)));
    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    var displayName = getDisplayName(wrappedComponentName);

    var selectorFactoryOptions = Object(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_extends__["a" /* default */])({}, connectOptions, {
      getDisplayName: getDisplayName,
      methodName: methodName,
      renderCountProp: renderCountProp,
      shouldHandleStateChanges: shouldHandleStateChanges,
      storeKey: storeKey,
      withRef: withRef,
      displayName: displayName,
      wrappedComponentName: wrappedComponentName,
      WrappedComponent: WrappedComponent // TODO Actually fix our use of componentWillReceiveProps

      /* eslint-disable react/no-deprecated */

    });

    var Connect =
    /*#__PURE__*/
    function (_Component) {
      Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_inheritsLoose__["a" /* default */])(Connect, _Component);

      function Connect(props, context) {
        var _this;

        _this = _Component.call(this, props, context) || this;
        _this.version = version;
        _this.state = {};
        _this.renderCount = 0;
        _this.store = props[storeKey] || context[storeKey];
        _this.propsMode = Boolean(props[storeKey]);
        _this.setWrappedInstance = _this.setWrappedInstance.bind(Object(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)));
        __WEBPACK_IMPORTED_MODULE_5_invariant___default()(_this.store, "Could not find \"" + storeKey + "\" in either the context or props of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + ("or explicitly pass \"" + storeKey + "\" as a prop to \"" + displayName + "\"."));

        _this.initSelector();

        _this.initSubscription();

        return _this;
      }

      var _proto = Connect.prototype;

      _proto.getChildContext = function getChildContext() {
        var _ref3; // If this component received store from props, its subscription should be transparent
        // to any descendants receiving store+subscription from context; it passes along
        // subscription passed to it. Otherwise, it shadows the parent subscription, which allows
        // Connect to control ordering of notifications to flow top-down.


        var subscription = this.propsMode ? null : this.subscription;
        return _ref3 = {}, _ref3[subscriptionKey] = subscription || this.context[subscriptionKey], _ref3;
      };

      _proto.componentDidMount = function componentDidMount() {
        if (!shouldHandleStateChanges) return; // componentWillMount fires during server side rendering, but componentDidMount and
        // componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.
        // Otherwise, unsubscription would never take place during SSR, causing a memory leak.
        // To handle the case where a child component may have triggered a state change by
        // dispatching an action in its componentWillMount, we have to re-run the select and maybe
        // re-render.

        this.subscription.trySubscribe();
        this.selector.run(this.props);
        if (this.selector.shouldComponentUpdate) this.forceUpdate();
      };

      _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        this.selector.run(nextProps);
      };

      _proto.shouldComponentUpdate = function shouldComponentUpdate() {
        return this.selector.shouldComponentUpdate;
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.subscription) this.subscription.tryUnsubscribe();
        this.subscription = null;
        this.notifyNestedSubs = noop;
        this.store = null;
        this.selector.run = noop;
        this.selector.shouldComponentUpdate = false;
      };

      _proto.getWrappedInstance = function getWrappedInstance() {
        __WEBPACK_IMPORTED_MODULE_5_invariant___default()(withRef, "To access the wrapped instance, you need to specify " + ("{ withRef: true } in the options argument of the " + methodName + "() call."));
        return this.wrappedInstance;
      };

      _proto.setWrappedInstance = function setWrappedInstance(ref) {
        this.wrappedInstance = ref;
      };

      _proto.initSelector = function initSelector() {
        var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
        this.selector = makeSelectorStateful(sourceSelector, this.store);
        this.selector.run(this.props);
      };

      _proto.initSubscription = function initSubscription() {
        if (!shouldHandleStateChanges) return; // parentSub's source should match where store came from: props vs. context. A component
        // connected to the store via props shouldn't use subscription from context, or vice versa.

        var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];
        this.subscription = new __WEBPACK_IMPORTED_MODULE_8__utils_Subscription__["a" /* default */](this.store, parentSub, this.onStateChange.bind(this)); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
        // the middle of the notification loop, where `this.subscription` will then be null. An
        // extra null check every change can be avoided by copying the method onto `this` and then
        // replacing it with a no-op on unmount. This can probably be avoided if Subscription's
        // listeners logic is changed to not call listeners that have been unsubscribed in the
        // middle of the notification loop.

        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
      };

      _proto.onStateChange = function onStateChange() {
        this.selector.run(this.props);

        if (!this.selector.shouldComponentUpdate) {
          this.notifyNestedSubs();
        } else {
          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
          this.setState(dummyState);
        }
      };

      _proto.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {
        // `componentDidUpdate` is conditionally implemented when `onStateChange` determines it
        // needs to notify nested subs. Once called, it unimplements itself until further state
        // changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does
        // a boolean check every time avoids an extra method call most of the time, resulting
        // in some perf boost.
        this.componentDidUpdate = undefined;
        this.notifyNestedSubs();
      };

      _proto.isSubscribed = function isSubscribed() {
        return Boolean(this.subscription) && this.subscription.isSubscribed();
      };

      _proto.addExtraProps = function addExtraProps(props) {
        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props; // make a shallow copy so that fields added don't leak to the original selector.
        // this is especially important for 'ref' since that's a reference back to the component
        // instance. a singleton memoized selector would then be holding a reference to the
        // instance, preventing the instance from being garbage collected, and that would be bad

        var withExtras = Object(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_extends__["a" /* default */])({}, props);

        if (withRef) withExtras.ref = this.setWrappedInstance;
        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;
        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;
        return withExtras;
      };

      _proto.render = function render() {
        var selector = this.selector;
        selector.shouldComponentUpdate = false;

        if (selector.error) {
          throw selector.error;
        } else {
          return Object(__WEBPACK_IMPORTED_MODULE_6_react__["createElement"])(WrappedComponent, this.addExtraProps(selector.props));
        }
      };

      return Connect;
    }(__WEBPACK_IMPORTED_MODULE_6_react__["Component"]);
    /* eslint-enable react/no-deprecated */


    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = displayName;
    Connect.childContextTypes = childContextTypes;
    Connect.contextTypes = contextTypes;
    Connect.propTypes = contextTypes;

    if (process.env.NODE_ENV !== 'production') {
      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
        var _this2 = this; // We are hot reloading!


        if (this.version !== version) {
          this.version = version;
          this.initSelector(); // If any connected descendants don't hot reload (and resubscribe in the process), their
          // listeners will be lost when we unsubscribe. Unfortunately, by copying over all
          // listeners, this does mean that the old versions of connected descendants will still be
          // notified of state changes; however, their onStateChange function is a no-op so this
          // isn't a huge deal.

          var oldListeners = [];

          if (this.subscription) {
            oldListeners = this.subscription.listeners.get();
            this.subscription.tryUnsubscribe();
          }

          this.initSubscription();

          if (shouldHandleStateChanges) {
            this.subscription.trySubscribe();
            oldListeners.forEach(function (listener) {
              return _this2.subscription.listeners.subscribe(listener);
            });
          }
        }
      };
    }

    return __WEBPACK_IMPORTED_MODULE_4_hoist_non_react_statics___default()(Connect, WrappedComponent);
  };
}
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(82);
} else {
  module.exports = __webpack_require__(83);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (immutable) */ __webpack_exports__["a"] = wrapMapToPropsConstant;
/* unused harmony export getDependsOnOwnProps */
/* harmony export (immutable) */ __webpack_exports__["b"] = wrapMapToPropsFunc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_verifyPlainObject__ = __webpack_require__(39);

function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);

    function constantSelector() {
      return constant;
    }

    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
// whether mapToProps needs to be invoked when props have changed.
// 
// A length of one signals that mapToProps does not depend on props from the parent component.
// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
// therefore not reporting its length accurately..

function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
// this function wraps mapToProps in a proxy function which does several things:
// 
//  * Detects whether the mapToProps function being called depends on props, which
//    is used by selectorFactory to decide if it should reinvoke on props changes.
//    
//  * On first call, handles mapToProps if returns another function, and treats that
//    new function as the true mapToProps for subsequent calls.
//    
//  * On first call, verifies the first result is a plain object, in order to warn
//    the developer that their mapToProps function is not returning a valid result.
//    

function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;

    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    }; // allow detectFactoryAndVerify to get ownProps


    proxy.dependsOnOwnProps = true;

    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);

      if (typeof props === 'function') {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }

      if (process.env.NODE_ENV !== 'production') Object(__WEBPACK_IMPORTED_MODULE_0__utils_verifyPlainObject__["a" /* default */])(props, displayName, methodName);
      return props;
    };

    return proxy;
  };
}
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = verifyPlainObject;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__isPlainObject__ = __webpack_require__(92);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__warning__ = __webpack_require__(19);


function verifyPlainObject(value, displayName, methodName) {
  if (!Object(__WEBPACK_IMPORTED_MODULE_0__isPlainObject__["a" /* default */])(value)) {
    Object(__WEBPACK_IMPORTED_MODULE_1__warning__["a" /* default */])(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
  }
}

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BrowserRouter__ = __webpack_require__(61);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__BrowserRouter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__HashRouter__ = __webpack_require__(67);
/* unused harmony reexport HashRouter */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Link__ = __webpack_require__(25);
/* unused harmony reexport Link */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__MemoryRouter__ = __webpack_require__(68);
/* unused harmony reexport MemoryRouter */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__NavLink__ = __webpack_require__(69);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_4__NavLink__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Prompt__ = __webpack_require__(71);
/* unused harmony reexport Prompt */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Redirect__ = __webpack_require__(72);
/* unused harmony reexport Redirect */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Route__ = __webpack_require__(27);
/* unused harmony reexport Route */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Router__ = __webpack_require__(16);
/* unused harmony reexport Router */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__StaticRouter__ = __webpack_require__(73);
/* unused harmony reexport StaticRouter */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Switch__ = __webpack_require__(74);
/* unused harmony reexport Switch */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__generatePath__ = __webpack_require__(75);
/* unused harmony reexport generatePath */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__matchPath__ = __webpack_require__(76);
/* unused harmony reexport matchPath */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__withRouter__ = __webpack_require__(77);
/* unused harmony reexport withRouter */





























/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fetchPopularRepos;
/* harmony export (immutable) */ __webpack_exports__["b"] = fetchUser;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_isomorphic_fetch__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_isomorphic_fetch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_isomorphic_fetch__);

function fetchPopularRepos() {
  var language = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';
  var encodedURI = encodeURI("https://api.github.com/search/repositories?q=stars:>1+language:".concat(language, "&sort=stars&order=desc&type=Repositories"));
  return __WEBPACK_IMPORTED_MODULE_0_isomorphic_fetch___default()(encodedURI).then(function (data) {
    return data.json();
  }).then(function (repos) {
    return repos.items;
  }).catch(function (err) {
    console.warn(err);
    return null;
  });
}
function fetchUser() {
  var user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ' ';
  var encodedURI = encodeURI("https://api.github.com/users/".concat(user));
  return __WEBPACK_IMPORTED_MODULE_0_isomorphic_fetch___default()(encodedURI).then(function (data) {
    return data.json();
  }).catch(function (err) {
    console.warn(err);
    return null;
  });
}

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Provider__ = __webpack_require__(79);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_connectAdvanced__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__connect_connect__ = __webpack_require__(85);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__components_Provider__["a"]; });
/* unused harmony reexport createProvider */
/* unused harmony reexport connectAdvanced */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_2__connect_connect__["a"]; });





/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_dom__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shared_reducers__ = __webpack_require__(99);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_redux__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_react_loadable__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_react_loadable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_react_loadable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_redux__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_react_dom__ = __webpack_require__(46);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_react_dom___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_react_dom__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shared_App__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_react__);








var preloadedState = window.__PRELOADED_STATE__;
delete window.__PRELOADED_STATE__;
var store = Object(__WEBPACK_IMPORTED_MODULE_4_redux__["c" /* createStore */])(__WEBPACK_IMPORTED_MODULE_1__shared_reducers__["a" /* default */], preloadedState, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());
__WEBPACK_IMPORTED_MODULE_3_react_loadable___default.a.preloadReady().then(function () {
  Object(__WEBPACK_IMPORTED_MODULE_5_react_dom__["hydrate"])(__WEBPACK_IMPORTED_MODULE_7_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2_react_redux__["a" /* Provider */], {
    store: store
  }, __WEBPACK_IMPORTED_MODULE_7_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_react_router_dom__["a" /* BrowserRouter */], null, __WEBPACK_IMPORTED_MODULE_7_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_6__shared_App__["a" /* default */], {
    data: window.__INITIAL_DATA__
  }))), document.getElementById('app'));
});

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.6.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var k = __webpack_require__(6),
    n = "function" === typeof Symbol && Symbol.for,
    p = n ? Symbol.for("react.element") : 60103,
    q = n ? Symbol.for("react.portal") : 60106,
    r = n ? Symbol.for("react.fragment") : 60107,
    t = n ? Symbol.for("react.strict_mode") : 60108,
    u = n ? Symbol.for("react.profiler") : 60114,
    v = n ? Symbol.for("react.provider") : 60109,
    w = n ? Symbol.for("react.context") : 60110,
    x = n ? Symbol.for("react.concurrent_mode") : 60111,
    y = n ? Symbol.for("react.forward_ref") : 60112,
    z = n ? Symbol.for("react.suspense") : 60113,
    A = n ? Symbol.for("react.memo") : 60115,
    B = n ? Symbol.for("react.lazy") : 60116,
    C = "function" === typeof Symbol && Symbol.iterator;

function aa(a, b, e, c, d, g, h, f) {
  if (!a) {
    a = void 0;
    if (void 0 === b) a = Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
      var l = [e, c, d, g, h, f],
          m = 0;
      a = Error(b.replace(/%s/g, function () {
        return l[m++];
      }));
      a.name = "Invariant Violation";
    }
    a.framesToPop = 1;
    throw a;
  }
}

function D(a) {
  for (var b = arguments.length - 1, e = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 0; c < b; c++) e += "&args[]=" + encodeURIComponent(arguments[c + 1]);

  aa(!1, "Minified React error #" + a + "; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ", e);
}

var E = {
  isMounted: function () {
    return !1;
  },
  enqueueForceUpdate: function () {},
  enqueueReplaceState: function () {},
  enqueueSetState: function () {}
},
    F = {};

function G(a, b, e) {
  this.props = a;
  this.context = b;
  this.refs = F;
  this.updater = e || E;
}

G.prototype.isReactComponent = {};

G.prototype.setState = function (a, b) {
  "object" !== typeof a && "function" !== typeof a && null != a ? D("85") : void 0;
  this.updater.enqueueSetState(this, a, b, "setState");
};

G.prototype.forceUpdate = function (a) {
  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};

function H() {}

H.prototype = G.prototype;

function I(a, b, e) {
  this.props = a;
  this.context = b;
  this.refs = F;
  this.updater = e || E;
}

var J = I.prototype = new H();
J.constructor = I;
k(J, G.prototype);
J.isPureReactComponent = !0;
var K = {
  current: null,
  currentDispatcher: null
},
    L = Object.prototype.hasOwnProperty,
    M = {
  key: !0,
  ref: !0,
  __self: !0,
  __source: !0
};

function N(a, b, e) {
  var c = void 0,
      d = {},
      g = null,
      h = null;
  if (null != b) for (c in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (g = "" + b.key), b) L.call(b, c) && !M.hasOwnProperty(c) && (d[c] = b[c]);
  var f = arguments.length - 2;
  if (1 === f) d.children = e;else if (1 < f) {
    for (var l = Array(f), m = 0; m < f; m++) l[m] = arguments[m + 2];

    d.children = l;
  }
  if (a && a.defaultProps) for (c in f = a.defaultProps, f) void 0 === d[c] && (d[c] = f[c]);
  return {
    $$typeof: p,
    type: a,
    key: g,
    ref: h,
    props: d,
    _owner: K.current
  };
}

function ba(a, b) {
  return {
    $$typeof: p,
    type: a.type,
    key: b,
    ref: a.ref,
    props: a.props,
    _owner: a._owner
  };
}

function O(a) {
  return "object" === typeof a && null !== a && a.$$typeof === p;
}

function escape(a) {
  var b = {
    "=": "=0",
    ":": "=2"
  };
  return "$" + ("" + a).replace(/[=:]/g, function (a) {
    return b[a];
  });
}

var P = /\/+/g,
    Q = [];

function R(a, b, e, c) {
  if (Q.length) {
    var d = Q.pop();
    d.result = a;
    d.keyPrefix = b;
    d.func = e;
    d.context = c;
    d.count = 0;
    return d;
  }

  return {
    result: a,
    keyPrefix: b,
    func: e,
    context: c,
    count: 0
  };
}

function S(a) {
  a.result = null;
  a.keyPrefix = null;
  a.func = null;
  a.context = null;
  a.count = 0;
  10 > Q.length && Q.push(a);
}

function T(a, b, e, c) {
  var d = typeof a;
  if ("undefined" === d || "boolean" === d) a = null;
  var g = !1;
  if (null === a) g = !0;else switch (d) {
    case "string":
    case "number":
      g = !0;
      break;

    case "object":
      switch (a.$$typeof) {
        case p:
        case q:
          g = !0;
      }

  }
  if (g) return e(c, a, "" === b ? "." + U(a, 0) : b), 1;
  g = 0;
  b = "" === b ? "." : b + ":";
  if (Array.isArray(a)) for (var h = 0; h < a.length; h++) {
    d = a[h];
    var f = b + U(d, h);
    g += T(d, f, e, c);
  } else if (null === a || "object" !== typeof a ? f = null : (f = C && a[C] || a["@@iterator"], f = "function" === typeof f ? f : null), "function" === typeof f) for (a = f.call(a), h = 0; !(d = a.next()).done;) d = d.value, f = b + U(d, h++), g += T(d, f, e, c);else "object" === d && (e = "" + a, D("31", "[object Object]" === e ? "object with keys {" + Object.keys(a).join(", ") + "}" : e, ""));
  return g;
}

function V(a, b, e) {
  return null == a ? 0 : T(a, "", b, e);
}

function U(a, b) {
  return "object" === typeof a && null !== a && null != a.key ? escape(a.key) : b.toString(36);
}

function ca(a, b) {
  a.func.call(a.context, b, a.count++);
}

function da(a, b, e) {
  var c = a.result,
      d = a.keyPrefix;
  a = a.func.call(a.context, b, a.count++);
  Array.isArray(a) ? W(a, c, e, function (a) {
    return a;
  }) : null != a && (O(a) && (a = ba(a, d + (!a.key || b && b.key === a.key ? "" : ("" + a.key).replace(P, "$&/") + "/") + e)), c.push(a));
}

function W(a, b, e, c, d) {
  var g = "";
  null != e && (g = ("" + e).replace(P, "$&/") + "/");
  b = R(b, g, c, d);
  V(a, da, b);
  S(b);
}

var X = {
  Children: {
    map: function (a, b, e) {
      if (null == a) return a;
      var c = [];
      W(a, c, null, b, e);
      return c;
    },
    forEach: function (a, b, e) {
      if (null == a) return a;
      b = R(null, null, b, e);
      V(a, ca, b);
      S(b);
    },
    count: function (a) {
      return V(a, function () {
        return null;
      }, null);
    },
    toArray: function (a) {
      var b = [];
      W(a, b, null, function (a) {
        return a;
      });
      return b;
    },
    only: function (a) {
      O(a) ? void 0 : D("143");
      return a;
    }
  },
  createRef: function () {
    return {
      current: null
    };
  },
  Component: G,
  PureComponent: I,
  createContext: function (a, b) {
    void 0 === b && (b = null);
    a = {
      $$typeof: w,
      _calculateChangedBits: b,
      _currentValue: a,
      _currentValue2: a,
      Provider: null,
      Consumer: null
    };
    a.Provider = {
      $$typeof: v,
      _context: a
    };
    return a.Consumer = a;
  },
  forwardRef: function (a) {
    return {
      $$typeof: y,
      render: a
    };
  },
  lazy: function (a) {
    return {
      $$typeof: B,
      _ctor: a,
      _status: -1,
      _result: null
    };
  },
  memo: function (a, b) {
    return {
      $$typeof: A,
      type: a,
      compare: void 0 === b ? null : b
    };
  },
  Fragment: r,
  StrictMode: t,
  unstable_ConcurrentMode: x,
  Suspense: z,
  unstable_Profiler: u,
  createElement: N,
  cloneElement: function (a, b, e) {
    null === a || void 0 === a ? D("267", a) : void 0;
    var c = void 0,
        d = k({}, a.props),
        g = a.key,
        h = a.ref,
        f = a._owner;

    if (null != b) {
      void 0 !== b.ref && (h = b.ref, f = K.current);
      void 0 !== b.key && (g = "" + b.key);
      var l = void 0;
      a.type && a.type.defaultProps && (l = a.type.defaultProps);

      for (c in b) L.call(b, c) && !M.hasOwnProperty(c) && (d[c] = void 0 === b[c] && void 0 !== l ? l[c] : b[c]);
    }

    c = arguments.length - 2;
    if (1 === c) d.children = e;else if (1 < c) {
      l = Array(c);

      for (var m = 0; m < c; m++) l[m] = arguments[m + 2];

      d.children = l;
    }
    return {
      $$typeof: p,
      type: a.type,
      key: g,
      ref: h,
      props: d,
      _owner: f
    };
  },
  createFactory: function (a) {
    var b = N.bind(null, a);
    b.type = a;
    return b;
  },
  isValidElement: O,
  version: "16.6.0",
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    ReactCurrentOwner: K,
    assign: k
  }
},
    Y = {
  default: X
},
    Z = Y && X || Y;
module.exports = Z.default || Z;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.6.0
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    var _assign = __webpack_require__(6);

    var checkPropTypes = __webpack_require__(13); // TODO: this is special because it gets imported during build.


    var ReactVersion = '16.6.0'; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.

    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    }
    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */


    var validateFormat = function () {};

    {
      validateFormat = function (format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;

        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame

        throw error;
      }
    } // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warningWithoutStack = function () {};

    {
      warningWithoutStack = function (condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (args.length > 8) {
          // Check before the condition to catch violations early.
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }

        if (condition) {
          return;
        }

        if (typeof console !== 'undefined') {
          var _args$map = args.map(function (item) {
            return '' + item;
          }),
              a = _args$map[0],
              b = _args$map[1],
              c = _args$map[2],
              d = _args$map[3],
              e = _args$map[4],
              f = _args$map[5],
              g = _args$map[6],
              h = _args$map[7];

          var message = 'Warning: ' + format; // We intentionally don't use spread (or .apply) because it breaks IE9:
          // https://github.com/facebook/react/issues/13610

          switch (args.length) {
            case 0:
              console.error(message);
              break;

            case 1:
              console.error(message, a);
              break;

            case 2:
              console.error(message, a, b);
              break;

            case 3:
              console.error(message, a, b, c);
              break;

            case 4:
              console.error(message, a, b, c, d);
              break;

            case 5:
              console.error(message, a, b, c, d, e);
              break;

            case 6:
              console.error(message, a, b, c, d, e, f);
              break;

            case 7:
              console.error(message, a, b, c, d, e, f, g);
              break;

            case 8:
              console.error(message, a, b, c, d, e, f, g, h);
              break;

            default:
              throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
          }
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;

          var _message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });

          throw new Error(_message);
        } catch (x) {}
      };
    }
    var warningWithoutStack$1 = warningWithoutStack;
    var didWarnStateUpdateForUnmountedComponent = {};

    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + '.' + callerName;

        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }

        warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }
    /**
     * This is the abstract API for an update queue.
     */


    var ReactNoopUpdateQueue = {
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function (publicInstance) {
        return false;
      },

      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueForceUpdate: function (publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },

      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },

      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
      enqueueSetState: function (publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };
    var emptyObject = {};
    {
      Object.freeze(emptyObject);
    }
    /**
     * Base class helpers for the updating state of a component.
     */

    function Component(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
      // renderer.

      this.updater = updater || ReactNoopUpdateQueue;
    }

    Component.prototype.isReactComponent = {};
    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */

    Component.prototype.setState = function (partialState, callback) {
      !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */


    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */


    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };

      var defineDeprecationWarning = function (methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function () {
            lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };

      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }

    function ComponentDummy() {}

    ComponentDummy.prototype = Component.prototype;
    /**
     * Convenience component with default shallow equality check for sCU.
     */

    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }

    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

    _assign(pureComponentPrototype, Component.prototype);

    pureComponentPrototype.isPureReactComponent = true; // an immutable object with a single mutable value

    function createRef() {
      var refObject = {
        current: null
      };
      {
        Object.seal(refObject);
      }
      return refObject;
    }
    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */


    var ReactCurrentOwner = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null,
      currentDispatcher: null
    };
    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function (name, source, ownerName) {
      var sourceInfo = '';

      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }

      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };

    var Resolved = 1;

    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_CONCURRENT_MODE_TYPE:
          return 'ConcurrentMode';

        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return 'Profiler';

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';

          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';

          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');

          case REACT_MEMO_TYPE:
            return getComponentName(type.type);

          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);

              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
            }
        }
      }

      return null;
    }

    var ReactDebugCurrentFrame = {};
    var currentlyValidatingElement = null;

    function setCurrentlyValidatingElement(element) {
      {
        currentlyValidatingElement = element;
      }
    }

    {
      // Stack implementation injected by the current renderer.
      ReactDebugCurrentFrame.getCurrentStack = null;

      ReactDebugCurrentFrame.getStackAddendum = function () {
        var stack = ''; // Add an extra top frame while an element is being validated

        if (currentlyValidatingElement) {
          var name = getComponentName(currentlyValidatingElement.type);
          var owner = currentlyValidatingElement._owner;
          stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
        } // Delegate to the injected renderer-specific implementation


        var impl = ReactDebugCurrentFrame.getCurrentStack;

        if (impl) {
          stack += impl() || '';
        }

        return stack;
      };
    }
    var ReactSharedInternals = {
      ReactCurrentOwner: ReactCurrentOwner,
      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
      assign: _assign
    };
    {
      _assign(ReactSharedInternals, {
        // These should not be included in production.
        ReactDebugCurrentFrame: ReactDebugCurrentFrame,
        // Shim for React DOM 16.0.0 which still destructured (but not used) this.
        // TODO: remove in React 17.0.
        ReactComponentTreeHook: {}
      });
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warning = warningWithoutStack$1;
    {
      warning = function (condition, format) {
        if (condition) {
          return;
        }

        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }
    var warning$1 = warning;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown = void 0;
    var specialPropRefWarningShown = void 0;

    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }

    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }

    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function () {
        if (!specialPropKeyWarningShown) {
          specialPropKeyWarningShown = true;
          warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };

      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }

    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function () {
        if (!specialPropRefWarningShown) {
          specialPropRefWarningShown = true;
          warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };

      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }
    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, no instanceof check
     * will work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} key
     * @param {string|object} ref
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @param {*} owner
     * @param {*} props
     * @internal
     */


    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.

        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }); // self and source are DEV only properties.

        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.

        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });

        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */


    function createElement(type, config, children) {
      var propName = void 0; // Reserved names are extracted

      var props = {};
      var key = null;
      var ref = null;
      var self = null;
      var source = null;

      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      } // Resolve default props


      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;

        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }

      {
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }

          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    /**
     * Return a function that produces ReactElements of a given type.
     * See https://reactjs.org/docs/react-api.html#createfactory
     */


    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
      return newElement;
    }
    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */


    function cloneElement(element, config, children) {
      !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;
      var propName = void 0; // Original props are copied

      var props = _assign({}, element.props); // Reserved names are extracted


      var key = element.key;
      var ref = element.ref; // Self is preserved since the owner is preserved.

      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.

      var source = element._source; // Owner will be preserved, unless ref is overridden

      var owner = element._owner;

      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        } // Remaining properties override existing props


        var defaultProps = void 0;

        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        props.children = childArray;
      }

      return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */


    function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */

    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = ('' + key).replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });
      return '$' + escapedString;
    }
    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */


    var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;

    function escapeUserProvidedKey(text) {
      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }

    var POOL_SIZE = 10;
    var traverseContextPool = [];

    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
      if (traverseContextPool.length) {
        var traverseContext = traverseContextPool.pop();
        traverseContext.result = mapResult;
        traverseContext.keyPrefix = keyPrefix;
        traverseContext.func = mapFunction;
        traverseContext.context = mapContext;
        traverseContext.count = 0;
        return traverseContext;
      } else {
        return {
          result: mapResult,
          keyPrefix: keyPrefix,
          func: mapFunction,
          context: mapContext,
          count: 0
        };
      }
    }

    function releaseTraverseContext(traverseContext) {
      traverseContext.result = null;
      traverseContext.keyPrefix = null;
      traverseContext.func = null;
      traverseContext.context = null;
      traverseContext.count = 0;

      if (traverseContextPool.length < POOL_SIZE) {
        traverseContextPool.push(traverseContext);
      }
    }
    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
      var type = typeof children;

      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }

      var invokeCallback = false;

      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;

          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }

        }
      }

      if (invokeCallback) {
        callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows.
        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
        return 1;
      }

      var child = void 0;
      var nextName = void 0;
      var subtreeCount = 0; // Count of children found in the current subtree.

      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getComponentKey(child, i);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          {
            // Warn about using Maps as children
            if (iteratorFn === children.entries) {
              !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
              didWarnAboutMaps = true;
            }
          }
          var iterator = iteratorFn.call(children);
          var step = void 0;
          var ii = 0;

          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else if (type === 'object') {
          var addendum = '';
          {
            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
          }
          var childrenString = '' + children;
          invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
        }
      }

      return subtreeCount;
    }
    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildren(children, callback, traverseContext) {
      if (children == null) {
        return 0;
      }

      return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }
    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */


    function getComponentKey(component, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (typeof component === 'object' && component !== null && component.key != null) {
        // Explicit key
        return escape(component.key);
      } // Implicit key determined by the index in the set


      return index.toString(36);
    }

    function forEachSingleChild(bookKeeping, child, name) {
      var func = bookKeeping.func,
          context = bookKeeping.context;
      func.call(context, child, bookKeeping.count++);
    }
    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */


    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }

      var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
      var result = bookKeeping.result,
          keyPrefix = bookKeeping.keyPrefix,
          func = bookKeeping.func,
          context = bookKeeping.context;
      var mappedChild = func.call(context, child, bookKeeping.count++);

      if (Array.isArray(mappedChild)) {
        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
          return c;
        });
      } else if (mappedChild != null) {
        if (isValidElement(mappedChild)) {
          mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
          // traverseAllChildren used to do for objects as children
          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
        }

        result.push(mappedChild);
      }
    }

    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
      var escapedPrefix = '';

      if (prefix != null) {
        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
      }

      var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      releaseTraverseContext(traverseContext);
    }
    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */


    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }

      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, func, context);
      return result;
    }
    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */


    function countChildren(children) {
      return traverseAllChildren(children, function () {
        return null;
      }, null);
    }
    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */


    function toArray(children) {
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
        return child;
      });
      return result;
    }
    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */


    function onlyChild(children) {
      !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
      return children;
    }

    function createContext(defaultValue, calculateChangedBits) {
      if (calculateChangedBits === undefined) {
        calculateChangedBits = null;
      } else {
        {
          !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
        }
      }

      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        _calculateChangedBits: calculateChangedBits,
        // As a workaround to support multiple concurrent renderers, we categorize
        // some renderers as primary and others as secondary. We only expect
        // there to be two concurrent renderers at most: React Native (primary) and
        // Fabric (secondary); React DOM (primary) and React ART (secondary).
        // Secondary renderers store their context values on separate fields.
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        // These are circular
        Provider: null,
        Consumer: null
      };
      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };
      var hasWarnedAboutUsingNestedContextConsumers = false;
      var hasWarnedAboutUsingConsumerProvider = false;
      {
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
          $$typeof: REACT_CONTEXT_TYPE,
          _context: context,
          _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

        Object.defineProperties(Consumer, {
          Provider: {
            get: function () {
              if (!hasWarnedAboutUsingConsumerProvider) {
                hasWarnedAboutUsingConsumerProvider = true;
                warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
              }

              return context.Provider;
            },
            set: function (_Provider) {
              context.Provider = _Provider;
            }
          },
          _currentValue: {
            get: function () {
              return context._currentValue;
            },
            set: function (_currentValue) {
              context._currentValue = _currentValue;
            }
          },
          _currentValue2: {
            get: function () {
              return context._currentValue2;
            },
            set: function (_currentValue2) {
              context._currentValue2 = _currentValue2;
            }
          },
          Consumer: {
            get: function () {
              if (!hasWarnedAboutUsingNestedContextConsumers) {
                hasWarnedAboutUsingNestedContextConsumers = true;
                warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
              }

              return context.Consumer;
            }
          }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

        context.Consumer = Consumer;
      }
      {
        context._currentRenderer = null;
        context._currentRenderer2 = null;
      }
      return context;
    }

    function lazy(ctor) {
      return {
        $$typeof: REACT_LAZY_TYPE,
        _ctor: ctor,
        // React uses these fields to store the result.
        _status: -1,
        _result: null
      };
    }

    function forwardRef(render) {
      {
        if (typeof render !== 'function') {
          warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        } else {
          !( // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
          render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
        }

        if (render != null) {
          !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
        }
      }
      return {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
      };
    }

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }

    function memo(type, compare) {
      {
        if (!isValidElementType(type)) {
          warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
        }
      }
      return {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: compare === undefined ? null : compare
      };
    }
    /**
     * ReactElementValidator provides a wrapper around a element factory
     * which validates the props passed to the element. This is intended to be
     * used only in DEV and could be replaced by a static type checker for languages
     * that support it.
     */


    var propTypesMisspellWarningShown = void 0;
    {
      propTypesMisspellWarningShown = false;
    }

    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentName(ReactCurrentOwner.current.type);

        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }

      return '';
    }

    function getSourceInfoErrorAddendum(elementProps) {
      if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
        var source = elementProps.__source;
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }

      return '';
    }
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */


    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();

      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

        if (parentName) {
          info = '\n\nCheck the top-level render call using <' + parentName + '>.';
        }
      }

      return info;
    }
    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */


    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }

      element._store.validated = true;
      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.

      var childOwner = '';

      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
      }

      setCurrentlyValidatingElement(element);
      {
        warning$1(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
      }
      setCurrentlyValidatingElement(null);
    }
    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */


    function validateChildKeys(node, parentType) {
      if (typeof node !== 'object') {
        return;
      }

      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];

          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);

        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step = void 0;

            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }
    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */


    function validatePropTypes(element) {
      var type = element.type;
      var name = void 0,
          propTypes = void 0;

      if (typeof type === 'function') {
        // Class or function component
        name = type.displayName || type.name;
        propTypes = type.propTypes;
      } else if (typeof type === 'object' && type !== null && type.$$typeof === REACT_FORWARD_REF_TYPE) {
        // ForwardRef
        var functionName = type.render.displayName || type.render.name || '';
        name = type.displayName || (functionName !== '' ? 'ForwardRef(' + functionName + ')' : 'ForwardRef');
        propTypes = type.propTypes;
      } else {
        return;
      }

      if (propTypes) {
        setCurrentlyValidatingElement(element);
        checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
        setCurrentlyValidatingElement(null);
      } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
        propTypesMisspellWarningShown = true;
        warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
      }

      if (typeof type.getDefaultProps === 'function') {
        !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
      }
    }
    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */


    function validateFragmentProps(fragment) {
      setCurrentlyValidatingElement(fragment);
      var keys = Object.keys(fragment.props);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (key !== 'children' && key !== 'key') {
          warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
          break;
        }
      }

      if (fragment.ref !== null) {
        warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
      }

      setCurrentlyValidatingElement(null);
    }

    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.

      if (!validType) {
        var info = '';

        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);

        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        var typeString = void 0;

        if (type === null) {
          typeString = 'null';
        } else if (Array.isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = typeof type;
        }

        warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
      }

      var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.

      if (element == null) {
        return element;
      } // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)


      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }

      if (type === REACT_FRAGMENT_TYPE) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }

      return element;
    }

    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type; // Legacy hook: remove it

      {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
      return validatedFactory;
    }

    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);

      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }

      validatePropTypes(newElement);
      return newElement;
    }

    var React = {
      Children: {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
      },
      createRef: createRef,
      Component: Component,
      PureComponent: PureComponent,
      createContext: createContext,
      forwardRef: forwardRef,
      lazy: lazy,
      memo: memo,
      Fragment: REACT_FRAGMENT_TYPE,
      StrictMode: REACT_STRICT_MODE_TYPE,
      unstable_ConcurrentMode: REACT_CONCURRENT_MODE_TYPE,
      Suspense: REACT_SUSPENSE_TYPE,
      unstable_Profiler: REACT_PROFILER_TYPE,
      createElement: createElementWithValidation,
      cloneElement: cloneElementWithValidation,
      createFactory: createFactoryWithValidation,
      isValidElement: isValidElement,
      version: ReactVersion,
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
    };
    var React$2 = Object.freeze({
      default: React
    });
    var React$3 = React$2 && React || React$2; // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.

    var react = React$3.default || React$3;
    module.exports = react;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }

  if (process.env.NODE_ENV !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }

  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (process.env.NODE_ENV === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(47);
} else {
  module.exports = __webpack_require__(50);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.6.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/


var aa = __webpack_require__(0),
    n = __webpack_require__(6),
    da = __webpack_require__(22);

function ea(a, b, c, d, e, f, g, h) {
  if (!a) {
    a = void 0;
    if (void 0 === b) a = Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {
      var k = [c, d, e, f, g, h],
          l = 0;
      a = Error(b.replace(/%s/g, function () {
        return k[l++];
      }));
      a.name = "Invariant Violation";
    }
    a.framesToPop = 1;
    throw a;
  }
}

function r(a) {
  for (var b = arguments.length - 1, c = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, d = 0; d < b; d++) c += "&args[]=" + encodeURIComponent(arguments[d + 1]);

  ea(!1, "Minified React error #" + a + "; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ", c);
}

aa ? void 0 : r("227");

function fa(a, b, c, d, e, f, g, h, k) {
  var l = Array.prototype.slice.call(arguments, 3);

  try {
    b.apply(c, l);
  } catch (m) {
    this.onError(m);
  }
}

var ha = !1,
    ia = null,
    ja = !1,
    ka = null,
    la = {
  onError: function (a) {
    ha = !0;
    ia = a;
  }
};

function ma(a, b, c, d, e, f, g, h, k) {
  ha = !1;
  ia = null;
  fa.apply(la, arguments);
}

function na(a, b, c, d, e, f, g, h, k) {
  ma.apply(this, arguments);

  if (ha) {
    if (ha) {
      var l = ia;
      ha = !1;
      ia = null;
    } else r("198"), l = void 0;

    ja || (ja = !0, ka = l);
  }
}

var oa = null,
    pa = {};

function qa() {
  if (oa) for (var a in pa) {
    var b = pa[a],
        c = oa.indexOf(a);
    -1 < c ? void 0 : r("96", a);

    if (!ra[c]) {
      b.extractEvents ? void 0 : r("97", a);
      ra[c] = b;
      c = b.eventTypes;

      for (var d in c) {
        var e = void 0;
        var f = c[d],
            g = b,
            h = d;
        sa.hasOwnProperty(h) ? r("99", h) : void 0;
        sa[h] = f;
        var k = f.phasedRegistrationNames;

        if (k) {
          for (e in k) k.hasOwnProperty(e) && ta(k[e], g, h);

          e = !0;
        } else f.registrationName ? (ta(f.registrationName, g, h), e = !0) : e = !1;

        e ? void 0 : r("98", d, a);
      }
    }
  }
}

function ta(a, b, c) {
  ua[a] ? r("100", a) : void 0;
  ua[a] = b;
  va[a] = b.eventTypes[c].dependencies;
}

var ra = [],
    sa = {},
    ua = {},
    va = {},
    wa = null,
    xa = null,
    ya = null;

function za(a, b, c, d) {
  b = a.type || "unknown-event";
  a.currentTarget = ya(d);
  na(b, c, void 0, a);
  a.currentTarget = null;
}

function Aa(a, b) {
  null == b ? r("30") : void 0;
  if (null == a) return b;

  if (Array.isArray(a)) {
    if (Array.isArray(b)) return a.push.apply(a, b), a;
    a.push(b);
    return a;
  }

  return Array.isArray(b) ? [a].concat(b) : [a, b];
}

function Ba(a, b, c) {
  Array.isArray(a) ? a.forEach(b, c) : a && b.call(c, a);
}

var Ca = null;

function Da(a, b) {
  if (a) {
    var c = a._dispatchListeners,
        d = a._dispatchInstances;
    if (Array.isArray(c)) for (var e = 0; e < c.length && !a.isPropagationStopped(); e++) za(a, b, c[e], d[e]);else c && za(a, b, c, d);
    a._dispatchListeners = null;
    a._dispatchInstances = null;
    a.isPersistent() || a.constructor.release(a);
  }
}

function Ea(a) {
  return Da(a, !0);
}

function Fa(a) {
  return Da(a, !1);
}

var Ga = {
  injectEventPluginOrder: function (a) {
    oa ? r("101") : void 0;
    oa = Array.prototype.slice.call(a);
    qa();
  },
  injectEventPluginsByName: function (a) {
    var b = !1,
        c;

    for (c in a) if (a.hasOwnProperty(c)) {
      var d = a[c];
      pa.hasOwnProperty(c) && pa[c] === d || (pa[c] ? r("102", c) : void 0, pa[c] = d, b = !0);
    }

    b && qa();
  }
};

function Ha(a, b) {
  var c = a.stateNode;
  if (!c) return null;
  var d = wa(c);
  if (!d) return null;
  c = d[b];

  a: switch (b) {
    case "onClick":
    case "onClickCapture":
    case "onDoubleClick":
    case "onDoubleClickCapture":
    case "onMouseDown":
    case "onMouseDownCapture":
    case "onMouseMove":
    case "onMouseMoveCapture":
    case "onMouseUp":
    case "onMouseUpCapture":
      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
      a = !d;
      break a;

    default:
      a = !1;
  }

  if (a) return null;
  c && "function" !== typeof c ? r("231", b, typeof c) : void 0;
  return c;
}

function Ia(a, b) {
  null !== a && (Ca = Aa(Ca, a));
  a = Ca;
  Ca = null;
  if (a && (b ? Ba(a, Ea) : Ba(a, Fa), Ca ? r("95") : void 0, ja)) throw b = ka, ja = !1, ka = null, b;
}

var Ka = Math.random().toString(36).slice(2),
    La = "__reactInternalInstance$" + Ka,
    Ma = "__reactEventHandlers$" + Ka;

function Na(a) {
  if (a[La]) return a[La];

  for (; !a[La];) if (a.parentNode) a = a.parentNode;else return null;

  a = a[La];
  return 5 === a.tag || 6 === a.tag ? a : null;
}

function Oa(a) {
  a = a[La];
  return !a || 5 !== a.tag && 6 !== a.tag ? null : a;
}

function Pa(a) {
  if (5 === a.tag || 6 === a.tag) return a.stateNode;
  r("33");
}

function Qa(a) {
  return a[Ma] || null;
}

function Ra(a) {
  do a = a.return; while (a && 5 !== a.tag);

  return a ? a : null;
}

function Sa(a, b, c) {
  if (b = Ha(a, c.dispatchConfig.phasedRegistrationNames[b])) c._dispatchListeners = Aa(c._dispatchListeners, b), c._dispatchInstances = Aa(c._dispatchInstances, a);
}

function Ta(a) {
  if (a && a.dispatchConfig.phasedRegistrationNames) {
    for (var b = a._targetInst, c = []; b;) c.push(b), b = Ra(b);

    for (b = c.length; 0 < b--;) Sa(c[b], "captured", a);

    for (b = 0; b < c.length; b++) Sa(c[b], "bubbled", a);
  }
}

function Ua(a, b, c) {
  a && c && c.dispatchConfig.registrationName && (b = Ha(a, c.dispatchConfig.registrationName)) && (c._dispatchListeners = Aa(c._dispatchListeners, b), c._dispatchInstances = Aa(c._dispatchInstances, a));
}

function Va(a) {
  a && a.dispatchConfig.registrationName && Ua(a._targetInst, null, a);
}

function Wa(a) {
  Ba(a, Ta);
}

var Xa = !("undefined" === typeof window || !window.document || !window.document.createElement);

function Ya(a, b) {
  var c = {};
  c[a.toLowerCase()] = b.toLowerCase();
  c["Webkit" + a] = "webkit" + b;
  c["Moz" + a] = "moz" + b;
  return c;
}

var Za = {
  animationend: Ya("Animation", "AnimationEnd"),
  animationiteration: Ya("Animation", "AnimationIteration"),
  animationstart: Ya("Animation", "AnimationStart"),
  transitionend: Ya("Transition", "TransitionEnd")
},
    $a = {},
    ab = {};
Xa && (ab = document.createElement("div").style, "AnimationEvent" in window || (delete Za.animationend.animation, delete Za.animationiteration.animation, delete Za.animationstart.animation), "TransitionEvent" in window || delete Za.transitionend.transition);

function bb(a) {
  if ($a[a]) return $a[a];
  if (!Za[a]) return a;
  var b = Za[a],
      c;

  for (c in b) if (b.hasOwnProperty(c) && c in ab) return $a[a] = b[c];

  return a;
}

var cb = bb("animationend"),
    ib = bb("animationiteration"),
    jb = bb("animationstart"),
    kb = bb("transitionend"),
    lb = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
    mb = null,
    nb = null,
    ob = null;

function pb() {
  if (ob) return ob;
  var a,
      b = nb,
      c = b.length,
      d,
      e = "value" in mb ? mb.value : mb.textContent,
      f = e.length;

  for (a = 0; a < c && b[a] === e[a]; a++);

  var g = c - a;

  for (d = 1; d <= g && b[c - d] === e[f - d]; d++);

  return ob = e.slice(a, 1 < d ? 1 - d : void 0);
}

function qb() {
  return !0;
}

function rb() {
  return !1;
}

function y(a, b, c, d) {
  this.dispatchConfig = a;
  this._targetInst = b;
  this.nativeEvent = c;
  a = this.constructor.Interface;

  for (var e in a) a.hasOwnProperty(e) && ((b = a[e]) ? this[e] = b(c) : "target" === e ? this.target = d : this[e] = c[e]);

  this.isDefaultPrevented = (null != c.defaultPrevented ? c.defaultPrevented : !1 === c.returnValue) ? qb : rb;
  this.isPropagationStopped = rb;
  return this;
}

n(y.prototype, {
  preventDefault: function () {
    this.defaultPrevented = !0;
    var a = this.nativeEvent;
    a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = qb);
  },
  stopPropagation: function () {
    var a = this.nativeEvent;
    a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = qb);
  },
  persist: function () {
    this.isPersistent = qb;
  },
  isPersistent: rb,
  destructor: function () {
    var a = this.constructor.Interface,
        b;

    for (b in a) this[b] = null;

    this.nativeEvent = this._targetInst = this.dispatchConfig = null;
    this.isPropagationStopped = this.isDefaultPrevented = rb;
    this._dispatchInstances = this._dispatchListeners = null;
  }
});
y.Interface = {
  type: null,
  target: null,
  currentTarget: function () {
    return null;
  },
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (a) {
    return a.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

y.extend = function (a) {
  function b() {}

  function c() {
    return d.apply(this, arguments);
  }

  var d = this;
  b.prototype = d.prototype;
  var e = new b();
  n(e, c.prototype);
  c.prototype = e;
  c.prototype.constructor = c;
  c.Interface = n({}, d.Interface, a);
  c.extend = d.extend;
  sb(c);
  return c;
};

sb(y);

function tb(a, b, c, d) {
  if (this.eventPool.length) {
    var e = this.eventPool.pop();
    this.call(e, a, b, c, d);
    return e;
  }

  return new this(a, b, c, d);
}

function ub(a) {
  a instanceof this ? void 0 : r("279");
  a.destructor();
  10 > this.eventPool.length && this.eventPool.push(a);
}

function sb(a) {
  a.eventPool = [];
  a.getPooled = tb;
  a.release = ub;
}

var vb = y.extend({
  data: null
}),
    wb = y.extend({
  data: null
}),
    xb = [9, 13, 27, 32],
    yb = Xa && "CompositionEvent" in window,
    zb = null;
Xa && "documentMode" in document && (zb = document.documentMode);
var Ab = Xa && "TextEvent" in window && !zb,
    Bb = Xa && (!yb || zb && 8 < zb && 11 >= zb),
    Cb = String.fromCharCode(32),
    Db = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: "onBeforeInput",
      captured: "onBeforeInputCapture"
    },
    dependencies: ["compositionend", "keypress", "textInput", "paste"]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: "onCompositionEnd",
      captured: "onCompositionEndCapture"
    },
    dependencies: "blur compositionend keydown keypress keyup mousedown".split(" ")
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: "onCompositionStart",
      captured: "onCompositionStartCapture"
    },
    dependencies: "blur compositionstart keydown keypress keyup mousedown".split(" ")
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: "onCompositionUpdate",
      captured: "onCompositionUpdateCapture"
    },
    dependencies: "blur compositionupdate keydown keypress keyup mousedown".split(" ")
  }
},
    Eb = !1;

function Fb(a, b) {
  switch (a) {
    case "keyup":
      return -1 !== xb.indexOf(b.keyCode);

    case "keydown":
      return 229 !== b.keyCode;

    case "keypress":
    case "mousedown":
    case "blur":
      return !0;

    default:
      return !1;
  }
}

function Gb(a) {
  a = a.detail;
  return "object" === typeof a && "data" in a ? a.data : null;
}

var Hb = !1;

function Kb(a, b) {
  switch (a) {
    case "compositionend":
      return Gb(b);

    case "keypress":
      if (32 !== b.which) return null;
      Eb = !0;
      return Cb;

    case "textInput":
      return a = b.data, a === Cb && Eb ? null : a;

    default:
      return null;
  }
}

function Lb(a, b) {
  if (Hb) return "compositionend" === a || !yb && Fb(a, b) ? (a = pb(), ob = nb = mb = null, Hb = !1, a) : null;

  switch (a) {
    case "paste":
      return null;

    case "keypress":
      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
        if (b.char && 1 < b.char.length) return b.char;
        if (b.which) return String.fromCharCode(b.which);
      }

      return null;

    case "compositionend":
      return Bb && "ko" !== b.locale ? null : b.data;

    default:
      return null;
  }
}

var Mb = {
  eventTypes: Db,
  extractEvents: function (a, b, c, d) {
    var e = void 0;
    var f = void 0;
    if (yb) b: {
      switch (a) {
        case "compositionstart":
          e = Db.compositionStart;
          break b;

        case "compositionend":
          e = Db.compositionEnd;
          break b;

        case "compositionupdate":
          e = Db.compositionUpdate;
          break b;
      }

      e = void 0;
    } else Hb ? Fb(a, c) && (e = Db.compositionEnd) : "keydown" === a && 229 === c.keyCode && (e = Db.compositionStart);
    e ? (Bb && "ko" !== c.locale && (Hb || e !== Db.compositionStart ? e === Db.compositionEnd && Hb && (f = pb()) : (mb = d, nb = "value" in mb ? mb.value : mb.textContent, Hb = !0)), e = vb.getPooled(e, b, c, d), f ? e.data = f : (f = Gb(c), null !== f && (e.data = f)), Wa(e), f = e) : f = null;
    (a = Ab ? Kb(a, c) : Lb(a, c)) ? (b = wb.getPooled(Db.beforeInput, b, c, d), b.data = a, Wa(b)) : b = null;
    return null === f ? b : null === b ? f : [f, b];
  }
},
    Nb = null,
    Ob = null,
    Pb = null;

function Vb(a) {
  if (a = xa(a)) {
    "function" !== typeof Nb ? r("280") : void 0;
    var b = wa(a.stateNode);
    Nb(a.stateNode, a.type, b);
  }
}

function Wb(a) {
  Ob ? Pb ? Pb.push(a) : Pb = [a] : Ob = a;
}

function Xb() {
  if (Ob) {
    var a = Ob,
        b = Pb;
    Pb = Ob = null;
    Vb(a);
    if (b) for (a = 0; a < b.length; a++) Vb(b[a]);
  }
}

function Yb(a, b) {
  return a(b);
}

function Zb(a, b, c) {
  return a(b, c);
}

function $b() {}

var ac = !1;

function bc(a, b) {
  if (ac) return a(b);
  ac = !0;

  try {
    return Yb(a, b);
  } finally {
    if (ac = !1, null !== Ob || null !== Pb) $b(), Xb();
  }
}

var cc = {
  color: !0,
  date: !0,
  datetime: !0,
  "datetime-local": !0,
  email: !0,
  month: !0,
  number: !0,
  password: !0,
  range: !0,
  search: !0,
  tel: !0,
  text: !0,
  time: !0,
  url: !0,
  week: !0
};

function dc(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return "input" === b ? !!cc[a.type] : "textarea" === b ? !0 : !1;
}

function ec(a) {
  a = a.target || a.srcElement || window;
  a.correspondingUseElement && (a = a.correspondingUseElement);
  return 3 === a.nodeType ? a.parentNode : a;
}

function fc(a) {
  if (!Xa) return !1;
  a = "on" + a;
  var b = a in document;
  b || (b = document.createElement("div"), b.setAttribute(a, "return;"), b = "function" === typeof b[a]);
  return b;
}

function gc(a) {
  var b = a.type;
  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}

function hc(a) {
  var b = gc(a) ? "checked" : "value",
      c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
      d = "" + a[b];

  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
    var e = c.get,
        f = c.set;
    Object.defineProperty(a, b, {
      configurable: !0,
      get: function () {
        return e.call(this);
      },
      set: function (a) {
        d = "" + a;
        f.call(this, a);
      }
    });
    Object.defineProperty(a, b, {
      enumerable: c.enumerable
    });
    return {
      getValue: function () {
        return d;
      },
      setValue: function (a) {
        d = "" + a;
      },
      stopTracking: function () {
        a._valueTracker = null;
        delete a[b];
      }
    };
  }
}

function ic(a) {
  a._valueTracker || (a._valueTracker = hc(a));
}

function jc(a) {
  if (!a) return !1;
  var b = a._valueTracker;
  if (!b) return !0;
  var c = b.getValue();
  var d = "";
  a && (d = gc(a) ? a.checked ? "true" : "false" : a.value);
  a = d;
  return a !== c ? (b.setValue(a), !0) : !1;
}

var kc = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    lc = /^(.*)[\\\/]/,
    D = "function" === typeof Symbol && Symbol.for,
    mc = D ? Symbol.for("react.element") : 60103,
    nc = D ? Symbol.for("react.portal") : 60106,
    oc = D ? Symbol.for("react.fragment") : 60107,
    pc = D ? Symbol.for("react.strict_mode") : 60108,
    qc = D ? Symbol.for("react.profiler") : 60114,
    rc = D ? Symbol.for("react.provider") : 60109,
    sc = D ? Symbol.for("react.context") : 60110,
    tc = D ? Symbol.for("react.concurrent_mode") : 60111,
    uc = D ? Symbol.for("react.forward_ref") : 60112,
    vc = D ? Symbol.for("react.suspense") : 60113,
    wc = D ? Symbol.for("react.memo") : 60115,
    xc = D ? Symbol.for("react.lazy") : 60116,
    yc = "function" === typeof Symbol && Symbol.iterator;

function zc(a) {
  if (null === a || "object" !== typeof a) return null;
  a = yc && a[yc] || a["@@iterator"];
  return "function" === typeof a ? a : null;
}

function Ac(a) {
  if (null == a) return null;
  if ("function" === typeof a) return a.displayName || a.name || null;
  if ("string" === typeof a) return a;

  switch (a) {
    case tc:
      return "ConcurrentMode";

    case oc:
      return "Fragment";

    case nc:
      return "Portal";

    case qc:
      return "Profiler";

    case pc:
      return "StrictMode";

    case vc:
      return "Suspense";
  }

  if ("object" === typeof a) switch (a.$$typeof) {
    case sc:
      return "Context.Consumer";

    case rc:
      return "Context.Provider";

    case uc:
      var b = a.render;
      b = b.displayName || b.name || "";
      return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");

    case wc:
      return Ac(a.type);

    case xc:
      if (a = 1 === a._status ? a._result : null) return Ac(a);
  }
  return null;
}

function Bc(a) {
  var b = "";

  do {
    a: switch (a.tag) {
      case 2:
      case 16:
      case 0:
      case 1:
      case 5:
      case 8:
        var c = a._debugOwner,
            d = a._debugSource,
            e = Ac(a.type);
        var f = null;
        c && (f = Ac(c.type));
        c = e;
        e = "";
        d ? e = " (at " + d.fileName.replace(lc, "") + ":" + d.lineNumber + ")" : f && (e = " (created by " + f + ")");
        f = "\n    in " + (c || "Unknown") + e;
        break a;

      default:
        f = "";
    }

    b += f;
    a = a.return;
  } while (a);

  return b;
}

var Cc = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
    Dc = Object.prototype.hasOwnProperty,
    Ec = {},
    Fc = {};

function Gc(a) {
  if (Dc.call(Fc, a)) return !0;
  if (Dc.call(Ec, a)) return !1;
  if (Cc.test(a)) return Fc[a] = !0;
  Ec[a] = !0;
  return !1;
}

function Hc(a, b, c, d) {
  if (null !== c && 0 === c.type) return !1;

  switch (typeof b) {
    case "function":
    case "symbol":
      return !0;

    case "boolean":
      if (d) return !1;
      if (null !== c) return !c.acceptsBooleans;
      a = a.toLowerCase().slice(0, 5);
      return "data-" !== a && "aria-" !== a;

    default:
      return !1;
  }
}

function Ic(a, b, c, d) {
  if (null === b || "undefined" === typeof b || Hc(a, b, c, d)) return !0;
  if (d) return !1;
  if (null !== c) switch (c.type) {
    case 3:
      return !b;

    case 4:
      return !1 === b;

    case 5:
      return isNaN(b);

    case 6:
      return isNaN(b) || 1 > b;
  }
  return !1;
}

function F(a, b, c, d, e) {
  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
  this.attributeName = d;
  this.attributeNamespace = e;
  this.mustUseProperty = c;
  this.propertyName = a;
  this.type = b;
}

var G = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
  G[a] = new F(a, 0, !1, a, null);
});
[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
  var b = a[0];
  G[b] = new F(b, 1, !1, a[1], null);
});
["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
  G[a] = new F(a, 2, !1, a.toLowerCase(), null);
});
["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
  G[a] = new F(a, 2, !1, a, null);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
  G[a] = new F(a, 3, !1, a.toLowerCase(), null);
});
["checked", "multiple", "muted", "selected"].forEach(function (a) {
  G[a] = new F(a, 3, !0, a, null);
});
["capture", "download"].forEach(function (a) {
  G[a] = new F(a, 4, !1, a, null);
});
["cols", "rows", "size", "span"].forEach(function (a) {
  G[a] = new F(a, 6, !1, a, null);
});
["rowSpan", "start"].forEach(function (a) {
  G[a] = new F(a, 5, !1, a.toLowerCase(), null);
});
var Mc = /[\-:]([a-z])/g;

function Nc(a) {
  return a[1].toUpperCase();
}

"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
  var b = a.replace(Mc, Nc);
  G[b] = new F(b, 1, !1, a, null);
});
"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
  var b = a.replace(Mc, Nc);
  G[b] = new F(b, 1, !1, a, "http://www.w3.org/1999/xlink");
});
["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
  var b = a.replace(Mc, Nc);
  G[b] = new F(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace");
});
G.tabIndex = new F("tabIndex", 1, !1, "tabindex", null);

function Oc(a, b, c, d) {
  var e = G.hasOwnProperty(b) ? G[b] : null;
  var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;
  f || (Ic(b, c, e, d) && (c = null), d || null === e ? Gc(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
}

function Pc(a) {
  switch (typeof a) {
    case "boolean":
    case "number":
    case "object":
    case "string":
    case "undefined":
      return a;

    default:
      return "";
  }
}

function Qc(a, b) {
  var c = b.checked;
  return n({}, b, {
    defaultChecked: void 0,
    defaultValue: void 0,
    value: void 0,
    checked: null != c ? c : a._wrapperState.initialChecked
  });
}

function Rc(a, b) {
  var c = null == b.defaultValue ? "" : b.defaultValue,
      d = null != b.checked ? b.checked : b.defaultChecked;
  c = Pc(null != b.value ? b.value : c);
  a._wrapperState = {
    initialChecked: d,
    initialValue: c,
    controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
  };
}

function Sc(a, b) {
  b = b.checked;
  null != b && Oc(a, "checked", b, !1);
}

function Tc(a, b) {
  Sc(a, b);
  var c = Pc(b.value),
      d = b.type;
  if (null != c) {
    if ("number" === d) {
      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
    } else a.value !== "" + c && (a.value = "" + c);
  } else if ("submit" === d || "reset" === d) {
    a.removeAttribute("value");
    return;
  }
  b.hasOwnProperty("value") ? Uc(a, b.type, c) : b.hasOwnProperty("defaultValue") && Uc(a, b.type, Pc(b.defaultValue));
  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}

function bd(a, b, c) {
  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
    var d = b.type;
    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
    b = "" + a._wrapperState.initialValue;
    c || b === a.value || (a.value = b);
    a.defaultValue = b;
  }

  c = a.name;
  "" !== c && (a.name = "");
  a.defaultChecked = !a.defaultChecked;
  a.defaultChecked = !!a._wrapperState.initialChecked;
  "" !== c && (a.name = c);
}

function Uc(a, b, c) {
  if ("number" !== b || a.ownerDocument.activeElement !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}

var cd = {
  change: {
    phasedRegistrationNames: {
      bubbled: "onChange",
      captured: "onChangeCapture"
    },
    dependencies: "blur change click focus input keydown keyup selectionchange".split(" ")
  }
};

function dd(a, b, c) {
  a = y.getPooled(cd.change, a, b, c);
  a.type = "change";
  Wb(c);
  Wa(a);
  return a;
}

var ed = null,
    fd = null;

function gd(a) {
  Ia(a, !1);
}

function hd(a) {
  var b = Pa(a);
  if (jc(b)) return a;
}

function id(a, b) {
  if ("change" === a) return b;
}

var jd = !1;
Xa && (jd = fc("input") && (!document.documentMode || 9 < document.documentMode));

function kd() {
  ed && (ed.detachEvent("onpropertychange", ld), fd = ed = null);
}

function ld(a) {
  "value" === a.propertyName && hd(fd) && (a = dd(fd, a, ec(a)), bc(gd, a));
}

function md(a, b, c) {
  "focus" === a ? (kd(), ed = b, fd = c, ed.attachEvent("onpropertychange", ld)) : "blur" === a && kd();
}

function nd(a) {
  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return hd(fd);
}

function od(a, b) {
  if ("click" === a) return hd(b);
}

function pd(a, b) {
  if ("input" === a || "change" === a) return hd(b);
}

var qd = {
  eventTypes: cd,
  _isInputEventSupported: jd,
  extractEvents: function (a, b, c, d) {
    var e = b ? Pa(b) : window,
        f = void 0,
        g = void 0,
        h = e.nodeName && e.nodeName.toLowerCase();
    "select" === h || "input" === h && "file" === e.type ? f = id : dc(e) ? jd ? f = pd : (f = nd, g = md) : (h = e.nodeName) && "input" === h.toLowerCase() && ("checkbox" === e.type || "radio" === e.type) && (f = od);
    if (f && (f = f(a, b))) return dd(f, c, d);
    g && g(a, e, b);
    "blur" === a && (a = e._wrapperState) && a.controlled && "number" === e.type && Uc(e, "number", e.value);
  }
},
    rd = y.extend({
  view: null,
  detail: null
}),
    sd = {
  Alt: "altKey",
  Control: "ctrlKey",
  Meta: "metaKey",
  Shift: "shiftKey"
};

function td(a) {
  var b = this.nativeEvent;
  return b.getModifierState ? b.getModifierState(a) : (a = sd[a]) ? !!b[a] : !1;
}

function ud() {
  return td;
}

var vd = 0,
    wd = 0,
    xd = !1,
    yd = !1,
    zd = rd.extend({
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: ud,
  button: null,
  buttons: null,
  relatedTarget: function (a) {
    return a.relatedTarget || (a.fromElement === a.srcElement ? a.toElement : a.fromElement);
  },
  movementX: function (a) {
    if ("movementX" in a) return a.movementX;
    var b = vd;
    vd = a.screenX;
    return xd ? "mousemove" === a.type ? a.screenX - b : 0 : (xd = !0, 0);
  },
  movementY: function (a) {
    if ("movementY" in a) return a.movementY;
    var b = wd;
    wd = a.screenY;
    return yd ? "mousemove" === a.type ? a.screenY - b : 0 : (yd = !0, 0);
  }
}),
    Ad = zd.extend({
  pointerId: null,
  width: null,
  height: null,
  pressure: null,
  tangentialPressure: null,
  tiltX: null,
  tiltY: null,
  twist: null,
  pointerType: null,
  isPrimary: null
}),
    Bd = {
  mouseEnter: {
    registrationName: "onMouseEnter",
    dependencies: ["mouseout", "mouseover"]
  },
  mouseLeave: {
    registrationName: "onMouseLeave",
    dependencies: ["mouseout", "mouseover"]
  },
  pointerEnter: {
    registrationName: "onPointerEnter",
    dependencies: ["pointerout", "pointerover"]
  },
  pointerLeave: {
    registrationName: "onPointerLeave",
    dependencies: ["pointerout", "pointerover"]
  }
},
    Cd = {
  eventTypes: Bd,
  extractEvents: function (a, b, c, d) {
    var e = "mouseover" === a || "pointerover" === a,
        f = "mouseout" === a || "pointerout" === a;
    if (e && (c.relatedTarget || c.fromElement) || !f && !e) return null;
    e = d.window === d ? d : (e = d.ownerDocument) ? e.defaultView || e.parentWindow : window;
    f ? (f = b, b = (b = c.relatedTarget || c.toElement) ? Na(b) : null) : f = null;
    if (f === b) return null;
    var g = void 0,
        h = void 0,
        k = void 0,
        l = void 0;
    if ("mouseout" === a || "mouseover" === a) g = zd, h = Bd.mouseLeave, k = Bd.mouseEnter, l = "mouse";else if ("pointerout" === a || "pointerover" === a) g = Ad, h = Bd.pointerLeave, k = Bd.pointerEnter, l = "pointer";
    var m = null == f ? e : Pa(f);
    e = null == b ? e : Pa(b);
    a = g.getPooled(h, f, c, d);
    a.type = l + "leave";
    a.target = m;
    a.relatedTarget = e;
    c = g.getPooled(k, b, c, d);
    c.type = l + "enter";
    c.target = e;
    c.relatedTarget = m;
    d = b;
    if (f && d) a: {
      b = f;
      e = d;
      l = 0;

      for (g = b; g; g = Ra(g)) l++;

      g = 0;

      for (k = e; k; k = Ra(k)) g++;

      for (; 0 < l - g;) b = Ra(b), l--;

      for (; 0 < g - l;) e = Ra(e), g--;

      for (; l--;) {
        if (b === e || b === e.alternate) break a;
        b = Ra(b);
        e = Ra(e);
      }

      b = null;
    } else b = null;
    e = b;

    for (b = []; f && f !== e;) {
      l = f.alternate;
      if (null !== l && l === e) break;
      b.push(f);
      f = Ra(f);
    }

    for (f = []; d && d !== e;) {
      l = d.alternate;
      if (null !== l && l === e) break;
      f.push(d);
      d = Ra(d);
    }

    for (d = 0; d < b.length; d++) Ua(b[d], "bubbled", a);

    for (d = f.length; 0 < d--;) Ua(f[d], "captured", c);

    return [a, c];
  }
},
    Dd = Object.prototype.hasOwnProperty;

function Ed(a, b) {
  return a === b ? 0 !== a || 0 !== b || 1 / a === 1 / b : a !== a && b !== b;
}

function Fd(a, b) {
  if (Ed(a, b)) return !0;
  if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;
  var c = Object.keys(a),
      d = Object.keys(b);
  if (c.length !== d.length) return !1;

  for (d = 0; d < c.length; d++) if (!Dd.call(b, c[d]) || !Ed(a[c[d]], b[c[d]])) return !1;

  return !0;
}

function Gd(a) {
  var b = a;
  if (a.alternate) for (; b.return;) b = b.return;else {
    if (0 !== (b.effectTag & 2)) return 1;

    for (; b.return;) if (b = b.return, 0 !== (b.effectTag & 2)) return 1;
  }
  return 3 === b.tag ? 2 : 3;
}

function Hd(a) {
  2 !== Gd(a) ? r("188") : void 0;
}

function Id(a) {
  var b = a.alternate;
  if (!b) return b = Gd(a), 3 === b ? r("188") : void 0, 1 === b ? null : a;

  for (var c = a, d = b;;) {
    var e = c.return,
        f = e ? e.alternate : null;
    if (!e || !f) break;

    if (e.child === f.child) {
      for (var g = e.child; g;) {
        if (g === c) return Hd(e), a;
        if (g === d) return Hd(e), b;
        g = g.sibling;
      }

      r("188");
    }

    if (c.return !== d.return) c = e, d = f;else {
      g = !1;

      for (var h = e.child; h;) {
        if (h === c) {
          g = !0;
          c = e;
          d = f;
          break;
        }

        if (h === d) {
          g = !0;
          d = e;
          c = f;
          break;
        }

        h = h.sibling;
      }

      if (!g) {
        for (h = f.child; h;) {
          if (h === c) {
            g = !0;
            c = f;
            d = e;
            break;
          }

          if (h === d) {
            g = !0;
            d = f;
            c = e;
            break;
          }

          h = h.sibling;
        }

        g ? void 0 : r("189");
      }
    }
    c.alternate !== d ? r("190") : void 0;
  }

  3 !== c.tag ? r("188") : void 0;
  return c.stateNode.current === c ? a : b;
}

function Jd(a) {
  a = Id(a);
  if (!a) return null;

  for (var b = a;;) {
    if (5 === b.tag || 6 === b.tag) return b;
    if (b.child) b.child.return = b, b = b.child;else {
      if (b === a) break;

      for (; !b.sibling;) {
        if (!b.return || b.return === a) return null;
        b = b.return;
      }

      b.sibling.return = b.return;
      b = b.sibling;
    }
  }

  return null;
}

var Kd = y.extend({
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
}),
    Ld = y.extend({
  clipboardData: function (a) {
    return "clipboardData" in a ? a.clipboardData : window.clipboardData;
  }
}),
    Md = rd.extend({
  relatedTarget: null
});

function Nd(a) {
  var b = a.keyCode;
  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
  10 === a && (a = 13);
  return 32 <= a || 13 === a ? a : 0;
}

var Od = {
  Esc: "Escape",
  Spacebar: " ",
  Left: "ArrowLeft",
  Up: "ArrowUp",
  Right: "ArrowRight",
  Down: "ArrowDown",
  Del: "Delete",
  Win: "OS",
  Menu: "ContextMenu",
  Apps: "ContextMenu",
  Scroll: "ScrollLock",
  MozPrintableKey: "Unidentified"
},
    Pd = {
  8: "Backspace",
  9: "Tab",
  12: "Clear",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  224: "Meta"
},
    Qd = rd.extend({
  key: function (a) {
    if (a.key) {
      var b = Od[a.key] || a.key;
      if ("Unidentified" !== b) return b;
    }

    return "keypress" === a.type ? (a = Nd(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Pd[a.keyCode] || "Unidentified" : "";
  },
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: ud,
  charCode: function (a) {
    return "keypress" === a.type ? Nd(a) : 0;
  },
  keyCode: function (a) {
    return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  },
  which: function (a) {
    return "keypress" === a.type ? Nd(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
  }
}),
    Rd = zd.extend({
  dataTransfer: null
}),
    Sd = rd.extend({
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: ud
}),
    Td = y.extend({
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
}),
    Ud = zd.extend({
  deltaX: function (a) {
    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
  },
  deltaY: function (a) {
    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
  },
  deltaZ: null,
  deltaMode: null
}),
    Vd = [["abort", "abort"], [cb, "animationEnd"], [ib, "animationIteration"], [jb, "animationStart"], ["canplay", "canPlay"], ["canplaythrough", "canPlayThrough"], ["drag", "drag"], ["dragenter", "dragEnter"], ["dragexit", "dragExit"], ["dragleave", "dragLeave"], ["dragover", "dragOver"], ["durationchange", "durationChange"], ["emptied", "emptied"], ["encrypted", "encrypted"], ["ended", "ended"], ["error", "error"], ["gotpointercapture", "gotPointerCapture"], ["load", "load"], ["loadeddata", "loadedData"], ["loadedmetadata", "loadedMetadata"], ["loadstart", "loadStart"], ["lostpointercapture", "lostPointerCapture"], ["mousemove", "mouseMove"], ["mouseout", "mouseOut"], ["mouseover", "mouseOver"], ["playing", "playing"], ["pointermove", "pointerMove"], ["pointerout", "pointerOut"], ["pointerover", "pointerOver"], ["progress", "progress"], ["scroll", "scroll"], ["seeking", "seeking"], ["stalled", "stalled"], ["suspend", "suspend"], ["timeupdate", "timeUpdate"], ["toggle", "toggle"], ["touchmove", "touchMove"], [kb, "transitionEnd"], ["waiting", "waiting"], ["wheel", "wheel"]],
    Wd = {},
    Xd = {};

function Yd(a, b) {
  var c = a[0];
  a = a[1];
  var d = "on" + (a[0].toUpperCase() + a.slice(1));
  b = {
    phasedRegistrationNames: {
      bubbled: d,
      captured: d + "Capture"
    },
    dependencies: [c],
    isInteractive: b
  };
  Wd[a] = b;
  Xd[c] = b;
}

[["blur", "blur"], ["cancel", "cancel"], ["click", "click"], ["close", "close"], ["contextmenu", "contextMenu"], ["copy", "copy"], ["cut", "cut"], ["auxclick", "auxClick"], ["dblclick", "doubleClick"], ["dragend", "dragEnd"], ["dragstart", "dragStart"], ["drop", "drop"], ["focus", "focus"], ["input", "input"], ["invalid", "invalid"], ["keydown", "keyDown"], ["keypress", "keyPress"], ["keyup", "keyUp"], ["mousedown", "mouseDown"], ["mouseup", "mouseUp"], ["paste", "paste"], ["pause", "pause"], ["play", "play"], ["pointercancel", "pointerCancel"], ["pointerdown", "pointerDown"], ["pointerup", "pointerUp"], ["ratechange", "rateChange"], ["reset", "reset"], ["seeked", "seeked"], ["submit", "submit"], ["touchcancel", "touchCancel"], ["touchend", "touchEnd"], ["touchstart", "touchStart"], ["volumechange", "volumeChange"]].forEach(function (a) {
  Yd(a, !0);
});
Vd.forEach(function (a) {
  Yd(a, !1);
});
var Zd = {
  eventTypes: Wd,
  isInteractiveTopLevelEventType: function (a) {
    a = Xd[a];
    return void 0 !== a && !0 === a.isInteractive;
  },
  extractEvents: function (a, b, c, d) {
    var e = Xd[a];
    if (!e) return null;

    switch (a) {
      case "keypress":
        if (0 === Nd(c)) return null;

      case "keydown":
      case "keyup":
        a = Qd;
        break;

      case "blur":
      case "focus":
        a = Md;
        break;

      case "click":
        if (2 === c.button) return null;

      case "auxclick":
      case "dblclick":
      case "mousedown":
      case "mousemove":
      case "mouseup":
      case "mouseout":
      case "mouseover":
      case "contextmenu":
        a = zd;
        break;

      case "drag":
      case "dragend":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "dragstart":
      case "drop":
        a = Rd;
        break;

      case "touchcancel":
      case "touchend":
      case "touchmove":
      case "touchstart":
        a = Sd;
        break;

      case cb:
      case ib:
      case jb:
        a = Kd;
        break;

      case kb:
        a = Td;
        break;

      case "scroll":
        a = rd;
        break;

      case "wheel":
        a = Ud;
        break;

      case "copy":
      case "cut":
      case "paste":
        a = Ld;
        break;

      case "gotpointercapture":
      case "lostpointercapture":
      case "pointercancel":
      case "pointerdown":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "pointerup":
        a = Ad;
        break;

      default:
        a = y;
    }

    b = a.getPooled(e, b, c, d);
    Wa(b);
    return b;
  }
},
    $d = Zd.isInteractiveTopLevelEventType,
    ae = [];

function be(a) {
  var b = a.targetInst,
      c = b;

  do {
    if (!c) {
      a.ancestors.push(c);
      break;
    }

    var d;

    for (d = c; d.return;) d = d.return;

    d = 3 !== d.tag ? null : d.stateNode.containerInfo;
    if (!d) break;
    a.ancestors.push(c);
    c = Na(d);
  } while (c);

  for (c = 0; c < a.ancestors.length; c++) {
    b = a.ancestors[c];
    var e = ec(a.nativeEvent);
    d = a.topLevelType;

    for (var f = a.nativeEvent, g = null, h = 0; h < ra.length; h++) {
      var k = ra[h];
      k && (k = k.extractEvents(d, b, f, e)) && (g = Aa(g, k));
    }

    Ia(g, !1);
  }
}

var ce = !0;

function H(a, b) {
  if (!b) return null;
  var c = ($d(a) ? de : ee).bind(null, a);
  b.addEventListener(a, c, !1);
}

function ge(a, b) {
  if (!b) return null;
  var c = ($d(a) ? de : ee).bind(null, a);
  b.addEventListener(a, c, !0);
}

function de(a, b) {
  Zb(ee, a, b);
}

function ee(a, b) {
  if (ce) {
    var c = ec(b);
    c = Na(c);
    null === c || "number" !== typeof c.tag || 2 === Gd(c) || (c = null);

    if (ae.length) {
      var d = ae.pop();
      d.topLevelType = a;
      d.nativeEvent = b;
      d.targetInst = c;
      a = d;
    } else a = {
      topLevelType: a,
      nativeEvent: b,
      targetInst: c,
      ancestors: []
    };

    try {
      bc(be, a);
    } finally {
      a.topLevelType = null, a.nativeEvent = null, a.targetInst = null, a.ancestors.length = 0, 10 > ae.length && ae.push(a);
    }
  }
}

var he = {},
    ie = 0,
    je = "_reactListenersID" + ("" + Math.random()).slice(2);

function ke(a) {
  Object.prototype.hasOwnProperty.call(a, je) || (a[je] = ie++, he[a[je]] = {});
  return he[a[je]];
}

function le(a) {
  a = a || ("undefined" !== typeof document ? document : void 0);
  if ("undefined" === typeof a) return null;

  try {
    return a.activeElement || a.body;
  } catch (b) {
    return a.body;
  }
}

function me(a) {
  for (; a && a.firstChild;) a = a.firstChild;

  return a;
}

function ne(a, b) {
  var c = me(a);
  a = 0;

  for (var d; c;) {
    if (3 === c.nodeType) {
      d = a + c.textContent.length;
      if (a <= b && d >= b) return {
        node: c,
        offset: b - a
      };
      a = d;
    }

    a: {
      for (; c;) {
        if (c.nextSibling) {
          c = c.nextSibling;
          break a;
        }

        c = c.parentNode;
      }

      c = void 0;
    }

    c = me(c);
  }
}

function oe(a, b) {
  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? oe(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
}

function pe() {
  for (var a = window, b = le(); b instanceof a.HTMLIFrameElement;) {
    try {
      a = b.contentDocument.defaultView;
    } catch (c) {
      break;
    }

    b = le(a.document);
  }

  return b;
}

function qe(a) {
  var b = a && a.nodeName && a.nodeName.toLowerCase();
  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
}

var re = Xa && "documentMode" in document && 11 >= document.documentMode,
    se = {
  select: {
    phasedRegistrationNames: {
      bubbled: "onSelect",
      captured: "onSelectCapture"
    },
    dependencies: "blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")
  }
},
    te = null,
    ue = null,
    He = null,
    Ie = !1;

function Je(a, b) {
  var c = b.window === b ? b.document : 9 === b.nodeType ? b : b.ownerDocument;
  if (Ie || null == te || te !== le(c)) return null;
  c = te;
  "selectionStart" in c && qe(c) ? c = {
    start: c.selectionStart,
    end: c.selectionEnd
  } : (c = (c.ownerDocument && c.ownerDocument.defaultView || window).getSelection(), c = {
    anchorNode: c.anchorNode,
    anchorOffset: c.anchorOffset,
    focusNode: c.focusNode,
    focusOffset: c.focusOffset
  });
  return He && Fd(He, c) ? null : (He = c, a = y.getPooled(se.select, ue, a, b), a.type = "select", a.target = te, Wa(a), a);
}

var Ke = {
  eventTypes: se,
  extractEvents: function (a, b, c, d) {
    var e = d.window === d ? d.document : 9 === d.nodeType ? d : d.ownerDocument,
        f;

    if (!(f = !e)) {
      a: {
        e = ke(e);
        f = va.onSelect;

        for (var g = 0; g < f.length; g++) {
          var h = f[g];

          if (!e.hasOwnProperty(h) || !e[h]) {
            e = !1;
            break a;
          }
        }

        e = !0;
      }

      f = !e;
    }

    if (f) return null;
    e = b ? Pa(b) : window;

    switch (a) {
      case "focus":
        if (dc(e) || "true" === e.contentEditable) te = e, ue = b, He = null;
        break;

      case "blur":
        He = ue = te = null;
        break;

      case "mousedown":
        Ie = !0;
        break;

      case "contextmenu":
      case "mouseup":
      case "dragend":
        return Ie = !1, Je(c, d);

      case "selectionchange":
        if (re) break;

      case "keydown":
      case "keyup":
        return Je(c, d);
    }

    return null;
  }
};
Ga.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));
wa = Qa;
xa = Oa;
ya = Pa;
Ga.injectEventPluginsByName({
  SimpleEventPlugin: Zd,
  EnterLeaveEventPlugin: Cd,
  ChangeEventPlugin: qd,
  SelectEventPlugin: Ke,
  BeforeInputEventPlugin: Mb
});

function Le(a) {
  var b = "";
  aa.Children.forEach(a, function (a) {
    null != a && (b += a);
  });
  return b;
}

function Me(a, b) {
  a = n({
    children: void 0
  }, b);
  if (b = Le(b.children)) a.children = b;
  return a;
}

function Ne(a, b, c, d) {
  a = a.options;

  if (b) {
    b = {};

    for (var e = 0; e < c.length; e++) b["$" + c[e]] = !0;

    for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
  } else {
    c = "" + Pc(c);
    b = null;

    for (e = 0; e < a.length; e++) {
      if (a[e].value === c) {
        a[e].selected = !0;
        d && (a[e].defaultSelected = !0);
        return;
      }

      null !== b || a[e].disabled || (b = a[e]);
    }

    null !== b && (b.selected = !0);
  }
}

function Oe(a, b) {
  null != b.dangerouslySetInnerHTML ? r("91") : void 0;
  return n({}, b, {
    value: void 0,
    defaultValue: void 0,
    children: "" + a._wrapperState.initialValue
  });
}

function Pe(a, b) {
  var c = b.value;
  null == c && (c = b.defaultValue, b = b.children, null != b && (null != c ? r("92") : void 0, Array.isArray(b) && (1 >= b.length ? void 0 : r("93"), b = b[0]), c = b), null == c && (c = ""));
  a._wrapperState = {
    initialValue: Pc(c)
  };
}

function Qe(a, b) {
  var c = Pc(b.value),
      d = Pc(b.defaultValue);
  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
  null != d && (a.defaultValue = "" + d);
}

function Re(a) {
  var b = a.textContent;
  b === a._wrapperState.initialValue && (a.value = b);
}

var Se = {
  html: "http://www.w3.org/1999/xhtml",
  mathml: "http://www.w3.org/1998/Math/MathML",
  svg: "http://www.w3.org/2000/svg"
};

function Te(a) {
  switch (a) {
    case "svg":
      return "http://www.w3.org/2000/svg";

    case "math":
      return "http://www.w3.org/1998/Math/MathML";

    default:
      return "http://www.w3.org/1999/xhtml";
  }
}

function Ue(a, b) {
  return null == a || "http://www.w3.org/1999/xhtml" === a ? Te(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
}

var Ve = void 0,
    We = function (a) {
  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
    MSApp.execUnsafeLocalFunction(function () {
      return a(b, c, d, e);
    });
  } : a;
}(function (a, b) {
  if (a.namespaceURI !== Se.svg || "innerHTML" in a) a.innerHTML = b;else {
    Ve = Ve || document.createElement("div");
    Ve.innerHTML = "<svg>" + b + "</svg>";

    for (b = Ve.firstChild; a.firstChild;) a.removeChild(a.firstChild);

    for (; b.firstChild;) a.appendChild(b.firstChild);
  }
});

function Xe(a, b) {
  if (b) {
    var c = a.firstChild;

    if (c && c === a.lastChild && 3 === c.nodeType) {
      c.nodeValue = b;
      return;
    }
  }

  a.textContent = b;
}

var Ye = {
  animationIterationCount: !0,
  borderImageOutset: !0,
  borderImageSlice: !0,
  borderImageWidth: !0,
  boxFlex: !0,
  boxFlexGroup: !0,
  boxOrdinalGroup: !0,
  columnCount: !0,
  columns: !0,
  flex: !0,
  flexGrow: !0,
  flexPositive: !0,
  flexShrink: !0,
  flexNegative: !0,
  flexOrder: !0,
  gridArea: !0,
  gridRow: !0,
  gridRowEnd: !0,
  gridRowSpan: !0,
  gridRowStart: !0,
  gridColumn: !0,
  gridColumnEnd: !0,
  gridColumnSpan: !0,
  gridColumnStart: !0,
  fontWeight: !0,
  lineClamp: !0,
  lineHeight: !0,
  opacity: !0,
  order: !0,
  orphans: !0,
  tabSize: !0,
  widows: !0,
  zIndex: !0,
  zoom: !0,
  fillOpacity: !0,
  floodOpacity: !0,
  stopOpacity: !0,
  strokeDasharray: !0,
  strokeDashoffset: !0,
  strokeMiterlimit: !0,
  strokeOpacity: !0,
  strokeWidth: !0
},
    Ze = ["Webkit", "ms", "Moz", "O"];
Object.keys(Ye).forEach(function (a) {
  Ze.forEach(function (b) {
    b = b + a.charAt(0).toUpperCase() + a.substring(1);
    Ye[b] = Ye[a];
  });
});

function $e(a, b) {
  a = a.style;

  for (var c in b) if (b.hasOwnProperty(c)) {
    var d = 0 === c.indexOf("--");
    var e = c;
    var f = b[c];
    e = null == f || "boolean" === typeof f || "" === f ? "" : d || "number" !== typeof f || 0 === f || Ye.hasOwnProperty(e) && Ye[e] ? ("" + f).trim() : f + "px";
    "float" === c && (c = "cssFloat");
    d ? a.setProperty(c, e) : a[c] = e;
  }
}

var af = n({
  menuitem: !0
}, {
  area: !0,
  base: !0,
  br: !0,
  col: !0,
  embed: !0,
  hr: !0,
  img: !0,
  input: !0,
  keygen: !0,
  link: !0,
  meta: !0,
  param: !0,
  source: !0,
  track: !0,
  wbr: !0
});

function bf(a, b) {
  b && (af[a] && (null != b.children || null != b.dangerouslySetInnerHTML ? r("137", a, "") : void 0), null != b.dangerouslySetInnerHTML && (null != b.children ? r("60") : void 0, "object" === typeof b.dangerouslySetInnerHTML && "__html" in b.dangerouslySetInnerHTML ? void 0 : r("61")), null != b.style && "object" !== typeof b.style ? r("62", "") : void 0);
}

function cf(a, b) {
  if (-1 === a.indexOf("-")) return "string" === typeof b.is;

  switch (a) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return !1;

    default:
      return !0;
  }
}

function df(a, b) {
  a = 9 === a.nodeType || 11 === a.nodeType ? a : a.ownerDocument;
  var c = ke(a);
  b = va[b];

  for (var d = 0; d < b.length; d++) {
    var e = b[d];

    if (!c.hasOwnProperty(e) || !c[e]) {
      switch (e) {
        case "scroll":
          ge("scroll", a);
          break;

        case "focus":
        case "blur":
          ge("focus", a);
          ge("blur", a);
          c.blur = !0;
          c.focus = !0;
          break;

        case "cancel":
        case "close":
          fc(e) && ge(e, a);
          break;

        case "invalid":
        case "submit":
        case "reset":
          break;

        default:
          -1 === lb.indexOf(e) && H(e, a);
      }

      c[e] = !0;
    }
  }
}

function ef() {}

var ff = null,
    gf = null;

function hf(a, b) {
  switch (a) {
    case "button":
    case "input":
    case "select":
    case "textarea":
      return !!b.autoFocus;
  }

  return !1;
}

function jf(a, b) {
  return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}

var kf = setTimeout,
    lf = clearTimeout;

function mf(a) {
  for (a = a.nextSibling; a && 1 !== a.nodeType && 3 !== a.nodeType;) a = a.nextSibling;

  return a;
}

function nf(a) {
  for (a = a.firstChild; a && 1 !== a.nodeType && 3 !== a.nodeType;) a = a.nextSibling;

  return a;
}

new Set();
var of = [],
    pf = -1;

function I(a) {
  0 > pf || (a.current = of[pf], of[pf] = null, pf--);
}

function J(a, b) {
  pf++;
  of[pf] = a.current;
  a.current = b;
}

var qf = {},
    K = {
  current: qf
},
    L = {
  current: !1
},
    rf = qf;

function sf(a, b) {
  var c = a.type.contextTypes;
  if (!c) return qf;
  var d = a.stateNode;
  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
  var e = {},
      f;

  for (f in c) e[f] = b[f];

  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
  return e;
}

function M(a) {
  a = a.childContextTypes;
  return null !== a && void 0 !== a;
}

function tf(a) {
  I(L, a);
  I(K, a);
}

function uf(a) {
  I(L, a);
  I(K, a);
}

function vf(a, b, c) {
  K.current !== qf ? r("168") : void 0;
  J(K, b, a);
  J(L, c, a);
}

function wf(a, b, c) {
  var d = a.stateNode;
  a = b.childContextTypes;
  if ("function" !== typeof d.getChildContext) return c;
  d = d.getChildContext();

  for (var e in d) e in a ? void 0 : r("108", Ac(b) || "Unknown", e);

  return n({}, c, d);
}

function xf(a) {
  var b = a.stateNode;
  b = b && b.__reactInternalMemoizedMergedChildContext || qf;
  rf = K.current;
  J(K, b, a);
  J(L, L.current, a);
  return !0;
}

function yf(a, b, c) {
  var d = a.stateNode;
  d ? void 0 : r("169");
  c ? (b = wf(a, b, rf), d.__reactInternalMemoizedMergedChildContext = b, I(L, a), I(K, a), J(K, b, a)) : I(L, a);
  J(L, c, a);
}

var zf = null,
    Af = null;

function Bf(a) {
  return function (b) {
    try {
      return a(b);
    } catch (c) {}
  };
}

function Cf(a) {
  if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
  var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;
  if (b.isDisabled || !b.supportsFiber) return !0;

  try {
    var c = b.inject(a);
    zf = Bf(function (a) {
      return b.onCommitFiberRoot(c, a);
    });
    Af = Bf(function (a) {
      return b.onCommitFiberUnmount(c, a);
    });
  } catch (d) {}

  return !0;
}

function Df(a, b, c, d) {
  this.tag = a;
  this.key = c;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = b;
  this.firstContextDependency = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = d;
  this.effectTag = 0;
  this.lastEffect = this.firstEffect = this.nextEffect = null;
  this.childExpirationTime = this.expirationTime = 0;
  this.alternate = null;
}

function N(a, b, c, d) {
  return new Df(a, b, c, d);
}

function Ef(a) {
  a = a.prototype;
  return !(!a || !a.isReactComponent);
}

function Ff(a) {
  if ("function" === typeof a) return Ef(a) ? 1 : 0;

  if (void 0 !== a && null !== a) {
    a = a.$$typeof;
    if (a === uc) return 11;
    if (a === wc) return 14;
  }

  return 2;
}

function Gf(a, b) {
  var c = a.alternate;
  null === c ? (c = N(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.effectTag = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
  c.childExpirationTime = a.childExpirationTime;
  c.expirationTime = a.expirationTime;
  c.child = a.child;
  c.memoizedProps = a.memoizedProps;
  c.memoizedState = a.memoizedState;
  c.updateQueue = a.updateQueue;
  c.firstContextDependency = a.firstContextDependency;
  c.sibling = a.sibling;
  c.index = a.index;
  c.ref = a.ref;
  return c;
}

function Hf(a, b, c, d, e, f) {
  var g = 2;
  d = a;
  if ("function" === typeof a) Ef(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {
    case oc:
      return If(c.children, e, f, b);

    case tc:
      return Jf(c, e | 3, f, b);

    case pc:
      return Jf(c, e | 2, f, b);

    case qc:
      return a = N(12, c, b, e | 4), a.elementType = qc, a.type = qc, a.expirationTime = f, a;

    case vc:
      return a = N(13, c, b, e), a.elementType = vc, a.type = vc, a.expirationTime = f, a;

    default:
      if ("object" === typeof a && null !== a) switch (a.$$typeof) {
        case rc:
          g = 10;
          break a;

        case sc:
          g = 9;
          break a;

        case uc:
          g = 11;
          break a;

        case wc:
          g = 14;
          break a;

        case xc:
          g = 16;
          d = null;
          break a;
      }
      r("130", null == a ? a : typeof a, "");
  }
  b = N(g, c, b, e);
  b.elementType = a;
  b.type = d;
  b.expirationTime = f;
  return b;
}

function If(a, b, c, d) {
  a = N(7, a, d, b);
  a.expirationTime = c;
  return a;
}

function Jf(a, b, c, d) {
  a = N(8, a, d, b);
  b = 0 === (b & 1) ? pc : tc;
  a.elementType = b;
  a.type = b;
  a.expirationTime = c;
  return a;
}

function Kf(a, b, c) {
  a = N(6, a, null, b);
  a.expirationTime = c;
  return a;
}

function Lf(a, b, c) {
  b = N(4, null !== a.children ? a.children : [], a.key, b);
  b.expirationTime = c;
  b.stateNode = {
    containerInfo: a.containerInfo,
    pendingChildren: null,
    implementation: a.implementation
  };
  return b;
}

function Mf(a, b) {
  a.didError = !1;
  var c = a.earliestPendingTime;
  0 === c ? a.earliestPendingTime = a.latestPendingTime = b : c > b ? a.earliestPendingTime = b : a.latestPendingTime < b && (a.latestPendingTime = b);
  Nf(b, a);
}

function Of(a, b) {
  a.didError = !1;
  var c = a.latestPingedTime;
  0 !== c && c <= b && (a.latestPingedTime = 0);
  c = a.earliestPendingTime;
  var d = a.latestPendingTime;
  c === b ? a.earliestPendingTime = d === b ? a.latestPendingTime = 0 : d : d === b && (a.latestPendingTime = c);
  c = a.earliestSuspendedTime;
  d = a.latestSuspendedTime;
  0 === c ? a.earliestSuspendedTime = a.latestSuspendedTime = b : c > b ? a.earliestSuspendedTime = b : d < b && (a.latestSuspendedTime = b);
  Nf(b, a);
}

function Pf(a, b) {
  var c = a.earliestPendingTime;
  a = a.earliestSuspendedTime;
  if (0 === b || 0 !== c && c < b) b = c;
  if (0 === b || 0 !== a && a < b) b = a;
  return b;
}

function Nf(a, b) {
  var c = b.earliestSuspendedTime,
      d = b.latestSuspendedTime,
      e = b.earliestPendingTime,
      f = b.latestPingedTime;
  e = 0 !== e ? e : f;
  0 === e && (0 === a || d > a) && (e = d);
  a = e;
  0 !== a && 0 !== c && c < a && (a = c);
  b.nextExpirationTimeToWorkOn = e;
  b.expirationTime = a;
}

var Qf = !1;

function Rf(a) {
  return {
    baseState: a,
    firstUpdate: null,
    lastUpdate: null,
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
}

function Sf(a) {
  return {
    baseState: a.baseState,
    firstUpdate: a.firstUpdate,
    lastUpdate: a.lastUpdate,
    firstCapturedUpdate: null,
    lastCapturedUpdate: null,
    firstEffect: null,
    lastEffect: null,
    firstCapturedEffect: null,
    lastCapturedEffect: null
  };
}

function Tf(a) {
  return {
    expirationTime: a,
    tag: 0,
    payload: null,
    callback: null,
    next: null,
    nextEffect: null
  };
}

function Uf(a, b) {
  null === a.lastUpdate ? a.firstUpdate = a.lastUpdate = b : (a.lastUpdate.next = b, a.lastUpdate = b);
}

function Vf(a, b) {
  var c = a.alternate;

  if (null === c) {
    var d = a.updateQueue;
    var e = null;
    null === d && (d = a.updateQueue = Rf(a.memoizedState));
  } else d = a.updateQueue, e = c.updateQueue, null === d ? null === e ? (d = a.updateQueue = Rf(a.memoizedState), e = c.updateQueue = Rf(c.memoizedState)) : d = a.updateQueue = Sf(e) : null === e && (e = c.updateQueue = Sf(d));

  null === e || d === e ? Uf(d, b) : null === d.lastUpdate || null === e.lastUpdate ? (Uf(d, b), Uf(e, b)) : (Uf(d, b), e.lastUpdate = b);
}

function Wf(a, b) {
  var c = a.updateQueue;
  c = null === c ? a.updateQueue = Rf(a.memoizedState) : Xf(a, c);
  null === c.lastCapturedUpdate ? c.firstCapturedUpdate = c.lastCapturedUpdate = b : (c.lastCapturedUpdate.next = b, c.lastCapturedUpdate = b);
}

function Xf(a, b) {
  var c = a.alternate;
  null !== c && b === c.updateQueue && (b = a.updateQueue = Sf(b));
  return b;
}

function Yf(a, b, c, d, e, f) {
  switch (c.tag) {
    case 1:
      return a = c.payload, "function" === typeof a ? a.call(f, d, e) : a;

    case 3:
      a.effectTag = a.effectTag & -1025 | 64;

    case 0:
      a = c.payload;
      e = "function" === typeof a ? a.call(f, d, e) : a;
      if (null === e || void 0 === e) break;
      return n({}, d, e);

    case 2:
      Qf = !0;
  }

  return d;
}

function Zf(a, b, c, d, e) {
  Qf = !1;
  b = Xf(a, b);

  for (var f = b.baseState, g = null, h = 0, k = b.firstUpdate, l = f; null !== k;) {
    var m = k.expirationTime;

    if (m > e) {
      if (null === g && (g = k, f = l), 0 === h || h > m) h = m;
    } else l = Yf(a, b, k, l, c, d), null !== k.callback && (a.effectTag |= 32, k.nextEffect = null, null === b.lastEffect ? b.firstEffect = b.lastEffect = k : (b.lastEffect.nextEffect = k, b.lastEffect = k));

    k = k.next;
  }

  m = null;

  for (k = b.firstCapturedUpdate; null !== k;) {
    var p = k.expirationTime;

    if (p > e) {
      if (null === m && (m = k, null === g && (f = l)), 0 === h || h > p) h = p;
    } else l = Yf(a, b, k, l, c, d), null !== k.callback && (a.effectTag |= 32, k.nextEffect = null, null === b.lastCapturedEffect ? b.firstCapturedEffect = b.lastCapturedEffect = k : (b.lastCapturedEffect.nextEffect = k, b.lastCapturedEffect = k));

    k = k.next;
  }

  null === g && (b.lastUpdate = null);
  null === m ? b.lastCapturedUpdate = null : a.effectTag |= 32;
  null === g && null === m && (f = l);
  b.baseState = f;
  b.firstUpdate = g;
  b.firstCapturedUpdate = m;
  a.expirationTime = h;
  a.memoizedState = l;
}

function $f(a, b, c) {
  null !== b.firstCapturedUpdate && (null !== b.lastUpdate && (b.lastUpdate.next = b.firstCapturedUpdate, b.lastUpdate = b.lastCapturedUpdate), b.firstCapturedUpdate = b.lastCapturedUpdate = null);
  ag(b.firstEffect, c);
  b.firstEffect = b.lastEffect = null;
  ag(b.firstCapturedEffect, c);
  b.firstCapturedEffect = b.lastCapturedEffect = null;
}

function ag(a, b) {
  for (; null !== a;) {
    var c = a.callback;

    if (null !== c) {
      a.callback = null;
      var d = b;
      "function" !== typeof c ? r("191", c) : void 0;
      c.call(d);
    }

    a = a.nextEffect;
  }
}

function bg(a, b) {
  return {
    value: a,
    source: b,
    stack: Bc(b)
  };
}

var cg = {
  current: null
},
    dg = null,
    eg = null,
    fg = null;

function gg(a, b) {
  var c = a.type._context;
  J(cg, c._currentValue, a);
  c._currentValue = b;
}

function hg(a) {
  var b = cg.current;
  I(cg, a);
  a.type._context._currentValue = b;
}

function ig(a) {
  dg = a;
  fg = eg = null;
  a.firstContextDependency = null;
}

function jg(a, b) {
  if (fg !== a && !1 !== b && 0 !== b) {
    if ("number" !== typeof b || 1073741823 === b) fg = a, b = 1073741823;
    b = {
      context: a,
      observedBits: b,
      next: null
    };
    null === eg ? (null === dg ? r("293") : void 0, dg.firstContextDependency = eg = b) : eg = eg.next = b;
  }

  return a._currentValue;
}

var kg = {},
    O = {
  current: kg
},
    lg = {
  current: kg
},
    mg = {
  current: kg
};

function ng(a) {
  a === kg ? r("174") : void 0;
  return a;
}

function og(a, b) {
  J(mg, b, a);
  J(lg, a, a);
  J(O, kg, a);
  var c = b.nodeType;

  switch (c) {
    case 9:
    case 11:
      b = (b = b.documentElement) ? b.namespaceURI : Ue(null, "");
      break;

    default:
      c = 8 === c ? b.parentNode : b, b = c.namespaceURI || null, c = c.tagName, b = Ue(b, c);
  }

  I(O, a);
  J(O, b, a);
}

function pg(a) {
  I(O, a);
  I(lg, a);
  I(mg, a);
}

function qg(a) {
  ng(mg.current);
  var b = ng(O.current);
  var c = Ue(b, a.type);
  b !== c && (J(lg, a, a), J(O, c, a));
}

function rg(a) {
  lg.current === a && (I(O, a), I(lg, a));
}

var sg = kc.ReactCurrentOwner,
    tg = new aa.Component().refs;

function ug(a, b, c, d) {
  b = a.memoizedState;
  c = c(d, b);
  c = null === c || void 0 === c ? b : n({}, b, c);
  a.memoizedState = c;
  d = a.updateQueue;
  null !== d && 0 === a.expirationTime && (d.baseState = c);
}

var yg = {
  isMounted: function (a) {
    return (a = a._reactInternalFiber) ? 2 === Gd(a) : !1;
  },
  enqueueSetState: function (a, b, c) {
    a = a._reactInternalFiber;
    var d = vg();
    d = wg(d, a);
    var e = Tf(d);
    e.payload = b;
    void 0 !== c && null !== c && (e.callback = c);
    Vf(a, e);
    xg(a, d);
  },
  enqueueReplaceState: function (a, b, c) {
    a = a._reactInternalFiber;
    var d = vg();
    d = wg(d, a);
    var e = Tf(d);
    e.tag = 1;
    e.payload = b;
    void 0 !== c && null !== c && (e.callback = c);
    Vf(a, e);
    xg(a, d);
  },
  enqueueForceUpdate: function (a, b) {
    a = a._reactInternalFiber;
    var c = vg();
    c = wg(c, a);
    var d = Tf(c);
    d.tag = 2;
    void 0 !== b && null !== b && (d.callback = b);
    Vf(a, d);
    xg(a, c);
  }
};

function zg(a, b, c, d, e, f, g) {
  a = a.stateNode;
  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Fd(c, d) || !Fd(e, f) : !0;
}

function Ag(a, b, c) {
  var d = !1,
      e = qf;
  var f = b.contextType;
  "object" === typeof f && null !== f ? f = sg.currentDispatcher.readContext(f) : (e = M(b) ? rf : K.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? sf(a, e) : qf);
  b = new b(c, f);
  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
  b.updater = yg;
  a.stateNode = b;
  b._reactInternalFiber = a;
  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
  return b;
}

function Bg(a, b, c, d) {
  a = b.state;
  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
  b.state !== a && yg.enqueueReplaceState(b, b.state, null);
}

function Cg(a, b, c, d) {
  var e = a.stateNode;
  e.props = c;
  e.state = a.memoizedState;
  e.refs = tg;
  var f = b.contextType;
  "object" === typeof f && null !== f ? e.context = sg.currentDispatcher.readContext(f) : (f = M(b) ? rf : K.current, e.context = sf(a, f));
  f = a.updateQueue;
  null !== f && (Zf(a, f, c, e, d), e.state = a.memoizedState);
  f = b.getDerivedStateFromProps;
  "function" === typeof f && (ug(a, b, f, c), e.state = a.memoizedState);
  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && yg.enqueueReplaceState(e, e.state, null), f = a.updateQueue, null !== f && (Zf(a, f, c, e, d), e.state = a.memoizedState));
  "function" === typeof e.componentDidMount && (a.effectTag |= 4);
}

var Dg = Array.isArray;

function Eg(a, b, c) {
  a = c.ref;

  if (null !== a && "function" !== typeof a && "object" !== typeof a) {
    if (c._owner) {
      c = c._owner;
      var d = void 0;
      c && (1 !== c.tag ? r("289") : void 0, d = c.stateNode);
      d ? void 0 : r("147", a);
      var e = "" + a;
      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;

      b = function (a) {
        var b = d.refs;
        b === tg && (b = d.refs = {});
        null === a ? delete b[e] : b[e] = a;
      };

      b._stringRef = e;
      return b;
    }

    "string" !== typeof a ? r("284") : void 0;
    c._owner ? void 0 : r("290", a);
  }

  return a;
}

function Fg(a, b) {
  "textarea" !== a.type && r("31", "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b, "");
}

function Gg(a) {
  function b(b, c) {
    if (a) {
      var d = b.lastEffect;
      null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;
      c.nextEffect = null;
      c.effectTag = 8;
    }
  }

  function c(c, d) {
    if (!a) return null;

    for (; null !== d;) b(c, d), d = d.sibling;

    return null;
  }

  function d(a, b) {
    for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;

    return a;
  }

  function e(a, b, c) {
    a = Gf(a, b, c);
    a.index = 0;
    a.sibling = null;
    return a;
  }

  function f(b, c, d) {
    b.index = d;
    if (!a) return c;
    d = b.alternate;
    if (null !== d) return d = d.index, d < c ? (b.effectTag = 2, c) : d;
    b.effectTag = 2;
    return c;
  }

  function g(b) {
    a && null === b.alternate && (b.effectTag = 2);
    return b;
  }

  function h(a, b, c, d) {
    if (null === b || 6 !== b.tag) return b = Kf(c, a.mode, d), b.return = a, b;
    b = e(b, c, d);
    b.return = a;
    return b;
  }

  function k(a, b, c, d) {
    if (null !== b && b.elementType === c.type) return d = e(b, c.props, d), d.ref = Eg(a, b, c), d.return = a, d;
    d = Hf(c.type, c.key, c.props, null, a.mode, d);
    d.ref = Eg(a, b, c);
    d.return = a;
    return d;
  }

  function l(a, b, c, d) {
    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Lf(c, a.mode, d), b.return = a, b;
    b = e(b, c.children || [], d);
    b.return = a;
    return b;
  }

  function m(a, b, c, d, f) {
    if (null === b || 7 !== b.tag) return b = If(c, a.mode, d, f), b.return = a, b;
    b = e(b, c, d);
    b.return = a;
    return b;
  }

  function p(a, b, c) {
    if ("string" === typeof b || "number" === typeof b) return b = Kf("" + b, a.mode, c), b.return = a, b;

    if ("object" === typeof b && null !== b) {
      switch (b.$$typeof) {
        case mc:
          return c = Hf(b.type, b.key, b.props, null, a.mode, c), c.ref = Eg(a, null, b), c.return = a, c;

        case nc:
          return b = Lf(b, a.mode, c), b.return = a, b;
      }

      if (Dg(b) || zc(b)) return b = If(b, a.mode, c, null), b.return = a, b;
      Fg(a, b);
    }

    return null;
  }

  function v(a, b, c, d) {
    var e = null !== b ? b.key : null;
    if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);

    if ("object" === typeof c && null !== c) {
      switch (c.$$typeof) {
        case mc:
          return c.key === e ? c.type === oc ? m(a, b, c.props.children, d, e) : k(a, b, c, d) : null;

        case nc:
          return c.key === e ? l(a, b, c, d) : null;
      }

      if (Dg(c) || zc(c)) return null !== e ? null : m(a, b, c, d, null);
      Fg(a, c);
    }

    return null;
  }

  function B(a, b, c, d, e) {
    if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);

    if ("object" === typeof d && null !== d) {
      switch (d.$$typeof) {
        case mc:
          return a = a.get(null === d.key ? c : d.key) || null, d.type === oc ? m(b, a, d.props.children, e, d.key) : k(b, a, d, e);

        case nc:
          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
      }

      if (Dg(d) || zc(d)) return a = a.get(c) || null, m(b, a, d, e, null);
      Fg(b, d);
    }

    return null;
  }

  function w(e, g, h, k) {
    for (var l = null, m = null, q = g, u = g = 0, A = null; null !== q && u < h.length; u++) {
      q.index > u ? (A = q, q = null) : A = q.sibling;
      var t = v(e, q, h[u], k);

      if (null === t) {
        null === q && (q = A);
        break;
      }

      a && q && null === t.alternate && b(e, q);
      g = f(t, g, u);
      null === m ? l = t : m.sibling = t;
      m = t;
      q = A;
    }

    if (u === h.length) return c(e, q), l;

    if (null === q) {
      for (; u < h.length; u++) if (q = p(e, h[u], k)) g = f(q, g, u), null === m ? l = q : m.sibling = q, m = q;

      return l;
    }

    for (q = d(e, q); u < h.length; u++) if (A = B(q, e, u, h[u], k)) a && null !== A.alternate && q.delete(null === A.key ? u : A.key), g = f(A, g, u), null === m ? l = A : m.sibling = A, m = A;

    a && q.forEach(function (a) {
      return b(e, a);
    });
    return l;
  }

  function C(e, g, h, k) {
    var l = zc(h);
    "function" !== typeof l ? r("150") : void 0;
    h = l.call(h);
    null == h ? r("151") : void 0;

    for (var m = l = null, q = g, u = g = 0, A = null, t = h.next(); null !== q && !t.done; u++, t = h.next()) {
      q.index > u ? (A = q, q = null) : A = q.sibling;
      var w = v(e, q, t.value, k);

      if (null === w) {
        q || (q = A);
        break;
      }

      a && q && null === w.alternate && b(e, q);
      g = f(w, g, u);
      null === m ? l = w : m.sibling = w;
      m = w;
      q = A;
    }

    if (t.done) return c(e, q), l;

    if (null === q) {
      for (; !t.done; u++, t = h.next()) t = p(e, t.value, k), null !== t && (g = f(t, g, u), null === m ? l = t : m.sibling = t, m = t);

      return l;
    }

    for (q = d(e, q); !t.done; u++, t = h.next()) t = B(q, e, u, t.value, k), null !== t && (a && null !== t.alternate && q.delete(null === t.key ? u : t.key), g = f(t, g, u), null === m ? l = t : m.sibling = t, m = t);

    a && q.forEach(function (a) {
      return b(e, a);
    });
    return l;
  }

  return function (a, d, f, h) {
    var k = "object" === typeof f && null !== f && f.type === oc && null === f.key;
    k && (f = f.props.children);
    var l = "object" === typeof f && null !== f;
    if (l) switch (f.$$typeof) {
      case mc:
        a: {
          l = f.key;

          for (k = d; null !== k;) {
            if (k.key === l) {
              if (7 === k.tag ? f.type === oc : k.elementType === f.type) {
                c(a, k.sibling);
                d = e(k, f.type === oc ? f.props.children : f.props, h);
                d.ref = Eg(a, k, f);
                d.return = a;
                a = d;
                break a;
              } else {
                c(a, k);
                break;
              }
            } else b(a, k);
            k = k.sibling;
          }

          f.type === oc ? (d = If(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Hf(f.type, f.key, f.props, null, a.mode, h), h.ref = Eg(a, d, f), h.return = a, a = h);
        }

        return g(a);

      case nc:
        a: {
          for (k = f.key; null !== d;) {
            if (d.key === k) {
              if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                c(a, d.sibling);
                d = e(d, f.children || [], h);
                d.return = a;
                a = d;
                break a;
              } else {
                c(a, d);
                break;
              }
            } else b(a, d);
            d = d.sibling;
          }

          d = Lf(f, a.mode, h);
          d.return = a;
          a = d;
        }

        return g(a);
    }
    if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f, h), d.return = a, a = d) : (c(a, d), d = Kf(f, a.mode, h), d.return = a, a = d), g(a);
    if (Dg(f)) return w(a, d, f, h);
    if (zc(f)) return C(a, d, f, h);
    l && Fg(a, f);
    if ("undefined" === typeof f && !k) switch (a.tag) {
      case 1:
      case 0:
        h = a.type, r("152", h.displayName || h.name || "Component");
    }
    return c(a, d);
  };
}

var Hg = Gg(!0),
    Ig = Gg(!1),
    Jg = null,
    Kg = null,
    Lg = !1;

function Mg(a, b) {
  var c = N(5, null, null, 0);
  c.elementType = "DELETED";
  c.type = "DELETED";
  c.stateNode = b;
  c.return = a;
  c.effectTag = 8;
  null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
}

function Ng(a, b) {
  switch (a.tag) {
    case 5:
      var c = a.type;
      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
      return null !== b ? (a.stateNode = b, !0) : !1;

    case 6:
      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;

    default:
      return !1;
  }
}

function Og(a) {
  if (Lg) {
    var b = Kg;

    if (b) {
      var c = b;

      if (!Ng(a, b)) {
        b = mf(c);

        if (!b || !Ng(a, b)) {
          a.effectTag |= 2;
          Lg = !1;
          Jg = a;
          return;
        }

        Mg(Jg, c);
      }

      Jg = a;
      Kg = nf(b);
    } else a.effectTag |= 2, Lg = !1, Jg = a;
  }
}

function Pg(a) {
  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag;) a = a.return;

  Jg = a;
}

function Qg(a) {
  if (a !== Jg) return !1;
  if (!Lg) return Pg(a), Lg = !0, !1;
  var b = a.type;
  if (5 !== a.tag || "head" !== b && "body" !== b && !jf(b, a.memoizedProps)) for (b = Kg; b;) Mg(a, b), b = mf(b);
  Pg(a);
  Kg = Jg ? mf(a.stateNode) : null;
  return !0;
}

function Rg() {
  Kg = Jg = null;
  Lg = !1;
}

function Sg(a) {
  var b = a._result;

  switch (a._status) {
    case 1:
      return b;

    case 2:
      throw b;

    case 0:
      throw b;

    default:
      throw a._status = 0, b = a._ctor, b = b(), b.then(function (b) {
        0 === a._status && (b = b.default, a._status = 1, a._result = b);
      }, function (b) {
        0 === a._status && (a._status = 2, a._result = b);
      }), a._result = b, b;
  }
}

var Tg = kc.ReactCurrentOwner;

function P(a, b, c, d) {
  b.child = null === a ? Ig(b, null, c, d) : Hg(b, a.child, c, d);
}

function Ug(a, b, c, d, e) {
  c = c.render;
  var f = b.ref;
  if (!L.current && b.memoizedProps === d && f === (null !== a ? a.ref : null)) return Vg(a, b, e);
  d = c(d, f);
  P(a, b, d, e);
  return b.child;
}

function Wg(a, b, c, d, e, f) {
  if (null === a) {
    var g = c.type;
    if ("function" === typeof g && !Ef(g) && void 0 === g.defaultProps && null === c.compare) return b.tag = 15, b.type = g, Xg(a, b, g, d, e, f);
    a = Hf(c.type, null, d, null, b.mode, f);
    a.ref = b.ref;
    a.return = b;
    return b.child = a;
  }

  g = a.child;
  if (0 === e || e > f) if (e = g.memoizedProps, c = c.compare, c = null !== c ? c : Fd, c(e, d) && a.ref === b.ref) return Vg(a, b, f);
  a = Gf(g, d, f);
  a.ref = b.ref;
  a.return = b;
  return b.child = a;
}

function Xg(a, b, c, d, e, f) {
  return null !== a && (0 === e || e > f) && Fd(a.memoizedProps, d) && a.ref === b.ref ? Vg(a, b, f) : Yg(a, b, c, d, f);
}

function Zg(a, b) {
  var c = b.ref;
  if (null === a && null !== c || null !== a && a.ref !== c) b.effectTag |= 128;
}

function Yg(a, b, c, d, e) {
  var f = M(c) ? rf : K.current;
  f = sf(b, f);
  ig(b, e);
  c = c(d, f);
  b.effectTag |= 1;
  P(a, b, c, e);
  return b.child;
}

function $g(a, b, c, d, e) {
  if (M(c)) {
    var f = !0;
    xf(b);
  } else f = !1;

  ig(b, e);
  if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), Ag(b, c, d, e), Cg(b, c, d, e), d = !0;else if (null === a) {
    var g = b.stateNode,
        h = b.memoizedProps;
    g.props = h;
    var k = g.context,
        l = c.contextType;
    "object" === typeof l && null !== l ? l = sg.currentDispatcher.readContext(l) : (l = M(c) ? rf : K.current, l = sf(b, l));
    var m = c.getDerivedStateFromProps,
        p = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
    p || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Bg(b, g, d, l);
    Qf = !1;
    var v = b.memoizedState;
    k = g.state = v;
    var B = b.updateQueue;
    null !== B && (Zf(b, B, d, g, e), k = b.memoizedState);
    h !== d || v !== k || L.current || Qf ? ("function" === typeof m && (ug(b, c, m, d), k = b.memoizedState), (h = Qf || zg(b, c, h, d, v, k, l)) ? (p || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.effectTag |= 4)) : ("function" === typeof g.componentDidMount && (b.effectTag |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.effectTag |= 4), d = !1);
  } else g = b.stateNode, h = b.memoizedProps, g.props = h, k = g.context, l = c.contextType, "object" === typeof l && null !== l ? l = sg.currentDispatcher.readContext(l) : (l = M(c) ? rf : K.current, l = sf(b, l)), m = c.getDerivedStateFromProps, (p = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Bg(b, g, d, l), Qf = !1, k = b.memoizedState, v = g.state = k, B = b.updateQueue, null !== B && (Zf(b, B, d, g, e), v = b.memoizedState), h !== d || k !== v || L.current || Qf ? ("function" === typeof m && (ug(b, c, m, d), v = b.memoizedState), (m = Qf || zg(b, c, h, d, k, v, l)) ? (p || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, v, l), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, v, l)), "function" === typeof g.componentDidUpdate && (b.effectTag |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.effectTag |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 256), b.memoizedProps = d, b.memoizedState = v), g.props = d, g.state = v, g.context = l, d = m) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && k === a.memoizedState || (b.effectTag |= 256), d = !1);
  return ah(a, b, c, d, f, e);
}

function ah(a, b, c, d, e, f) {
  Zg(a, b);
  var g = 0 !== (b.effectTag & 64);
  if (!d && !g) return e && yf(b, c, !1), Vg(a, b, f);
  d = b.stateNode;
  Tg.current = b;
  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
  b.effectTag |= 1;
  null !== a && g ? (b.child = Hg(b, a.child, null, f), b.child = Hg(b, null, h, f)) : P(a, b, h, f);
  b.memoizedState = d.state;
  e && yf(b, c, !0);
  return b.child;
}

function bh(a) {
  var b = a.stateNode;
  b.pendingContext ? vf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && vf(a, b.context, !1);
  og(a, b.containerInfo);
}

function ch(a, b) {
  if (a && a.defaultProps) {
    b = n({}, b);
    a = a.defaultProps;

    for (var c in a) void 0 === b[c] && (b[c] = a[c]);
  }

  return b;
}

function dh(a, b, c) {
  var d = b.mode,
      e = b.pendingProps,
      f = b.memoizedState;
  null !== f && (f.alreadyCaptured ? null !== a && f === a.memoizedState ? f = {
    alreadyCaptured: !0,
    didTimeout: !0,
    timedOutAt: f.timedOutAt
  } : (f.alreadyCaptured = !0, f.didTimeout = !0) : f = null);
  var g = null !== f && f.didTimeout;
  if (null === a) g ? (g = e.fallback, e = If(null, d, 0, null), d = If(g, d, c, null), e.sibling = d, c = e, c.return = d.return = b) : c = d = Ig(b, null, e.children, c);else {
    var h = a.memoizedState;
    null !== h && h.didTimeout ? (d = a.child, a = d.sibling, g ? (c = e.fallback, d = Gf(d, d.pendingProps, 0), d.effectTag |= 2, e = d.sibling = Gf(a, c, a.expirationTime), e.effectTag |= 2, c = d, d.childExpirationTime = 0, d = e, c.return = d.return = b) : (g = a.child, d = Hg(b, d.child, e.children, c), Hg(b, g, null, c), c = d)) : (a = a.child, g ? (g = e.fallback, e = If(null, d, 0, null), e.effectTag |= 2, e.child = a, a.return = e, d = e.sibling = If(g, d, c, null), d.effectTag |= 2, c = e, e.childExpirationTime = 0, c.return = d.return = b) : d = c = Hg(b, a, e.children, c));
  }
  b.memoizedState = f;
  b.child = c;
  return d;
}

function Vg(a, b, c) {
  null !== a && (b.firstContextDependency = a.firstContextDependency);
  var d = b.childExpirationTime;
  if (0 === d || d > c) return null;
  null !== a && b.child !== a.child ? r("153") : void 0;

  if (null !== b.child) {
    a = b.child;
    c = Gf(a, a.pendingProps, a.expirationTime);
    b.child = c;

    for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = Gf(a, a.pendingProps, a.expirationTime), c.return = b;

    c.sibling = null;
  }

  return b.child;
}

function eh(a, b, c) {
  var d = b.expirationTime;

  if (null !== a && a.memoizedProps === b.pendingProps && !L.current && (0 === d || d > c)) {
    switch (b.tag) {
      case 3:
        bh(b);
        Rg();
        break;

      case 5:
        qg(b);
        break;

      case 1:
        M(b.type) && xf(b);
        break;

      case 4:
        og(b, b.stateNode.containerInfo);
        break;

      case 10:
        gg(b, b.memoizedProps.value);
        break;

      case 13:
        if (d = b.memoizedState, null !== d && d.didTimeout) {
          d = b.child.childExpirationTime;
          if (0 !== d && d <= c) return dh(a, b, c);
          b = Vg(a, b, c);
          return null !== b ? b.sibling : null;
        }

    }

    return Vg(a, b, c);
  }

  b.expirationTime = 0;

  switch (b.tag) {
    case 2:
      d = b.elementType;
      null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);
      a = b.pendingProps;
      var e = sf(b, K.current);
      ig(b, c);
      e = d(a, e);
      b.effectTag |= 1;

      if ("object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {
        b.tag = 1;

        if (M(d)) {
          var f = !0;
          xf(b);
        } else f = !1;

        b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;
        var g = d.getDerivedStateFromProps;
        "function" === typeof g && ug(b, d, g, a);
        e.updater = yg;
        b.stateNode = e;
        e._reactInternalFiber = b;
        Cg(b, d, a, c);
        b = ah(null, b, d, !0, f, c);
      } else b.tag = 0, P(null, b, e, c), b = b.child;

      return b;

    case 16:
      e = b.elementType;
      null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2);
      f = b.pendingProps;
      a = Sg(e);
      b.type = a;
      e = b.tag = Ff(a);
      f = ch(a, f);
      g = void 0;

      switch (e) {
        case 0:
          g = Yg(null, b, a, f, c);
          break;

        case 1:
          g = $g(null, b, a, f, c);
          break;

        case 11:
          g = Ug(null, b, a, f, c);
          break;

        case 14:
          g = Wg(null, b, a, ch(a.type, f), d, c);
          break;

        default:
          r("283", a);
      }

      return g;

    case 0:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ch(d, e), Yg(a, b, d, e, c);

    case 1:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ch(d, e), $g(a, b, d, e, c);

    case 3:
      bh(b);
      d = b.updateQueue;
      null === d ? r("282") : void 0;
      e = b.memoizedState;
      e = null !== e ? e.element : null;
      Zf(b, d, b.pendingProps, null, c);
      d = b.memoizedState.element;
      if (d === e) Rg(), b = Vg(a, b, c);else {
        e = b.stateNode;
        if (e = (null === a || null === a.child) && e.hydrate) Kg = nf(b.stateNode.containerInfo), Jg = b, e = Lg = !0;
        e ? (b.effectTag |= 2, b.child = Ig(b, null, d, c)) : (P(a, b, d, c), Rg());
        b = b.child;
      }
      return b;

    case 5:
      return qg(b), null === a && Og(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, jf(d, e) ? g = null : null !== f && jf(d, f) && (b.effectTag |= 16), Zg(a, b), 1073741823 !== c && b.mode & 1 && e.hidden ? (b.expirationTime = 1073741823, b = null) : (P(a, b, g, c), b = b.child), b;

    case 6:
      return null === a && Og(b), null;

    case 13:
      return dh(a, b, c);

    case 4:
      return og(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Hg(b, null, d, c) : P(a, b, d, c), b.child;

    case 11:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ch(d, e), Ug(a, b, d, e, c);

    case 7:
      return P(a, b, b.pendingProps, c), b.child;

    case 8:
      return P(a, b, b.pendingProps.children, c), b.child;

    case 12:
      return P(a, b, b.pendingProps.children, c), b.child;

    case 10:
      a: {
        d = b.type._context;
        e = b.pendingProps;
        g = b.memoizedProps;
        f = e.value;
        gg(b, f);

        if (null !== g) {
          var h = g.value;
          f = h === f && (0 !== h || 1 / h === 1 / f) || h !== h && f !== f ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0;

          if (0 === f) {
            if (g.children === e.children && !L.current) {
              b = Vg(a, b, c);
              break a;
            }
          } else for (g = b.child, null !== g && (g.return = b); null !== g;) {
            h = g.firstContextDependency;

            if (null !== h) {
              do {
                if (h.context === d && 0 !== (h.observedBits & f)) {
                  if (1 === g.tag) {
                    var k = Tf(c);
                    k.tag = 2;
                    Vf(g, k);
                  }

                  if (0 === g.expirationTime || g.expirationTime > c) g.expirationTime = c;
                  k = g.alternate;
                  null !== k && (0 === k.expirationTime || k.expirationTime > c) && (k.expirationTime = c);

                  for (var l = g.return; null !== l;) {
                    k = l.alternate;
                    if (0 === l.childExpirationTime || l.childExpirationTime > c) l.childExpirationTime = c, null !== k && (0 === k.childExpirationTime || k.childExpirationTime > c) && (k.childExpirationTime = c);else if (null !== k && (0 === k.childExpirationTime || k.childExpirationTime > c)) k.childExpirationTime = c;else break;
                    l = l.return;
                  }
                }

                k = g.child;
                h = h.next;
              } while (null !== h);
            } else k = 10 === g.tag ? g.type === b.type ? null : g.child : g.child;

            if (null !== k) k.return = g;else for (k = g; null !== k;) {
              if (k === b) {
                k = null;
                break;
              }

              g = k.sibling;

              if (null !== g) {
                g.return = k.return;
                k = g;
                break;
              }

              k = k.return;
            }
            g = k;
          }
        }

        P(a, b, e.children, c);
        b = b.child;
      }

      return b;

    case 9:
      return e = b.type, f = b.pendingProps, d = f.children, ig(b, c), e = jg(e, f.unstable_observedBits), d = d(e), b.effectTag |= 1, P(a, b, d, c), b.child;

    case 14:
      return e = b.type, f = ch(e.type, b.pendingProps), Wg(a, b, e, f, d, c);

    case 15:
      return Xg(a, b, b.type, b.pendingProps, d, c);

    case 17:
      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : ch(d, e), null !== a && (a.alternate = null, b.alternate = null, b.effectTag |= 2), b.tag = 1, M(d) ? (a = !0, xf(b)) : a = !1, ig(b, c), Ag(b, d, e, c), Cg(b, d, e, c), ah(null, b, d, !0, a, c);

    default:
      r("156");
  }
}

function zh(a) {
  a.effectTag |= 4;
}

var Ah = void 0,
    Bh = void 0,
    Ch = void 0,
    Dh = void 0;

Ah = function (a, b) {
  for (var c = b.child; null !== c;) {
    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
      c.child.return = c;
      c = c.child;
      continue;
    }
    if (c === b) break;

    for (; null === c.sibling;) {
      if (null === c.return || c.return === b) return;
      c = c.return;
    }

    c.sibling.return = c.return;
    c = c.sibling;
  }
};

Bh = function () {};

Ch = function (a, b, c, d, e) {
  var f = a.memoizedProps;

  if (f !== d) {
    var g = b.stateNode;
    ng(O.current);
    a = null;

    switch (c) {
      case "input":
        f = Qc(g, f);
        d = Qc(g, d);
        a = [];
        break;

      case "option":
        f = Me(g, f);
        d = Me(g, d);
        a = [];
        break;

      case "select":
        f = n({}, f, {
          value: void 0
        });
        d = n({}, d, {
          value: void 0
        });
        a = [];
        break;

      case "textarea":
        f = Oe(g, f);
        d = Oe(g, d);
        a = [];
        break;

      default:
        "function" !== typeof f.onClick && "function" === typeof d.onClick && (g.onclick = ef);
    }

    bf(c, d);
    g = c = void 0;
    var h = null;

    for (c in f) if (!d.hasOwnProperty(c) && f.hasOwnProperty(c) && null != f[c]) if ("style" === c) {
      var k = f[c];

      for (g in k) k.hasOwnProperty(g) && (h || (h = {}), h[g] = "");
    } else "dangerouslySetInnerHTML" !== c && "children" !== c && "suppressContentEditableWarning" !== c && "suppressHydrationWarning" !== c && "autoFocus" !== c && (ua.hasOwnProperty(c) ? a || (a = []) : (a = a || []).push(c, null));

    for (c in d) {
      var l = d[c];
      k = null != f ? f[c] : void 0;
      if (d.hasOwnProperty(c) && l !== k && (null != l || null != k)) if ("style" === c) {
        if (k) {
          for (g in k) !k.hasOwnProperty(g) || l && l.hasOwnProperty(g) || (h || (h = {}), h[g] = "");

          for (g in l) l.hasOwnProperty(g) && k[g] !== l[g] && (h || (h = {}), h[g] = l[g]);
        } else h || (a || (a = []), a.push(c, h)), h = l;
      } else "dangerouslySetInnerHTML" === c ? (l = l ? l.__html : void 0, k = k ? k.__html : void 0, null != l && k !== l && (a = a || []).push(c, "" + l)) : "children" === c ? k === l || "string" !== typeof l && "number" !== typeof l || (a = a || []).push(c, "" + l) : "suppressContentEditableWarning" !== c && "suppressHydrationWarning" !== c && (ua.hasOwnProperty(c) ? (null != l && df(e, c), a || k === l || (a = [])) : (a = a || []).push(c, l));
    }

    h && (a = a || []).push("style", h);
    e = a;
    (b.updateQueue = e) && zh(b);
  }
};

Dh = function (a, b, c, d) {
  c !== d && zh(b);
};

function Eh(a, b) {
  var c = b.source,
      d = b.stack;
  null === d && null !== c && (d = Bc(c));
  null !== c && Ac(c.type);
  b = b.value;
  null !== a && 1 === a.tag && Ac(a.type);

  try {
    console.error(b);
  } catch (e) {
    setTimeout(function () {
      throw e;
    });
  }
}

function Fh(a) {
  var b = a.ref;
  if (null !== b) if ("function" === typeof b) try {
    b(null);
  } catch (c) {
    Gh(a, c);
  } else b.current = null;
}

function Hh(a) {
  "function" === typeof Af && Af(a);

  switch (a.tag) {
    case 1:
      Fh(a);
      var b = a.stateNode;
      if ("function" === typeof b.componentWillUnmount) try {
        b.props = a.memoizedProps, b.state = a.memoizedState, b.componentWillUnmount();
      } catch (c) {
        Gh(a, c);
      }
      break;

    case 5:
      Fh(a);
      break;

    case 4:
      Ih(a);
  }
}

function Jh(a) {
  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}

function Kh(a) {
  a: {
    for (var b = a.return; null !== b;) {
      if (Jh(b)) {
        var c = b;
        break a;
      }

      b = b.return;
    }

    r("160");
    c = void 0;
  }

  var d = b = void 0;

  switch (c.tag) {
    case 5:
      b = c.stateNode;
      d = !1;
      break;

    case 3:
      b = c.stateNode.containerInfo;
      d = !0;
      break;

    case 4:
      b = c.stateNode.containerInfo;
      d = !0;
      break;

    default:
      r("161");
  }

  c.effectTag & 16 && (Xe(b, ""), c.effectTag &= -17);

  a: b: for (c = a;;) {
    for (; null === c.sibling;) {
      if (null === c.return || Jh(c.return)) {
        c = null;
        break a;
      }

      c = c.return;
    }

    c.sibling.return = c.return;

    for (c = c.sibling; 5 !== c.tag && 6 !== c.tag;) {
      if (c.effectTag & 2) continue b;
      if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;
    }

    if (!(c.effectTag & 2)) {
      c = c.stateNode;
      break a;
    }
  }

  for (var e = a;;) {
    if (5 === e.tag || 6 === e.tag) {
      if (c) {
        if (d) {
          var f = b,
              g = e.stateNode,
              h = c;
          8 === f.nodeType ? f.parentNode.insertBefore(g, h) : f.insertBefore(g, h);
        } else b.insertBefore(e.stateNode, c);
      } else d ? (g = b, h = e.stateNode, 8 === g.nodeType ? (f = g.parentNode, f.insertBefore(h, g)) : (f = g, f.appendChild(h)), g = g._reactRootContainer, null !== g && void 0 !== g || null !== f.onclick || (f.onclick = ef)) : b.appendChild(e.stateNode);
    } else if (4 !== e.tag && null !== e.child) {
      e.child.return = e;
      e = e.child;
      continue;
    }
    if (e === a) break;

    for (; null === e.sibling;) {
      if (null === e.return || e.return === a) return;
      e = e.return;
    }

    e.sibling.return = e.return;
    e = e.sibling;
  }
}

function Ih(a) {
  for (var b = a, c = !1, d = void 0, e = void 0;;) {
    if (!c) {
      c = b.return;

      a: for (;;) {
        null === c ? r("160") : void 0;

        switch (c.tag) {
          case 5:
            d = c.stateNode;
            e = !1;
            break a;

          case 3:
            d = c.stateNode.containerInfo;
            e = !0;
            break a;

          case 4:
            d = c.stateNode.containerInfo;
            e = !0;
            break a;
        }

        c = c.return;
      }

      c = !0;
    }

    if (5 === b.tag || 6 === b.tag) {
      a: for (var f = b, g = f;;) if (Hh(g), null !== g.child && 4 !== g.tag) g.child.return = g, g = g.child;else {
        if (g === f) break;

        for (; null === g.sibling;) {
          if (null === g.return || g.return === f) break a;
          g = g.return;
        }

        g.sibling.return = g.return;
        g = g.sibling;
      }

      e ? (f = d, g = b.stateNode, 8 === f.nodeType ? f.parentNode.removeChild(g) : f.removeChild(g)) : d.removeChild(b.stateNode);
    } else if (4 === b.tag ? (d = b.stateNode.containerInfo, e = !0) : Hh(b), null !== b.child) {
      b.child.return = b;
      b = b.child;
      continue;
    }

    if (b === a) break;

    for (; null === b.sibling;) {
      if (null === b.return || b.return === a) return;
      b = b.return;
      4 === b.tag && (c = !1);
    }

    b.sibling.return = b.return;
    b = b.sibling;
  }
}

function Lh(a, b) {
  switch (b.tag) {
    case 1:
      break;

    case 5:
      var c = b.stateNode;

      if (null != c) {
        var d = b.memoizedProps,
            e = null !== a ? a.memoizedProps : d;
        a = b.type;
        var f = b.updateQueue;
        b.updateQueue = null;

        if (null !== f) {
          c[Ma] = d;
          "input" === a && "radio" === d.type && null != d.name && Sc(c, d);
          cf(a, e);
          b = cf(a, d);

          for (e = 0; e < f.length; e += 2) {
            var g = f[e],
                h = f[e + 1];
            "style" === g ? $e(c, h) : "dangerouslySetInnerHTML" === g ? We(c, h) : "children" === g ? Xe(c, h) : Oc(c, g, h, b);
          }

          switch (a) {
            case "input":
              Tc(c, d);
              break;

            case "textarea":
              Qe(c, d);
              break;

            case "select":
              a = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, f = d.value, null != f ? Ne(c, !!d.multiple, f, !1) : a !== !!d.multiple && (null != d.defaultValue ? Ne(c, !!d.multiple, d.defaultValue, !0) : Ne(c, !!d.multiple, d.multiple ? [] : "", !1));
          }
        }
      }

      break;

    case 6:
      null === b.stateNode ? r("162") : void 0;
      b.stateNode.nodeValue = b.memoizedProps;
      break;

    case 3:
      break;

    case 12:
      break;

    case 13:
      break;

    case 17:
      break;

    default:
      r("163");
  }
}

function Mh(a, b, c) {
  c = Tf(c);
  c.tag = 3;
  c.payload = {
    element: null
  };
  var d = b.value;

  c.callback = function () {
    Nh(d);
    Eh(a, b);
  };

  return c;
}

function Oh(a, b, c) {
  c = Tf(c);
  c.tag = 3;
  var d = a.type.getDerivedStateFromError;

  if ("function" === typeof d) {
    var e = b.value;

    c.payload = function () {
      return d(e);
    };
  }

  var f = a.stateNode;
  null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
    "function" !== typeof d && (null === Ph ? Ph = new Set([this]) : Ph.add(this));
    var c = b.value,
        e = b.stack;
    Eh(a, b);
    this.componentDidCatch(c, {
      componentStack: null !== e ? e : ""
    });
  });
  return c;
}

function Qh(a) {
  switch (a.tag) {
    case 1:
      M(a.type) && tf(a);
      var b = a.effectTag;
      return b & 1024 ? (a.effectTag = b & -1025 | 64, a) : null;

    case 3:
      return pg(a), uf(a), b = a.effectTag, 0 !== (b & 64) ? r("285") : void 0, a.effectTag = b & -1025 | 64, a;

    case 5:
      return rg(a), null;

    case 13:
      b = a.effectTag;

      if (b & 1024) {
        a.effectTag = b & -1025 | 64;
        b = a.alternate;
        b = null !== b ? b.memoizedState : null;
        var c = a.memoizedState;
        null === c ? c = {
          alreadyCaptured: !0,
          didTimeout: !1,
          timedOutAt: 0
        } : b === c ? c = {
          alreadyCaptured: !0,
          didTimeout: c.didTimeout,
          timedOutAt: c.timedOutAt
        } : c.alreadyCaptured = !0;
        a.memoizedState = c;
        return a;
      }

      return null;

    case 4:
      return pg(a), null;

    case 10:
      return hg(a), null;

    default:
      return null;
  }
}

var Rh = {
  readContext: jg
},
    Sh = kc.ReactCurrentOwner,
    Th = 0,
    Uh = 0,
    Vh = !1,
    Q = null,
    R = null,
    S = 0,
    Wh = -1,
    Xh = !1,
    T = null,
    Yh = !1,
    Ph = null;

function Zh() {
  if (null !== Q) for (var a = Q.return; null !== a;) {
    var b = a;

    switch (b.tag) {
      case 1:
        var c = b.type.childContextTypes;
        null !== c && void 0 !== c && tf(b);
        break;

      case 3:
        pg(b);
        uf(b);
        break;

      case 5:
        rg(b);
        break;

      case 4:
        pg(b);
        break;

      case 10:
        hg(b);
    }

    a = a.return;
  }
  R = null;
  S = 0;
  Wh = -1;
  Xh = !1;
  Q = null;
}

function $h(a) {
  for (;;) {
    var b = a.alternate,
        c = a.return,
        d = a.sibling;

    if (0 === (a.effectTag & 512)) {
      var e = b;
      b = a;
      var f = b.pendingProps;

      switch (b.tag) {
        case 2:
          break;

        case 16:
          break;

        case 15:
        case 0:
          break;

        case 1:
          M(b.type) && tf(b);
          break;

        case 3:
          pg(b);
          uf(b);
          f = b.stateNode;
          f.pendingContext && (f.context = f.pendingContext, f.pendingContext = null);
          if (null === e || null === e.child) Qg(b), b.effectTag &= -3;
          Bh(b);
          break;

        case 5:
          rg(b);
          var g = ng(mg.current),
              h = b.type;
          if (null !== e && null != b.stateNode) Ch(e, b, h, f, g), e.ref !== b.ref && (b.effectTag |= 128);else if (f) {
            var k = ng(O.current);

            if (Qg(b)) {
              f = b;
              e = f.stateNode;
              var l = f.type,
                  m = f.memoizedProps,
                  p = g;
              e[La] = f;
              e[Ma] = m;
              h = void 0;
              g = l;

              switch (g) {
                case "iframe":
                case "object":
                  H("load", e);
                  break;

                case "video":
                case "audio":
                  for (l = 0; l < lb.length; l++) H(lb[l], e);

                  break;

                case "source":
                  H("error", e);
                  break;

                case "img":
                case "image":
                case "link":
                  H("error", e);
                  H("load", e);
                  break;

                case "form":
                  H("reset", e);
                  H("submit", e);
                  break;

                case "details":
                  H("toggle", e);
                  break;

                case "input":
                  Rc(e, m);
                  H("invalid", e);
                  df(p, "onChange");
                  break;

                case "select":
                  e._wrapperState = {
                    wasMultiple: !!m.multiple
                  };
                  H("invalid", e);
                  df(p, "onChange");
                  break;

                case "textarea":
                  Pe(e, m), H("invalid", e), df(p, "onChange");
              }

              bf(g, m);
              l = null;

              for (h in m) m.hasOwnProperty(h) && (k = m[h], "children" === h ? "string" === typeof k ? e.textContent !== k && (l = ["children", k]) : "number" === typeof k && e.textContent !== "" + k && (l = ["children", "" + k]) : ua.hasOwnProperty(h) && null != k && df(p, h));

              switch (g) {
                case "input":
                  ic(e);
                  bd(e, m, !0);
                  break;

                case "textarea":
                  ic(e);
                  Re(e, m);
                  break;

                case "select":
                case "option":
                  break;

                default:
                  "function" === typeof m.onClick && (e.onclick = ef);
              }

              h = l;
              f.updateQueue = h;
              f = null !== h ? !0 : !1;
              f && zh(b);
            } else {
              m = b;
              e = h;
              p = f;
              l = 9 === g.nodeType ? g : g.ownerDocument;
              k === Se.html && (k = Te(e));
              k === Se.html ? "script" === e ? (e = l.createElement("div"), e.innerHTML = "<script>\x3c/script>", l = e.removeChild(e.firstChild)) : "string" === typeof p.is ? l = l.createElement(e, {
                is: p.is
              }) : (l = l.createElement(e), "select" === e && p.multiple && (l.multiple = !0)) : l = l.createElementNS(k, e);
              e = l;
              e[La] = m;
              e[Ma] = f;
              Ah(e, b, !1, !1);
              p = e;
              l = h;
              m = f;
              var v = g,
                  B = cf(l, m);

              switch (l) {
                case "iframe":
                case "object":
                  H("load", p);
                  g = m;
                  break;

                case "video":
                case "audio":
                  for (g = 0; g < lb.length; g++) H(lb[g], p);

                  g = m;
                  break;

                case "source":
                  H("error", p);
                  g = m;
                  break;

                case "img":
                case "image":
                case "link":
                  H("error", p);
                  H("load", p);
                  g = m;
                  break;

                case "form":
                  H("reset", p);
                  H("submit", p);
                  g = m;
                  break;

                case "details":
                  H("toggle", p);
                  g = m;
                  break;

                case "input":
                  Rc(p, m);
                  g = Qc(p, m);
                  H("invalid", p);
                  df(v, "onChange");
                  break;

                case "option":
                  g = Me(p, m);
                  break;

                case "select":
                  p._wrapperState = {
                    wasMultiple: !!m.multiple
                  };
                  g = n({}, m, {
                    value: void 0
                  });
                  H("invalid", p);
                  df(v, "onChange");
                  break;

                case "textarea":
                  Pe(p, m);
                  g = Oe(p, m);
                  H("invalid", p);
                  df(v, "onChange");
                  break;

                default:
                  g = m;
              }

              bf(l, g);
              k = void 0;
              var w = l,
                  C = p,
                  u = g;

              for (k in u) if (u.hasOwnProperty(k)) {
                var q = u[k];
                "style" === k ? $e(C, q) : "dangerouslySetInnerHTML" === k ? (q = q ? q.__html : void 0, null != q && We(C, q)) : "children" === k ? "string" === typeof q ? ("textarea" !== w || "" !== q) && Xe(C, q) : "number" === typeof q && Xe(C, "" + q) : "suppressContentEditableWarning" !== k && "suppressHydrationWarning" !== k && "autoFocus" !== k && (ua.hasOwnProperty(k) ? null != q && df(v, k) : null != q && Oc(C, k, q, B));
              }

              switch (l) {
                case "input":
                  ic(p);
                  bd(p, m, !1);
                  break;

                case "textarea":
                  ic(p);
                  Re(p, m);
                  break;

                case "option":
                  null != m.value && p.setAttribute("value", "" + Pc(m.value));
                  break;

                case "select":
                  g = p;
                  g.multiple = !!m.multiple;
                  p = m.value;
                  null != p ? Ne(g, !!m.multiple, p, !1) : null != m.defaultValue && Ne(g, !!m.multiple, m.defaultValue, !0);
                  break;

                default:
                  "function" === typeof g.onClick && (p.onclick = ef);
              }

              (f = hf(h, f)) && zh(b);
              b.stateNode = e;
            }

            null !== b.ref && (b.effectTag |= 128);
          } else null === b.stateNode ? r("166") : void 0;
          break;

        case 6:
          e && null != b.stateNode ? Dh(e, b, e.memoizedProps, f) : ("string" !== typeof f && (null === b.stateNode ? r("166") : void 0), e = ng(mg.current), ng(O.current), Qg(b) ? (f = b, h = f.stateNode, e = f.memoizedProps, h[La] = f, (f = h.nodeValue !== e) && zh(b)) : (h = b, f = (9 === e.nodeType ? e : e.ownerDocument).createTextNode(f), f[La] = b, h.stateNode = f));
          break;

        case 11:
          break;

        case 13:
          f = b.memoizedState;
          h = null !== e ? e.memoizedState : null;
          (null !== f && f.didTimeout) !== (null !== h && h.didTimeout) && (b.effectTag |= 4);
          break;

        case 7:
          break;

        case 8:
          break;

        case 12:
          break;

        case 4:
          pg(b);
          Bh(b);
          break;

        case 10:
          hg(b);
          break;

        case 9:
          break;

        case 14:
          break;

        case 17:
          M(b.type) && tf(b);
          break;

        default:
          r("156");
      }

      Q = null;
      b = a;

      if (1073741823 === S || 1073741823 !== b.childExpirationTime) {
        f = 0;

        for (h = b.child; null !== h;) {
          e = h.expirationTime;
          g = h.childExpirationTime;
          if (0 === f || 0 !== e && e < f) f = e;
          if (0 === f || 0 !== g && g < f) f = g;
          h = h.sibling;
        }

        b.childExpirationTime = f;
      }

      null !== c && 0 === (c.effectTag & 512) && (null === c.firstEffect && (c.firstEffect = a.firstEffect), null !== a.lastEffect && (null !== c.lastEffect && (c.lastEffect.nextEffect = a.firstEffect), c.lastEffect = a.lastEffect), 1 < a.effectTag && (null !== c.lastEffect ? c.lastEffect.nextEffect = a : c.firstEffect = a, c.lastEffect = a));
    } else {
      a = Qh(a, S);
      if (null !== a) return a.effectTag &= 511, a;
      null !== c && (c.firstEffect = c.lastEffect = null, c.effectTag |= 512);
    }

    if (null !== d) return d;
    if (null !== c) a = c;else break;
  }

  return null;
}

function ai(a) {
  var b = eh(a.alternate, a, S);
  a.memoizedProps = a.pendingProps;
  null === b && (b = $h(a));
  Sh.current = null;
  return b;
}

function bi(a, b, c) {
  Vh ? r("243") : void 0;
  Vh = !0;
  Sh.currentDispatcher = Rh;
  var d = a.nextExpirationTimeToWorkOn;
  if (d !== S || a !== R || null === Q) Zh(), R = a, S = d, Q = Gf(R.current, null, S), a.pendingCommitExpirationTime = 0;
  var e = !1;

  do {
    try {
      if (b) for (; null !== Q && !ci();) Q = ai(Q);else for (; null !== Q;) Q = ai(Q);
    } catch (C) {
      if (null === Q) e = !0, Nh(C);else {
        null === Q ? r("271") : void 0;
        var f = Q,
            g = f.return;
        if (null === g) e = !0, Nh(C);else {
          a: {
            var h = a,
                k = g,
                l = f,
                m = C;
            g = S;
            l.effectTag |= 512;
            l.firstEffect = l.lastEffect = null;

            if (null !== m && "object" === typeof m && "function" === typeof m.then) {
              var p = m;
              m = k;
              var v = -1,
                  B = -1;

              do {
                if (13 === m.tag) {
                  var w = m.alternate;

                  if (null !== w && (w = w.memoizedState, null !== w && w.didTimeout)) {
                    B = 10 * (w.timedOutAt - 2);
                    break;
                  }

                  w = m.pendingProps.maxDuration;
                  if ("number" === typeof w) if (0 >= w) v = 0;else if (-1 === v || w < v) v = w;
                }

                m = m.return;
              } while (null !== m);

              m = k;

              do {
                if (w = 13 === m.tag) void 0 === m.memoizedProps.fallback ? w = !1 : (w = m.memoizedState, w = null === w || !w.didTimeout);

                if (w) {
                  k = di.bind(null, h, m, l, 0 === (m.mode & 1) ? 1 : g);
                  p.then(k, k);

                  if (0 === (m.mode & 1)) {
                    m.effectTag |= 32;
                    P(l.alternate, l, null, g);
                    l.effectTag &= -513;
                    1 === l.tag && (l.effectTag &= -421, null === l.alternate && (l.tag = 17));
                    break a;
                  }

                  -1 === v ? h = 1073741823 : (-1 === B && (B = 10 * (Pf(h, g) - 2) - 5E3), h = B + v);
                  0 <= h && Wh < h && (Wh = h);
                  m.effectTag |= 1024;
                  m.expirationTime = g;
                  break a;
                }

                m = m.return;
              } while (null !== m);

              m = Error("An update was suspended, but no placeholder UI was provided.");
            }

            Xh = !0;
            m = bg(m, l);
            h = k;

            do {
              switch (h.tag) {
                case 3:
                  l = m;
                  h.effectTag |= 1024;
                  h.expirationTime = g;
                  g = Mh(h, l, g);
                  Wf(h, g);
                  break a;

                case 1:
                  if (l = m, k = h.type, p = h.stateNode, 0 === (h.effectTag & 64) && ("function" === typeof k.getDerivedStateFromError || null !== p && "function" === typeof p.componentDidCatch && (null === Ph || !Ph.has(p)))) {
                    h.effectTag |= 1024;
                    h.expirationTime = g;
                    g = Oh(h, l, g);
                    Wf(h, g);
                    break a;
                  }

              }

              h = h.return;
            } while (null !== h);
          }

          Q = $h(f);
          continue;
        }
      }
    }

    break;
  } while (1);

  Vh = !1;
  fg = eg = dg = Sh.currentDispatcher = null;
  if (e) R = null, a.finishedWork = null;else if (null !== Q) a.finishedWork = null;else {
    b = a.current.alternate;
    null === b ? r("281") : void 0;
    R = null;

    if (Xh) {
      e = a.latestPendingTime;
      f = a.latestSuspendedTime;
      g = a.latestPingedTime;

      if (0 !== e && e > d || 0 !== f && f > d || 0 !== g && g > d) {
        Of(a, d);
        ei(a, b, d, a.expirationTime, -1);
        return;
      }

      if (!a.didError && !c) {
        a.didError = !0;
        d = a.nextExpirationTimeToWorkOn = d;
        c = a.expirationTime = 1;
        ei(a, b, d, c, -1);
        return;
      }
    }

    c || -1 === Wh ? (a.pendingCommitExpirationTime = d, a.finishedWork = b) : (Of(a, d), c = 10 * (Pf(a, d) - 2), c < Wh && (Wh = c), c = 10 * (vg() - 2), c = Wh - c, ei(a, b, d, a.expirationTime, 0 > c ? 0 : c));
  }
}

function Gh(a, b) {
  var c;

  a: {
    Vh && !Yh ? r("263") : void 0;

    for (c = a.return; null !== c;) {
      switch (c.tag) {
        case 1:
          var d = c.stateNode;

          if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ph || !Ph.has(d))) {
            a = bg(b, a);
            a = Oh(c, a, 1);
            Vf(c, a);
            xg(c, 1);
            c = void 0;
            break a;
          }

          break;

        case 3:
          a = bg(b, a);
          a = Mh(c, a, 1);
          Vf(c, a);
          xg(c, 1);
          c = void 0;
          break a;
      }

      c = c.return;
    }

    3 === a.tag && (c = bg(b, a), c = Mh(a, c, 1), Vf(a, c), xg(a, 1));
    c = void 0;
  }

  return c;
}

function wg(a, b) {
  0 !== Uh ? a = Uh : Vh ? a = Yh ? 1 : S : b.mode & 1 ? (a = fi ? 2 + 10 * (((a - 2 + 15) / 10 | 0) + 1) : 2 + 25 * (((a - 2 + 500) / 25 | 0) + 1), null !== R && a === S && (a += 1)) : a = 1;
  fi && a > gi && (gi = a);
  return a;
}

function di(a, b, c, d) {
  var e = a.earliestSuspendedTime;
  var f = a.latestSuspendedTime;

  if (0 !== e && d >= e && d <= f) {
    f = e = d;
    a.didError = !1;
    var g = a.latestPingedTime;
    if (0 === g || g < f) a.latestPingedTime = f;
    Nf(f, a);
  } else e = vg(), e = wg(e, b), Mf(a, e);

  0 !== (b.mode & 1) && a === R && S === d && (R = null);
  hi(b, e);
  0 === (b.mode & 1) && (hi(c, e), 1 === c.tag && null !== c.stateNode && (b = Tf(e), b.tag = 2, Vf(c, b)));
  c = a.expirationTime;
  0 !== c && ii(a, c);
}

function hi(a, b) {
  if (0 === a.expirationTime || a.expirationTime > b) a.expirationTime = b;
  var c = a.alternate;
  null !== c && (0 === c.expirationTime || c.expirationTime > b) && (c.expirationTime = b);
  var d = a.return,
      e = null;
  if (null === d && 3 === a.tag) e = a.stateNode;else for (; null !== d;) {
    c = d.alternate;
    if (0 === d.childExpirationTime || d.childExpirationTime > b) d.childExpirationTime = b;
    null !== c && (0 === c.childExpirationTime || c.childExpirationTime > b) && (c.childExpirationTime = b);

    if (null === d.return && 3 === d.tag) {
      e = d.stateNode;
      break;
    }

    d = d.return;
  }
  return null === e ? null : e;
}

function xg(a, b) {
  a = hi(a, b);
  null !== a && (!Vh && 0 !== S && b < S && Zh(), Mf(a, b), Vh && !Yh && R === a || ii(a, a.expirationTime), ji > ki && (ji = 0, r("185")));
}

function li(a, b, c, d, e) {
  var f = Uh;
  Uh = 1;

  try {
    return a(b, c, d, e);
  } finally {
    Uh = f;
  }
}

var U = null,
    V = null,
    mi = 0,
    ni = void 0,
    W = !1,
    X = null,
    Y = 0,
    gi = 0,
    oi = !1,
    pi = !1,
    qi = null,
    ri = null,
    Z = !1,
    si = !1,
    fi = !1,
    ti = null,
    ui = da.unstable_now(),
    vi = (ui / 10 | 0) + 2,
    wi = vi,
    ki = 50,
    ji = 0,
    xi = null,
    yi = 1;

function zi() {
  vi = ((da.unstable_now() - ui) / 10 | 0) + 2;
}

function Ai(a, b) {
  if (0 !== mi) {
    if (b > mi) return;
    null !== ni && da.unstable_cancelCallback(ni);
  }

  mi = b;
  a = da.unstable_now() - ui;
  ni = da.unstable_scheduleCallback(Bi, {
    timeout: 10 * (b - 2) - a
  });
}

function ei(a, b, c, d, e) {
  a.expirationTime = d;
  0 !== e || ci() ? 0 < e && (a.timeoutHandle = kf(Ci.bind(null, a, b, c), e)) : (a.pendingCommitExpirationTime = c, a.finishedWork = b);
}

function Ci(a, b, c) {
  a.pendingCommitExpirationTime = c;
  a.finishedWork = b;
  zi();
  wi = vi;
  Di(a, c);
}

function vg() {
  if (W) return wi;
  Ei();
  if (0 === Y || 1073741823 === Y) zi(), wi = vi;
  return wi;
}

function ii(a, b) {
  if (null === a.nextScheduledRoot) a.expirationTime = b, null === V ? (U = V = a, a.nextScheduledRoot = a) : (V = V.nextScheduledRoot = a, V.nextScheduledRoot = U);else {
    var c = a.expirationTime;
    if (0 === c || b < c) a.expirationTime = b;
  }
  W || (Z ? si && (X = a, Y = 1, Fi(a, 1, !0)) : 1 === b ? Gi(1, null) : Ai(a, b));
}

function Ei() {
  var a = 0,
      b = null;
  if (null !== V) for (var c = V, d = U; null !== d;) {
    var e = d.expirationTime;

    if (0 === e) {
      null === c || null === V ? r("244") : void 0;

      if (d === d.nextScheduledRoot) {
        U = V = d.nextScheduledRoot = null;
        break;
      } else if (d === U) U = e = d.nextScheduledRoot, V.nextScheduledRoot = e, d.nextScheduledRoot = null;else if (d === V) {
        V = c;
        V.nextScheduledRoot = U;
        d.nextScheduledRoot = null;
        break;
      } else c.nextScheduledRoot = d.nextScheduledRoot, d.nextScheduledRoot = null;

      d = c.nextScheduledRoot;
    } else {
      if (0 === a || e < a) a = e, b = d;
      if (d === V) break;
      if (1 === a) break;
      c = d;
      d = d.nextScheduledRoot;
    }
  }
  X = b;
  Y = a;
}

function Bi(a) {
  if (a.didTimeout && null !== U) {
    zi();
    var b = U;

    do {
      var c = b.expirationTime;
      0 !== c && vi >= c && (b.nextExpirationTimeToWorkOn = vi);
      b = b.nextScheduledRoot;
    } while (b !== U);
  }

  Gi(0, a);
}

function Gi(a, b) {
  ri = b;
  Ei();
  if (null !== ri) for (zi(), wi = vi; null !== X && 0 !== Y && (0 === a || a >= Y) && (!oi || vi >= Y);) Fi(X, Y, vi >= Y), Ei(), zi(), wi = vi;else for (; null !== X && 0 !== Y && (0 === a || a >= Y);) Fi(X, Y, !0), Ei();
  null !== ri && (mi = 0, ni = null);
  0 !== Y && Ai(X, Y);
  ri = null;
  oi = !1;
  ji = 0;
  xi = null;
  if (null !== ti) for (a = ti, ti = null, b = 0; b < a.length; b++) {
    var c = a[b];

    try {
      c._onComplete();
    } catch (d) {
      pi || (pi = !0, qi = d);
    }
  }
  if (pi) throw a = qi, qi = null, pi = !1, a;
}

function Di(a, b) {
  W ? r("253") : void 0;
  X = a;
  Y = b;
  Fi(a, b, !0);
  Gi(1, null);
}

function Fi(a, b, c) {
  W ? r("245") : void 0;
  W = !0;

  if (null === ri || c) {
    var d = a.finishedWork;
    null !== d ? Hi(a, d, b) : (a.finishedWork = null, d = a.timeoutHandle, -1 !== d && (a.timeoutHandle = -1, lf(d)), bi(a, !1, c), d = a.finishedWork, null !== d && Hi(a, d, b));
  } else d = a.finishedWork, null !== d ? Hi(a, d, b) : (a.finishedWork = null, d = a.timeoutHandle, -1 !== d && (a.timeoutHandle = -1, lf(d)), bi(a, !0, c), d = a.finishedWork, null !== d && (ci() ? a.finishedWork = d : Hi(a, d, b)));

  W = !1;
}

function Hi(a, b, c) {
  var d = a.firstBatch;

  if (null !== d && d._expirationTime <= c && (null === ti ? ti = [d] : ti.push(d), d._defer)) {
    a.finishedWork = b;
    a.expirationTime = 0;
    return;
  }

  a.finishedWork = null;
  a === xi ? ji++ : (xi = a, ji = 0);
  Yh = Vh = !0;
  a.current === b ? r("177") : void 0;
  var e = a.pendingCommitExpirationTime;
  0 === e ? r("261") : void 0;
  a.pendingCommitExpirationTime = 0;
  var f = b.expirationTime,
      g = b.childExpirationTime,
      h = 0 === f || 0 !== g && g < f ? g : f;
  a.didError = !1;
  if (0 === h) a.earliestPendingTime = 0, a.latestPendingTime = 0, a.earliestSuspendedTime = 0, a.latestSuspendedTime = 0, a.latestPingedTime = 0;else {
    var k = a.latestPendingTime;
    0 !== k && (k < h ? a.earliestPendingTime = a.latestPendingTime = 0 : a.earliestPendingTime < h && (a.earliestPendingTime = a.latestPendingTime));
    var l = a.earliestSuspendedTime;
    0 === l ? Mf(a, h) : h > a.latestSuspendedTime ? (a.earliestSuspendedTime = 0, a.latestSuspendedTime = 0, a.latestPingedTime = 0, Mf(a, h)) : h < l && Mf(a, h);
  }
  Nf(0, a);
  Sh.current = null;
  if (1 < b.effectTag) {
    if (null !== b.lastEffect) {
      b.lastEffect.nextEffect = b;
      var m = b.firstEffect;
    } else m = b;
  } else m = b.firstEffect;
  ff = ce;
  var p = pe();

  if (qe(p)) {
    if ("selectionStart" in p) var v = {
      start: p.selectionStart,
      end: p.selectionEnd
    };else a: {
      var B = p.ownerDocument,
          w = B && B.defaultView || window,
          C = w.getSelection && w.getSelection();

      if (C && 0 !== C.rangeCount) {
        var u = C.anchorNode,
            q = C.anchorOffset,
            A = C.focusNode,
            fe = C.focusOffset;

        try {
          u.nodeType, A.nodeType;
        } catch (db) {
          v = null;
          break a;
        }

        var Ib = 0,
            Jc = -1,
            Kc = -1,
            Ni = 0,
            Oi = 0,
            t = p,
            Jb = null;

        b: for (;;) {
          for (var Lc;;) {
            t !== u || 0 !== q && 3 !== t.nodeType || (Jc = Ib + q);
            t !== A || 0 !== fe && 3 !== t.nodeType || (Kc = Ib + fe);
            3 === t.nodeType && (Ib += t.nodeValue.length);
            if (null === (Lc = t.firstChild)) break;
            Jb = t;
            t = Lc;
          }

          for (;;) {
            if (t === p) break b;
            Jb === u && ++Ni === q && (Jc = Ib);
            Jb === A && ++Oi === fe && (Kc = Ib);
            if (null !== (Lc = t.nextSibling)) break;
            t = Jb;
            Jb = t.parentNode;
          }

          t = Lc;
        }

        v = -1 === Jc || -1 === Kc ? null : {
          start: Jc,
          end: Kc
        };
      } else v = null;
    }
    var fh = v || {
      start: 0,
      end: 0
    };
  } else fh = null;

  gf = {
    focusedElem: p,
    selectionRange: fh
  };
  ce = !1;

  for (T = m; null !== T;) {
    var gh = !1,
        hh = void 0;

    try {
      for (; null !== T;) {
        if (T.effectTag & 256) {
          var ve = T.alternate;

          a: {
            var Qb = T;

            switch (Qb.tag) {
              case 1:
                if (Qb.effectTag & 256 && null !== ve) {
                  var Zi = ve.memoizedProps,
                      $i = ve.memoizedState,
                      Vc = Qb.stateNode;
                  Vc.props = Qb.memoizedProps;
                  Vc.state = Qb.memoizedState;
                  var aj = Vc.getSnapshotBeforeUpdate(Zi, $i);
                  Vc.__reactInternalSnapshotBeforeUpdate = aj;
                }

                break a;

              case 3:
              case 5:
              case 6:
              case 4:
              case 17:
                break a;

              default:
                r("163");
            }
          }
        }

        T = T.nextEffect;
      }
    } catch (db) {
      gh = !0, hh = db;
    }

    gh && (null === T ? r("178") : void 0, Gh(T, hh), null !== T && (T = T.nextEffect));
  }

  for (T = m; null !== T;) {
    var ih = !1,
        jh = void 0;

    try {
      for (; null !== T;) {
        var we = T.effectTag;
        we & 16 && Xe(T.stateNode, "");

        if (we & 128) {
          var kh = T.alternate;

          if (null !== kh) {
            var Wc = kh.ref;
            null !== Wc && ("function" === typeof Wc ? Wc(null) : Wc.current = null);
          }
        }

        switch (we & 14) {
          case 2:
            Kh(T);
            T.effectTag &= -3;
            break;

          case 6:
            Kh(T);
            T.effectTag &= -3;
            Lh(T.alternate, T);
            break;

          case 4:
            Lh(T.alternate, T);
            break;

          case 8:
            var lh = T;
            Ih(lh);
            var Rb = lh;
            Rb.return = null;
            Rb.child = null;
            Rb.alternate && (Rb.alternate.child = null, Rb.alternate.return = null);
        }

        T = T.nextEffect;
      }
    } catch (db) {
      ih = !0, jh = db;
    }

    ih && (null === T ? r("178") : void 0, Gh(T, jh), null !== T && (T = T.nextEffect));
  }

  var mh = gf,
      bj = pe(),
      E = mh.focusedElem,
      eb = mh.selectionRange;

  if (bj !== E && E && E.ownerDocument && oe(E.ownerDocument.documentElement, E)) {
    if (null !== eb && qe(E)) {
      var nh = eb.start,
          xe = eb.end;
      void 0 === xe && (xe = nh);
      if ("selectionStart" in E) E.selectionStart = nh, E.selectionEnd = Math.min(xe, E.value.length);else {
        var ye = E.ownerDocument || document,
            ba = (ye && ye.defaultView || window).getSelection(),
            oh = E.textContent.length,
            fb = Math.min(eb.start, oh),
            Sb = void 0 === eb.end ? fb : Math.min(eb.end, oh);

        if (!ba.extend && fb > Sb) {
          var cj = Sb;
          Sb = fb;
          fb = cj;
        }

        var Tb = ne(E, fb),
            Ja = ne(E, Sb);

        if (Tb && Ja && (1 !== ba.rangeCount || ba.anchorNode !== Tb.node || ba.anchorOffset !== Tb.offset || ba.focusNode !== Ja.node || ba.focusOffset !== Ja.offset)) {
          var Xc = ye.createRange();
          Xc.setStart(Tb.node, Tb.offset);
          ba.removeAllRanges();
          fb > Sb ? (ba.addRange(Xc), ba.extend(Ja.node, Ja.offset)) : (Xc.setEnd(Ja.node, Ja.offset), ba.addRange(Xc));
        }
      }
    }

    for (var ze = [], gb = E; gb = gb.parentNode;) 1 === gb.nodeType && ze.push({
      element: gb,
      left: gb.scrollLeft,
      top: gb.scrollTop
    });

    "function" === typeof E.focus && E.focus();

    for (var Ae = 0; Ae < ze.length; Ae++) {
      var Yc = ze[Ae];
      Yc.element.scrollLeft = Yc.left;
      Yc.element.scrollTop = Yc.top;
    }
  }

  gf = null;
  ce = !!ff;
  ff = null;
  a.current = b;

  for (T = m; null !== T;) {
    var ph = !1,
        qh = void 0;

    try {
      for (var dj = e; null !== T;) {
        var rh = T.effectTag;

        if (rh & 36) {
          var Zc = void 0,
              hb = T.alternate,
              x = T,
              sh = dj;

          switch (x.tag) {
            case 1:
              var ca = x.stateNode;
              if (x.effectTag & 4) if (null === hb) ca.props = x.memoizedProps, ca.state = x.memoizedState, ca.componentDidMount();else {
                var ej = hb.memoizedProps,
                    fj = hb.memoizedState;
                ca.props = x.memoizedProps;
                ca.state = x.memoizedState;
                ca.componentDidUpdate(ej, fj, ca.__reactInternalSnapshotBeforeUpdate);
              }
              var th = x.updateQueue;
              null !== th && (ca.props = x.memoizedProps, ca.state = x.memoizedState, $f(x, th, ca, sh));
              break;

            case 3:
              var uh = x.updateQueue;

              if (null !== uh) {
                var Be = null;
                if (null !== x.child) switch (x.child.tag) {
                  case 5:
                    Be = x.child.stateNode;
                    break;

                  case 1:
                    Be = x.child.stateNode;
                }
                $f(x, uh, Be, sh);
              }

              break;

            case 5:
              var gj = x.stateNode;
              null === hb && x.effectTag & 4 && hf(x.type, x.memoizedProps) && gj.focus();
              break;

            case 6:
              break;

            case 4:
              break;

            case 12:
              break;

            case 13:
              if (x.effectTag & 32) {
                x.memoizedState = {
                  alreadyCaptured: !0,
                  didTimeout: !1,
                  timedOutAt: 0
                };
                xg(x, 1);
                break;
              }

              var vh = null !== hb ? hb.memoizedState : null,
                  Ub = x.memoizedState,
                  hj = null !== vh ? vh.didTimeout : !1,
                  Ce = x;
              if (null === Ub) Zc = !1;else if (Zc = Ub.didTimeout) Ce = x.child, Ub.alreadyCaptured = !1, 0 === Ub.timedOutAt && (Ub.timedOutAt = vg());
              if (Zc !== hj && null !== Ce) a: for (var De = Ce, wh = Zc, z = De;;) {
                if (5 === z.tag) {
                  var ij = z.stateNode;
                  if (wh) ij.style.display = "none";else {
                    var jj = z.stateNode,
                        $c = z.memoizedProps.style,
                        kj = void 0 !== $c && null !== $c && $c.hasOwnProperty("display") ? $c.display : null;
                    jj.style.display = kj;
                  }
                } else if (6 === z.tag) z.stateNode.nodeValue = wh ? "" : z.memoizedProps;else if (null !== z.child) {
                  z.child.return = z;
                  z = z.child;
                  continue;
                }

                if (z === De) break a;

                for (; null === z.sibling;) {
                  if (null === z.return || z.return === De) break a;
                  z = z.return;
                }

                z.sibling.return = z.return;
                z = z.sibling;
              }
              break;

            case 17:
              break;

            default:
              r("163");
          }
        }

        if (rh & 128) {
          var ad = T.ref;

          if (null !== ad) {
            var xh = T.stateNode;

            switch (T.tag) {
              case 5:
                var Ee = xh;
                break;

              default:
                Ee = xh;
            }

            "function" === typeof ad ? ad(Ee) : ad.current = Ee;
          }
        }

        var lj = T.nextEffect;
        T.nextEffect = null;
        T = lj;
      }
    } catch (db) {
      ph = !0, qh = db;
    }

    ph && (null === T ? r("178") : void 0, Gh(T, qh), null !== T && (T = T.nextEffect));
  }

  Vh = Yh = !1;
  "function" === typeof zf && zf(b.stateNode);
  var Fe = b.expirationTime,
      Ge = b.childExpirationTime,
      yh = 0 === Fe || 0 !== Ge && Ge < Fe ? Ge : Fe;
  0 === yh && (Ph = null);
  a.expirationTime = yh;
  a.finishedWork = null;
}

function ci() {
  return oi ? !0 : null === ri || ri.timeRemaining() > yi ? !1 : oi = !0;
}

function Nh(a) {
  null === X ? r("246") : void 0;
  X.expirationTime = 0;
  pi || (pi = !0, qi = a);
}

function Ii(a, b) {
  var c = Z;
  Z = !0;

  try {
    return a(b);
  } finally {
    (Z = c) || W || Gi(1, null);
  }
}

function Ji(a, b) {
  if (Z && !si) {
    si = !0;

    try {
      return a(b);
    } finally {
      si = !1;
    }
  }

  return a(b);
}

function Ki(a, b, c) {
  if (fi) return a(b, c);
  Z || W || 0 === gi || (Gi(gi, null), gi = 0);
  var d = fi,
      e = Z;
  Z = fi = !0;

  try {
    return a(b, c);
  } finally {
    fi = d, (Z = e) || W || Gi(1, null);
  }
}

function Li(a, b, c, d, e) {
  var f = b.current;

  a: if (c) {
    c = c._reactInternalFiber;

    b: {
      2 === Gd(c) && 1 === c.tag ? void 0 : r("170");
      var g = c;

      do {
        switch (g.tag) {
          case 3:
            g = g.stateNode.context;
            break b;

          case 1:
            if (M(g.type)) {
              g = g.stateNode.__reactInternalMemoizedMergedChildContext;
              break b;
            }

        }

        g = g.return;
      } while (null !== g);

      r("171");
      g = void 0;
    }

    if (1 === c.tag) {
      var h = c.type;

      if (M(h)) {
        c = wf(c, h, g);
        break a;
      }
    }

    c = g;
  } else c = qf;

  null === b.context ? b.context = c : b.pendingContext = c;
  b = e;
  e = Tf(d);
  e.payload = {
    element: a
  };
  b = void 0 === b ? null : b;
  null !== b && (e.callback = b);
  Vf(f, e);
  xg(f, d);
  return d;
}

function Mi(a, b, c, d) {
  var e = b.current,
      f = vg();
  e = wg(f, e);
  return Li(a, b, c, e, d);
}

function Pi(a) {
  a = a.current;
  if (!a.child) return null;

  switch (a.child.tag) {
    case 5:
      return a.child.stateNode;

    default:
      return a.child.stateNode;
  }
}

function Qi(a, b, c) {
  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
  return {
    $$typeof: nc,
    key: null == d ? null : "" + d,
    children: a,
    containerInfo: b,
    implementation: c
  };
}

Nb = function (a, b, c) {
  switch (b) {
    case "input":
      Tc(a, c);
      b = c.name;

      if ("radio" === c.type && null != b) {
        for (c = a; c.parentNode;) c = c.parentNode;

        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');

        for (b = 0; b < c.length; b++) {
          var d = c[b];

          if (d !== a && d.form === a.form) {
            var e = Qa(d);
            e ? void 0 : r("90");
            jc(d);
            Tc(d, e);
          }
        }
      }

      break;

    case "textarea":
      Qe(a, c);
      break;

    case "select":
      b = c.value, null != b && Ne(a, !!c.multiple, b, !1);
  }
};

function Ri(a) {
  var b = 2 + 25 * (((vg() - 2 + 500) / 25 | 0) + 1);
  b <= Th && (b = Th + 1);
  this._expirationTime = Th = b;
  this._root = a;
  this._callbacks = this._next = null;
  this._hasChildren = this._didComplete = !1;
  this._children = null;
  this._defer = !0;
}

Ri.prototype.render = function (a) {
  this._defer ? void 0 : r("250");
  this._hasChildren = !0;
  this._children = a;
  var b = this._root._internalRoot,
      c = this._expirationTime,
      d = new Si();
  Li(a, b, null, c, d._onCommit);
  return d;
};

Ri.prototype.then = function (a) {
  if (this._didComplete) a();else {
    var b = this._callbacks;
    null === b && (b = this._callbacks = []);
    b.push(a);
  }
};

Ri.prototype.commit = function () {
  var a = this._root._internalRoot,
      b = a.firstBatch;
  this._defer && null !== b ? void 0 : r("251");

  if (this._hasChildren) {
    var c = this._expirationTime;

    if (b !== this) {
      this._hasChildren && (c = this._expirationTime = b._expirationTime, this.render(this._children));

      for (var d = null, e = b; e !== this;) d = e, e = e._next;

      null === d ? r("251") : void 0;
      d._next = e._next;
      this._next = b;
      a.firstBatch = this;
    }

    this._defer = !1;
    Di(a, c);
    b = this._next;
    this._next = null;
    b = a.firstBatch = b;
    null !== b && b._hasChildren && b.render(b._children);
  } else this._next = null, this._defer = !1;
};

Ri.prototype._onComplete = function () {
  if (!this._didComplete) {
    this._didComplete = !0;
    var a = this._callbacks;
    if (null !== a) for (var b = 0; b < a.length; b++) (0, a[b])();
  }
};

function Si() {
  this._callbacks = null;
  this._didCommit = !1;
  this._onCommit = this._onCommit.bind(this);
}

Si.prototype.then = function (a) {
  if (this._didCommit) a();else {
    var b = this._callbacks;
    null === b && (b = this._callbacks = []);
    b.push(a);
  }
};

Si.prototype._onCommit = function () {
  if (!this._didCommit) {
    this._didCommit = !0;
    var a = this._callbacks;
    if (null !== a) for (var b = 0; b < a.length; b++) {
      var c = a[b];
      "function" !== typeof c ? r("191", c) : void 0;
      c();
    }
  }
};

function Ti(a, b, c) {
  b = N(3, null, null, b ? 3 : 0);
  a = {
    current: b,
    containerInfo: a,
    pendingChildren: null,
    earliestPendingTime: 0,
    latestPendingTime: 0,
    earliestSuspendedTime: 0,
    latestSuspendedTime: 0,
    latestPingedTime: 0,
    didError: !1,
    pendingCommitExpirationTime: 0,
    finishedWork: null,
    timeoutHandle: -1,
    context: null,
    pendingContext: null,
    hydrate: c,
    nextExpirationTimeToWorkOn: 0,
    expirationTime: 0,
    firstBatch: null,
    nextScheduledRoot: null
  };
  this._internalRoot = b.stateNode = a;
}

Ti.prototype.render = function (a, b) {
  var c = this._internalRoot,
      d = new Si();
  b = void 0 === b ? null : b;
  null !== b && d.then(b);
  Mi(a, c, null, d._onCommit);
  return d;
};

Ti.prototype.unmount = function (a) {
  var b = this._internalRoot,
      c = new Si();
  a = void 0 === a ? null : a;
  null !== a && c.then(a);
  Mi(null, b, null, c._onCommit);
  return c;
};

Ti.prototype.legacy_renderSubtreeIntoContainer = function (a, b, c) {
  var d = this._internalRoot,
      e = new Si();
  c = void 0 === c ? null : c;
  null !== c && e.then(c);
  Mi(b, d, a, e._onCommit);
  return e;
};

Ti.prototype.createBatch = function () {
  var a = new Ri(this),
      b = a._expirationTime,
      c = this._internalRoot,
      d = c.firstBatch;
  if (null === d) c.firstBatch = a, a._next = null;else {
    for (c = null; null !== d && d._expirationTime <= b;) c = d, d = d._next;

    a._next = d;
    null !== c && (c._next = a);
  }
  return a;
};

function Ui(a) {
  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}

Yb = Ii;
Zb = Ki;

$b = function () {
  W || 0 === gi || (Gi(gi, null), gi = 0);
};

function Vi(a, b) {
  b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));
  if (!b) for (var c; c = a.lastChild;) a.removeChild(c);
  return new Ti(a, !1, b);
}

function Wi(a, b, c, d, e) {
  Ui(c) ? void 0 : r("200");
  var f = c._reactRootContainer;

  if (f) {
    if ("function" === typeof e) {
      var g = e;

      e = function () {
        var a = Pi(f._internalRoot);
        g.call(a);
      };
    }

    null != a ? f.legacy_renderSubtreeIntoContainer(a, b, e) : f.render(b, e);
  } else {
    f = c._reactRootContainer = Vi(c, d);

    if ("function" === typeof e) {
      var h = e;

      e = function () {
        var a = Pi(f._internalRoot);
        h.call(a);
      };
    }

    Ji(function () {
      null != a ? f.legacy_renderSubtreeIntoContainer(a, b, e) : f.render(b, e);
    });
  }

  return Pi(f._internalRoot);
}

function Xi(a, b) {
  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
  Ui(b) ? void 0 : r("200");
  return Qi(a, b, null, c);
}

var Yi = {
  createPortal: Xi,
  findDOMNode: function (a) {
    if (null == a) return null;
    if (1 === a.nodeType) return a;
    var b = a._reactInternalFiber;
    void 0 === b && ("function" === typeof a.render ? r("188") : r("268", Object.keys(a)));
    a = Jd(b);
    a = null === a ? null : a.stateNode;
    return a;
  },
  hydrate: function (a, b, c) {
    return Wi(null, a, b, !0, c);
  },
  render: function (a, b, c) {
    return Wi(null, a, b, !1, c);
  },
  unstable_renderSubtreeIntoContainer: function (a, b, c, d) {
    null == a || void 0 === a._reactInternalFiber ? r("38") : void 0;
    return Wi(a, b, c, !1, d);
  },
  unmountComponentAtNode: function (a) {
    Ui(a) ? void 0 : r("40");
    return a._reactRootContainer ? (Ji(function () {
      Wi(null, null, a, !1, function () {
        a._reactRootContainer = null;
      });
    }), !0) : !1;
  },
  unstable_createPortal: function () {
    return Xi.apply(void 0, arguments);
  },
  unstable_batchedUpdates: Ii,
  unstable_interactiveUpdates: Ki,
  flushSync: function (a, b) {
    W ? r("187") : void 0;
    var c = Z;
    Z = !0;

    try {
      return li(a, b);
    } finally {
      Z = c, Gi(1, null);
    }
  },
  unstable_flushControlled: function (a) {
    var b = Z;
    Z = !0;

    try {
      li(a);
    } finally {
      (Z = b) || W || Gi(1, null);
    }
  },
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    Events: [Oa, Pa, Qa, Ga.injectEventPluginsByName, sa, Wa, function (a) {
      Ba(a, Va);
    }, Wb, Xb, ee, Ia]
  },
  unstable_createRoot: function (a, b) {
    Ui(a) ? void 0 : r("278");
    return new Ti(a, !0, null != b && !0 === b.hydrate);
  }
};

(function (a) {
  var b = a.findFiberByHostInstance;
  return Cf(n({}, a, {
    findHostInstanceByFiber: function (a) {
      a = Jd(a);
      return null === a ? null : a.stateNode;
    },
    findFiberByHostInstance: function (a) {
      return b ? b(a) : null;
    }
  }));
})({
  findFiberByHostInstance: Na,
  bundleType: 0,
  version: "16.6.0",
  rendererPackageName: "react-dom"
});

var mj = {
  default: Yi
},
    nj = mj && Yi || mj;
module.exports = nj.default || nj;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.6.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


Object.defineProperty(exports, "__esModule", {
  value: !0
});
var c = null,
    f = 3,
    h = -1,
    k = -1,
    l = !1,
    m = !1,
    n = "object" === typeof performance && "function" === typeof performance.now,
    q = {
  timeRemaining: n ? function () {
    if (null !== c && c.expirationTime < k) return 0;
    var a = p() - performance.now();
    return 0 < a ? a : 0;
  } : function () {
    if (null !== c && c.expirationTime < k) return 0;
    var a = p() - Date.now();
    return 0 < a ? a : 0;
  },
  didTimeout: !1
};

function r() {
  if (!l) {
    var a = c.expirationTime;
    m ? t() : m = !0;
    u(v, a);
  }
}

function w() {
  var a = c,
      b = c.next;
  if (c === b) c = null;else {
    var d = c.previous;
    c = d.next = b;
    b.previous = d;
  }
  a.next = a.previous = null;
  d = a.callback;
  b = a.expirationTime;
  a = a.priorityLevel;
  var e = f,
      R = k;
  f = a;
  k = b;

  try {
    var g = d(q);
  } finally {
    f = e, k = R;
  }

  if ("function" === typeof g) if (g = {
    callback: g,
    priorityLevel: a,
    expirationTime: b,
    next: null,
    previous: null
  }, null === c) c = g.next = g.previous = g;else {
    d = null;
    a = c;

    do {
      if (a.expirationTime >= b) {
        d = a;
        break;
      }

      a = a.next;
    } while (a !== c);

    null === d ? d = c : d === c && (c = g, r());
    b = d.previous;
    b.next = d.previous = g;
    g.next = d;
    g.previous = b;
  }
}

function x() {
  if (-1 === h && null !== c && 1 === c.priorityLevel) {
    l = !0;
    q.didTimeout = !0;

    try {
      do w(); while (null !== c && 1 === c.priorityLevel);
    } finally {
      l = !1, null !== c ? r() : m = !1;
    }
  }
}

function v(a) {
  l = !0;
  q.didTimeout = a;

  try {
    if (a) for (; null !== c;) {
      var b = exports.unstable_now();

      if (c.expirationTime <= b) {
        do w(); while (null !== c && c.expirationTime <= b);
      } else break;
    } else if (null !== c) {
      do w(); while (null !== c && 0 < p() - exports.unstable_now());
    }
  } finally {
    l = !1, null !== c ? r() : m = !1, x();
  }
}

var y = Date,
    z = "function" === typeof setTimeout ? setTimeout : void 0,
    A = "function" === typeof clearTimeout ? clearTimeout : void 0,
    B = "function" === typeof requestAnimationFrame ? requestAnimationFrame : void 0,
    C = "function" === typeof cancelAnimationFrame ? cancelAnimationFrame : void 0,
    D,
    E;

function F(a) {
  D = B(function (b) {
    A(E);
    a(b);
  });
  E = z(function () {
    C(D);
    a(exports.unstable_now());
  }, 100);
}

if (n) {
  var G = performance;

  exports.unstable_now = function () {
    return G.now();
  };
} else exports.unstable_now = function () {
  return y.now();
};

var u, t, p;

if ("undefined" !== typeof window && window._schedMock) {
  var H = window._schedMock;
  u = H[0];
  t = H[1];
  p = H[2];
} else if ("undefined" === typeof window || "function" !== typeof window.addEventListener) {
  var I = null,
      J = -1,
      K = function (a, b) {
    if (null !== I) {
      var d = I;
      I = null;

      try {
        J = b, d(a);
      } finally {
        J = -1;
      }
    }
  };

  u = function (a, b) {
    -1 !== J ? setTimeout(u, 0, a, b) : (I = a, setTimeout(K, b, !0, b), setTimeout(K, 1073741823, !1, 1073741823));
  };

  t = function () {
    I = null;
  };

  p = function () {
    return Infinity;
  };

  exports.unstable_now = function () {
    return -1 === J ? 0 : J;
  };
} else {
  "undefined" !== typeof console && ("function" !== typeof B && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"), "function" !== typeof C && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));
  var L = null,
      M = !1,
      N = -1,
      O = !1,
      P = !1,
      Q = 0,
      S = 33,
      T = 33;

  p = function () {
    return Q;
  };

  var U = "__reactIdleCallback$" + Math.random().toString(36).slice(2);
  window.addEventListener("message", function (a) {
    if (a.source === window && a.data === U) {
      M = !1;
      a = L;
      var b = N;
      L = null;
      N = -1;
      var d = exports.unstable_now(),
          e = !1;
      if (0 >= Q - d) if (-1 !== b && b <= d) e = !0;else {
        O || (O = !0, F(V));
        L = a;
        N = b;
        return;
      }

      if (null !== a) {
        P = !0;

        try {
          a(e);
        } finally {
          P = !1;
        }
      }
    }
  }, !1);

  var V = function (a) {
    if (null !== L) {
      F(V);
      var b = a - Q + T;
      b < T && S < T ? (8 > b && (b = 8), T = b < S ? S : b) : S = b;
      Q = a + T;
      M || (M = !0, window.postMessage(U, "*"));
    } else O = !1;
  };

  u = function (a, b) {
    L = a;
    N = b;
    P || 0 > b ? window.postMessage(U, "*") : O || (O = !0, F(V));
  };

  t = function () {
    L = null;
    M = !1;
    N = -1;
  };
}

exports.unstable_ImmediatePriority = 1;
exports.unstable_UserBlockingPriority = 2;
exports.unstable_NormalPriority = 3;
exports.unstable_IdlePriority = 4;

exports.unstable_runWithPriority = function (a, b) {
  switch (a) {
    case 1:
    case 2:
    case 3:
    case 4:
      break;

    default:
      a = 3;
  }

  var d = f,
      e = h;
  f = a;
  h = exports.unstable_now();

  try {
    return b();
  } finally {
    f = d, h = e, x();
  }
};

exports.unstable_scheduleCallback = function (a, b) {
  var d = -1 !== h ? h : exports.unstable_now();
  if ("object" === typeof b && null !== b && "number" === typeof b.timeout) b = d + b.timeout;else switch (f) {
    case 1:
      b = d + -1;
      break;

    case 2:
      b = d + 250;
      break;

    case 4:
      b = d + 1073741823;
      break;

    default:
      b = d + 5E3;
  }
  a = {
    callback: a,
    priorityLevel: f,
    expirationTime: b,
    next: null,
    previous: null
  };
  if (null === c) c = a.next = a.previous = a, r();else {
    d = null;
    var e = c;

    do {
      if (e.expirationTime > b) {
        d = e;
        break;
      }

      e = e.next;
    } while (e !== c);

    null === d ? d = c : d === c && (c = a, r());
    b = d.previous;
    b.next = d.previous = a;
    a.next = d;
    a.previous = b;
  }
  return a;
};

exports.unstable_cancelCallback = function (a) {
  var b = a.next;

  if (null !== b) {
    if (b === a) c = null;else {
      a === c && (c = b);
      var d = a.previous;
      d.next = b;
      b.previous = d;
    }
    a.next = a.previous = null;
  }
};

exports.unstable_wrapCallback = function (a) {
  var b = f;
  return function () {
    var d = f,
        e = h;
    f = b;
    h = exports.unstable_now();

    try {
      return a.apply(this, arguments);
    } finally {
      f = d, h = e, x();
    }
  };
};

exports.unstable_getCurrentPriorityLevel = function () {
  return f;
};

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.6.0
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    /* eslint-disable no-var */
    // TODO: Use symbols?

    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var IdlePriority = 4; // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111

    var maxSigned31BitInt = 1073741823; // Times out immediately

    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

    var USER_BLOCKING_PRIORITY = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000; // Never times out

    var IDLE_PRIORITY = maxSigned31BitInt; // Callbacks are stored as a circular, doubly linked list.

    var firstCallbackNode = null;
    var currentPriorityLevel = NormalPriority;
    var currentEventStartTime = -1;
    var currentExpirationTime = -1; // This is set when a callback is being executed, to prevent re-entrancy.

    var isExecutingCallback = false;
    var isHostCallbackScheduled = false;
    var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    var timeRemaining;

    if (hasNativePerformanceNow) {
      timeRemaining = function () {
        if (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime) {
          // A higher priority callback was scheduled. Yield so we can switch to
          // working on that.
          return 0;
        } // We assume that if we have a performance timer that the rAF callback
        // gets a performance timer value. Not sure if this is always true.


        var remaining = getFrameDeadline() - performance.now();
        return remaining > 0 ? remaining : 0;
      };
    } else {
      timeRemaining = function () {
        // Fallback to Date.now()
        if (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime) {
          return 0;
        }

        var remaining = getFrameDeadline() - Date.now();
        return remaining > 0 ? remaining : 0;
      };
    }

    var deadlineObject = {
      timeRemaining: timeRemaining,
      didTimeout: false
    };

    function ensureHostCallbackIsScheduled() {
      if (isExecutingCallback) {
        // Don't schedule work yet; wait until the next time we yield.
        return;
      } // Schedule the host callback using the earliest expiration in the list.


      var expirationTime = firstCallbackNode.expirationTime;

      if (!isHostCallbackScheduled) {
        isHostCallbackScheduled = true;
      } else {
        // Cancel the existing host callback.
        cancelHostCallback();
      }

      requestHostCallback(flushWork, expirationTime);
    }

    function flushFirstCallback() {
      var flushedNode = firstCallbackNode; // Remove the node from the list before calling the callback. That way the
      // list is in a consistent state even if the callback throws.

      var next = firstCallbackNode.next;

      if (firstCallbackNode === next) {
        // This is the last callback in the list.
        firstCallbackNode = null;
        next = null;
      } else {
        var lastCallbackNode = firstCallbackNode.previous;
        firstCallbackNode = lastCallbackNode.next = next;
        next.previous = lastCallbackNode;
      }

      flushedNode.next = flushedNode.previous = null; // Now it's safe to call the callback.

      var callback = flushedNode.callback;
      var expirationTime = flushedNode.expirationTime;
      var priorityLevel = flushedNode.priorityLevel;
      var previousPriorityLevel = currentPriorityLevel;
      var previousExpirationTime = currentExpirationTime;
      currentPriorityLevel = priorityLevel;
      currentExpirationTime = expirationTime;
      var continuationCallback;

      try {
        continuationCallback = callback(deadlineObject);
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentExpirationTime = previousExpirationTime;
      } // A callback may return a continuation. The continuation should be scheduled
      // with the same priority and expiration as the just-finished callback.


      if (typeof continuationCallback === 'function') {
        var continuationNode = {
          callback: continuationCallback,
          priorityLevel: priorityLevel,
          expirationTime: expirationTime,
          next: null,
          previous: null
        }; // Insert the new callback into the list, sorted by its expiration. This is
        // almost the same as the code in `scheduleCallback`, except the callback
        // is inserted into the list *before* callbacks of equal expiration instead
        // of after.

        if (firstCallbackNode === null) {
          // This is the first callback in the list.
          firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
        } else {
          var nextAfterContinuation = null;
          var node = firstCallbackNode;

          do {
            if (node.expirationTime >= expirationTime) {
              // This callback expires at or after the continuation. We will insert
              // the continuation *before* this callback.
              nextAfterContinuation = node;
              break;
            }

            node = node.next;
          } while (node !== firstCallbackNode);

          if (nextAfterContinuation === null) {
            // No equal or lower priority callback was found, which means the new
            // callback is the lowest priority callback in the list.
            nextAfterContinuation = firstCallbackNode;
          } else if (nextAfterContinuation === firstCallbackNode) {
            // The new callback is the highest priority callback in the list.
            firstCallbackNode = continuationNode;
            ensureHostCallbackIsScheduled();
          }

          var previous = nextAfterContinuation.previous;
          previous.next = nextAfterContinuation.previous = continuationNode;
          continuationNode.next = nextAfterContinuation;
          continuationNode.previous = previous;
        }
      }
    }

    function flushImmediateWork() {
      if ( // Confirm we've exited the outer most event handler
      currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {
        isExecutingCallback = true;
        deadlineObject.didTimeout = true;

        try {
          do {
            flushFirstCallback();
          } while ( // Keep flushing until there are no more immediate callbacks
          firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);
        } finally {
          isExecutingCallback = false;

          if (firstCallbackNode !== null) {
            // There's still work remaining. Request another callback.
            ensureHostCallbackIsScheduled();
          } else {
            isHostCallbackScheduled = false;
          }
        }
      }
    }

    function flushWork(didTimeout) {
      isExecutingCallback = true;
      deadlineObject.didTimeout = didTimeout;

      try {
        if (didTimeout) {
          // Flush all the expired callbacks without yielding.
          while (firstCallbackNode !== null) {
            // Read the current time. Flush all the callbacks that expire at or
            // earlier than that time. Then read the current time again and repeat.
            // This optimizes for as few performance.now calls as possible.
            var currentTime = exports.unstable_now();

            if (firstCallbackNode.expirationTime <= currentTime) {
              do {
                flushFirstCallback();
              } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime);

              continue;
            }

            break;
          }
        } else {
          // Keep flushing callbacks until we run out of time in the frame.
          if (firstCallbackNode !== null) {
            do {
              flushFirstCallback();
            } while (firstCallbackNode !== null && getFrameDeadline() - exports.unstable_now() > 0);
          }
        }
      } finally {
        isExecutingCallback = false;

        if (firstCallbackNode !== null) {
          // There's still work remaining. Request another callback.
          ensureHostCallbackIsScheduled();
        } else {
          isHostCallbackScheduled = false;
        } // Before exiting, flush all the immediate work that was scheduled.


        flushImmediateWork();
      }
    }

    function unstable_runWithPriority(priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
        case IdlePriority:
          break;

        default:
          priorityLevel = NormalPriority;
      }

      var previousPriorityLevel = currentPriorityLevel;
      var previousEventStartTime = currentEventStartTime;
      currentPriorityLevel = priorityLevel;
      currentEventStartTime = exports.unstable_now();

      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentEventStartTime = previousEventStartTime; // Before exiting, flush all the immediate work that was scheduled.

        flushImmediateWork();
      }
    }

    function unstable_wrapCallback(callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function () {
        // This is a fork of runWithPriority, inlined for performance.
        var previousPriorityLevel = currentPriorityLevel;
        var previousEventStartTime = currentEventStartTime;
        currentPriorityLevel = parentPriorityLevel;
        currentEventStartTime = exports.unstable_now();

        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
          currentEventStartTime = previousEventStartTime;
          flushImmediateWork();
        }
      };
    }

    function unstable_scheduleCallback(callback, deprecated_options) {
      var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();
      var expirationTime;

      if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {
        // FIXME: Remove this branch once we lift expiration times out of React.
        expirationTime = startTime + deprecated_options.timeout;
      } else {
        switch (currentPriorityLevel) {
          case ImmediatePriority:
            expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
            break;

          case UserBlockingPriority:
            expirationTime = startTime + USER_BLOCKING_PRIORITY;
            break;

          case IdlePriority:
            expirationTime = startTime + IDLE_PRIORITY;
            break;

          case NormalPriority:
          default:
            expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
        }
      }

      var newNode = {
        callback: callback,
        priorityLevel: currentPriorityLevel,
        expirationTime: expirationTime,
        next: null,
        previous: null
      }; // Insert the new callback into the list, ordered first by expiration, then
      // by insertion. So the new callback is inserted any other callback with
      // equal expiration.

      if (firstCallbackNode === null) {
        // This is the first callback in the list.
        firstCallbackNode = newNode.next = newNode.previous = newNode;
        ensureHostCallbackIsScheduled();
      } else {
        var next = null;
        var node = firstCallbackNode;

        do {
          if (node.expirationTime > expirationTime) {
            // The new callback expires before this one.
            next = node;
            break;
          }

          node = node.next;
        } while (node !== firstCallbackNode);

        if (next === null) {
          // No callback with a later expiration was found, which means the new
          // callback has the latest expiration in the list.
          next = firstCallbackNode;
        } else if (next === firstCallbackNode) {
          // The new callback has the earliest expiration in the entire list.
          firstCallbackNode = newNode;
          ensureHostCallbackIsScheduled();
        }

        var previous = next.previous;
        previous.next = next.previous = newNode;
        newNode.next = next;
        newNode.previous = previous;
      }

      return newNode;
    }

    function unstable_cancelCallback(callbackNode) {
      var next = callbackNode.next;

      if (next === null) {
        // Already cancelled.
        return;
      }

      if (next === callbackNode) {
        // This is the only scheduled callback. Clear the list.
        firstCallbackNode = null;
      } else {
        // Remove the callback from its position in the list.
        if (callbackNode === firstCallbackNode) {
          firstCallbackNode = next;
        }

        var previous = callbackNode.previous;
        previous.next = next;
        next.previous = previous;
      }

      callbackNode.next = callbackNode.previous = null;
    }

    function unstable_getCurrentPriorityLevel() {
      return currentPriorityLevel;
    } // The remaining code is essentially a polyfill for requestIdleCallback. It
    // works by scheduling a requestAnimationFrame, storing the time for the start
    // of the frame, then scheduling a postMessage which gets scheduled after paint.
    // Within the postMessage handler do as much work as possible until time + frame
    // rate. By separating the idle call into a separate event tick we ensure that
    // layout, paint and other browser work is counted against the available time.
    // The frame rate is dynamically adjusted.
    // We capture a local reference to any global, in case it gets polyfilled after
    // this module is initially evaluated. We want to be using a
    // consistent implementation.


    var localDate = Date; // This initialization code may run even on server environments if a component
    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not
    // have setTimeout or clearTimeout. However, we always expect them to be defined
    // on the client. https://github.com/facebook/react/pull/13088

    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined; // We don't expect either of these to necessarily be defined, but we will error
    // later if they are missing on the client.

    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined; // requestAnimationFrame does not run when the tab is in the background. If
    // we're backgrounded we prefer for that work to happen so that the page
    // continues to load in the background. So we also schedule a 'setTimeout' as
    // a fallback.
    // TODO: Need a better heuristic for backgrounded work.

    var ANIMATION_FRAME_TIMEOUT = 100;
    var rAFID;
    var rAFTimeoutID;

    var requestAnimationFrameWithTimeout = function (callback) {
      // schedule rAF and also a setTimeout
      rAFID = localRequestAnimationFrame(function (timestamp) {
        // cancel the setTimeout
        localClearTimeout(rAFTimeoutID);
        callback(timestamp);
      });
      rAFTimeoutID = localSetTimeout(function () {
        // cancel the requestAnimationFrame
        localCancelAnimationFrame(rAFID);
        callback(exports.unstable_now());
      }, ANIMATION_FRAME_TIMEOUT);
    };

    if (hasNativePerformanceNow) {
      var Performance = performance;

      exports.unstable_now = function () {
        return Performance.now();
      };
    } else {
      exports.unstable_now = function () {
        return localDate.now();
      };
    }

    var requestHostCallback;
    var cancelHostCallback;
    var getFrameDeadline;

    if (typeof window !== 'undefined' && window._schedMock) {
      // Dynamic injection, only for testing purposes.
      var impl = window._schedMock;
      requestHostCallback = impl[0];
      cancelHostCallback = impl[1];
      getFrameDeadline = impl[2];
    } else if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
    // implementation using setTimeout.
    typeof window === 'undefined' || // "addEventListener" might not be available on the window object
    // if this is a mocked "window" object. So we need to validate that too.
    typeof window.addEventListener !== 'function') {
      var _callback = null;

      var _currentTime = -1;

      var _flushCallback = function (didTimeout, ms) {
        if (_callback !== null) {
          var cb = _callback;
          _callback = null;

          try {
            _currentTime = ms;
            cb(didTimeout);
          } finally {
            _currentTime = -1;
          }
        }
      };

      requestHostCallback = function (cb, ms) {
        if (_currentTime !== -1) {
          // Protect against re-entrancy.
          setTimeout(requestHostCallback, 0, cb, ms);
        } else {
          _callback = cb;
          setTimeout(_flushCallback, ms, true, ms);
          setTimeout(_flushCallback, maxSigned31BitInt, false, maxSigned31BitInt);
        }
      };

      cancelHostCallback = function () {
        _callback = null;
      };

      getFrameDeadline = function () {
        return Infinity;
      };

      exports.unstable_now = function () {
        return _currentTime === -1 ? 0 : _currentTime;
      };
    } else {
      if (typeof console !== 'undefined') {
        // TODO: Remove fb.me link
        if (typeof localRequestAnimationFrame !== 'function') {
          console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }

        if (typeof localCancelAnimationFrame !== 'function') {
          console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }
      }

      var scheduledHostCallback = null;
      var isMessageEventScheduled = false;
      var timeoutTime = -1;
      var isAnimationFrameScheduled = false;
      var isFlushingHostCallback = false;
      var frameDeadline = 0; // We start out assuming that we run at 30fps but then the heuristic tracking
      // will adjust this value to a faster fps if we get more frequent animation
      // frames.

      var previousFrameTime = 33;
      var activeFrameTime = 33;

      getFrameDeadline = function () {
        return frameDeadline;
      }; // We use the postMessage trick to defer idle work until after the repaint.


      var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);

      var idleTick = function (event) {
        if (event.source !== window || event.data !== messageKey) {
          return;
        }

        isMessageEventScheduled = false;
        var prevScheduledCallback = scheduledHostCallback;
        var prevTimeoutTime = timeoutTime;
        scheduledHostCallback = null;
        timeoutTime = -1;
        var currentTime = exports.unstable_now();
        var didTimeout = false;

        if (frameDeadline - currentTime <= 0) {
          // There's no time left in this idle period. Check if the callback has
          // a timeout and whether it's been exceeded.
          if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {
            // Exceeded the timeout. Invoke the callback even though there's no
            // time left.
            didTimeout = true;
          } else {
            // No timeout.
            if (!isAnimationFrameScheduled) {
              // Schedule another animation callback so we retry later.
              isAnimationFrameScheduled = true;
              requestAnimationFrameWithTimeout(animationTick);
            } // Exit without invoking the callback.


            scheduledHostCallback = prevScheduledCallback;
            timeoutTime = prevTimeoutTime;
            return;
          }
        }

        if (prevScheduledCallback !== null) {
          isFlushingHostCallback = true;

          try {
            prevScheduledCallback(didTimeout);
          } finally {
            isFlushingHostCallback = false;
          }
        }
      }; // Assumes that we have addEventListener in this environment. Might need
      // something better for old IE.


      window.addEventListener('message', idleTick, false);

      var animationTick = function (rafTime) {
        if (scheduledHostCallback !== null) {
          // Eagerly schedule the next animation callback at the beginning of the
          // frame. If the scheduler queue is not empty at the end of the frame, it
          // will continue flushing inside that callback. If the queue *is* empty,
          // then it will exit immediately. Posting the callback at the start of the
          // frame ensures it's fired within the earliest possible frame. If we
          // waited until the end of the frame to post the callback, we risk the
          // browser skipping a frame and not firing the callback until the frame
          // after that.
          requestAnimationFrameWithTimeout(animationTick);
        } else {
          // No pending work. Exit.
          isAnimationFrameScheduled = false;
          return;
        }

        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;

        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
          if (nextFrameTime < 8) {
            // Defensive coding. We don't support higher frame rates than 120hz.
            // If the calculated frame time gets lower than 8, it is probably a bug.
            nextFrameTime = 8;
          } // If one frame goes long, then the next one can be short to catch up.
          // If two frames are short in a row, then that's an indication that we
          // actually have a higher frame rate than what we're currently optimizing.
          // We adjust our heuristic dynamically accordingly. For example, if we're
          // running on 120hz display or 90hz VR display.
          // Take the max of the two in case one of them was an anomaly due to
          // missed frame deadlines.


          activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
        } else {
          previousFrameTime = nextFrameTime;
        }

        frameDeadline = rafTime + activeFrameTime;

        if (!isMessageEventScheduled) {
          isMessageEventScheduled = true;
          window.postMessage(messageKey, '*');
        }
      };

      requestHostCallback = function (callback, absoluteTimeout) {
        scheduledHostCallback = callback;
        timeoutTime = absoluteTimeout;

        if (isFlushingHostCallback || absoluteTimeout < 0) {
          // Don't wait for the next frame. Continue working ASAP, in a new event.
          window.postMessage(messageKey, '*');
        } else if (!isAnimationFrameScheduled) {
          // If rAF didn't already schedule one, we need to schedule a frame.
          // TODO: If this rAF doesn't materialize because the browser throttles, we
          // might want to still have setTimeout trigger rIC as a backup to ensure
          // that we keep performing work.
          isAnimationFrameScheduled = true;
          requestAnimationFrameWithTimeout(animationTick);
        }
      };

      cancelHostCallback = function () {
        scheduledHostCallback = null;
        isMessageEventScheduled = false;
        timeoutTime = -1;
      };
    }

    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.6.0
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */if(process.env.NODE_ENV!=="production"){(function(){'use strict';var React=__webpack_require__(0);var _assign=__webpack_require__(6);var checkPropTypes=__webpack_require__(13);var scheduler=__webpack_require__(22);var tracing=__webpack_require__(51);/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */var validateFormat=function(){};{validateFormat=function(format){if(format===undefined){throw new Error('invariant requires an error message argument');}};}function invariant(condition,format,a,b,c,d,e,f){validateFormat(format);if(!condition){var error=void 0;if(format===undefined){error=new Error('Minified exception occurred; use the non-minified dev environment '+'for the full error message and additional helpful warnings.');}else{var args=[a,b,c,d,e,f];var argIndex=0;error=new Error(format.replace(/%s/g,function(){return args[argIndex++];}));error.name='Invariant Violation';}error.framesToPop=1;// we don't care about invariant's own frame
throw error;}}// Relying on the `invariant()` implementation lets us
// preserve the format and params in the www builds.
!React?invariant(false,'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.'):void 0;var invokeGuardedCallbackImpl=function(name,func,context,a,b,c,d,e,f){var funcArgs=Array.prototype.slice.call(arguments,3);try{func.apply(context,funcArgs);}catch(error){this.onError(error);}};{// In DEV mode, we swap out invokeGuardedCallback for a special version
// that plays more nicely with the browser's DevTools. The idea is to preserve
// "Pause on exceptions" behavior. Because React wraps all user-provided
// functions in invokeGuardedCallback, and the production version of
// invokeGuardedCallback uses a try-catch, all user exceptions are treated
// like caught exceptions, and the DevTools won't pause unless the developer
// takes the extra step of enabling pause on caught exceptions. This is
// untintuitive, though, because even though React has caught the error, from
// the developer's perspective, the error is uncaught.
//
// To preserve the expected "Pause on exceptions" behavior, we don't use a
// try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
// DOM node, and call the user-provided callback from inside an event handler
// for that fake event. If the callback throws, the error is "captured" using
// a global event handler. But because the error happens in a different
// event loop context, it does not interrupt the normal program flow.
// Effectively, this gives us try-catch behavior without actually using
// try-catch. Neat!
// Check that the browser supports the APIs we need to implement our special
// DEV version of invokeGuardedCallback
if(typeof window!=='undefined'&&typeof window.dispatchEvent==='function'&&typeof document!=='undefined'&&typeof document.createEvent==='function'){var fakeNode=document.createElement('react');var invokeGuardedCallbackDev=function(name,func,context,a,b,c,d,e,f){// If document doesn't exist we know for sure we will crash in this method
// when we call document.createEvent(). However this can cause confusing
// errors: https://github.com/facebookincubator/create-react-app/issues/3482
// So we preemptively throw with a better message instead.
!(typeof document!=='undefined')?invariant(false,'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.'):void 0;var evt=document.createEvent('Event');// Keeps track of whether the user-provided callback threw an error. We
// set this to true at the beginning, then set it to false right after
// calling the function. If the function errors, `didError` will never be
// set to false. This strategy works even if the browser is flaky and
// fails to call our global error handler, because it doesn't rely on
// the error event at all.
var didError=true;// Keeps track of the value of window.event so that we can reset it
// during the callback to let user code access window.event in the
// browsers that support it.
var windowEvent=window.event;// Keeps track of the descriptor of window.event to restore it after event
// dispatching: https://github.com/facebook/react/issues/13688
var windowEventDescriptor=Object.getOwnPropertyDescriptor(window,'event');// Create an event handler for our fake event. We will synchronously
// dispatch our fake event using `dispatchEvent`. Inside the handler, we
// call the user-provided callback.
var funcArgs=Array.prototype.slice.call(arguments,3);function callCallback(){// We immediately remove the callback from event listeners so that
// nested `invokeGuardedCallback` calls do not clash. Otherwise, a
// nested call would trigger the fake event handlers of any call higher
// in the stack.
fakeNode.removeEventListener(evtType,callCallback,false);// We check for window.hasOwnProperty('event') to prevent the
// window.event assignment in both IE <= 10 as they throw an error
// "Member not found" in strict mode, and in Firefox which does not
// support window.event.
if(typeof window.event!=='undefined'&&window.hasOwnProperty('event')){window.event=windowEvent;}func.apply(context,funcArgs);didError=false;}// Create a global error event handler. We use this to capture the value
// that was thrown. It's possible that this error handler will fire more
// than once; for example, if non-React code also calls `dispatchEvent`
// and a handler for that event throws. We should be resilient to most of
// those cases. Even if our error event handler fires more than once, the
// last error event is always used. If the callback actually does error,
// we know that the last error event is the correct one, because it's not
// possible for anything else to have happened in between our callback
// erroring and the code that follows the `dispatchEvent` call below. If
// the callback doesn't error, but the error event was fired, we know to
// ignore it because `didError` will be false, as described above.
var error=void 0;// Use this to track whether the error event is ever called.
var didSetError=false;var isCrossOriginError=false;function handleWindowError(event){error=event.error;didSetError=true;if(error===null&&event.colno===0&&event.lineno===0){isCrossOriginError=true;}if(event.defaultPrevented){// Some other error handler has prevented default.
// Browsers silence the error report if this happens.
// We'll remember this to later decide whether to log it or not.
if(error!=null&&typeof error==='object'){try{error._suppressLogging=true;}catch(inner){// Ignore.
}}}}// Create a fake event type.
var evtType='react-'+(name?name:'invokeguardedcallback');// Attach our event handlers
window.addEventListener('error',handleWindowError);fakeNode.addEventListener(evtType,callCallback,false);// Synchronously dispatch our fake event. If the user-provided function
// errors, it will trigger our global error handler.
evt.initEvent(evtType,false,false);fakeNode.dispatchEvent(evt);if(windowEventDescriptor){Object.defineProperty(window,'event',windowEventDescriptor);}if(didError){if(!didSetError){// The callback errored, but the error event never fired.
error=new Error('An error was thrown inside one of your components, but React '+"doesn't know what it was. This is likely due to browser "+'flakiness. React does its best to preserve the "Pause on '+'exceptions" behavior of the DevTools, which requires some '+"DEV-mode only tricks. It's possible that these don't work in "+'your browser. Try triggering the error in production mode, '+'or switching to a modern browser. If you suspect that this is '+'actually an issue with React, please file an issue.');}else if(isCrossOriginError){error=new Error("A cross-origin error was thrown. React doesn't have access to "+'the actual error object in development. '+'See https://fb.me/react-crossorigin-error for more information.');}this.onError(error);}// Remove our event listeners
window.removeEventListener('error',handleWindowError);};invokeGuardedCallbackImpl=invokeGuardedCallbackDev;}}var invokeGuardedCallbackImpl$1=invokeGuardedCallbackImpl;// Used by Fiber to simulate a try-catch.
var hasError=false;var caughtError=null;// Used by event system to capture/rethrow the first error.
var hasRethrowError=false;var rethrowError=null;var reporter={onError:function(error){hasError=true;caughtError=error;}};/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */function invokeGuardedCallback(name,func,context,a,b,c,d,e,f){hasError=false;caughtError=null;invokeGuardedCallbackImpl$1.apply(reporter,arguments);}/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */function invokeGuardedCallbackAndCatchFirstError(name,func,context,a,b,c,d,e,f){invokeGuardedCallback.apply(this,arguments);if(hasError){var error=clearCaughtError();if(!hasRethrowError){hasRethrowError=true;rethrowError=error;}}}/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */function rethrowCaughtError(){if(hasRethrowError){var error=rethrowError;hasRethrowError=false;rethrowError=null;throw error;}}function hasCaughtError(){return hasError;}function clearCaughtError(){if(hasError){var error=caughtError;hasError=false;caughtError=null;return error;}else{invariant(false,'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');}}/**
 * Injectable ordering of event plugins.
 */var eventPluginOrder=null;/**
 * Injectable mapping from names to event plugin modules.
 */var namesToPlugins={};/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */function recomputePluginOrdering(){if(!eventPluginOrder){// Wait until an `eventPluginOrder` is injected.
return;}for(var pluginName in namesToPlugins){var pluginModule=namesToPlugins[pluginName];var pluginIndex=eventPluginOrder.indexOf(pluginName);!(pluginIndex>-1)?invariant(false,'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.',pluginName):void 0;if(plugins[pluginIndex]){continue;}!pluginModule.extractEvents?invariant(false,'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.',pluginName):void 0;plugins[pluginIndex]=pluginModule;var publishedEvents=pluginModule.eventTypes;for(var eventName in publishedEvents){!publishEventForPlugin(publishedEvents[eventName],pluginModule,eventName)?invariant(false,'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',eventName,pluginName):void 0;}}}/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */function publishEventForPlugin(dispatchConfig,pluginModule,eventName){!!eventNameDispatchConfigs.hasOwnProperty(eventName)?invariant(false,'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.',eventName):void 0;eventNameDispatchConfigs[eventName]=dispatchConfig;var phasedRegistrationNames=dispatchConfig.phasedRegistrationNames;if(phasedRegistrationNames){for(var phaseName in phasedRegistrationNames){if(phasedRegistrationNames.hasOwnProperty(phaseName)){var phasedRegistrationName=phasedRegistrationNames[phaseName];publishRegistrationName(phasedRegistrationName,pluginModule,eventName);}}return true;}else if(dispatchConfig.registrationName){publishRegistrationName(dispatchConfig.registrationName,pluginModule,eventName);return true;}return false;}/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */function publishRegistrationName(registrationName,pluginModule,eventName){!!registrationNameModules[registrationName]?invariant(false,'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.',registrationName):void 0;registrationNameModules[registrationName]=pluginModule;registrationNameDependencies[registrationName]=pluginModule.eventTypes[eventName].dependencies;{var lowerCasedName=registrationName.toLowerCase();possibleRegistrationNames[lowerCasedName]=registrationName;if(registrationName==='onDoubleClick'){possibleRegistrationNames.ondblclick=registrationName;}}}/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */ /**
 * Ordered list of injected plugins.
 */var plugins=[];/**
 * Mapping from event name to dispatch config
 */var eventNameDispatchConfigs={};/**
 * Mapping from registration name to plugin module
 */var registrationNameModules={};/**
 * Mapping from registration name to event name
 */var registrationNameDependencies={};/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */var possibleRegistrationNames={};// Trust the developer to only use possibleRegistrationNames in true
/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginOrder}
 */function injectEventPluginOrder(injectedEventPluginOrder){!!eventPluginOrder?invariant(false,'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.'):void 0;// Clone the ordering so it cannot be dynamically mutated.
eventPluginOrder=Array.prototype.slice.call(injectedEventPluginOrder);recomputePluginOrdering();}/**
 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 * @see {EventPluginHub.injection.injectEventPluginsByName}
 */function injectEventPluginsByName(injectedNamesToPlugins){var isOrderingDirty=false;for(var pluginName in injectedNamesToPlugins){if(!injectedNamesToPlugins.hasOwnProperty(pluginName)){continue;}var pluginModule=injectedNamesToPlugins[pluginName];if(!namesToPlugins.hasOwnProperty(pluginName)||namesToPlugins[pluginName]!==pluginModule){!!namesToPlugins[pluginName]?invariant(false,'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.',pluginName):void 0;namesToPlugins[pluginName]=pluginModule;isOrderingDirty=true;}}if(isOrderingDirty){recomputePluginOrdering();}}/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */var warningWithoutStack=function(){};{warningWithoutStack=function(condition,format){for(var _len=arguments.length,args=Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}if(format===undefined){throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning '+'message argument');}if(args.length>8){// Check before the condition to catch violations early.
throw new Error('warningWithoutStack() currently supports at most 8 arguments.');}if(condition){return;}if(typeof console!=='undefined'){var _args$map=args.map(function(item){return''+item;}),a=_args$map[0],b=_args$map[1],c=_args$map[2],d=_args$map[3],e=_args$map[4],f=_args$map[5],g=_args$map[6],h=_args$map[7];var message='Warning: '+format;// We intentionally don't use spread (or .apply) because it breaks IE9:
// https://github.com/facebook/react/issues/13610
switch(args.length){case 0:console.error(message);break;case 1:console.error(message,a);break;case 2:console.error(message,a,b);break;case 3:console.error(message,a,b,c);break;case 4:console.error(message,a,b,c,d);break;case 5:console.error(message,a,b,c,d,e);break;case 6:console.error(message,a,b,c,d,e,f);break;case 7:console.error(message,a,b,c,d,e,f,g);break;case 8:console.error(message,a,b,c,d,e,f,g,h);break;default:throw new Error('warningWithoutStack() currently supports at most 8 arguments.');}}try{// --- Welcome to debugging React ---
// This error was thrown as a convenience so that you can use this stack
// to find the callsite that caused this warning to fire.
var argIndex=0;var _message='Warning: '+format.replace(/%s/g,function(){return args[argIndex++];});throw new Error(_message);}catch(x){}};}var warningWithoutStack$1=warningWithoutStack;var getFiberCurrentPropsFromNode=null;var getInstanceFromNode=null;var getNodeFromInstance=null;function setComponentTree(getFiberCurrentPropsFromNodeImpl,getInstanceFromNodeImpl,getNodeFromInstanceImpl){getFiberCurrentPropsFromNode=getFiberCurrentPropsFromNodeImpl;getInstanceFromNode=getInstanceFromNodeImpl;getNodeFromInstance=getNodeFromInstanceImpl;{!(getNodeFromInstance&&getInstanceFromNode)?warningWithoutStack$1(false,'EventPluginUtils.setComponentTree(...): Injected '+'module is missing getNodeFromInstance or getInstanceFromNode.'):void 0;}}var validateEventDispatches=void 0;{validateEventDispatches=function(event){var dispatchListeners=event._dispatchListeners;var dispatchInstances=event._dispatchInstances;var listenersIsArr=Array.isArray(dispatchListeners);var listenersLen=listenersIsArr?dispatchListeners.length:dispatchListeners?1:0;var instancesIsArr=Array.isArray(dispatchInstances);var instancesLen=instancesIsArr?dispatchInstances.length:dispatchInstances?1:0;!(instancesIsArr===listenersIsArr&&instancesLen===listenersLen)?warningWithoutStack$1(false,'EventPluginUtils: Invalid `event`.'):void 0;};}/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */function executeDispatch(event,simulated,listener,inst){var type=event.type||'unknown-event';event.currentTarget=getNodeFromInstance(inst);invokeGuardedCallbackAndCatchFirstError(type,listener,undefined,event);event.currentTarget=null;}/**
 * Standard/simple iteration through an event's collected dispatches.
 */function executeDispatchesInOrder(event,simulated){var dispatchListeners=event._dispatchListeners;var dispatchInstances=event._dispatchInstances;{validateEventDispatches(event);}if(Array.isArray(dispatchListeners)){for(var i=0;i<dispatchListeners.length;i++){if(event.isPropagationStopped()){break;}// Listeners and Instances are two parallel arrays that are always in sync.
executeDispatch(event,simulated,dispatchListeners[i],dispatchInstances[i]);}}else if(dispatchListeners){executeDispatch(event,simulated,dispatchListeners,dispatchInstances);}event._dispatchListeners=null;event._dispatchInstances=null;}/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */ /**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */ /**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */ /**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */function accumulateInto(current,next){!(next!=null)?invariant(false,'accumulateInto(...): Accumulated items must not be null or undefined.'):void 0;if(current==null){return next;}// Both are not empty. Warning: Never call x.concat(y) when you are not
// certain that x is an Array (x could be a string with concat method).
if(Array.isArray(current)){if(Array.isArray(next)){current.push.apply(current,next);return current;}current.push(next);return current;}if(Array.isArray(next)){// A bit too dangerous to mutate `next`.
return[current].concat(next);}return[current,next];}/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */function forEachAccumulated(arr,cb,scope){if(Array.isArray(arr)){arr.forEach(cb,scope);}else if(arr){cb.call(scope,arr);}}/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */var eventQueue=null;/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */var executeDispatchesAndRelease=function(event,simulated){if(event){executeDispatchesInOrder(event,simulated);if(!event.isPersistent()){event.constructor.release(event);}}};var executeDispatchesAndReleaseSimulated=function(e){return executeDispatchesAndRelease(e,true);};var executeDispatchesAndReleaseTopLevel=function(e){return executeDispatchesAndRelease(e,false);};function isInteractive(tag){return tag==='button'||tag==='input'||tag==='select'||tag==='textarea';}function shouldPreventMouseEvent(name,type,props){switch(name){case'onClick':case'onClickCapture':case'onDoubleClick':case'onDoubleClickCapture':case'onMouseDown':case'onMouseDownCapture':case'onMouseMove':case'onMouseMoveCapture':case'onMouseUp':case'onMouseUpCapture':return!!(props.disabled&&isInteractive(type));default:return false;}}/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */ /**
 * Methods for injecting dependencies.
 */var injection={/**
   * @param {array} InjectedEventPluginOrder
   * @public
   */injectEventPluginOrder:injectEventPluginOrder,/**
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   */injectEventPluginsByName:injectEventPluginsByName};/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */function getListener(inst,registrationName){var listener=void 0;// TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
// live here; needs to be moved to a better place soon
var stateNode=inst.stateNode;if(!stateNode){// Work in progress (ex: onload events in incremental mode).
return null;}var props=getFiberCurrentPropsFromNode(stateNode);if(!props){// Work in progress.
return null;}listener=props[registrationName];if(shouldPreventMouseEvent(registrationName,inst.type,props)){return null;}!(!listener||typeof listener==='function')?invariant(false,'Expected `%s` listener to be a function, instead got a value of `%s` type.',registrationName,typeof listener):void 0;return listener;}/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */function extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget){var events=null;for(var i=0;i<plugins.length;i++){// Not every plugin in the ordering may be loaded at runtime.
var possiblePlugin=plugins[i];if(possiblePlugin){var extractedEvents=possiblePlugin.extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget);if(extractedEvents){events=accumulateInto(events,extractedEvents);}}}return events;}function runEventsInBatch(events,simulated){if(events!==null){eventQueue=accumulateInto(eventQueue,events);}// Set `eventQueue` to null before processing it so that we can tell if more
// events get enqueued while processing.
var processingEventQueue=eventQueue;eventQueue=null;if(!processingEventQueue){return;}if(simulated){forEachAccumulated(processingEventQueue,executeDispatchesAndReleaseSimulated);}else{forEachAccumulated(processingEventQueue,executeDispatchesAndReleaseTopLevel);}!!eventQueue?invariant(false,'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.'):void 0;// This would be a good time to rethrow if any of the event handlers threw.
rethrowCaughtError();}function runExtractedEventsInBatch(topLevelType,targetInst,nativeEvent,nativeEventTarget){var events=extractEvents(topLevelType,targetInst,nativeEvent,nativeEventTarget);runEventsInBatch(events,false);}var FunctionComponent=0;var ClassComponent=1;var IndeterminateComponent=2;// Before we know whether it is function or class
var HostRoot=3;// Root of a host tree. Could be nested inside another node.
var HostPortal=4;// A subtree. Could be an entry point to a different renderer.
var HostComponent=5;var HostText=6;var Fragment=7;var Mode=8;var ContextConsumer=9;var ContextProvider=10;var ForwardRef=11;var Profiler=12;var SuspenseComponent=13;var MemoComponent=14;var SimpleMemoComponent=15;var LazyComponent=16;var IncompleteClassComponent=17;var randomKey=Math.random().toString(36).slice(2);var internalInstanceKey='__reactInternalInstance$'+randomKey;var internalEventHandlersKey='__reactEventHandlers$'+randomKey;function precacheFiberNode(hostInst,node){node[internalInstanceKey]=hostInst;}/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */function getClosestInstanceFromNode(node){if(node[internalInstanceKey]){return node[internalInstanceKey];}while(!node[internalInstanceKey]){if(node.parentNode){node=node.parentNode;}else{// Top of the tree. This node must not be part of a React tree (or is
// unmounted, potentially).
return null;}}var inst=node[internalInstanceKey];if(inst.tag===HostComponent||inst.tag===HostText){// In Fiber, this will always be the deepest root.
return inst;}return null;}/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */function getInstanceFromNode$1(node){var inst=node[internalInstanceKey];if(inst){if(inst.tag===HostComponent||inst.tag===HostText){return inst;}else{return null;}}return null;}/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */function getNodeFromInstance$1(inst){if(inst.tag===HostComponent||inst.tag===HostText){// In Fiber this, is just the state node right now. We assume it will be
// a host component or host text.
return inst.stateNode;}// Without this first invariant, passing a non-DOM-component triggers the next
// invariant for a missing parent, which is super confusing.
invariant(false,'getNodeFromInstance: Invalid argument.');}function getFiberCurrentPropsFromNode$1(node){return node[internalEventHandlersKey]||null;}function updateFiberProps(node,props){node[internalEventHandlersKey]=props;}function getParent(inst){do{inst=inst.return;// TODO: If this is a HostRoot we might want to bail out.
// That is depending on if we want nested subtrees (layers) to bubble
// events to their parent. We could also go through parentNode on the
// host node but that wouldn't work for React Native and doesn't let us
// do the portal feature.
}while(inst&&inst.tag!==HostComponent);if(inst){return inst;}return null;}/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */function getLowestCommonAncestor(instA,instB){var depthA=0;for(var tempA=instA;tempA;tempA=getParent(tempA)){depthA++;}var depthB=0;for(var tempB=instB;tempB;tempB=getParent(tempB)){depthB++;}// If A is deeper, crawl up.
while(depthA-depthB>0){instA=getParent(instA);depthA--;}// If B is deeper, crawl up.
while(depthB-depthA>0){instB=getParent(instB);depthB--;}// Walk in lockstep until we find a match.
var depth=depthA;while(depth--){if(instA===instB||instA===instB.alternate){return instA;}instA=getParent(instA);instB=getParent(instB);}return null;}/**
 * Return if A is an ancestor of B.
 */ /**
 * Return the parent instance of the passed-in instance.
 */ /**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */function traverseTwoPhase(inst,fn,arg){var path=[];while(inst){path.push(inst);inst=getParent(inst);}var i=void 0;for(i=path.length;i-->0;){fn(path[i],'captured',arg);}for(i=0;i<path.length;i++){fn(path[i],'bubbled',arg);}}/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */function traverseEnterLeave(from,to,fn,argFrom,argTo){var common=from&&to?getLowestCommonAncestor(from,to):null;var pathFrom=[];while(true){if(!from){break;}if(from===common){break;}var alternate=from.alternate;if(alternate!==null&&alternate===common){break;}pathFrom.push(from);from=getParent(from);}var pathTo=[];while(true){if(!to){break;}if(to===common){break;}var _alternate=to.alternate;if(_alternate!==null&&_alternate===common){break;}pathTo.push(to);to=getParent(to);}for(var i=0;i<pathFrom.length;i++){fn(pathFrom[i],'bubbled',argFrom);}for(var _i=pathTo.length;_i-->0;){fn(pathTo[_i],'captured',argTo);}}/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */function listenerAtPhase(inst,event,propagationPhase){var registrationName=event.dispatchConfig.phasedRegistrationNames[propagationPhase];return getListener(inst,registrationName);}/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */ /**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */function accumulateDirectionalDispatches(inst,phase,event){{!inst?warningWithoutStack$1(false,'Dispatching inst must not be null'):void 0;}var listener=listenerAtPhase(inst,event,phase);if(listener){event._dispatchListeners=accumulateInto(event._dispatchListeners,listener);event._dispatchInstances=accumulateInto(event._dispatchInstances,inst);}}/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */function accumulateTwoPhaseDispatchesSingle(event){if(event&&event.dispatchConfig.phasedRegistrationNames){traverseTwoPhase(event._targetInst,accumulateDirectionalDispatches,event);}}/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */function accumulateDispatches(inst,ignoredDirection,event){if(inst&&event&&event.dispatchConfig.registrationName){var registrationName=event.dispatchConfig.registrationName;var listener=getListener(inst,registrationName);if(listener){event._dispatchListeners=accumulateInto(event._dispatchListeners,listener);event._dispatchInstances=accumulateInto(event._dispatchInstances,inst);}}}/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */function accumulateDirectDispatchesSingle(event){if(event&&event.dispatchConfig.registrationName){accumulateDispatches(event._targetInst,null,event);}}function accumulateTwoPhaseDispatches(events){forEachAccumulated(events,accumulateTwoPhaseDispatchesSingle);}function accumulateEnterLeaveDispatches(leave,enter,from,to){traverseEnterLeave(from,to,accumulateDispatches,leave,enter);}function accumulateDirectDispatches(events){forEachAccumulated(events,accumulateDirectDispatchesSingle);}var canUseDOM=!!(typeof window!=='undefined'&&window.document&&window.document.createElement);// Do not uses the below two methods directly!
// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
// (It is the only module that is allowed to access these methods.)
function unsafeCastStringToDOMTopLevelType(topLevelType){return topLevelType;}function unsafeCastDOMTopLevelTypeToString(topLevelType){return topLevelType;}/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */function makePrefixMap(styleProp,eventName){var prefixes={};prefixes[styleProp.toLowerCase()]=eventName.toLowerCase();prefixes['Webkit'+styleProp]='webkit'+eventName;prefixes['Moz'+styleProp]='moz'+eventName;return prefixes;}/**
 * A list of event names to a configurable list of vendor prefixes.
 */var vendorPrefixes={animationend:makePrefixMap('Animation','AnimationEnd'),animationiteration:makePrefixMap('Animation','AnimationIteration'),animationstart:makePrefixMap('Animation','AnimationStart'),transitionend:makePrefixMap('Transition','TransitionEnd')};/**
 * Event names that have already been detected and prefixed (if applicable).
 */var prefixedEventNames={};/**
 * Element to check for prefixes on.
 */var style={};/**
 * Bootstrap if a DOM exists.
 */if(canUseDOM){style=document.createElement('div').style;// On some platforms, in particular some releases of Android 4.x,
// the un-prefixed "animation" and "transition" properties are defined on the
// style object but the events that fire will still be prefixed, so we need
// to check if the un-prefixed events are usable, and if not remove them from the map.
if(!('AnimationEvent'in window)){delete vendorPrefixes.animationend.animation;delete vendorPrefixes.animationiteration.animation;delete vendorPrefixes.animationstart.animation;}// Same as above
if(!('TransitionEvent'in window)){delete vendorPrefixes.transitionend.transition;}}/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */function getVendorPrefixedEventName(eventName){if(prefixedEventNames[eventName]){return prefixedEventNames[eventName];}else if(!vendorPrefixes[eventName]){return eventName;}var prefixMap=vendorPrefixes[eventName];for(var styleProp in prefixMap){if(prefixMap.hasOwnProperty(styleProp)&&styleProp in style){return prefixedEventNames[eventName]=prefixMap[styleProp];}}return eventName;}/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */var TOP_ABORT=unsafeCastStringToDOMTopLevelType('abort');var TOP_ANIMATION_END=unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));var TOP_ANIMATION_ITERATION=unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));var TOP_ANIMATION_START=unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));var TOP_BLUR=unsafeCastStringToDOMTopLevelType('blur');var TOP_CAN_PLAY=unsafeCastStringToDOMTopLevelType('canplay');var TOP_CAN_PLAY_THROUGH=unsafeCastStringToDOMTopLevelType('canplaythrough');var TOP_CANCEL=unsafeCastStringToDOMTopLevelType('cancel');var TOP_CHANGE=unsafeCastStringToDOMTopLevelType('change');var TOP_CLICK=unsafeCastStringToDOMTopLevelType('click');var TOP_CLOSE=unsafeCastStringToDOMTopLevelType('close');var TOP_COMPOSITION_END=unsafeCastStringToDOMTopLevelType('compositionend');var TOP_COMPOSITION_START=unsafeCastStringToDOMTopLevelType('compositionstart');var TOP_COMPOSITION_UPDATE=unsafeCastStringToDOMTopLevelType('compositionupdate');var TOP_CONTEXT_MENU=unsafeCastStringToDOMTopLevelType('contextmenu');var TOP_COPY=unsafeCastStringToDOMTopLevelType('copy');var TOP_CUT=unsafeCastStringToDOMTopLevelType('cut');var TOP_DOUBLE_CLICK=unsafeCastStringToDOMTopLevelType('dblclick');var TOP_AUX_CLICK=unsafeCastStringToDOMTopLevelType('auxclick');var TOP_DRAG=unsafeCastStringToDOMTopLevelType('drag');var TOP_DRAG_END=unsafeCastStringToDOMTopLevelType('dragend');var TOP_DRAG_ENTER=unsafeCastStringToDOMTopLevelType('dragenter');var TOP_DRAG_EXIT=unsafeCastStringToDOMTopLevelType('dragexit');var TOP_DRAG_LEAVE=unsafeCastStringToDOMTopLevelType('dragleave');var TOP_DRAG_OVER=unsafeCastStringToDOMTopLevelType('dragover');var TOP_DRAG_START=unsafeCastStringToDOMTopLevelType('dragstart');var TOP_DROP=unsafeCastStringToDOMTopLevelType('drop');var TOP_DURATION_CHANGE=unsafeCastStringToDOMTopLevelType('durationchange');var TOP_EMPTIED=unsafeCastStringToDOMTopLevelType('emptied');var TOP_ENCRYPTED=unsafeCastStringToDOMTopLevelType('encrypted');var TOP_ENDED=unsafeCastStringToDOMTopLevelType('ended');var TOP_ERROR=unsafeCastStringToDOMTopLevelType('error');var TOP_FOCUS=unsafeCastStringToDOMTopLevelType('focus');var TOP_GOT_POINTER_CAPTURE=unsafeCastStringToDOMTopLevelType('gotpointercapture');var TOP_INPUT=unsafeCastStringToDOMTopLevelType('input');var TOP_INVALID=unsafeCastStringToDOMTopLevelType('invalid');var TOP_KEY_DOWN=unsafeCastStringToDOMTopLevelType('keydown');var TOP_KEY_PRESS=unsafeCastStringToDOMTopLevelType('keypress');var TOP_KEY_UP=unsafeCastStringToDOMTopLevelType('keyup');var TOP_LOAD=unsafeCastStringToDOMTopLevelType('load');var TOP_LOAD_START=unsafeCastStringToDOMTopLevelType('loadstart');var TOP_LOADED_DATA=unsafeCastStringToDOMTopLevelType('loadeddata');var TOP_LOADED_METADATA=unsafeCastStringToDOMTopLevelType('loadedmetadata');var TOP_LOST_POINTER_CAPTURE=unsafeCastStringToDOMTopLevelType('lostpointercapture');var TOP_MOUSE_DOWN=unsafeCastStringToDOMTopLevelType('mousedown');var TOP_MOUSE_MOVE=unsafeCastStringToDOMTopLevelType('mousemove');var TOP_MOUSE_OUT=unsafeCastStringToDOMTopLevelType('mouseout');var TOP_MOUSE_OVER=unsafeCastStringToDOMTopLevelType('mouseover');var TOP_MOUSE_UP=unsafeCastStringToDOMTopLevelType('mouseup');var TOP_PASTE=unsafeCastStringToDOMTopLevelType('paste');var TOP_PAUSE=unsafeCastStringToDOMTopLevelType('pause');var TOP_PLAY=unsafeCastStringToDOMTopLevelType('play');var TOP_PLAYING=unsafeCastStringToDOMTopLevelType('playing');var TOP_POINTER_CANCEL=unsafeCastStringToDOMTopLevelType('pointercancel');var TOP_POINTER_DOWN=unsafeCastStringToDOMTopLevelType('pointerdown');var TOP_POINTER_MOVE=unsafeCastStringToDOMTopLevelType('pointermove');var TOP_POINTER_OUT=unsafeCastStringToDOMTopLevelType('pointerout');var TOP_POINTER_OVER=unsafeCastStringToDOMTopLevelType('pointerover');var TOP_POINTER_UP=unsafeCastStringToDOMTopLevelType('pointerup');var TOP_PROGRESS=unsafeCastStringToDOMTopLevelType('progress');var TOP_RATE_CHANGE=unsafeCastStringToDOMTopLevelType('ratechange');var TOP_RESET=unsafeCastStringToDOMTopLevelType('reset');var TOP_SCROLL=unsafeCastStringToDOMTopLevelType('scroll');var TOP_SEEKED=unsafeCastStringToDOMTopLevelType('seeked');var TOP_SEEKING=unsafeCastStringToDOMTopLevelType('seeking');var TOP_SELECTION_CHANGE=unsafeCastStringToDOMTopLevelType('selectionchange');var TOP_STALLED=unsafeCastStringToDOMTopLevelType('stalled');var TOP_SUBMIT=unsafeCastStringToDOMTopLevelType('submit');var TOP_SUSPEND=unsafeCastStringToDOMTopLevelType('suspend');var TOP_TEXT_INPUT=unsafeCastStringToDOMTopLevelType('textInput');var TOP_TIME_UPDATE=unsafeCastStringToDOMTopLevelType('timeupdate');var TOP_TOGGLE=unsafeCastStringToDOMTopLevelType('toggle');var TOP_TOUCH_CANCEL=unsafeCastStringToDOMTopLevelType('touchcancel');var TOP_TOUCH_END=unsafeCastStringToDOMTopLevelType('touchend');var TOP_TOUCH_MOVE=unsafeCastStringToDOMTopLevelType('touchmove');var TOP_TOUCH_START=unsafeCastStringToDOMTopLevelType('touchstart');var TOP_TRANSITION_END=unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));var TOP_VOLUME_CHANGE=unsafeCastStringToDOMTopLevelType('volumechange');var TOP_WAITING=unsafeCastStringToDOMTopLevelType('waiting');var TOP_WHEEL=unsafeCastStringToDOMTopLevelType('wheel');// List of events that need to be individually attached to media elements.
// Note that events in this list will *not* be listened to at the top level
// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.
var mediaEventTypes=[TOP_ABORT,TOP_CAN_PLAY,TOP_CAN_PLAY_THROUGH,TOP_DURATION_CHANGE,TOP_EMPTIED,TOP_ENCRYPTED,TOP_ENDED,TOP_ERROR,TOP_LOADED_DATA,TOP_LOADED_METADATA,TOP_LOAD_START,TOP_PAUSE,TOP_PLAY,TOP_PLAYING,TOP_PROGRESS,TOP_RATE_CHANGE,TOP_SEEKED,TOP_SEEKING,TOP_STALLED,TOP_SUSPEND,TOP_TIME_UPDATE,TOP_VOLUME_CHANGE,TOP_WAITING];function getRawEventName(topLevelType){return unsafeCastDOMTopLevelTypeToString(topLevelType);}/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */var root=null;var startText=null;var fallbackText=null;function initialize(nativeEventTarget){root=nativeEventTarget;startText=getText();return true;}function reset(){root=null;startText=null;fallbackText=null;}function getData(){if(fallbackText){return fallbackText;}var start=void 0;var startValue=startText;var startLength=startValue.length;var end=void 0;var endValue=getText();var endLength=endValue.length;for(start=0;start<startLength;start++){if(startValue[start]!==endValue[start]){break;}}var minEnd=startLength-start;for(end=1;end<=minEnd;end++){if(startValue[startLength-end]!==endValue[endLength-end]){break;}}var sliceTail=end>1?1-end:undefined;fallbackText=endValue.slice(start,sliceTail);return fallbackText;}function getText(){if('value'in root){return root.value;}return root.textContent;}/* eslint valid-typeof: 0 */var EVENT_POOL_SIZE=10;/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var EventInterface={type:null,target:null,// currentTarget is set when dispatching; no use in copying it here
currentTarget:function(){return null;},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(event){return event.timeStamp||Date.now();},defaultPrevented:null,isTrusted:null};function functionThatReturnsTrue(){return true;}function functionThatReturnsFalse(){return false;}/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */function SyntheticEvent(dispatchConfig,targetInst,nativeEvent,nativeEventTarget){{// these have a getter/setter for warnings
delete this.nativeEvent;delete this.preventDefault;delete this.stopPropagation;delete this.isDefaultPrevented;delete this.isPropagationStopped;}this.dispatchConfig=dispatchConfig;this._targetInst=targetInst;this.nativeEvent=nativeEvent;var Interface=this.constructor.Interface;for(var propName in Interface){if(!Interface.hasOwnProperty(propName)){continue;}{delete this[propName];// this has a getter/setter for warnings
}var normalize=Interface[propName];if(normalize){this[propName]=normalize(nativeEvent);}else{if(propName==='target'){this.target=nativeEventTarget;}else{this[propName]=nativeEvent[propName];}}}var defaultPrevented=nativeEvent.defaultPrevented!=null?nativeEvent.defaultPrevented:nativeEvent.returnValue===false;if(defaultPrevented){this.isDefaultPrevented=functionThatReturnsTrue;}else{this.isDefaultPrevented=functionThatReturnsFalse;}this.isPropagationStopped=functionThatReturnsFalse;return this;}_assign(SyntheticEvent.prototype,{preventDefault:function(){this.defaultPrevented=true;var event=this.nativeEvent;if(!event){return;}if(event.preventDefault){event.preventDefault();}else if(typeof event.returnValue!=='unknown'){event.returnValue=false;}this.isDefaultPrevented=functionThatReturnsTrue;},stopPropagation:function(){var event=this.nativeEvent;if(!event){return;}if(event.stopPropagation){event.stopPropagation();}else if(typeof event.cancelBubble!=='unknown'){// The ChangeEventPlugin registers a "propertychange" event for
// IE. This event does not support bubbling or cancelling, and
// any references to cancelBubble throw "Member not found".  A
// typeof check of "unknown" circumvents this issue (and is also
// IE specific).
event.cancelBubble=true;}this.isPropagationStopped=functionThatReturnsTrue;},/**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */persist:function(){this.isPersistent=functionThatReturnsTrue;},/**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */isPersistent:functionThatReturnsFalse,/**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */destructor:function(){var Interface=this.constructor.Interface;for(var propName in Interface){{Object.defineProperty(this,propName,getPooledWarningPropertyDefinition(propName,Interface[propName]));}}this.dispatchConfig=null;this._targetInst=null;this.nativeEvent=null;this.isDefaultPrevented=functionThatReturnsFalse;this.isPropagationStopped=functionThatReturnsFalse;this._dispatchListeners=null;this._dispatchInstances=null;{Object.defineProperty(this,'nativeEvent',getPooledWarningPropertyDefinition('nativeEvent',null));Object.defineProperty(this,'isDefaultPrevented',getPooledWarningPropertyDefinition('isDefaultPrevented',functionThatReturnsFalse));Object.defineProperty(this,'isPropagationStopped',getPooledWarningPropertyDefinition('isPropagationStopped',functionThatReturnsFalse));Object.defineProperty(this,'preventDefault',getPooledWarningPropertyDefinition('preventDefault',function(){}));Object.defineProperty(this,'stopPropagation',getPooledWarningPropertyDefinition('stopPropagation',function(){}));}}});SyntheticEvent.Interface=EventInterface;/**
 * Helper to reduce boilerplate when creating subclasses.
 */SyntheticEvent.extend=function(Interface){var Super=this;var E=function(){};E.prototype=Super.prototype;var prototype=new E();function Class(){return Super.apply(this,arguments);}_assign(prototype,Class.prototype);Class.prototype=prototype;Class.prototype.constructor=Class;Class.Interface=_assign({},Super.Interface,Interface);Class.extend=Super.extend;addEventPoolingTo(Class);return Class;};addEventPoolingTo(SyntheticEvent);/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */function getPooledWarningPropertyDefinition(propName,getVal){var isFunction=typeof getVal==='function';return{configurable:true,set:set,get:get};function set(val){var action=isFunction?'setting the method':'setting the property';warn(action,'This is effectively a no-op');return val;}function get(){var action=isFunction?'accessing the method':'accessing the property';var result=isFunction?'This is a no-op function':'This is set to null';warn(action,result);return getVal;}function warn(action,result){var warningCondition=false;!warningCondition?warningWithoutStack$1(false,"This synthetic event is reused for performance reasons. If you're seeing this, "+"you're %s `%s` on a released/nullified synthetic event. %s. "+'If you must keep the original synthetic event around, use event.persist(). '+'See https://fb.me/react-event-pooling for more information.',action,propName,result):void 0;}}function getPooledEvent(dispatchConfig,targetInst,nativeEvent,nativeInst){var EventConstructor=this;if(EventConstructor.eventPool.length){var instance=EventConstructor.eventPool.pop();EventConstructor.call(instance,dispatchConfig,targetInst,nativeEvent,nativeInst);return instance;}return new EventConstructor(dispatchConfig,targetInst,nativeEvent,nativeInst);}function releasePooledEvent(event){var EventConstructor=this;!(event instanceof EventConstructor)?invariant(false,'Trying to release an event instance into a pool of a different type.'):void 0;event.destructor();if(EventConstructor.eventPool.length<EVENT_POOL_SIZE){EventConstructor.eventPool.push(event);}}function addEventPoolingTo(EventConstructor){EventConstructor.eventPool=[];EventConstructor.getPooled=getPooledEvent;EventConstructor.release=releasePooledEvent;}/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */var SyntheticCompositionEvent=SyntheticEvent.extend({data:null});/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */var SyntheticInputEvent=SyntheticEvent.extend({data:null});var END_KEYCODES=[9,13,27,32];// Tab, Return, Esc, Space
var START_KEYCODE=229;var canUseCompositionEvent=canUseDOM&&'CompositionEvent'in window;var documentMode=null;if(canUseDOM&&'documentMode'in document){documentMode=document.documentMode;}// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent=canUseDOM&&'TextEvent'in window&&!documentMode;// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData=canUseDOM&&(!canUseCompositionEvent||documentMode&&documentMode>8&&documentMode<=11);var SPACEBAR_CODE=32;var SPACEBAR_CHAR=String.fromCharCode(SPACEBAR_CODE);// Events and their corresponding property names.
var eventTypes={beforeInput:{phasedRegistrationNames:{bubbled:'onBeforeInput',captured:'onBeforeInputCapture'},dependencies:[TOP_COMPOSITION_END,TOP_KEY_PRESS,TOP_TEXT_INPUT,TOP_PASTE]},compositionEnd:{phasedRegistrationNames:{bubbled:'onCompositionEnd',captured:'onCompositionEndCapture'},dependencies:[TOP_BLUR,TOP_COMPOSITION_END,TOP_KEY_DOWN,TOP_KEY_PRESS,TOP_KEY_UP,TOP_MOUSE_DOWN]},compositionStart:{phasedRegistrationNames:{bubbled:'onCompositionStart',captured:'onCompositionStartCapture'},dependencies:[TOP_BLUR,TOP_COMPOSITION_START,TOP_KEY_DOWN,TOP_KEY_PRESS,TOP_KEY_UP,TOP_MOUSE_DOWN]},compositionUpdate:{phasedRegistrationNames:{bubbled:'onCompositionUpdate',captured:'onCompositionUpdateCapture'},dependencies:[TOP_BLUR,TOP_COMPOSITION_UPDATE,TOP_KEY_DOWN,TOP_KEY_PRESS,TOP_KEY_UP,TOP_MOUSE_DOWN]}};// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress=false;/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */function isKeypressCommand(nativeEvent){return(nativeEvent.ctrlKey||nativeEvent.altKey||nativeEvent.metaKey)&&// ctrlKey && altKey is equivalent to AltGr, and is not a command.
!(nativeEvent.ctrlKey&&nativeEvent.altKey);}/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */function getCompositionEventType(topLevelType){switch(topLevelType){case TOP_COMPOSITION_START:return eventTypes.compositionStart;case TOP_COMPOSITION_END:return eventTypes.compositionEnd;case TOP_COMPOSITION_UPDATE:return eventTypes.compositionUpdate;}}/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */function isFallbackCompositionStart(topLevelType,nativeEvent){return topLevelType===TOP_KEY_DOWN&&nativeEvent.keyCode===START_KEYCODE;}/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */function isFallbackCompositionEnd(topLevelType,nativeEvent){switch(topLevelType){case TOP_KEY_UP:// Command keys insert or clear IME input.
return END_KEYCODES.indexOf(nativeEvent.keyCode)!==-1;case TOP_KEY_DOWN:// Expect IME keyCode on each keydown. If we get any other
// code we must have exited earlier.
return nativeEvent.keyCode!==START_KEYCODE;case TOP_KEY_PRESS:case TOP_MOUSE_DOWN:case TOP_BLUR:// Events are not possible without cancelling IME.
return true;default:return false;}}/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */function getDataFromCustomEvent(nativeEvent){var detail=nativeEvent.detail;if(typeof detail==='object'&&'data'in detail){return detail.data;}return null;}/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */function isUsingKoreanIME(nativeEvent){return nativeEvent.locale==='ko';}// Track the current IME composition status, if any.
var isComposing=false;/**
 * @return {?object} A SyntheticCompositionEvent.
 */function extractCompositionEvent(topLevelType,targetInst,nativeEvent,nativeEventTarget){var eventType=void 0;var fallbackData=void 0;if(canUseCompositionEvent){eventType=getCompositionEventType(topLevelType);}else if(!isComposing){if(isFallbackCompositionStart(topLevelType,nativeEvent)){eventType=eventTypes.compositionStart;}}else if(isFallbackCompositionEnd(topLevelType,nativeEvent)){eventType=eventTypes.compositionEnd;}if(!eventType){return null;}if(useFallbackCompositionData&&!isUsingKoreanIME(nativeEvent)){// The current composition is stored statically and must not be
// overwritten while composition continues.
if(!isComposing&&eventType===eventTypes.compositionStart){isComposing=initialize(nativeEventTarget);}else if(eventType===eventTypes.compositionEnd){if(isComposing){fallbackData=getData();}}}var event=SyntheticCompositionEvent.getPooled(eventType,targetInst,nativeEvent,nativeEventTarget);if(fallbackData){// Inject data generated from fallback path into the synthetic event.
// This matches the property of native CompositionEventInterface.
event.data=fallbackData;}else{var customData=getDataFromCustomEvent(nativeEvent);if(customData!==null){event.data=customData;}}accumulateTwoPhaseDispatches(event);return event;}/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */function getNativeBeforeInputChars(topLevelType,nativeEvent){switch(topLevelType){case TOP_COMPOSITION_END:return getDataFromCustomEvent(nativeEvent);case TOP_KEY_PRESS:/**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */var which=nativeEvent.which;if(which!==SPACEBAR_CODE){return null;}hasSpaceKeypress=true;return SPACEBAR_CHAR;case TOP_TEXT_INPUT:// Record the characters to be added to the DOM.
var chars=nativeEvent.data;// If it's a spacebar character, assume that we have already handled
// it at the keypress level and bail immediately. Android Chrome
// doesn't give us keycodes, so we need to ignore it.
if(chars===SPACEBAR_CHAR&&hasSpaceKeypress){return null;}return chars;default:// For other native event types, do nothing.
return null;}}/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */function getFallbackBeforeInputChars(topLevelType,nativeEvent){// If we are currently composing (IME) and using a fallback to do so,
// try to extract the composed characters from the fallback object.
// If composition event is available, we extract a string only at
// compositionevent, otherwise extract it at fallback events.
if(isComposing){if(topLevelType===TOP_COMPOSITION_END||!canUseCompositionEvent&&isFallbackCompositionEnd(topLevelType,nativeEvent)){var chars=getData();reset();isComposing=false;return chars;}return null;}switch(topLevelType){case TOP_PASTE:// If a paste event occurs after a keypress, throw out the input
// chars. Paste events should not lead to BeforeInput events.
return null;case TOP_KEY_PRESS:/**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */if(!isKeypressCommand(nativeEvent)){// IE fires the `keypress` event when a user types an emoji via
// Touch keyboard of Windows.  In such a case, the `char` property
// holds an emoji character like `\uD83D\uDE0A`.  Because its length
// is 2, the property `which` does not represent an emoji correctly.
// In such a case, we directly return the `char` property instead of
// using `which`.
if(nativeEvent.char&&nativeEvent.char.length>1){return nativeEvent.char;}else if(nativeEvent.which){return String.fromCharCode(nativeEvent.which);}}return null;case TOP_COMPOSITION_END:return useFallbackCompositionData&&!isUsingKoreanIME(nativeEvent)?null:nativeEvent.data;default:return null;}}/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */function extractBeforeInputEvent(topLevelType,targetInst,nativeEvent,nativeEventTarget){var chars=void 0;if(canUseTextInputEvent){chars=getNativeBeforeInputChars(topLevelType,nativeEvent);}else{chars=getFallbackBeforeInputChars(topLevelType,nativeEvent);}// If no characters are being inserted, no BeforeInput event should
// be fired.
if(!chars){return null;}var event=SyntheticInputEvent.getPooled(eventTypes.beforeInput,targetInst,nativeEvent,nativeEventTarget);event.data=chars;accumulateTwoPhaseDispatches(event);return event;}/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */var BeforeInputEventPlugin={eventTypes:eventTypes,extractEvents:function(topLevelType,targetInst,nativeEvent,nativeEventTarget){var composition=extractCompositionEvent(topLevelType,targetInst,nativeEvent,nativeEventTarget);var beforeInput=extractBeforeInputEvent(topLevelType,targetInst,nativeEvent,nativeEventTarget);if(composition===null){return beforeInput;}if(beforeInput===null){return composition;}return[composition,beforeInput];}};// Use to restore controlled state after a change event has fired.
var restoreImpl=null;var restoreTarget=null;var restoreQueue=null;function restoreStateOfTarget(target){// We perform this translation at the end of the event loop so that we
// always receive the correct fiber here
var internalInstance=getInstanceFromNode(target);if(!internalInstance){// Unmounted
return;}!(typeof restoreImpl==='function')?invariant(false,'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.'):void 0;var props=getFiberCurrentPropsFromNode(internalInstance.stateNode);restoreImpl(internalInstance.stateNode,internalInstance.type,props);}function setRestoreImplementation(impl){restoreImpl=impl;}function enqueueStateRestore(target){if(restoreTarget){if(restoreQueue){restoreQueue.push(target);}else{restoreQueue=[target];}}else{restoreTarget=target;}}function needsStateRestore(){return restoreTarget!==null||restoreQueue!==null;}function restoreStateIfNeeded(){if(!restoreTarget){return;}var target=restoreTarget;var queuedTargets=restoreQueue;restoreTarget=null;restoreQueue=null;restoreStateOfTarget(target);if(queuedTargets){for(var i=0;i<queuedTargets.length;i++){restoreStateOfTarget(queuedTargets[i]);}}}// Used as a way to call batchedUpdates when we don't have a reference to
// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults
var _batchedUpdatesImpl=function(fn,bookkeeping){return fn(bookkeeping);};var _interactiveUpdatesImpl=function(fn,a,b){return fn(a,b);};var _flushInteractiveUpdatesImpl=function(){};var isBatching=false;function batchedUpdates(fn,bookkeeping){if(isBatching){// If we are currently inside another batch, we need to wait until it
// fully completes before restoring state.
return fn(bookkeeping);}isBatching=true;try{return _batchedUpdatesImpl(fn,bookkeeping);}finally{// Here we wait until all updates have propagated, which is important
// when using controlled components within layers:
// https://github.com/facebook/react/issues/1698
// Then we restore state of any controlled component.
isBatching=false;var controlledComponentsHavePendingUpdates=needsStateRestore();if(controlledComponentsHavePendingUpdates){// If a controlled event was fired, we may need to restore the state of
// the DOM node back to the controlled value. This is necessary when React
// bails out of the update without touching the DOM.
_flushInteractiveUpdatesImpl();restoreStateIfNeeded();}}}function interactiveUpdates(fn,a,b){return _interactiveUpdatesImpl(fn,a,b);}function setBatchingImplementation(batchedUpdatesImpl,interactiveUpdatesImpl,flushInteractiveUpdatesImpl){_batchedUpdatesImpl=batchedUpdatesImpl;_interactiveUpdatesImpl=interactiveUpdatesImpl;_flushInteractiveUpdatesImpl=flushInteractiveUpdatesImpl;}/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */var supportedInputTypes={color:true,date:true,datetime:true,'datetime-local':true,email:true,month:true,number:true,password:true,range:true,search:true,tel:true,text:true,time:true,url:true,week:true};function isTextInputElement(elem){var nodeName=elem&&elem.nodeName&&elem.nodeName.toLowerCase();if(nodeName==='input'){return!!supportedInputTypes[elem.type];}if(nodeName==='textarea'){return true;}return false;}/**
 * HTML nodeType values that represent the type of the node
 */var ELEMENT_NODE=1;var TEXT_NODE=3;var COMMENT_NODE=8;var DOCUMENT_NODE=9;var DOCUMENT_FRAGMENT_NODE=11;/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */function getEventTarget(nativeEvent){// Fallback to nativeEvent.srcElement for IE9
// https://github.com/facebook/react/issues/12506
var target=nativeEvent.target||nativeEvent.srcElement||window;// Normalize SVG <use> element events #4963
if(target.correspondingUseElement){target=target.correspondingUseElement;}// Safari may fire events on text nodes (Node.TEXT_NODE is 3).
// @see http://www.quirksmode.org/js/events_properties.html
return target.nodeType===TEXT_NODE?target.parentNode:target;}/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */function isEventSupported(eventNameSuffix){if(!canUseDOM){return false;}var eventName='on'+eventNameSuffix;var isSupported=eventName in document;if(!isSupported){var element=document.createElement('div');element.setAttribute(eventName,'return;');isSupported=typeof element[eventName]==='function';}return isSupported;}function isCheckable(elem){var type=elem.type;var nodeName=elem.nodeName;return nodeName&&nodeName.toLowerCase()==='input'&&(type==='checkbox'||type==='radio');}function getTracker(node){return node._valueTracker;}function detachTracker(node){node._valueTracker=null;}function getValueFromNode(node){var value='';if(!node){return value;}if(isCheckable(node)){value=node.checked?'true':'false';}else{value=node.value;}return value;}function trackValueOnNode(node){var valueField=isCheckable(node)?'checked':'value';var descriptor=Object.getOwnPropertyDescriptor(node.constructor.prototype,valueField);var currentValue=''+node[valueField];// if someone has already defined a value or Safari, then bail
// and don't track value will cause over reporting of changes,
// but it's better then a hard failure
// (needed for certain tests that spyOn input values and Safari)
if(node.hasOwnProperty(valueField)||typeof descriptor==='undefined'||typeof descriptor.get!=='function'||typeof descriptor.set!=='function'){return;}var get=descriptor.get,set=descriptor.set;Object.defineProperty(node,valueField,{configurable:true,get:function(){return get.call(this);},set:function(value){currentValue=''+value;set.call(this,value);}});// We could've passed this the first time
// but it triggers a bug in IE11 and Edge 14/15.
// Calling defineProperty() again should be equivalent.
// https://github.com/facebook/react/issues/11768
Object.defineProperty(node,valueField,{enumerable:descriptor.enumerable});var tracker={getValue:function(){return currentValue;},setValue:function(value){currentValue=''+value;},stopTracking:function(){detachTracker(node);delete node[valueField];}};return tracker;}function track(node){if(getTracker(node)){return;}// TODO: Once it's just Fiber we can move this to node._wrapperState
node._valueTracker=trackValueOnNode(node);}function updateValueIfChanged(node){if(!node){return false;}var tracker=getTracker(node);// if there is no tracker at this point it's unlikely
// that trying again will succeed
if(!tracker){return true;}var lastValue=tracker.getValue();var nextValue=getValueFromNode(node);if(nextValue!==lastValue){tracker.setValue(nextValue);return true;}return false;}var ReactSharedInternals=React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;var BEFORE_SLASH_RE=/^(.*)[\\\/]/;var describeComponentFrame=function(name,source,ownerName){var sourceInfo='';if(source){var path=source.fileName;var fileName=path.replace(BEFORE_SLASH_RE,'');{// In DEV, include code for a common special case:
// prefer "folder/index.js" instead of just "index.js".
if(/^index\./.test(fileName)){var match=path.match(BEFORE_SLASH_RE);if(match){var pathBeforeSlash=match[1];if(pathBeforeSlash){var folderName=pathBeforeSlash.replace(BEFORE_SLASH_RE,'');fileName=folderName+'/'+fileName;}}}}sourceInfo=' (at '+fileName+':'+source.lineNumber+')';}else if(ownerName){sourceInfo=' (created by '+ownerName+')';}return'\n    in '+(name||'Unknown')+sourceInfo;};// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol=typeof Symbol==='function'&&Symbol.for;var REACT_ELEMENT_TYPE=hasSymbol?Symbol.for('react.element'):0xeac7;var REACT_PORTAL_TYPE=hasSymbol?Symbol.for('react.portal'):0xeaca;var REACT_FRAGMENT_TYPE=hasSymbol?Symbol.for('react.fragment'):0xeacb;var REACT_STRICT_MODE_TYPE=hasSymbol?Symbol.for('react.strict_mode'):0xeacc;var REACT_PROFILER_TYPE=hasSymbol?Symbol.for('react.profiler'):0xead2;var REACT_PROVIDER_TYPE=hasSymbol?Symbol.for('react.provider'):0xeacd;var REACT_CONTEXT_TYPE=hasSymbol?Symbol.for('react.context'):0xeace;var REACT_CONCURRENT_MODE_TYPE=hasSymbol?Symbol.for('react.concurrent_mode'):0xeacf;var REACT_FORWARD_REF_TYPE=hasSymbol?Symbol.for('react.forward_ref'):0xead0;var REACT_SUSPENSE_TYPE=hasSymbol?Symbol.for('react.suspense'):0xead1;var REACT_MEMO_TYPE=hasSymbol?Symbol.for('react.memo'):0xead3;var REACT_LAZY_TYPE=hasSymbol?Symbol.for('react.lazy'):0xead4;var MAYBE_ITERATOR_SYMBOL=typeof Symbol==='function'&&Symbol.iterator;var FAUX_ITERATOR_SYMBOL='@@iterator';function getIteratorFn(maybeIterable){if(maybeIterable===null||typeof maybeIterable!=='object'){return null;}var maybeIterator=MAYBE_ITERATOR_SYMBOL&&maybeIterable[MAYBE_ITERATOR_SYMBOL]||maybeIterable[FAUX_ITERATOR_SYMBOL];if(typeof maybeIterator==='function'){return maybeIterator;}return null;}var Pending=0;var Resolved=1;var Rejected=2;function refineResolvedLazyComponent(lazyComponent){return lazyComponent._status===Resolved?lazyComponent._result:null;}function getWrappedName(outerType,innerType,wrapperName){var functionName=innerType.displayName||innerType.name||'';return outerType.displayName||(functionName!==''?wrapperName+'('+functionName+')':wrapperName);}function getComponentName(type){if(type==null){// Host root, text node or just invalid type.
return null;}{if(typeof type.tag==='number'){warningWithoutStack$1(false,'Received an unexpected object in getComponentName(). '+'This is likely a bug in React. Please file an issue.');}}if(typeof type==='function'){return type.displayName||type.name||null;}if(typeof type==='string'){return type;}switch(type){case REACT_CONCURRENT_MODE_TYPE:return'ConcurrentMode';case REACT_FRAGMENT_TYPE:return'Fragment';case REACT_PORTAL_TYPE:return'Portal';case REACT_PROFILER_TYPE:return'Profiler';case REACT_STRICT_MODE_TYPE:return'StrictMode';case REACT_SUSPENSE_TYPE:return'Suspense';}if(typeof type==='object'){switch(type.$$typeof){case REACT_CONTEXT_TYPE:return'Context.Consumer';case REACT_PROVIDER_TYPE:return'Context.Provider';case REACT_FORWARD_REF_TYPE:return getWrappedName(type,type.render,'ForwardRef');case REACT_MEMO_TYPE:return getComponentName(type.type);case REACT_LAZY_TYPE:{var thenable=type;var resolvedThenable=refineResolvedLazyComponent(thenable);if(resolvedThenable){return getComponentName(resolvedThenable);}}}}return null;}var ReactDebugCurrentFrame=ReactSharedInternals.ReactDebugCurrentFrame;function describeFiber(fiber){switch(fiber.tag){case IndeterminateComponent:case LazyComponent:case FunctionComponent:case ClassComponent:case HostComponent:case Mode:var owner=fiber._debugOwner;var source=fiber._debugSource;var name=getComponentName(fiber.type);var ownerName=null;if(owner){ownerName=getComponentName(owner.type);}return describeComponentFrame(name,source,ownerName);default:return'';}}function getStackByFiberInDevAndProd(workInProgress){var info='';var node=workInProgress;do{info+=describeFiber(node);node=node.return;}while(node);return info;}var current=null;var phase=null;function getCurrentFiberOwnerNameInDevOrNull(){{if(current===null){return null;}var owner=current._debugOwner;if(owner!==null&&typeof owner!=='undefined'){return getComponentName(owner.type);}}return null;}function getCurrentFiberStackInDev(){{if(current===null){return'';}// Safe because if current fiber exists, we are reconciling,
// and it is guaranteed to be the work-in-progress version.
return getStackByFiberInDevAndProd(current);}return'';}function resetCurrentFiber(){{ReactDebugCurrentFrame.getCurrentStack=null;current=null;phase=null;}}function setCurrentFiber(fiber){{ReactDebugCurrentFrame.getCurrentStack=getCurrentFiberStackInDev;current=fiber;phase=null;}}function setCurrentPhase(lifeCyclePhase){{phase=lifeCyclePhase;}}/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */var warning=warningWithoutStack$1;{warning=function(condition,format){if(condition){return;}var ReactDebugCurrentFrame=ReactSharedInternals.ReactDebugCurrentFrame;var stack=ReactDebugCurrentFrame.getStackAddendum();// eslint-disable-next-line react-internal/warning-and-invariant-args
for(var _len=arguments.length,args=Array(_len>2?_len-2:0),_key=2;_key<_len;_key++){args[_key-2]=arguments[_key];}warningWithoutStack$1.apply(undefined,[false,format+'%s'].concat(args,[stack]));};}var warning$1=warning;// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED=0;// A simple string attribute.
// Attributes that aren't in the whitelist are presumed to have this type.
var STRING=1;// A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.
var BOOLEANISH_STRING=2;// A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
var BOOLEAN=3;// An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.
var OVERLOADED_BOOLEAN=4;// An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.
var NUMERIC=5;// An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.
var POSITIVE_NUMERIC=6;/* eslint-disable max-len */var ATTRIBUTE_NAME_START_CHAR=':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';/* eslint-enable max-len */var ATTRIBUTE_NAME_CHAR=ATTRIBUTE_NAME_START_CHAR+'\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';var ROOT_ATTRIBUTE_NAME='data-reactroot';var VALID_ATTRIBUTE_NAME_REGEX=new RegExp('^['+ATTRIBUTE_NAME_START_CHAR+']['+ATTRIBUTE_NAME_CHAR+']*$');var hasOwnProperty=Object.prototype.hasOwnProperty;var illegalAttributeNameCache={};var validatedAttributeNameCache={};function isAttributeNameSafe(attributeName){if(hasOwnProperty.call(validatedAttributeNameCache,attributeName)){return true;}if(hasOwnProperty.call(illegalAttributeNameCache,attributeName)){return false;}if(VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)){validatedAttributeNameCache[attributeName]=true;return true;}illegalAttributeNameCache[attributeName]=true;{warning$1(false,'Invalid attribute name: `%s`',attributeName);}return false;}function shouldIgnoreAttribute(name,propertyInfo,isCustomComponentTag){if(propertyInfo!==null){return propertyInfo.type===RESERVED;}if(isCustomComponentTag){return false;}if(name.length>2&&(name[0]==='o'||name[0]==='O')&&(name[1]==='n'||name[1]==='N')){return true;}return false;}function shouldRemoveAttributeWithWarning(name,value,propertyInfo,isCustomComponentTag){if(propertyInfo!==null&&propertyInfo.type===RESERVED){return false;}switch(typeof value){case'function':// $FlowIssue symbol is perfectly valid here
case'symbol':// eslint-disable-line
return true;case'boolean':{if(isCustomComponentTag){return false;}if(propertyInfo!==null){return!propertyInfo.acceptsBooleans;}else{var prefix=name.toLowerCase().slice(0,5);return prefix!=='data-'&&prefix!=='aria-';}}default:return false;}}function shouldRemoveAttribute(name,value,propertyInfo,isCustomComponentTag){if(value===null||typeof value==='undefined'){return true;}if(shouldRemoveAttributeWithWarning(name,value,propertyInfo,isCustomComponentTag)){return true;}if(isCustomComponentTag){return false;}if(propertyInfo!==null){switch(propertyInfo.type){case BOOLEAN:return!value;case OVERLOADED_BOOLEAN:return value===false;case NUMERIC:return isNaN(value);case POSITIVE_NUMERIC:return isNaN(value)||value<1;}}return false;}function getPropertyInfo(name){return properties.hasOwnProperty(name)?properties[name]:null;}function PropertyInfoRecord(name,type,mustUseProperty,attributeName,attributeNamespace){this.acceptsBooleans=type===BOOLEANISH_STRING||type===BOOLEAN||type===OVERLOADED_BOOLEAN;this.attributeName=attributeName;this.attributeNamespace=attributeNamespace;this.mustUseProperty=mustUseProperty;this.propertyName=name;this.type=type;}// When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.
var properties={};// These props are reserved by React. They shouldn't be written to the DOM.
['children','dangerouslySetInnerHTML',// TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue','defaultChecked','innerHTML','suppressContentEditableWarning','suppressHydrationWarning','style'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,RESERVED,false,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.
[['acceptCharset','accept-charset'],['className','class'],['htmlFor','for'],['httpEquiv','http-equiv']].forEach(function(_ref){var name=_ref[0],attributeName=_ref[1];properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,// attributeName
null);}// attributeNamespace
);// These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
['contentEditable','draggable','spellCheck','value'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEANISH_STRING,false,// mustUseProperty
name.toLowerCase(),// attributeName
null);}// attributeNamespace
);// These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.
['autoReverse','externalResourcesRequired','focusable','preserveAlpha'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEANISH_STRING,false,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// These are HTML boolean attributes.
['allowFullScreen','async',// Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus','autoPlay','controls','default','defer','disabled','formNoValidate','hidden','loop','noModule','noValidate','open','playsInline','readOnly','required','reversed','scoped','seamless',// Microdata
'itemScope'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEAN,false,// mustUseProperty
name.toLowerCase(),// attributeName
null);}// attributeNamespace
);// These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.
['checked',// Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple','muted','selected'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEAN,true,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.
['capture','download'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,OVERLOADED_BOOLEAN,false,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// These are HTML attributes that must be positive numbers.
['cols','rows','size','span'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,POSITIVE_NUMERIC,false,// mustUseProperty
name,// attributeName
null);}// attributeNamespace
);// These are HTML attributes that must be numbers.
['rowSpan','start'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,NUMERIC,false,// mustUseProperty
name.toLowerCase(),// attributeName
null);}// attributeNamespace
);var CAMELIZE=/[\-\:]([a-z])/g;var capitalize=function(token){return token[1].toUpperCase();};// This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML whitelist.
// Some of these attributes can be hard to find. This list was created by
// scrapping the MDN documentation.
['accent-height','alignment-baseline','arabic-form','baseline-shift','cap-height','clip-path','clip-rule','color-interpolation','color-interpolation-filters','color-profile','color-rendering','dominant-baseline','enable-background','fill-opacity','fill-rule','flood-color','flood-opacity','font-family','font-size','font-size-adjust','font-stretch','font-style','font-variant','font-weight','glyph-name','glyph-orientation-horizontal','glyph-orientation-vertical','horiz-adv-x','horiz-origin-x','image-rendering','letter-spacing','lighting-color','marker-end','marker-mid','marker-start','overline-position','overline-thickness','paint-order','panose-1','pointer-events','rendering-intent','shape-rendering','stop-color','stop-opacity','strikethrough-position','strikethrough-thickness','stroke-dasharray','stroke-dashoffset','stroke-linecap','stroke-linejoin','stroke-miterlimit','stroke-opacity','stroke-width','text-anchor','text-decoration','text-rendering','underline-position','underline-thickness','unicode-bidi','unicode-range','units-per-em','v-alphabetic','v-hanging','v-ideographic','v-mathematical','vector-effect','vert-adv-y','vert-origin-x','vert-origin-y','word-spacing','writing-mode','xmlns:xlink','x-height'].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,null);}// attributeNamespace
);// String SVG attributes with the xlink namespace.
['xlink:actuate','xlink:arcrole','xlink:href','xlink:role','xlink:show','xlink:title','xlink:type'].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,'http://www.w3.org/1999/xlink');});// String SVG attributes with the xml namespace.
['xml:base','xml:lang','xml:space'].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,'http://www.w3.org/XML/1998/namespace');});// Special case: this attribute exists both in HTML and SVG.
// Its "tabindex" attribute name is case-sensitive in SVG so we can't just use
// its React `tabIndex` name, like we do for attributes that exist only in HTML.
properties.tabIndex=new PropertyInfoRecord('tabIndex',STRING,false,// mustUseProperty
'tabindex',// attributeName
null);/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */function getValueForProperty(node,name,expected,propertyInfo){{if(propertyInfo.mustUseProperty){var propertyName=propertyInfo.propertyName;return node[propertyName];}else{var attributeName=propertyInfo.attributeName;var stringValue=null;if(propertyInfo.type===OVERLOADED_BOOLEAN){if(node.hasAttribute(attributeName)){var value=node.getAttribute(attributeName);if(value===''){return true;}if(shouldRemoveAttribute(name,expected,propertyInfo,false)){return value;}if(value===''+expected){return expected;}return value;}}else if(node.hasAttribute(attributeName)){if(shouldRemoveAttribute(name,expected,propertyInfo,false)){// We had an attribute but shouldn't have had one, so read it
// for the error message.
return node.getAttribute(attributeName);}if(propertyInfo.type===BOOLEAN){// If this was a boolean, it doesn't matter what the value is
// the fact that we have it is the same as the expected.
return expected;}// Even if this property uses a namespace we use getAttribute
// because we assume its namespaced name is the same as our config.
// To use getAttributeNS we need the local name which we don't have
// in our config atm.
stringValue=node.getAttribute(attributeName);}if(shouldRemoveAttribute(name,expected,propertyInfo,false)){return stringValue===null?expected:stringValue;}else if(stringValue===''+expected){return expected;}else{return stringValue;}}}}/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */function getValueForAttribute(node,name,expected){{if(!isAttributeNameSafe(name)){return;}if(!node.hasAttribute(name)){return expected===undefined?undefined:null;}var value=node.getAttribute(name);if(value===''+expected){return expected;}return value;}}/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */function setValueForProperty(node,name,value,isCustomComponentTag){var propertyInfo=getPropertyInfo(name);if(shouldIgnoreAttribute(name,propertyInfo,isCustomComponentTag)){return;}if(shouldRemoveAttribute(name,value,propertyInfo,isCustomComponentTag)){value=null;}// If the prop isn't in the special list, treat it as a simple attribute.
if(isCustomComponentTag||propertyInfo===null){if(isAttributeNameSafe(name)){var _attributeName=name;if(value===null){node.removeAttribute(_attributeName);}else{node.setAttribute(_attributeName,''+value);}}return;}var mustUseProperty=propertyInfo.mustUseProperty;if(mustUseProperty){var propertyName=propertyInfo.propertyName;if(value===null){var type=propertyInfo.type;node[propertyName]=type===BOOLEAN?false:'';}else{// Contrary to `setAttribute`, object properties are properly
// `toString`ed by IE8/9.
node[propertyName]=value;}return;}// The rest are treated as attributes with special cases.
var attributeName=propertyInfo.attributeName,attributeNamespace=propertyInfo.attributeNamespace;if(value===null){node.removeAttribute(attributeName);}else{var _type=propertyInfo.type;var attributeValue=void 0;if(_type===BOOLEAN||_type===OVERLOADED_BOOLEAN&&value===true){attributeValue='';}else{// `setAttribute` with objects becomes only `[object]` in IE8/9,
// ('' + value) makes it output the correct toString()-value.
attributeValue=''+value;}if(attributeNamespace){node.setAttributeNS(attributeNamespace,attributeName,attributeValue);}else{node.setAttribute(attributeName,attributeValue);}}}// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value){return''+value;}function getToStringValue(value){switch(typeof value){case'boolean':case'number':case'object':case'string':case'undefined':return value;default:// function, symbol are assigned as empty strings
return'';}}var ReactDebugCurrentFrame$1=null;var ReactControlledValuePropTypes={checkPropTypes:null};{ReactDebugCurrentFrame$1=ReactSharedInternals.ReactDebugCurrentFrame;var hasReadOnlyValue={button:true,checkbox:true,image:true,hidden:true,radio:true,reset:true,submit:true};var propTypes={value:function(props,propName,componentName){if(hasReadOnlyValue[props.type]||props.onChange||props.readOnly||props.disabled||props[propName]==null){return null;}return new Error('You provided a `value` prop to a form field without an '+'`onChange` handler. This will render a read-only field. If '+'the field should be mutable use `defaultValue`. Otherwise, '+'set either `onChange` or `readOnly`.');},checked:function(props,propName,componentName){if(props.onChange||props.readOnly||props.disabled||props[propName]==null){return null;}return new Error('You provided a `checked` prop to a form field without an '+'`onChange` handler. This will render a read-only field. If '+'the field should be mutable use `defaultChecked`. Otherwise, '+'set either `onChange` or `readOnly`.');}};/**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */ReactControlledValuePropTypes.checkPropTypes=function(tagName,props){checkPropTypes(propTypes,props,'prop',tagName,ReactDebugCurrentFrame$1.getStackAddendum);};}var enableUserTimingAPI=true;// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
var debugRenderPhaseSideEffects=false;// In some cases, StrictMode should also double-render lifecycles.
// This can be confusing for tests though,
// And it can be bad for performance in production.
// This feature flag can be used to control the behavior:
var debugRenderPhaseSideEffectsForStrictMode=true;// To preserve the "Pause on caught exceptions" behavior of the debugger, we
// replay the begin phase of a failed component inside invokeGuardedCallback.
var replayFailedUnitOfWorkWithInvokeGuardedCallback=true;// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
var warnAboutDeprecatedLifecycles=false;// Gather advanced timing metrics for Profiler subtrees.
var enableProfilerTimer=true;// Trace which interactions trigger each commit.
var enableSchedulerTracing=true;// Only used in www builds.
// Only used in www builds.
// React Fire: prevent the value and checked attributes from syncing
// with their related DOM properties
var disableInputAttributeSyncing=false;// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue=false;var didWarnCheckedDefaultChecked=false;var didWarnControlledToUncontrolled=false;var didWarnUncontrolledToControlled=false;function isControlled(props){var usesChecked=props.type==='checkbox'||props.type==='radio';return usesChecked?props.checked!=null:props.value!=null;}/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */function getHostProps(element,props){var node=element;var checked=props.checked;var hostProps=_assign({},props,{defaultChecked:undefined,defaultValue:undefined,value:undefined,checked:checked!=null?checked:node._wrapperState.initialChecked});return hostProps;}function initWrapperState(element,props){{ReactControlledValuePropTypes.checkPropTypes('input',props);if(props.checked!==undefined&&props.defaultChecked!==undefined&&!didWarnCheckedDefaultChecked){warning$1(false,'%s contains an input of type %s with both checked and defaultChecked props. '+'Input elements must be either controlled or uncontrolled '+'(specify either the checked prop, or the defaultChecked prop, but not '+'both). Decide between using a controlled or uncontrolled input '+'element and remove one of these props. More info: '+'https://fb.me/react-controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component',props.type);didWarnCheckedDefaultChecked=true;}if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValueDefaultValue){warning$1(false,'%s contains an input of type %s with both value and defaultValue props. '+'Input elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled input '+'element and remove one of these props. More info: '+'https://fb.me/react-controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component',props.type);didWarnValueDefaultValue=true;}}var node=element;var defaultValue=props.defaultValue==null?'':props.defaultValue;node._wrapperState={initialChecked:props.checked!=null?props.checked:props.defaultChecked,initialValue:getToStringValue(props.value!=null?props.value:defaultValue),controlled:isControlled(props)};}function updateChecked(element,props){var node=element;var checked=props.checked;if(checked!=null){setValueForProperty(node,'checked',checked,false);}}function updateWrapper(element,props){var node=element;{var _controlled=isControlled(props);if(!node._wrapperState.controlled&&_controlled&&!didWarnUncontrolledToControlled){warning$1(false,'A component is changing an uncontrolled input of type %s to be controlled. '+'Input elements should not switch from uncontrolled to controlled (or vice versa). '+'Decide between using a controlled or uncontrolled input '+'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',props.type);didWarnUncontrolledToControlled=true;}if(node._wrapperState.controlled&&!_controlled&&!didWarnControlledToUncontrolled){warning$1(false,'A component is changing a controlled input of type %s to be uncontrolled. '+'Input elements should not switch from controlled to uncontrolled (or vice versa). '+'Decide between using a controlled or uncontrolled input '+'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',props.type);didWarnControlledToUncontrolled=true;}}updateChecked(element,props);var value=getToStringValue(props.value);var type=props.type;if(value!=null){if(type==='number'){if(value===0&&node.value===''||// We explicitly want to coerce to number here if possible.
// eslint-disable-next-line
node.value!=value){node.value=toString(value);}}else if(node.value!==toString(value)){node.value=toString(value);}}else if(type==='submit'||type==='reset'){// Submit/reset inputs need the attribute removed completely to avoid
// blank-text buttons.
node.removeAttribute('value');return;}if(disableInputAttributeSyncing){// When not syncing the value attribute, React only assigns a new value
// whenever the defaultValue React prop has changed. When not present,
// React does nothing
if(props.hasOwnProperty('defaultValue')){setDefaultValue(node,props.type,getToStringValue(props.defaultValue));}}else{// When syncing the value attribute, the value comes from a cascade of
// properties:
//  1. The value React property
//  2. The defaultValue React property
//  3. Otherwise there should be no change
if(props.hasOwnProperty('value')){setDefaultValue(node,props.type,value);}else if(props.hasOwnProperty('defaultValue')){setDefaultValue(node,props.type,getToStringValue(props.defaultValue));}}if(disableInputAttributeSyncing){// When not syncing the checked attribute, the attribute is directly
// controllable from the defaultValue React property. It needs to be
// updated as new props come in.
if(props.defaultChecked==null){node.removeAttribute('checked');}else{node.defaultChecked=!!props.defaultChecked;}}else{// When syncing the checked attribute, it only changes when it needs
// to be removed, such as transitioning from a checkbox into a text input
if(props.checked==null&&props.defaultChecked!=null){node.defaultChecked=!!props.defaultChecked;}}}function postMountWrapper(element,props,isHydrating){var node=element;// Do not assign value if it is already set. This prevents user text input
// from being lost during SSR hydration.
if(props.hasOwnProperty('value')||props.hasOwnProperty('defaultValue')){var type=props.type;var isButton=type==='submit'||type==='reset';// Avoid setting value attribute on submit/reset inputs as it overrides the
// default value provided by the browser. See: #12872
if(isButton&&(props.value===undefined||props.value===null)){return;}var _initialValue=toString(node._wrapperState.initialValue);// Do not assign value if it is already set. This prevents user text input
// from being lost during SSR hydration.
if(!isHydrating){if(disableInputAttributeSyncing){var value=getToStringValue(props.value);// When not syncing the value attribute, the value property points
// directly to the React prop. Only assign it if it exists.
if(value!=null){// Always assign on buttons so that it is possible to assign an
// empty string to clear button text.
//
// Otherwise, do not re-assign the value property if is empty. This
// potentially avoids a DOM write and prevents Firefox (~60.0.1) from
// prematurely marking required inputs as invalid. Equality is compared
// to the current value in case the browser provided value is not an
// empty string.
if(isButton||value!==node.value){node.value=toString(value);}}}else{// When syncing the value attribute, the value property should use
// the wrapperState._initialValue property. This uses:
//
//   1. The value React property when present
//   2. The defaultValue React property when present
//   3. An empty string
if(_initialValue!==node.value){node.value=_initialValue;}}}if(disableInputAttributeSyncing){// When not syncing the value attribute, assign the value attribute
// directly from the defaultValue React property (when present)
var defaultValue=getToStringValue(props.defaultValue);if(defaultValue!=null){node.defaultValue=toString(defaultValue);}}else{// Otherwise, the value attribute is synchronized to the property,
// so we assign defaultValue to the same thing as the value property
// assignment step above.
node.defaultValue=_initialValue;}}// Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
// this is needed to work around a chrome bug where setting defaultChecked
// will sometimes influence the value of checked (even after detachment).
// Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
// We need to temporarily unset name to avoid disrupting radio button groups.
var name=node.name;if(name!==''){node.name='';}if(disableInputAttributeSyncing){// When not syncing the checked attribute, the checked property
// never gets assigned. It must be manually set. We don't want
// to do this when hydrating so that existing user input isn't
// modified
if(!isHydrating){updateChecked(element,props);}// Only assign the checked attribute if it is defined. This saves
// a DOM write when controlling the checked attribute isn't needed
// (text inputs, submit/reset)
if(props.hasOwnProperty('defaultChecked')){node.defaultChecked=!node.defaultChecked;node.defaultChecked=!!props.defaultChecked;}}else{// When syncing the checked attribute, both the checked property and
// attribute are assigned at the same time using defaultChecked. This uses:
//
//   1. The checked React property when present
//   2. The defaultChecked React property when present
//   3. Otherwise, false
node.defaultChecked=!node.defaultChecked;node.defaultChecked=!!node._wrapperState.initialChecked;}if(name!==''){node.name=name;}}function restoreControlledState(element,props){var node=element;updateWrapper(node,props);updateNamedCousins(node,props);}function updateNamedCousins(rootNode,props){var name=props.name;if(props.type==='radio'&&name!=null){var queryRoot=rootNode;while(queryRoot.parentNode){queryRoot=queryRoot.parentNode;}// If `rootNode.form` was non-null, then we could try `form.elements`,
// but that sometimes behaves strangely in IE8. We could also try using
// `form.getElementsByName`, but that will only return direct children
// and won't include inputs that use the HTML5 `form=` attribute. Since
// the input might not even be in a form. It might not even be in the
// document. Let's just use the local `querySelectorAll` to ensure we don't
// miss anything.
var group=queryRoot.querySelectorAll('input[name='+JSON.stringify(''+name)+'][type="radio"]');for(var i=0;i<group.length;i++){var otherNode=group[i];if(otherNode===rootNode||otherNode.form!==rootNode.form){continue;}// This will throw if radio buttons rendered by different copies of React
// and the same name are rendered into the same form (same as #1939).
// That's probably okay; we don't support it just as we don't support
// mixing React radio buttons with non-React ones.
var otherProps=getFiberCurrentPropsFromNode$1(otherNode);!otherProps?invariant(false,'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.'):void 0;// We need update the tracked value on the named cousin since the value
// was changed but the input saw no event or value set
updateValueIfChanged(otherNode);// If this is a controlled radio button group, forcing the input that
// was previously checked to update will cause it to be come re-checked
// as appropriate.
updateWrapper(otherNode,otherProps);}}}// In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253
function setDefaultValue(node,type,value){if(// Focused number inputs synchronize on blur. See ChangeEventPlugin.js
type!=='number'||node.ownerDocument.activeElement!==node){if(value==null){node.defaultValue=toString(node._wrapperState.initialValue);}else if(node.defaultValue!==toString(value)){node.defaultValue=toString(value);}}}var eventTypes$1={change:{phasedRegistrationNames:{bubbled:'onChange',captured:'onChangeCapture'},dependencies:[TOP_BLUR,TOP_CHANGE,TOP_CLICK,TOP_FOCUS,TOP_INPUT,TOP_KEY_DOWN,TOP_KEY_UP,TOP_SELECTION_CHANGE]}};function createAndAccumulateChangeEvent(inst,nativeEvent,target){var event=SyntheticEvent.getPooled(eventTypes$1.change,inst,nativeEvent,target);event.type='change';// Flag this event loop as needing state restore.
enqueueStateRestore(target);accumulateTwoPhaseDispatches(event);return event;}/**
 * For IE shims
 */var activeElement=null;var activeElementInst=null;/**
 * SECTION: handle `change` event
 */function shouldUseChangeEvent(elem){var nodeName=elem.nodeName&&elem.nodeName.toLowerCase();return nodeName==='select'||nodeName==='input'&&elem.type==='file';}function manualDispatchChangeEvent(nativeEvent){var event=createAndAccumulateChangeEvent(activeElementInst,nativeEvent,getEventTarget(nativeEvent));// If change and propertychange bubbled, we'd just bind to it like all the
// other events and have it go through ReactBrowserEventEmitter. Since it
// doesn't, we manually listen for the events and so we have to enqueue and
// process the abstract event manually.
//
// Batching is necessary here in order to ensure that all event handlers run
// before the next rerender (including event handlers attached to ancestor
// elements instead of directly on the input). Without this, controlled
// components don't work properly in conjunction with event bubbling because
// the component is rerendered and the value reverted before all the event
// handlers can run. See https://github.com/facebook/react/issues/708.
batchedUpdates(runEventInBatch,event);}function runEventInBatch(event){runEventsInBatch(event,false);}function getInstIfValueChanged(targetInst){var targetNode=getNodeFromInstance$1(targetInst);if(updateValueIfChanged(targetNode)){return targetInst;}}function getTargetInstForChangeEvent(topLevelType,targetInst){if(topLevelType===TOP_CHANGE){return targetInst;}}/**
 * SECTION: handle `input` event
 */var isInputEventSupported=false;if(canUseDOM){// IE9 claims to support the input event but fails to trigger it when
// deleting text, so we ignore its input events.
isInputEventSupported=isEventSupported('input')&&(!document.documentMode||document.documentMode>9);}/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */function startWatchingForValueChange(target,targetInst){activeElement=target;activeElementInst=targetInst;activeElement.attachEvent('onpropertychange',handlePropertyChange);}/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */function stopWatchingForValueChange(){if(!activeElement){return;}activeElement.detachEvent('onpropertychange',handlePropertyChange);activeElement=null;activeElementInst=null;}/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */function handlePropertyChange(nativeEvent){if(nativeEvent.propertyName!=='value'){return;}if(getInstIfValueChanged(activeElementInst)){manualDispatchChangeEvent(nativeEvent);}}function handleEventsForInputEventPolyfill(topLevelType,target,targetInst){if(topLevelType===TOP_FOCUS){// In IE9, propertychange fires for most input events but is buggy and
// doesn't fire when text is deleted, but conveniently, selectionchange
// appears to fire in all of the remaining cases so we catch those and
// forward the event if the value has changed
// In either case, we don't want to call the event handler if the value
// is changed from JS so we redefine a setter for `.value` that updates
// our activeElementValue variable, allowing us to ignore those changes
//
// stopWatching() should be a noop here but we call it just in case we
// missed a blur event somehow.
stopWatchingForValueChange();startWatchingForValueChange(target,targetInst);}else if(topLevelType===TOP_BLUR){stopWatchingForValueChange();}}// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType,targetInst){if(topLevelType===TOP_SELECTION_CHANGE||topLevelType===TOP_KEY_UP||topLevelType===TOP_KEY_DOWN){// On the selectionchange event, the target is just document which isn't
// helpful for us so just check activeElement instead.
//
// 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
// propertychange on the first input event after setting `value` from a
// script and fires only keydown, keypress, keyup. Catching keyup usually
// gets it and catching keydown lets us fire an event for the first
// keystroke if user does a key repeat (it'll be a little delayed: right
// before the second keystroke). Other input methods (e.g., paste) seem to
// fire selectionchange normally.
return getInstIfValueChanged(activeElementInst);}}/**
 * SECTION: handle `click` event
 */function shouldUseClickEvent(elem){// Use the `click` event to detect changes to checkbox and radio inputs.
// This approach works across all browsers, whereas `change` does not fire
// until `blur` in IE8.
var nodeName=elem.nodeName;return nodeName&&nodeName.toLowerCase()==='input'&&(elem.type==='checkbox'||elem.type==='radio');}function getTargetInstForClickEvent(topLevelType,targetInst){if(topLevelType===TOP_CLICK){return getInstIfValueChanged(targetInst);}}function getTargetInstForInputOrChangeEvent(topLevelType,targetInst){if(topLevelType===TOP_INPUT||topLevelType===TOP_CHANGE){return getInstIfValueChanged(targetInst);}}function handleControlledInputBlur(node){var state=node._wrapperState;if(!state||!state.controlled||node.type!=='number'){return;}if(!disableInputAttributeSyncing){// If controlled, assign the value attribute to the current value on blur
setDefaultValue(node,'number',node.value);}}/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */var ChangeEventPlugin={eventTypes:eventTypes$1,_isInputEventSupported:isInputEventSupported,extractEvents:function(topLevelType,targetInst,nativeEvent,nativeEventTarget){var targetNode=targetInst?getNodeFromInstance$1(targetInst):window;var getTargetInstFunc=void 0,handleEventFunc=void 0;if(shouldUseChangeEvent(targetNode)){getTargetInstFunc=getTargetInstForChangeEvent;}else if(isTextInputElement(targetNode)){if(isInputEventSupported){getTargetInstFunc=getTargetInstForInputOrChangeEvent;}else{getTargetInstFunc=getTargetInstForInputEventPolyfill;handleEventFunc=handleEventsForInputEventPolyfill;}}else if(shouldUseClickEvent(targetNode)){getTargetInstFunc=getTargetInstForClickEvent;}if(getTargetInstFunc){var inst=getTargetInstFunc(topLevelType,targetInst);if(inst){var event=createAndAccumulateChangeEvent(inst,nativeEvent,nativeEventTarget);return event;}}if(handleEventFunc){handleEventFunc(topLevelType,targetNode,targetInst);}// When blurring, set the value attribute for number inputs
if(topLevelType===TOP_BLUR){handleControlledInputBlur(targetNode);}}};/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */var DOMEventPluginOrder=['ResponderEventPlugin','SimpleEventPlugin','EnterLeaveEventPlugin','ChangeEventPlugin','SelectEventPlugin','BeforeInputEventPlugin'];var SyntheticUIEvent=SyntheticEvent.extend({view:null,detail:null});var modifierKeyToProp={Alt:'altKey',Control:'ctrlKey',Meta:'metaKey',Shift:'shiftKey'};// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */function modifierStateGetter(keyArg){var syntheticEvent=this;var nativeEvent=syntheticEvent.nativeEvent;if(nativeEvent.getModifierState){return nativeEvent.getModifierState(keyArg);}var keyProp=modifierKeyToProp[keyArg];return keyProp?!!nativeEvent[keyProp]:false;}function getEventModifierState(nativeEvent){return modifierStateGetter;}var previousScreenX=0;var previousScreenY=0;// Use flags to signal movementX/Y has already been set
var isMovementXSet=false;var isMovementYSet=false;/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticMouseEvent=SyntheticUIEvent.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:getEventModifierState,button:null,buttons:null,relatedTarget:function(event){return event.relatedTarget||(event.fromElement===event.srcElement?event.toElement:event.fromElement);},movementX:function(event){if('movementX'in event){return event.movementX;}var screenX=previousScreenX;previousScreenX=event.screenX;if(!isMovementXSet){isMovementXSet=true;return 0;}return event.type==='mousemove'?event.screenX-screenX:0;},movementY:function(event){if('movementY'in event){return event.movementY;}var screenY=previousScreenY;previousScreenY=event.screenY;if(!isMovementYSet){isMovementYSet=true;return 0;}return event.type==='mousemove'?event.screenY-screenY:0;}});/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */var SyntheticPointerEvent=SyntheticMouseEvent.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null});var eventTypes$2={mouseEnter:{registrationName:'onMouseEnter',dependencies:[TOP_MOUSE_OUT,TOP_MOUSE_OVER]},mouseLeave:{registrationName:'onMouseLeave',dependencies:[TOP_MOUSE_OUT,TOP_MOUSE_OVER]},pointerEnter:{registrationName:'onPointerEnter',dependencies:[TOP_POINTER_OUT,TOP_POINTER_OVER]},pointerLeave:{registrationName:'onPointerLeave',dependencies:[TOP_POINTER_OUT,TOP_POINTER_OVER]}};var EnterLeaveEventPlugin={eventTypes:eventTypes$2,/**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */extractEvents:function(topLevelType,targetInst,nativeEvent,nativeEventTarget){var isOverEvent=topLevelType===TOP_MOUSE_OVER||topLevelType===TOP_POINTER_OVER;var isOutEvent=topLevelType===TOP_MOUSE_OUT||topLevelType===TOP_POINTER_OUT;if(isOverEvent&&(nativeEvent.relatedTarget||nativeEvent.fromElement)){return null;}if(!isOutEvent&&!isOverEvent){// Must not be a mouse or pointer in or out - ignoring.
return null;}var win=void 0;if(nativeEventTarget.window===nativeEventTarget){// `nativeEventTarget` is probably a window object.
win=nativeEventTarget;}else{// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
var doc=nativeEventTarget.ownerDocument;if(doc){win=doc.defaultView||doc.parentWindow;}else{win=window;}}var from=void 0;var to=void 0;if(isOutEvent){from=targetInst;var related=nativeEvent.relatedTarget||nativeEvent.toElement;to=related?getClosestInstanceFromNode(related):null;}else{// Moving to a node from outside the window.
from=null;to=targetInst;}if(from===to){// Nothing pertains to our managed components.
return null;}var eventInterface=void 0,leaveEventType=void 0,enterEventType=void 0,eventTypePrefix=void 0;if(topLevelType===TOP_MOUSE_OUT||topLevelType===TOP_MOUSE_OVER){eventInterface=SyntheticMouseEvent;leaveEventType=eventTypes$2.mouseLeave;enterEventType=eventTypes$2.mouseEnter;eventTypePrefix='mouse';}else if(topLevelType===TOP_POINTER_OUT||topLevelType===TOP_POINTER_OVER){eventInterface=SyntheticPointerEvent;leaveEventType=eventTypes$2.pointerLeave;enterEventType=eventTypes$2.pointerEnter;eventTypePrefix='pointer';}var fromNode=from==null?win:getNodeFromInstance$1(from);var toNode=to==null?win:getNodeFromInstance$1(to);var leave=eventInterface.getPooled(leaveEventType,from,nativeEvent,nativeEventTarget);leave.type=eventTypePrefix+'leave';leave.target=fromNode;leave.relatedTarget=toNode;var enter=eventInterface.getPooled(enterEventType,to,nativeEvent,nativeEventTarget);enter.type=eventTypePrefix+'enter';enter.target=toNode;enter.relatedTarget=fromNode;accumulateEnterLeaveDispatches(leave,enter,from,to);return[leave,enter];}};/*eslint-disable no-self-compare */var hasOwnProperty$1=Object.prototype.hasOwnProperty;/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */function is(x,y){// SameValue algorithm
if(x===y){// Steps 1-5, 7-10
// Steps 6.b-6.e: +0 != -0
// Added the nonzero y check to make Flow happy, but it is redundant
return x!==0||y!==0||1/x===1/y;}else{// Step 6.a: NaN == NaN
return x!==x&&y!==y;}}/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */function shallowEqual(objA,objB){if(is(objA,objB)){return true;}if(typeof objA!=='object'||objA===null||typeof objB!=='object'||objB===null){return false;}var keysA=Object.keys(objA);var keysB=Object.keys(objB);if(keysA.length!==keysB.length){return false;}// Test for A's keys different from B.
for(var i=0;i<keysA.length;i++){if(!hasOwnProperty$1.call(objB,keysA[i])||!is(objA[keysA[i]],objB[keysA[i]])){return false;}}return true;}/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ /**
 * This API should be called `delete` but we'd have to make sure to always
 * transform these to strings for IE support. When this transform is fully
 * supported we can rename it.
 */function get(key){return key._reactInternalFiber;}function has(key){return key._reactInternalFiber!==undefined;}function set(key,value){key._reactInternalFiber=value;}// Don't change these two values. They're used by React Dev Tools.
var NoEffect=/*              */0;var PerformedWork=/*         */1;// You can change the rest (and add more).
var Placement=/*             */2;var Update=/*                */4;var PlacementAndUpdate=/*    */6;var Deletion=/*              */8;var ContentReset=/*          */16;var Callback=/*              */32;var DidCapture=/*            */64;var Ref=/*                   */128;var Snapshot=/*              */256;// Update & Callback & Ref & Snapshot
var LifecycleEffectMask=/*   */420;// Union of all host effects
var HostEffectMask=/*        */511;var Incomplete=/*            */512;var ShouldCapture=/*         */1024;var ReactCurrentOwner$1=ReactSharedInternals.ReactCurrentOwner;var MOUNTING=1;var MOUNTED=2;var UNMOUNTED=3;function isFiberMountedImpl(fiber){var node=fiber;if(!fiber.alternate){// If there is no alternate, this might be a new tree that isn't inserted
// yet. If it is, then it will have a pending insertion effect on it.
if((node.effectTag&Placement)!==NoEffect){return MOUNTING;}while(node.return){node=node.return;if((node.effectTag&Placement)!==NoEffect){return MOUNTING;}}}else{while(node.return){node=node.return;}}if(node.tag===HostRoot){// TODO: Check if this was a nested HostRoot when used with
// renderContainerIntoSubtree.
return MOUNTED;}// If we didn't hit the root, that means that we're in an disconnected tree
// that has been unmounted.
return UNMOUNTED;}function isFiberMounted(fiber){return isFiberMountedImpl(fiber)===MOUNTED;}function isMounted(component){{var owner=ReactCurrentOwner$1.current;if(owner!==null&&owner.tag===ClassComponent){var ownerFiber=owner;var instance=ownerFiber.stateNode;!instance._warnedAboutRefsInRender?warningWithoutStack$1(false,'%s is accessing isMounted inside its render() function. '+'render() should be a pure function of props and state. It should '+'never access something that requires stale data from the previous '+'render, such as refs. Move this logic to componentDidMount and '+'componentDidUpdate instead.',getComponentName(ownerFiber.type)||'A component'):void 0;instance._warnedAboutRefsInRender=true;}}var fiber=get(component);if(!fiber){return false;}return isFiberMountedImpl(fiber)===MOUNTED;}function assertIsMounted(fiber){!(isFiberMountedImpl(fiber)===MOUNTED)?invariant(false,'Unable to find node on an unmounted component.'):void 0;}function findCurrentFiberUsingSlowPath(fiber){var alternate=fiber.alternate;if(!alternate){// If there is no alternate, then we only need to check if it is mounted.
var state=isFiberMountedImpl(fiber);!(state!==UNMOUNTED)?invariant(false,'Unable to find node on an unmounted component.'):void 0;if(state===MOUNTING){return null;}return fiber;}// If we have two possible branches, we'll walk backwards up to the root
// to see what path the root points to. On the way we may hit one of the
// special cases and we'll deal with them.
var a=fiber;var b=alternate;while(true){var parentA=a.return;var parentB=parentA?parentA.alternate:null;if(!parentA||!parentB){// We're at the root.
break;}// If both copies of the parent fiber point to the same child, we can
// assume that the child is current. This happens when we bailout on low
// priority: the bailed out fiber's child reuses the current child.
if(parentA.child===parentB.child){var child=parentA.child;while(child){if(child===a){// We've determined that A is the current branch.
assertIsMounted(parentA);return fiber;}if(child===b){// We've determined that B is the current branch.
assertIsMounted(parentA);return alternate;}child=child.sibling;}// We should never have an alternate for any mounting node. So the only
// way this could possibly happen is if this was unmounted, if at all.
invariant(false,'Unable to find node on an unmounted component.');}if(a.return!==b.return){// The return pointer of A and the return pointer of B point to different
// fibers. We assume that return pointers never criss-cross, so A must
// belong to the child set of A.return, and B must belong to the child
// set of B.return.
a=parentA;b=parentB;}else{// The return pointers point to the same fiber. We'll have to use the
// default, slow path: scan the child sets of each parent alternate to see
// which child belongs to which set.
//
// Search parent A's child set
var didFindChild=false;var _child=parentA.child;while(_child){if(_child===a){didFindChild=true;a=parentA;b=parentB;break;}if(_child===b){didFindChild=true;b=parentA;a=parentB;break;}_child=_child.sibling;}if(!didFindChild){// Search parent B's child set
_child=parentB.child;while(_child){if(_child===a){didFindChild=true;a=parentB;b=parentA;break;}if(_child===b){didFindChild=true;b=parentB;a=parentA;break;}_child=_child.sibling;}!didFindChild?invariant(false,'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.'):void 0;}}!(a.alternate===b)?invariant(false,'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.'):void 0;}// If the root is not a host container, we're in a disconnected tree. I.e.
// unmounted.
!(a.tag===HostRoot)?invariant(false,'Unable to find node on an unmounted component.'):void 0;if(a.stateNode.current===a){// We've determined that A is the current branch.
return fiber;}// Otherwise B has to be current branch.
return alternate;}function findCurrentHostFiber(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);if(!currentParent){return null;}// Next we'll drill down this component to find the first HostComponent/Text.
var node=currentParent;while(true){if(node.tag===HostComponent||node.tag===HostText){return node;}else if(node.child){node.child.return=node;node=node.child;continue;}if(node===currentParent){return null;}while(!node.sibling){if(!node.return||node.return===currentParent){return null;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}// Flow needs the return null here, but ESLint complains about it.
// eslint-disable-next-line no-unreachable
return null;}function findCurrentHostFiberWithNoPortals(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);if(!currentParent){return null;}// Next we'll drill down this component to find the first HostComponent/Text.
var node=currentParent;while(true){if(node.tag===HostComponent||node.tag===HostText){return node;}else if(node.child&&node.tag!==HostPortal){node.child.return=node;node=node.child;continue;}if(node===currentParent){return null;}while(!node.sibling){if(!node.return||node.return===currentParent){return null;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}// Flow needs the return null here, but ESLint complains about it.
// eslint-disable-next-line no-unreachable
return null;}function addEventBubbleListener(element,eventType,listener){element.addEventListener(eventType,listener,false);}function addEventCaptureListener(element,eventType,listener){element.addEventListener(eventType,listener,true);}/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */var SyntheticAnimationEvent=SyntheticEvent.extend({animationName:null,elapsedTime:null,pseudoElement:null});/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */var SyntheticClipboardEvent=SyntheticEvent.extend({clipboardData:function(event){return'clipboardData'in event?event.clipboardData:window.clipboardData;}});/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticFocusEvent=SyntheticUIEvent.extend({relatedTarget:null});/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */function getEventCharCode(nativeEvent){var charCode=void 0;var keyCode=nativeEvent.keyCode;if('charCode'in nativeEvent){charCode=nativeEvent.charCode;// FF does not set `charCode` for the Enter-key, check against `keyCode`.
if(charCode===0&&keyCode===13){charCode=13;}}else{// IE8 does not implement `charCode`, but `keyCode` has the correct value.
charCode=keyCode;}// IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
// report Enter as charCode 10 when ctrl is pressed.
if(charCode===10){charCode=13;}// Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
// Must not discard the (non-)printable Enter-key.
if(charCode>=32||charCode===13){return charCode;}return 0;}/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */var normalizeKey={Esc:'Escape',Spacebar:' ',Left:'ArrowLeft',Up:'ArrowUp',Right:'ArrowRight',Down:'ArrowDown',Del:'Delete',Win:'OS',Menu:'ContextMenu',Apps:'ContextMenu',Scroll:'ScrollLock',MozPrintableKey:'Unidentified'};/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */var translateToKey={'8':'Backspace','9':'Tab','12':'Clear','13':'Enter','16':'Shift','17':'Control','18':'Alt','19':'Pause','20':'CapsLock','27':'Escape','32':' ','33':'PageUp','34':'PageDown','35':'End','36':'Home','37':'ArrowLeft','38':'ArrowUp','39':'ArrowRight','40':'ArrowDown','45':'Insert','46':'Delete','112':'F1','113':'F2','114':'F3','115':'F4','116':'F5','117':'F6','118':'F7','119':'F8','120':'F9','121':'F10','122':'F11','123':'F12','144':'NumLock','145':'ScrollLock','224':'Meta'};/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */function getEventKey(nativeEvent){if(nativeEvent.key){// Normalize inconsistent values reported by browsers due to
// implementations of a working draft specification.
// FireFox implements `key` but returns `MozPrintableKey` for all
// printable characters (normalized to `Unidentified`), ignore it.
var key=normalizeKey[nativeEvent.key]||nativeEvent.key;if(key!=='Unidentified'){return key;}}// Browser does not implement `key`, polyfill as much of it as we can.
if(nativeEvent.type==='keypress'){var charCode=getEventCharCode(nativeEvent);// The enter-key is technically both printable and non-printable and can
// thus be captured by `keypress`, no other non-printable key should.
return charCode===13?'Enter':String.fromCharCode(charCode);}if(nativeEvent.type==='keydown'||nativeEvent.type==='keyup'){// While user keyboard layout determines the actual meaning of each
// `keyCode` value, almost all function keys have a universal value.
return translateToKey[nativeEvent.keyCode]||'Unidentified';}return'';}/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticKeyboardEvent=SyntheticUIEvent.extend({key:getEventKey,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:getEventModifierState,// Legacy Interface
charCode:function(event){// `charCode` is the result of a KeyPress event and represents the value of
// the actual printable character.
// KeyPress is deprecated, but its replacement is not yet final and not
// implemented in any major browser. Only KeyPress has charCode.
if(event.type==='keypress'){return getEventCharCode(event);}return 0;},keyCode:function(event){// `keyCode` is the result of a KeyDown/Up event and represents the value of
// physical keyboard key.
// The actual meaning of the value depends on the users' keyboard layout
// which cannot be detected. Assuming that it is a US keyboard layout
// provides a surprisingly accurate mapping for US and European users.
// Due to this, it is left to the user to implement at this time.
if(event.type==='keydown'||event.type==='keyup'){return event.keyCode;}return 0;},which:function(event){// `which` is an alias for either `keyCode` or `charCode` depending on the
// type of the event.
if(event.type==='keypress'){return getEventCharCode(event);}if(event.type==='keydown'||event.type==='keyup'){return event.keyCode;}return 0;}});/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticDragEvent=SyntheticMouseEvent.extend({dataTransfer:null});/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */var SyntheticTouchEvent=SyntheticUIEvent.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:getEventModifierState});/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */var SyntheticTransitionEvent=SyntheticEvent.extend({propertyName:null,elapsedTime:null,pseudoElement:null});/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var SyntheticWheelEvent=SyntheticMouseEvent.extend({deltaX:function(event){return'deltaX'in event?event.deltaX:// Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
'wheelDeltaX'in event?-event.wheelDeltaX:0;},deltaY:function(event){return'deltaY'in event?event.deltaY:// Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
'wheelDeltaY'in event?-event.wheelDeltaY:// Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
'wheelDelta'in event?-event.wheelDelta:0;},deltaZ:null,// Browsers without "deltaMode" is reporting in raw wheel delta where one
// notch on the scroll is always +/- 120, roughly equivalent to pixels.
// A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
// ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
deltaMode:null});/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */var interactiveEventTypeNames=[[TOP_BLUR,'blur'],[TOP_CANCEL,'cancel'],[TOP_CLICK,'click'],[TOP_CLOSE,'close'],[TOP_CONTEXT_MENU,'contextMenu'],[TOP_COPY,'copy'],[TOP_CUT,'cut'],[TOP_AUX_CLICK,'auxClick'],[TOP_DOUBLE_CLICK,'doubleClick'],[TOP_DRAG_END,'dragEnd'],[TOP_DRAG_START,'dragStart'],[TOP_DROP,'drop'],[TOP_FOCUS,'focus'],[TOP_INPUT,'input'],[TOP_INVALID,'invalid'],[TOP_KEY_DOWN,'keyDown'],[TOP_KEY_PRESS,'keyPress'],[TOP_KEY_UP,'keyUp'],[TOP_MOUSE_DOWN,'mouseDown'],[TOP_MOUSE_UP,'mouseUp'],[TOP_PASTE,'paste'],[TOP_PAUSE,'pause'],[TOP_PLAY,'play'],[TOP_POINTER_CANCEL,'pointerCancel'],[TOP_POINTER_DOWN,'pointerDown'],[TOP_POINTER_UP,'pointerUp'],[TOP_RATE_CHANGE,'rateChange'],[TOP_RESET,'reset'],[TOP_SEEKED,'seeked'],[TOP_SUBMIT,'submit'],[TOP_TOUCH_CANCEL,'touchCancel'],[TOP_TOUCH_END,'touchEnd'],[TOP_TOUCH_START,'touchStart'],[TOP_VOLUME_CHANGE,'volumeChange']];var nonInteractiveEventTypeNames=[[TOP_ABORT,'abort'],[TOP_ANIMATION_END,'animationEnd'],[TOP_ANIMATION_ITERATION,'animationIteration'],[TOP_ANIMATION_START,'animationStart'],[TOP_CAN_PLAY,'canPlay'],[TOP_CAN_PLAY_THROUGH,'canPlayThrough'],[TOP_DRAG,'drag'],[TOP_DRAG_ENTER,'dragEnter'],[TOP_DRAG_EXIT,'dragExit'],[TOP_DRAG_LEAVE,'dragLeave'],[TOP_DRAG_OVER,'dragOver'],[TOP_DURATION_CHANGE,'durationChange'],[TOP_EMPTIED,'emptied'],[TOP_ENCRYPTED,'encrypted'],[TOP_ENDED,'ended'],[TOP_ERROR,'error'],[TOP_GOT_POINTER_CAPTURE,'gotPointerCapture'],[TOP_LOAD,'load'],[TOP_LOADED_DATA,'loadedData'],[TOP_LOADED_METADATA,'loadedMetadata'],[TOP_LOAD_START,'loadStart'],[TOP_LOST_POINTER_CAPTURE,'lostPointerCapture'],[TOP_MOUSE_MOVE,'mouseMove'],[TOP_MOUSE_OUT,'mouseOut'],[TOP_MOUSE_OVER,'mouseOver'],[TOP_PLAYING,'playing'],[TOP_POINTER_MOVE,'pointerMove'],[TOP_POINTER_OUT,'pointerOut'],[TOP_POINTER_OVER,'pointerOver'],[TOP_PROGRESS,'progress'],[TOP_SCROLL,'scroll'],[TOP_SEEKING,'seeking'],[TOP_STALLED,'stalled'],[TOP_SUSPEND,'suspend'],[TOP_TIME_UPDATE,'timeUpdate'],[TOP_TOGGLE,'toggle'],[TOP_TOUCH_MOVE,'touchMove'],[TOP_TRANSITION_END,'transitionEnd'],[TOP_WAITING,'waiting'],[TOP_WHEEL,'wheel']];var eventTypes$4={};var topLevelEventsToDispatchConfig={};function addEventTypeNameToConfig(_ref,isInteractive){var topEvent=_ref[0],event=_ref[1];var capitalizedEvent=event[0].toUpperCase()+event.slice(1);var onEvent='on'+capitalizedEvent;var type={phasedRegistrationNames:{bubbled:onEvent,captured:onEvent+'Capture'},dependencies:[topEvent],isInteractive:isInteractive};eventTypes$4[event]=type;topLevelEventsToDispatchConfig[topEvent]=type;}interactiveEventTypeNames.forEach(function(eventTuple){addEventTypeNameToConfig(eventTuple,true);});nonInteractiveEventTypeNames.forEach(function(eventTuple){addEventTypeNameToConfig(eventTuple,false);});// Only used in DEV for exhaustiveness validation.
var knownHTMLTopLevelTypes=[TOP_ABORT,TOP_CANCEL,TOP_CAN_PLAY,TOP_CAN_PLAY_THROUGH,TOP_CLOSE,TOP_DURATION_CHANGE,TOP_EMPTIED,TOP_ENCRYPTED,TOP_ENDED,TOP_ERROR,TOP_INPUT,TOP_INVALID,TOP_LOAD,TOP_LOADED_DATA,TOP_LOADED_METADATA,TOP_LOAD_START,TOP_PAUSE,TOP_PLAY,TOP_PLAYING,TOP_PROGRESS,TOP_RATE_CHANGE,TOP_RESET,TOP_SEEKED,TOP_SEEKING,TOP_STALLED,TOP_SUBMIT,TOP_SUSPEND,TOP_TIME_UPDATE,TOP_TOGGLE,TOP_VOLUME_CHANGE,TOP_WAITING];var SimpleEventPlugin={eventTypes:eventTypes$4,isInteractiveTopLevelEventType:function(topLevelType){var config=topLevelEventsToDispatchConfig[topLevelType];return config!==undefined&&config.isInteractive===true;},extractEvents:function(topLevelType,targetInst,nativeEvent,nativeEventTarget){var dispatchConfig=topLevelEventsToDispatchConfig[topLevelType];if(!dispatchConfig){return null;}var EventConstructor=void 0;switch(topLevelType){case TOP_KEY_PRESS:// Firefox creates a keypress event for function keys too. This removes
// the unwanted keypress events. Enter is however both printable and
// non-printable. One would expect Tab to be as well (but it isn't).
if(getEventCharCode(nativeEvent)===0){return null;}/* falls through */case TOP_KEY_DOWN:case TOP_KEY_UP:EventConstructor=SyntheticKeyboardEvent;break;case TOP_BLUR:case TOP_FOCUS:EventConstructor=SyntheticFocusEvent;break;case TOP_CLICK:// Firefox creates a click event on right mouse clicks. This removes the
// unwanted click events.
if(nativeEvent.button===2){return null;}/* falls through */case TOP_AUX_CLICK:case TOP_DOUBLE_CLICK:case TOP_MOUSE_DOWN:case TOP_MOUSE_MOVE:case TOP_MOUSE_UP:// TODO: Disabled elements should not respond to mouse events
/* falls through */case TOP_MOUSE_OUT:case TOP_MOUSE_OVER:case TOP_CONTEXT_MENU:EventConstructor=SyntheticMouseEvent;break;case TOP_DRAG:case TOP_DRAG_END:case TOP_DRAG_ENTER:case TOP_DRAG_EXIT:case TOP_DRAG_LEAVE:case TOP_DRAG_OVER:case TOP_DRAG_START:case TOP_DROP:EventConstructor=SyntheticDragEvent;break;case TOP_TOUCH_CANCEL:case TOP_TOUCH_END:case TOP_TOUCH_MOVE:case TOP_TOUCH_START:EventConstructor=SyntheticTouchEvent;break;case TOP_ANIMATION_END:case TOP_ANIMATION_ITERATION:case TOP_ANIMATION_START:EventConstructor=SyntheticAnimationEvent;break;case TOP_TRANSITION_END:EventConstructor=SyntheticTransitionEvent;break;case TOP_SCROLL:EventConstructor=SyntheticUIEvent;break;case TOP_WHEEL:EventConstructor=SyntheticWheelEvent;break;case TOP_COPY:case TOP_CUT:case TOP_PASTE:EventConstructor=SyntheticClipboardEvent;break;case TOP_GOT_POINTER_CAPTURE:case TOP_LOST_POINTER_CAPTURE:case TOP_POINTER_CANCEL:case TOP_POINTER_DOWN:case TOP_POINTER_MOVE:case TOP_POINTER_OUT:case TOP_POINTER_OVER:case TOP_POINTER_UP:EventConstructor=SyntheticPointerEvent;break;default:{if(knownHTMLTopLevelTypes.indexOf(topLevelType)===-1){warningWithoutStack$1(false,'SimpleEventPlugin: Unhandled event type, `%s`. This warning '+'is likely caused by a bug in React. Please file an issue.',topLevelType);}}// HTML Events
// @see http://www.w3.org/TR/html5/index.html#events-0
EventConstructor=SyntheticEvent;break;}var event=EventConstructor.getPooled(dispatchConfig,targetInst,nativeEvent,nativeEventTarget);accumulateTwoPhaseDispatches(event);return event;}};var isInteractiveTopLevelEventType=SimpleEventPlugin.isInteractiveTopLevelEventType;var CALLBACK_BOOKKEEPING_POOL_SIZE=10;var callbackBookkeepingPool=[];/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */function findRootContainerNode(inst){// TODO: It may be a good idea to cache this to prevent unnecessary DOM
// traversal, but caching is difficult to do correctly without using a
// mutation observer to listen for all DOM changes.
while(inst.return){inst=inst.return;}if(inst.tag!==HostRoot){// This can happen if we're in a detached tree.
return null;}return inst.stateNode.containerInfo;}// Used to store ancestor hierarchy in top level callback
function getTopLevelCallbackBookKeeping(topLevelType,nativeEvent,targetInst){if(callbackBookkeepingPool.length){var instance=callbackBookkeepingPool.pop();instance.topLevelType=topLevelType;instance.nativeEvent=nativeEvent;instance.targetInst=targetInst;return instance;}return{topLevelType:topLevelType,nativeEvent:nativeEvent,targetInst:targetInst,ancestors:[]};}function releaseTopLevelCallbackBookKeeping(instance){instance.topLevelType=null;instance.nativeEvent=null;instance.targetInst=null;instance.ancestors.length=0;if(callbackBookkeepingPool.length<CALLBACK_BOOKKEEPING_POOL_SIZE){callbackBookkeepingPool.push(instance);}}function handleTopLevel(bookKeeping){var targetInst=bookKeeping.targetInst;// Loop through the hierarchy, in case there's any nested components.
// It's important that we build the array of ancestors before calling any
// event handlers, because event handlers can modify the DOM, leading to
// inconsistencies with ReactMount's node cache. See #1105.
var ancestor=targetInst;do{if(!ancestor){bookKeeping.ancestors.push(ancestor);break;}var root=findRootContainerNode(ancestor);if(!root){break;}bookKeeping.ancestors.push(ancestor);ancestor=getClosestInstanceFromNode(root);}while(ancestor);for(var i=0;i<bookKeeping.ancestors.length;i++){targetInst=bookKeeping.ancestors[i];runExtractedEventsInBatch(bookKeeping.topLevelType,targetInst,bookKeeping.nativeEvent,getEventTarget(bookKeeping.nativeEvent));}}// TODO: can we stop exporting these?
var _enabled=true;function setEnabled(enabled){_enabled=!!enabled;}function isEnabled(){return _enabled;}/**
 * Traps top-level events by using event bubbling.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */function trapBubbledEvent(topLevelType,element){if(!element){return null;}var dispatch=isInteractiveTopLevelEventType(topLevelType)?dispatchInteractiveEvent:dispatchEvent;addEventBubbleListener(element,getRawEventName(topLevelType),// Check if interactive and wrap in interactiveUpdates
dispatch.bind(null,topLevelType));}/**
 * Traps a top-level event by using event capturing.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} element Element on which to attach listener.
 * @return {?object} An object with a remove function which will forcefully
 *                  remove the listener.
 * @internal
 */function trapCapturedEvent(topLevelType,element){if(!element){return null;}var dispatch=isInteractiveTopLevelEventType(topLevelType)?dispatchInteractiveEvent:dispatchEvent;addEventCaptureListener(element,getRawEventName(topLevelType),// Check if interactive and wrap in interactiveUpdates
dispatch.bind(null,topLevelType));}function dispatchInteractiveEvent(topLevelType,nativeEvent){interactiveUpdates(dispatchEvent,topLevelType,nativeEvent);}function dispatchEvent(topLevelType,nativeEvent){if(!_enabled){return;}var nativeEventTarget=getEventTarget(nativeEvent);var targetInst=getClosestInstanceFromNode(nativeEventTarget);if(targetInst!==null&&typeof targetInst.tag==='number'&&!isFiberMounted(targetInst)){// If we get an event (ex: img onload) before committing that
// component's mount, ignore it for now (that is, treat it as if it was an
// event on a non-React tree). We might also consider queueing events and
// dispatching them after the mount.
targetInst=null;}var bookKeeping=getTopLevelCallbackBookKeeping(topLevelType,nativeEvent,targetInst);try{// Event queue being processed in the same cycle allows
// `preventDefault`.
batchedUpdates(handleTopLevel,bookKeeping);}finally{releaseTopLevelCallbackBookKeeping(bookKeeping);}}/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */var alreadyListeningTo={};var reactTopListenersCounter=0;/**
 * To ensure no conflicts with other potential React instances on the page
 */var topListenersIDKey='_reactListenersID'+(''+Math.random()).slice(2);function getListeningForDocument(mountAt){// In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
// directly.
if(!Object.prototype.hasOwnProperty.call(mountAt,topListenersIDKey)){mountAt[topListenersIDKey]=reactTopListenersCounter++;alreadyListeningTo[mountAt[topListenersIDKey]]={};}return alreadyListeningTo[mountAt[topListenersIDKey]];}/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */function listenTo(registrationName,mountAt){var isListening=getListeningForDocument(mountAt);var dependencies=registrationNameDependencies[registrationName];for(var i=0;i<dependencies.length;i++){var dependency=dependencies[i];if(!(isListening.hasOwnProperty(dependency)&&isListening[dependency])){switch(dependency){case TOP_SCROLL:trapCapturedEvent(TOP_SCROLL,mountAt);break;case TOP_FOCUS:case TOP_BLUR:trapCapturedEvent(TOP_FOCUS,mountAt);trapCapturedEvent(TOP_BLUR,mountAt);// We set the flag for a single dependency later in this function,
// but this ensures we mark both as attached rather than just one.
isListening[TOP_BLUR]=true;isListening[TOP_FOCUS]=true;break;case TOP_CANCEL:case TOP_CLOSE:if(isEventSupported(getRawEventName(dependency))){trapCapturedEvent(dependency,mountAt);}break;case TOP_INVALID:case TOP_SUBMIT:case TOP_RESET:// We listen to them on the target DOM elements.
// Some of them bubble so we don't want them to fire twice.
break;default:// By default, listen on the top level to all non-media events.
// Media events don't bubble so adding the listener wouldn't do anything.
var isMediaEvent=mediaEventTypes.indexOf(dependency)!==-1;if(!isMediaEvent){trapBubbledEvent(dependency,mountAt);}break;}isListening[dependency]=true;}}}function isListeningToAllDependencies(registrationName,mountAt){var isListening=getListeningForDocument(mountAt);var dependencies=registrationNameDependencies[registrationName];for(var i=0;i<dependencies.length;i++){var dependency=dependencies[i];if(!(isListening.hasOwnProperty(dependency)&&isListening[dependency])){return false;}}return true;}function getActiveElement(doc){doc=doc||(typeof document!=='undefined'?document:undefined);if(typeof doc==='undefined'){return null;}try{return doc.activeElement||doc.body;}catch(e){return doc.body;}}/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */function getLeafNode(node){while(node&&node.firstChild){node=node.firstChild;}return node;}/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */function getSiblingNode(node){while(node){if(node.nextSibling){return node.nextSibling;}node=node.parentNode;}}/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */function getNodeForCharacterOffset(root,offset){var node=getLeafNode(root);var nodeStart=0;var nodeEnd=0;while(node){if(node.nodeType===TEXT_NODE){nodeEnd=nodeStart+node.textContent.length;if(nodeStart<=offset&&nodeEnd>=offset){return{node:node,offset:offset-nodeStart};}nodeStart=nodeEnd;}node=getLeafNode(getSiblingNode(node));}}/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */function getOffsets(outerNode){var ownerDocument=outerNode.ownerDocument;var win=ownerDocument&&ownerDocument.defaultView||window;var selection=win.getSelection&&win.getSelection();if(!selection||selection.rangeCount===0){return null;}var anchorNode=selection.anchorNode,anchorOffset=selection.anchorOffset,focusNode=selection.focusNode,focusOffset=selection.focusOffset;// In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
// up/down buttons on an <input type="number">. Anonymous divs do not seem to
// expose properties, triggering a "Permission denied error" if any of its
// properties are accessed. The only seemingly possible way to avoid erroring
// is to access a property that typically works for non-anonymous divs and
// catch any error that may otherwise arise. See
// https://bugzilla.mozilla.org/show_bug.cgi?id=208427
try{/* eslint-disable no-unused-expressions */anchorNode.nodeType;focusNode.nodeType;/* eslint-enable no-unused-expressions */}catch(e){return null;}return getModernOffsetsFromPoints(outerNode,anchorNode,anchorOffset,focusNode,focusOffset);}/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */function getModernOffsetsFromPoints(outerNode,anchorNode,anchorOffset,focusNode,focusOffset){var length=0;var start=-1;var end=-1;var indexWithinAnchor=0;var indexWithinFocus=0;var node=outerNode;var parentNode=null;outer:while(true){var next=null;while(true){if(node===anchorNode&&(anchorOffset===0||node.nodeType===TEXT_NODE)){start=length+anchorOffset;}if(node===focusNode&&(focusOffset===0||node.nodeType===TEXT_NODE)){end=length+focusOffset;}if(node.nodeType===TEXT_NODE){length+=node.nodeValue.length;}if((next=node.firstChild)===null){break;}// Moving from `node` to its first child `next`.
parentNode=node;node=next;}while(true){if(node===outerNode){// If `outerNode` has children, this is always the second time visiting
// it. If it has no children, this is still the first loop, and the only
// valid selection is anchorNode and focusNode both equal to this node
// and both offsets 0, in which case we will have handled above.
break outer;}if(parentNode===anchorNode&&++indexWithinAnchor===anchorOffset){start=length;}if(parentNode===focusNode&&++indexWithinFocus===focusOffset){end=length;}if((next=node.nextSibling)!==null){break;}node=parentNode;parentNode=node.parentNode;}// Moving from `node` to its next sibling `next`.
node=next;}if(start===-1||end===-1){// This should never happen. (Would happen if the anchor/focus nodes aren't
// actually inside the passed-in node.)
return null;}return{start:start,end:end};}/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */function setOffsets(node,offsets){var doc=node.ownerDocument||document;var win=doc&&doc.defaultView||window;var selection=win.getSelection();var length=node.textContent.length;var start=Math.min(offsets.start,length);var end=offsets.end===undefined?start:Math.min(offsets.end,length);// IE 11 uses modern selection, but doesn't support the extend method.
// Flip backward selections, so we can set with a single range.
if(!selection.extend&&start>end){var temp=end;end=start;start=temp;}var startMarker=getNodeForCharacterOffset(node,start);var endMarker=getNodeForCharacterOffset(node,end);if(startMarker&&endMarker){if(selection.rangeCount===1&&selection.anchorNode===startMarker.node&&selection.anchorOffset===startMarker.offset&&selection.focusNode===endMarker.node&&selection.focusOffset===endMarker.offset){return;}var range=doc.createRange();range.setStart(startMarker.node,startMarker.offset);selection.removeAllRanges();if(start>end){selection.addRange(range);selection.extend(endMarker.node,endMarker.offset);}else{range.setEnd(endMarker.node,endMarker.offset);selection.addRange(range);}}}function isTextNode(node){return node&&node.nodeType===TEXT_NODE;}function containsNode(outerNode,innerNode){if(!outerNode||!innerNode){return false;}else if(outerNode===innerNode){return true;}else if(isTextNode(outerNode)){return false;}else if(isTextNode(innerNode)){return containsNode(outerNode,innerNode.parentNode);}else if('contains'in outerNode){return outerNode.contains(innerNode);}else if(outerNode.compareDocumentPosition){return!!(outerNode.compareDocumentPosition(innerNode)&16);}else{return false;}}function isInDocument(node){return node&&node.ownerDocument&&containsNode(node.ownerDocument.documentElement,node);}function getActiveElementDeep(){var win=window;var element=getActiveElement();while(element instanceof win.HTMLIFrameElement){// Accessing the contentDocument of a HTMLIframeElement can cause the browser
// to throw, e.g. if it has a cross-origin src attribute
try{win=element.contentDocument.defaultView;}catch(e){return element;}element=getActiveElement(win.document);}return element;}/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */function hasSelectionCapabilities(elem){var nodeName=elem&&elem.nodeName&&elem.nodeName.toLowerCase();return nodeName&&(nodeName==='input'&&(elem.type==='text'||elem.type==='search'||elem.type==='tel'||elem.type==='url'||elem.type==='password')||nodeName==='textarea'||elem.contentEditable==='true');}function getSelectionInformation(){var focusedElem=getActiveElementDeep();return{focusedElem:focusedElem,selectionRange:hasSelectionCapabilities(focusedElem)?getSelection$1(focusedElem):null};}/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */function restoreSelection(priorSelectionInformation){var curFocusedElem=getActiveElementDeep();var priorFocusedElem=priorSelectionInformation.focusedElem;var priorSelectionRange=priorSelectionInformation.selectionRange;if(curFocusedElem!==priorFocusedElem&&isInDocument(priorFocusedElem)){if(priorSelectionRange!==null&&hasSelectionCapabilities(priorFocusedElem)){setSelection(priorFocusedElem,priorSelectionRange);}// Focusing a node can change the scroll position, which is undesirable
var ancestors=[];var ancestor=priorFocusedElem;while(ancestor=ancestor.parentNode){if(ancestor.nodeType===ELEMENT_NODE){ancestors.push({element:ancestor,left:ancestor.scrollLeft,top:ancestor.scrollTop});}}if(typeof priorFocusedElem.focus==='function'){priorFocusedElem.focus();}for(var i=0;i<ancestors.length;i++){var info=ancestors[i];info.element.scrollLeft=info.left;info.element.scrollTop=info.top;}}}/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */function getSelection$1(input){var selection=void 0;if('selectionStart'in input){// Modern browser with input or textarea.
selection={start:input.selectionStart,end:input.selectionEnd};}else{// Content editable or old IE textarea.
selection=getOffsets(input);}return selection||{start:0,end:0};}/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */function setSelection(input,offsets){var start=offsets.start,end=offsets.end;if(end===undefined){end=start;}if('selectionStart'in input){input.selectionStart=start;input.selectionEnd=Math.min(end,input.value.length);}else{setOffsets(input,offsets);}}var skipSelectionChangeEvent=canUseDOM&&'documentMode'in document&&document.documentMode<=11;var eventTypes$3={select:{phasedRegistrationNames:{bubbled:'onSelect',captured:'onSelectCapture'},dependencies:[TOP_BLUR,TOP_CONTEXT_MENU,TOP_DRAG_END,TOP_FOCUS,TOP_KEY_DOWN,TOP_KEY_UP,TOP_MOUSE_DOWN,TOP_MOUSE_UP,TOP_SELECTION_CHANGE]}};var activeElement$1=null;var activeElementInst$1=null;var lastSelection=null;var mouseDown=false;/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */function getSelection(node){if('selectionStart'in node&&hasSelectionCapabilities(node)){return{start:node.selectionStart,end:node.selectionEnd};}else{var win=node.ownerDocument&&node.ownerDocument.defaultView||window;var selection=win.getSelection();return{anchorNode:selection.anchorNode,anchorOffset:selection.anchorOffset,focusNode:selection.focusNode,focusOffset:selection.focusOffset};}}/**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */function getEventTargetDocument(eventTarget){return eventTarget.window===eventTarget?eventTarget.document:eventTarget.nodeType===DOCUMENT_NODE?eventTarget:eventTarget.ownerDocument;}/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */function constructSelectEvent(nativeEvent,nativeEventTarget){// Ensure we have the right element, and that the user is not dragging a
// selection (this matches native `select` event behavior). In HTML5, select
// fires only on input and textarea thus if there's no focused element we
// won't dispatch.
var doc=getEventTargetDocument(nativeEventTarget);if(mouseDown||activeElement$1==null||activeElement$1!==getActiveElement(doc)){return null;}// Only fire when selection has actually changed.
var currentSelection=getSelection(activeElement$1);if(!lastSelection||!shallowEqual(lastSelection,currentSelection)){lastSelection=currentSelection;var syntheticEvent=SyntheticEvent.getPooled(eventTypes$3.select,activeElementInst$1,nativeEvent,nativeEventTarget);syntheticEvent.type='select';syntheticEvent.target=activeElement$1;accumulateTwoPhaseDispatches(syntheticEvent);return syntheticEvent;}return null;}/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */var SelectEventPlugin={eventTypes:eventTypes$3,extractEvents:function(topLevelType,targetInst,nativeEvent,nativeEventTarget){var doc=getEventTargetDocument(nativeEventTarget);// Track whether all listeners exists for this plugin. If none exist, we do
// not extract events. See #3639.
if(!doc||!isListeningToAllDependencies('onSelect',doc)){return null;}var targetNode=targetInst?getNodeFromInstance$1(targetInst):window;switch(topLevelType){// Track the input node that has focus.
case TOP_FOCUS:if(isTextInputElement(targetNode)||targetNode.contentEditable==='true'){activeElement$1=targetNode;activeElementInst$1=targetInst;lastSelection=null;}break;case TOP_BLUR:activeElement$1=null;activeElementInst$1=null;lastSelection=null;break;// Don't fire the event while the user is dragging. This matches the
// semantics of the native select event.
case TOP_MOUSE_DOWN:mouseDown=true;break;case TOP_CONTEXT_MENU:case TOP_MOUSE_UP:case TOP_DRAG_END:mouseDown=false;return constructSelectEvent(nativeEvent,nativeEventTarget);// Chrome and IE fire non-standard event when selection is changed (and
// sometimes when it hasn't). IE's event fires out of order with respect
// to key and input events on deletion, so we discard it.
//
// Firefox doesn't support selectionchange, so check selection status
// after each key entry. The selection changes after keydown and before
// keyup, but we check on keydown as well in the case of holding down a
// key, when multiple keydown events are fired but only one keyup is.
// This is also our approach for IE handling, for the reason above.
case TOP_SELECTION_CHANGE:if(skipSelectionChangeEvent){break;}// falls through
case TOP_KEY_DOWN:case TOP_KEY_UP:return constructSelectEvent(nativeEvent,nativeEventTarget);}return null;}};/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */injection.injectEventPluginOrder(DOMEventPluginOrder);setComponentTree(getFiberCurrentPropsFromNode$1,getInstanceFromNode$1,getNodeFromInstance$1);/**
 * Some important event plugins included by default (without having to require
 * them).
 */injection.injectEventPluginsByName({SimpleEventPlugin:SimpleEventPlugin,EnterLeaveEventPlugin:EnterLeaveEventPlugin,ChangeEventPlugin:ChangeEventPlugin,SelectEventPlugin:SelectEventPlugin,BeforeInputEventPlugin:BeforeInputEventPlugin});var didWarnSelectedSetOnOption=false;var didWarnInvalidChild=false;function flattenChildren(children){var content='';// Flatten children. We'll warn if they are invalid
// during validateProps() which runs for hydration too.
// Note that this would throw on non-element objects.
// Elements are stringified (which is normally irrelevant
// but matters for <fbt>).
React.Children.forEach(children,function(child){if(child==null){return;}content+=child;// Note: we don't warn about invalid children here.
// Instead, this is done separately below so that
// it happens during the hydration codepath too.
});return content;}/**
 * Implements an <option> host component that warns when `selected` is set.
 */function validateProps(element,props){{// This mirrors the codepath above, but runs for hydration too.
// Warn about invalid children here so that client and hydration are consistent.
// TODO: this seems like it could cause a DEV-only throw for hydration
// if children contains a non-element object. We should try to avoid that.
if(typeof props.children==='object'&&props.children!==null){React.Children.forEach(props.children,function(child){if(child==null){return;}if(typeof child==='string'||typeof child==='number'){return;}if(typeof child.type!=='string'){return;}if(!didWarnInvalidChild){didWarnInvalidChild=true;warning$1(false,'Only strings and numbers are supported as <option> children.');}});}// TODO: Remove support for `selected` in <option>.
if(props.selected!=null&&!didWarnSelectedSetOnOption){warning$1(false,'Use the `defaultValue` or `value` props on <select> instead of '+'setting `selected` on <option>.');didWarnSelectedSetOnOption=true;}}}function postMountWrapper$1(element,props){// value="" should make a value attribute (#6219)
if(props.value!=null){element.setAttribute('value',toString(getToStringValue(props.value)));}}function getHostProps$1(element,props){var hostProps=_assign({children:undefined},props);var content=flattenChildren(props.children);if(content){hostProps.children=content;}return hostProps;}// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnValueDefaultValue$1=void 0;{didWarnValueDefaultValue$1=false;}function getDeclarationErrorAddendum(){var ownerName=getCurrentFiberOwnerNameInDevOrNull();if(ownerName){return'\n\nCheck the render method of `'+ownerName+'`.';}return'';}var valuePropNames=['value','defaultValue'];/**
 * Validation function for `value` and `defaultValue`.
 */function checkSelectPropTypes(props){ReactControlledValuePropTypes.checkPropTypes('select',props);for(var i=0;i<valuePropNames.length;i++){var propName=valuePropNames[i];if(props[propName]==null){continue;}var isArray=Array.isArray(props[propName]);if(props.multiple&&!isArray){warning$1(false,'The `%s` prop supplied to <select> must be an array if '+'`multiple` is true.%s',propName,getDeclarationErrorAddendum());}else if(!props.multiple&&isArray){warning$1(false,'The `%s` prop supplied to <select> must be a scalar '+'value if `multiple` is false.%s',propName,getDeclarationErrorAddendum());}}}function updateOptions(node,multiple,propValue,setDefaultSelected){var options=node.options;if(multiple){var selectedValues=propValue;var selectedValue={};for(var i=0;i<selectedValues.length;i++){// Prefix to avoid chaos with special keys.
selectedValue['$'+selectedValues[i]]=true;}for(var _i=0;_i<options.length;_i++){var selected=selectedValue.hasOwnProperty('$'+options[_i].value);if(options[_i].selected!==selected){options[_i].selected=selected;}if(selected&&setDefaultSelected){options[_i].defaultSelected=true;}}}else{// Do not set `select.value` as exact behavior isn't consistent across all
// browsers for all cases.
var _selectedValue=toString(getToStringValue(propValue));var defaultSelected=null;for(var _i2=0;_i2<options.length;_i2++){if(options[_i2].value===_selectedValue){options[_i2].selected=true;if(setDefaultSelected){options[_i2].defaultSelected=true;}return;}if(defaultSelected===null&&!options[_i2].disabled){defaultSelected=options[_i2];}}if(defaultSelected!==null){defaultSelected.selected=true;}}}/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */function getHostProps$2(element,props){return _assign({},props,{value:undefined});}function initWrapperState$1(element,props){var node=element;{checkSelectPropTypes(props);}node._wrapperState={wasMultiple:!!props.multiple};{if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValueDefaultValue$1){warning$1(false,'Select elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled select '+'element and remove one of these props. More info: '+'https://fb.me/react-controlled-components');didWarnValueDefaultValue$1=true;}}}function postMountWrapper$2(element,props){var node=element;node.multiple=!!props.multiple;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}else if(props.defaultValue!=null){updateOptions(node,!!props.multiple,props.defaultValue,true);}}function postUpdateWrapper(element,props){var node=element;var wasMultiple=node._wrapperState.wasMultiple;node._wrapperState.wasMultiple=!!props.multiple;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}else if(wasMultiple!==!!props.multiple){// For simplicity, reapply `defaultValue` if `multiple` is toggled.
if(props.defaultValue!=null){updateOptions(node,!!props.multiple,props.defaultValue,true);}else{// Revert the select back to its default unselected state.
updateOptions(node,!!props.multiple,props.multiple?[]:'',false);}}}function restoreControlledState$2(element,props){var node=element;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}}var didWarnValDefaultVal=false;/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */function getHostProps$3(element,props){var node=element;!(props.dangerouslySetInnerHTML==null)?invariant(false,'`dangerouslySetInnerHTML` does not make sense on <textarea>.'):void 0;// Always set children to the same thing. In IE9, the selection range will
// get reset if `textContent` is mutated.  We could add a check in setTextContent
// to only set the value if/when the value differs from the node value (which would
// completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
// solution. The value can be a boolean or object so that's why it's forced
// to be a string.
var hostProps=_assign({},props,{value:undefined,defaultValue:undefined,children:toString(node._wrapperState.initialValue)});return hostProps;}function initWrapperState$2(element,props){var node=element;{ReactControlledValuePropTypes.checkPropTypes('textarea',props);if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValDefaultVal){warning$1(false,'%s contains a textarea with both value and defaultValue props. '+'Textarea elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled textarea '+'and remove one of these props. More info: '+'https://fb.me/react-controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component');didWarnValDefaultVal=true;}}var initialValue=props.value;// Only bother fetching default value if we're going to use it
if(initialValue==null){var defaultValue=props.defaultValue;// TODO (yungsters): Remove support for children content in <textarea>.
var children=props.children;if(children!=null){{warning$1(false,'Use the `defaultValue` or `value` props instead of setting '+'children on <textarea>.');}!(defaultValue==null)?invariant(false,'If you supply `defaultValue` on a <textarea>, do not pass children.'):void 0;if(Array.isArray(children)){!(children.length<=1)?invariant(false,'<textarea> can only have at most one child.'):void 0;children=children[0];}defaultValue=children;}if(defaultValue==null){defaultValue='';}initialValue=defaultValue;}node._wrapperState={initialValue:getToStringValue(initialValue)};}function updateWrapper$1(element,props){var node=element;var value=getToStringValue(props.value);var defaultValue=getToStringValue(props.defaultValue);if(value!=null){// Cast `value` to a string to ensure the value is set correctly. While
// browsers typically do this as necessary, jsdom doesn't.
var newValue=toString(value);// To avoid side effects (such as losing text selection), only set value if changed
if(newValue!==node.value){node.value=newValue;}if(props.defaultValue==null&&node.defaultValue!==newValue){node.defaultValue=newValue;}}if(defaultValue!=null){node.defaultValue=toString(defaultValue);}}function postMountWrapper$3(element,props){var node=element;// This is in postMount because we need access to the DOM node, which is not
// available until after the component has mounted.
var textContent=node.textContent;// Only set node.value if textContent is equal to the expected
// initial value. In IE10/IE11 there is a bug where the placeholder attribute
// will populate textContent as well.
// https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
if(textContent===node._wrapperState.initialValue){node.value=textContent;}}function restoreControlledState$3(element,props){// DOM component is still mounted; update
updateWrapper$1(element,props);}var HTML_NAMESPACE$1='http://www.w3.org/1999/xhtml';var MATH_NAMESPACE='http://www.w3.org/1998/Math/MathML';var SVG_NAMESPACE='http://www.w3.org/2000/svg';var Namespaces={html:HTML_NAMESPACE$1,mathml:MATH_NAMESPACE,svg:SVG_NAMESPACE};// Assumes there is no parent namespace.
function getIntrinsicNamespace(type){switch(type){case'svg':return SVG_NAMESPACE;case'math':return MATH_NAMESPACE;default:return HTML_NAMESPACE$1;}}function getChildNamespace(parentNamespace,type){if(parentNamespace==null||parentNamespace===HTML_NAMESPACE$1){// No (or default) parent namespace: potential entry point.
return getIntrinsicNamespace(type);}if(parentNamespace===SVG_NAMESPACE&&type==='foreignObject'){// We're leaving SVG.
return HTML_NAMESPACE$1;}// By default, pass namespace below.
return parentNamespace;}/* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */var createMicrosoftUnsafeLocalFunction=function(func){if(typeof MSApp!=='undefined'&&MSApp.execUnsafeLocalFunction){return function(arg0,arg1,arg2,arg3){MSApp.execUnsafeLocalFunction(function(){return func(arg0,arg1,arg2,arg3);});};}else{return func;}};// SVG temp container for IE lacking innerHTML
var reusableSVGContainer=void 0;/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */var setInnerHTML=createMicrosoftUnsafeLocalFunction(function(node,html){// IE does not have innerHTML for SVG nodes, so instead we inject the
// new markup in a temp node and then move the child nodes across into
// the target node
if(node.namespaceURI===Namespaces.svg&&!('innerHTML'in node)){reusableSVGContainer=reusableSVGContainer||document.createElement('div');reusableSVGContainer.innerHTML='<svg>'+html+'</svg>';var svgNode=reusableSVGContainer.firstChild;while(node.firstChild){node.removeChild(node.firstChild);}while(svgNode.firstChild){node.appendChild(svgNode.firstChild);}}else{node.innerHTML=html;}});/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */var setTextContent=function(node,text){if(text){var firstChild=node.firstChild;if(firstChild&&firstChild===node.lastChild&&firstChild.nodeType===TEXT_NODE){firstChild.nodeValue=text;return;}}node.textContent=text;};/**
 * CSS properties which accept numbers but are not in units of "px".
 */var isUnitlessNumber={animationIterationCount:true,borderImageOutset:true,borderImageSlice:true,borderImageWidth:true,boxFlex:true,boxFlexGroup:true,boxOrdinalGroup:true,columnCount:true,columns:true,flex:true,flexGrow:true,flexPositive:true,flexShrink:true,flexNegative:true,flexOrder:true,gridArea:true,gridRow:true,gridRowEnd:true,gridRowSpan:true,gridRowStart:true,gridColumn:true,gridColumnEnd:true,gridColumnSpan:true,gridColumnStart:true,fontWeight:true,lineClamp:true,lineHeight:true,opacity:true,order:true,orphans:true,tabSize:true,widows:true,zIndex:true,zoom:true,// SVG-related properties
fillOpacity:true,floodOpacity:true,stopOpacity:true,strokeDasharray:true,strokeDashoffset:true,strokeMiterlimit:true,strokeOpacity:true,strokeWidth:true};/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */function prefixKey(prefix,key){return prefix+key.charAt(0).toUpperCase()+key.substring(1);}/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */var prefixes=['Webkit','ms','Moz','O'];// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop){prefixes.forEach(function(prefix){isUnitlessNumber[prefixKey(prefix,prop)]=isUnitlessNumber[prop];});});/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */function dangerousStyleValue(name,value,isCustomProperty){// Note that we've removed escapeTextForBrowser() calls here since the
// whole string will be escaped when the attribute is injected into
// the markup. If you provide unsafe user data here they can inject
// arbitrary CSS which may be problematic (I couldn't repro this):
// https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
// http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
// This is not an XSS hole but instead a potential CSS injection issue
// which has lead to a greater discussion about how we're going to
// trust URLs moving forward. See #2115901
var isEmpty=value==null||typeof value==='boolean'||value==='';if(isEmpty){return'';}if(!isCustomProperty&&typeof value==='number'&&value!==0&&!(isUnitlessNumber.hasOwnProperty(name)&&isUnitlessNumber[name])){return value+'px';// Presumes implicit 'px' suffix for unitless numbers
}return(''+value).trim();}var uppercasePattern=/([A-Z])/g;var msPattern=/^ms-/;/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */function hyphenateStyleName(name){return name.replace(uppercasePattern,'-$1').toLowerCase().replace(msPattern,'-ms-');}var warnValidStyle=function(){};{// 'msTransform' is correct, but the other prefixes should be capitalized
var badVendoredStyleNamePattern=/^(?:webkit|moz|o)[A-Z]/;var msPattern$1=/^-ms-/;var hyphenPattern=/-(.)/g;// style values shouldn't contain a semicolon
var badStyleValueWithSemicolonPattern=/;\s*$/;var warnedStyleNames={};var warnedStyleValues={};var warnedForNaNValue=false;var warnedForInfinityValue=false;var camelize=function(string){return string.replace(hyphenPattern,function(_,character){return character.toUpperCase();});};var warnHyphenatedStyleName=function(name){if(warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]){return;}warnedStyleNames[name]=true;warning$1(false,'Unsupported style property %s. Did you mean %s?',name,// As Andi Smith suggests
// (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
// is converted to lowercase `ms`.
camelize(name.replace(msPattern$1,'ms-')));};var warnBadVendoredStyleName=function(name){if(warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]){return;}warnedStyleNames[name]=true;warning$1(false,'Unsupported vendor-prefixed style property %s. Did you mean %s?',name,name.charAt(0).toUpperCase()+name.slice(1));};var warnStyleValueWithSemicolon=function(name,value){if(warnedStyleValues.hasOwnProperty(value)&&warnedStyleValues[value]){return;}warnedStyleValues[value]=true;warning$1(false,"Style property values shouldn't contain a semicolon. "+'Try "%s: %s" instead.',name,value.replace(badStyleValueWithSemicolonPattern,''));};var warnStyleValueIsNaN=function(name,value){if(warnedForNaNValue){return;}warnedForNaNValue=true;warning$1(false,'`NaN` is an invalid value for the `%s` css style property.',name);};var warnStyleValueIsInfinity=function(name,value){if(warnedForInfinityValue){return;}warnedForInfinityValue=true;warning$1(false,'`Infinity` is an invalid value for the `%s` css style property.',name);};warnValidStyle=function(name,value){if(name.indexOf('-')>-1){warnHyphenatedStyleName(name);}else if(badVendoredStyleNamePattern.test(name)){warnBadVendoredStyleName(name);}else if(badStyleValueWithSemicolonPattern.test(value)){warnStyleValueWithSemicolon(name,value);}if(typeof value==='number'){if(isNaN(value)){warnStyleValueIsNaN(name,value);}else if(!isFinite(value)){warnStyleValueIsInfinity(name,value);}}};}var warnValidStyle$1=warnValidStyle;/**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */function createDangerousStringForStyles(styles){{var serialized='';var delimiter='';for(var styleName in styles){if(!styles.hasOwnProperty(styleName)){continue;}var styleValue=styles[styleName];if(styleValue!=null){var isCustomProperty=styleName.indexOf('--')===0;serialized+=delimiter+hyphenateStyleName(styleName)+':';serialized+=dangerousStyleValue(styleName,styleValue,isCustomProperty);delimiter=';';}}return serialized||null;}}/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */function setValueForStyles(node,styles){var style=node.style;for(var styleName in styles){if(!styles.hasOwnProperty(styleName)){continue;}var isCustomProperty=styleName.indexOf('--')===0;{if(!isCustomProperty){warnValidStyle$1(styleName,styles[styleName]);}}var styleValue=dangerousStyleValue(styleName,styles[styleName],isCustomProperty);if(styleName==='float'){styleName='cssFloat';}if(isCustomProperty){style.setProperty(styleName,styleValue);}else{style[styleName]=styleValue;}}}// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.
var omittedCloseTags={area:true,base:true,br:true,col:true,embed:true,hr:true,img:true,input:true,keygen:true,link:true,meta:true,param:true,source:true,track:true,wbr:true// NOTE: menuitem's close tag should be omitted, but that causes problems.
};// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.
var voidElementTags=_assign({menuitem:true},omittedCloseTags);// TODO: We can remove this if we add invariantWithStack()
// or add stack by default to invariants where possible.
var HTML$1='__html';var ReactDebugCurrentFrame$2=null;{ReactDebugCurrentFrame$2=ReactSharedInternals.ReactDebugCurrentFrame;}function assertValidProps(tag,props){if(!props){return;}// Note the use of `==` which checks for null or undefined.
if(voidElementTags[tag]){!(props.children==null&&props.dangerouslySetInnerHTML==null)?invariant(false,'%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s',tag,ReactDebugCurrentFrame$2.getStackAddendum()):void 0;}if(props.dangerouslySetInnerHTML!=null){!(props.children==null)?invariant(false,'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'):void 0;!(typeof props.dangerouslySetInnerHTML==='object'&&HTML$1 in props.dangerouslySetInnerHTML)?invariant(false,'`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.'):void 0;}{!(props.suppressContentEditableWarning||!props.contentEditable||props.children==null)?warning$1(false,'A component is `contentEditable` and contains `children` managed by '+'React. It is now your responsibility to guarantee that none of '+'those nodes are unexpectedly modified or duplicated. This is '+'probably not intentional.'):void 0;}!(props.style==null||typeof props.style==='object')?invariant(false,'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s',ReactDebugCurrentFrame$2.getStackAddendum()):void 0;}function isCustomComponent(tagName,props){if(tagName.indexOf('-')===-1){return typeof props.is==='string';}switch(tagName){// These are reserved SVG and MathML elements.
// We don't mind this whitelist too much because we expect it to never grow.
// The alternative is to track the namespace in a few places which is convoluted.
// https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
case'annotation-xml':case'color-profile':case'font-face':case'font-face-src':case'font-face-uri':case'font-face-format':case'font-face-name':case'missing-glyph':return false;default:return true;}}// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames={// HTML
accept:'accept',acceptcharset:'acceptCharset','accept-charset':'acceptCharset',accesskey:'accessKey',action:'action',allowfullscreen:'allowFullScreen',alt:'alt',as:'as',async:'async',autocapitalize:'autoCapitalize',autocomplete:'autoComplete',autocorrect:'autoCorrect',autofocus:'autoFocus',autoplay:'autoPlay',autosave:'autoSave',capture:'capture',cellpadding:'cellPadding',cellspacing:'cellSpacing',challenge:'challenge',charset:'charSet',checked:'checked',children:'children',cite:'cite',class:'className',classid:'classID',classname:'className',cols:'cols',colspan:'colSpan',content:'content',contenteditable:'contentEditable',contextmenu:'contextMenu',controls:'controls',controlslist:'controlsList',coords:'coords',crossorigin:'crossOrigin',dangerouslysetinnerhtml:'dangerouslySetInnerHTML',data:'data',datetime:'dateTime',default:'default',defaultchecked:'defaultChecked',defaultvalue:'defaultValue',defer:'defer',dir:'dir',disabled:'disabled',download:'download',draggable:'draggable',enctype:'encType',for:'htmlFor',form:'form',formmethod:'formMethod',formaction:'formAction',formenctype:'formEncType',formnovalidate:'formNoValidate',formtarget:'formTarget',frameborder:'frameBorder',headers:'headers',height:'height',hidden:'hidden',high:'high',href:'href',hreflang:'hrefLang',htmlfor:'htmlFor',httpequiv:'httpEquiv','http-equiv':'httpEquiv',icon:'icon',id:'id',innerhtml:'innerHTML',inputmode:'inputMode',integrity:'integrity',is:'is',itemid:'itemID',itemprop:'itemProp',itemref:'itemRef',itemscope:'itemScope',itemtype:'itemType',keyparams:'keyParams',keytype:'keyType',kind:'kind',label:'label',lang:'lang',list:'list',loop:'loop',low:'low',manifest:'manifest',marginwidth:'marginWidth',marginheight:'marginHeight',max:'max',maxlength:'maxLength',media:'media',mediagroup:'mediaGroup',method:'method',min:'min',minlength:'minLength',multiple:'multiple',muted:'muted',name:'name',nomodule:'noModule',nonce:'nonce',novalidate:'noValidate',open:'open',optimum:'optimum',pattern:'pattern',placeholder:'placeholder',playsinline:'playsInline',poster:'poster',preload:'preload',profile:'profile',radiogroup:'radioGroup',readonly:'readOnly',referrerpolicy:'referrerPolicy',rel:'rel',required:'required',reversed:'reversed',role:'role',rows:'rows',rowspan:'rowSpan',sandbox:'sandbox',scope:'scope',scoped:'scoped',scrolling:'scrolling',seamless:'seamless',selected:'selected',shape:'shape',size:'size',sizes:'sizes',span:'span',spellcheck:'spellCheck',src:'src',srcdoc:'srcDoc',srclang:'srcLang',srcset:'srcSet',start:'start',step:'step',style:'style',summary:'summary',tabindex:'tabIndex',target:'target',title:'title',type:'type',usemap:'useMap',value:'value',width:'width',wmode:'wmode',wrap:'wrap',// SVG
about:'about',accentheight:'accentHeight','accent-height':'accentHeight',accumulate:'accumulate',additive:'additive',alignmentbaseline:'alignmentBaseline','alignment-baseline':'alignmentBaseline',allowreorder:'allowReorder',alphabetic:'alphabetic',amplitude:'amplitude',arabicform:'arabicForm','arabic-form':'arabicForm',ascent:'ascent',attributename:'attributeName',attributetype:'attributeType',autoreverse:'autoReverse',azimuth:'azimuth',basefrequency:'baseFrequency',baselineshift:'baselineShift','baseline-shift':'baselineShift',baseprofile:'baseProfile',bbox:'bbox',begin:'begin',bias:'bias',by:'by',calcmode:'calcMode',capheight:'capHeight','cap-height':'capHeight',clip:'clip',clippath:'clipPath','clip-path':'clipPath',clippathunits:'clipPathUnits',cliprule:'clipRule','clip-rule':'clipRule',color:'color',colorinterpolation:'colorInterpolation','color-interpolation':'colorInterpolation',colorinterpolationfilters:'colorInterpolationFilters','color-interpolation-filters':'colorInterpolationFilters',colorprofile:'colorProfile','color-profile':'colorProfile',colorrendering:'colorRendering','color-rendering':'colorRendering',contentscripttype:'contentScriptType',contentstyletype:'contentStyleType',cursor:'cursor',cx:'cx',cy:'cy',d:'d',datatype:'datatype',decelerate:'decelerate',descent:'descent',diffuseconstant:'diffuseConstant',direction:'direction',display:'display',divisor:'divisor',dominantbaseline:'dominantBaseline','dominant-baseline':'dominantBaseline',dur:'dur',dx:'dx',dy:'dy',edgemode:'edgeMode',elevation:'elevation',enablebackground:'enableBackground','enable-background':'enableBackground',end:'end',exponent:'exponent',externalresourcesrequired:'externalResourcesRequired',fill:'fill',fillopacity:'fillOpacity','fill-opacity':'fillOpacity',fillrule:'fillRule','fill-rule':'fillRule',filter:'filter',filterres:'filterRes',filterunits:'filterUnits',floodopacity:'floodOpacity','flood-opacity':'floodOpacity',floodcolor:'floodColor','flood-color':'floodColor',focusable:'focusable',fontfamily:'fontFamily','font-family':'fontFamily',fontsize:'fontSize','font-size':'fontSize',fontsizeadjust:'fontSizeAdjust','font-size-adjust':'fontSizeAdjust',fontstretch:'fontStretch','font-stretch':'fontStretch',fontstyle:'fontStyle','font-style':'fontStyle',fontvariant:'fontVariant','font-variant':'fontVariant',fontweight:'fontWeight','font-weight':'fontWeight',format:'format',from:'from',fx:'fx',fy:'fy',g1:'g1',g2:'g2',glyphname:'glyphName','glyph-name':'glyphName',glyphorientationhorizontal:'glyphOrientationHorizontal','glyph-orientation-horizontal':'glyphOrientationHorizontal',glyphorientationvertical:'glyphOrientationVertical','glyph-orientation-vertical':'glyphOrientationVertical',glyphref:'glyphRef',gradienttransform:'gradientTransform',gradientunits:'gradientUnits',hanging:'hanging',horizadvx:'horizAdvX','horiz-adv-x':'horizAdvX',horizoriginx:'horizOriginX','horiz-origin-x':'horizOriginX',ideographic:'ideographic',imagerendering:'imageRendering','image-rendering':'imageRendering',in2:'in2',in:'in',inlist:'inlist',intercept:'intercept',k1:'k1',k2:'k2',k3:'k3',k4:'k4',k:'k',kernelmatrix:'kernelMatrix',kernelunitlength:'kernelUnitLength',kerning:'kerning',keypoints:'keyPoints',keysplines:'keySplines',keytimes:'keyTimes',lengthadjust:'lengthAdjust',letterspacing:'letterSpacing','letter-spacing':'letterSpacing',lightingcolor:'lightingColor','lighting-color':'lightingColor',limitingconeangle:'limitingConeAngle',local:'local',markerend:'markerEnd','marker-end':'markerEnd',markerheight:'markerHeight',markermid:'markerMid','marker-mid':'markerMid',markerstart:'markerStart','marker-start':'markerStart',markerunits:'markerUnits',markerwidth:'markerWidth',mask:'mask',maskcontentunits:'maskContentUnits',maskunits:'maskUnits',mathematical:'mathematical',mode:'mode',numoctaves:'numOctaves',offset:'offset',opacity:'opacity',operator:'operator',order:'order',orient:'orient',orientation:'orientation',origin:'origin',overflow:'overflow',overlineposition:'overlinePosition','overline-position':'overlinePosition',overlinethickness:'overlineThickness','overline-thickness':'overlineThickness',paintorder:'paintOrder','paint-order':'paintOrder',panose1:'panose1','panose-1':'panose1',pathlength:'pathLength',patterncontentunits:'patternContentUnits',patterntransform:'patternTransform',patternunits:'patternUnits',pointerevents:'pointerEvents','pointer-events':'pointerEvents',points:'points',pointsatx:'pointsAtX',pointsaty:'pointsAtY',pointsatz:'pointsAtZ',prefix:'prefix',preservealpha:'preserveAlpha',preserveaspectratio:'preserveAspectRatio',primitiveunits:'primitiveUnits',property:'property',r:'r',radius:'radius',refx:'refX',refy:'refY',renderingintent:'renderingIntent','rendering-intent':'renderingIntent',repeatcount:'repeatCount',repeatdur:'repeatDur',requiredextensions:'requiredExtensions',requiredfeatures:'requiredFeatures',resource:'resource',restart:'restart',result:'result',results:'results',rotate:'rotate',rx:'rx',ry:'ry',scale:'scale',security:'security',seed:'seed',shaperendering:'shapeRendering','shape-rendering':'shapeRendering',slope:'slope',spacing:'spacing',specularconstant:'specularConstant',specularexponent:'specularExponent',speed:'speed',spreadmethod:'spreadMethod',startoffset:'startOffset',stddeviation:'stdDeviation',stemh:'stemh',stemv:'stemv',stitchtiles:'stitchTiles',stopcolor:'stopColor','stop-color':'stopColor',stopopacity:'stopOpacity','stop-opacity':'stopOpacity',strikethroughposition:'strikethroughPosition','strikethrough-position':'strikethroughPosition',strikethroughthickness:'strikethroughThickness','strikethrough-thickness':'strikethroughThickness',string:'string',stroke:'stroke',strokedasharray:'strokeDasharray','stroke-dasharray':'strokeDasharray',strokedashoffset:'strokeDashoffset','stroke-dashoffset':'strokeDashoffset',strokelinecap:'strokeLinecap','stroke-linecap':'strokeLinecap',strokelinejoin:'strokeLinejoin','stroke-linejoin':'strokeLinejoin',strokemiterlimit:'strokeMiterlimit','stroke-miterlimit':'strokeMiterlimit',strokewidth:'strokeWidth','stroke-width':'strokeWidth',strokeopacity:'strokeOpacity','stroke-opacity':'strokeOpacity',suppresscontenteditablewarning:'suppressContentEditableWarning',suppresshydrationwarning:'suppressHydrationWarning',surfacescale:'surfaceScale',systemlanguage:'systemLanguage',tablevalues:'tableValues',targetx:'targetX',targety:'targetY',textanchor:'textAnchor','text-anchor':'textAnchor',textdecoration:'textDecoration','text-decoration':'textDecoration',textlength:'textLength',textrendering:'textRendering','text-rendering':'textRendering',to:'to',transform:'transform',typeof:'typeof',u1:'u1',u2:'u2',underlineposition:'underlinePosition','underline-position':'underlinePosition',underlinethickness:'underlineThickness','underline-thickness':'underlineThickness',unicode:'unicode',unicodebidi:'unicodeBidi','unicode-bidi':'unicodeBidi',unicoderange:'unicodeRange','unicode-range':'unicodeRange',unitsperem:'unitsPerEm','units-per-em':'unitsPerEm',unselectable:'unselectable',valphabetic:'vAlphabetic','v-alphabetic':'vAlphabetic',values:'values',vectoreffect:'vectorEffect','vector-effect':'vectorEffect',version:'version',vertadvy:'vertAdvY','vert-adv-y':'vertAdvY',vertoriginx:'vertOriginX','vert-origin-x':'vertOriginX',vertoriginy:'vertOriginY','vert-origin-y':'vertOriginY',vhanging:'vHanging','v-hanging':'vHanging',videographic:'vIdeographic','v-ideographic':'vIdeographic',viewbox:'viewBox',viewtarget:'viewTarget',visibility:'visibility',vmathematical:'vMathematical','v-mathematical':'vMathematical',vocab:'vocab',widths:'widths',wordspacing:'wordSpacing','word-spacing':'wordSpacing',writingmode:'writingMode','writing-mode':'writingMode',x1:'x1',x2:'x2',x:'x',xchannelselector:'xChannelSelector',xheight:'xHeight','x-height':'xHeight',xlinkactuate:'xlinkActuate','xlink:actuate':'xlinkActuate',xlinkarcrole:'xlinkArcrole','xlink:arcrole':'xlinkArcrole',xlinkhref:'xlinkHref','xlink:href':'xlinkHref',xlinkrole:'xlinkRole','xlink:role':'xlinkRole',xlinkshow:'xlinkShow','xlink:show':'xlinkShow',xlinktitle:'xlinkTitle','xlink:title':'xlinkTitle',xlinktype:'xlinkType','xlink:type':'xlinkType',xmlbase:'xmlBase','xml:base':'xmlBase',xmllang:'xmlLang','xml:lang':'xmlLang',xmlns:'xmlns','xml:space':'xmlSpace',xmlnsxlink:'xmlnsXlink','xmlns:xlink':'xmlnsXlink',xmlspace:'xmlSpace',y1:'y1',y2:'y2',y:'y',ychannelselector:'yChannelSelector',z:'z',zoomandpan:'zoomAndPan'};var ariaProperties={'aria-current':0,// state
'aria-details':0,'aria-disabled':0,// state
'aria-hidden':0,// state
'aria-invalid':0,// state
'aria-keyshortcuts':0,'aria-label':0,'aria-roledescription':0,// Widget Attributes
'aria-autocomplete':0,'aria-checked':0,'aria-expanded':0,'aria-haspopup':0,'aria-level':0,'aria-modal':0,'aria-multiline':0,'aria-multiselectable':0,'aria-orientation':0,'aria-placeholder':0,'aria-pressed':0,'aria-readonly':0,'aria-required':0,'aria-selected':0,'aria-sort':0,'aria-valuemax':0,'aria-valuemin':0,'aria-valuenow':0,'aria-valuetext':0,// Live Region Attributes
'aria-atomic':0,'aria-busy':0,'aria-live':0,'aria-relevant':0,// Drag-and-Drop Attributes
'aria-dropeffect':0,'aria-grabbed':0,// Relationship Attributes
'aria-activedescendant':0,'aria-colcount':0,'aria-colindex':0,'aria-colspan':0,'aria-controls':0,'aria-describedby':0,'aria-errormessage':0,'aria-flowto':0,'aria-labelledby':0,'aria-owns':0,'aria-posinset':0,'aria-rowcount':0,'aria-rowindex':0,'aria-rowspan':0,'aria-setsize':0};var warnedProperties={};var rARIA=new RegExp('^(aria)-['+ATTRIBUTE_NAME_CHAR+']*$');var rARIACamel=new RegExp('^(aria)[A-Z]['+ATTRIBUTE_NAME_CHAR+']*$');var hasOwnProperty$2=Object.prototype.hasOwnProperty;function validateProperty(tagName,name){if(hasOwnProperty$2.call(warnedProperties,name)&&warnedProperties[name]){return true;}if(rARIACamel.test(name)){var ariaName='aria-'+name.slice(4).toLowerCase();var correctName=ariaProperties.hasOwnProperty(ariaName)?ariaName:null;// If this is an aria-* attribute, but is not listed in the known DOM
// DOM properties, then it is an invalid aria-* attribute.
if(correctName==null){warning$1(false,'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.',name);warnedProperties[name]=true;return true;}// aria-* attributes should be lowercase; suggest the lowercase version.
if(name!==correctName){warning$1(false,'Invalid ARIA attribute `%s`. Did you mean `%s`?',name,correctName);warnedProperties[name]=true;return true;}}if(rARIA.test(name)){var lowerCasedName=name.toLowerCase();var standardName=ariaProperties.hasOwnProperty(lowerCasedName)?lowerCasedName:null;// If this is an aria-* attribute, but is not listed in the known DOM
// DOM properties, then it is an invalid aria-* attribute.
if(standardName==null){warnedProperties[name]=true;return false;}// aria-* attributes should be lowercase; suggest the lowercase version.
if(name!==standardName){warning$1(false,'Unknown ARIA attribute `%s`. Did you mean `%s`?',name,standardName);warnedProperties[name]=true;return true;}}return true;}function warnInvalidARIAProps(type,props){var invalidProps=[];for(var key in props){var isValid=validateProperty(type,key);if(!isValid){invalidProps.push(key);}}var unknownPropString=invalidProps.map(function(prop){return'`'+prop+'`';}).join(', ');if(invalidProps.length===1){warning$1(false,'Invalid aria prop %s on <%s> tag. '+'For details, see https://fb.me/invalid-aria-prop',unknownPropString,type);}else if(invalidProps.length>1){warning$1(false,'Invalid aria props %s on <%s> tag. '+'For details, see https://fb.me/invalid-aria-prop',unknownPropString,type);}}function validateProperties(type,props){if(isCustomComponent(type,props)){return;}warnInvalidARIAProps(type,props);}var didWarnValueNull=false;function validateProperties$1(type,props){if(type!=='input'&&type!=='textarea'&&type!=='select'){return;}if(props!=null&&props.value===null&&!didWarnValueNull){didWarnValueNull=true;if(type==='select'&&props.multiple){warning$1(false,'`value` prop on `%s` should not be null. '+'Consider using an empty array when `multiple` is set to `true` '+'to clear the component or `undefined` for uncontrolled components.',type);}else{warning$1(false,'`value` prop on `%s` should not be null. '+'Consider using an empty string to clear the component or `undefined` '+'for uncontrolled components.',type);}}}var validateProperty$1=function(){};{var warnedProperties$1={};var _hasOwnProperty=Object.prototype.hasOwnProperty;var EVENT_NAME_REGEX=/^on./;var INVALID_EVENT_NAME_REGEX=/^on[^A-Z]/;var rARIA$1=new RegExp('^(aria)-['+ATTRIBUTE_NAME_CHAR+']*$');var rARIACamel$1=new RegExp('^(aria)[A-Z]['+ATTRIBUTE_NAME_CHAR+']*$');validateProperty$1=function(tagName,name,value,canUseEventSystem){if(_hasOwnProperty.call(warnedProperties$1,name)&&warnedProperties$1[name]){return true;}var lowerCasedName=name.toLowerCase();if(lowerCasedName==='onfocusin'||lowerCasedName==='onfocusout'){warning$1(false,'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. '+'All React events are normalized to bubble, so onFocusIn and onFocusOut '+'are not needed/supported by React.');warnedProperties$1[name]=true;return true;}// We can't rely on the event system being injected on the server.
if(canUseEventSystem){if(registrationNameModules.hasOwnProperty(name)){return true;}var registrationName=possibleRegistrationNames.hasOwnProperty(lowerCasedName)?possibleRegistrationNames[lowerCasedName]:null;if(registrationName!=null){warning$1(false,'Invalid event handler property `%s`. Did you mean `%s`?',name,registrationName);warnedProperties$1[name]=true;return true;}if(EVENT_NAME_REGEX.test(name)){warning$1(false,'Unknown event handler property `%s`. It will be ignored.',name);warnedProperties$1[name]=true;return true;}}else if(EVENT_NAME_REGEX.test(name)){// If no event plugins have been injected, we are in a server environment.
// So we can't tell if the event name is correct for sure, but we can filter
// out known bad ones like `onclick`. We can't suggest a specific replacement though.
if(INVALID_EVENT_NAME_REGEX.test(name)){warning$1(false,'Invalid event handler property `%s`. '+'React events use the camelCase naming convention, for example `onClick`.',name);}warnedProperties$1[name]=true;return true;}// Let the ARIA attribute hook validate ARIA attributes
if(rARIA$1.test(name)||rARIACamel$1.test(name)){return true;}if(lowerCasedName==='innerhtml'){warning$1(false,'Directly setting property `innerHTML` is not permitted. '+'For more information, lookup documentation on `dangerouslySetInnerHTML`.');warnedProperties$1[name]=true;return true;}if(lowerCasedName==='aria'){warning$1(false,'The `aria` attribute is reserved for future use in React. '+'Pass individual `aria-` attributes instead.');warnedProperties$1[name]=true;return true;}if(lowerCasedName==='is'&&value!==null&&value!==undefined&&typeof value!=='string'){warning$1(false,'Received a `%s` for a string attribute `is`. If this is expected, cast '+'the value to a string.',typeof value);warnedProperties$1[name]=true;return true;}if(typeof value==='number'&&isNaN(value)){warning$1(false,'Received NaN for the `%s` attribute. If this is expected, cast '+'the value to a string.',name);warnedProperties$1[name]=true;return true;}var propertyInfo=getPropertyInfo(name);var isReserved=propertyInfo!==null&&propertyInfo.type===RESERVED;// Known attributes should match the casing specified in the property config.
if(possibleStandardNames.hasOwnProperty(lowerCasedName)){var standardName=possibleStandardNames[lowerCasedName];if(standardName!==name){warning$1(false,'Invalid DOM property `%s`. Did you mean `%s`?',name,standardName);warnedProperties$1[name]=true;return true;}}else if(!isReserved&&name!==lowerCasedName){// Unknown attributes should have lowercase casing since that's how they
// will be cased anyway with server rendering.
warning$1(false,'React does not recognize the `%s` prop on a DOM element. If you '+'intentionally want it to appear in the DOM as a custom '+'attribute, spell it as lowercase `%s` instead. '+'If you accidentally passed it from a parent component, remove '+'it from the DOM element.',name,lowerCasedName);warnedProperties$1[name]=true;return true;}if(typeof value==='boolean'&&shouldRemoveAttributeWithWarning(name,value,propertyInfo,false)){if(value){warning$1(false,'Received `%s` for a non-boolean attribute `%s`.\n\n'+'If you want to write it to the DOM, pass a string instead: '+'%s="%s" or %s={value.toString()}.',value,name,name,value,name);}else{warning$1(false,'Received `%s` for a non-boolean attribute `%s`.\n\n'+'If you want to write it to the DOM, pass a string instead: '+'%s="%s" or %s={value.toString()}.\n\n'+'If you used to conditionally omit it with %s={condition && value}, '+'pass %s={condition ? value : undefined} instead.',value,name,name,value,name,name,name);}warnedProperties$1[name]=true;return true;}// Now that we've validated casing, do not validate
// data types for reserved props
if(isReserved){return true;}// Warn when a known attribute is a bad type
if(shouldRemoveAttributeWithWarning(name,value,propertyInfo,false)){warnedProperties$1[name]=true;return false;}// Warn when passing the strings 'false' or 'true' into a boolean prop
if((value==='false'||value==='true')&&propertyInfo!==null&&propertyInfo.type===BOOLEAN){warning$1(false,'Received the string `%s` for the boolean attribute `%s`. '+'%s '+'Did you mean %s={%s}?',value,name,value==='false'?'The browser will interpret it as a truthy value.':'Although this works, it will not work as expected if you pass the string "false".',name,value);warnedProperties$1[name]=true;return true;}return true;};}var warnUnknownProperties=function(type,props,canUseEventSystem){var unknownProps=[];for(var key in props){var isValid=validateProperty$1(type,key,props[key],canUseEventSystem);if(!isValid){unknownProps.push(key);}}var unknownPropString=unknownProps.map(function(prop){return'`'+prop+'`';}).join(', ');if(unknownProps.length===1){warning$1(false,'Invalid value for prop %s on <%s> tag. Either remove it from the element, '+'or pass a string or number value to keep it in the DOM. '+'For details, see https://fb.me/react-attribute-behavior',unknownPropString,type);}else if(unknownProps.length>1){warning$1(false,'Invalid values for props %s on <%s> tag. Either remove them from the element, '+'or pass a string or number value to keep them in the DOM. '+'For details, see https://fb.me/react-attribute-behavior',unknownPropString,type);}};function validateProperties$2(type,props,canUseEventSystem){if(isCustomComponent(type,props)){return;}warnUnknownProperties(type,props,canUseEventSystem);}// TODO: direct imports like some-package/src/* are bad. Fix me.
var didWarnInvalidHydration=false;var didWarnShadyDOM=false;var DANGEROUSLY_SET_INNER_HTML='dangerouslySetInnerHTML';var SUPPRESS_CONTENT_EDITABLE_WARNING='suppressContentEditableWarning';var SUPPRESS_HYDRATION_WARNING$1='suppressHydrationWarning';var AUTOFOCUS='autoFocus';var CHILDREN='children';var STYLE$1='style';var HTML='__html';var HTML_NAMESPACE=Namespaces.html;var warnedUnknownTags=void 0;var suppressHydrationWarning=void 0;var validatePropertiesInDevelopment=void 0;var warnForTextDifference=void 0;var warnForPropDifference=void 0;var warnForExtraAttributes=void 0;var warnForInvalidEventListener=void 0;var canDiffStyleForHydrationWarning=void 0;var normalizeMarkupForTextOrAttribute=void 0;var normalizeHTML=void 0;{warnedUnknownTags={// Chrome is the only major browser not shipping <time>. But as of July
// 2017 it intends to ship it due to widespread usage. We intentionally
// *don't* warn for <time> even if it's unrecognized by Chrome because
// it soon will be, and many apps have been using it anyway.
time:true,// There are working polyfills for <dialog>. Let people use it.
dialog:true,// Electron ships a custom <webview> tag to display external web content in
// an isolated frame and process.
// This tag is not present in non Electron environments such as JSDom which
// is often used for testing purposes.
// @see https://electronjs.org/docs/api/webview-tag
webview:true};validatePropertiesInDevelopment=function(type,props){validateProperties(type,props);validateProperties$1(type,props);validateProperties$2(type,props,/* canUseEventSystem */true);};// IE 11 parses & normalizes the style attribute as opposed to other
// browsers. It adds spaces and sorts the properties in some
// non-alphabetical order. Handling that would require sorting CSS
// properties in the client & server versions or applying
// `expectedStyle` to a temporary DOM node to read its `style` attribute
// normalized. Since it only affects IE, we're skipping style warnings
// in that browser completely in favor of doing all that work.
// See https://github.com/facebook/react/issues/11807
canDiffStyleForHydrationWarning=canUseDOM&&!document.documentMode;// HTML parsing normalizes CR and CRLF to LF.
// It also can turn \u0000 into \uFFFD inside attributes.
// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
// If we have a mismatch, it might be caused by that.
// We will still patch up in this case but not fire the warning.
var NORMALIZE_NEWLINES_REGEX=/\r\n?/g;var NORMALIZE_NULL_AND_REPLACEMENT_REGEX=/\u0000|\uFFFD/g;normalizeMarkupForTextOrAttribute=function(markup){var markupString=typeof markup==='string'?markup:''+markup;return markupString.replace(NORMALIZE_NEWLINES_REGEX,'\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX,'');};warnForTextDifference=function(serverText,clientText){if(didWarnInvalidHydration){return;}var normalizedClientText=normalizeMarkupForTextOrAttribute(clientText);var normalizedServerText=normalizeMarkupForTextOrAttribute(serverText);if(normalizedServerText===normalizedClientText){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Text content did not match. Server: "%s" Client: "%s"',normalizedServerText,normalizedClientText);};warnForPropDifference=function(propName,serverValue,clientValue){if(didWarnInvalidHydration){return;}var normalizedClientValue=normalizeMarkupForTextOrAttribute(clientValue);var normalizedServerValue=normalizeMarkupForTextOrAttribute(serverValue);if(normalizedServerValue===normalizedClientValue){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Prop `%s` did not match. Server: %s Client: %s',propName,JSON.stringify(normalizedServerValue),JSON.stringify(normalizedClientValue));};warnForExtraAttributes=function(attributeNames){if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;var names=[];attributeNames.forEach(function(name){names.push(name);});warningWithoutStack$1(false,'Extra attributes from the server: %s',names);};warnForInvalidEventListener=function(registrationName,listener){if(listener===false){warning$1(false,'Expected `%s` listener to be a function, instead got `false`.\n\n'+'If you used to conditionally omit it with %s={condition && value}, '+'pass %s={condition ? value : undefined} instead.',registrationName,registrationName,registrationName);}else{warning$1(false,'Expected `%s` listener to be a function, instead got a value of `%s` type.',registrationName,typeof listener);}};// Parse the HTML and read it back to normalize the HTML string so that it
// can be used for comparison.
normalizeHTML=function(parent,html){// We could have created a separate document here to avoid
// re-initializing custom elements if they exist. But this breaks
// how <noscript> is being handled. So we use the same document.
// See the discussion in https://github.com/facebook/react/pull/11157.
var testElement=parent.namespaceURI===HTML_NAMESPACE?parent.ownerDocument.createElement(parent.tagName):parent.ownerDocument.createElementNS(parent.namespaceURI,parent.tagName);testElement.innerHTML=html;return testElement.innerHTML;};}function ensureListeningTo(rootContainerElement,registrationName){var isDocumentOrFragment=rootContainerElement.nodeType===DOCUMENT_NODE||rootContainerElement.nodeType===DOCUMENT_FRAGMENT_NODE;var doc=isDocumentOrFragment?rootContainerElement:rootContainerElement.ownerDocument;listenTo(registrationName,doc);}function getOwnerDocumentFromRootContainer(rootContainerElement){return rootContainerElement.nodeType===DOCUMENT_NODE?rootContainerElement:rootContainerElement.ownerDocument;}function noop(){}function trapClickOnNonInteractiveElement(node){// Mobile Safari does not fire properly bubble click events on
// non-interactive elements, which means delegated click listeners do not
// fire. The workaround for this bug involves attaching an empty click
// listener on the target node.
// http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
// Just set it using the onclick property so that we don't have to manage any
// bookkeeping for it. Not sure if we need to clear it when the listener is
// removed.
// TODO: Only do this for the relevant Safaris maybe?
node.onclick=noop;}function setInitialDOMProperties(tag,domElement,rootContainerElement,nextProps,isCustomComponentTag){for(var propKey in nextProps){if(!nextProps.hasOwnProperty(propKey)){continue;}var nextProp=nextProps[propKey];if(propKey===STYLE$1){{if(nextProp){// Freeze the next style object so that we can assume it won't be
// mutated. We have already warned for this in the past.
Object.freeze(nextProp);}}// Relies on `updateStylesByID` not mutating `styleUpdates`.
setValueForStyles(domElement,nextProp);}else if(propKey===DANGEROUSLY_SET_INNER_HTML){var nextHtml=nextProp?nextProp[HTML]:undefined;if(nextHtml!=null){setInnerHTML(domElement,nextHtml);}}else if(propKey===CHILDREN){if(typeof nextProp==='string'){// Avoid setting initial textContent when the text is empty. In IE11 setting
// textContent on a <textarea> will cause the placeholder to not
// show within the <textarea> until it has been focused and blurred again.
// https://github.com/facebook/react/issues/6731#issuecomment-254874553
var canSetTextContent=tag!=='textarea'||nextProp!=='';if(canSetTextContent){setTextContent(domElement,nextProp);}}else if(typeof nextProp==='number'){setTextContent(domElement,''+nextProp);}}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING$1){// Noop
}else if(propKey===AUTOFOCUS){// We polyfill it separately on the client during commit.
// We could have excluded it in the property list instead of
// adding a special case here, but then it wouldn't be emitted
// on server rendering (but we *do* want to emit it in SSR).
}else if(registrationNameModules.hasOwnProperty(propKey)){if(nextProp!=null){if(true&&typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}ensureListeningTo(rootContainerElement,propKey);}}else if(nextProp!=null){setValueForProperty(domElement,propKey,nextProp,isCustomComponentTag);}}}function updateDOMProperties(domElement,updatePayload,wasCustomComponentTag,isCustomComponentTag){// TODO: Handle wasCustomComponentTag
for(var i=0;i<updatePayload.length;i+=2){var propKey=updatePayload[i];var propValue=updatePayload[i+1];if(propKey===STYLE$1){setValueForStyles(domElement,propValue);}else if(propKey===DANGEROUSLY_SET_INNER_HTML){setInnerHTML(domElement,propValue);}else if(propKey===CHILDREN){setTextContent(domElement,propValue);}else{setValueForProperty(domElement,propKey,propValue,isCustomComponentTag);}}}function createElement(type,props,rootContainerElement,parentNamespace){var isCustomComponentTag=void 0;// We create tags in the namespace of their parent container, except HTML
// tags get no namespace.
var ownerDocument=getOwnerDocumentFromRootContainer(rootContainerElement);var domElement=void 0;var namespaceURI=parentNamespace;if(namespaceURI===HTML_NAMESPACE){namespaceURI=getIntrinsicNamespace(type);}if(namespaceURI===HTML_NAMESPACE){{isCustomComponentTag=isCustomComponent(type,props);// Should this check be gated by parent namespace? Not sure we want to
// allow <SVG> or <mATH>.
!(isCustomComponentTag||type===type.toLowerCase())?warning$1(false,'<%s /> is using incorrect casing. '+'Use PascalCase for React components, '+'or lowercase for HTML elements.',type):void 0;}if(type==='script'){// Create the script via .innerHTML so its "parser-inserted" flag is
// set to true and it does not execute
var div=ownerDocument.createElement('div');div.innerHTML='<script><'+'/script>';// eslint-disable-line
// This is guaranteed to yield a script element.
var firstChild=div.firstChild;domElement=div.removeChild(firstChild);}else if(typeof props.is==='string'){// $FlowIssue `createElement` should be updated for Web Components
domElement=ownerDocument.createElement(type,{is:props.is});}else{// Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
// See discussion in https://github.com/facebook/react/pull/6896
// and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
domElement=ownerDocument.createElement(type);// Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple`
// attribute on `select`s needs to be added before `option`s are inserted. This prevents
// a bug where the `select` does not scroll to the correct option because singular
// `select` elements automatically pick the first item.
// See https://github.com/facebook/react/issues/13222
if(type==='select'&&props.multiple){var node=domElement;node.multiple=true;}}}else{domElement=ownerDocument.createElementNS(namespaceURI,type);}{if(namespaceURI===HTML_NAMESPACE){if(!isCustomComponentTag&&Object.prototype.toString.call(domElement)==='[object HTMLUnknownElement]'&&!Object.prototype.hasOwnProperty.call(warnedUnknownTags,type)){warnedUnknownTags[type]=true;warning$1(false,'The tag <%s> is unrecognized in this browser. '+'If you meant to render a React component, start its name with '+'an uppercase letter.',type);}}}return domElement;}function createTextNode(text,rootContainerElement){return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);}function setInitialProperties(domElement,tag,rawProps,rootContainerElement){var isCustomComponentTag=isCustomComponent(tag,rawProps);{validatePropertiesInDevelopment(tag,rawProps);if(isCustomComponentTag&&!didWarnShadyDOM&&domElement.shadyRoot){warning$1(false,'%s is using shady DOM. Using shady DOM with React can '+'cause things to break subtly.',getCurrentFiberOwnerNameInDevOrNull()||'A component');didWarnShadyDOM=true;}}// TODO: Make sure that we check isMounted before firing any of these events.
var props=void 0;switch(tag){case'iframe':case'object':trapBubbledEvent(TOP_LOAD,domElement);props=rawProps;break;case'video':case'audio':// Create listener for each media event
for(var i=0;i<mediaEventTypes.length;i++){trapBubbledEvent(mediaEventTypes[i],domElement);}props=rawProps;break;case'source':trapBubbledEvent(TOP_ERROR,domElement);props=rawProps;break;case'img':case'image':case'link':trapBubbledEvent(TOP_ERROR,domElement);trapBubbledEvent(TOP_LOAD,domElement);props=rawProps;break;case'form':trapBubbledEvent(TOP_RESET,domElement);trapBubbledEvent(TOP_SUBMIT,domElement);props=rawProps;break;case'details':trapBubbledEvent(TOP_TOGGLE,domElement);props=rawProps;break;case'input':initWrapperState(domElement,rawProps);props=getHostProps(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;case'option':validateProps(domElement,rawProps);props=getHostProps$1(domElement,rawProps);break;case'select':initWrapperState$1(domElement,rawProps);props=getHostProps$2(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;case'textarea':initWrapperState$2(domElement,rawProps);props=getHostProps$3(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;default:props=rawProps;}assertValidProps(tag,props);setInitialDOMProperties(tag,domElement,rootContainerElement,props,isCustomComponentTag);switch(tag){case'input':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper(domElement,rawProps,false);break;case'textarea':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper$3(domElement,rawProps);break;case'option':postMountWrapper$1(domElement,rawProps);break;case'select':postMountWrapper$2(domElement,rawProps);break;default:if(typeof props.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(domElement);}break;}}// Calculate the diff between the two objects.
function diffProperties(domElement,tag,lastRawProps,nextRawProps,rootContainerElement){{validatePropertiesInDevelopment(tag,nextRawProps);}var updatePayload=null;var lastProps=void 0;var nextProps=void 0;switch(tag){case'input':lastProps=getHostProps(domElement,lastRawProps);nextProps=getHostProps(domElement,nextRawProps);updatePayload=[];break;case'option':lastProps=getHostProps$1(domElement,lastRawProps);nextProps=getHostProps$1(domElement,nextRawProps);updatePayload=[];break;case'select':lastProps=getHostProps$2(domElement,lastRawProps);nextProps=getHostProps$2(domElement,nextRawProps);updatePayload=[];break;case'textarea':lastProps=getHostProps$3(domElement,lastRawProps);nextProps=getHostProps$3(domElement,nextRawProps);updatePayload=[];break;default:lastProps=lastRawProps;nextProps=nextRawProps;if(typeof lastProps.onClick!=='function'&&typeof nextProps.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(domElement);}break;}assertValidProps(tag,nextProps);var propKey=void 0;var styleName=void 0;var styleUpdates=null;for(propKey in lastProps){if(nextProps.hasOwnProperty(propKey)||!lastProps.hasOwnProperty(propKey)||lastProps[propKey]==null){continue;}if(propKey===STYLE$1){var lastStyle=lastProps[propKey];for(styleName in lastStyle){if(lastStyle.hasOwnProperty(styleName)){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]='';}}}else if(propKey===DANGEROUSLY_SET_INNER_HTML||propKey===CHILDREN){// Noop. This is handled by the clear text mechanism.
}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING$1){// Noop
}else if(propKey===AUTOFOCUS){// Noop. It doesn't work on updates anyway.
}else if(registrationNameModules.hasOwnProperty(propKey)){// This is a special case. If any listener updates we need to ensure
// that the "current" fiber pointer gets updated so we need a commit
// to update this element.
if(!updatePayload){updatePayload=[];}}else{// For all other deleted properties we add it to the queue. We use
// the whitelist in the commit phase instead.
(updatePayload=updatePayload||[]).push(propKey,null);}}for(propKey in nextProps){var nextProp=nextProps[propKey];var lastProp=lastProps!=null?lastProps[propKey]:undefined;if(!nextProps.hasOwnProperty(propKey)||nextProp===lastProp||nextProp==null&&lastProp==null){continue;}if(propKey===STYLE$1){{if(nextProp){// Freeze the next style object so that we can assume it won't be
// mutated. We have already warned for this in the past.
Object.freeze(nextProp);}}if(lastProp){// Unset styles on `lastProp` but not on `nextProp`.
for(styleName in lastProp){if(lastProp.hasOwnProperty(styleName)&&(!nextProp||!nextProp.hasOwnProperty(styleName))){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]='';}}// Update styles that changed since `lastProp`.
for(styleName in nextProp){if(nextProp.hasOwnProperty(styleName)&&lastProp[styleName]!==nextProp[styleName]){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]=nextProp[styleName];}}}else{// Relies on `updateStylesByID` not mutating `styleUpdates`.
if(!styleUpdates){if(!updatePayload){updatePayload=[];}updatePayload.push(propKey,styleUpdates);}styleUpdates=nextProp;}}else if(propKey===DANGEROUSLY_SET_INNER_HTML){var nextHtml=nextProp?nextProp[HTML]:undefined;var lastHtml=lastProp?lastProp[HTML]:undefined;if(nextHtml!=null){if(lastHtml!==nextHtml){(updatePayload=updatePayload||[]).push(propKey,''+nextHtml);}}else{// TODO: It might be too late to clear this if we have children
// inserted already.
}}else if(propKey===CHILDREN){if(lastProp!==nextProp&&(typeof nextProp==='string'||typeof nextProp==='number')){(updatePayload=updatePayload||[]).push(propKey,''+nextProp);}}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING$1){// Noop
}else if(registrationNameModules.hasOwnProperty(propKey)){if(nextProp!=null){// We eagerly listen to this even though we haven't committed yet.
if(true&&typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}ensureListeningTo(rootContainerElement,propKey);}if(!updatePayload&&lastProp!==nextProp){// This is a special case. If any listener updates we need to ensure
// that the "current" props pointer gets updated so we need a commit
// to update this element.
updatePayload=[];}}else{// For any other property we always add it to the queue and then we
// filter it out using the whitelist during the commit.
(updatePayload=updatePayload||[]).push(propKey,nextProp);}}if(styleUpdates){(updatePayload=updatePayload||[]).push(STYLE$1,styleUpdates);}return updatePayload;}// Apply the diff.
function updateProperties(domElement,updatePayload,tag,lastRawProps,nextRawProps){// Update checked *before* name.
// In the middle of an update, it is possible to have multiple checked.
// When a checked radio tries to change name, browser makes another radio's checked false.
if(tag==='input'&&nextRawProps.type==='radio'&&nextRawProps.name!=null){updateChecked(domElement,nextRawProps);}var wasCustomComponentTag=isCustomComponent(tag,lastRawProps);var isCustomComponentTag=isCustomComponent(tag,nextRawProps);// Apply the diff.
updateDOMProperties(domElement,updatePayload,wasCustomComponentTag,isCustomComponentTag);// TODO: Ensure that an update gets scheduled if any of the special props
// changed.
switch(tag){case'input':// Update the wrapper around inputs *after* updating props. This has to
// happen after `updateDOMProperties`. Otherwise HTML5 input validations
// raise warnings and prevent the new value from being assigned.
updateWrapper(domElement,nextRawProps);break;case'textarea':updateWrapper$1(domElement,nextRawProps);break;case'select':// <select> value update needs to occur after <option> children
// reconciliation
postUpdateWrapper(domElement,nextRawProps);break;}}function getPossibleStandardName(propName){{var lowerCasedName=propName.toLowerCase();if(!possibleStandardNames.hasOwnProperty(lowerCasedName)){return null;}return possibleStandardNames[lowerCasedName]||null;}return null;}function diffHydratedProperties(domElement,tag,rawProps,parentNamespace,rootContainerElement){var isCustomComponentTag=void 0;var extraAttributeNames=void 0;{suppressHydrationWarning=rawProps[SUPPRESS_HYDRATION_WARNING$1]===true;isCustomComponentTag=isCustomComponent(tag,rawProps);validatePropertiesInDevelopment(tag,rawProps);if(isCustomComponentTag&&!didWarnShadyDOM&&domElement.shadyRoot){warning$1(false,'%s is using shady DOM. Using shady DOM with React can '+'cause things to break subtly.',getCurrentFiberOwnerNameInDevOrNull()||'A component');didWarnShadyDOM=true;}}// TODO: Make sure that we check isMounted before firing any of these events.
switch(tag){case'iframe':case'object':trapBubbledEvent(TOP_LOAD,domElement);break;case'video':case'audio':// Create listener for each media event
for(var i=0;i<mediaEventTypes.length;i++){trapBubbledEvent(mediaEventTypes[i],domElement);}break;case'source':trapBubbledEvent(TOP_ERROR,domElement);break;case'img':case'image':case'link':trapBubbledEvent(TOP_ERROR,domElement);trapBubbledEvent(TOP_LOAD,domElement);break;case'form':trapBubbledEvent(TOP_RESET,domElement);trapBubbledEvent(TOP_SUBMIT,domElement);break;case'details':trapBubbledEvent(TOP_TOGGLE,domElement);break;case'input':initWrapperState(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;case'option':validateProps(domElement,rawProps);break;case'select':initWrapperState$1(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;case'textarea':initWrapperState$2(domElement,rawProps);trapBubbledEvent(TOP_INVALID,domElement);// For controlled components we always need to ensure we're listening
// to onChange. Even if there is no listener.
ensureListeningTo(rootContainerElement,'onChange');break;}assertValidProps(tag,rawProps);{extraAttributeNames=new Set();var attributes=domElement.attributes;for(var _i=0;_i<attributes.length;_i++){var name=attributes[_i].name.toLowerCase();switch(name){// Built-in SSR attribute is whitelisted
case'data-reactroot':break;// Controlled attributes are not validated
// TODO: Only ignore them on controlled tags.
case'value':break;case'checked':break;case'selected':break;default:// Intentionally use the original name.
// See discussion in https://github.com/facebook/react/pull/10676.
extraAttributeNames.add(attributes[_i].name);}}}var updatePayload=null;for(var propKey in rawProps){if(!rawProps.hasOwnProperty(propKey)){continue;}var nextProp=rawProps[propKey];if(propKey===CHILDREN){// For text content children we compare against textContent. This
// might match additional HTML that is hidden when we read it using
// textContent. E.g. "foo" will match "f<span>oo</span>" but that still
// satisfies our requirement. Our requirement is not to produce perfect
// HTML and attributes. Ideally we should preserve structure but it's
// ok not to if the visible content is still enough to indicate what
// even listeners these nodes might be wired up to.
// TODO: Warn if there is more than a single textNode as a child.
// TODO: Should we use domElement.firstChild.nodeValue to compare?
if(typeof nextProp==='string'){if(domElement.textContent!==nextProp){if(true&&!suppressHydrationWarning){warnForTextDifference(domElement.textContent,nextProp);}updatePayload=[CHILDREN,nextProp];}}else if(typeof nextProp==='number'){if(domElement.textContent!==''+nextProp){if(true&&!suppressHydrationWarning){warnForTextDifference(domElement.textContent,nextProp);}updatePayload=[CHILDREN,''+nextProp];}}}else if(registrationNameModules.hasOwnProperty(propKey)){if(nextProp!=null){if(true&&typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}ensureListeningTo(rootContainerElement,propKey);}}else if(true&&// Convince Flow we've calculated it (it's DEV-only in this method.)
typeof isCustomComponentTag==='boolean'){// Validate that the properties correspond to their expected values.
var serverValue=void 0;var propertyInfo=getPropertyInfo(propKey);if(suppressHydrationWarning){// Don't bother comparing. We're ignoring all these warnings.
}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING$1||// Controlled attributes are not validated
// TODO: Only ignore them on controlled tags.
propKey==='value'||propKey==='checked'||propKey==='selected'){// Noop
}else if(propKey===DANGEROUSLY_SET_INNER_HTML){var serverHTML=domElement.innerHTML;var nextHtml=nextProp?nextProp[HTML]:undefined;var expectedHTML=normalizeHTML(domElement,nextHtml!=null?nextHtml:'');if(expectedHTML!==serverHTML){warnForPropDifference(propKey,serverHTML,expectedHTML);}}else if(propKey===STYLE$1){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propKey);if(canDiffStyleForHydrationWarning){var expectedStyle=createDangerousStringForStyles(nextProp);serverValue=domElement.getAttribute('style');if(expectedStyle!==serverValue){warnForPropDifference(propKey,serverValue,expectedStyle);}}}else if(isCustomComponentTag){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propKey.toLowerCase());serverValue=getValueForAttribute(domElement,propKey,nextProp);if(nextProp!==serverValue){warnForPropDifference(propKey,serverValue,nextProp);}}else if(!shouldIgnoreAttribute(propKey,propertyInfo,isCustomComponentTag)&&!shouldRemoveAttribute(propKey,nextProp,propertyInfo,isCustomComponentTag)){var isMismatchDueToBadCasing=false;if(propertyInfo!==null){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propertyInfo.attributeName);serverValue=getValueForProperty(domElement,propKey,nextProp,propertyInfo);}else{var ownNamespace=parentNamespace;if(ownNamespace===HTML_NAMESPACE){ownNamespace=getIntrinsicNamespace(tag);}if(ownNamespace===HTML_NAMESPACE){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propKey.toLowerCase());}else{var standardName=getPossibleStandardName(propKey);if(standardName!==null&&standardName!==propKey){// If an SVG prop is supplied with bad casing, it will
// be successfully parsed from HTML, but will produce a mismatch
// (and would be incorrectly rendered on the client).
// However, we already warn about bad casing elsewhere.
// So we'll skip the misleading extra mismatch warning in this case.
isMismatchDueToBadCasing=true;// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(standardName);}// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.delete(propKey);}serverValue=getValueForAttribute(domElement,propKey,nextProp);}if(nextProp!==serverValue&&!isMismatchDueToBadCasing){warnForPropDifference(propKey,serverValue,nextProp);}}}}{// $FlowFixMe - Should be inferred as not undefined.
if(extraAttributeNames.size>0&&!suppressHydrationWarning){// $FlowFixMe - Should be inferred as not undefined.
warnForExtraAttributes(extraAttributeNames);}}switch(tag){case'input':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper(domElement,rawProps,true);break;case'textarea':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper$3(domElement,rawProps);break;case'select':case'option':// For input and textarea we current always set the value property at
// post mount to force it to diverge from attributes. However, for
// option and select we don't quite do the same thing and select
// is not resilient to the DOM state changing so we don't do that here.
// TODO: Consider not doing this for input and textarea.
break;default:if(typeof rawProps.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(domElement);}break;}return updatePayload;}function diffHydratedText(textNode,text){var isDifferent=textNode.nodeValue!==text;return isDifferent;}function warnForUnmatchedText(textNode,text){{warnForTextDifference(textNode.nodeValue,text);}}function warnForDeletedHydratableElement(parentNode,child){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Did not expect server HTML to contain a <%s> in <%s>.',child.nodeName.toLowerCase(),parentNode.nodeName.toLowerCase());}}function warnForDeletedHydratableText(parentNode,child){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Did not expect server HTML to contain the text node "%s" in <%s>.',child.nodeValue,parentNode.nodeName.toLowerCase());}}function warnForInsertedHydratedElement(parentNode,tag,props){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Expected server HTML to contain a matching <%s> in <%s>.',tag,parentNode.nodeName.toLowerCase());}}function warnForInsertedHydratedText(parentNode,text){{if(text===''){// We expect to insert empty text nodes since they're not represented in
// the HTML.
// TODO: Remove this special case if we can just avoid inserting empty
// text nodes.
return;}if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;warningWithoutStack$1(false,'Expected server HTML to contain a matching text node for "%s" in <%s>.',text,parentNode.nodeName.toLowerCase());}}function restoreControlledState$1(domElement,tag,props){switch(tag){case'input':restoreControlledState(domElement,props);return;case'textarea':restoreControlledState$3(domElement,props);return;case'select':restoreControlledState$2(domElement,props);return;}}// TODO: direct imports like some-package/src/* are bad. Fix me.
var validateDOMNesting=function(){};var updatedAncestorInfo=function(){};{// This validation code was written based on the HTML5 parsing spec:
// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
//
// Note: this does not catch all invalid nesting, nor does it try to (as it's
// not clear what practical benefit doing so provides); instead, we warn only
// for cases where the parser will give a parse tree differing from what React
// intended. For example, <b><div></div></b> is invalid but we don't warn
// because it still parses correctly; we do warn for other cases like nested
// <p> tags where the beginning of the second element implicitly closes the
// first, causing a confusing mess.
// https://html.spec.whatwg.org/multipage/syntax.html#special
var specialTags=['address','applet','area','article','aside','base','basefont','bgsound','blockquote','body','br','button','caption','center','col','colgroup','dd','details','dir','div','dl','dt','embed','fieldset','figcaption','figure','footer','form','frame','frameset','h1','h2','h3','h4','h5','h6','head','header','hgroup','hr','html','iframe','img','input','isindex','li','link','listing','main','marquee','menu','menuitem','meta','nav','noembed','noframes','noscript','object','ol','p','param','plaintext','pre','script','section','select','source','style','summary','table','tbody','td','template','textarea','tfoot','th','thead','title','tr','track','ul','wbr','xmp'];// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
var inScopeTags=['applet','caption','html','table','td','th','marquee','object','template',// https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
// TODO: Distinguish by namespace here -- for <title>, including it here
// errs on the side of fewer warnings
'foreignObject','desc','title'];// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
var buttonScopeTags=inScopeTags.concat(['button']);// https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
var impliedEndTags=['dd','dt','li','option','optgroup','p','rp','rt'];var emptyAncestorInfo={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null};updatedAncestorInfo=function(oldInfo,tag){var ancestorInfo=_assign({},oldInfo||emptyAncestorInfo);var info={tag:tag};if(inScopeTags.indexOf(tag)!==-1){ancestorInfo.aTagInScope=null;ancestorInfo.buttonTagInScope=null;ancestorInfo.nobrTagInScope=null;}if(buttonScopeTags.indexOf(tag)!==-1){ancestorInfo.pTagInButtonScope=null;}// See rules for 'li', 'dd', 'dt' start tags in
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
if(specialTags.indexOf(tag)!==-1&&tag!=='address'&&tag!=='div'&&tag!=='p'){ancestorInfo.listItemTagAutoclosing=null;ancestorInfo.dlItemTagAutoclosing=null;}ancestorInfo.current=info;if(tag==='form'){ancestorInfo.formTag=info;}if(tag==='a'){ancestorInfo.aTagInScope=info;}if(tag==='button'){ancestorInfo.buttonTagInScope=info;}if(tag==='nobr'){ancestorInfo.nobrTagInScope=info;}if(tag==='p'){ancestorInfo.pTagInButtonScope=info;}if(tag==='li'){ancestorInfo.listItemTagAutoclosing=info;}if(tag==='dd'||tag==='dt'){ancestorInfo.dlItemTagAutoclosing=info;}return ancestorInfo;};/**
   * Returns whether
   */var isTagValidWithParent=function(tag,parentTag){// First, let's check if we're in an unusual parsing mode...
switch(parentTag){// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
case'select':return tag==='option'||tag==='optgroup'||tag==='#text';case'optgroup':return tag==='option'||tag==='#text';// Strictly speaking, seeing an <option> doesn't mean we're in a <select>
// but
case'option':return tag==='#text';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
// No special behavior since these rules fall back to "in body" mode for
// all except special table nodes which cause bad parsing behavior anyway.
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
case'tr':return tag==='th'||tag==='td'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
case'tbody':case'thead':case'tfoot':return tag==='tr'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
case'colgroup':return tag==='col'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
case'table':return tag==='caption'||tag==='colgroup'||tag==='tbody'||tag==='tfoot'||tag==='thead'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
case'head':return tag==='base'||tag==='basefont'||tag==='bgsound'||tag==='link'||tag==='meta'||tag==='title'||tag==='noscript'||tag==='noframes'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
case'html':return tag==='head'||tag==='body';case'#document':return tag==='html';}// Probably in the "in body" parsing mode, so we outlaw only tag combos
// where the parsing rules cause implicit opens or closes to be added.
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
switch(tag){case'h1':case'h2':case'h3':case'h4':case'h5':case'h6':return parentTag!=='h1'&&parentTag!=='h2'&&parentTag!=='h3'&&parentTag!=='h4'&&parentTag!=='h5'&&parentTag!=='h6';case'rp':case'rt':return impliedEndTags.indexOf(parentTag)===-1;case'body':case'caption':case'col':case'colgroup':case'frame':case'head':case'html':case'tbody':case'td':case'tfoot':case'th':case'thead':case'tr':// These tags are only valid with a few parents that have special child
// parsing rules -- if we're down here, then none of those matched and
// so we allow it only if we don't know what the parent is, as all other
// cases are invalid.
return parentTag==null;}return true;};/**
   * Returns whether
   */var findInvalidAncestorForTag=function(tag,ancestorInfo){switch(tag){case'address':case'article':case'aside':case'blockquote':case'center':case'details':case'dialog':case'dir':case'div':case'dl':case'fieldset':case'figcaption':case'figure':case'footer':case'header':case'hgroup':case'main':case'menu':case'nav':case'ol':case'p':case'section':case'summary':case'ul':case'pre':case'listing':case'table':case'hr':case'xmp':case'h1':case'h2':case'h3':case'h4':case'h5':case'h6':return ancestorInfo.pTagInButtonScope;case'form':return ancestorInfo.formTag||ancestorInfo.pTagInButtonScope;case'li':return ancestorInfo.listItemTagAutoclosing;case'dd':case'dt':return ancestorInfo.dlItemTagAutoclosing;case'button':return ancestorInfo.buttonTagInScope;case'a':// Spec says something about storing a list of markers, but it sounds
// equivalent to this check.
return ancestorInfo.aTagInScope;case'nobr':return ancestorInfo.nobrTagInScope;}return null;};var didWarn={};validateDOMNesting=function(childTag,childText,ancestorInfo){ancestorInfo=ancestorInfo||emptyAncestorInfo;var parentInfo=ancestorInfo.current;var parentTag=parentInfo&&parentInfo.tag;if(childText!=null){!(childTag==null)?warningWithoutStack$1(false,'validateDOMNesting: when childText is passed, childTag should be null'):void 0;childTag='#text';}var invalidParent=isTagValidWithParent(childTag,parentTag)?null:parentInfo;var invalidAncestor=invalidParent?null:findInvalidAncestorForTag(childTag,ancestorInfo);var invalidParentOrAncestor=invalidParent||invalidAncestor;if(!invalidParentOrAncestor){return;}var ancestorTag=invalidParentOrAncestor.tag;var addendum=getCurrentFiberStackInDev();var warnKey=!!invalidParent+'|'+childTag+'|'+ancestorTag+'|'+addendum;if(didWarn[warnKey]){return;}didWarn[warnKey]=true;var tagDisplayName=childTag;var whitespaceInfo='';if(childTag==='#text'){if(/\S/.test(childText)){tagDisplayName='Text nodes';}else{tagDisplayName='Whitespace text nodes';whitespaceInfo=" Make sure you don't have any extra whitespace between tags on "+'each line of your source code.';}}else{tagDisplayName='<'+childTag+'>';}if(invalidParent){var info='';if(ancestorTag==='table'&&childTag==='tr'){info+=' Add a <tbody> to your code to match the DOM tree generated by '+'the browser.';}warningWithoutStack$1(false,'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s',tagDisplayName,ancestorTag,whitespaceInfo,info,addendum);}else{warningWithoutStack$1(false,'validateDOMNesting(...): %s cannot appear as a descendant of '+'<%s>.%s',tagDisplayName,ancestorTag,addendum);}};}// Renderers that don't support persistence
// can re-export everything from this module.
function shim(){invariant(false,'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');}// Persistence (when unsupported)
var supportsPersistence=false;var cloneInstance=shim;var createContainerChildSet=shim;var appendChildToContainerChildSet=shim;var finalizeContainerChildren=shim;var replaceContainerChildren=shim;var cloneHiddenInstance=shim;var cloneUnhiddenInstance=shim;var createHiddenTextInstance=shim;var SUPPRESS_HYDRATION_WARNING=void 0;{SUPPRESS_HYDRATION_WARNING='suppressHydrationWarning';}var STYLE='style';var eventsEnabled=null;var selectionInformation=null;function shouldAutoFocusHostComponent(type,props){switch(type){case'button':case'input':case'select':case'textarea':return!!props.autoFocus;}return false;}function getRootHostContext(rootContainerInstance){var type=void 0;var namespace=void 0;var nodeType=rootContainerInstance.nodeType;switch(nodeType){case DOCUMENT_NODE:case DOCUMENT_FRAGMENT_NODE:{type=nodeType===DOCUMENT_NODE?'#document':'#fragment';var root=rootContainerInstance.documentElement;namespace=root?root.namespaceURI:getChildNamespace(null,'');break;}default:{var container=nodeType===COMMENT_NODE?rootContainerInstance.parentNode:rootContainerInstance;var ownNamespace=container.namespaceURI||null;type=container.tagName;namespace=getChildNamespace(ownNamespace,type);break;}}{var validatedTag=type.toLowerCase();var _ancestorInfo=updatedAncestorInfo(null,validatedTag);return{namespace:namespace,ancestorInfo:_ancestorInfo};}return namespace;}function getChildHostContext(parentHostContext,type,rootContainerInstance){{var parentHostContextDev=parentHostContext;var _namespace=getChildNamespace(parentHostContextDev.namespace,type);var _ancestorInfo2=updatedAncestorInfo(parentHostContextDev.ancestorInfo,type);return{namespace:_namespace,ancestorInfo:_ancestorInfo2};}var parentNamespace=parentHostContext;return getChildNamespace(parentNamespace,type);}function getPublicInstance(instance){return instance;}function prepareForCommit(containerInfo){eventsEnabled=isEnabled();selectionInformation=getSelectionInformation();setEnabled(false);}function resetAfterCommit(containerInfo){restoreSelection(selectionInformation);selectionInformation=null;setEnabled(eventsEnabled);eventsEnabled=null;}function createInstance(type,props,rootContainerInstance,hostContext,internalInstanceHandle){var parentNamespace=void 0;{// TODO: take namespace into account when validating.
var hostContextDev=hostContext;validateDOMNesting(type,null,hostContextDev.ancestorInfo);if(typeof props.children==='string'||typeof props.children==='number'){var string=''+props.children;var ownAncestorInfo=updatedAncestorInfo(hostContextDev.ancestorInfo,type);validateDOMNesting(null,string,ownAncestorInfo);}parentNamespace=hostContextDev.namespace;}var domElement=createElement(type,props,rootContainerInstance,parentNamespace);precacheFiberNode(internalInstanceHandle,domElement);updateFiberProps(domElement,props);return domElement;}function appendInitialChild(parentInstance,child){parentInstance.appendChild(child);}function finalizeInitialChildren(domElement,type,props,rootContainerInstance,hostContext){setInitialProperties(domElement,type,props,rootContainerInstance);return shouldAutoFocusHostComponent(type,props);}function prepareUpdate(domElement,type,oldProps,newProps,rootContainerInstance,hostContext){{var hostContextDev=hostContext;if(typeof newProps.children!==typeof oldProps.children&&(typeof newProps.children==='string'||typeof newProps.children==='number')){var string=''+newProps.children;var ownAncestorInfo=updatedAncestorInfo(hostContextDev.ancestorInfo,type);validateDOMNesting(null,string,ownAncestorInfo);}}return diffProperties(domElement,type,oldProps,newProps,rootContainerInstance);}function shouldSetTextContent(type,props){return type==='textarea'||type==='option'||type==='noscript'||typeof props.children==='string'||typeof props.children==='number'||typeof props.dangerouslySetInnerHTML==='object'&&props.dangerouslySetInnerHTML!==null&&props.dangerouslySetInnerHTML.__html!=null;}function shouldDeprioritizeSubtree(type,props){return!!props.hidden;}function createTextInstance(text,rootContainerInstance,hostContext,internalInstanceHandle){{var hostContextDev=hostContext;validateDOMNesting(null,text,hostContextDev.ancestorInfo);}var textNode=createTextNode(text,rootContainerInstance);precacheFiberNode(internalInstanceHandle,textNode);return textNode;}var isPrimaryRenderer=true;var scheduleTimeout=setTimeout;var cancelTimeout=clearTimeout;var noTimeout=-1;// -------------------
//     Mutation
// -------------------
var supportsMutation=true;function commitMount(domElement,type,newProps,internalInstanceHandle){// Despite the naming that might imply otherwise, this method only
// fires if there is an `Update` effect scheduled during mounting.
// This happens if `finalizeInitialChildren` returns `true` (which it
// does to implement the `autoFocus` attribute on the client). But
// there are also other cases when this might happen (such as patching
// up text content during hydration mismatch). So we'll check this again.
if(shouldAutoFocusHostComponent(type,newProps)){domElement.focus();}}function commitUpdate(domElement,updatePayload,type,oldProps,newProps,internalInstanceHandle){// Update the props handle so that we know which props are the ones with
// with current event handlers.
updateFiberProps(domElement,newProps);// Apply the diff to the DOM node.
updateProperties(domElement,updatePayload,type,oldProps,newProps);}function resetTextContent(domElement){setTextContent(domElement,'');}function commitTextUpdate(textInstance,oldText,newText){textInstance.nodeValue=newText;}function appendChild(parentInstance,child){parentInstance.appendChild(child);}function appendChildToContainer(container,child){var parentNode=void 0;if(container.nodeType===COMMENT_NODE){parentNode=container.parentNode;parentNode.insertBefore(child,container);}else{parentNode=container;parentNode.appendChild(child);}// This container might be used for a portal.
// If something inside a portal is clicked, that click should bubble
// through the React tree. However, on Mobile Safari the click would
// never bubble through the *DOM* tree unless an ancestor with onclick
// event exists. So we wouldn't see it and dispatch it.
// This is why we ensure that non React root containers have inline onclick
// defined.
// https://github.com/facebook/react/issues/11918
var reactRootContainer=container._reactRootContainer;if((reactRootContainer===null||reactRootContainer===undefined)&&parentNode.onclick===null){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(parentNode);}}function insertBefore(parentInstance,child,beforeChild){parentInstance.insertBefore(child,beforeChild);}function insertInContainerBefore(container,child,beforeChild){if(container.nodeType===COMMENT_NODE){container.parentNode.insertBefore(child,beforeChild);}else{container.insertBefore(child,beforeChild);}}function removeChild(parentInstance,child){parentInstance.removeChild(child);}function removeChildFromContainer(container,child){if(container.nodeType===COMMENT_NODE){container.parentNode.removeChild(child);}else{container.removeChild(child);}}function hideInstance(instance){// TODO: Does this work for all element types? What about MathML? Should we
// pass host context to this method?
instance=instance;instance.style.display='none';}function hideTextInstance(textInstance){textInstance.nodeValue='';}function unhideInstance(instance,props){instance=instance;var styleProp=props[STYLE];var display=styleProp!==undefined&&styleProp!==null&&styleProp.hasOwnProperty('display')?styleProp.display:null;// $FlowFixMe Setting a style property to null is the valid way to reset it.
instance.style.display=display;}function unhideTextInstance(textInstance,text){textInstance.nodeValue=text;}// -------------------
//     Hydration
// -------------------
var supportsHydration=true;function canHydrateInstance(instance,type,props){if(instance.nodeType!==ELEMENT_NODE||type.toLowerCase()!==instance.nodeName.toLowerCase()){return null;}// This has now been refined to an element node.
return instance;}function canHydrateTextInstance(instance,text){if(text===''||instance.nodeType!==TEXT_NODE){// Empty strings are not parsed by HTML so there won't be a correct match here.
return null;}// This has now been refined to a text node.
return instance;}function getNextHydratableSibling(instance){var node=instance.nextSibling;// Skip non-hydratable nodes.
while(node&&node.nodeType!==ELEMENT_NODE&&node.nodeType!==TEXT_NODE){node=node.nextSibling;}return node;}function getFirstHydratableChild(parentInstance){var next=parentInstance.firstChild;// Skip non-hydratable nodes.
while(next&&next.nodeType!==ELEMENT_NODE&&next.nodeType!==TEXT_NODE){next=next.nextSibling;}return next;}function hydrateInstance(instance,type,props,rootContainerInstance,hostContext,internalInstanceHandle){precacheFiberNode(internalInstanceHandle,instance);// TODO: Possibly defer this until the commit phase where all the events
// get attached.
updateFiberProps(instance,props);var parentNamespace=void 0;{var hostContextDev=hostContext;parentNamespace=hostContextDev.namespace;}return diffHydratedProperties(instance,type,props,parentNamespace,rootContainerInstance);}function hydrateTextInstance(textInstance,text,internalInstanceHandle){precacheFiberNode(internalInstanceHandle,textInstance);return diffHydratedText(textInstance,text);}function didNotMatchHydratedContainerTextInstance(parentContainer,textInstance,text){{warnForUnmatchedText(textInstance,text);}}function didNotMatchHydratedTextInstance(parentType,parentProps,parentInstance,textInstance,text){if(true&&parentProps[SUPPRESS_HYDRATION_WARNING]!==true){warnForUnmatchedText(textInstance,text);}}function didNotHydrateContainerInstance(parentContainer,instance){{if(instance.nodeType===ELEMENT_NODE){warnForDeletedHydratableElement(parentContainer,instance);}else{warnForDeletedHydratableText(parentContainer,instance);}}}function didNotHydrateInstance(parentType,parentProps,parentInstance,instance){if(true&&parentProps[SUPPRESS_HYDRATION_WARNING]!==true){if(instance.nodeType===ELEMENT_NODE){warnForDeletedHydratableElement(parentInstance,instance);}else{warnForDeletedHydratableText(parentInstance,instance);}}}function didNotFindHydratableContainerInstance(parentContainer,type,props){{warnForInsertedHydratedElement(parentContainer,type,props);}}function didNotFindHydratableContainerTextInstance(parentContainer,text){{warnForInsertedHydratedText(parentContainer,text);}}function didNotFindHydratableInstance(parentType,parentProps,parentInstance,type,props){if(true&&parentProps[SUPPRESS_HYDRATION_WARNING]!==true){warnForInsertedHydratedElement(parentInstance,type,props);}}function didNotFindHydratableTextInstance(parentType,parentProps,parentInstance,text){if(true&&parentProps[SUPPRESS_HYDRATION_WARNING]!==true){warnForInsertedHydratedText(parentInstance,text);}}// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji='\u269B';var warningEmoji='\u26D4';var supportsUserTiming=typeof performance!=='undefined'&&typeof performance.mark==='function'&&typeof performance.clearMarks==='function'&&typeof performance.measure==='function'&&typeof performance.clearMeasures==='function';// Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
var currentFiber=null;// If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).
var currentPhase=null;var currentPhaseFiber=null;// Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.
var isCommitting=false;var hasScheduledUpdateInCurrentCommit=false;var hasScheduledUpdateInCurrentPhase=false;var commitCountInCurrentWorkLoop=0;var effectCountInCurrentCommit=0;var isWaitingForCallback=false;// During commits, we only show a measurement once per method name
// to avoid stretch the commit phase with measurement overhead.
var labelsInCurrentCommit=new Set();var formatMarkName=function(markName){return reactEmoji+' '+markName;};var formatLabel=function(label,warning){var prefix=warning?warningEmoji+' ':reactEmoji+' ';var suffix=warning?' Warning: '+warning:'';return''+prefix+label+suffix;};var beginMark=function(markName){performance.mark(formatMarkName(markName));};var clearMark=function(markName){performance.clearMarks(formatMarkName(markName));};var endMark=function(label,markName,warning){var formattedMarkName=formatMarkName(markName);var formattedLabel=formatLabel(label,warning);try{performance.measure(formattedLabel,formattedMarkName);}catch(err){}// If previous mark was missing for some reason, this will throw.
// This could only happen if React crashed in an unexpected place earlier.
// Don't pile on with more errors.
// Clear marks immediately to avoid growing buffer.
performance.clearMarks(formattedMarkName);performance.clearMeasures(formattedLabel);};var getFiberMarkName=function(label,debugID){return label+' (#'+debugID+')';};var getFiberLabel=function(componentName,isMounted,phase){if(phase===null){// These are composite component total time measurements.
return componentName+' ['+(isMounted?'update':'mount')+']';}else{// Composite component methods.
return componentName+'.'+phase;}};var beginFiberMark=function(fiber,phase){var componentName=getComponentName(fiber.type)||'Unknown';var debugID=fiber._debugID;var isMounted=fiber.alternate!==null;var label=getFiberLabel(componentName,isMounted,phase);if(isCommitting&&labelsInCurrentCommit.has(label)){// During the commit phase, we don't show duplicate labels because
// there is a fixed overhead for every measurement, and we don't
// want to stretch the commit phase beyond necessary.
return false;}labelsInCurrentCommit.add(label);var markName=getFiberMarkName(label,debugID);beginMark(markName);return true;};var clearFiberMark=function(fiber,phase){var componentName=getComponentName(fiber.type)||'Unknown';var debugID=fiber._debugID;var isMounted=fiber.alternate!==null;var label=getFiberLabel(componentName,isMounted,phase);var markName=getFiberMarkName(label,debugID);clearMark(markName);};var endFiberMark=function(fiber,phase,warning){var componentName=getComponentName(fiber.type)||'Unknown';var debugID=fiber._debugID;var isMounted=fiber.alternate!==null;var label=getFiberLabel(componentName,isMounted,phase);var markName=getFiberMarkName(label,debugID);endMark(label,markName,warning);};var shouldIgnoreFiber=function(fiber){// Host components should be skipped in the timeline.
// We could check typeof fiber.type, but does this work with RN?
switch(fiber.tag){case HostRoot:case HostComponent:case HostText:case HostPortal:case Fragment:case ContextProvider:case ContextConsumer:case Mode:return true;default:return false;}};var clearPendingPhaseMeasurement=function(){if(currentPhase!==null&&currentPhaseFiber!==null){clearFiberMark(currentPhaseFiber,currentPhase);}currentPhaseFiber=null;currentPhase=null;hasScheduledUpdateInCurrentPhase=false;};var pauseTimers=function(){// Stops all currently active measurements so that they can be resumed
// if we continue in a later deferred loop from the same unit of work.
var fiber=currentFiber;while(fiber){if(fiber._debugIsCurrentlyTiming){endFiberMark(fiber,null,null);}fiber=fiber.return;}};var resumeTimersRecursively=function(fiber){if(fiber.return!==null){resumeTimersRecursively(fiber.return);}if(fiber._debugIsCurrentlyTiming){beginFiberMark(fiber,null);}};var resumeTimers=function(){// Resumes all measurements that were active during the last deferred loop.
if(currentFiber!==null){resumeTimersRecursively(currentFiber);}};function recordEffect(){if(enableUserTimingAPI){effectCountInCurrentCommit++;}}function recordScheduleUpdate(){if(enableUserTimingAPI){if(isCommitting){hasScheduledUpdateInCurrentCommit=true;}if(currentPhase!==null&&currentPhase!=='componentWillMount'&&currentPhase!=='componentWillReceiveProps'){hasScheduledUpdateInCurrentPhase=true;}}}function startRequestCallbackTimer(){if(enableUserTimingAPI){if(supportsUserTiming&&!isWaitingForCallback){isWaitingForCallback=true;beginMark('(Waiting for async callback...)');}}}function stopRequestCallbackTimer(didExpire,expirationTime){if(enableUserTimingAPI){if(supportsUserTiming){isWaitingForCallback=false;var warning=didExpire?'React was blocked by main thread':null;endMark('(Waiting for async callback... will force flush in '+expirationTime+' ms)','(Waiting for async callback...)',warning);}}}function startWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// If we pause, this is the fiber to unwind from.
currentFiber=fiber;if(!beginFiberMark(fiber,null)){return;}fiber._debugIsCurrentlyTiming=true;}}function cancelWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// Remember we shouldn't complete measurement for this fiber.
// Otherwise flamechart will be deep even for small updates.
fiber._debugIsCurrentlyTiming=false;clearFiberMark(fiber,null);}}function stopWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// If we pause, its parent is the fiber to unwind from.
currentFiber=fiber.return;if(!fiber._debugIsCurrentlyTiming){return;}fiber._debugIsCurrentlyTiming=false;endFiberMark(fiber,null,null);}}function stopFailedWorkTimer(fiber){if(enableUserTimingAPI){if(!supportsUserTiming||shouldIgnoreFiber(fiber)){return;}// If we pause, its parent is the fiber to unwind from.
currentFiber=fiber.return;if(!fiber._debugIsCurrentlyTiming){return;}fiber._debugIsCurrentlyTiming=false;var warning=fiber.tag===SuspenseComponent?'Rendering was suspended':'An error was thrown inside this error boundary';endFiberMark(fiber,null,warning);}}function startPhaseTimer(fiber,phase){if(enableUserTimingAPI){if(!supportsUserTiming){return;}clearPendingPhaseMeasurement();if(!beginFiberMark(fiber,phase)){return;}currentPhaseFiber=fiber;currentPhase=phase;}}function stopPhaseTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}if(currentPhase!==null&&currentPhaseFiber!==null){var warning=hasScheduledUpdateInCurrentPhase?'Scheduled a cascading update':null;endFiberMark(currentPhaseFiber,currentPhase,warning);}currentPhase=null;currentPhaseFiber=null;}}function startWorkLoopTimer(nextUnitOfWork){if(enableUserTimingAPI){currentFiber=nextUnitOfWork;if(!supportsUserTiming){return;}commitCountInCurrentWorkLoop=0;// This is top level call.
// Any other measurements are performed within.
beginMark('(React Tree Reconciliation)');// Resume any measurements that were in progress during the last loop.
resumeTimers();}}function stopWorkLoopTimer(interruptedBy,didCompleteRoot){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var warning=null;if(interruptedBy!==null){if(interruptedBy.tag===HostRoot){warning='A top-level update interrupted the previous render';}else{var componentName=getComponentName(interruptedBy.type)||'Unknown';warning='An update to '+componentName+' interrupted the previous render';}}else if(commitCountInCurrentWorkLoop>1){warning='There were cascading updates';}commitCountInCurrentWorkLoop=0;var label=didCompleteRoot?'(React Tree Reconciliation: Completed Root)':'(React Tree Reconciliation: Yielded)';// Pause any measurements until the next loop.
pauseTimers();endMark(label,'(React Tree Reconciliation)',warning);}}function startCommitTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}isCommitting=true;hasScheduledUpdateInCurrentCommit=false;labelsInCurrentCommit.clear();beginMark('(Committing Changes)');}}function stopCommitTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var warning=null;if(hasScheduledUpdateInCurrentCommit){warning='Lifecycle hook scheduled a cascading update';}else if(commitCountInCurrentWorkLoop>0){warning='Caused by a cascading update in earlier commit';}hasScheduledUpdateInCurrentCommit=false;commitCountInCurrentWorkLoop++;isCommitting=false;labelsInCurrentCommit.clear();endMark('(Committing Changes)','(Committing Changes)',warning);}}function startCommitSnapshotEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}effectCountInCurrentCommit=0;beginMark('(Committing Snapshot Effects)');}}function stopCommitSnapshotEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0;endMark('(Committing Snapshot Effects: '+count+' Total)','(Committing Snapshot Effects)',null);}}function startCommitHostEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}effectCountInCurrentCommit=0;beginMark('(Committing Host Effects)');}}function stopCommitHostEffectsTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0;endMark('(Committing Host Effects: '+count+' Total)','(Committing Host Effects)',null);}}function startCommitLifeCyclesTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}effectCountInCurrentCommit=0;beginMark('(Calling Lifecycle Methods)');}}function stopCommitLifeCyclesTimer(){if(enableUserTimingAPI){if(!supportsUserTiming){return;}var count=effectCountInCurrentCommit;effectCountInCurrentCommit=0;endMark('(Calling Lifecycle Methods: '+count+' Total)','(Calling Lifecycle Methods)',null);}}var valueStack=[];var fiberStack=void 0;{fiberStack=[];}var index=-1;function createCursor(defaultValue){return{current:defaultValue};}function pop(cursor,fiber){if(index<0){{warningWithoutStack$1(false,'Unexpected pop.');}return;}{if(fiber!==fiberStack[index]){warningWithoutStack$1(false,'Unexpected Fiber popped.');}}cursor.current=valueStack[index];valueStack[index]=null;{fiberStack[index]=null;}index--;}function push(cursor,value,fiber){index++;valueStack[index]=cursor.current;{fiberStack[index]=fiber;}cursor.current=value;}function checkThatStackIsEmpty(){{if(index!==-1){warningWithoutStack$1(false,'Expected an empty stack. Something was not reset properly.');}}}function resetStackAfterFatalErrorInDev(){{index=-1;valueStack.length=0;fiberStack.length=0;}}var warnedAboutMissingGetChildContext=void 0;{warnedAboutMissingGetChildContext={};}var emptyContextObject={};{Object.freeze(emptyContextObject);}// A cursor to the current merged context object on the stack.
var contextStackCursor=createCursor(emptyContextObject);// A cursor to a boolean indicating whether the context has changed.
var didPerformWorkStackCursor=createCursor(false);// Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.
var previousContext=emptyContextObject;function getUnmaskedContext(workInProgress,Component,didPushOwnContextIfProvider){if(didPushOwnContextIfProvider&&isContextProvider(Component)){// If the fiber is a context provider itself, when we read its context
// we may have already pushed its own child context on the stack. A context
// provider should not "see" its own child context. Therefore we read the
// previous (parent) context instead for a context provider.
return previousContext;}return contextStackCursor.current;}function cacheContext(workInProgress,unmaskedContext,maskedContext){var instance=workInProgress.stateNode;instance.__reactInternalMemoizedUnmaskedChildContext=unmaskedContext;instance.__reactInternalMemoizedMaskedChildContext=maskedContext;}function getMaskedContext(workInProgress,unmaskedContext){var type=workInProgress.type;var contextTypes=type.contextTypes;if(!contextTypes){return emptyContextObject;}// Avoid recreating masked context unless unmasked context has changed.
// Failing to do this will result in unnecessary calls to componentWillReceiveProps.
// This may trigger infinite loops if componentWillReceiveProps calls setState.
var instance=workInProgress.stateNode;if(instance&&instance.__reactInternalMemoizedUnmaskedChildContext===unmaskedContext){return instance.__reactInternalMemoizedMaskedChildContext;}var context={};for(var key in contextTypes){context[key]=unmaskedContext[key];}{var name=getComponentName(type)||'Unknown';checkPropTypes(contextTypes,context,'context',name,getCurrentFiberStackInDev);}// Cache unmasked context so we can avoid recreating masked context unless necessary.
// Context is created before the class component is instantiated so check for instance.
if(instance){cacheContext(workInProgress,unmaskedContext,context);}return context;}function hasContextChanged(){return didPerformWorkStackCursor.current;}function isContextProvider(type){var childContextTypes=type.childContextTypes;return childContextTypes!==null&&childContextTypes!==undefined;}function popContext(fiber){pop(didPerformWorkStackCursor,fiber);pop(contextStackCursor,fiber);}function popTopLevelContextObject(fiber){pop(didPerformWorkStackCursor,fiber);pop(contextStackCursor,fiber);}function pushTopLevelContextObject(fiber,context,didChange){!(contextStackCursor.current===emptyContextObject)?invariant(false,'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.'):void 0;push(contextStackCursor,context,fiber);push(didPerformWorkStackCursor,didChange,fiber);}function processChildContext(fiber,type,parentContext){var instance=fiber.stateNode;var childContextTypes=type.childContextTypes;// TODO (bvaughn) Replace this behavior with an invariant() in the future.
// It has only been added in Fiber to match the (unintentional) behavior in Stack.
if(typeof instance.getChildContext!=='function'){{var componentName=getComponentName(type)||'Unknown';if(!warnedAboutMissingGetChildContext[componentName]){warnedAboutMissingGetChildContext[componentName]=true;warningWithoutStack$1(false,'%s.childContextTypes is specified but there is no getChildContext() method '+'on the instance. You can either define getChildContext() on %s or remove '+'childContextTypes from it.',componentName,componentName);}}return parentContext;}var childContext=void 0;{setCurrentPhase('getChildContext');}startPhaseTimer(fiber,'getChildContext');childContext=instance.getChildContext();stopPhaseTimer();{setCurrentPhase(null);}for(var contextKey in childContext){!(contextKey in childContextTypes)?invariant(false,'%s.getChildContext(): key "%s" is not defined in childContextTypes.',getComponentName(type)||'Unknown',contextKey):void 0;}{var name=getComponentName(type)||'Unknown';checkPropTypes(childContextTypes,childContext,'child context',name,// In practice, there is one case in which we won't get a stack. It's when
// somebody calls unstable_renderSubtreeIntoContainer() and we process
// context from the parent component instance. The stack will be missing
// because it's outside of the reconciliation, and so the pointer has not
// been set. This is rare and doesn't matter. We'll also remove that API.
getCurrentFiberStackInDev);}return _assign({},parentContext,childContext);}function pushContextProvider(workInProgress){var instance=workInProgress.stateNode;// We push the context as early as possible to ensure stack integrity.
// If the instance does not exist yet, we will push null at first,
// and replace it on the stack later when invalidating the context.
var memoizedMergedChildContext=instance&&instance.__reactInternalMemoizedMergedChildContext||emptyContextObject;// Remember the parent context so we can merge with it later.
// Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
previousContext=contextStackCursor.current;push(contextStackCursor,memoizedMergedChildContext,workInProgress);push(didPerformWorkStackCursor,didPerformWorkStackCursor.current,workInProgress);return true;}function invalidateContextProvider(workInProgress,type,didChange){var instance=workInProgress.stateNode;!instance?invariant(false,'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.'):void 0;if(didChange){// Merge parent and own context.
// Skip this if we're not updating due to sCU.
// This avoids unnecessarily recomputing memoized values.
var mergedContext=processChildContext(workInProgress,type,previousContext);instance.__reactInternalMemoizedMergedChildContext=mergedContext;// Replace the old (or empty) context with the new one.
// It is important to unwind the context in the reverse order.
pop(didPerformWorkStackCursor,workInProgress);pop(contextStackCursor,workInProgress);// Now push the new context and mark that it has changed.
push(contextStackCursor,mergedContext,workInProgress);push(didPerformWorkStackCursor,didChange,workInProgress);}else{pop(didPerformWorkStackCursor,workInProgress);push(didPerformWorkStackCursor,didChange,workInProgress);}}function findCurrentUnmaskedContext(fiber){// Currently this is only used with renderSubtreeIntoContainer; not sure if it
// makes sense elsewhere
!(isFiberMounted(fiber)&&fiber.tag===ClassComponent)?invariant(false,'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.'):void 0;var node=fiber;do{switch(node.tag){case HostRoot:return node.stateNode.context;case ClassComponent:{var Component=node.type;if(isContextProvider(Component)){return node.stateNode.__reactInternalMemoizedMergedChildContext;}break;}}node=node.return;}while(node!==null);invariant(false,'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');}var onCommitFiberRoot=null;var onCommitFiberUnmount=null;var hasLoggedError=false;function catchErrors(fn){return function(arg){try{return fn(arg);}catch(err){if(true&&!hasLoggedError){hasLoggedError=true;warningWithoutStack$1(false,'React DevTools encountered an error: %s',err);}}};}var isDevToolsPresent=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__!=='undefined';function injectInternals(internals){if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__==='undefined'){// No DevTools
return false;}var hook=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(hook.isDisabled){// This isn't a real property on the hook, but it can be set to opt out
// of DevTools integration and associated warnings and logs.
// https://github.com/facebook/react/issues/3877
return true;}if(!hook.supportsFiber){{warningWithoutStack$1(false,'The installed version of React DevTools is too old and will not work '+'with the current version of React. Please update React DevTools. '+'https://fb.me/react-devtools');}// DevTools exists, even though it doesn't support Fiber.
return true;}try{var rendererID=hook.inject(internals);// We have successfully injected, so now it is safe to set up hooks.
onCommitFiberRoot=catchErrors(function(root){return hook.onCommitFiberRoot(rendererID,root);});onCommitFiberUnmount=catchErrors(function(fiber){return hook.onCommitFiberUnmount(rendererID,fiber);});}catch(err){// Catch all errors because it is unsafe to throw during initialization.
{warningWithoutStack$1(false,'React DevTools encountered an error: %s.',err);}}// DevTools exists
return true;}function onCommitRoot(root){if(typeof onCommitFiberRoot==='function'){onCommitFiberRoot(root);}}function onCommitUnmount(fiber){if(typeof onCommitFiberUnmount==='function'){onCommitFiberUnmount(fiber);}}// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var maxSigned31BitInt=1073741823;var NoWork=0;var Sync=1;var Never=maxSigned31BitInt;var UNIT_SIZE=10;var MAGIC_NUMBER_OFFSET=2;// 1 unit of expiration time represents 10ms.
function msToExpirationTime(ms){// Always add an offset so that we don't clash with the magic number for NoWork.
return(ms/UNIT_SIZE|0)+MAGIC_NUMBER_OFFSET;}function expirationTimeToMs(expirationTime){return(expirationTime-MAGIC_NUMBER_OFFSET)*UNIT_SIZE;}function ceiling(num,precision){return((num/precision|0)+1)*precision;}function computeExpirationBucket(currentTime,expirationInMs,bucketSizeMs){return MAGIC_NUMBER_OFFSET+ceiling(currentTime-MAGIC_NUMBER_OFFSET+expirationInMs/UNIT_SIZE,bucketSizeMs/UNIT_SIZE);}var LOW_PRIORITY_EXPIRATION=5000;var LOW_PRIORITY_BATCH_SIZE=250;function computeAsyncExpiration(currentTime){return computeExpirationBucket(currentTime,LOW_PRIORITY_EXPIRATION,LOW_PRIORITY_BATCH_SIZE);}// We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.
var HIGH_PRIORITY_EXPIRATION=500;var HIGH_PRIORITY_BATCH_SIZE=100;function computeInteractiveExpiration(currentTime){return computeExpirationBucket(currentTime,HIGH_PRIORITY_EXPIRATION,HIGH_PRIORITY_BATCH_SIZE);}var NoContext=0;var ConcurrentMode=1;var StrictMode=2;var ProfileMode=4;var hasBadMapPolyfill=void 0;{hasBadMapPolyfill=false;try{var nonExtensibleObject=Object.preventExtensions({});var testMap=new Map([[nonExtensibleObject,null]]);var testSet=new Set([nonExtensibleObject]);// This is necessary for Rollup to not consider these unused.
// https://github.com/rollup/rollup/issues/1771
// TODO: we can remove these if Rollup fixes the bug.
testMap.set(0,0);testSet.add(0);}catch(e){// TODO: Consider warning about bad polyfills
hasBadMapPolyfill=true;}}// A Fiber is work on a Component that needs to be done or was done. There can
// be more than one per component.
var debugCounter=void 0;{debugCounter=1;}function FiberNode(tag,pendingProps,key,mode){// Instance
this.tag=tag;this.key=key;this.elementType=null;this.type=null;this.stateNode=null;// Fiber
this.return=null;this.child=null;this.sibling=null;this.index=0;this.ref=null;this.pendingProps=pendingProps;this.memoizedProps=null;this.updateQueue=null;this.memoizedState=null;this.firstContextDependency=null;this.mode=mode;// Effects
this.effectTag=NoEffect;this.nextEffect=null;this.firstEffect=null;this.lastEffect=null;this.expirationTime=NoWork;this.childExpirationTime=NoWork;this.alternate=null;if(enableProfilerTimer){this.actualDuration=0;this.actualStartTime=-1;this.selfBaseDuration=0;this.treeBaseDuration=0;}{this._debugID=debugCounter++;this._debugSource=null;this._debugOwner=null;this._debugIsCurrentlyTiming=false;if(!hasBadMapPolyfill&&typeof Object.preventExtensions==='function'){Object.preventExtensions(this);}}}// This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.
var createFiber=function(tag,pendingProps,key,mode){// $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
return new FiberNode(tag,pendingProps,key,mode);};function shouldConstruct(Component){var prototype=Component.prototype;return!!(prototype&&prototype.isReactComponent);}function isSimpleFunctionComponent(type){return typeof type==='function'&&!shouldConstruct(type)&&type.defaultProps===undefined;}function resolveLazyComponentTag(Component){if(typeof Component==='function'){return shouldConstruct(Component)?ClassComponent:FunctionComponent;}else if(Component!==undefined&&Component!==null){var $$typeof=Component.$$typeof;if($$typeof===REACT_FORWARD_REF_TYPE){return ForwardRef;}if($$typeof===REACT_MEMO_TYPE){return MemoComponent;}}return IndeterminateComponent;}// This is used to create an alternate fiber to do work on.
function createWorkInProgress(current,pendingProps,expirationTime){var workInProgress=current.alternate;if(workInProgress===null){// We use a double buffering pooling technique because we know that we'll
// only ever need at most two versions of a tree. We pool the "other" unused
// node that we're free to reuse. This is lazily created to avoid allocating
// extra objects for things that are never updated. It also allow us to
// reclaim the extra memory if needed.
workInProgress=createFiber(current.tag,pendingProps,current.key,current.mode);workInProgress.elementType=current.elementType;workInProgress.type=current.type;workInProgress.stateNode=current.stateNode;{// DEV-only fields
workInProgress._debugID=current._debugID;workInProgress._debugSource=current._debugSource;workInProgress._debugOwner=current._debugOwner;}workInProgress.alternate=current;current.alternate=workInProgress;}else{workInProgress.pendingProps=pendingProps;// We already have an alternate.
// Reset the effect tag.
workInProgress.effectTag=NoEffect;// The effect list is no longer valid.
workInProgress.nextEffect=null;workInProgress.firstEffect=null;workInProgress.lastEffect=null;if(enableProfilerTimer){// We intentionally reset, rather than copy, actualDuration & actualStartTime.
// This prevents time from endlessly accumulating in new commits.
// This has the downside of resetting values for different priority renders,
// But works for yielding (the common case) and should support resuming.
workInProgress.actualDuration=0;workInProgress.actualStartTime=-1;}}workInProgress.childExpirationTime=current.childExpirationTime;workInProgress.expirationTime=current.expirationTime;workInProgress.child=current.child;workInProgress.memoizedProps=current.memoizedProps;workInProgress.memoizedState=current.memoizedState;workInProgress.updateQueue=current.updateQueue;workInProgress.firstContextDependency=current.firstContextDependency;// These will be overridden during the parent's reconciliation
workInProgress.sibling=current.sibling;workInProgress.index=current.index;workInProgress.ref=current.ref;if(enableProfilerTimer){workInProgress.selfBaseDuration=current.selfBaseDuration;workInProgress.treeBaseDuration=current.treeBaseDuration;}return workInProgress;}function createHostRootFiber(isConcurrent){var mode=isConcurrent?ConcurrentMode|StrictMode:NoContext;if(enableProfilerTimer&&isDevToolsPresent){// Always collect profile timings when DevTools are present.
// This enables DevTools to start capturing timing at any point–
// Without some nodes in the tree having empty base times.
mode|=ProfileMode;}return createFiber(HostRoot,null,null,mode);}function createFiberFromTypeAndProps(type,// React$ElementType
key,pendingProps,owner,mode,expirationTime){var fiber=void 0;var fiberTag=IndeterminateComponent;// The resolved type is set if we know what the final type will be. I.e. it's not lazy.
var resolvedType=type;if(typeof type==='function'){if(shouldConstruct(type)){fiberTag=ClassComponent;}}else if(typeof type==='string'){fiberTag=HostComponent;}else{getTag:switch(type){case REACT_FRAGMENT_TYPE:return createFiberFromFragment(pendingProps.children,mode,expirationTime,key);case REACT_CONCURRENT_MODE_TYPE:return createFiberFromMode(pendingProps,mode|ConcurrentMode|StrictMode,expirationTime,key);case REACT_STRICT_MODE_TYPE:return createFiberFromMode(pendingProps,mode|StrictMode,expirationTime,key);case REACT_PROFILER_TYPE:return createFiberFromProfiler(pendingProps,mode,expirationTime,key);case REACT_SUSPENSE_TYPE:return createFiberFromSuspense(pendingProps,mode,expirationTime,key);default:{if(typeof type==='object'&&type!==null){switch(type.$$typeof){case REACT_PROVIDER_TYPE:fiberTag=ContextProvider;break getTag;case REACT_CONTEXT_TYPE:// This is a consumer
fiberTag=ContextConsumer;break getTag;case REACT_FORWARD_REF_TYPE:fiberTag=ForwardRef;break getTag;case REACT_MEMO_TYPE:fiberTag=MemoComponent;break getTag;case REACT_LAZY_TYPE:fiberTag=LazyComponent;resolvedType=null;break getTag;}}var info='';{if(type===undefined||typeof type==='object'&&type!==null&&Object.keys(type).length===0){info+=' You likely forgot to export your component from the file '+"it's defined in, or you might have mixed up default and "+'named imports.';}var ownerName=owner?getComponentName(owner.type):null;if(ownerName){info+='\n\nCheck the render method of `'+ownerName+'`.';}}invariant(false,'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s',type==null?type:typeof type,info);}}}fiber=createFiber(fiberTag,pendingProps,key,mode);fiber.elementType=type;fiber.type=resolvedType;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromElement(element,mode,expirationTime){var owner=null;{owner=element._owner;}var type=element.type;var key=element.key;var pendingProps=element.props;var fiber=createFiberFromTypeAndProps(type,key,pendingProps,owner,mode,expirationTime);{fiber._debugSource=element._source;fiber._debugOwner=element._owner;}return fiber;}function createFiberFromFragment(elements,mode,expirationTime,key){var fiber=createFiber(Fragment,elements,key,mode);fiber.expirationTime=expirationTime;return fiber;}function createFiberFromProfiler(pendingProps,mode,expirationTime,key){{if(typeof pendingProps.id!=='string'||typeof pendingProps.onRender!=='function'){warningWithoutStack$1(false,'Profiler must specify an "id" string and "onRender" function as props');}}var fiber=createFiber(Profiler,pendingProps,key,mode|ProfileMode);// TODO: The Profiler fiber shouldn't have a type. It has a tag.
fiber.elementType=REACT_PROFILER_TYPE;fiber.type=REACT_PROFILER_TYPE;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromMode(pendingProps,mode,expirationTime,key){var fiber=createFiber(Mode,pendingProps,key,mode);// TODO: The Mode fiber shouldn't have a type. It has a tag.
var type=(mode&ConcurrentMode)===NoContext?REACT_STRICT_MODE_TYPE:REACT_CONCURRENT_MODE_TYPE;fiber.elementType=type;fiber.type=type;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromSuspense(pendingProps,mode,expirationTime,key){var fiber=createFiber(SuspenseComponent,pendingProps,key,mode);// TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
var type=REACT_SUSPENSE_TYPE;fiber.elementType=type;fiber.type=type;fiber.expirationTime=expirationTime;return fiber;}function createFiberFromText(content,mode,expirationTime){var fiber=createFiber(HostText,content,null,mode);fiber.expirationTime=expirationTime;return fiber;}function createFiberFromHostInstanceForDeletion(){var fiber=createFiber(HostComponent,null,null,NoContext);// TODO: These should not need a type.
fiber.elementType='DELETED';fiber.type='DELETED';return fiber;}function createFiberFromPortal(portal,mode,expirationTime){var pendingProps=portal.children!==null?portal.children:[];var fiber=createFiber(HostPortal,pendingProps,portal.key,mode);fiber.expirationTime=expirationTime;fiber.stateNode={containerInfo:portal.containerInfo,pendingChildren:null,// Used by persistent updates
implementation:portal.implementation};return fiber;}// Used for stashing WIP properties to replay failed work in DEV.
function assignFiberPropertiesInDEV(target,source){if(target===null){// This Fiber's initial properties will always be overwritten.
// We only use a Fiber to ensure the same hidden class so DEV isn't slow.
target=createFiber(IndeterminateComponent,null,null,NoContext);}// This is intentionally written as a list of all properties.
// We tried to use Object.assign() instead but this is called in
// the hottest path, and Object.assign() was too slow:
// https://github.com/facebook/react/issues/12502
// This code is DEV-only so size is not a concern.
target.tag=source.tag;target.key=source.key;target.elementType=source.elementType;target.type=source.type;target.stateNode=source.stateNode;target.return=source.return;target.child=source.child;target.sibling=source.sibling;target.index=source.index;target.ref=source.ref;target.pendingProps=source.pendingProps;target.memoizedProps=source.memoizedProps;target.updateQueue=source.updateQueue;target.memoizedState=source.memoizedState;target.firstContextDependency=source.firstContextDependency;target.mode=source.mode;target.effectTag=source.effectTag;target.nextEffect=source.nextEffect;target.firstEffect=source.firstEffect;target.lastEffect=source.lastEffect;target.expirationTime=source.expirationTime;target.childExpirationTime=source.childExpirationTime;target.alternate=source.alternate;if(enableProfilerTimer){target.actualDuration=source.actualDuration;target.actualStartTime=source.actualStartTime;target.selfBaseDuration=source.selfBaseDuration;target.treeBaseDuration=source.treeBaseDuration;}target._debugID=source._debugID;target._debugSource=source._debugSource;target._debugOwner=source._debugOwner;target._debugIsCurrentlyTiming=source._debugIsCurrentlyTiming;return target;}// TODO: This should be lifted into the renderer.
// The following attributes are only used by interaction tracing builds.
// They enable interactions to be associated with their async work,
// And expose interaction metadata to the React DevTools Profiler plugin.
// Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.
// Exported FiberRoot type includes all properties,
// To avoid requiring potentially error-prone :any casts throughout the project.
// Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
// The types are defined separately within this file to ensure they stay in sync.
// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)
function createFiberRoot(containerInfo,isConcurrent,hydrate){// Cyclic construction. This cheats the type system right now because
// stateNode is any.
var uninitializedFiber=createHostRootFiber(isConcurrent);var root=void 0;if(enableSchedulerTracing){root={current:uninitializedFiber,containerInfo:containerInfo,pendingChildren:null,earliestPendingTime:NoWork,latestPendingTime:NoWork,earliestSuspendedTime:NoWork,latestSuspendedTime:NoWork,latestPingedTime:NoWork,didError:false,pendingCommitExpirationTime:NoWork,finishedWork:null,timeoutHandle:noTimeout,context:null,pendingContext:null,hydrate:hydrate,nextExpirationTimeToWorkOn:NoWork,expirationTime:NoWork,firstBatch:null,nextScheduledRoot:null,interactionThreadID:tracing.unstable_getThreadID(),memoizedInteractions:new Set(),pendingInteractionMap:new Map()};}else{root={current:uninitializedFiber,containerInfo:containerInfo,pendingChildren:null,earliestPendingTime:NoWork,latestPendingTime:NoWork,earliestSuspendedTime:NoWork,latestSuspendedTime:NoWork,latestPingedTime:NoWork,didError:false,pendingCommitExpirationTime:NoWork,finishedWork:null,timeoutHandle:noTimeout,context:null,pendingContext:null,hydrate:hydrate,nextExpirationTimeToWorkOn:NoWork,expirationTime:NoWork,firstBatch:null,nextScheduledRoot:null};}uninitializedFiber.stateNode=root;// The reason for the way the Flow types are structured in this file,
// Is to avoid needing :any casts everywhere interaction tracing fields are used.
// Unfortunately that requires an :any cast for non-interaction tracing capable builds.
// $FlowFixMe Remove this :any cast and replace it with something better.
return root;}/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */var lowPriorityWarning=function(){};{var printWarning=function(format){for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}var argIndex=0;var message='Warning: '+format.replace(/%s/g,function(){return args[argIndex++];});if(typeof console!=='undefined'){console.warn(message);}try{// --- Welcome to debugging React ---
// This error was thrown as a convenience so that you can use this stack
// to find the callsite that caused this warning to fire.
throw new Error(message);}catch(x){}};lowPriorityWarning=function(condition,format){if(format===undefined){throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning '+'message argument');}if(!condition){for(var _len2=arguments.length,args=Array(_len2>2?_len2-2:0),_key2=2;_key2<_len2;_key2++){args[_key2-2]=arguments[_key2];}printWarning.apply(undefined,[format].concat(args));}};}var lowPriorityWarning$1=lowPriorityWarning;var ReactStrictModeWarnings={discardPendingWarnings:function(){},flushPendingDeprecationWarnings:function(){},flushPendingUnsafeLifecycleWarnings:function(){},recordDeprecationWarnings:function(fiber,instance){},recordUnsafeLifecycleWarnings:function(fiber,instance){},recordLegacyContextWarning:function(fiber,instance){},flushLegacyContextWarning:function(){}};{var LIFECYCLE_SUGGESTIONS={UNSAFE_componentWillMount:'componentDidMount',UNSAFE_componentWillReceiveProps:'static getDerivedStateFromProps',UNSAFE_componentWillUpdate:'componentDidUpdate'};var pendingComponentWillMountWarnings=[];var pendingComponentWillReceivePropsWarnings=[];var pendingComponentWillUpdateWarnings=[];var pendingUnsafeLifecycleWarnings=new Map();var pendingLegacyContextWarning=new Map();// Tracks components we have already warned about.
var didWarnAboutDeprecatedLifecycles=new Set();var didWarnAboutUnsafeLifecycles=new Set();var didWarnAboutLegacyContext=new Set();var setToSortedString=function(set){var array=[];set.forEach(function(value){array.push(value);});return array.sort().join(', ');};ReactStrictModeWarnings.discardPendingWarnings=function(){pendingComponentWillMountWarnings=[];pendingComponentWillReceivePropsWarnings=[];pendingComponentWillUpdateWarnings=[];pendingUnsafeLifecycleWarnings=new Map();pendingLegacyContextWarning=new Map();};ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings=function(){pendingUnsafeLifecycleWarnings.forEach(function(lifecycleWarningsMap,strictRoot){var lifecyclesWarningMesages=[];Object.keys(lifecycleWarningsMap).forEach(function(lifecycle){var lifecycleWarnings=lifecycleWarningsMap[lifecycle];if(lifecycleWarnings.length>0){var componentNames=new Set();lifecycleWarnings.forEach(function(fiber){componentNames.add(getComponentName(fiber.type)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});var formatted=lifecycle.replace('UNSAFE_','');var suggestion=LIFECYCLE_SUGGESTIONS[lifecycle];var sortedComponentNames=setToSortedString(componentNames);lifecyclesWarningMesages.push(formatted+': Please update the following components to use '+(suggestion+' instead: '+sortedComponentNames));}});if(lifecyclesWarningMesages.length>0){var strictRootComponentStack=getStackByFiberInDevAndProd(strictRoot);warningWithoutStack$1(false,'Unsafe lifecycle methods were found within a strict-mode tree:%s'+'\n\n%s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-strict-mode-warnings',strictRootComponentStack,lifecyclesWarningMesages.join('\n\n'));}});pendingUnsafeLifecycleWarnings=new Map();};var findStrictRoot=function(fiber){var maybeStrictRoot=null;var node=fiber;while(node!==null){if(node.mode&StrictMode){maybeStrictRoot=node;}node=node.return;}return maybeStrictRoot;};ReactStrictModeWarnings.flushPendingDeprecationWarnings=function(){if(pendingComponentWillMountWarnings.length>0){var uniqueNames=new Set();pendingComponentWillMountWarnings.forEach(function(fiber){uniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutDeprecatedLifecycles.add(fiber.type);});var sortedNames=setToSortedString(uniqueNames);lowPriorityWarning$1(false,'componentWillMount is deprecated and will be removed in the next major version. '+'Use componentDidMount instead. As a temporary workaround, '+'you can rename to UNSAFE_componentWillMount.'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-async-component-lifecycle-hooks',sortedNames);pendingComponentWillMountWarnings=[];}if(pendingComponentWillReceivePropsWarnings.length>0){var _uniqueNames=new Set();pendingComponentWillReceivePropsWarnings.forEach(function(fiber){_uniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutDeprecatedLifecycles.add(fiber.type);});var _sortedNames=setToSortedString(_uniqueNames);lowPriorityWarning$1(false,'componentWillReceiveProps is deprecated and will be removed in the next major version. '+'Use static getDerivedStateFromProps instead.'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-async-component-lifecycle-hooks',_sortedNames);pendingComponentWillReceivePropsWarnings=[];}if(pendingComponentWillUpdateWarnings.length>0){var _uniqueNames2=new Set();pendingComponentWillUpdateWarnings.forEach(function(fiber){_uniqueNames2.add(getComponentName(fiber.type)||'Component');didWarnAboutDeprecatedLifecycles.add(fiber.type);});var _sortedNames2=setToSortedString(_uniqueNames2);lowPriorityWarning$1(false,'componentWillUpdate is deprecated and will be removed in the next major version. '+'Use componentDidUpdate instead. As a temporary workaround, '+'you can rename to UNSAFE_componentWillUpdate.'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-async-component-lifecycle-hooks',_sortedNames2);pendingComponentWillUpdateWarnings=[];}};ReactStrictModeWarnings.recordDeprecationWarnings=function(fiber,instance){// Dedup strategy: Warn once per component.
if(didWarnAboutDeprecatedLifecycles.has(fiber.type)){return;}// Don't warn about react-lifecycles-compat polyfilled components.
if(typeof instance.componentWillMount==='function'&&instance.componentWillMount.__suppressDeprecationWarning!==true){pendingComponentWillMountWarnings.push(fiber);}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true){pendingComponentWillReceivePropsWarnings.push(fiber);}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true){pendingComponentWillUpdateWarnings.push(fiber);}};ReactStrictModeWarnings.recordUnsafeLifecycleWarnings=function(fiber,instance){var strictRoot=findStrictRoot(fiber);if(strictRoot===null){warningWithoutStack$1(false,'Expected to find a StrictMode component in a strict mode tree. '+'This error is likely caused by a bug in React. Please file an issue.');return;}// Dedup strategy: Warn once per component.
// This is difficult to track any other way since component names
// are often vague and are likely to collide between 3rd party libraries.
// An expand property is probably okay to use here since it's DEV-only,
// and will only be set in the event of serious warnings.
if(didWarnAboutUnsafeLifecycles.has(fiber.type)){return;}var warningsForRoot=void 0;if(!pendingUnsafeLifecycleWarnings.has(strictRoot)){warningsForRoot={UNSAFE_componentWillMount:[],UNSAFE_componentWillReceiveProps:[],UNSAFE_componentWillUpdate:[]};pendingUnsafeLifecycleWarnings.set(strictRoot,warningsForRoot);}else{warningsForRoot=pendingUnsafeLifecycleWarnings.get(strictRoot);}var unsafeLifecycles=[];if(typeof instance.componentWillMount==='function'&&instance.componentWillMount.__suppressDeprecationWarning!==true||typeof instance.UNSAFE_componentWillMount==='function'){unsafeLifecycles.push('UNSAFE_componentWillMount');}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true||typeof instance.UNSAFE_componentWillReceiveProps==='function'){unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true||typeof instance.UNSAFE_componentWillUpdate==='function'){unsafeLifecycles.push('UNSAFE_componentWillUpdate');}if(unsafeLifecycles.length>0){unsafeLifecycles.forEach(function(lifecycle){warningsForRoot[lifecycle].push(fiber);});}};ReactStrictModeWarnings.recordLegacyContextWarning=function(fiber,instance){var strictRoot=findStrictRoot(fiber);if(strictRoot===null){warningWithoutStack$1(false,'Expected to find a StrictMode component in a strict mode tree. '+'This error is likely caused by a bug in React. Please file an issue.');return;}// Dedup strategy: Warn once per component.
if(didWarnAboutLegacyContext.has(fiber.type)){return;}var warningsForRoot=pendingLegacyContextWarning.get(strictRoot);if(fiber.type.contextTypes!=null||fiber.type.childContextTypes!=null||instance!==null&&typeof instance.getChildContext==='function'){if(warningsForRoot===undefined){warningsForRoot=[];pendingLegacyContextWarning.set(strictRoot,warningsForRoot);}warningsForRoot.push(fiber);}};ReactStrictModeWarnings.flushLegacyContextWarning=function(){pendingLegacyContextWarning.forEach(function(fiberArray,strictRoot){var uniqueNames=new Set();fiberArray.forEach(function(fiber){uniqueNames.add(getComponentName(fiber.type)||'Component');didWarnAboutLegacyContext.add(fiber.type);});var sortedNames=setToSortedString(uniqueNames);var strictRootComponentStack=getStackByFiberInDevAndProd(strictRoot);warningWithoutStack$1(false,'Legacy context API has been detected within a strict-mode tree: %s'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here:'+'\nhttps://fb.me/react-strict-mode-warnings',strictRootComponentStack,sortedNames);});};}// This lets us hook into Fiber to debug what it's doing.
// See https://github.com/facebook/react/pull/8033.
// This is not part of the public API, not even for React DevTools.
// You may only inject a debugTool if you work on React Fiber itself.
var ReactFiberInstrumentation={debugTool:null};var ReactFiberInstrumentation_1=ReactFiberInstrumentation;// TODO: Offscreen updates should never suspend. However, a promise that
// suspended inside an offscreen subtree should be able to ping at the priority
// of the outer render.
function markPendingPriorityLevel(root,expirationTime){// If there's a gap between completing a failed root and retrying it,
// additional updates may be scheduled. Clear `didError`, in case the update
// is sufficient to fix the error.
root.didError=false;// Update the latest and earliest pending times
var earliestPendingTime=root.earliestPendingTime;if(earliestPendingTime===NoWork){// No other pending updates.
root.earliestPendingTime=root.latestPendingTime=expirationTime;}else{if(earliestPendingTime>expirationTime){// This is the earliest pending update.
root.earliestPendingTime=expirationTime;}else{var latestPendingTime=root.latestPendingTime;if(latestPendingTime<expirationTime){// This is the latest pending update
root.latestPendingTime=expirationTime;}}}findNextExpirationTimeToWorkOn(expirationTime,root);}function markCommittedPriorityLevels(root,earliestRemainingTime){root.didError=false;if(earliestRemainingTime===NoWork){// Fast path. There's no remaining work. Clear everything.
root.earliestPendingTime=NoWork;root.latestPendingTime=NoWork;root.earliestSuspendedTime=NoWork;root.latestSuspendedTime=NoWork;root.latestPingedTime=NoWork;findNextExpirationTimeToWorkOn(NoWork,root);return;}// Let's see if the previous latest known pending level was just flushed.
var latestPendingTime=root.latestPendingTime;if(latestPendingTime!==NoWork){if(latestPendingTime<earliestRemainingTime){// We've flushed all the known pending levels.
root.earliestPendingTime=root.latestPendingTime=NoWork;}else{var earliestPendingTime=root.earliestPendingTime;if(earliestPendingTime<earliestRemainingTime){// We've flushed the earliest known pending level. Set this to the
// latest pending time.
root.earliestPendingTime=root.latestPendingTime;}}}// Now let's handle the earliest remaining level in the whole tree. We need to
// decide whether to treat it as a pending level or as suspended. Check
// it falls within the range of known suspended levels.
var earliestSuspendedTime=root.earliestSuspendedTime;if(earliestSuspendedTime===NoWork){// There's no suspended work. Treat the earliest remaining level as a
// pending level.
markPendingPriorityLevel(root,earliestRemainingTime);findNextExpirationTimeToWorkOn(NoWork,root);return;}var latestSuspendedTime=root.latestSuspendedTime;if(earliestRemainingTime>latestSuspendedTime){// The earliest remaining level is later than all the suspended work. That
// means we've flushed all the suspended work.
root.earliestSuspendedTime=NoWork;root.latestSuspendedTime=NoWork;root.latestPingedTime=NoWork;// There's no suspended work. Treat the earliest remaining level as a
// pending level.
markPendingPriorityLevel(root,earliestRemainingTime);findNextExpirationTimeToWorkOn(NoWork,root);return;}if(earliestRemainingTime<earliestSuspendedTime){// The earliest remaining time is earlier than all the suspended work.
// Treat it as a pending update.
markPendingPriorityLevel(root,earliestRemainingTime);findNextExpirationTimeToWorkOn(NoWork,root);return;}// The earliest remaining time falls within the range of known suspended
// levels. We should treat this as suspended work.
findNextExpirationTimeToWorkOn(NoWork,root);}function hasLowerPriorityWork(root,erroredExpirationTime){var latestPendingTime=root.latestPendingTime;var latestSuspendedTime=root.latestSuspendedTime;var latestPingedTime=root.latestPingedTime;return latestPendingTime!==NoWork&&latestPendingTime>erroredExpirationTime||latestSuspendedTime!==NoWork&&latestSuspendedTime>erroredExpirationTime||latestPingedTime!==NoWork&&latestPingedTime>erroredExpirationTime;}function isPriorityLevelSuspended(root,expirationTime){var earliestSuspendedTime=root.earliestSuspendedTime;var latestSuspendedTime=root.latestSuspendedTime;return earliestSuspendedTime!==NoWork&&expirationTime>=earliestSuspendedTime&&expirationTime<=latestSuspendedTime;}function markSuspendedPriorityLevel(root,suspendedTime){root.didError=false;clearPing(root,suspendedTime);// First, check the known pending levels and update them if needed.
var earliestPendingTime=root.earliestPendingTime;var latestPendingTime=root.latestPendingTime;if(earliestPendingTime===suspendedTime){if(latestPendingTime===suspendedTime){// Both known pending levels were suspended. Clear them.
root.earliestPendingTime=root.latestPendingTime=NoWork;}else{// The earliest pending level was suspended. Clear by setting it to the
// latest pending level.
root.earliestPendingTime=latestPendingTime;}}else if(latestPendingTime===suspendedTime){// The latest pending level was suspended. Clear by setting it to the
// latest pending level.
root.latestPendingTime=earliestPendingTime;}// Finally, update the known suspended levels.
var earliestSuspendedTime=root.earliestSuspendedTime;var latestSuspendedTime=root.latestSuspendedTime;if(earliestSuspendedTime===NoWork){// No other suspended levels.
root.earliestSuspendedTime=root.latestSuspendedTime=suspendedTime;}else{if(earliestSuspendedTime>suspendedTime){// This is the earliest suspended level.
root.earliestSuspendedTime=suspendedTime;}else if(latestSuspendedTime<suspendedTime){// This is the latest suspended level
root.latestSuspendedTime=suspendedTime;}}findNextExpirationTimeToWorkOn(suspendedTime,root);}function markPingedPriorityLevel(root,pingedTime){root.didError=false;// TODO: When we add back resuming, we need to ensure the progressed work
// is thrown out and not reused during the restarted render. One way to
// invalidate the progressed work is to restart at expirationTime + 1.
var latestPingedTime=root.latestPingedTime;if(latestPingedTime===NoWork||latestPingedTime<pingedTime){root.latestPingedTime=pingedTime;}findNextExpirationTimeToWorkOn(pingedTime,root);}function clearPing(root,completedTime){// TODO: Track whether the root was pinged during the render phase. If so,
// we need to make sure we don't lose track of it.
var latestPingedTime=root.latestPingedTime;if(latestPingedTime!==NoWork&&latestPingedTime<=completedTime){root.latestPingedTime=NoWork;}}function findEarliestOutstandingPriorityLevel(root,renderExpirationTime){var earliestExpirationTime=renderExpirationTime;var earliestPendingTime=root.earliestPendingTime;var earliestSuspendedTime=root.earliestSuspendedTime;if(earliestExpirationTime===NoWork||earliestPendingTime!==NoWork&&earliestPendingTime<earliestExpirationTime){earliestExpirationTime=earliestPendingTime;}if(earliestExpirationTime===NoWork||earliestSuspendedTime!==NoWork&&earliestSuspendedTime<earliestExpirationTime){earliestExpirationTime=earliestSuspendedTime;}return earliestExpirationTime;}function didExpireAtExpirationTime(root,currentTime){var expirationTime=root.expirationTime;if(expirationTime!==NoWork&&currentTime>=expirationTime){// The root has expired. Flush all work up to the current time.
root.nextExpirationTimeToWorkOn=currentTime;}}function findNextExpirationTimeToWorkOn(completedExpirationTime,root){var earliestSuspendedTime=root.earliestSuspendedTime;var latestSuspendedTime=root.latestSuspendedTime;var earliestPendingTime=root.earliestPendingTime;var latestPingedTime=root.latestPingedTime;// Work on the earliest pending time. Failing that, work on the latest
// pinged time.
var nextExpirationTimeToWorkOn=earliestPendingTime!==NoWork?earliestPendingTime:latestPingedTime;// If there is no pending or pinged work, check if there's suspended work
// that's lower priority than what we just completed.
if(nextExpirationTimeToWorkOn===NoWork&&(completedExpirationTime===NoWork||latestSuspendedTime>completedExpirationTime)){// The lowest priority suspended work is the work most likely to be
// committed next. Let's start rendering it again, so that if it times out,
// it's ready to commit.
nextExpirationTimeToWorkOn=latestSuspendedTime;}var expirationTime=nextExpirationTimeToWorkOn;if(expirationTime!==NoWork&&earliestSuspendedTime!==NoWork&&earliestSuspendedTime<expirationTime){// Expire using the earliest known expiration time.
expirationTime=earliestSuspendedTime;}root.nextExpirationTimeToWorkOn=nextExpirationTimeToWorkOn;root.expirationTime=expirationTime;}// UpdateQueue is a linked list of prioritized updates.
//
// Like fibers, update queues come in pairs: a current queue, which represents
// the visible state of the screen, and a work-in-progress queue, which is
// can be mutated and processed asynchronously before it is committed — a form
// of double buffering. If a work-in-progress render is discarded before
// finishing, we create a new work-in-progress by cloning the current queue.
//
// Both queues share a persistent, singly-linked list structure. To schedule an
// update, we append it to the end of both queues. Each queue maintains a
// pointer to first update in the persistent list that hasn't been processed.
// The work-in-progress pointer always has a position equal to or greater than
// the current queue, since we always work on that one. The current queue's
// pointer is only updated during the commit phase, when we swap in the
// work-in-progress.
//
// For example:
//
//   Current pointer:           A - B - C - D - E - F
//   Work-in-progress pointer:              D - E - F
//                                          ^
//                                          The work-in-progress queue has
//                                          processed more updates than current.
//
// The reason we append to both queues is because otherwise we might drop
// updates without ever processing them. For example, if we only add updates to
// the work-in-progress queue, some updates could be lost whenever a work-in
// -progress render restarts by cloning from current. Similarly, if we only add
// updates to the current queue, the updates will be lost whenever an already
// in-progress queue commits and swaps with the current queue. However, by
// adding to both queues, we guarantee that the update will be part of the next
// work-in-progress. (And because the work-in-progress queue becomes the
// current queue once it commits, there's no danger of applying the same
// update twice.)
//
// Prioritization
// --------------
//
// Updates are not sorted by priority, but by insertion; new updates are always
// appended to the end of the list.
//
// The priority is still important, though. When processing the update queue
// during the render phase, only the updates with sufficient priority are
// included in the result. If we skip an update because it has insufficient
// priority, it remains in the queue to be processed later, during a lower
// priority render. Crucially, all updates subsequent to a skipped update also
// remain in the queue *regardless of their priority*. That means high priority
// updates are sometimes processed twice, at two separate priorities. We also
// keep track of a base state, that represents the state before the first
// update in the queue is applied.
//
// For example:
//
//   Given a base state of '', and the following queue of updates
//
//     A1 - B2 - C1 - D2
//
//   where the number indicates the priority, and the update is applied to the
//   previous state by appending a letter, React will process these updates as
//   two separate renders, one per distinct priority level:
//
//   First render, at priority 1:
//     Base state: ''
//     Updates: [A1, C1]
//     Result state: 'AC'
//
//   Second render, at priority 2:
//     Base state: 'A'            <-  The base state does not include C1,
//                                    because B2 was skipped.
//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
//     Result state: 'ABCD'
//
// Because we process updates in insertion order, and rebase high priority
// updates when preceding updates are skipped, the final result is deterministic
// regardless of priority. Intermediate state may vary according to system
// resources, but the final state is always the same.
var UpdateState=0;var ReplaceState=1;var ForceUpdate=2;var CaptureUpdate=3;// Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.
var hasForceUpdate=false;var didWarnUpdateInsideUpdate=void 0;var currentlyProcessingQueue=void 0;var resetCurrentlyProcessingQueue=void 0;{didWarnUpdateInsideUpdate=false;currentlyProcessingQueue=null;resetCurrentlyProcessingQueue=function(){currentlyProcessingQueue=null;};}function createUpdateQueue(baseState){var queue={baseState:baseState,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null};return queue;}function cloneUpdateQueue(currentQueue){var queue={baseState:currentQueue.baseState,firstUpdate:currentQueue.firstUpdate,lastUpdate:currentQueue.lastUpdate,// TODO: With resuming, if we bail out and resuse the child tree, we should
// keep these effects.
firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null};return queue;}function createUpdate(expirationTime){return{expirationTime:expirationTime,tag:UpdateState,payload:null,callback:null,next:null,nextEffect:null};}function appendUpdateToQueue(queue,update){// Append the update to the end of the list.
if(queue.lastUpdate===null){// Queue is empty
queue.firstUpdate=queue.lastUpdate=update;}else{queue.lastUpdate.next=update;queue.lastUpdate=update;}}function enqueueUpdate(fiber,update){// Update queues are created lazily.
var alternate=fiber.alternate;var queue1=void 0;var queue2=void 0;if(alternate===null){// There's only one fiber.
queue1=fiber.updateQueue;queue2=null;if(queue1===null){queue1=fiber.updateQueue=createUpdateQueue(fiber.memoizedState);}}else{// There are two owners.
queue1=fiber.updateQueue;queue2=alternate.updateQueue;if(queue1===null){if(queue2===null){// Neither fiber has an update queue. Create new ones.
queue1=fiber.updateQueue=createUpdateQueue(fiber.memoizedState);queue2=alternate.updateQueue=createUpdateQueue(alternate.memoizedState);}else{// Only one fiber has an update queue. Clone to create a new one.
queue1=fiber.updateQueue=cloneUpdateQueue(queue2);}}else{if(queue2===null){// Only one fiber has an update queue. Clone to create a new one.
queue2=alternate.updateQueue=cloneUpdateQueue(queue1);}else{// Both owners have an update queue.
}}}if(queue2===null||queue1===queue2){// There's only a single queue.
appendUpdateToQueue(queue1,update);}else{// There are two queues. We need to append the update to both queues,
// while accounting for the persistent structure of the list — we don't
// want the same update to be added multiple times.
if(queue1.lastUpdate===null||queue2.lastUpdate===null){// One of the queues is not empty. We must add the update to both queues.
appendUpdateToQueue(queue1,update);appendUpdateToQueue(queue2,update);}else{// Both queues are non-empty. The last update is the same in both lists,
// because of structural sharing. So, only append to one of the lists.
appendUpdateToQueue(queue1,update);// But we still need to update the `lastUpdate` pointer of queue2.
queue2.lastUpdate=update;}}{if(fiber.tag===ClassComponent&&(currentlyProcessingQueue===queue1||queue2!==null&&currentlyProcessingQueue===queue2)&&!didWarnUpdateInsideUpdate){warningWithoutStack$1(false,'An update (setState, replaceState, or forceUpdate) was scheduled '+'from inside an update function. Update functions should be pure, '+'with zero side-effects. Consider using componentDidUpdate or a '+'callback.');didWarnUpdateInsideUpdate=true;}}}function enqueueCapturedUpdate(workInProgress,update){// Captured updates go into a separate list, and only on the work-in-
// progress queue.
var workInProgressQueue=workInProgress.updateQueue;if(workInProgressQueue===null){workInProgressQueue=workInProgress.updateQueue=createUpdateQueue(workInProgress.memoizedState);}else{// TODO: I put this here rather than createWorkInProgress so that we don't
// clone the queue unnecessarily. There's probably a better way to
// structure this.
workInProgressQueue=ensureWorkInProgressQueueIsAClone(workInProgress,workInProgressQueue);}// Append the update to the end of the list.
if(workInProgressQueue.lastCapturedUpdate===null){// This is the first render phase update
workInProgressQueue.firstCapturedUpdate=workInProgressQueue.lastCapturedUpdate=update;}else{workInProgressQueue.lastCapturedUpdate.next=update;workInProgressQueue.lastCapturedUpdate=update;}}function ensureWorkInProgressQueueIsAClone(workInProgress,queue){var current=workInProgress.alternate;if(current!==null){// If the work-in-progress queue is equal to the current queue,
// we need to clone it first.
if(queue===current.updateQueue){queue=workInProgress.updateQueue=cloneUpdateQueue(queue);}}return queue;}function getStateFromUpdate(workInProgress,queue,update,prevState,nextProps,instance){switch(update.tag){case ReplaceState:{var _payload=update.payload;if(typeof _payload==='function'){// Updater function
{if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){_payload.call(instance,prevState,nextProps);}}return _payload.call(instance,prevState,nextProps);}// State object
return _payload;}case CaptureUpdate:{workInProgress.effectTag=workInProgress.effectTag&~ShouldCapture|DidCapture;}// Intentional fallthrough
case UpdateState:{var _payload2=update.payload;var partialState=void 0;if(typeof _payload2==='function'){// Updater function
{if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){_payload2.call(instance,prevState,nextProps);}}partialState=_payload2.call(instance,prevState,nextProps);}else{// Partial state object
partialState=_payload2;}if(partialState===null||partialState===undefined){// Null and undefined are treated as no-ops.
return prevState;}// Merge the partial state and the previous state.
return _assign({},prevState,partialState);}case ForceUpdate:{hasForceUpdate=true;return prevState;}}return prevState;}function processUpdateQueue(workInProgress,queue,props,instance,renderExpirationTime){hasForceUpdate=false;queue=ensureWorkInProgressQueueIsAClone(workInProgress,queue);{currentlyProcessingQueue=queue;}// These values may change as we process the queue.
var newBaseState=queue.baseState;var newFirstUpdate=null;var newExpirationTime=NoWork;// Iterate through the list of updates to compute the result.
var update=queue.firstUpdate;var resultState=newBaseState;while(update!==null){var updateExpirationTime=update.expirationTime;if(updateExpirationTime>renderExpirationTime){// This update does not have sufficient priority. Skip it.
if(newFirstUpdate===null){// This is the first skipped update. It will be the first update in
// the new list.
newFirstUpdate=update;// Since this is the first update that was skipped, the current result
// is the new base state.
newBaseState=resultState;}// Since this update will remain in the list, update the remaining
// expiration time.
if(newExpirationTime===NoWork||newExpirationTime>updateExpirationTime){newExpirationTime=updateExpirationTime;}}else{// This update does have sufficient priority. Process it and compute
// a new result.
resultState=getStateFromUpdate(workInProgress,queue,update,resultState,props,instance);var _callback=update.callback;if(_callback!==null){workInProgress.effectTag|=Callback;// Set this to null, in case it was mutated during an aborted render.
update.nextEffect=null;if(queue.lastEffect===null){queue.firstEffect=queue.lastEffect=update;}else{queue.lastEffect.nextEffect=update;queue.lastEffect=update;}}}// Continue to the next update.
update=update.next;}// Separately, iterate though the list of captured updates.
var newFirstCapturedUpdate=null;update=queue.firstCapturedUpdate;while(update!==null){var _updateExpirationTime=update.expirationTime;if(_updateExpirationTime>renderExpirationTime){// This update does not have sufficient priority. Skip it.
if(newFirstCapturedUpdate===null){// This is the first skipped captured update. It will be the first
// update in the new list.
newFirstCapturedUpdate=update;// If this is the first update that was skipped, the current result is
// the new base state.
if(newFirstUpdate===null){newBaseState=resultState;}}// Since this update will remain in the list, update the remaining
// expiration time.
if(newExpirationTime===NoWork||newExpirationTime>_updateExpirationTime){newExpirationTime=_updateExpirationTime;}}else{// This update does have sufficient priority. Process it and compute
// a new result.
resultState=getStateFromUpdate(workInProgress,queue,update,resultState,props,instance);var _callback2=update.callback;if(_callback2!==null){workInProgress.effectTag|=Callback;// Set this to null, in case it was mutated during an aborted render.
update.nextEffect=null;if(queue.lastCapturedEffect===null){queue.firstCapturedEffect=queue.lastCapturedEffect=update;}else{queue.lastCapturedEffect.nextEffect=update;queue.lastCapturedEffect=update;}}}update=update.next;}if(newFirstUpdate===null){queue.lastUpdate=null;}if(newFirstCapturedUpdate===null){queue.lastCapturedUpdate=null;}else{workInProgress.effectTag|=Callback;}if(newFirstUpdate===null&&newFirstCapturedUpdate===null){// We processed every update, without skipping. That means the new base
// state is the same as the result state.
newBaseState=resultState;}queue.baseState=newBaseState;queue.firstUpdate=newFirstUpdate;queue.firstCapturedUpdate=newFirstCapturedUpdate;// Set the remaining expiration time to be whatever is remaining in the queue.
// This should be fine because the only two other things that contribute to
// expiration time are props and context. We're already in the middle of the
// begin phase by the time we start processing the queue, so we've already
// dealt with the props. Context in components that specify
// shouldComponentUpdate is tricky; but we'll have to account for
// that regardless.
workInProgress.expirationTime=newExpirationTime;workInProgress.memoizedState=resultState;{currentlyProcessingQueue=null;}}function callCallback(callback,context){!(typeof callback==='function')?invariant(false,'Invalid argument passed as callback. Expected a function. Instead received: %s',callback):void 0;callback.call(context);}function resetHasForceUpdateBeforeProcessing(){hasForceUpdate=false;}function checkHasForceUpdateAfterProcessing(){return hasForceUpdate;}function commitUpdateQueue(finishedWork,finishedQueue,instance,renderExpirationTime){// If the finished render included captured updates, and there are still
// lower priority updates left over, we need to keep the captured updates
// in the queue so that they are rebased and not dropped once we process the
// queue again at the lower priority.
if(finishedQueue.firstCapturedUpdate!==null){// Join the captured update list to the end of the normal list.
if(finishedQueue.lastUpdate!==null){finishedQueue.lastUpdate.next=finishedQueue.firstCapturedUpdate;finishedQueue.lastUpdate=finishedQueue.lastCapturedUpdate;}// Clear the list of captured updates.
finishedQueue.firstCapturedUpdate=finishedQueue.lastCapturedUpdate=null;}// Commit the effects
commitUpdateEffects(finishedQueue.firstEffect,instance);finishedQueue.firstEffect=finishedQueue.lastEffect=null;commitUpdateEffects(finishedQueue.firstCapturedEffect,instance);finishedQueue.firstCapturedEffect=finishedQueue.lastCapturedEffect=null;}function commitUpdateEffects(effect,instance){while(effect!==null){var _callback3=effect.callback;if(_callback3!==null){effect.callback=null;callCallback(_callback3,instance);}effect=effect.nextEffect;}}function createCapturedValue(value,source){// If the value is an error, call this function immediately after it is thrown
// so the stack is accurate.
return{value:value,source:source,stack:getStackByFiberInDevAndProd(source)};}var valueCursor=createCursor(null);var rendererSigil=void 0;{// Use this to detect multiple renderers using the same context
rendererSigil={};}var currentlyRenderingFiber=null;var lastContextDependency=null;var lastContextWithAllBitsObserved=null;function resetContextDependences(){// This is called right before React yields execution, to ensure `readContext`
// cannot be called outside the render phase.
currentlyRenderingFiber=null;lastContextDependency=null;lastContextWithAllBitsObserved=null;}function pushProvider(providerFiber,nextValue){var context=providerFiber.type._context;if(isPrimaryRenderer){push(valueCursor,context._currentValue,providerFiber);context._currentValue=nextValue;{!(context._currentRenderer===undefined||context._currentRenderer===null||context._currentRenderer===rendererSigil)?warningWithoutStack$1(false,'Detected multiple renderers concurrently rendering the '+'same context provider. This is currently unsupported.'):void 0;context._currentRenderer=rendererSigil;}}else{push(valueCursor,context._currentValue2,providerFiber);context._currentValue2=nextValue;{!(context._currentRenderer2===undefined||context._currentRenderer2===null||context._currentRenderer2===rendererSigil)?warningWithoutStack$1(false,'Detected multiple renderers concurrently rendering the '+'same context provider. This is currently unsupported.'):void 0;context._currentRenderer2=rendererSigil;}}}function popProvider(providerFiber){var currentValue=valueCursor.current;pop(valueCursor,providerFiber);var context=providerFiber.type._context;if(isPrimaryRenderer){context._currentValue=currentValue;}else{context._currentValue2=currentValue;}}function calculateChangedBits(context,newValue,oldValue){// Use Object.is to compare the new context value to the old value. Inlined
// Object.is polyfill.
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
if(oldValue===newValue&&(oldValue!==0||1/oldValue===1/newValue)||oldValue!==oldValue&&newValue!==newValue// eslint-disable-line no-self-compare
){// No change
return 0;}else{var changedBits=typeof context._calculateChangedBits==='function'?context._calculateChangedBits(oldValue,newValue):maxSigned31BitInt;{!((changedBits&maxSigned31BitInt)===changedBits)?warning$1(false,'calculateChangedBits: Expected the return value to be a '+'31-bit integer. Instead received: %s',changedBits):void 0;}return changedBits|0;}}function propagateContextChange(workInProgress,context,changedBits,renderExpirationTime){var fiber=workInProgress.child;if(fiber!==null){// Set the return pointer of the child to the work-in-progress fiber.
fiber.return=workInProgress;}while(fiber!==null){var nextFiber=void 0;// Visit this fiber.
var dependency=fiber.firstContextDependency;if(dependency!==null){do{// Check if the context matches.
if(dependency.context===context&&(dependency.observedBits&changedBits)!==0){// Match! Schedule an update on this fiber.
if(fiber.tag===ClassComponent){// Schedule a force update on the work-in-progress.
var update=createUpdate(renderExpirationTime);update.tag=ForceUpdate;// TODO: Because we don't have a work-in-progress, this will add the
// update to the current fiber, too, which means it will persist even if
// this render is thrown away. Since it's a race condition, not sure it's
// worth fixing.
enqueueUpdate(fiber,update);}if(fiber.expirationTime===NoWork||fiber.expirationTime>renderExpirationTime){fiber.expirationTime=renderExpirationTime;}var alternate=fiber.alternate;if(alternate!==null&&(alternate.expirationTime===NoWork||alternate.expirationTime>renderExpirationTime)){alternate.expirationTime=renderExpirationTime;}// Update the child expiration time of all the ancestors, including
// the alternates.
var node=fiber.return;while(node!==null){alternate=node.alternate;if(node.childExpirationTime===NoWork||node.childExpirationTime>renderExpirationTime){node.childExpirationTime=renderExpirationTime;if(alternate!==null&&(alternate.childExpirationTime===NoWork||alternate.childExpirationTime>renderExpirationTime)){alternate.childExpirationTime=renderExpirationTime;}}else if(alternate!==null&&(alternate.childExpirationTime===NoWork||alternate.childExpirationTime>renderExpirationTime)){alternate.childExpirationTime=renderExpirationTime;}else{// Neither alternate was updated, which means the rest of the
// ancestor path already has sufficient priority.
break;}node=node.return;}}nextFiber=fiber.child;dependency=dependency.next;}while(dependency!==null);}else if(fiber.tag===ContextProvider){// Don't scan deeper if this is a matching provider
nextFiber=fiber.type===workInProgress.type?null:fiber.child;}else{// Traverse down.
nextFiber=fiber.child;}if(nextFiber!==null){// Set the return pointer of the child to the work-in-progress fiber.
nextFiber.return=fiber;}else{// No child. Traverse to next sibling.
nextFiber=fiber;while(nextFiber!==null){if(nextFiber===workInProgress){// We're back to the root of this subtree. Exit.
nextFiber=null;break;}var sibling=nextFiber.sibling;if(sibling!==null){// Set the return pointer of the sibling to the work-in-progress fiber.
sibling.return=nextFiber.return;nextFiber=sibling;break;}// No more siblings. Traverse up.
nextFiber=nextFiber.return;}}fiber=nextFiber;}}function prepareToReadContext(workInProgress,renderExpirationTime){currentlyRenderingFiber=workInProgress;lastContextDependency=null;lastContextWithAllBitsObserved=null;// Reset the work-in-progress list
workInProgress.firstContextDependency=null;}function readContext(context,observedBits){if(lastContextWithAllBitsObserved===context){// Nothing to do. We already observe everything in this context.
}else if(observedBits===false||observedBits===0){// Do not observe any updates.
}else{var resolvedObservedBits=void 0;// Avoid deopting on observable arguments or heterogeneous types.
if(typeof observedBits!=='number'||observedBits===maxSigned31BitInt){// Observe all updates.
lastContextWithAllBitsObserved=context;resolvedObservedBits=maxSigned31BitInt;}else{resolvedObservedBits=observedBits;}var contextItem={context:context,observedBits:resolvedObservedBits,next:null};if(lastContextDependency===null){!(currentlyRenderingFiber!==null)?invariant(false,'Context can only be read while React is rendering, e.g. inside the render method or getDerivedStateFromProps.'):void 0;// This is the first dependency in the list
currentlyRenderingFiber.firstContextDependency=lastContextDependency=contextItem;}else{// Append a new context item.
lastContextDependency=lastContextDependency.next=contextItem;}}return isPrimaryRenderer?context._currentValue:context._currentValue2;}var NO_CONTEXT={};var contextStackCursor$1=createCursor(NO_CONTEXT);var contextFiberStackCursor=createCursor(NO_CONTEXT);var rootInstanceStackCursor=createCursor(NO_CONTEXT);function requiredContext(c){!(c!==NO_CONTEXT)?invariant(false,'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.'):void 0;return c;}function getRootHostContainer(){var rootInstance=requiredContext(rootInstanceStackCursor.current);return rootInstance;}function pushHostContainer(fiber,nextRootInstance){// Push current root instance onto the stack;
// This allows us to reset root when portals are popped.
push(rootInstanceStackCursor,nextRootInstance,fiber);// Track the context and the Fiber that provided it.
// This enables us to pop only Fibers that provide unique contexts.
push(contextFiberStackCursor,fiber,fiber);// Finally, we need to push the host context to the stack.
// However, we can't just call getRootHostContext() and push it because
// we'd have a different number of entries on the stack depending on
// whether getRootHostContext() throws somewhere in renderer code or not.
// So we push an empty value first. This lets us safely unwind on errors.
push(contextStackCursor$1,NO_CONTEXT,fiber);var nextRootContext=getRootHostContext(nextRootInstance);// Now that we know this function doesn't throw, replace it.
pop(contextStackCursor$1,fiber);push(contextStackCursor$1,nextRootContext,fiber);}function popHostContainer(fiber){pop(contextStackCursor$1,fiber);pop(contextFiberStackCursor,fiber);pop(rootInstanceStackCursor,fiber);}function getHostContext(){var context=requiredContext(contextStackCursor$1.current);return context;}function pushHostContext(fiber){var rootInstance=requiredContext(rootInstanceStackCursor.current);var context=requiredContext(contextStackCursor$1.current);var nextContext=getChildHostContext(context,fiber.type,rootInstance);// Don't push this Fiber's context unless it's unique.
if(context===nextContext){return;}// Track the context and the Fiber that provided it.
// This enables us to pop only Fibers that provide unique contexts.
push(contextFiberStackCursor,fiber,fiber);push(contextStackCursor$1,nextContext,fiber);}function popHostContext(fiber){// Do not pop unless this Fiber provided the current context.
// pushHostContext() only pushes Fibers that provide unique contexts.
if(contextFiberStackCursor.current!==fiber){return;}pop(contextStackCursor$1,fiber);pop(contextFiberStackCursor,fiber);}var commitTime=0;var profilerStartTime=-1;function getCommitTime(){return commitTime;}function recordCommitTime(){if(!enableProfilerTimer){return;}commitTime=scheduler.unstable_now();}function startProfilerTimer(fiber){if(!enableProfilerTimer){return;}profilerStartTime=scheduler.unstable_now();if(fiber.actualStartTime<0){fiber.actualStartTime=scheduler.unstable_now();}}function stopProfilerTimerIfRunning(fiber){if(!enableProfilerTimer){return;}profilerStartTime=-1;}function stopProfilerTimerIfRunningAndRecordDelta(fiber,overrideBaseTime){if(!enableProfilerTimer){return;}if(profilerStartTime>=0){var elapsedTime=scheduler.unstable_now()-profilerStartTime;fiber.actualDuration+=elapsedTime;if(overrideBaseTime){fiber.selfBaseDuration=elapsedTime;}profilerStartTime=-1;}}var ReactCurrentOwner$4=ReactSharedInternals.ReactCurrentOwner;function readContext$1(contextType){var dispatcher=ReactCurrentOwner$4.currentDispatcher;return dispatcher.readContext(contextType);}var fakeInternalInstance={};var isArray$1=Array.isArray;// React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.
var emptyRefsObject=new React.Component().refs;var didWarnAboutStateAssignmentForComponent=void 0;var didWarnAboutUninitializedState=void 0;var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate=void 0;var didWarnAboutLegacyLifecyclesAndDerivedState=void 0;var didWarnAboutUndefinedDerivedState=void 0;var warnOnUndefinedDerivedState=void 0;var warnOnInvalidCallback$1=void 0;var didWarnAboutDirectlyAssigningPropsToState=void 0;var didWarnAboutContextTypeAndContextTypes=void 0;var didWarnAboutInvalidateContextType=void 0;{didWarnAboutStateAssignmentForComponent=new Set();didWarnAboutUninitializedState=new Set();didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate=new Set();didWarnAboutLegacyLifecyclesAndDerivedState=new Set();didWarnAboutDirectlyAssigningPropsToState=new Set();didWarnAboutUndefinedDerivedState=new Set();didWarnAboutContextTypeAndContextTypes=new Set();didWarnAboutInvalidateContextType=new Set();var didWarnOnInvalidCallback=new Set();warnOnInvalidCallback$1=function(callback,callerName){if(callback===null||typeof callback==='function'){return;}var key=callerName+'_'+callback;if(!didWarnOnInvalidCallback.has(key)){didWarnOnInvalidCallback.add(key);warningWithoutStack$1(false,'%s(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callerName,callback);}};warnOnUndefinedDerivedState=function(type,partialState){if(partialState===undefined){var componentName=getComponentName(type)||'Component';if(!didWarnAboutUndefinedDerivedState.has(componentName)){didWarnAboutUndefinedDerivedState.add(componentName);warningWithoutStack$1(false,'%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. '+'You have returned undefined.',componentName);}}};// This is so gross but it's at least non-critical and can be removed if
// it causes problems. This is meant to give a nicer error message for
// ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
// ...)) which otherwise throws a "_processChildContext is not a function"
// exception.
Object.defineProperty(fakeInternalInstance,'_processChildContext',{enumerable:false,value:function(){invariant(false,'_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');}});Object.freeze(fakeInternalInstance);}function applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,nextProps){var prevState=workInProgress.memoizedState;{if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){// Invoke the function an extra time to help detect side-effects.
getDerivedStateFromProps(nextProps,prevState);}}var partialState=getDerivedStateFromProps(nextProps,prevState);{warnOnUndefinedDerivedState(ctor,partialState);}// Merge the partial state and the previous state.
var memoizedState=partialState===null||partialState===undefined?prevState:_assign({},prevState,partialState);workInProgress.memoizedState=memoizedState;// Once the update queue is empty, persist the derived state onto the
// base state.
var updateQueue=workInProgress.updateQueue;if(updateQueue!==null&&workInProgress.expirationTime===NoWork){updateQueue.baseState=memoizedState;}}var classComponentUpdater={isMounted:isMounted,enqueueSetState:function(inst,payload,callback){var fiber=get(inst);var currentTime=requestCurrentTime();var expirationTime=computeExpirationForFiber(currentTime,fiber);var update=createUpdate(expirationTime);update.payload=payload;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback$1(callback,'setState');}update.callback=callback;}enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);},enqueueReplaceState:function(inst,payload,callback){var fiber=get(inst);var currentTime=requestCurrentTime();var expirationTime=computeExpirationForFiber(currentTime,fiber);var update=createUpdate(expirationTime);update.tag=ReplaceState;update.payload=payload;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback$1(callback,'replaceState');}update.callback=callback;}enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);},enqueueForceUpdate:function(inst,callback){var fiber=get(inst);var currentTime=requestCurrentTime();var expirationTime=computeExpirationForFiber(currentTime,fiber);var update=createUpdate(expirationTime);update.tag=ForceUpdate;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback$1(callback,'forceUpdate');}update.callback=callback;}enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);}};function checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext){var instance=workInProgress.stateNode;if(typeof instance.shouldComponentUpdate==='function'){startPhaseTimer(workInProgress,'shouldComponentUpdate');var shouldUpdate=instance.shouldComponentUpdate(newProps,newState,nextContext);stopPhaseTimer();{!(shouldUpdate!==undefined)?warningWithoutStack$1(false,'%s.shouldComponentUpdate(): Returned undefined instead of a '+'boolean value. Make sure to return true or false.',getComponentName(ctor)||'Component'):void 0;}return shouldUpdate;}if(ctor.prototype&&ctor.prototype.isPureReactComponent){return!shallowEqual(oldProps,newProps)||!shallowEqual(oldState,newState);}return true;}function checkClassInstance(workInProgress,ctor,newProps){var instance=workInProgress.stateNode;{var name=getComponentName(ctor)||'Component';var renderPresent=instance.render;if(!renderPresent){if(ctor.prototype&&typeof ctor.prototype.render==='function'){warningWithoutStack$1(false,'%s(...): No `render` method found on the returned component '+'instance: did you accidentally return an object from the constructor?',name);}else{warningWithoutStack$1(false,'%s(...): No `render` method found on the returned component '+'instance: you may have forgotten to define `render`.',name);}}var noGetInitialStateOnES6=!instance.getInitialState||instance.getInitialState.isReactClassApproved||instance.state;!noGetInitialStateOnES6?warningWithoutStack$1(false,'getInitialState was defined on %s, a plain JavaScript class. '+'This is only supported for classes created using React.createClass. '+'Did you mean to define a state property instead?',name):void 0;var noGetDefaultPropsOnES6=!instance.getDefaultProps||instance.getDefaultProps.isReactClassApproved;!noGetDefaultPropsOnES6?warningWithoutStack$1(false,'getDefaultProps was defined on %s, a plain JavaScript class. '+'This is only supported for classes created using React.createClass. '+'Use a static property to define defaultProps instead.',name):void 0;var noInstancePropTypes=!instance.propTypes;!noInstancePropTypes?warningWithoutStack$1(false,'propTypes was defined as an instance property on %s. Use a static '+'property to define propTypes instead.',name):void 0;var noInstanceContextType=!instance.contextType;!noInstanceContextType?warningWithoutStack$1(false,'contextType was defined as an instance property on %s. Use a static '+'property to define contextType instead.',name):void 0;var noInstanceContextTypes=!instance.contextTypes;!noInstanceContextTypes?warningWithoutStack$1(false,'contextTypes was defined as an instance property on %s. Use a static '+'property to define contextTypes instead.',name):void 0;if(ctor.contextType&&ctor.contextTypes&&!didWarnAboutContextTypeAndContextTypes.has(ctor)){didWarnAboutContextTypeAndContextTypes.add(ctor);warningWithoutStack$1(false,'%s declares both contextTypes and contextType static properties. '+'The legacy contextTypes property will be ignored.',name);}var noComponentShouldUpdate=typeof instance.componentShouldUpdate!=='function';!noComponentShouldUpdate?warningWithoutStack$1(false,'%s has a method called '+'componentShouldUpdate(). Did you mean shouldComponentUpdate()? '+'The name is phrased as a question because the function is '+'expected to return a value.',name):void 0;if(ctor.prototype&&ctor.prototype.isPureReactComponent&&typeof instance.shouldComponentUpdate!=='undefined'){warningWithoutStack$1(false,'%s has a method called shouldComponentUpdate(). '+'shouldComponentUpdate should not be used when extending React.PureComponent. '+'Please extend React.Component if shouldComponentUpdate is used.',getComponentName(ctor)||'A pure component');}var noComponentDidUnmount=typeof instance.componentDidUnmount!=='function';!noComponentDidUnmount?warningWithoutStack$1(false,'%s has a method called '+'componentDidUnmount(). But there is no such lifecycle method. '+'Did you mean componentWillUnmount()?',name):void 0;var noComponentDidReceiveProps=typeof instance.componentDidReceiveProps!=='function';!noComponentDidReceiveProps?warningWithoutStack$1(false,'%s has a method called '+'componentDidReceiveProps(). But there is no such lifecycle method. '+'If you meant to update the state in response to changing props, '+'use componentWillReceiveProps(). If you meant to fetch data or '+'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',name):void 0;var noComponentWillRecieveProps=typeof instance.componentWillRecieveProps!=='function';!noComponentWillRecieveProps?warningWithoutStack$1(false,'%s has a method called '+'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',name):void 0;var noUnsafeComponentWillRecieveProps=typeof instance.UNSAFE_componentWillRecieveProps!=='function';!noUnsafeComponentWillRecieveProps?warningWithoutStack$1(false,'%s has a method called '+'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',name):void 0;var hasMutatedProps=instance.props!==newProps;!(instance.props===undefined||!hasMutatedProps)?warningWithoutStack$1(false,'%s(...): When calling super() in `%s`, make sure to pass '+"up the same props that your component's constructor was passed.",name,name):void 0;var noInstanceDefaultProps=!instance.defaultProps;!noInstanceDefaultProps?warningWithoutStack$1(false,'Setting defaultProps as an instance property on %s is not supported and will be ignored.'+' Instead, define defaultProps as a static property on %s.',name,name):void 0;if(typeof instance.getSnapshotBeforeUpdate==='function'&&typeof instance.componentDidUpdate!=='function'&&!didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)){didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);warningWithoutStack$1(false,'%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). '+'This component defines getSnapshotBeforeUpdate() only.',getComponentName(ctor));}var noInstanceGetDerivedStateFromProps=typeof instance.getDerivedStateFromProps!=='function';!noInstanceGetDerivedStateFromProps?warningWithoutStack$1(false,'%s: getDerivedStateFromProps() is defined as an instance method '+'and will be ignored. Instead, declare it as a static method.',name):void 0;var noInstanceGetDerivedStateFromCatch=typeof instance.getDerivedStateFromError!=='function';!noInstanceGetDerivedStateFromCatch?warningWithoutStack$1(false,'%s: getDerivedStateFromError() is defined as an instance method '+'and will be ignored. Instead, declare it as a static method.',name):void 0;var noStaticGetSnapshotBeforeUpdate=typeof ctor.getSnapshotBeforeUpdate!=='function';!noStaticGetSnapshotBeforeUpdate?warningWithoutStack$1(false,'%s: getSnapshotBeforeUpdate() is defined as a static method '+'and will be ignored. Instead, declare it as an instance method.',name):void 0;var _state=instance.state;if(_state&&(typeof _state!=='object'||isArray$1(_state))){warningWithoutStack$1(false,'%s.state: must be set to an object or null',name);}if(typeof instance.getChildContext==='function'){!(typeof ctor.childContextTypes==='object')?warningWithoutStack$1(false,'%s.getChildContext(): childContextTypes must be defined in order to '+'use getChildContext().',name):void 0;}}}function adoptClassInstance(workInProgress,instance){instance.updater=classComponentUpdater;workInProgress.stateNode=instance;// The instance needs access to the fiber so that it can schedule updates
set(instance,workInProgress);{instance._reactInternalInstance=fakeInternalInstance;}}function constructClassInstance(workInProgress,ctor,props,renderExpirationTime){var isLegacyContextConsumer=false;var unmaskedContext=emptyContextObject;var context=null;var contextType=ctor.contextType;if(typeof contextType==='object'&&contextType!==null){{if(contextType.$$typeof!==REACT_CONTEXT_TYPE&&!didWarnAboutInvalidateContextType.has(ctor)){didWarnAboutInvalidateContextType.add(ctor);warningWithoutStack$1(false,'%s defines an invalid contextType. '+'contextType should point to the Context object returned by React.createContext(). '+'Did you accidentally pass the Context.Provider instead?',getComponentName(ctor)||'Component');}}context=readContext$1(contextType);}else{unmaskedContext=getUnmaskedContext(workInProgress,ctor,true);var contextTypes=ctor.contextTypes;isLegacyContextConsumer=contextTypes!==null&&contextTypes!==undefined;context=isLegacyContextConsumer?getMaskedContext(workInProgress,unmaskedContext):emptyContextObject;}// Instantiate twice to help detect side-effects.
{if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){new ctor(props,context);// eslint-disable-line no-new
}}var instance=new ctor(props,context);var state=workInProgress.memoizedState=instance.state!==null&&instance.state!==undefined?instance.state:null;adoptClassInstance(workInProgress,instance);{if(typeof ctor.getDerivedStateFromProps==='function'&&state===null){var componentName=getComponentName(ctor)||'Component';if(!didWarnAboutUninitializedState.has(componentName)){didWarnAboutUninitializedState.add(componentName);warningWithoutStack$1(false,'`%s` uses `getDerivedStateFromProps` but its initial state is '+'%s. This is not recommended. Instead, define the initial state by '+'assigning an object to `this.state` in the constructor of `%s`. '+'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',componentName,instance.state===null?'null':'undefined',componentName);}}// If new component APIs are defined, "unsafe" lifecycles won't be called.
// Warn about these lifecycles if they are present.
// Don't warn about react-lifecycles-compat polyfilled methods though.
if(typeof ctor.getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function'){var foundWillMountName=null;var foundWillReceivePropsName=null;var foundWillUpdateName=null;if(typeof instance.componentWillMount==='function'&&instance.componentWillMount.__suppressDeprecationWarning!==true){foundWillMountName='componentWillMount';}else if(typeof instance.UNSAFE_componentWillMount==='function'){foundWillMountName='UNSAFE_componentWillMount';}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true){foundWillReceivePropsName='componentWillReceiveProps';}else if(typeof instance.UNSAFE_componentWillReceiveProps==='function'){foundWillReceivePropsName='UNSAFE_componentWillReceiveProps';}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true){foundWillUpdateName='componentWillUpdate';}else if(typeof instance.UNSAFE_componentWillUpdate==='function'){foundWillUpdateName='UNSAFE_componentWillUpdate';}if(foundWillMountName!==null||foundWillReceivePropsName!==null||foundWillUpdateName!==null){var _componentName=getComponentName(ctor)||'Component';var newApiName=typeof ctor.getDerivedStateFromProps==='function'?'getDerivedStateFromProps()':'getSnapshotBeforeUpdate()';if(!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)){didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);warningWithoutStack$1(false,'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n'+'%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n'+'The above lifecycles should be removed. Learn more about this warning here:\n'+'https://fb.me/react-async-component-lifecycle-hooks',_componentName,newApiName,foundWillMountName!==null?'\n  '+foundWillMountName:'',foundWillReceivePropsName!==null?'\n  '+foundWillReceivePropsName:'',foundWillUpdateName!==null?'\n  '+foundWillUpdateName:'');}}}}// Cache unmasked context so we can avoid recreating masked context unless necessary.
// ReactFiberContext usually updates this cache but can't for newly-created instances.
if(isLegacyContextConsumer){cacheContext(workInProgress,unmaskedContext,context);}return instance;}function callComponentWillMount(workInProgress,instance){startPhaseTimer(workInProgress,'componentWillMount');var oldState=instance.state;if(typeof instance.componentWillMount==='function'){instance.componentWillMount();}if(typeof instance.UNSAFE_componentWillMount==='function'){instance.UNSAFE_componentWillMount();}stopPhaseTimer();if(oldState!==instance.state){{warningWithoutStack$1(false,'%s.componentWillMount(): Assigning directly to this.state is '+"deprecated (except inside a component's "+'constructor). Use setState instead.',getComponentName(workInProgress.type)||'Component');}classComponentUpdater.enqueueReplaceState(instance,instance.state,null);}}function callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext){var oldState=instance.state;startPhaseTimer(workInProgress,'componentWillReceiveProps');if(typeof instance.componentWillReceiveProps==='function'){instance.componentWillReceiveProps(newProps,nextContext);}if(typeof instance.UNSAFE_componentWillReceiveProps==='function'){instance.UNSAFE_componentWillReceiveProps(newProps,nextContext);}stopPhaseTimer();if(instance.state!==oldState){{var componentName=getComponentName(workInProgress.type)||'Component';if(!didWarnAboutStateAssignmentForComponent.has(componentName)){didWarnAboutStateAssignmentForComponent.add(componentName);warningWithoutStack$1(false,'%s.componentWillReceiveProps(): Assigning directly to '+"this.state is deprecated (except inside a component's "+'constructor). Use setState instead.',componentName);}}classComponentUpdater.enqueueReplaceState(instance,instance.state,null);}}// Invokes the mount life-cycles on a previously never rendered instance.
function mountClassInstance(workInProgress,ctor,newProps,renderExpirationTime){{checkClassInstance(workInProgress,ctor,newProps);}var instance=workInProgress.stateNode;instance.props=newProps;instance.state=workInProgress.memoizedState;instance.refs=emptyRefsObject;var contextType=ctor.contextType;if(typeof contextType==='object'&&contextType!==null){instance.context=readContext$1(contextType);}else{var unmaskedContext=getUnmaskedContext(workInProgress,ctor,true);instance.context=getMaskedContext(workInProgress,unmaskedContext);}{if(instance.state===newProps){var componentName=getComponentName(ctor)||'Component';if(!didWarnAboutDirectlyAssigningPropsToState.has(componentName)){didWarnAboutDirectlyAssigningPropsToState.add(componentName);warningWithoutStack$1(false,'%s: It is not recommended to assign props directly to state '+"because updates to props won't be reflected in state. "+'In most cases, it is better to use props directly.',componentName);}}if(workInProgress.mode&StrictMode){ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress,instance);ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress,instance);}if(warnAboutDeprecatedLifecycles){ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress,instance);}}var updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);instance.state=workInProgress.memoizedState;}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);instance.state=workInProgress.memoizedState;}// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(typeof ctor.getDerivedStateFromProps!=='function'&&typeof instance.getSnapshotBeforeUpdate!=='function'&&(typeof instance.UNSAFE_componentWillMount==='function'||typeof instance.componentWillMount==='function')){callComponentWillMount(workInProgress,instance);// If we had additional state updates during this life-cycle, let's
// process them now.
updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);instance.state=workInProgress.memoizedState;}}if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}}function resumeMountClassInstance(workInProgress,ctor,newProps,renderExpirationTime){var instance=workInProgress.stateNode;var oldProps=workInProgress.memoizedProps;instance.props=oldProps;var oldContext=instance.context;var contextType=ctor.contextType;var nextContext=void 0;if(typeof contextType==='object'&&contextType!==null){nextContext=readContext$1(contextType);}else{var nextLegacyUnmaskedContext=getUnmaskedContext(workInProgress,ctor,true);nextContext=getMaskedContext(workInProgress,nextLegacyUnmaskedContext);}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;var hasNewLifecycles=typeof getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function';// Note: During these life-cycles, instance.props/instance.state are what
// ever the previously attempted to render - not the "current". However,
// during componentDidUpdate we pass the "current" props.
// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillReceiveProps==='function'||typeof instance.componentWillReceiveProps==='function')){if(oldProps!==newProps||oldContext!==nextContext){callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext);}}resetHasForceUpdateBeforeProcessing();var oldState=workInProgress.memoizedState;var newState=instance.state=oldState;var updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);newState=workInProgress.memoizedState;}if(oldProps===newProps&&oldState===newState&&!hasContextChanged()&&!checkHasForceUpdateAfterProcessing()){// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}return false;}if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);newState=workInProgress.memoizedState;}var shouldUpdate=checkHasForceUpdateAfterProcessing()||checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext);if(shouldUpdate){// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillMount==='function'||typeof instance.componentWillMount==='function')){startPhaseTimer(workInProgress,'componentWillMount');if(typeof instance.componentWillMount==='function'){instance.componentWillMount();}if(typeof instance.UNSAFE_componentWillMount==='function'){instance.UNSAFE_componentWillMount();}stopPhaseTimer();}if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}}else{// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidMount==='function'){workInProgress.effectTag|=Update;}// If shouldComponentUpdate returned false, we should still update the
// memoized state to indicate that this work can be reused.
workInProgress.memoizedProps=newProps;workInProgress.memoizedState=newState;}// Update the existing instance's state, props, and context pointers even
// if shouldComponentUpdate returns false.
instance.props=newProps;instance.state=newState;instance.context=nextContext;return shouldUpdate;}// Invokes the update life-cycles and returns false if it shouldn't rerender.
function updateClassInstance(current,workInProgress,ctor,newProps,renderExpirationTime){var instance=workInProgress.stateNode;var oldProps=workInProgress.memoizedProps;instance.props=oldProps;var oldContext=instance.context;var contextType=ctor.contextType;var nextContext=void 0;if(typeof contextType==='object'&&contextType!==null){nextContext=readContext$1(contextType);}else{var nextUnmaskedContext=getUnmaskedContext(workInProgress,ctor,true);nextContext=getMaskedContext(workInProgress,nextUnmaskedContext);}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;var hasNewLifecycles=typeof getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function';// Note: During these life-cycles, instance.props/instance.state are what
// ever the previously attempted to render - not the "current". However,
// during componentDidUpdate we pass the "current" props.
// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillReceiveProps==='function'||typeof instance.componentWillReceiveProps==='function')){if(oldProps!==newProps||oldContext!==nextContext){callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext);}}resetHasForceUpdateBeforeProcessing();var oldState=workInProgress.memoizedState;var newState=instance.state=oldState;var updateQueue=workInProgress.updateQueue;if(updateQueue!==null){processUpdateQueue(workInProgress,updateQueue,newProps,instance,renderExpirationTime);newState=workInProgress.memoizedState;}if(oldProps===newProps&&oldState===newState&&!hasContextChanged()&&!checkHasForceUpdateAfterProcessing()){// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Update;}}if(typeof instance.getSnapshotBeforeUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Snapshot;}}return false;}if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);newState=workInProgress.memoizedState;}var shouldUpdate=checkHasForceUpdateAfterProcessing()||checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext);if(shouldUpdate){// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillUpdate==='function'||typeof instance.componentWillUpdate==='function')){startPhaseTimer(workInProgress,'componentWillUpdate');if(typeof instance.componentWillUpdate==='function'){instance.componentWillUpdate(newProps,newState,nextContext);}if(typeof instance.UNSAFE_componentWillUpdate==='function'){instance.UNSAFE_componentWillUpdate(newProps,newState,nextContext);}stopPhaseTimer();}if(typeof instance.componentDidUpdate==='function'){workInProgress.effectTag|=Update;}if(typeof instance.getSnapshotBeforeUpdate==='function'){workInProgress.effectTag|=Snapshot;}}else{// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Update;}}if(typeof instance.getSnapshotBeforeUpdate==='function'){if(oldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.effectTag|=Snapshot;}}// If shouldComponentUpdate returned false, we should still update the
// memoized props/state to indicate that this work can be reused.
workInProgress.memoizedProps=newProps;workInProgress.memoizedState=newState;}// Update the existing instance's state, props, and context pointers even
// if shouldComponentUpdate returns false.
instance.props=newProps;instance.state=newState;instance.context=nextContext;return shouldUpdate;}var didWarnAboutMaps=void 0;var didWarnAboutGenerators=void 0;var didWarnAboutStringRefInStrictMode=void 0;var ownerHasKeyUseWarning=void 0;var ownerHasFunctionTypeWarning=void 0;var warnForMissingKey=function(child){};{didWarnAboutMaps=false;didWarnAboutGenerators=false;didWarnAboutStringRefInStrictMode={};/**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ownerHasKeyUseWarning={};ownerHasFunctionTypeWarning={};warnForMissingKey=function(child){if(child===null||typeof child!=='object'){return;}if(!child._store||child._store.validated||child.key!=null){return;}!(typeof child._store==='object')?invariant(false,'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.'):void 0;child._store.validated=true;var currentComponentErrorInfo='Each child in an array or iterator should have a unique '+'"key" prop. See https://fb.me/react-warning-keys for '+'more information.'+getCurrentFiberStackInDev();if(ownerHasKeyUseWarning[currentComponentErrorInfo]){return;}ownerHasKeyUseWarning[currentComponentErrorInfo]=true;warning$1(false,'Each child in an array or iterator should have a unique '+'"key" prop. See https://fb.me/react-warning-keys for '+'more information.');};}var isArray=Array.isArray;function coerceRef(returnFiber,current$$1,element){var mixedRef=element.ref;if(mixedRef!==null&&typeof mixedRef!=='function'&&typeof mixedRef!=='object'){{if(returnFiber.mode&StrictMode){var componentName=getComponentName(returnFiber.type)||'Component';if(!didWarnAboutStringRefInStrictMode[componentName]){warningWithoutStack$1(false,'A string ref, "%s", has been found within a strict mode tree. '+'String refs are a source of potential bugs and should be avoided. '+'We recommend using createRef() instead.'+'\n%s'+'\n\nLearn more about using refs safely here:'+'\nhttps://fb.me/react-strict-mode-string-ref',mixedRef,getStackByFiberInDevAndProd(returnFiber));didWarnAboutStringRefInStrictMode[componentName]=true;}}}if(element._owner){var owner=element._owner;var inst=void 0;if(owner){var ownerFiber=owner;!(ownerFiber.tag===ClassComponent)?invariant(false,'Function components cannot have refs.'):void 0;inst=ownerFiber.stateNode;}!inst?invariant(false,'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.',mixedRef):void 0;var stringRef=''+mixedRef;// Check if previous string ref matches new string ref
if(current$$1!==null&&current$$1.ref!==null&&typeof current$$1.ref==='function'&&current$$1.ref._stringRef===stringRef){return current$$1.ref;}var ref=function(value){var refs=inst.refs;if(refs===emptyRefsObject){// This is a lazy pooled frozen object, so we need to initialize.
refs=inst.refs={};}if(value===null){delete refs[stringRef];}else{refs[stringRef]=value;}};ref._stringRef=stringRef;return ref;}else{!(typeof mixedRef==='string')?invariant(false,'Expected ref to be a function, a string, an object returned by React.createRef(), or null.'):void 0;!element._owner?invariant(false,'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.',mixedRef):void 0;}}return mixedRef;}function throwOnInvalidObjectType(returnFiber,newChild){if(returnFiber.type!=='textarea'){var addendum='';{addendum=' If you meant to render a collection of children, use an array '+'instead.'+getCurrentFiberStackInDev();}invariant(false,'Objects are not valid as a React child (found: %s).%s',Object.prototype.toString.call(newChild)==='[object Object]'?'object with keys {'+Object.keys(newChild).join(', ')+'}':newChild,addendum);}}function warnOnFunctionType(){var currentComponentErrorInfo='Functions are not valid as a React child. This may happen if '+'you return a Component instead of <Component /> from render. '+'Or maybe you meant to call this function rather than return it.'+getCurrentFiberStackInDev();if(ownerHasFunctionTypeWarning[currentComponentErrorInfo]){return;}ownerHasFunctionTypeWarning[currentComponentErrorInfo]=true;warning$1(false,'Functions are not valid as a React child. This may happen if '+'you return a Component instead of <Component /> from render. '+'Or maybe you meant to call this function rather than return it.');}// This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.
function ChildReconciler(shouldTrackSideEffects){function deleteChild(returnFiber,childToDelete){if(!shouldTrackSideEffects){// Noop.
return;}// Deletions are added in reversed order so we add it to the front.
// At this point, the return fiber's effect list is empty except for
// deletions, so we can just append the deletion to the list. The remaining
// effects aren't added until the complete phase. Once we implement
// resuming, this may not be true.
var last=returnFiber.lastEffect;if(last!==null){last.nextEffect=childToDelete;returnFiber.lastEffect=childToDelete;}else{returnFiber.firstEffect=returnFiber.lastEffect=childToDelete;}childToDelete.nextEffect=null;childToDelete.effectTag=Deletion;}function deleteRemainingChildren(returnFiber,currentFirstChild){if(!shouldTrackSideEffects){// Noop.
return null;}// TODO: For the shouldClone case, this could be micro-optimized a bit by
// assuming that after the first child we've already added everything.
var childToDelete=currentFirstChild;while(childToDelete!==null){deleteChild(returnFiber,childToDelete);childToDelete=childToDelete.sibling;}return null;}function mapRemainingChildren(returnFiber,currentFirstChild){// Add the remaining children to a temporary map so that we can find them by
// keys quickly. Implicit (null) keys get added to this set with their index
var existingChildren=new Map();var existingChild=currentFirstChild;while(existingChild!==null){if(existingChild.key!==null){existingChildren.set(existingChild.key,existingChild);}else{existingChildren.set(existingChild.index,existingChild);}existingChild=existingChild.sibling;}return existingChildren;}function useFiber(fiber,pendingProps,expirationTime){// We currently set sibling to null and index to 0 here because it is easy
// to forget to do before returning it. E.g. for the single child case.
var clone=createWorkInProgress(fiber,pendingProps,expirationTime);clone.index=0;clone.sibling=null;return clone;}function placeChild(newFiber,lastPlacedIndex,newIndex){newFiber.index=newIndex;if(!shouldTrackSideEffects){// Noop.
return lastPlacedIndex;}var current$$1=newFiber.alternate;if(current$$1!==null){var oldIndex=current$$1.index;if(oldIndex<lastPlacedIndex){// This is a move.
newFiber.effectTag=Placement;return lastPlacedIndex;}else{// This item can stay in place.
return oldIndex;}}else{// This is an insertion.
newFiber.effectTag=Placement;return lastPlacedIndex;}}function placeSingleChild(newFiber){// This is simpler for the single child case. We only need to do a
// placement for inserting new children.
if(shouldTrackSideEffects&&newFiber.alternate===null){newFiber.effectTag=Placement;}return newFiber;}function updateTextNode(returnFiber,current$$1,textContent,expirationTime){if(current$$1===null||current$$1.tag!==HostText){// Insert
var created=createFiberFromText(textContent,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}else{// Update
var existing=useFiber(current$$1,textContent,expirationTime);existing.return=returnFiber;return existing;}}function updateElement(returnFiber,current$$1,element,expirationTime){if(current$$1!==null&&current$$1.elementType===element.type){// Move based on index
var existing=useFiber(current$$1,element.props,expirationTime);existing.ref=coerceRef(returnFiber,current$$1,element);existing.return=returnFiber;{existing._debugSource=element._source;existing._debugOwner=element._owner;}return existing;}else{// Insert
var created=createFiberFromElement(element,returnFiber.mode,expirationTime);created.ref=coerceRef(returnFiber,current$$1,element);created.return=returnFiber;return created;}}function updatePortal(returnFiber,current$$1,portal,expirationTime){if(current$$1===null||current$$1.tag!==HostPortal||current$$1.stateNode.containerInfo!==portal.containerInfo||current$$1.stateNode.implementation!==portal.implementation){// Insert
var created=createFiberFromPortal(portal,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}else{// Update
var existing=useFiber(current$$1,portal.children||[],expirationTime);existing.return=returnFiber;return existing;}}function updateFragment(returnFiber,current$$1,fragment,expirationTime,key){if(current$$1===null||current$$1.tag!==Fragment){// Insert
var created=createFiberFromFragment(fragment,returnFiber.mode,expirationTime,key);created.return=returnFiber;return created;}else{// Update
var existing=useFiber(current$$1,fragment,expirationTime);existing.return=returnFiber;return existing;}}function createChild(returnFiber,newChild,expirationTime){if(typeof newChild==='string'||typeof newChild==='number'){// Text nodes don't have keys. If the previous node is implicitly keyed
// we can continue to replace it without aborting even if it is not a text
// node.
var created=createFiberFromText(''+newChild,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}if(typeof newChild==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{var _created=createFiberFromElement(newChild,returnFiber.mode,expirationTime);_created.ref=coerceRef(returnFiber,null,newChild);_created.return=returnFiber;return _created;}case REACT_PORTAL_TYPE:{var _created2=createFiberFromPortal(newChild,returnFiber.mode,expirationTime);_created2.return=returnFiber;return _created2;}}if(isArray(newChild)||getIteratorFn(newChild)){var _created3=createFiberFromFragment(newChild,returnFiber.mode,expirationTime,null);_created3.return=returnFiber;return _created3;}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}return null;}function updateSlot(returnFiber,oldFiber,newChild,expirationTime){// Update the fiber if the keys match, otherwise return null.
var key=oldFiber!==null?oldFiber.key:null;if(typeof newChild==='string'||typeof newChild==='number'){// Text nodes don't have keys. If the previous node is implicitly keyed
// we can continue to replace it without aborting even if it is not a text
// node.
if(key!==null){return null;}return updateTextNode(returnFiber,oldFiber,''+newChild,expirationTime);}if(typeof newChild==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{if(newChild.key===key){if(newChild.type===REACT_FRAGMENT_TYPE){return updateFragment(returnFiber,oldFiber,newChild.props.children,expirationTime,key);}return updateElement(returnFiber,oldFiber,newChild,expirationTime);}else{return null;}}case REACT_PORTAL_TYPE:{if(newChild.key===key){return updatePortal(returnFiber,oldFiber,newChild,expirationTime);}else{return null;}}}if(isArray(newChild)||getIteratorFn(newChild)){if(key!==null){return null;}return updateFragment(returnFiber,oldFiber,newChild,expirationTime,null);}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}return null;}function updateFromMap(existingChildren,returnFiber,newIdx,newChild,expirationTime){if(typeof newChild==='string'||typeof newChild==='number'){// Text nodes don't have keys, so we neither have to check the old nor
// new node for the key. If both are text nodes, they match.
var matchedFiber=existingChildren.get(newIdx)||null;return updateTextNode(returnFiber,matchedFiber,''+newChild,expirationTime);}if(typeof newChild==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{var _matchedFiber=existingChildren.get(newChild.key===null?newIdx:newChild.key)||null;if(newChild.type===REACT_FRAGMENT_TYPE){return updateFragment(returnFiber,_matchedFiber,newChild.props.children,expirationTime,newChild.key);}return updateElement(returnFiber,_matchedFiber,newChild,expirationTime);}case REACT_PORTAL_TYPE:{var _matchedFiber2=existingChildren.get(newChild.key===null?newIdx:newChild.key)||null;return updatePortal(returnFiber,_matchedFiber2,newChild,expirationTime);}}if(isArray(newChild)||getIteratorFn(newChild)){var _matchedFiber3=existingChildren.get(newIdx)||null;return updateFragment(returnFiber,_matchedFiber3,newChild,expirationTime,null);}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}return null;}/**
   * Warns if there is a duplicate or missing key
   */function warnOnInvalidKey(child,knownKeys){{if(typeof child!=='object'||child===null){return knownKeys;}switch(child.$$typeof){case REACT_ELEMENT_TYPE:case REACT_PORTAL_TYPE:warnForMissingKey(child);var key=child.key;if(typeof key!=='string'){break;}if(knownKeys===null){knownKeys=new Set();knownKeys.add(key);break;}if(!knownKeys.has(key)){knownKeys.add(key);break;}warning$1(false,'Encountered two children with the same key, `%s`. '+'Keys should be unique so that components maintain their identity '+'across updates. Non-unique keys may cause children to be '+'duplicated and/or omitted — the behavior is unsupported and '+'could change in a future version.',key);break;default:break;}}return knownKeys;}function reconcileChildrenArray(returnFiber,currentFirstChild,newChildren,expirationTime){// This algorithm can't optimize by searching from boths ends since we
// don't have backpointers on fibers. I'm trying to see how far we can get
// with that model. If it ends up not being worth the tradeoffs, we can
// add it later.
// Even with a two ended optimization, we'd want to optimize for the case
// where there are few changes and brute force the comparison instead of
// going for the Map. It'd like to explore hitting that path first in
// forward-only mode and only go for the Map once we notice that we need
// lots of look ahead. This doesn't handle reversal as well as two ended
// search but that's unusual. Besides, for the two ended optimization to
// work on Iterables, we'd need to copy the whole set.
// In this first iteration, we'll just live with hitting the bad case
// (adding everything to a Map) in for every insert/move.
// If you change this code, also update reconcileChildrenIterator() which
// uses the same algorithm.
{// First, validate keys.
var knownKeys=null;for(var i=0;i<newChildren.length;i++){var child=newChildren[i];knownKeys=warnOnInvalidKey(child,knownKeys);}}var resultingFirstChild=null;var previousNewFiber=null;var oldFiber=currentFirstChild;var lastPlacedIndex=0;var newIdx=0;var nextOldFiber=null;for(;oldFiber!==null&&newIdx<newChildren.length;newIdx++){if(oldFiber.index>newIdx){nextOldFiber=oldFiber;oldFiber=null;}else{nextOldFiber=oldFiber.sibling;}var newFiber=updateSlot(returnFiber,oldFiber,newChildren[newIdx],expirationTime);if(newFiber===null){// TODO: This breaks on empty slots like null children. That's
// unfortunate because it triggers the slow path all the time. We need
// a better way to communicate whether this was a miss or null,
// boolean, undefined, etc.
if(oldFiber===null){oldFiber=nextOldFiber;}break;}if(shouldTrackSideEffects){if(oldFiber&&newFiber.alternate===null){// We matched the slot, but we didn't reuse the existing fiber, so we
// need to delete the existing child.
deleteChild(returnFiber,oldFiber);}}lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=newFiber;}else{// TODO: Defer siblings if we're not at the right index for this slot.
// I.e. if we had null values before, then we want to defer this
// for each null value. However, we also don't want to call updateSlot
// with the previous one.
previousNewFiber.sibling=newFiber;}previousNewFiber=newFiber;oldFiber=nextOldFiber;}if(newIdx===newChildren.length){// We've reached the end of the new children. We can delete the rest.
deleteRemainingChildren(returnFiber,oldFiber);return resultingFirstChild;}if(oldFiber===null){// If we don't have any more existing children we can choose a fast path
// since the rest will all be insertions.
for(;newIdx<newChildren.length;newIdx++){var _newFiber=createChild(returnFiber,newChildren[newIdx],expirationTime);if(!_newFiber){continue;}lastPlacedIndex=placeChild(_newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=_newFiber;}else{previousNewFiber.sibling=_newFiber;}previousNewFiber=_newFiber;}return resultingFirstChild;}// Add all children to a key map for quick lookups.
var existingChildren=mapRemainingChildren(returnFiber,oldFiber);// Keep scanning and use the map to restore deleted items as moves.
for(;newIdx<newChildren.length;newIdx++){var _newFiber2=updateFromMap(existingChildren,returnFiber,newIdx,newChildren[newIdx],expirationTime);if(_newFiber2){if(shouldTrackSideEffects){if(_newFiber2.alternate!==null){// The new fiber is a work in progress, but if there exists a
// current, that means that we reused the fiber. We need to delete
// it from the child list so that we don't add it to the deletion
// list.
existingChildren.delete(_newFiber2.key===null?newIdx:_newFiber2.key);}}lastPlacedIndex=placeChild(_newFiber2,lastPlacedIndex,newIdx);if(previousNewFiber===null){resultingFirstChild=_newFiber2;}else{previousNewFiber.sibling=_newFiber2;}previousNewFiber=_newFiber2;}}if(shouldTrackSideEffects){// Any existing children that weren't consumed above were deleted. We need
// to add them to the deletion list.
existingChildren.forEach(function(child){return deleteChild(returnFiber,child);});}return resultingFirstChild;}function reconcileChildrenIterator(returnFiber,currentFirstChild,newChildrenIterable,expirationTime){// This is the same implementation as reconcileChildrenArray(),
// but using the iterator instead.
var iteratorFn=getIteratorFn(newChildrenIterable);!(typeof iteratorFn==='function')?invariant(false,'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.'):void 0;{// We don't support rendering Generators because it's a mutation.
// See https://github.com/facebook/react/issues/12995
if(typeof Symbol==='function'&&// $FlowFixMe Flow doesn't know about toStringTag
newChildrenIterable[Symbol.toStringTag]==='Generator'){!didWarnAboutGenerators?warning$1(false,'Using Generators as children is unsupported and will likely yield '+'unexpected results because enumerating a generator mutates it. '+'You may convert it to an array with `Array.from()` or the '+'`[...spread]` operator before rendering. Keep in mind '+'you might need to polyfill these features for older browsers.'):void 0;didWarnAboutGenerators=true;}// Warn about using Maps as children
if(newChildrenIterable.entries===iteratorFn){!didWarnAboutMaps?warning$1(false,'Using Maps as children is unsupported and will likely yield '+'unexpected results. Convert it to a sequence/iterable of keyed '+'ReactElements instead.'):void 0;didWarnAboutMaps=true;}// First, validate keys.
// We'll get a different iterator later for the main pass.
var _newChildren=iteratorFn.call(newChildrenIterable);if(_newChildren){var knownKeys=null;var _step=_newChildren.next();for(;!_step.done;_step=_newChildren.next()){var child=_step.value;knownKeys=warnOnInvalidKey(child,knownKeys);}}}var newChildren=iteratorFn.call(newChildrenIterable);!(newChildren!=null)?invariant(false,'An iterable object provided no iterator.'):void 0;var resultingFirstChild=null;var previousNewFiber=null;var oldFiber=currentFirstChild;var lastPlacedIndex=0;var newIdx=0;var nextOldFiber=null;var step=newChildren.next();for(;oldFiber!==null&&!step.done;newIdx++,step=newChildren.next()){if(oldFiber.index>newIdx){nextOldFiber=oldFiber;oldFiber=null;}else{nextOldFiber=oldFiber.sibling;}var newFiber=updateSlot(returnFiber,oldFiber,step.value,expirationTime);if(newFiber===null){// TODO: This breaks on empty slots like null children. That's
// unfortunate because it triggers the slow path all the time. We need
// a better way to communicate whether this was a miss or null,
// boolean, undefined, etc.
if(!oldFiber){oldFiber=nextOldFiber;}break;}if(shouldTrackSideEffects){if(oldFiber&&newFiber.alternate===null){// We matched the slot, but we didn't reuse the existing fiber, so we
// need to delete the existing child.
deleteChild(returnFiber,oldFiber);}}lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=newFiber;}else{// TODO: Defer siblings if we're not at the right index for this slot.
// I.e. if we had null values before, then we want to defer this
// for each null value. However, we also don't want to call updateSlot
// with the previous one.
previousNewFiber.sibling=newFiber;}previousNewFiber=newFiber;oldFiber=nextOldFiber;}if(step.done){// We've reached the end of the new children. We can delete the rest.
deleteRemainingChildren(returnFiber,oldFiber);return resultingFirstChild;}if(oldFiber===null){// If we don't have any more existing children we can choose a fast path
// since the rest will all be insertions.
for(;!step.done;newIdx++,step=newChildren.next()){var _newFiber3=createChild(returnFiber,step.value,expirationTime);if(_newFiber3===null){continue;}lastPlacedIndex=placeChild(_newFiber3,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=_newFiber3;}else{previousNewFiber.sibling=_newFiber3;}previousNewFiber=_newFiber3;}return resultingFirstChild;}// Add all children to a key map for quick lookups.
var existingChildren=mapRemainingChildren(returnFiber,oldFiber);// Keep scanning and use the map to restore deleted items as moves.
for(;!step.done;newIdx++,step=newChildren.next()){var _newFiber4=updateFromMap(existingChildren,returnFiber,newIdx,step.value,expirationTime);if(_newFiber4!==null){if(shouldTrackSideEffects){if(_newFiber4.alternate!==null){// The new fiber is a work in progress, but if there exists a
// current, that means that we reused the fiber. We need to delete
// it from the child list so that we don't add it to the deletion
// list.
existingChildren.delete(_newFiber4.key===null?newIdx:_newFiber4.key);}}lastPlacedIndex=placeChild(_newFiber4,lastPlacedIndex,newIdx);if(previousNewFiber===null){resultingFirstChild=_newFiber4;}else{previousNewFiber.sibling=_newFiber4;}previousNewFiber=_newFiber4;}}if(shouldTrackSideEffects){// Any existing children that weren't consumed above were deleted. We need
// to add them to the deletion list.
existingChildren.forEach(function(child){return deleteChild(returnFiber,child);});}return resultingFirstChild;}function reconcileSingleTextNode(returnFiber,currentFirstChild,textContent,expirationTime){// There's no need to check for keys on text nodes since we don't have a
// way to define them.
if(currentFirstChild!==null&&currentFirstChild.tag===HostText){// We already have an existing node so let's just update it and delete
// the rest.
deleteRemainingChildren(returnFiber,currentFirstChild.sibling);var existing=useFiber(currentFirstChild,textContent,expirationTime);existing.return=returnFiber;return existing;}// The existing first child is not a text node so we need to create one
// and delete the existing ones.
deleteRemainingChildren(returnFiber,currentFirstChild);var created=createFiberFromText(textContent,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}function reconcileSingleElement(returnFiber,currentFirstChild,element,expirationTime){var key=element.key;var child=currentFirstChild;while(child!==null){// TODO: If key === null and child.key === null, then this only applies to
// the first item in the list.
if(child.key===key){if(child.tag===Fragment?element.type===REACT_FRAGMENT_TYPE:child.elementType===element.type){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,element.type===REACT_FRAGMENT_TYPE?element.props.children:element.props,expirationTime);existing.ref=coerceRef(returnFiber,child,element);existing.return=returnFiber;{existing._debugSource=element._source;existing._debugOwner=element._owner;}return existing;}else{deleteRemainingChildren(returnFiber,child);break;}}else{deleteChild(returnFiber,child);}child=child.sibling;}if(element.type===REACT_FRAGMENT_TYPE){var created=createFiberFromFragment(element.props.children,returnFiber.mode,expirationTime,element.key);created.return=returnFiber;return created;}else{var _created4=createFiberFromElement(element,returnFiber.mode,expirationTime);_created4.ref=coerceRef(returnFiber,currentFirstChild,element);_created4.return=returnFiber;return _created4;}}function reconcileSinglePortal(returnFiber,currentFirstChild,portal,expirationTime){var key=portal.key;var child=currentFirstChild;while(child!==null){// TODO: If key === null and child.key === null, then this only applies to
// the first item in the list.
if(child.key===key){if(child.tag===HostPortal&&child.stateNode.containerInfo===portal.containerInfo&&child.stateNode.implementation===portal.implementation){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,portal.children||[],expirationTime);existing.return=returnFiber;return existing;}else{deleteRemainingChildren(returnFiber,child);break;}}else{deleteChild(returnFiber,child);}child=child.sibling;}var created=createFiberFromPortal(portal,returnFiber.mode,expirationTime);created.return=returnFiber;return created;}// This API will tag the children with the side-effect of the reconciliation
// itself. They will be added to the side-effect list as we pass through the
// children and the parent.
function reconcileChildFibers(returnFiber,currentFirstChild,newChild,expirationTime){// This function is not recursive.
// If the top level item is an array, we treat it as a set of children,
// not as a fragment. Nested arrays on the other hand will be treated as
// fragment nodes. Recursion happens at the normal flow.
// Handle top level unkeyed fragments as if they were arrays.
// This leads to an ambiguity between <>{[...]}</> and <>...</>.
// We treat the ambiguous cases above the same.
var isUnkeyedTopLevelFragment=typeof newChild==='object'&&newChild!==null&&newChild.type===REACT_FRAGMENT_TYPE&&newChild.key===null;if(isUnkeyedTopLevelFragment){newChild=newChild.props.children;}// Handle object types
var isObject=typeof newChild==='object'&&newChild!==null;if(isObject){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:return placeSingleChild(reconcileSingleElement(returnFiber,currentFirstChild,newChild,expirationTime));case REACT_PORTAL_TYPE:return placeSingleChild(reconcileSinglePortal(returnFiber,currentFirstChild,newChild,expirationTime));}}if(typeof newChild==='string'||typeof newChild==='number'){return placeSingleChild(reconcileSingleTextNode(returnFiber,currentFirstChild,''+newChild,expirationTime));}if(isArray(newChild)){return reconcileChildrenArray(returnFiber,currentFirstChild,newChild,expirationTime);}if(getIteratorFn(newChild)){return reconcileChildrenIterator(returnFiber,currentFirstChild,newChild,expirationTime);}if(isObject){throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType();}}if(typeof newChild==='undefined'&&!isUnkeyedTopLevelFragment){// If the new child is undefined, and the return fiber is a composite
// component, throw an error. If Fiber return types are disabled,
// we already threw above.
switch(returnFiber.tag){case ClassComponent:{{var instance=returnFiber.stateNode;if(instance.render._isMockFunction){// We allow auto-mocks to proceed as if they're returning null.
break;}}}// Intentionally fall through to the next case, which handles both
// functions and classes
// eslint-disable-next-lined no-fallthrough
case FunctionComponent:{var Component=returnFiber.type;invariant(false,'%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.',Component.displayName||Component.name||'Component');}}}// Remaining cases are all treated as empty.
return deleteRemainingChildren(returnFiber,currentFirstChild);}return reconcileChildFibers;}var reconcileChildFibers=ChildReconciler(true);var mountChildFibers=ChildReconciler(false);function cloneChildFibers(current$$1,workInProgress){!(current$$1===null||workInProgress.child===current$$1.child)?invariant(false,'Resuming work not yet implemented.'):void 0;if(workInProgress.child===null){return;}var currentChild=workInProgress.child;var newChild=createWorkInProgress(currentChild,currentChild.pendingProps,currentChild.expirationTime);workInProgress.child=newChild;newChild.return=workInProgress;while(currentChild.sibling!==null){currentChild=currentChild.sibling;newChild=newChild.sibling=createWorkInProgress(currentChild,currentChild.pendingProps,currentChild.expirationTime);newChild.return=workInProgress;}newChild.sibling=null;}// The deepest Fiber on the stack involved in a hydration context.
// This may have been an insertion or a hydration.
var hydrationParentFiber=null;var nextHydratableInstance=null;var isHydrating=false;function enterHydrationState(fiber){if(!supportsHydration){return false;}var parentInstance=fiber.stateNode.containerInfo;nextHydratableInstance=getFirstHydratableChild(parentInstance);hydrationParentFiber=fiber;isHydrating=true;return true;}function deleteHydratableInstance(returnFiber,instance){{switch(returnFiber.tag){case HostRoot:didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo,instance);break;case HostComponent:didNotHydrateInstance(returnFiber.type,returnFiber.memoizedProps,returnFiber.stateNode,instance);break;}}var childToDelete=createFiberFromHostInstanceForDeletion();childToDelete.stateNode=instance;childToDelete.return=returnFiber;childToDelete.effectTag=Deletion;// This might seem like it belongs on progressedFirstDeletion. However,
// these children are not part of the reconciliation list of children.
// Even if we abort and rereconcile the children, that will try to hydrate
// again and the nodes are still in the host tree so these will be
// recreated.
if(returnFiber.lastEffect!==null){returnFiber.lastEffect.nextEffect=childToDelete;returnFiber.lastEffect=childToDelete;}else{returnFiber.firstEffect=returnFiber.lastEffect=childToDelete;}}function insertNonHydratedInstance(returnFiber,fiber){fiber.effectTag|=Placement;{switch(returnFiber.tag){case HostRoot:{var parentContainer=returnFiber.stateNode.containerInfo;switch(fiber.tag){case HostComponent:var type=fiber.type;var props=fiber.pendingProps;didNotFindHydratableContainerInstance(parentContainer,type,props);break;case HostText:var text=fiber.pendingProps;didNotFindHydratableContainerTextInstance(parentContainer,text);break;}break;}case HostComponent:{var parentType=returnFiber.type;var parentProps=returnFiber.memoizedProps;var parentInstance=returnFiber.stateNode;switch(fiber.tag){case HostComponent:var _type=fiber.type;var _props=fiber.pendingProps;didNotFindHydratableInstance(parentType,parentProps,parentInstance,_type,_props);break;case HostText:var _text=fiber.pendingProps;didNotFindHydratableTextInstance(parentType,parentProps,parentInstance,_text);break;}break;}default:return;}}}function tryHydrate(fiber,nextInstance){switch(fiber.tag){case HostComponent:{var type=fiber.type;var props=fiber.pendingProps;var instance=canHydrateInstance(nextInstance,type,props);if(instance!==null){fiber.stateNode=instance;return true;}return false;}case HostText:{var text=fiber.pendingProps;var textInstance=canHydrateTextInstance(nextInstance,text);if(textInstance!==null){fiber.stateNode=textInstance;return true;}return false;}default:return false;}}function tryToClaimNextHydratableInstance(fiber){if(!isHydrating){return;}var nextInstance=nextHydratableInstance;if(!nextInstance){// Nothing to hydrate. Make it an insertion.
insertNonHydratedInstance(hydrationParentFiber,fiber);isHydrating=false;hydrationParentFiber=fiber;return;}var firstAttemptedInstance=nextInstance;if(!tryHydrate(fiber,nextInstance)){// If we can't hydrate this instance let's try the next one.
// We use this as a heuristic. It's based on intuition and not data so it
// might be flawed or unnecessary.
nextInstance=getNextHydratableSibling(firstAttemptedInstance);if(!nextInstance||!tryHydrate(fiber,nextInstance)){// Nothing to hydrate. Make it an insertion.
insertNonHydratedInstance(hydrationParentFiber,fiber);isHydrating=false;hydrationParentFiber=fiber;return;}// We matched the next one, we'll now assume that the first one was
// superfluous and we'll delete it. Since we can't eagerly delete it
// we'll have to schedule a deletion. To do that, this node needs a dummy
// fiber associated with it.
deleteHydratableInstance(hydrationParentFiber,firstAttemptedInstance);}hydrationParentFiber=fiber;nextHydratableInstance=getFirstHydratableChild(nextInstance);}function prepareToHydrateHostInstance(fiber,rootContainerInstance,hostContext){if(!supportsHydration){invariant(false,'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');}var instance=fiber.stateNode;var updatePayload=hydrateInstance(instance,fiber.type,fiber.memoizedProps,rootContainerInstance,hostContext,fiber);// TODO: Type this specific to this type of component.
fiber.updateQueue=updatePayload;// If the update payload indicates that there is a change or if there
// is a new ref we mark this as an update.
if(updatePayload!==null){return true;}return false;}function prepareToHydrateHostTextInstance(fiber){if(!supportsHydration){invariant(false,'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');}var textInstance=fiber.stateNode;var textContent=fiber.memoizedProps;var shouldUpdate=hydrateTextInstance(textInstance,textContent,fiber);{if(shouldUpdate){// We assume that prepareToHydrateHostTextInstance is called in a context where the
// hydration parent is the parent host component of this host text.
var returnFiber=hydrationParentFiber;if(returnFiber!==null){switch(returnFiber.tag){case HostRoot:{var parentContainer=returnFiber.stateNode.containerInfo;didNotMatchHydratedContainerTextInstance(parentContainer,textInstance,textContent);break;}case HostComponent:{var parentType=returnFiber.type;var parentProps=returnFiber.memoizedProps;var parentInstance=returnFiber.stateNode;didNotMatchHydratedTextInstance(parentType,parentProps,parentInstance,textInstance,textContent);break;}}}}}return shouldUpdate;}function popToNextHostParent(fiber){var parent=fiber.return;while(parent!==null&&parent.tag!==HostComponent&&parent.tag!==HostRoot){parent=parent.return;}hydrationParentFiber=parent;}function popHydrationState(fiber){if(!supportsHydration){return false;}if(fiber!==hydrationParentFiber){// We're deeper than the current hydration context, inside an inserted
// tree.
return false;}if(!isHydrating){// If we're not currently hydrating but we're in a hydration context, then
// we were an insertion and now need to pop up reenter hydration of our
// siblings.
popToNextHostParent(fiber);isHydrating=true;return false;}var type=fiber.type;// If we have any remaining hydratable nodes, we need to delete them now.
// We only do this deeper than head and body since they tend to have random
// other nodes in them. We also ignore components with pure text content in
// side of them.
// TODO: Better heuristic.
if(fiber.tag!==HostComponent||type!=='head'&&type!=='body'&&!shouldSetTextContent(type,fiber.memoizedProps)){var nextInstance=nextHydratableInstance;while(nextInstance){deleteHydratableInstance(fiber,nextInstance);nextInstance=getNextHydratableSibling(nextInstance);}}popToNextHostParent(fiber);nextHydratableInstance=hydrationParentFiber?getNextHydratableSibling(fiber.stateNode):null;return true;}function resetHydrationState(){if(!supportsHydration){return;}hydrationParentFiber=null;nextHydratableInstance=null;isHydrating=false;}function readLazyComponentType(lazyComponent){var status=lazyComponent._status;var result=lazyComponent._result;switch(status){case Resolved:{var Component=result;return Component;}case Rejected:{var error=result;throw error;}case Pending:{var thenable=result;throw thenable;}default:{lazyComponent._status=Pending;var ctor=lazyComponent._ctor;var _thenable=ctor();_thenable.then(function(moduleObject){if(lazyComponent._status===Pending){var defaultExport=moduleObject.default;{if(defaultExport===undefined){warning$1(false,'lazy: Expected the result of a dynamic import() call. '+'Instead received: %s\n\nYour code should look like: \n  '+"const MyComponent = lazy(() => import('./MyComponent'))",moduleObject);}}lazyComponent._status=Resolved;lazyComponent._result=defaultExport;}},function(error){if(lazyComponent._status===Pending){lazyComponent._status=Rejected;lazyComponent._result=error;}});lazyComponent._result=_thenable;throw _thenable;}}}var ReactCurrentOwner$3=ReactSharedInternals.ReactCurrentOwner;var didWarnAboutBadClass=void 0;var didWarnAboutContextTypeOnFunctionComponent=void 0;var didWarnAboutGetDerivedStateOnFunctionComponent=void 0;var didWarnAboutFunctionRefs=void 0;{didWarnAboutBadClass={};didWarnAboutContextTypeOnFunctionComponent={};didWarnAboutGetDerivedStateOnFunctionComponent={};didWarnAboutFunctionRefs={};}function reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime){if(current$$1===null){// If this is a fresh new component that hasn't been rendered yet, we
// won't update its child set by applying minimal side-effects. Instead,
// we will add them all to the child before it gets rendered. That means
// we can optimize this reconciliation pass by not tracking side-effects.
workInProgress.child=mountChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}else{// If the current child is the same as the work in progress, it means that
// we haven't yet started any work on these children. Therefore, we use
// the clone algorithm to create a copy of all the current children.
// If we had any progressed work already, that is invalid at this point so
// let's throw it out.
workInProgress.child=reconcileChildFibers(workInProgress,current$$1.child,nextChildren,renderExpirationTime);}}function forceUnmountCurrentAndReconcile(current$$1,workInProgress,nextChildren,renderExpirationTime){// This function is fork of reconcileChildren. It's used in cases where we
// want to reconcile without matching against the existing set. This has the
// effect of all current children being unmounted; even if the type and key
// are the same, the old child is unmounted and a new child is created.
//
// To do this, we're going to go through the reconcile algorithm twice. In
// the first pass, we schedule a deletion for all the current children by
// passing null.
workInProgress.child=reconcileChildFibers(workInProgress,current$$1.child,null,renderExpirationTime);// In the second pass, we mount the new children. The trick here is that we
// pass null in place of where we usually pass the current child set. This has
// the effect of remounting all children regardless of whether their their
// identity matches.
workInProgress.child=reconcileChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}function updateForwardRef(current$$1,workInProgress,type,nextProps,renderExpirationTime){var render=type.render;var ref=workInProgress.ref;if(hasContextChanged()){// Normally we can bail out on props equality but if context has changed
// we don't do the bailout and we have to reuse existing props instead.
}else if(workInProgress.memoizedProps===nextProps){var currentRef=current$$1!==null?current$$1.ref:null;if(ref===currentRef){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}var nextChildren=void 0;{ReactCurrentOwner$3.current=workInProgress;setCurrentPhase('render');nextChildren=render(nextProps,ref);setCurrentPhase(null);}reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateMemoComponent(current$$1,workInProgress,Component,nextProps,updateExpirationTime,renderExpirationTime){if(current$$1===null){var type=Component.type;if(isSimpleFunctionComponent(type)&&Component.compare===null){// If this is a plain function component without default props,
// and with only the default shallow comparison, we upgrade it
// to a SimpleMemoComponent to allow fast path updates.
workInProgress.tag=SimpleMemoComponent;workInProgress.type=type;return updateSimpleMemoComponent(current$$1,workInProgress,type,nextProps,updateExpirationTime,renderExpirationTime);}var child=createFiberFromTypeAndProps(Component.type,null,nextProps,null,workInProgress.mode,renderExpirationTime);child.ref=workInProgress.ref;child.return=workInProgress;workInProgress.child=child;return child;}var currentChild=current$$1.child;// This is always exactly one child
if(updateExpirationTime===NoWork||updateExpirationTime>renderExpirationTime){// This will be the props with resolved defaultProps,
// unlike current.memoizedProps which will be the unresolved ones.
var prevProps=currentChild.memoizedProps;// Default to shallow comparison
var compare=Component.compare;compare=compare!==null?compare:shallowEqual;if(compare(prevProps,nextProps)&&current$$1.ref===workInProgress.ref){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}var newChild=createWorkInProgress(currentChild,nextProps,renderExpirationTime);newChild.ref=workInProgress.ref;newChild.return=workInProgress;workInProgress.child=newChild;return newChild;}function updateSimpleMemoComponent(current$$1,workInProgress,Component,nextProps,updateExpirationTime,renderExpirationTime){if(current$$1!==null&&(updateExpirationTime===NoWork||updateExpirationTime>renderExpirationTime)){var prevProps=current$$1.memoizedProps;if(shallowEqual(prevProps,nextProps)&&current$$1.ref===workInProgress.ref){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}return updateFunctionComponent(current$$1,workInProgress,Component,nextProps,renderExpirationTime);}function updateFragment(current$$1,workInProgress,renderExpirationTime){var nextChildren=workInProgress.pendingProps;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateMode(current$$1,workInProgress,renderExpirationTime){var nextChildren=workInProgress.pendingProps.children;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateProfiler(current$$1,workInProgress,renderExpirationTime){if(enableProfilerTimer){workInProgress.effectTag|=Update;}var nextProps=workInProgress.pendingProps;var nextChildren=nextProps.children;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function markRef(current$$1,workInProgress){var ref=workInProgress.ref;if(current$$1===null&&ref!==null||current$$1!==null&&current$$1.ref!==ref){// Schedule a Ref effect
workInProgress.effectTag|=Ref;}}function updateFunctionComponent(current$$1,workInProgress,Component,nextProps,renderExpirationTime){var unmaskedContext=getUnmaskedContext(workInProgress,Component,true);var context=getMaskedContext(workInProgress,unmaskedContext);var nextChildren=void 0;prepareToReadContext(workInProgress,renderExpirationTime);{ReactCurrentOwner$3.current=workInProgress;setCurrentPhase('render');nextChildren=Component(nextProps,context);setCurrentPhase(null);}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateClassComponent(current$$1,workInProgress,Component,nextProps,renderExpirationTime){// Push context providers early to prevent context stack mismatches.
// During mounting we don't know the child context yet as the instance doesn't exist.
// We will invalidate the child context in finishClassComponent() right after rendering.
var hasContext=void 0;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}prepareToReadContext(workInProgress,renderExpirationTime);var instance=workInProgress.stateNode;var shouldUpdate=void 0;if(instance===null){if(current$$1!==null){// An class component without an instance only mounts if it suspended
// inside a non- concurrent tree, in an inconsistent state. We want to
// tree it like a new mount, even though an empty version of it already
// committed. Disconnect the alternate pointers.
current$$1.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
workInProgress.effectTag|=Placement;}// In the initial pass we might need to construct the instance.
constructClassInstance(workInProgress,Component,nextProps,renderExpirationTime);mountClassInstance(workInProgress,Component,nextProps,renderExpirationTime);shouldUpdate=true;}else if(current$$1===null){// In a resume, we'll already have an instance we can reuse.
shouldUpdate=resumeMountClassInstance(workInProgress,Component,nextProps,renderExpirationTime);}else{shouldUpdate=updateClassInstance(current$$1,workInProgress,Component,nextProps,renderExpirationTime);}return finishClassComponent(current$$1,workInProgress,Component,shouldUpdate,hasContext,renderExpirationTime);}function finishClassComponent(current$$1,workInProgress,Component,shouldUpdate,hasContext,renderExpirationTime){// Refs should update even if shouldComponentUpdate returns false
markRef(current$$1,workInProgress);var didCaptureError=(workInProgress.effectTag&DidCapture)!==NoEffect;if(!shouldUpdate&&!didCaptureError){// Context providers should defer to sCU for rendering
if(hasContext){invalidateContextProvider(workInProgress,Component,false);}return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}var instance=workInProgress.stateNode;// Rerender
ReactCurrentOwner$3.current=workInProgress;var nextChildren=void 0;if(didCaptureError&&typeof Component.getDerivedStateFromError!=='function'){// If we captured an error, but getDerivedStateFrom catch is not defined,
// unmount all the children. componentDidCatch will schedule an update to
// re-render a fallback. This is temporary until we migrate everyone to
// the new API.
// TODO: Warn in a future release.
nextChildren=null;if(enableProfilerTimer){stopProfilerTimerIfRunning(workInProgress);}}else{{setCurrentPhase('render');nextChildren=instance.render();if(debugRenderPhaseSideEffects||debugRenderPhaseSideEffectsForStrictMode&&workInProgress.mode&StrictMode){instance.render();}setCurrentPhase(null);}}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;if(current$$1!==null&&didCaptureError){// If we're recovering from an error, reconcile without reusing any of
// the existing children. Conceptually, the normal children and the children
// that are shown on error are two different sets, so we shouldn't reuse
// normal children even if their identities match.
forceUnmountCurrentAndReconcile(current$$1,workInProgress,nextChildren,renderExpirationTime);}else{reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);}// Memoize state using the values we just used to render.
// TODO: Restructure so we never read values from the instance.
workInProgress.memoizedState=instance.state;// The context might have changed so we need to recalculate it.
if(hasContext){invalidateContextProvider(workInProgress,Component,true);}return workInProgress.child;}function pushHostRootContext(workInProgress){var root=workInProgress.stateNode;if(root.pendingContext){pushTopLevelContextObject(workInProgress,root.pendingContext,root.pendingContext!==root.context);}else if(root.context){// Should always be set
pushTopLevelContextObject(workInProgress,root.context,false);}pushHostContainer(workInProgress,root.containerInfo);}function updateHostRoot(current$$1,workInProgress,renderExpirationTime){pushHostRootContext(workInProgress);var updateQueue=workInProgress.updateQueue;!(updateQueue!==null)?invariant(false,'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.'):void 0;var nextProps=workInProgress.pendingProps;var prevState=workInProgress.memoizedState;var prevChildren=prevState!==null?prevState.element:null;processUpdateQueue(workInProgress,updateQueue,nextProps,null,renderExpirationTime);var nextState=workInProgress.memoizedState;// Caution: React DevTools currently depends on this property
// being called "element".
var nextChildren=nextState.element;if(nextChildren===prevChildren){// If the state is the same as before, that's a bailout because we had
// no work that expires at this time.
resetHydrationState();return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}var root=workInProgress.stateNode;if((current$$1===null||current$$1.child===null)&&root.hydrate&&enterHydrationState(workInProgress)){// If we don't have any current children this might be the first pass.
// We always try to hydrate. If this isn't a hydration pass there won't
// be any children to hydrate which is effectively the same thing as
// not hydrating.
// This is a bit of a hack. We track the host root as a placement to
// know that we're currently in a mounting state. That way isMounted
// works as expected. We must reset this before committing.
// TODO: Delete this when we delete isMounted and findDOMNode.
workInProgress.effectTag|=Placement;// Ensure that children mount into this root without tracking
// side-effects. This ensures that we don't store Placement effects on
// nodes that will be hydrated.
workInProgress.child=mountChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}else{// Otherwise reset hydration state in case we aborted and resumed another
// root.
reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);resetHydrationState();}return workInProgress.child;}function updateHostComponent(current$$1,workInProgress,renderExpirationTime){pushHostContext(workInProgress);if(current$$1===null){tryToClaimNextHydratableInstance(workInProgress);}var type=workInProgress.type;var nextProps=workInProgress.pendingProps;var prevProps=current$$1!==null?current$$1.memoizedProps:null;var nextChildren=nextProps.children;var isDirectTextChild=shouldSetTextContent(type,nextProps);if(isDirectTextChild){// We special case a direct text child of a host node. This is a common
// case. We won't handle it as a reified child. We will instead handle
// this in the host environment that also have access to this prop. That
// avoids allocating another HostText fiber and traversing it.
nextChildren=null;}else if(prevProps!==null&&shouldSetTextContent(type,prevProps)){// If we're switching from a direct text child to a normal child, or to
// empty, we need to schedule the text content to be reset.
workInProgress.effectTag|=ContentReset;}markRef(current$$1,workInProgress);// Check the host config to see if the children are offscreen/hidden.
if(renderExpirationTime!==Never&&workInProgress.mode&ConcurrentMode&&shouldDeprioritizeSubtree(type,nextProps)){// Schedule this fiber to re-render at offscreen priority. Then bailout.
workInProgress.expirationTime=Never;return null;}reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);return workInProgress.child;}function updateHostText(current$$1,workInProgress){if(current$$1===null){tryToClaimNextHydratableInstance(workInProgress);}// Nothing to do here. This is terminal. We'll do the completion step
// immediately after.
return null;}function resolveDefaultProps(Component,baseProps){if(Component&&Component.defaultProps){// Resolve default props. Taken from ReactElement
var props=_assign({},baseProps);var defaultProps=Component.defaultProps;for(var propName in defaultProps){if(props[propName]===undefined){props[propName]=defaultProps[propName];}}return props;}return baseProps;}function mountLazyComponent(_current,workInProgress,elementType,updateExpirationTime,renderExpirationTime){if(_current!==null){// An lazy component only mounts if it suspended inside a non-
// concurrent tree, in an inconsistent state. We want to tree it like
// a new mount, even though an empty version of it already committed.
// Disconnect the alternate pointers.
_current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
workInProgress.effectTag|=Placement;}var props=workInProgress.pendingProps;// We can't start a User Timing measurement with correct label yet.
// Cancel and resume right after we know the tag.
cancelWorkTimer(workInProgress);var Component=readLazyComponentType(elementType);// Store the unwrapped component in the type.
workInProgress.type=Component;var resolvedTag=workInProgress.tag=resolveLazyComponentTag(Component);startWorkTimer(workInProgress);var resolvedProps=resolveDefaultProps(Component,props);var child=void 0;switch(resolvedTag){case FunctionComponent:{child=updateFunctionComponent(null,workInProgress,Component,resolvedProps,renderExpirationTime);break;}case ClassComponent:{child=updateClassComponent(null,workInProgress,Component,resolvedProps,renderExpirationTime);break;}case ForwardRef:{child=updateForwardRef(null,workInProgress,Component,resolvedProps,renderExpirationTime);break;}case MemoComponent:{child=updateMemoComponent(null,workInProgress,Component,resolveDefaultProps(Component.type,resolvedProps),// The inner type can have defaults too
updateExpirationTime,renderExpirationTime);break;}default:{// This message intentionally doesn't metion ForwardRef or MemoComponent
// because the fact that it's a separate type of work is an
// implementation detail.
invariant(false,'Element type is invalid. Received a promise that resolves to: %s. Promise elements must resolve to a class or function.',Component);}}return child;}function mountIncompleteClassComponent(_current,workInProgress,Component,nextProps,renderExpirationTime){if(_current!==null){// An incomplete component only mounts if it suspended inside a non-
// concurrent tree, in an inconsistent state. We want to tree it like
// a new mount, even though an empty version of it already committed.
// Disconnect the alternate pointers.
_current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
workInProgress.effectTag|=Placement;}// Promote the fiber to a class and try rendering again.
workInProgress.tag=ClassComponent;// The rest of this function is a fork of `updateClassComponent`
// Push context providers early to prevent context stack mismatches.
// During mounting we don't know the child context yet as the instance doesn't exist.
// We will invalidate the child context in finishClassComponent() right after rendering.
var hasContext=void 0;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}prepareToReadContext(workInProgress,renderExpirationTime);constructClassInstance(workInProgress,Component,nextProps,renderExpirationTime);mountClassInstance(workInProgress,Component,nextProps,renderExpirationTime);return finishClassComponent(null,workInProgress,Component,true,hasContext,renderExpirationTime);}function mountIndeterminateComponent(_current,workInProgress,Component,renderExpirationTime){if(_current!==null){// An indeterminate component only mounts if it suspended inside a non-
// concurrent tree, in an inconsistent state. We want to tree it like
// a new mount, even though an empty version of it already committed.
// Disconnect the alternate pointers.
_current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
workInProgress.effectTag|=Placement;}var props=workInProgress.pendingProps;var unmaskedContext=getUnmaskedContext(workInProgress,Component,false);var context=getMaskedContext(workInProgress,unmaskedContext);prepareToReadContext(workInProgress,renderExpirationTime);var value=void 0;{if(Component.prototype&&typeof Component.prototype.render==='function'){var componentName=getComponentName(Component)||'Unknown';if(!didWarnAboutBadClass[componentName]){warningWithoutStack$1(false,"The <%s /> component appears to have a render method, but doesn't extend React.Component. "+'This is likely to cause errors. Change %s to extend React.Component instead.',componentName,componentName);didWarnAboutBadClass[componentName]=true;}}if(workInProgress.mode&StrictMode){ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress,null);}ReactCurrentOwner$3.current=workInProgress;value=Component(props,context);}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;if(typeof value==='object'&&value!==null&&typeof value.render==='function'&&value.$$typeof===undefined){// Proceed under the assumption that this is a class instance
workInProgress.tag=ClassComponent;// Push context providers early to prevent context stack mismatches.
// During mounting we don't know the child context yet as the instance doesn't exist.
// We will invalidate the child context in finishClassComponent() right after rendering.
var hasContext=false;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}workInProgress.memoizedState=value.state!==null&&value.state!==undefined?value.state:null;var getDerivedStateFromProps=Component.getDerivedStateFromProps;if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,Component,getDerivedStateFromProps,props);}adoptClassInstance(workInProgress,value);mountClassInstance(workInProgress,Component,props,renderExpirationTime);return finishClassComponent(null,workInProgress,Component,true,hasContext,renderExpirationTime);}else{// Proceed under the assumption that this is a function component
workInProgress.tag=FunctionComponent;{if(Component){!!Component.childContextTypes?warningWithoutStack$1(false,'%s(...): childContextTypes cannot be defined on a function component.',Component.displayName||Component.name||'Component'):void 0;}if(workInProgress.ref!==null){var info='';var ownerName=getCurrentFiberOwnerNameInDevOrNull();if(ownerName){info+='\n\nCheck the render method of `'+ownerName+'`.';}var warningKey=ownerName||workInProgress._debugID||'';var debugSource=workInProgress._debugSource;if(debugSource){warningKey=debugSource.fileName+':'+debugSource.lineNumber;}if(!didWarnAboutFunctionRefs[warningKey]){didWarnAboutFunctionRefs[warningKey]=true;warning$1(false,'Function components cannot be given refs. '+'Attempts to access this ref will fail.%s',info);}}if(typeof Component.getDerivedStateFromProps==='function'){var _componentName=getComponentName(Component)||'Unknown';if(!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName]){warningWithoutStack$1(false,'%s: Function components do not support getDerivedStateFromProps.',_componentName);didWarnAboutGetDerivedStateOnFunctionComponent[_componentName]=true;}}if(typeof Component.contextType==='object'&&Component.contextType!==null){var _componentName2=getComponentName(Component)||'Unknown';if(!didWarnAboutContextTypeOnFunctionComponent[_componentName2]){warningWithoutStack$1(false,'%s: Function components do not support contextType.',_componentName2);didWarnAboutContextTypeOnFunctionComponent[_componentName2]=true;}}}reconcileChildren(null,workInProgress,value,renderExpirationTime);return workInProgress.child;}}function updateSuspenseComponent(current$$1,workInProgress,renderExpirationTime){var mode=workInProgress.mode;var nextProps=workInProgress.pendingProps;// We should attempt to render the primary children unless this boundary
// already suspended during this render (`alreadyCaptured` is true).
var nextState=workInProgress.memoizedState;if(nextState===null){// An empty suspense state means this boundary has not yet timed out.
}else{if(!nextState.alreadyCaptured){// Since we haven't already suspended during this commit, clear the
// existing suspense state. We'll try rendering again.
nextState=null;}else{// Something in this boundary's subtree already suspended. Switch to
// rendering the fallback children. Set `alreadyCaptured` to true.
if(current$$1!==null&&nextState===current$$1.memoizedState){// Create a new suspense state to avoid mutating the current tree's.
nextState={alreadyCaptured:true,didTimeout:true,timedOutAt:nextState.timedOutAt};}else{// Already have a clone, so it's safe to mutate.
nextState.alreadyCaptured=true;nextState.didTimeout=true;}}}var nextDidTimeout=nextState!==null&&nextState.didTimeout;// This next part is a bit confusing. If the children timeout, we switch to
// showing the fallback children in place of the "primary" children.
// However, we don't want to delete the primary children because then their
// state will be lost (both the React state and the host state, e.g.
// uncontrolled form inputs). Instead we keep them mounted and hide them.
// Both the fallback children AND the primary children are rendered at the
// same time. Once the primary children are un-suspended, we can delete
// the fallback children — don't need to preserve their state.
//
// The two sets of children are siblings in the host environment, but
// semantically, for purposes of reconciliation, they are two separate sets.
// So we store them using two fragment fibers.
//
// However, we want to avoid allocating extra fibers for every placeholder.
// They're only necessary when the children time out, because that's the
// only time when both sets are mounted.
//
// So, the extra fragment fibers are only used if the children time out.
// Otherwise, we render the primary children directly. This requires some
// custom reconciliation logic to preserve the state of the primary
// children. It's essentially a very basic form of re-parenting.
// `child` points to the child fiber. In the normal case, this is the first
// fiber of the primary children set. In the timed-out case, it's a
// a fragment fiber containing the primary children.
var child=void 0;// `next` points to the next fiber React should render. In the normal case,
// it's the same as `child`: the first fiber of the primary children set.
// In the timed-out case, it's a fragment fiber containing the *fallback*
// children -- we skip over the primary children entirely.
var next=void 0;if(current$$1===null){// This is the initial mount. This branch is pretty simple because there's
// no previous state that needs to be preserved.
if(nextDidTimeout){// Mount separate fragments for primary and fallback children.
var nextFallbackChildren=nextProps.fallback;var primaryChildFragment=createFiberFromFragment(null,mode,NoWork,null);var fallbackChildFragment=createFiberFromFragment(nextFallbackChildren,mode,renderExpirationTime,null);primaryChildFragment.sibling=fallbackChildFragment;child=primaryChildFragment;// Skip the primary children, and continue working on the
// fallback children.
next=fallbackChildFragment;child.return=next.return=workInProgress;}else{// Mount the primary children without an intermediate fragment fiber.
var nextPrimaryChildren=nextProps.children;child=next=mountChildFibers(workInProgress,null,nextPrimaryChildren,renderExpirationTime);}}else{// This is an update. This branch is more complicated because we need to
// ensure the state of the primary children is preserved.
var prevState=current$$1.memoizedState;var prevDidTimeout=prevState!==null&&prevState.didTimeout;if(prevDidTimeout){// The current tree already timed out. That means each child set is
var currentPrimaryChildFragment=current$$1.child;var currentFallbackChildFragment=currentPrimaryChildFragment.sibling;if(nextDidTimeout){// Still timed out. Reuse the current primary children by cloning
// its fragment. We're going to skip over these entirely.
var _nextFallbackChildren=nextProps.fallback;var _primaryChildFragment=createWorkInProgress(currentPrimaryChildFragment,currentPrimaryChildFragment.pendingProps,NoWork);_primaryChildFragment.effectTag|=Placement;// Clone the fallback child fragment, too. These we'll continue
// working on.
var _fallbackChildFragment=_primaryChildFragment.sibling=createWorkInProgress(currentFallbackChildFragment,_nextFallbackChildren,currentFallbackChildFragment.expirationTime);_fallbackChildFragment.effectTag|=Placement;child=_primaryChildFragment;_primaryChildFragment.childExpirationTime=NoWork;// Skip the primary children, and continue working on the
// fallback children.
next=_fallbackChildFragment;child.return=next.return=workInProgress;}else{// No longer suspended. Switch back to showing the primary children,
// and remove the intermediate fragment fiber.
var _nextPrimaryChildren=nextProps.children;var currentPrimaryChild=currentPrimaryChildFragment.child;var currentFallbackChild=currentFallbackChildFragment.child;var primaryChild=reconcileChildFibers(workInProgress,currentPrimaryChild,_nextPrimaryChildren,renderExpirationTime);// Delete the fallback children.
reconcileChildFibers(workInProgress,currentFallbackChild,null,renderExpirationTime);// Continue rendering the children, like we normally do.
child=next=primaryChild;}}else{// The current tree has not already timed out. That means the primary
var _currentPrimaryChild=current$$1.child;if(nextDidTimeout){// Timed out. Wrap the children in a fragment fiber to keep them
// separate from the fallback children.
var _nextFallbackChildren2=nextProps.fallback;var _primaryChildFragment2=createFiberFromFragment(// It shouldn't matter what the pending props are because we aren't
// going to render this fragment.
null,mode,NoWork,null);_primaryChildFragment2.effectTag|=Placement;_primaryChildFragment2.child=_currentPrimaryChild;_currentPrimaryChild.return=_primaryChildFragment2;// Create a fragment from the fallback children, too.
var _fallbackChildFragment2=_primaryChildFragment2.sibling=createFiberFromFragment(_nextFallbackChildren2,mode,renderExpirationTime,null);_fallbackChildFragment2.effectTag|=Placement;child=_primaryChildFragment2;_primaryChildFragment2.childExpirationTime=NoWork;// Skip the primary children, and continue working on the
// fallback children.
next=_fallbackChildFragment2;child.return=next.return=workInProgress;}else{// Still haven't timed out.  Continue rendering the children, like we
// normally do.
var _nextPrimaryChildren2=nextProps.children;next=child=reconcileChildFibers(workInProgress,_currentPrimaryChild,_nextPrimaryChildren2,renderExpirationTime);}}}workInProgress.memoizedState=nextState;workInProgress.child=child;return next;}function updatePortalComponent(current$$1,workInProgress,renderExpirationTime){pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);var nextChildren=workInProgress.pendingProps;if(current$$1===null){// Portals are special because we don't append the children during mount
// but at commit. Therefore we need to track insertions which the normal
// flow doesn't do during mount. This doesn't happen at the root because
// the root always starts with a "current" with a null child.
// TODO: Consider unifying this with how the root works.
workInProgress.child=reconcileChildFibers(workInProgress,null,nextChildren,renderExpirationTime);}else{reconcileChildren(current$$1,workInProgress,nextChildren,renderExpirationTime);}return workInProgress.child;}function updateContextProvider(current$$1,workInProgress,renderExpirationTime){var providerType=workInProgress.type;var context=providerType._context;var newProps=workInProgress.pendingProps;var oldProps=workInProgress.memoizedProps;var newValue=newProps.value;{var providerPropTypes=workInProgress.type.propTypes;if(providerPropTypes){checkPropTypes(providerPropTypes,newProps,'prop','Context.Provider',getCurrentFiberStackInDev);}}pushProvider(workInProgress,newValue);if(oldProps!==null){var oldValue=oldProps.value;var changedBits=calculateChangedBits(context,newValue,oldValue);if(changedBits===0){// No change. Bailout early if children are the same.
if(oldProps.children===newProps.children&&!hasContextChanged()){return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}else{// The context value changed. Search for matching consumers and schedule
// them to update.
propagateContextChange(workInProgress,context,changedBits,renderExpirationTime);}}var newChildren=newProps.children;reconcileChildren(current$$1,workInProgress,newChildren,renderExpirationTime);return workInProgress.child;}var hasWarnedAboutUsingContextAsConsumer=false;function updateContextConsumer(current$$1,workInProgress,renderExpirationTime){var context=workInProgress.type;// The logic below for Context differs depending on PROD or DEV mode. In
// DEV mode, we create a separate object for Context.Consumer that acts
// like a proxy to Context. This proxy object adds unnecessary code in PROD
// so we use the old behaviour (Context.Consumer references Context) to
// reduce size and overhead. The separate object references context via
// a property called "_context", which also gives us the ability to check
// in DEV mode if this property exists or not and warn if it does not.
{if(context._context===undefined){// This may be because it's a Context (rather than a Consumer).
// Or it may be because it's older React where they're the same thing.
// We only want to warn if we're sure it's a new React.
if(context!==context.Consumer){if(!hasWarnedAboutUsingContextAsConsumer){hasWarnedAboutUsingContextAsConsumer=true;warning$1(false,'Rendering <Context> directly is not supported and will be removed in '+'a future major release. Did you mean to render <Context.Consumer> instead?');}}}else{context=context._context;}}var newProps=workInProgress.pendingProps;var render=newProps.children;{!(typeof render==='function')?warningWithoutStack$1(false,'A context consumer was rendered with multiple children, or a child '+"that isn't a function. A context consumer expects a single child "+'that is a function. If you did pass a function, make sure there '+'is no trailing or leading whitespace around it.'):void 0;}prepareToReadContext(workInProgress,renderExpirationTime);var newValue=readContext(context,newProps.unstable_observedBits);var newChildren=void 0;{ReactCurrentOwner$3.current=workInProgress;setCurrentPhase('render');newChildren=render(newValue);setCurrentPhase(null);}// React DevTools reads this flag.
workInProgress.effectTag|=PerformedWork;reconcileChildren(current$$1,workInProgress,newChildren,renderExpirationTime);return workInProgress.child;}/*
  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
    let child = firstChild;
    do {
      // Ensure that the first and last effect of the parent corresponds
      // to the children's first and last effect.
      if (!returnFiber.firstEffect) {
        returnFiber.firstEffect = child.firstEffect;
      }
      if (child.lastEffect) {
        if (returnFiber.lastEffect) {
          returnFiber.lastEffect.nextEffect = child.firstEffect;
        }
        returnFiber.lastEffect = child.lastEffect;
      }
    } while (child = child.sibling);
  }
  */function bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime){cancelWorkTimer(workInProgress);if(current$$1!==null){// Reuse previous context list
workInProgress.firstContextDependency=current$$1.firstContextDependency;}if(enableProfilerTimer){// Don't update "base" render times for bailouts.
stopProfilerTimerIfRunning(workInProgress);}// Check if the children have any pending work.
var childExpirationTime=workInProgress.childExpirationTime;if(childExpirationTime===NoWork||childExpirationTime>renderExpirationTime){// The children don't have any work either. We can skip them.
// TODO: Once we add back resuming, we should check if the children are
// a work-in-progress set. If so, we need to transfer their effects.
return null;}else{// This fiber doesn't have work, but its subtree does. Clone the child
// fibers and continue.
cloneChildFibers(current$$1,workInProgress);return workInProgress.child;}}function beginWork(current$$1,workInProgress,renderExpirationTime){var updateExpirationTime=workInProgress.expirationTime;if(current$$1!==null){var oldProps=current$$1.memoizedProps;var newProps=workInProgress.pendingProps;if(oldProps===newProps&&!hasContextChanged()&&(updateExpirationTime===NoWork||updateExpirationTime>renderExpirationTime)){// This fiber does not have any pending work. Bailout without entering
// the begin phase. There's still some bookkeeping we that needs to be done
// in this optimized path, mostly pushing stuff onto the stack.
switch(workInProgress.tag){case HostRoot:pushHostRootContext(workInProgress);resetHydrationState();break;case HostComponent:pushHostContext(workInProgress);break;case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){pushContextProvider(workInProgress);}break;}case HostPortal:pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);break;case ContextProvider:{var newValue=workInProgress.memoizedProps.value;pushProvider(workInProgress,newValue);break;}case Profiler:if(enableProfilerTimer){workInProgress.effectTag|=Update;}break;case SuspenseComponent:{var state=workInProgress.memoizedState;var didTimeout=state!==null&&state.didTimeout;if(didTimeout){// If this boundary is currently timed out, we need to decide
// whether to retry the primary children, or to skip over it and
// go straight to the fallback. Check the priority of the primary
var primaryChildFragment=workInProgress.child;var primaryChildExpirationTime=primaryChildFragment.childExpirationTime;if(primaryChildExpirationTime!==NoWork&&primaryChildExpirationTime<=renderExpirationTime){// The primary children have pending work. Use the normal path
// to attempt to render the primary children again.
return updateSuspenseComponent(current$$1,workInProgress,renderExpirationTime);}else{// The primary children do not have pending work with sufficient
// priority. Bailout.
var child=bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);if(child!==null){// The fallback children have pending work. Skip over the
// primary children and work on the fallback.
return child.sibling;}else{return null;}}}break;}}return bailoutOnAlreadyFinishedWork(current$$1,workInProgress,renderExpirationTime);}}// Before entering the begin phase, clear the expiration time.
workInProgress.expirationTime=NoWork;switch(workInProgress.tag){case IndeterminateComponent:{var elementType=workInProgress.elementType;return mountIndeterminateComponent(current$$1,workInProgress,elementType,renderExpirationTime);}case LazyComponent:{var _elementType=workInProgress.elementType;return mountLazyComponent(current$$1,workInProgress,_elementType,updateExpirationTime,renderExpirationTime);}case FunctionComponent:{var _Component=workInProgress.type;var unresolvedProps=workInProgress.pendingProps;var resolvedProps=workInProgress.elementType===_Component?unresolvedProps:resolveDefaultProps(_Component,unresolvedProps);return updateFunctionComponent(current$$1,workInProgress,_Component,resolvedProps,renderExpirationTime);}case ClassComponent:{var _Component2=workInProgress.type;var _unresolvedProps=workInProgress.pendingProps;var _resolvedProps=workInProgress.elementType===_Component2?_unresolvedProps:resolveDefaultProps(_Component2,_unresolvedProps);return updateClassComponent(current$$1,workInProgress,_Component2,_resolvedProps,renderExpirationTime);}case HostRoot:return updateHostRoot(current$$1,workInProgress,renderExpirationTime);case HostComponent:return updateHostComponent(current$$1,workInProgress,renderExpirationTime);case HostText:return updateHostText(current$$1,workInProgress);case SuspenseComponent:return updateSuspenseComponent(current$$1,workInProgress,renderExpirationTime);case HostPortal:return updatePortalComponent(current$$1,workInProgress,renderExpirationTime);case ForwardRef:{var type=workInProgress.type;var _unresolvedProps2=workInProgress.pendingProps;var _resolvedProps2=workInProgress.elementType===type?_unresolvedProps2:resolveDefaultProps(type,_unresolvedProps2);return updateForwardRef(current$$1,workInProgress,type,_resolvedProps2,renderExpirationTime);}case Fragment:return updateFragment(current$$1,workInProgress,renderExpirationTime);case Mode:return updateMode(current$$1,workInProgress,renderExpirationTime);case Profiler:return updateProfiler(current$$1,workInProgress,renderExpirationTime);case ContextProvider:return updateContextProvider(current$$1,workInProgress,renderExpirationTime);case ContextConsumer:return updateContextConsumer(current$$1,workInProgress,renderExpirationTime);case MemoComponent:{var _type=workInProgress.type;var _unresolvedProps3=workInProgress.pendingProps;var _resolvedProps3=resolveDefaultProps(_type.type,_unresolvedProps3);return updateMemoComponent(current$$1,workInProgress,_type,_resolvedProps3,updateExpirationTime,renderExpirationTime);}case SimpleMemoComponent:{return updateSimpleMemoComponent(current$$1,workInProgress,workInProgress.type,workInProgress.pendingProps,updateExpirationTime,renderExpirationTime);}case IncompleteClassComponent:{var _Component3=workInProgress.type;var _unresolvedProps4=workInProgress.pendingProps;var _resolvedProps4=workInProgress.elementType===_Component3?_unresolvedProps4:resolveDefaultProps(_Component3,_unresolvedProps4);return mountIncompleteClassComponent(current$$1,workInProgress,_Component3,_resolvedProps4,renderExpirationTime);}default:invariant(false,'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');}}function markUpdate(workInProgress){// Tag the fiber with an update effect. This turns a Placement into
// a PlacementAndUpdate.
workInProgress.effectTag|=Update;}function markRef$1(workInProgress){workInProgress.effectTag|=Ref;}var appendAllChildren=void 0;var updateHostContainer=void 0;var updateHostComponent$1=void 0;var updateHostText$1=void 0;if(supportsMutation){// Mutation mode
appendAllChildren=function(parent,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its
// children to find all the terminal nodes.
var node=workInProgress.child;while(node!==null){if(node.tag===HostComponent||node.tag===HostText){appendInitialChild(parent,node.stateNode);}else if(node.tag===HostPortal){// If we have a portal child, then we don't want to traverse
// down its children. Instead, we'll get insertions from each child in
// the portal directly.
}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===workInProgress){return;}while(node.sibling===null){if(node.return===null||node.return===workInProgress){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}};updateHostContainer=function(workInProgress){// Noop
};updateHostComponent$1=function(current,workInProgress,type,newProps,rootContainerInstance){// If we have an alternate, that means this is an update and we need to
// schedule a side-effect to do the updates.
var oldProps=current.memoizedProps;if(oldProps===newProps){// In mutation mode, this is sufficient for a bailout because
// we won't touch this node even if children changed.
return;}// If we get updated because one of our children updated, we don't
// have newProps so we'll have to reuse them.
// TODO: Split the update API as separate for the props vs. children.
// Even better would be if children weren't special cased at all tho.
var instance=workInProgress.stateNode;var currentHostContext=getHostContext();// TODO: Experiencing an error where oldProps is null. Suggests a host
// component is hitting the resume path. Figure out why. Possibly
// related to `hidden`.
var updatePayload=prepareUpdate(instance,type,oldProps,newProps,rootContainerInstance,currentHostContext);// TODO: Type this specific to this type of component.
workInProgress.updateQueue=updatePayload;// If the update payload indicates that there is a change or if there
// is a new ref we mark this as an update. All the work is done in commitWork.
if(updatePayload){markUpdate(workInProgress);}};updateHostText$1=function(current,workInProgress,oldText,newText){// If the text differs, mark it as an update. All the work in done in commitWork.
if(oldText!==newText){markUpdate(workInProgress);}};}else if(supportsPersistence){// Persistent host tree mode
appendAllChildren=function(parent,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its
// children to find all the terminal nodes.
var node=workInProgress.child;while(node!==null){// eslint-disable-next-line no-labels
branches:if(node.tag===HostComponent){var instance=node.stateNode;if(needsVisibilityToggle){var props=node.memoizedProps;var type=node.type;if(isHidden){// This child is inside a timed out tree. Hide it.
instance=cloneHiddenInstance(instance,type,props,node);}else{// This child was previously inside a timed out tree. If it was not
// updated during this render, it may need to be unhidden. Clone
// again to be sure.
instance=cloneUnhiddenInstance(instance,type,props,node);}node.stateNode=instance;}appendInitialChild(parent,instance);}else if(node.tag===HostText){var _instance=node.stateNode;if(needsVisibilityToggle){var text=node.memoizedProps;var rootContainerInstance=getRootHostContainer();var currentHostContext=getHostContext();if(isHidden){_instance=createHiddenTextInstance(text,rootContainerInstance,currentHostContext,workInProgress);}else{_instance=createTextInstance(text,rootContainerInstance,currentHostContext,workInProgress);}node.stateNode=_instance;}appendInitialChild(parent,_instance);}else if(node.tag===HostPortal){// If we have a portal child, then we don't want to traverse
// down its children. Instead, we'll get insertions from each child in
// the portal directly.
}else if(node.tag===SuspenseComponent){var current=node.alternate;if(current!==null){var oldState=current.memoizedState;var newState=node.memoizedState;var oldIsHidden=oldState!==null&&oldState.didTimeout;var newIsHidden=newState!==null&&newState.didTimeout;if(oldIsHidden!==newIsHidden){// The placeholder either just timed out or switched back to the normal
// children after having previously timed out. Toggle the visibility of
// the direct host children.
var primaryChildParent=newIsHidden?node.child:node;if(primaryChildParent!==null){appendAllChildren(parent,primaryChildParent,true,newIsHidden);}// eslint-disable-next-line no-labels
break branches;}}if(node.child!==null){// Continue traversing like normal
node.child.return=node;node=node.child;continue;}}else if(node.child!==null){node.child.return=node;node=node.child;continue;}// $FlowFixMe This is correct but Flow is confused by the labeled break.
node=node;if(node===workInProgress){return;}while(node.sibling===null){if(node.return===null||node.return===workInProgress){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}};// An unfortunate fork of appendAllChildren because we have two different parent types.
var appendAllChildrenToContainer=function(containerChildSet,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its
// children to find all the terminal nodes.
var node=workInProgress.child;while(node!==null){// eslint-disable-next-line no-labels
branches:if(node.tag===HostComponent){var instance=node.stateNode;if(needsVisibilityToggle){var props=node.memoizedProps;var type=node.type;if(isHidden){// This child is inside a timed out tree. Hide it.
instance=cloneHiddenInstance(instance,type,props,node);}else{// This child was previously inside a timed out tree. If it was not
// updated during this render, it may need to be unhidden. Clone
// again to be sure.
instance=cloneUnhiddenInstance(instance,type,props,node);}node.stateNode=instance;}appendChildToContainerChildSet(containerChildSet,instance);}else if(node.tag===HostText){var _instance2=node.stateNode;if(needsVisibilityToggle){var text=node.memoizedProps;var rootContainerInstance=getRootHostContainer();var currentHostContext=getHostContext();if(isHidden){_instance2=createHiddenTextInstance(text,rootContainerInstance,currentHostContext,workInProgress);}else{_instance2=createTextInstance(text,rootContainerInstance,currentHostContext,workInProgress);}node.stateNode=_instance2;}appendChildToContainerChildSet(containerChildSet,_instance2);}else if(node.tag===HostPortal){// If we have a portal child, then we don't want to traverse
// down its children. Instead, we'll get insertions from each child in
// the portal directly.
}else if(node.tag===SuspenseComponent){var current=node.alternate;if(current!==null){var oldState=current.memoizedState;var newState=node.memoizedState;var oldIsHidden=oldState!==null&&oldState.didTimeout;var newIsHidden=newState!==null&&newState.didTimeout;if(oldIsHidden!==newIsHidden){// The placeholder either just timed out or switched back to the normal
// children after having previously timed out. Toggle the visibility of
// the direct host children.
var primaryChildParent=newIsHidden?node.child:node;if(primaryChildParent!==null){appendAllChildrenToContainer(containerChildSet,primaryChildParent,true,newIsHidden);}// eslint-disable-next-line no-labels
break branches;}}if(node.child!==null){// Continue traversing like normal
node.child.return=node;node=node.child;continue;}}else if(node.child!==null){node.child.return=node;node=node.child;continue;}// $FlowFixMe This is correct but Flow is confused by the labeled break.
node=node;if(node===workInProgress){return;}while(node.sibling===null){if(node.return===null||node.return===workInProgress){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}};updateHostContainer=function(workInProgress){var portalOrRoot=workInProgress.stateNode;var childrenUnchanged=workInProgress.firstEffect===null;if(childrenUnchanged){// No changes, just reuse the existing instance.
}else{var container=portalOrRoot.containerInfo;var newChildSet=createContainerChildSet(container);// If children might have changed, we have to add them all to the set.
appendAllChildrenToContainer(newChildSet,workInProgress,false,false);portalOrRoot.pendingChildren=newChildSet;// Schedule an update on the container to swap out the container.
markUpdate(workInProgress);finalizeContainerChildren(container,newChildSet);}};updateHostComponent$1=function(current,workInProgress,type,newProps,rootContainerInstance){var currentInstance=current.stateNode;var oldProps=current.memoizedProps;// If there are no effects associated with this node, then none of our children had any updates.
// This guarantees that we can reuse all of them.
var childrenUnchanged=workInProgress.firstEffect===null;if(childrenUnchanged&&oldProps===newProps){// No changes, just reuse the existing instance.
// Note that this might release a previous clone.
workInProgress.stateNode=currentInstance;return;}var recyclableInstance=workInProgress.stateNode;var currentHostContext=getHostContext();var updatePayload=null;if(oldProps!==newProps){updatePayload=prepareUpdate(recyclableInstance,type,oldProps,newProps,rootContainerInstance,currentHostContext);}if(childrenUnchanged&&updatePayload===null){// No changes, just reuse the existing instance.
// Note that this might release a previous clone.
workInProgress.stateNode=currentInstance;return;}var newInstance=cloneInstance(currentInstance,updatePayload,type,oldProps,newProps,workInProgress,childrenUnchanged,recyclableInstance);if(finalizeInitialChildren(newInstance,type,newProps,rootContainerInstance,currentHostContext)){markUpdate(workInProgress);}workInProgress.stateNode=newInstance;if(childrenUnchanged){// If there are no other effects in this tree, we need to flag this node as having one.
// Even though we're not going to use it for anything.
// Otherwise parents won't know that there are new children to propagate upwards.
markUpdate(workInProgress);}else{// If children might have changed, we have to add them all to the set.
appendAllChildren(newInstance,workInProgress,false,false);}};updateHostText$1=function(current,workInProgress,oldText,newText){if(oldText!==newText){// If the text content differs, we'll create a new text instance for it.
var rootContainerInstance=getRootHostContainer();var currentHostContext=getHostContext();workInProgress.stateNode=createTextInstance(newText,rootContainerInstance,currentHostContext,workInProgress);// We'll have to mark it as having an effect, even though we won't use the effect for anything.
// This lets the parents know that at least one of their children has changed.
markUpdate(workInProgress);}};}else{// No host operations
updateHostContainer=function(workInProgress){// Noop
};updateHostComponent$1=function(current,workInProgress,type,newProps,rootContainerInstance){// Noop
};updateHostText$1=function(current,workInProgress,oldText,newText){// Noop
};}function completeWork(current,workInProgress,renderExpirationTime){var newProps=workInProgress.pendingProps;switch(workInProgress.tag){case IndeterminateComponent:break;case LazyComponent:break;case SimpleMemoComponent:case FunctionComponent:break;case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){popContext(workInProgress);}break;}case HostRoot:{popHostContainer(workInProgress);popTopLevelContextObject(workInProgress);var fiberRoot=workInProgress.stateNode;if(fiberRoot.pendingContext){fiberRoot.context=fiberRoot.pendingContext;fiberRoot.pendingContext=null;}if(current===null||current.child===null){// If we hydrated, pop so that we can delete any remaining children
// that weren't hydrated.
popHydrationState(workInProgress);// This resets the hacky state to fix isMounted before committing.
// TODO: Delete this when we delete isMounted and findDOMNode.
workInProgress.effectTag&=~Placement;}updateHostContainer(workInProgress);break;}case HostComponent:{popHostContext(workInProgress);var rootContainerInstance=getRootHostContainer();var type=workInProgress.type;if(current!==null&&workInProgress.stateNode!=null){updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance);if(current.ref!==workInProgress.ref){markRef$1(workInProgress);}}else{if(!newProps){!(workInProgress.stateNode!==null)?invariant(false,'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'):void 0;// This can happen when we abort work.
break;}var currentHostContext=getHostContext();// TODO: Move createInstance to beginWork and keep it on a context
// "stack" as the parent. Then append children as we go in beginWork
// or completeWork depending on we want to add then top->down or
// bottom->up. Top->down is faster in IE11.
var wasHydrated=popHydrationState(workInProgress);if(wasHydrated){// TODO: Move this and createInstance step into the beginPhase
// to consolidate.
if(prepareToHydrateHostInstance(workInProgress,rootContainerInstance,currentHostContext)){// If changes to the hydrated node needs to be applied at the
// commit-phase we mark this as such.
markUpdate(workInProgress);}}else{var instance=createInstance(type,newProps,rootContainerInstance,currentHostContext,workInProgress);appendAllChildren(instance,workInProgress,false,false);// Certain renderers require commit-time effects for initial mount.
// (eg DOM renderer supports auto-focus for certain elements).
// Make sure such renderers get scheduled for later work.
if(finalizeInitialChildren(instance,type,newProps,rootContainerInstance,currentHostContext)){markUpdate(workInProgress);}workInProgress.stateNode=instance;}if(workInProgress.ref!==null){// If there is a ref on a host node we need to schedule a callback
markRef$1(workInProgress);}}break;}case HostText:{var newText=newProps;if(current&&workInProgress.stateNode!=null){var oldText=current.memoizedProps;// If we have an alternate, that means this is an update and we need
// to schedule a side-effect to do the updates.
updateHostText$1(current,workInProgress,oldText,newText);}else{if(typeof newText!=='string'){!(workInProgress.stateNode!==null)?invariant(false,'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'):void 0;// This can happen when we abort work.
}var _rootContainerInstance=getRootHostContainer();var _currentHostContext=getHostContext();var _wasHydrated=popHydrationState(workInProgress);if(_wasHydrated){if(prepareToHydrateHostTextInstance(workInProgress)){markUpdate(workInProgress);}}else{workInProgress.stateNode=createTextInstance(newText,_rootContainerInstance,_currentHostContext,workInProgress);}}break;}case ForwardRef:break;case SuspenseComponent:{var nextState=workInProgress.memoizedState;var prevState=current!==null?current.memoizedState:null;var nextDidTimeout=nextState!==null&&nextState.didTimeout;var prevDidTimeout=prevState!==null&&prevState.didTimeout;if(nextDidTimeout!==prevDidTimeout){// If this render commits, and it switches between the normal state
// and the timed-out state, schedule an effect.
workInProgress.effectTag|=Update;}break;}case Fragment:break;case Mode:break;case Profiler:break;case HostPortal:popHostContainer(workInProgress);updateHostContainer(workInProgress);break;case ContextProvider:// Pop provider fiber
popProvider(workInProgress);break;case ContextConsumer:break;case MemoComponent:break;case IncompleteClassComponent:{// Same as class component case. I put it down here so that the tags are
// sequential to ensure this switch is compiled to a jump table.
var _Component=workInProgress.type;if(isContextProvider(_Component)){popContext(workInProgress);}break;}default:invariant(false,'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');}return null;}function shouldCaptureSuspense(current,workInProgress){// In order to capture, the Suspense component must have a fallback prop.
if(workInProgress.memoizedProps.fallback===undefined){return false;}// If it was the primary children that just suspended, capture and render the
// fallback. Otherwise, don't capture and bubble to the next boundary.
var nextState=workInProgress.memoizedState;return nextState===null||!nextState.didTimeout;}// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(capturedError){return true;}function logCapturedError(capturedError){var logError=showErrorDialog(capturedError);// Allow injected showErrorDialog() to prevent default console.error logging.
// This enables renderers like ReactNative to better manage redbox behavior.
if(logError===false){return;}var error=capturedError.error;{var componentName=capturedError.componentName,componentStack=capturedError.componentStack,errorBoundaryName=capturedError.errorBoundaryName,errorBoundaryFound=capturedError.errorBoundaryFound,willRetry=capturedError.willRetry;// Browsers support silencing uncaught errors by calling
// `preventDefault()` in window `error` handler.
// We record this information as an expando on the error.
if(error!=null&&error._suppressLogging){if(errorBoundaryFound&&willRetry){// The error is recoverable and was silenced.
// Ignore it and don't print the stack addendum.
// This is handy for testing error boundaries without noise.
return;}// The error is fatal. Since the silencing might have
// been accidental, we'll surface it anyway.
// However, the browser would have silenced the original error
// so we'll print it first, and then print the stack addendum.
console.error(error);// For a more detailed description of this block, see:
// https://github.com/facebook/react/pull/13384
}var componentNameMessage=componentName?'The above error occurred in the <'+componentName+'> component:':'The above error occurred in one of your React components:';var errorBoundaryMessage=void 0;// errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
if(errorBoundaryFound&&errorBoundaryName){if(willRetry){errorBoundaryMessage='React will try to recreate this component tree from scratch '+('using the error boundary you provided, '+errorBoundaryName+'.');}else{errorBoundaryMessage='This error was initially handled by the error boundary '+errorBoundaryName+'.\n'+'Recreating the tree from scratch failed so React will unmount the tree.';}}else{errorBoundaryMessage='Consider adding an error boundary to your tree to customize error handling behavior.\n'+'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';}var combinedMessage=''+componentNameMessage+componentStack+'\n\n'+(''+errorBoundaryMessage);// In development, we provide our own message with just the component stack.
// We don't include the original error message and JS stack because the browser
// has already printed it. Even if the application swallows the error, it is still
// displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
console.error(combinedMessage);}}var didWarnAboutUndefinedSnapshotBeforeUpdate=null;{didWarnAboutUndefinedSnapshotBeforeUpdate=new Set();}function logError(boundary,errorInfo){var source=errorInfo.source;var stack=errorInfo.stack;if(stack===null&&source!==null){stack=getStackByFiberInDevAndProd(source);}var capturedError={componentName:source!==null?getComponentName(source.type):null,componentStack:stack!==null?stack:'',error:errorInfo.value,errorBoundary:null,errorBoundaryName:null,errorBoundaryFound:false,willRetry:false};if(boundary!==null&&boundary.tag===ClassComponent){capturedError.errorBoundary=boundary.stateNode;capturedError.errorBoundaryName=getComponentName(boundary.type);capturedError.errorBoundaryFound=true;capturedError.willRetry=true;}try{logCapturedError(capturedError);}catch(e){// This method must not throw, or React internal state will get messed up.
// If console.error is overridden, or logCapturedError() shows a dialog that throws,
// we want to report this error outside of the normal stack as a last resort.
// https://github.com/facebook/react/issues/13188
setTimeout(function(){throw e;});}}var callComponentWillUnmountWithTimer=function(current$$1,instance){startPhaseTimer(current$$1,'componentWillUnmount');instance.props=current$$1.memoizedProps;instance.state=current$$1.memoizedState;instance.componentWillUnmount();stopPhaseTimer();};// Capture errors so they don't interrupt unmounting.
function safelyCallComponentWillUnmount(current$$1,instance){{invokeGuardedCallback(null,callComponentWillUnmountWithTimer,null,current$$1,instance);if(hasCaughtError()){var unmountError=clearCaughtError();captureCommitPhaseError(current$$1,unmountError);}}}function safelyDetachRef(current$$1){var ref=current$$1.ref;if(ref!==null){if(typeof ref==='function'){{invokeGuardedCallback(null,ref,null,null);if(hasCaughtError()){var refError=clearCaughtError();captureCommitPhaseError(current$$1,refError);}}}else{ref.current=null;}}}function commitBeforeMutationLifeCycles(current$$1,finishedWork){switch(finishedWork.tag){case ClassComponent:{if(finishedWork.effectTag&Snapshot){if(current$$1!==null){var prevProps=current$$1.memoizedProps;var prevState=current$$1.memoizedState;startPhaseTimer(finishedWork,'getSnapshotBeforeUpdate');var instance=finishedWork.stateNode;instance.props=finishedWork.memoizedProps;instance.state=finishedWork.memoizedState;var snapshot=instance.getSnapshotBeforeUpdate(prevProps,prevState);{var didWarnSet=didWarnAboutUndefinedSnapshotBeforeUpdate;if(snapshot===undefined&&!didWarnSet.has(finishedWork.type)){didWarnSet.add(finishedWork.type);warningWithoutStack$1(false,'%s.getSnapshotBeforeUpdate(): A snapshot value (or null) '+'must be returned. You have returned undefined.',getComponentName(finishedWork.type));}}instance.__reactInternalSnapshotBeforeUpdate=snapshot;stopPhaseTimer();}}return;}case HostRoot:case HostComponent:case HostText:case HostPortal:case IncompleteClassComponent:// Nothing to do for these component types
return;default:{invariant(false,'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');}}}function commitLifeCycles(finishedRoot,current$$1,finishedWork,committedExpirationTime){switch(finishedWork.tag){case ClassComponent:{var instance=finishedWork.stateNode;if(finishedWork.effectTag&Update){if(current$$1===null){startPhaseTimer(finishedWork,'componentDidMount');instance.props=finishedWork.memoizedProps;instance.state=finishedWork.memoizedState;instance.componentDidMount();stopPhaseTimer();}else{var prevProps=current$$1.memoizedProps;var prevState=current$$1.memoizedState;startPhaseTimer(finishedWork,'componentDidUpdate');instance.props=finishedWork.memoizedProps;instance.state=finishedWork.memoizedState;instance.componentDidUpdate(prevProps,prevState,instance.__reactInternalSnapshotBeforeUpdate);stopPhaseTimer();}}var updateQueue=finishedWork.updateQueue;if(updateQueue!==null){instance.props=finishedWork.memoizedProps;instance.state=finishedWork.memoizedState;commitUpdateQueue(finishedWork,updateQueue,instance,committedExpirationTime);}return;}case HostRoot:{var _updateQueue=finishedWork.updateQueue;if(_updateQueue!==null){var _instance=null;if(finishedWork.child!==null){switch(finishedWork.child.tag){case HostComponent:_instance=getPublicInstance(finishedWork.child.stateNode);break;case ClassComponent:_instance=finishedWork.child.stateNode;break;}}commitUpdateQueue(finishedWork,_updateQueue,_instance,committedExpirationTime);}return;}case HostComponent:{var _instance2=finishedWork.stateNode;// Renderers may schedule work to be done after host components are mounted
// (eg DOM renderer may schedule auto-focus for inputs and form controls).
// These effects should only be committed when components are first mounted,
// aka when there is no current/alternate.
if(current$$1===null&&finishedWork.effectTag&Update){var type=finishedWork.type;var props=finishedWork.memoizedProps;commitMount(_instance2,type,props,finishedWork);}return;}case HostText:{// We have no life-cycles associated with text.
return;}case HostPortal:{// We have no life-cycles associated with portals.
return;}case Profiler:{if(enableProfilerTimer){var onRender=finishedWork.memoizedProps.onRender;if(enableSchedulerTracing){onRender(finishedWork.memoizedProps.id,current$$1===null?'mount':'update',finishedWork.actualDuration,finishedWork.treeBaseDuration,finishedWork.actualStartTime,getCommitTime(),finishedRoot.memoizedInteractions);}else{onRender(finishedWork.memoizedProps.id,current$$1===null?'mount':'update',finishedWork.actualDuration,finishedWork.treeBaseDuration,finishedWork.actualStartTime,getCommitTime());}}return;}case SuspenseComponent:{if(finishedWork.effectTag&Callback){// In non-strict mode, a suspense boundary times out by commiting
// twice: first, by committing the children in an inconsistent state,
// then hiding them and showing the fallback children in a subsequent
var _newState={alreadyCaptured:true,didTimeout:false,timedOutAt:NoWork};finishedWork.memoizedState=_newState;scheduleWork(finishedWork,Sync);return;}var oldState=current$$1!==null?current$$1.memoizedState:null;var newState=finishedWork.memoizedState;var oldDidTimeout=oldState!==null?oldState.didTimeout:false;var newDidTimeout=void 0;var primaryChildParent=finishedWork;if(newState===null){newDidTimeout=false;}else{newDidTimeout=newState.didTimeout;if(newDidTimeout){primaryChildParent=finishedWork.child;newState.alreadyCaptured=false;if(newState.timedOutAt===NoWork){// If the children had not already timed out, record the time.
// This is used to compute the elapsed time during subsequent
// attempts to render the children.
newState.timedOutAt=requestCurrentTime();}}}if(newDidTimeout!==oldDidTimeout&&primaryChildParent!==null){hideOrUnhideAllChildren(primaryChildParent,newDidTimeout);}return;}case IncompleteClassComponent:break;default:{invariant(false,'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');}}}function hideOrUnhideAllChildren(finishedWork,isHidden){if(supportsMutation){// We only have the top Fiber that was inserted but we need recurse down its
var node=finishedWork;while(true){if(node.tag===HostComponent){var instance=node.stateNode;if(isHidden){hideInstance(instance);}else{unhideInstance(node.stateNode,node.memoizedProps);}}else if(node.tag===HostText){var _instance3=node.stateNode;if(isHidden){hideTextInstance(_instance3);}else{unhideTextInstance(_instance3,node.memoizedProps);}}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===finishedWork){return;}while(node.sibling===null){if(node.return===null||node.return===finishedWork){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}}function commitAttachRef(finishedWork){var ref=finishedWork.ref;if(ref!==null){var instance=finishedWork.stateNode;var instanceToUse=void 0;switch(finishedWork.tag){case HostComponent:instanceToUse=getPublicInstance(instance);break;default:instanceToUse=instance;}if(typeof ref==='function'){ref(instanceToUse);}else{{if(!ref.hasOwnProperty('current')){warningWithoutStack$1(false,'Unexpected ref object provided for %s. '+'Use either a ref-setter function or React.createRef().%s',getComponentName(finishedWork.type),getStackByFiberInDevAndProd(finishedWork));}}ref.current=instanceToUse;}}}function commitDetachRef(current$$1){var currentRef=current$$1.ref;if(currentRef!==null){if(typeof currentRef==='function'){currentRef(null);}else{currentRef.current=null;}}}// User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay
function commitUnmount(current$$1){onCommitUnmount(current$$1);switch(current$$1.tag){case ClassComponent:{safelyDetachRef(current$$1);var instance=current$$1.stateNode;if(typeof instance.componentWillUnmount==='function'){safelyCallComponentWillUnmount(current$$1,instance);}return;}case HostComponent:{safelyDetachRef(current$$1);return;}case HostPortal:{// TODO: this is recursive.
// We are also not using this parent because
// the portal will get pushed immediately.
if(supportsMutation){unmountHostComponents(current$$1);}else if(supportsPersistence){emptyPortalContainer(current$$1);}return;}}}function commitNestedUnmounts(root){// While we're inside a removed host node we don't want to call
// removeChild on the inner nodes because they're removed by the top
// call anyway. We also want to call componentWillUnmount on all
// composites before this host node is removed from the tree. Therefore
var node=root;while(true){commitUnmount(node);// Visit children because they may contain more composite or host nodes.
// Skip portals because commitUnmount() currently visits them recursively.
if(node.child!==null&&(// If we use mutation we drill down into portals using commitUnmount above.
// If we don't use mutation we drill down into portals here instead.
!supportsMutation||node.tag!==HostPortal)){node.child.return=node;node=node.child;continue;}if(node===root){return;}while(node.sibling===null){if(node.return===null||node.return===root){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}function detachFiber(current$$1){// Cut off the return pointers to disconnect it from the tree. Ideally, we
// should clear the child pointer of the parent alternate to let this
// get GC:ed but we don't know which for sure which parent is the current
// one so we'll settle for GC:ing the subtree of this child. This child
// itself will be GC:ed when the parent updates the next time.
current$$1.return=null;current$$1.child=null;if(current$$1.alternate){current$$1.alternate.child=null;current$$1.alternate.return=null;}}function emptyPortalContainer(current$$1){if(!supportsPersistence){return;}var portal=current$$1.stateNode;var containerInfo=portal.containerInfo;var emptyChildSet=createContainerChildSet(containerInfo);replaceContainerChildren(containerInfo,emptyChildSet);}function commitContainer(finishedWork){if(!supportsPersistence){return;}switch(finishedWork.tag){case ClassComponent:{return;}case HostComponent:{return;}case HostText:{return;}case HostRoot:case HostPortal:{var portalOrRoot=finishedWork.stateNode;var containerInfo=portalOrRoot.containerInfo,_pendingChildren=portalOrRoot.pendingChildren;replaceContainerChildren(containerInfo,_pendingChildren);return;}default:{invariant(false,'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');}}}function getHostParentFiber(fiber){var parent=fiber.return;while(parent!==null){if(isHostParent(parent)){return parent;}parent=parent.return;}invariant(false,'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');}function isHostParent(fiber){return fiber.tag===HostComponent||fiber.tag===HostRoot||fiber.tag===HostPortal;}function getHostSibling(fiber){// We're going to search forward into the tree until we find a sibling host
// node. Unfortunately, if multiple insertions are done in a row we have to
// search past them. This leads to exponential search for the next sibling.
var node=fiber;siblings:while(true){// If we didn't find anything, let's try the next sibling.
while(node.sibling===null){if(node.return===null||isHostParent(node.return)){// If we pop out of the root or hit the parent the fiber we are the
// last sibling.
return null;}node=node.return;}node.sibling.return=node.return;node=node.sibling;while(node.tag!==HostComponent&&node.tag!==HostText){// If it is not host node and, we might have a host node inside it.
// Try to search down until we find one.
if(node.effectTag&Placement){// If we don't have a child, try the siblings instead.
continue siblings;}// If we don't have a child, try the siblings instead.
// We also skip portals because they are not part of this host tree.
if(node.child===null||node.tag===HostPortal){continue siblings;}else{node.child.return=node;node=node.child;}}// Check if this host node is stable or about to be placed.
if(!(node.effectTag&Placement)){// Found it!
return node.stateNode;}}}function commitPlacement(finishedWork){if(!supportsMutation){return;}// Recursively insert all host nodes into the parent.
var parentFiber=getHostParentFiber(finishedWork);// Note: these two variables *must* always be updated together.
var parent=void 0;var isContainer=void 0;switch(parentFiber.tag){case HostComponent:parent=parentFiber.stateNode;isContainer=false;break;case HostRoot:parent=parentFiber.stateNode.containerInfo;isContainer=true;break;case HostPortal:parent=parentFiber.stateNode.containerInfo;isContainer=true;break;default:invariant(false,'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');}if(parentFiber.effectTag&ContentReset){// Reset the text content of the parent before doing any insertions
resetTextContent(parent);// Clear ContentReset from the effect tag
parentFiber.effectTag&=~ContentReset;}var before=getHostSibling(finishedWork);// We only have the top Fiber that was inserted but we need recurse down its
// children to find all the terminal nodes.
var node=finishedWork;while(true){if(node.tag===HostComponent||node.tag===HostText){if(before){if(isContainer){insertInContainerBefore(parent,node.stateNode,before);}else{insertBefore(parent,node.stateNode,before);}}else{if(isContainer){appendChildToContainer(parent,node.stateNode);}else{appendChild(parent,node.stateNode);}}}else if(node.tag===HostPortal){// If the insertion itself is a portal, then we don't want to traverse
// down its children. Instead, we'll get insertions from each child in
// the portal directly.
}else if(node.child!==null){node.child.return=node;node=node.child;continue;}if(node===finishedWork){return;}while(node.sibling===null){if(node.return===null||node.return===finishedWork){return;}node=node.return;}node.sibling.return=node.return;node=node.sibling;}}function unmountHostComponents(current$$1){// We only have the top Fiber that was deleted but we need recurse down its
var node=current$$1;// Each iteration, currentParent is populated with node's host parent if not
// currentParentIsValid.
var currentParentIsValid=false;// Note: these two variables *must* always be updated together.
var currentParent=void 0;var currentParentIsContainer=void 0;while(true){if(!currentParentIsValid){var parent=node.return;findParent:while(true){!(parent!==null)?invariant(false,'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'):void 0;switch(parent.tag){case HostComponent:currentParent=parent.stateNode;currentParentIsContainer=false;break findParent;case HostRoot:currentParent=parent.stateNode.containerInfo;currentParentIsContainer=true;break findParent;case HostPortal:currentParent=parent.stateNode.containerInfo;currentParentIsContainer=true;break findParent;}parent=parent.return;}currentParentIsValid=true;}if(node.tag===HostComponent||node.tag===HostText){commitNestedUnmounts(node);// After all the children have unmounted, it is now safe to remove the
// node from the tree.
if(currentParentIsContainer){removeChildFromContainer(currentParent,node.stateNode);}else{removeChild(currentParent,node.stateNode);}// Don't visit children because we already visited them.
}else if(node.tag===HostPortal){// When we go into a portal, it becomes the parent to remove from.
// We will reassign it back when we pop the portal on the way up.
currentParent=node.stateNode.containerInfo;currentParentIsContainer=true;// Visit children because portals might contain host components.
if(node.child!==null){node.child.return=node;node=node.child;continue;}}else{commitUnmount(node);// Visit children because we may find more host components below.
if(node.child!==null){node.child.return=node;node=node.child;continue;}}if(node===current$$1){return;}while(node.sibling===null){if(node.return===null||node.return===current$$1){return;}node=node.return;if(node.tag===HostPortal){// When we go out of the portal, we need to restore the parent.
// Since we don't keep a stack of them, we will search for it.
currentParentIsValid=false;}}node.sibling.return=node.return;node=node.sibling;}}function commitDeletion(current$$1){if(supportsMutation){// Recursively delete all host nodes from the parent.
// Detach refs and call componentWillUnmount() on the whole subtree.
unmountHostComponents(current$$1);}else{// Detach refs and call componentWillUnmount() on the whole subtree.
commitNestedUnmounts(current$$1);}detachFiber(current$$1);}function commitWork(current$$1,finishedWork){if(!supportsMutation){commitContainer(finishedWork);return;}switch(finishedWork.tag){case ClassComponent:{return;}case HostComponent:{var instance=finishedWork.stateNode;if(instance!=null){// Commit the work prepared earlier.
var newProps=finishedWork.memoizedProps;// For hydration we reuse the update path but we treat the oldProps
// as the newProps. The updatePayload will contain the real change in
// this case.
var oldProps=current$$1!==null?current$$1.memoizedProps:newProps;var type=finishedWork.type;// TODO: Type the updateQueue to be specific to host components.
var updatePayload=finishedWork.updateQueue;finishedWork.updateQueue=null;if(updatePayload!==null){commitUpdate(instance,updatePayload,type,oldProps,newProps,finishedWork);}}return;}case HostText:{!(finishedWork.stateNode!==null)?invariant(false,'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.'):void 0;var textInstance=finishedWork.stateNode;var newText=finishedWork.memoizedProps;// For hydration we reuse the update path but we treat the oldProps
// as the newProps. The updatePayload will contain the real change in
// this case.
var oldText=current$$1!==null?current$$1.memoizedProps:newText;commitTextUpdate(textInstance,oldText,newText);return;}case HostRoot:{return;}case Profiler:{return;}case SuspenseComponent:{return;}case IncompleteClassComponent:{return;}default:{invariant(false,'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');}}}function commitResetTextContent(current$$1){if(!supportsMutation){return;}resetTextContent(current$$1.stateNode);}function createRootErrorUpdate(fiber,errorInfo,expirationTime){var update=createUpdate(expirationTime);// Unmount the root by rendering null.
update.tag=CaptureUpdate;// Caution: React DevTools currently depends on this property
// being called "element".
update.payload={element:null};var error=errorInfo.value;update.callback=function(){onUncaughtError(error);logError(fiber,errorInfo);};return update;}function createClassErrorUpdate(fiber,errorInfo,expirationTime){var update=createUpdate(expirationTime);update.tag=CaptureUpdate;var getDerivedStateFromError=fiber.type.getDerivedStateFromError;if(typeof getDerivedStateFromError==='function'){var error=errorInfo.value;update.payload=function(){return getDerivedStateFromError(error);};}var inst=fiber.stateNode;if(inst!==null&&typeof inst.componentDidCatch==='function'){update.callback=function callback(){if(typeof getDerivedStateFromError!=='function'){// To preserve the preexisting retry behavior of error boundaries,
// we keep track of which ones already failed during this batch.
// This gets reset before we yield back to the browser.
// TODO: Warn in strict mode if getDerivedStateFromError is
// not defined.
markLegacyErrorBoundaryAsFailed(this);}var error=errorInfo.value;var stack=errorInfo.stack;logError(fiber,errorInfo);this.componentDidCatch(error,{componentStack:stack!==null?stack:''});{if(typeof getDerivedStateFromError!=='function'){// If componentDidCatch is the only error boundary method defined,
// then it needs to call setState to recover from errors.
// If no state update is scheduled then the boundary will swallow the error.
!(fiber.expirationTime===Sync)?warningWithoutStack$1(false,'%s: Error boundaries should implement getDerivedStateFromError(). '+'In that method, return a state update to display an error message or fallback UI.',getComponentName(fiber.type)||'Unknown'):void 0;}}};}return update;}function throwException(root,returnFiber,sourceFiber,value,renderExpirationTime){// The source fiber did not complete.
sourceFiber.effectTag|=Incomplete;// Its effect list is no longer valid.
sourceFiber.firstEffect=sourceFiber.lastEffect=null;if(value!==null&&typeof value==='object'&&typeof value.then==='function'){// This is a thenable.
var thenable=value;// Find the earliest timeout threshold of all the placeholders in the
// ancestor path. We could avoid this traversal by storing the thresholds on
// the stack, but we choose not to because we only hit this path if we're
// IO-bound (i.e. if something suspends). Whereas the stack is used even in
// the non-IO- bound case.
var _workInProgress=returnFiber;var earliestTimeoutMs=-1;var startTimeMs=-1;do{if(_workInProgress.tag===SuspenseComponent){var current=_workInProgress.alternate;if(current!==null){var currentState=current.memoizedState;if(currentState!==null&&currentState.didTimeout){// Reached a boundary that already timed out. Do not search
// any further.
var timedOutAt=currentState.timedOutAt;startTimeMs=expirationTimeToMs(timedOutAt);// Do not search any further.
break;}}var timeoutPropMs=_workInProgress.pendingProps.maxDuration;if(typeof timeoutPropMs==='number'){if(timeoutPropMs<=0){earliestTimeoutMs=0;}else if(earliestTimeoutMs===-1||timeoutPropMs<earliestTimeoutMs){earliestTimeoutMs=timeoutPropMs;}}}_workInProgress=_workInProgress.return;}while(_workInProgress!==null);// Schedule the nearest Suspense to re-render the timed out view.
_workInProgress=returnFiber;do{if(_workInProgress.tag===SuspenseComponent&&shouldCaptureSuspense(_workInProgress.alternate,_workInProgress)){// Found the nearest boundary.
// If the boundary is not in concurrent mode, we should not suspend, and
// likewise, when the promise resolves, we should ping synchronously.
var pingTime=(_workInProgress.mode&ConcurrentMode)===NoEffect?Sync:renderExpirationTime;// Attach a listener to the promise to "ping" the root and retry.
var onResolveOrReject=retrySuspendedRoot.bind(null,root,_workInProgress,sourceFiber,pingTime);if(enableSchedulerTracing){onResolveOrReject=tracing.unstable_wrap(onResolveOrReject);}thenable.then(onResolveOrReject,onResolveOrReject);// If the boundary is outside of concurrent mode, we should *not*
// suspend the commit. Pretend as if the suspended component rendered
// null and keep rendering. In the commit phase, we'll schedule a
// subsequent synchronous update to re-render the Suspense.
//
// Note: It doesn't matter whether the component that suspended was
// inside a concurrent mode tree. If the Suspense is outside of it, we
// should *not* suspend the commit.
if((_workInProgress.mode&ConcurrentMode)===NoEffect){_workInProgress.effectTag|=Callback;// Unmount the source fiber's children
var nextChildren=null;reconcileChildren(sourceFiber.alternate,sourceFiber,nextChildren,renderExpirationTime);sourceFiber.effectTag&=~Incomplete;if(sourceFiber.tag===ClassComponent){// We're going to commit this fiber even though it didn't complete.
// But we shouldn't call any lifecycle methods or callbacks. Remove
// all lifecycle effect tags.
sourceFiber.effectTag&=~LifecycleEffectMask;var _current=sourceFiber.alternate;if(_current===null){// This is a new mount. Change the tag so it's not mistaken for a
// completed component. For example, we should not call
// componentWillUnmount if it is deleted.
sourceFiber.tag=IncompleteClassComponent;}}// Exit without suspending.
return;}// Confirmed that the boundary is in a concurrent mode tree. Continue
// with the normal suspend path.
var absoluteTimeoutMs=void 0;if(earliestTimeoutMs===-1){// If no explicit threshold is given, default to an abitrarily large
// value. The actual size doesn't matter because the threshold for the
// whole tree will be clamped to the expiration time.
absoluteTimeoutMs=maxSigned31BitInt;}else{if(startTimeMs===-1){// This suspend happened outside of any already timed-out
// placeholders. We don't know exactly when the update was
// scheduled, but we can infer an approximate start time from the
// expiration time. First, find the earliest uncommitted expiration
// time in the tree, including work that is suspended. Then subtract
// the offset used to compute an async update's expiration time.
// This will cause high priority (interactive) work to expire
// earlier than necessary, but we can account for this by adjusting
// for the Just Noticeable Difference.
var earliestExpirationTime=findEarliestOutstandingPriorityLevel(root,renderExpirationTime);var earliestExpirationTimeMs=expirationTimeToMs(earliestExpirationTime);startTimeMs=earliestExpirationTimeMs-LOW_PRIORITY_EXPIRATION;}absoluteTimeoutMs=startTimeMs+earliestTimeoutMs;}// Mark the earliest timeout in the suspended fiber's ancestor path.
// After completing the root, we'll take the largest of all the
// suspended fiber's timeouts and use it to compute a timeout for the
// whole tree.
renderDidSuspend(root,absoluteTimeoutMs,renderExpirationTime);_workInProgress.effectTag|=ShouldCapture;_workInProgress.expirationTime=renderExpirationTime;return;}// This boundary already captured during this render. Continue to the next
// boundary.
_workInProgress=_workInProgress.return;}while(_workInProgress!==null);// No boundary was found. Fallthrough to error mode.
value=new Error('An update was suspended, but no placeholder UI was provided.');}// We didn't find a boundary that could handle this type of exception. Start
// over and traverse parent path again, this time treating the exception
// as an error.
renderDidError();value=createCapturedValue(value,sourceFiber);var workInProgress=returnFiber;do{switch(workInProgress.tag){case HostRoot:{var _errorInfo=value;workInProgress.effectTag|=ShouldCapture;workInProgress.expirationTime=renderExpirationTime;var update=createRootErrorUpdate(workInProgress,_errorInfo,renderExpirationTime);enqueueCapturedUpdate(workInProgress,update);return;}case ClassComponent:// Capture and retry
var errorInfo=value;var ctor=workInProgress.type;var instance=workInProgress.stateNode;if((workInProgress.effectTag&DidCapture)===NoEffect&&(typeof ctor.getDerivedStateFromError==='function'||instance!==null&&typeof instance.componentDidCatch==='function'&&!isAlreadyFailedLegacyErrorBoundary(instance))){workInProgress.effectTag|=ShouldCapture;workInProgress.expirationTime=renderExpirationTime;// Schedule the error boundary to re-render using updated state
var _update=createClassErrorUpdate(workInProgress,errorInfo,renderExpirationTime);enqueueCapturedUpdate(workInProgress,_update);return;}break;default:break;}workInProgress=workInProgress.return;}while(workInProgress!==null);}function unwindWork(workInProgress,renderExpirationTime){switch(workInProgress.tag){case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){popContext(workInProgress);}var effectTag=workInProgress.effectTag;if(effectTag&ShouldCapture){workInProgress.effectTag=effectTag&~ShouldCapture|DidCapture;return workInProgress;}return null;}case HostRoot:{popHostContainer(workInProgress);popTopLevelContextObject(workInProgress);var _effectTag=workInProgress.effectTag;!((_effectTag&DidCapture)===NoEffect)?invariant(false,'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.'):void 0;workInProgress.effectTag=_effectTag&~ShouldCapture|DidCapture;return workInProgress;}case HostComponent:{popHostContext(workInProgress);return null;}case SuspenseComponent:{var _effectTag2=workInProgress.effectTag;if(_effectTag2&ShouldCapture){workInProgress.effectTag=_effectTag2&~ShouldCapture|DidCapture;// Captured a suspense effect. Set the boundary's `alreadyCaptured`
// state to true so we know to render the fallback.
var current=workInProgress.alternate;var currentState=current!==null?current.memoizedState:null;var nextState=workInProgress.memoizedState;if(nextState===null){// No existing state. Create a new object.
nextState={alreadyCaptured:true,didTimeout:false,timedOutAt:NoWork};}else if(currentState===nextState){// There is an existing state but it's the same as the current tree's.
// Clone the object.
nextState={alreadyCaptured:true,didTimeout:nextState.didTimeout,timedOutAt:nextState.timedOutAt};}else{// Already have a clone, so it's safe to mutate.
nextState.alreadyCaptured=true;}workInProgress.memoizedState=nextState;// Re-render the boundary.
return workInProgress;}return null;}case HostPortal:popHostContainer(workInProgress);return null;case ContextProvider:popProvider(workInProgress);return null;default:return null;}}function unwindInterruptedWork(interruptedWork){switch(interruptedWork.tag){case ClassComponent:{var childContextTypes=interruptedWork.type.childContextTypes;if(childContextTypes!==null&&childContextTypes!==undefined){popContext(interruptedWork);}break;}case HostRoot:{popHostContainer(interruptedWork);popTopLevelContextObject(interruptedWork);break;}case HostComponent:{popHostContext(interruptedWork);break;}case HostPortal:popHostContainer(interruptedWork);break;case ContextProvider:popProvider(interruptedWork);break;default:break;}}var Dispatcher={readContext:readContext};var ReactCurrentOwner$2=ReactSharedInternals.ReactCurrentOwner;var didWarnAboutStateTransition=void 0;var didWarnSetStateChildContext=void 0;var warnAboutUpdateOnUnmounted=void 0;var warnAboutInvalidUpdates=void 0;if(enableSchedulerTracing){// Provide explicit error message when production+profiling bundle of e.g. react-dom
// is used with production (non-profiling) bundle of schedule/tracing
!(tracing.__interactionsRef!=null&&tracing.__interactionsRef.current!=null)?invariant(false,'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `schedule/tracing` module with `schedule/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling'):void 0;}{didWarnAboutStateTransition=false;didWarnSetStateChildContext=false;var didWarnStateUpdateForUnmountedComponent={};warnAboutUpdateOnUnmounted=function(fiber){// We show the whole stack but dedupe on the top component's name because
// the problematic code almost always lies inside that component.
var componentName=getComponentName(fiber.type)||'ReactClass';if(didWarnStateUpdateForUnmountedComponent[componentName]){return;}warningWithoutStack$1(false,"Can't call setState (or forceUpdate) on an unmounted component. This "+'is a no-op, but it indicates a memory leak in your application. To '+'fix, cancel all subscriptions and asynchronous tasks in the '+'componentWillUnmount method.%s',getStackByFiberInDevAndProd(fiber));didWarnStateUpdateForUnmountedComponent[componentName]=true;};warnAboutInvalidUpdates=function(instance){switch(phase){case'getChildContext':if(didWarnSetStateChildContext){return;}warningWithoutStack$1(false,'setState(...): Cannot call setState() inside getChildContext()');didWarnSetStateChildContext=true;break;case'render':if(didWarnAboutStateTransition){return;}warningWithoutStack$1(false,'Cannot update during an existing state transition (such as within '+'`render`). Render methods should be a pure function of props and state.');didWarnAboutStateTransition=true;break;}};}// Used to ensure computeUniqueAsyncExpiration is monotonically increasing.
var lastUniqueAsyncExpiration=0;// Represents the expiration time that incoming updates should use. (If this
// is NoWork, use the default strategy: async updates in async mode, sync
// updates in sync mode.)
var expirationContext=NoWork;var isWorking=false;// The next work in progress fiber that we're currently working on.
var nextUnitOfWork=null;var nextRoot=null;// The time at which we're currently rendering work.
var nextRenderExpirationTime=NoWork;var nextLatestAbsoluteTimeoutMs=-1;var nextRenderDidError=false;// The next fiber with an effect that we're currently committing.
var nextEffect=null;var isCommitting$1=false;var legacyErrorBoundariesThatAlreadyFailed=null;// Used for performance tracking.
var interruptedBy=null;var stashedWorkInProgressProperties=void 0;var replayUnitOfWork=void 0;var isReplayingFailedUnitOfWork=void 0;var originalReplayError=void 0;var rethrowOriginalError=void 0;if(true&&replayFailedUnitOfWorkWithInvokeGuardedCallback){stashedWorkInProgressProperties=null;isReplayingFailedUnitOfWork=false;originalReplayError=null;replayUnitOfWork=function(failedUnitOfWork,thrownValue,isYieldy){if(thrownValue!==null&&typeof thrownValue==='object'&&typeof thrownValue.then==='function'){// Don't replay promises. Treat everything else like an error.
// TODO: Need to figure out a different strategy if/when we add
// support for catching other types.
return;}// Restore the original state of the work-in-progress
if(stashedWorkInProgressProperties===null){// This should never happen. Don't throw because this code is DEV-only.
warningWithoutStack$1(false,'Could not replay rendering after an error. This is likely a bug in React. '+'Please file an issue.');return;}assignFiberPropertiesInDEV(failedUnitOfWork,stashedWorkInProgressProperties);switch(failedUnitOfWork.tag){case HostRoot:popHostContainer(failedUnitOfWork);popTopLevelContextObject(failedUnitOfWork);break;case HostComponent:popHostContext(failedUnitOfWork);break;case ClassComponent:{var Component=failedUnitOfWork.type;if(isContextProvider(Component)){popContext(failedUnitOfWork);}break;}case HostPortal:popHostContainer(failedUnitOfWork);break;case ContextProvider:popProvider(failedUnitOfWork);break;}// Replay the begin phase.
isReplayingFailedUnitOfWork=true;originalReplayError=thrownValue;invokeGuardedCallback(null,workLoop,null,isYieldy);isReplayingFailedUnitOfWork=false;originalReplayError=null;if(hasCaughtError()){var replayError=clearCaughtError();if(replayError!=null&&thrownValue!=null){try{// Reading the expando property is intentionally
// inside `try` because it might be a getter or Proxy.
if(replayError._suppressLogging){// Also suppress logging for the original error.
thrownValue._suppressLogging=true;}}catch(inner){// Ignore.
}}}else{// If the begin phase did not fail the second time, set this pointer
// back to the original value.
nextUnitOfWork=failedUnitOfWork;}};rethrowOriginalError=function(){throw originalReplayError;};}function resetStack(){if(nextUnitOfWork!==null){var interruptedWork=nextUnitOfWork.return;while(interruptedWork!==null){unwindInterruptedWork(interruptedWork);interruptedWork=interruptedWork.return;}}{ReactStrictModeWarnings.discardPendingWarnings();checkThatStackIsEmpty();}nextRoot=null;nextRenderExpirationTime=NoWork;nextLatestAbsoluteTimeoutMs=-1;nextRenderDidError=false;nextUnitOfWork=null;}function commitAllHostEffects(){while(nextEffect!==null){{setCurrentFiber(nextEffect);}recordEffect();var effectTag=nextEffect.effectTag;if(effectTag&ContentReset){commitResetTextContent(nextEffect);}if(effectTag&Ref){var current$$1=nextEffect.alternate;if(current$$1!==null){commitDetachRef(current$$1);}}// The following switch statement is only concerned about placement,
// updates, and deletions. To avoid needing to add a case for every
// possible bitmap value, we remove the secondary effects from the
// effect tag and switch on that value.
var primaryEffectTag=effectTag&(Placement|Update|Deletion);switch(primaryEffectTag){case Placement:{commitPlacement(nextEffect);// Clear the "placement" from effect tag so that we know that this is inserted, before
// any life-cycles like componentDidMount gets called.
// TODO: findDOMNode doesn't rely on this any more but isMounted
// does and isMounted is deprecated anyway so we should be able
// to kill this.
nextEffect.effectTag&=~Placement;break;}case PlacementAndUpdate:{// Placement
commitPlacement(nextEffect);// Clear the "placement" from effect tag so that we know that this is inserted, before
// any life-cycles like componentDidMount gets called.
nextEffect.effectTag&=~Placement;// Update
var _current=nextEffect.alternate;commitWork(_current,nextEffect);break;}case Update:{var _current2=nextEffect.alternate;commitWork(_current2,nextEffect);break;}case Deletion:{commitDeletion(nextEffect);break;}}nextEffect=nextEffect.nextEffect;}{resetCurrentFiber();}}function commitBeforeMutationLifecycles(){while(nextEffect!==null){{setCurrentFiber(nextEffect);}var effectTag=nextEffect.effectTag;if(effectTag&Snapshot){recordEffect();var current$$1=nextEffect.alternate;commitBeforeMutationLifeCycles(current$$1,nextEffect);}// Don't cleanup effects yet;
// This will be done by commitAllLifeCycles()
nextEffect=nextEffect.nextEffect;}{resetCurrentFiber();}}function commitAllLifeCycles(finishedRoot,committedExpirationTime){{ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();ReactStrictModeWarnings.flushLegacyContextWarning();if(warnAboutDeprecatedLifecycles){ReactStrictModeWarnings.flushPendingDeprecationWarnings();}}while(nextEffect!==null){var effectTag=nextEffect.effectTag;if(effectTag&(Update|Callback)){recordEffect();var current$$1=nextEffect.alternate;commitLifeCycles(finishedRoot,current$$1,nextEffect,committedExpirationTime);}if(effectTag&Ref){recordEffect();commitAttachRef(nextEffect);}var next=nextEffect.nextEffect;// Ensure that we clean these up so that we don't accidentally keep them.
// I'm not actually sure this matters because we can't reset firstEffect
// and lastEffect since they're on every node, not just the effectful
// ones. So we have to clean everything as we reuse nodes anyway.
nextEffect.nextEffect=null;// Ensure that we reset the effectTag here so that we can rely on effect
// tags to reason about the current life-cycle.
nextEffect=next;}}function isAlreadyFailedLegacyErrorBoundary(instance){return legacyErrorBoundariesThatAlreadyFailed!==null&&legacyErrorBoundariesThatAlreadyFailed.has(instance);}function markLegacyErrorBoundaryAsFailed(instance){if(legacyErrorBoundariesThatAlreadyFailed===null){legacyErrorBoundariesThatAlreadyFailed=new Set([instance]);}else{legacyErrorBoundariesThatAlreadyFailed.add(instance);}}function commitRoot(root,finishedWork){isWorking=true;isCommitting$1=true;startCommitTimer();!(root.current!==finishedWork)?invariant(false,'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.'):void 0;var committedExpirationTime=root.pendingCommitExpirationTime;!(committedExpirationTime!==NoWork)?invariant(false,'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.'):void 0;root.pendingCommitExpirationTime=NoWork;// Update the pending priority levels to account for the work that we are
// about to commit. This needs to happen before calling the lifecycles, since
// they may schedule additional updates.
var updateExpirationTimeBeforeCommit=finishedWork.expirationTime;var childExpirationTimeBeforeCommit=finishedWork.childExpirationTime;var earliestRemainingTimeBeforeCommit=updateExpirationTimeBeforeCommit===NoWork||childExpirationTimeBeforeCommit!==NoWork&&childExpirationTimeBeforeCommit<updateExpirationTimeBeforeCommit?childExpirationTimeBeforeCommit:updateExpirationTimeBeforeCommit;markCommittedPriorityLevels(root,earliestRemainingTimeBeforeCommit);var prevInteractions=null;if(enableSchedulerTracing){// Restore any pending interactions at this point,
// So that cascading work triggered during the render phase will be accounted for.
prevInteractions=tracing.__interactionsRef.current;tracing.__interactionsRef.current=root.memoizedInteractions;}// Reset this to null before calling lifecycles
ReactCurrentOwner$2.current=null;var firstEffect=void 0;if(finishedWork.effectTag>PerformedWork){// A fiber's effect list consists only of its children, not itself. So if
// the root has an effect, we need to add it to the end of the list. The
// resulting list is the set that would belong to the root's parent, if
// it had one; that is, all the effects in the tree including the root.
if(finishedWork.lastEffect!==null){finishedWork.lastEffect.nextEffect=finishedWork;firstEffect=finishedWork.firstEffect;}else{firstEffect=finishedWork;}}else{// There is no effect on the root.
firstEffect=finishedWork.firstEffect;}prepareForCommit(root.containerInfo);// Invoke instances of getSnapshotBeforeUpdate before mutation.
nextEffect=firstEffect;startCommitSnapshotEffectsTimer();while(nextEffect!==null){var didError=false;var error=void 0;{invokeGuardedCallback(null,commitBeforeMutationLifecycles,null);if(hasCaughtError()){didError=true;error=clearCaughtError();}}if(didError){!(nextEffect!==null)?invariant(false,'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'):void 0;captureCommitPhaseError(nextEffect,error);// Clean-up
if(nextEffect!==null){nextEffect=nextEffect.nextEffect;}}}stopCommitSnapshotEffectsTimer();if(enableProfilerTimer){// Mark the current commit time to be shared by all Profilers in this batch.
// This enables them to be grouped later.
recordCommitTime();}// Commit all the side-effects within a tree. We'll do this in two passes.
// The first pass performs all the host insertions, updates, deletions and
// ref unmounts.
nextEffect=firstEffect;startCommitHostEffectsTimer();while(nextEffect!==null){var _didError=false;var _error=void 0;{invokeGuardedCallback(null,commitAllHostEffects,null);if(hasCaughtError()){_didError=true;_error=clearCaughtError();}}if(_didError){!(nextEffect!==null)?invariant(false,'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'):void 0;captureCommitPhaseError(nextEffect,_error);// Clean-up
if(nextEffect!==null){nextEffect=nextEffect.nextEffect;}}}stopCommitHostEffectsTimer();resetAfterCommit(root.containerInfo);// The work-in-progress tree is now the current tree. This must come after
// the first pass of the commit phase, so that the previous tree is still
// current during componentWillUnmount, but before the second pass, so that
// the finished work is current during componentDidMount/Update.
root.current=finishedWork;// In the second pass we'll perform all life-cycles and ref callbacks.
// Life-cycles happen as a separate pass so that all placements, updates,
// and deletions in the entire tree have already been invoked.
// This pass also triggers any renderer-specific initial effects.
nextEffect=firstEffect;startCommitLifeCyclesTimer();while(nextEffect!==null){var _didError2=false;var _error2=void 0;{invokeGuardedCallback(null,commitAllLifeCycles,null,root,committedExpirationTime);if(hasCaughtError()){_didError2=true;_error2=clearCaughtError();}}if(_didError2){!(nextEffect!==null)?invariant(false,'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'):void 0;captureCommitPhaseError(nextEffect,_error2);if(nextEffect!==null){nextEffect=nextEffect.nextEffect;}}}isCommitting$1=false;isWorking=false;stopCommitLifeCyclesTimer();stopCommitTimer();onCommitRoot(finishedWork.stateNode);if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);}var updateExpirationTimeAfterCommit=finishedWork.expirationTime;var childExpirationTimeAfterCommit=finishedWork.childExpirationTime;var earliestRemainingTimeAfterCommit=updateExpirationTimeAfterCommit===NoWork||childExpirationTimeAfterCommit!==NoWork&&childExpirationTimeAfterCommit<updateExpirationTimeAfterCommit?childExpirationTimeAfterCommit:updateExpirationTimeAfterCommit;if(earliestRemainingTimeAfterCommit===NoWork){// If there's no remaining work, we can clear the set of already failed
// error boundaries.
legacyErrorBoundariesThatAlreadyFailed=null;}onCommit(root,earliestRemainingTimeAfterCommit);if(enableSchedulerTracing){tracing.__interactionsRef.current=prevInteractions;var subscriber=void 0;try{subscriber=tracing.__subscriberRef.current;if(subscriber!==null&&root.memoizedInteractions.size>0){var threadID=computeThreadID(committedExpirationTime,root.interactionThreadID);subscriber.onWorkStopped(root.memoizedInteractions,threadID);}}catch(error){// It's not safe for commitRoot() to throw.
// Store the error for now and we'll re-throw in finishRendering().
if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}finally{// Clear completed interactions from the pending Map.
// Unless the render was suspended or cascading work was scheduled,
// In which case– leave pending interactions until the subsequent render.
var pendingInteractionMap=root.pendingInteractionMap;pendingInteractionMap.forEach(function(scheduledInteractions,scheduledExpirationTime){// Only decrement the pending interaction count if we're done.
// If there's still work at the current priority,
// That indicates that we are waiting for suspense data.
if(earliestRemainingTimeAfterCommit===NoWork||scheduledExpirationTime<earliestRemainingTimeAfterCommit){pendingInteractionMap.delete(scheduledExpirationTime);scheduledInteractions.forEach(function(interaction){interaction.__count--;if(subscriber!==null&&interaction.__count===0){try{subscriber.onInteractionScheduledWorkCompleted(interaction);}catch(error){// It's not safe for commitRoot() to throw.
// Store the error for now and we'll re-throw in finishRendering().
if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}}});}});}}}function resetChildExpirationTime(workInProgress,renderTime){if(renderTime!==Never&&workInProgress.childExpirationTime===Never){// The children of this component are hidden. Don't bubble their
// expiration times.
return;}var newChildExpirationTime=NoWork;// Bubble up the earliest expiration time.
if(enableProfilerTimer&&workInProgress.mode&ProfileMode){// We're in profiling mode.
// Let's use this same traversal to update the render durations.
var actualDuration=workInProgress.actualDuration;var treeBaseDuration=workInProgress.selfBaseDuration;// When a fiber is cloned, its actualDuration is reset to 0.
// This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
// When work is done, it should bubble to the parent's actualDuration.
// If the fiber has not been cloned though, (meaning no work was done),
// Then this value will reflect the amount of time spent working on a previous render.
// In that case it should not bubble.
// We determine whether it was cloned by comparing the child pointer.
var shouldBubbleActualDurations=workInProgress.alternate===null||workInProgress.child!==workInProgress.alternate.child;var child=workInProgress.child;while(child!==null){var childUpdateExpirationTime=child.expirationTime;var childChildExpirationTime=child.childExpirationTime;if(newChildExpirationTime===NoWork||childUpdateExpirationTime!==NoWork&&childUpdateExpirationTime<newChildExpirationTime){newChildExpirationTime=childUpdateExpirationTime;}if(newChildExpirationTime===NoWork||childChildExpirationTime!==NoWork&&childChildExpirationTime<newChildExpirationTime){newChildExpirationTime=childChildExpirationTime;}if(shouldBubbleActualDurations){actualDuration+=child.actualDuration;}treeBaseDuration+=child.treeBaseDuration;child=child.sibling;}workInProgress.actualDuration=actualDuration;workInProgress.treeBaseDuration=treeBaseDuration;}else{var _child=workInProgress.child;while(_child!==null){var _childUpdateExpirationTime=_child.expirationTime;var _childChildExpirationTime=_child.childExpirationTime;if(newChildExpirationTime===NoWork||_childUpdateExpirationTime!==NoWork&&_childUpdateExpirationTime<newChildExpirationTime){newChildExpirationTime=_childUpdateExpirationTime;}if(newChildExpirationTime===NoWork||_childChildExpirationTime!==NoWork&&_childChildExpirationTime<newChildExpirationTime){newChildExpirationTime=_childChildExpirationTime;}_child=_child.sibling;}}workInProgress.childExpirationTime=newChildExpirationTime;}function completeUnitOfWork(workInProgress){// Attempt to complete the current unit of work, then move to the
// next sibling. If there are no more siblings, return to the
// parent fiber.
while(true){// The current, flushed, state of this fiber is the alternate.
// Ideally nothing should rely on this, but relying on it here
// means that we don't need an additional field on the work in
// progress.
var current$$1=workInProgress.alternate;{setCurrentFiber(workInProgress);}var returnFiber=workInProgress.return;var siblingFiber=workInProgress.sibling;if((workInProgress.effectTag&Incomplete)===NoEffect){// This fiber completed.
if(enableProfilerTimer){if(workInProgress.mode&ProfileMode){startProfilerTimer(workInProgress);}nextUnitOfWork=completeWork(current$$1,workInProgress,nextRenderExpirationTime);if(workInProgress.mode&ProfileMode){// Update render duration assuming we didn't error.
stopProfilerTimerIfRunningAndRecordDelta(workInProgress,false);}}else{nextUnitOfWork=completeWork(current$$1,workInProgress,nextRenderExpirationTime);}stopWorkTimer(workInProgress);resetChildExpirationTime(workInProgress,nextRenderExpirationTime);{resetCurrentFiber();}if(returnFiber!==null&&// Do not append effects to parents if a sibling failed to complete
(returnFiber.effectTag&Incomplete)===NoEffect){// Append all the effects of the subtree and this fiber onto the effect
// list of the parent. The completion order of the children affects the
// side-effect order.
if(returnFiber.firstEffect===null){returnFiber.firstEffect=workInProgress.firstEffect;}if(workInProgress.lastEffect!==null){if(returnFiber.lastEffect!==null){returnFiber.lastEffect.nextEffect=workInProgress.firstEffect;}returnFiber.lastEffect=workInProgress.lastEffect;}// If this fiber had side-effects, we append it AFTER the children's
// side-effects. We can perform certain side-effects earlier if
// needed, by doing multiple passes over the effect list. We don't want
// to schedule our own side-effect on our own list because if end up
// reusing children we'll schedule this effect onto itself since we're
// at the end.
var effectTag=workInProgress.effectTag;// Skip both NoWork and PerformedWork tags when creating the effect list.
// PerformedWork effect is read by React DevTools but shouldn't be committed.
if(effectTag>PerformedWork){if(returnFiber.lastEffect!==null){returnFiber.lastEffect.nextEffect=workInProgress;}else{returnFiber.firstEffect=workInProgress;}returnFiber.lastEffect=workInProgress;}}if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);}if(siblingFiber!==null){// If there is more work to do in this returnFiber, do that next.
return siblingFiber;}else if(returnFiber!==null){// If there's no more work in this returnFiber. Complete the returnFiber.
workInProgress=returnFiber;continue;}else{// We've reached the root.
return null;}}else{if(workInProgress.mode&ProfileMode){// Record the render duration for the fiber that errored.
stopProfilerTimerIfRunningAndRecordDelta(workInProgress,false);}// This fiber did not complete because something threw. Pop values off
// the stack without entering the complete phase. If this is a boundary,
// capture values if possible.
var next=unwindWork(workInProgress,nextRenderExpirationTime);// Because this fiber did not complete, don't reset its expiration time.
if(workInProgress.effectTag&DidCapture){// Restarting an error boundary
stopFailedWorkTimer(workInProgress);}else{stopWorkTimer(workInProgress);}{resetCurrentFiber();}if(next!==null){stopWorkTimer(workInProgress);if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);}if(enableProfilerTimer){// Include the time spent working on failed children before continuing.
if(next.mode&ProfileMode){var actualDuration=next.actualDuration;var child=next.child;while(child!==null){actualDuration+=child.actualDuration;child=child.sibling;}next.actualDuration=actualDuration;}}// If completing this work spawned new work, do that next. We'll come
// back here again.
// Since we're restarting, remove anything that is not a host effect
// from the effect tag.
next.effectTag&=HostEffectMask;return next;}if(returnFiber!==null){// Mark the parent fiber as incomplete and clear its effect list.
returnFiber.firstEffect=returnFiber.lastEffect=null;returnFiber.effectTag|=Incomplete;}if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);}if(siblingFiber!==null){// If there is more work to do in this returnFiber, do that next.
return siblingFiber;}else if(returnFiber!==null){// If there's no more work in this returnFiber. Complete the returnFiber.
workInProgress=returnFiber;continue;}else{return null;}}}// Without this explicit null return Flow complains of invalid return type
// TODO Remove the above while(true) loop
// eslint-disable-next-line no-unreachable
return null;}function performUnitOfWork(workInProgress){// The current, flushed, state of this fiber is the alternate.
// Ideally nothing should rely on this, but relying on it here
// means that we don't need an additional field on the work in
// progress.
var current$$1=workInProgress.alternate;// See if beginning this work spawns more work.
startWorkTimer(workInProgress);{setCurrentFiber(workInProgress);}if(true&&replayFailedUnitOfWorkWithInvokeGuardedCallback){stashedWorkInProgressProperties=assignFiberPropertiesInDEV(stashedWorkInProgressProperties,workInProgress);}var next=void 0;if(enableProfilerTimer){if(workInProgress.mode&ProfileMode){startProfilerTimer(workInProgress);}next=beginWork(current$$1,workInProgress,nextRenderExpirationTime);workInProgress.memoizedProps=workInProgress.pendingProps;if(workInProgress.mode&ProfileMode){// Record the render duration assuming we didn't bailout (or error).
stopProfilerTimerIfRunningAndRecordDelta(workInProgress,true);}}else{next=beginWork(current$$1,workInProgress,nextRenderExpirationTime);workInProgress.memoizedProps=workInProgress.pendingProps;}{resetCurrentFiber();if(isReplayingFailedUnitOfWork){// Currently replaying a failed unit of work. This should be unreachable,
// because the render phase is meant to be idempotent, and it should
// have thrown again. Since it didn't, rethrow the original error, so
// React's internal stack is not misaligned.
rethrowOriginalError();}}if(true&&ReactFiberInstrumentation_1.debugTool){ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);}if(next===null){// If this doesn't spawn new work, complete the current work.
next=completeUnitOfWork(workInProgress);}ReactCurrentOwner$2.current=null;return next;}function workLoop(isYieldy){if(!isYieldy){// Flush work without yielding
while(nextUnitOfWork!==null){nextUnitOfWork=performUnitOfWork(nextUnitOfWork);}}else{// Flush asynchronous work until the deadline runs out of time.
while(nextUnitOfWork!==null&&!shouldYield()){nextUnitOfWork=performUnitOfWork(nextUnitOfWork);}}}function renderRoot(root,isYieldy,isExpired){!!isWorking?invariant(false,'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.'):void 0;isWorking=true;ReactCurrentOwner$2.currentDispatcher=Dispatcher;var expirationTime=root.nextExpirationTimeToWorkOn;// Check if we're starting from a fresh stack, or if we're resuming from
// previously yielded work.
if(expirationTime!==nextRenderExpirationTime||root!==nextRoot||nextUnitOfWork===null){// Reset the stack and start working from the root.
resetStack();nextRoot=root;nextRenderExpirationTime=expirationTime;nextUnitOfWork=createWorkInProgress(nextRoot.current,null,nextRenderExpirationTime);root.pendingCommitExpirationTime=NoWork;if(enableSchedulerTracing){// Determine which interactions this batch of work currently includes,
// So that we can accurately attribute time spent working on it,
var interactions=new Set();root.pendingInteractionMap.forEach(function(scheduledInteractions,scheduledExpirationTime){if(scheduledExpirationTime<=expirationTime){scheduledInteractions.forEach(function(interaction){return interactions.add(interaction);});}});// Store the current set of interactions on the FiberRoot for a few reasons:
// We can re-use it in hot functions like renderRoot() without having to recalculate it.
// We will also use it in commitWork() to pass to any Profiler onRender() hooks.
// This also provides DevTools with a way to access it when the onCommitRoot() hook is called.
root.memoizedInteractions=interactions;if(interactions.size>0){var subscriber=tracing.__subscriberRef.current;if(subscriber!==null){var threadID=computeThreadID(expirationTime,root.interactionThreadID);try{subscriber.onWorkStarted(interactions,threadID);}catch(error){// Work thrown by an interaction tracing subscriber should be rethrown,
// But only once it's safe (to avoid leaveing the scheduler in an invalid state).
// Store the error for now and we'll re-throw in finishRendering().
if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}}}}}var prevInteractions=null;if(enableSchedulerTracing){// We're about to start new traced work.
// Restore pending interactions so cascading work triggered during the render phase will be accounted for.
prevInteractions=tracing.__interactionsRef.current;tracing.__interactionsRef.current=root.memoizedInteractions;}var didFatal=false;startWorkLoopTimer(nextUnitOfWork);do{try{workLoop(isYieldy);}catch(thrownValue){if(nextUnitOfWork===null){// This is a fatal error.
didFatal=true;onUncaughtError(thrownValue);}else{{// Reset global debug state
// We assume this is defined in DEV
resetCurrentlyProcessingQueue();}var failedUnitOfWork=nextUnitOfWork;if(true&&replayFailedUnitOfWorkWithInvokeGuardedCallback){replayUnitOfWork(failedUnitOfWork,thrownValue,isYieldy);}// TODO: we already know this isn't true in some cases.
// At least this shows a nicer error message until we figure out the cause.
// https://github.com/facebook/react/issues/12449#issuecomment-386727431
!(nextUnitOfWork!==null)?invariant(false,'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.'):void 0;var sourceFiber=nextUnitOfWork;var returnFiber=sourceFiber.return;if(returnFiber===null){// This is the root. The root could capture its own errors. However,
// we don't know if it errors before or after we pushed the host
// context. This information is needed to avoid a stack mismatch.
// Because we're not sure, treat this as a fatal error. We could track
// which phase it fails in, but doesn't seem worth it. At least
// for now.
didFatal=true;onUncaughtError(thrownValue);}else{throwException(root,returnFiber,sourceFiber,thrownValue,nextRenderExpirationTime);nextUnitOfWork=completeUnitOfWork(sourceFiber);continue;}}}break;}while(true);if(enableSchedulerTracing){// Traced work is done for now; restore the previous interactions.
tracing.__interactionsRef.current=prevInteractions;}// We're done performing work. Time to clean up.
isWorking=false;ReactCurrentOwner$2.currentDispatcher=null;resetContextDependences();// Yield back to main thread.
if(didFatal){var _didCompleteRoot=false;stopWorkLoopTimer(interruptedBy,_didCompleteRoot);interruptedBy=null;// There was a fatal error.
{resetStackAfterFatalErrorInDev();}// `nextRoot` points to the in-progress root. A non-null value indicates
// that we're in the middle of an async render. Set it to null to indicate
// there's no more work to be done in the current batch.
nextRoot=null;onFatal(root);return;}if(nextUnitOfWork!==null){// There's still remaining async work in this tree, but we ran out of time
// in the current frame. Yield back to the renderer. Unless we're
// interrupted by a higher priority update, we'll continue later from where
// we left off.
var _didCompleteRoot2=false;stopWorkLoopTimer(interruptedBy,_didCompleteRoot2);interruptedBy=null;onYield(root);return;}// We completed the whole tree.
var didCompleteRoot=true;stopWorkLoopTimer(interruptedBy,didCompleteRoot);var rootWorkInProgress=root.current.alternate;!(rootWorkInProgress!==null)?invariant(false,'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.'):void 0;// `nextRoot` points to the in-progress root. A non-null value indicates
// that we're in the middle of an async render. Set it to null to indicate
// there's no more work to be done in the current batch.
nextRoot=null;interruptedBy=null;if(nextRenderDidError){// There was an error
if(hasLowerPriorityWork(root,expirationTime)){// There's lower priority work. If so, it may have the effect of fixing
// the exception that was just thrown. Exit without committing. This is
// similar to a suspend, but without a timeout because we're not waiting
// for a promise to resolve. React will restart at the lower
// priority level.
markSuspendedPriorityLevel(root,expirationTime);var suspendedExpirationTime=expirationTime;var rootExpirationTime=root.expirationTime;onSuspend(root,rootWorkInProgress,suspendedExpirationTime,rootExpirationTime,-1// Indicates no timeout
);return;}else if(// There's no lower priority work, but we're rendering asynchronously.
// Synchronsouly attempt to render the same level one more time. This is
// similar to a suspend, but without a timeout because we're not waiting
// for a promise to resolve.
!root.didError&&!isExpired){root.didError=true;var _suspendedExpirationTime=root.nextExpirationTimeToWorkOn=expirationTime;var _rootExpirationTime=root.expirationTime=Sync;onSuspend(root,rootWorkInProgress,_suspendedExpirationTime,_rootExpirationTime,-1// Indicates no timeout
);return;}}if(!isExpired&&nextLatestAbsoluteTimeoutMs!==-1){// The tree was suspended.
var _suspendedExpirationTime2=expirationTime;markSuspendedPriorityLevel(root,_suspendedExpirationTime2);// Find the earliest uncommitted expiration time in the tree, including
// work that is suspended. The timeout threshold cannot be longer than
// the overall expiration.
var earliestExpirationTime=findEarliestOutstandingPriorityLevel(root,expirationTime);var earliestExpirationTimeMs=expirationTimeToMs(earliestExpirationTime);if(earliestExpirationTimeMs<nextLatestAbsoluteTimeoutMs){nextLatestAbsoluteTimeoutMs=earliestExpirationTimeMs;}// Subtract the current time from the absolute timeout to get the number
// of milliseconds until the timeout. In other words, convert an absolute
// timestamp to a relative time. This is the value that is passed
// to `setTimeout`.
var currentTimeMs=expirationTimeToMs(requestCurrentTime());var msUntilTimeout=nextLatestAbsoluteTimeoutMs-currentTimeMs;msUntilTimeout=msUntilTimeout<0?0:msUntilTimeout;// TODO: Account for the Just Noticeable Difference
var _rootExpirationTime2=root.expirationTime;onSuspend(root,rootWorkInProgress,_suspendedExpirationTime2,_rootExpirationTime2,msUntilTimeout);return;}// Ready to commit.
onComplete(root,rootWorkInProgress,expirationTime);}function dispatch(sourceFiber,value,expirationTime){!(!isWorking||isCommitting$1)?invariant(false,'dispatch: Cannot dispatch during the render phase.'):void 0;var fiber=sourceFiber.return;while(fiber!==null){switch(fiber.tag){case ClassComponent:var ctor=fiber.type;var instance=fiber.stateNode;if(typeof ctor.getDerivedStateFromError==='function'||typeof instance.componentDidCatch==='function'&&!isAlreadyFailedLegacyErrorBoundary(instance)){var errorInfo=createCapturedValue(value,sourceFiber);var update=createClassErrorUpdate(fiber,errorInfo,expirationTime);enqueueUpdate(fiber,update);scheduleWork(fiber,expirationTime);return;}break;case HostRoot:{var _errorInfo=createCapturedValue(value,sourceFiber);var _update=createRootErrorUpdate(fiber,_errorInfo,expirationTime);enqueueUpdate(fiber,_update);scheduleWork(fiber,expirationTime);return;}}fiber=fiber.return;}if(sourceFiber.tag===HostRoot){// Error was thrown at the root. There is no parent, so the root
// itself should capture it.
var rootFiber=sourceFiber;var _errorInfo2=createCapturedValue(value,rootFiber);var _update2=createRootErrorUpdate(rootFiber,_errorInfo2,expirationTime);enqueueUpdate(rootFiber,_update2);scheduleWork(rootFiber,expirationTime);}}function captureCommitPhaseError(fiber,error){return dispatch(fiber,error,Sync);}function computeThreadID(expirationTime,interactionThreadID){// Interaction threads are unique per root and expiration time.
return expirationTime*1000+interactionThreadID;}// Creates a unique async expiration time.
function computeUniqueAsyncExpiration(){var currentTime=requestCurrentTime();var result=computeAsyncExpiration(currentTime);if(result<=lastUniqueAsyncExpiration){// Since we assume the current time monotonically increases, we only hit
// this branch when computeUniqueAsyncExpiration is fired multiple times
// within a 200ms window (or whatever the async bucket size is).
result=lastUniqueAsyncExpiration+1;}lastUniqueAsyncExpiration=result;return lastUniqueAsyncExpiration;}function computeExpirationForFiber(currentTime,fiber){var expirationTime=void 0;if(expirationContext!==NoWork){// An explicit expiration context was set;
expirationTime=expirationContext;}else if(isWorking){if(isCommitting$1){// Updates that occur during the commit phase should have sync priority
// by default.
expirationTime=Sync;}else{// Updates during the render phase should expire at the same time as
// the work that is being rendered.
expirationTime=nextRenderExpirationTime;}}else{// No explicit expiration context was set, and we're not currently
// performing work. Calculate a new expiration time.
if(fiber.mode&ConcurrentMode){if(isBatchingInteractiveUpdates){// This is an interactive update
expirationTime=computeInteractiveExpiration(currentTime);}else{// This is an async update
expirationTime=computeAsyncExpiration(currentTime);}// If we're in the middle of rendering a tree, do not update at the same
// expiration time that is already rendering.
if(nextRoot!==null&&expirationTime===nextRenderExpirationTime){expirationTime+=1;}}else{// This is a sync update
expirationTime=Sync;}}if(isBatchingInteractiveUpdates){// This is an interactive update. Keep track of the lowest pending
// interactive expiration time. This allows us to synchronously flush
// all interactive updates when needed.
if(expirationTime>lowestPriorityPendingInteractiveExpirationTime){lowestPriorityPendingInteractiveExpirationTime=expirationTime;}}return expirationTime;}function renderDidSuspend(root,absoluteTimeoutMs,suspendedTime){// Schedule the timeout.
if(absoluteTimeoutMs>=0&&nextLatestAbsoluteTimeoutMs<absoluteTimeoutMs){nextLatestAbsoluteTimeoutMs=absoluteTimeoutMs;}}function renderDidError(){nextRenderDidError=true;}function retrySuspendedRoot(root,boundaryFiber,sourceFiber,suspendedTime){var retryTime=void 0;if(isPriorityLevelSuspended(root,suspendedTime)){// Ping at the original level
retryTime=suspendedTime;markPingedPriorityLevel(root,retryTime);}else{// Suspense already timed out. Compute a new expiration time
var currentTime=requestCurrentTime();retryTime=computeExpirationForFiber(currentTime,boundaryFiber);markPendingPriorityLevel(root,retryTime);}// TODO: If the suspense fiber has already rendered the primary children
// without suspending (that is, all of the promises have already resolved),
// we should not trigger another update here. One case this happens is when
// we are in sync mode and a single promise is thrown both on initial render
// and on update; we attach two .then(retrySuspendedRoot) callbacks and each
// one performs Sync work, rerendering the Suspense.
if((boundaryFiber.mode&ConcurrentMode)!==NoContext){if(root===nextRoot&&nextRenderExpirationTime===suspendedTime){// Received a ping at the same priority level at which we're currently
// rendering. Restart from the root.
nextRoot=null;}}scheduleWorkToRoot(boundaryFiber,retryTime);if((boundaryFiber.mode&ConcurrentMode)===NoContext){// Outside of concurrent mode, we must schedule an update on the source
// fiber, too, since it already committed in an inconsistent state and
// therefore does not have any pending work.
scheduleWorkToRoot(sourceFiber,retryTime);var sourceTag=sourceFiber.tag;if(sourceTag===ClassComponent&&sourceFiber.stateNode!==null){// When we try rendering again, we should not reuse the current fiber,
// since it's known to be in an inconsistent state. Use a force updte to
// prevent a bail out.
var update=createUpdate(retryTime);update.tag=ForceUpdate;enqueueUpdate(sourceFiber,update);}}var rootExpirationTime=root.expirationTime;if(rootExpirationTime!==NoWork){requestWork(root,rootExpirationTime);}}function scheduleWorkToRoot(fiber,expirationTime){recordScheduleUpdate();{if(fiber.tag===ClassComponent){var instance=fiber.stateNode;warnAboutInvalidUpdates(instance);}}// Update the source fiber's expiration time
if(fiber.expirationTime===NoWork||fiber.expirationTime>expirationTime){fiber.expirationTime=expirationTime;}var alternate=fiber.alternate;if(alternate!==null&&(alternate.expirationTime===NoWork||alternate.expirationTime>expirationTime)){alternate.expirationTime=expirationTime;}// Walk the parent path to the root and update the child expiration time.
var node=fiber.return;var root=null;if(node===null&&fiber.tag===HostRoot){root=fiber.stateNode;}else{while(node!==null){alternate=node.alternate;if(node.childExpirationTime===NoWork||node.childExpirationTime>expirationTime){node.childExpirationTime=expirationTime;if(alternate!==null&&(alternate.childExpirationTime===NoWork||alternate.childExpirationTime>expirationTime)){alternate.childExpirationTime=expirationTime;}}else if(alternate!==null&&(alternate.childExpirationTime===NoWork||alternate.childExpirationTime>expirationTime)){alternate.childExpirationTime=expirationTime;}if(node.return===null&&node.tag===HostRoot){root=node.stateNode;break;}node=node.return;}}if(root===null){if(true&&fiber.tag===ClassComponent){warnAboutUpdateOnUnmounted(fiber);}return null;}if(enableSchedulerTracing){var interactions=tracing.__interactionsRef.current;if(interactions.size>0){var pendingInteractionMap=root.pendingInteractionMap;var pendingInteractions=pendingInteractionMap.get(expirationTime);if(pendingInteractions!=null){interactions.forEach(function(interaction){if(!pendingInteractions.has(interaction)){// Update the pending async work count for previously unscheduled interaction.
interaction.__count++;}pendingInteractions.add(interaction);});}else{pendingInteractionMap.set(expirationTime,new Set(interactions));// Update the pending async work count for the current interactions.
interactions.forEach(function(interaction){interaction.__count++;});}var subscriber=tracing.__subscriberRef.current;if(subscriber!==null){var threadID=computeThreadID(expirationTime,root.interactionThreadID);subscriber.onWorkScheduled(interactions,threadID);}}}return root;}function scheduleWork(fiber,expirationTime){var root=scheduleWorkToRoot(fiber,expirationTime);if(root===null){return;}if(!isWorking&&nextRenderExpirationTime!==NoWork&&expirationTime<nextRenderExpirationTime){// This is an interruption. (Used for performance tracking.)
interruptedBy=fiber;resetStack();}markPendingPriorityLevel(root,expirationTime);if(// If we're in the render phase, we don't need to schedule this root
// for an update, because we'll do it before we exit...
!isWorking||isCommitting$1||// ...unless this is a different root than the one we're rendering.
nextRoot!==root){var rootExpirationTime=root.expirationTime;requestWork(root,rootExpirationTime);}if(nestedUpdateCount>NESTED_UPDATE_LIMIT){// Reset this back to zero so subsequent updates don't throw.
nestedUpdateCount=0;invariant(false,'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');}}function syncUpdates(fn,a,b,c,d){var previousExpirationContext=expirationContext;expirationContext=Sync;try{return fn(a,b,c,d);}finally{expirationContext=previousExpirationContext;}}// TODO: Everything below this is written as if it has been lifted to the
// renderers. I'll do this in a follow-up.
// Linked-list of roots
var firstScheduledRoot=null;var lastScheduledRoot=null;var callbackExpirationTime=NoWork;var callbackID=void 0;var isRendering=false;var nextFlushedRoot=null;var nextFlushedExpirationTime=NoWork;var lowestPriorityPendingInteractiveExpirationTime=NoWork;var deadlineDidExpire=false;var hasUnhandledError=false;var unhandledError=null;var deadline=null;var isBatchingUpdates=false;var isUnbatchingUpdates=false;var isBatchingInteractiveUpdates=false;var completedBatches=null;var originalStartTimeMs=scheduler.unstable_now();var currentRendererTime=msToExpirationTime(originalStartTimeMs);var currentSchedulerTime=currentRendererTime;// Use these to prevent an infinite loop of nested updates
var NESTED_UPDATE_LIMIT=50;var nestedUpdateCount=0;var lastCommittedRootDuringThisBatch=null;var timeHeuristicForUnitOfWork=1;function recomputeCurrentRendererTime(){var currentTimeMs=scheduler.unstable_now()-originalStartTimeMs;currentRendererTime=msToExpirationTime(currentTimeMs);}function scheduleCallbackWithExpirationTime(root,expirationTime){if(callbackExpirationTime!==NoWork){// A callback is already scheduled. Check its expiration time (timeout).
if(expirationTime>callbackExpirationTime){// Existing callback has sufficient timeout. Exit.
return;}else{if(callbackID!==null){// Existing callback has insufficient timeout. Cancel and schedule a
// new one.
scheduler.unstable_cancelCallback(callbackID);}}// The request callback timer is already running. Don't start a new one.
}else{startRequestCallbackTimer();}callbackExpirationTime=expirationTime;var currentMs=scheduler.unstable_now()-originalStartTimeMs;var expirationTimeMs=expirationTimeToMs(expirationTime);var timeout=expirationTimeMs-currentMs;callbackID=scheduler.unstable_scheduleCallback(performAsyncWork,{timeout:timeout});}// For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
// onYield is called upon exiting. We use these in lieu of returning a tuple.
// I've also chosen not to inline them into renderRoot because these will
// eventually be lifted into the renderer.
function onFatal(root){root.finishedWork=null;}function onComplete(root,finishedWork,expirationTime){root.pendingCommitExpirationTime=expirationTime;root.finishedWork=finishedWork;}function onSuspend(root,finishedWork,suspendedExpirationTime,rootExpirationTime,msUntilTimeout){root.expirationTime=rootExpirationTime;if(msUntilTimeout===0&&!shouldYield()){// Don't wait an additional tick. Commit the tree immediately.
root.pendingCommitExpirationTime=suspendedExpirationTime;root.finishedWork=finishedWork;}else if(msUntilTimeout>0){// Wait `msUntilTimeout` milliseconds before committing.
root.timeoutHandle=scheduleTimeout(onTimeout.bind(null,root,finishedWork,suspendedExpirationTime),msUntilTimeout);}}function onYield(root){root.finishedWork=null;}function onTimeout(root,finishedWork,suspendedExpirationTime){// The root timed out. Commit it.
root.pendingCommitExpirationTime=suspendedExpirationTime;root.finishedWork=finishedWork;// Read the current time before entering the commit phase. We can be
// certain this won't cause tearing related to batching of event updates
// because we're at the top of a timer event.
recomputeCurrentRendererTime();currentSchedulerTime=currentRendererTime;flushRoot(root,suspendedExpirationTime);}function onCommit(root,expirationTime){root.expirationTime=expirationTime;root.finishedWork=null;}function requestCurrentTime(){// requestCurrentTime is called by the scheduler to compute an expiration
// time.
//
// Expiration times are computed by adding to the current time (the start
// time). However, if two updates are scheduled within the same event, we
// should treat their start times as simultaneous, even if the actual clock
// time has advanced between the first and second call.
// In other words, because expiration times determine how updates are batched,
// we want all updates of like priority that occur within the same event to
// receive the same expiration time. Otherwise we get tearing.
//
// We keep track of two separate times: the current "renderer" time and the
// current "scheduler" time. The renderer time can be updated whenever; it
// only exists to minimize the calls performance.now.
//
// But the scheduler time can only be updated if there's no pending work, or
// if we know for certain that we're not in the middle of an event.
if(isRendering){// We're already rendering. Return the most recently read time.
return currentSchedulerTime;}// Check if there's pending work.
findHighestPriorityRoot();if(nextFlushedExpirationTime===NoWork||nextFlushedExpirationTime===Never){// If there's no pending work, or if the pending work is offscreen, we can
// read the current time without risk of tearing.
recomputeCurrentRendererTime();currentSchedulerTime=currentRendererTime;return currentSchedulerTime;}// There's already pending work. We might be in the middle of a browser
// event. If we were to read the current time, it could cause multiple updates
// within the same event to receive different expiration times, leading to
// tearing. Return the last read time. During the next idle callback, the
// time will be updated.
return currentSchedulerTime;}// requestWork is called by the scheduler whenever a root receives an update.
// It's up to the renderer to call renderRoot at some point in the future.
function requestWork(root,expirationTime){addRootToSchedule(root,expirationTime);if(isRendering){// Prevent reentrancy. Remaining work will be scheduled at the end of
// the currently rendering batch.
return;}if(isBatchingUpdates){// Flush work at the end of the batch.
if(isUnbatchingUpdates){// ...unless we're inside unbatchedUpdates, in which case we should
// flush it now.
nextFlushedRoot=root;nextFlushedExpirationTime=Sync;performWorkOnRoot(root,Sync,true);}return;}// TODO: Get rid of Sync and use current time?
if(expirationTime===Sync){performSyncWork();}else{scheduleCallbackWithExpirationTime(root,expirationTime);}}function addRootToSchedule(root,expirationTime){// Add the root to the schedule.
// Check if this root is already part of the schedule.
if(root.nextScheduledRoot===null){// This root is not already scheduled. Add it.
root.expirationTime=expirationTime;if(lastScheduledRoot===null){firstScheduledRoot=lastScheduledRoot=root;root.nextScheduledRoot=root;}else{lastScheduledRoot.nextScheduledRoot=root;lastScheduledRoot=root;lastScheduledRoot.nextScheduledRoot=firstScheduledRoot;}}else{// This root is already scheduled, but its priority may have increased.
var remainingExpirationTime=root.expirationTime;if(remainingExpirationTime===NoWork||expirationTime<remainingExpirationTime){// Update the priority.
root.expirationTime=expirationTime;}}}function findHighestPriorityRoot(){var highestPriorityWork=NoWork;var highestPriorityRoot=null;if(lastScheduledRoot!==null){var previousScheduledRoot=lastScheduledRoot;var root=firstScheduledRoot;while(root!==null){var remainingExpirationTime=root.expirationTime;if(remainingExpirationTime===NoWork){// This root no longer has work. Remove it from the scheduler.
// TODO: This check is redudant, but Flow is confused by the branch
// below where we set lastScheduledRoot to null, even though we break
// from the loop right after.
!(previousScheduledRoot!==null&&lastScheduledRoot!==null)?invariant(false,'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.'):void 0;if(root===root.nextScheduledRoot){// This is the only root in the list.
root.nextScheduledRoot=null;firstScheduledRoot=lastScheduledRoot=null;break;}else if(root===firstScheduledRoot){// This is the first root in the list.
var next=root.nextScheduledRoot;firstScheduledRoot=next;lastScheduledRoot.nextScheduledRoot=next;root.nextScheduledRoot=null;}else if(root===lastScheduledRoot){// This is the last root in the list.
lastScheduledRoot=previousScheduledRoot;lastScheduledRoot.nextScheduledRoot=firstScheduledRoot;root.nextScheduledRoot=null;break;}else{previousScheduledRoot.nextScheduledRoot=root.nextScheduledRoot;root.nextScheduledRoot=null;}root=previousScheduledRoot.nextScheduledRoot;}else{if(highestPriorityWork===NoWork||remainingExpirationTime<highestPriorityWork){// Update the priority, if it's higher
highestPriorityWork=remainingExpirationTime;highestPriorityRoot=root;}if(root===lastScheduledRoot){break;}if(highestPriorityWork===Sync){// Sync is highest priority by definition so
// we can stop searching.
break;}previousScheduledRoot=root;root=root.nextScheduledRoot;}}}nextFlushedRoot=highestPriorityRoot;nextFlushedExpirationTime=highestPriorityWork;}function performAsyncWork(dl){if(dl.didTimeout){// The callback timed out. That means at least one update has expired.
// Iterate through the root schedule. If they contain expired work, set
// the next render expiration time to the current time. This has the effect
// of flushing all expired work in a single batch, instead of flushing each
// level one at a time.
if(firstScheduledRoot!==null){recomputeCurrentRendererTime();var root=firstScheduledRoot;do{didExpireAtExpirationTime(root,currentRendererTime);// The root schedule is circular, so this is never null.
root=root.nextScheduledRoot;}while(root!==firstScheduledRoot);}}performWork(NoWork,dl);}function performSyncWork(){performWork(Sync,null);}function performWork(minExpirationTime,dl){deadline=dl;// Keep working on roots until there's no more work, or until we reach
// the deadline.
findHighestPriorityRoot();if(deadline!==null){recomputeCurrentRendererTime();currentSchedulerTime=currentRendererTime;if(enableUserTimingAPI){var didExpire=nextFlushedExpirationTime<currentRendererTime;var timeout=expirationTimeToMs(nextFlushedExpirationTime);stopRequestCallbackTimer(didExpire,timeout);}while(nextFlushedRoot!==null&&nextFlushedExpirationTime!==NoWork&&(minExpirationTime===NoWork||minExpirationTime>=nextFlushedExpirationTime)&&(!deadlineDidExpire||currentRendererTime>=nextFlushedExpirationTime)){performWorkOnRoot(nextFlushedRoot,nextFlushedExpirationTime,currentRendererTime>=nextFlushedExpirationTime);findHighestPriorityRoot();recomputeCurrentRendererTime();currentSchedulerTime=currentRendererTime;}}else{while(nextFlushedRoot!==null&&nextFlushedExpirationTime!==NoWork&&(minExpirationTime===NoWork||minExpirationTime>=nextFlushedExpirationTime)){performWorkOnRoot(nextFlushedRoot,nextFlushedExpirationTime,true);findHighestPriorityRoot();}}// We're done flushing work. Either we ran out of time in this callback,
// or there's no more work left with sufficient priority.
// If we're inside a callback, set this to false since we just completed it.
if(deadline!==null){callbackExpirationTime=NoWork;callbackID=null;}// If there's work left over, schedule a new callback.
if(nextFlushedExpirationTime!==NoWork){scheduleCallbackWithExpirationTime(nextFlushedRoot,nextFlushedExpirationTime);}// Clean-up.
deadline=null;deadlineDidExpire=false;finishRendering();}function flushRoot(root,expirationTime){!!isRendering?invariant(false,'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.'):void 0;// Perform work on root as if the given expiration time is the current time.
// This has the effect of synchronously flushing all work up to and
// including the given time.
nextFlushedRoot=root;nextFlushedExpirationTime=expirationTime;performWorkOnRoot(root,expirationTime,true);// Flush any sync work that was scheduled by lifecycles
performSyncWork();}function finishRendering(){nestedUpdateCount=0;lastCommittedRootDuringThisBatch=null;if(completedBatches!==null){var batches=completedBatches;completedBatches=null;for(var i=0;i<batches.length;i++){var batch=batches[i];try{batch._onComplete();}catch(error){if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}}}if(hasUnhandledError){var error=unhandledError;unhandledError=null;hasUnhandledError=false;throw error;}}function performWorkOnRoot(root,expirationTime,isExpired){!!isRendering?invariant(false,'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.'):void 0;isRendering=true;// Check if this is async work or sync/expired work.
if(deadline===null||isExpired){// Flush work without yielding.
// TODO: Non-yieldy work does not necessarily imply expired work. A renderer
// may want to perform some work without yielding, but also without
// requiring the root to complete (by triggering placeholders).
var finishedWork=root.finishedWork;if(finishedWork!==null){// This root is already complete. We can commit it.
completeRoot(root,finishedWork,expirationTime);}else{root.finishedWork=null;// If this root previously suspended, clear its existing timeout, since
// we're about to try rendering again.
var timeoutHandle=root.timeoutHandle;if(timeoutHandle!==noTimeout){root.timeoutHandle=noTimeout;// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
cancelTimeout(timeoutHandle);}var isYieldy=false;renderRoot(root,isYieldy,isExpired);finishedWork=root.finishedWork;if(finishedWork!==null){// We've completed the root. Commit it.
completeRoot(root,finishedWork,expirationTime);}}}else{// Flush async work.
var _finishedWork=root.finishedWork;if(_finishedWork!==null){// This root is already complete. We can commit it.
completeRoot(root,_finishedWork,expirationTime);}else{root.finishedWork=null;// If this root previously suspended, clear its existing timeout, since
// we're about to try rendering again.
var _timeoutHandle=root.timeoutHandle;if(_timeoutHandle!==noTimeout){root.timeoutHandle=noTimeout;// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
cancelTimeout(_timeoutHandle);}var _isYieldy=true;renderRoot(root,_isYieldy,isExpired);_finishedWork=root.finishedWork;if(_finishedWork!==null){// We've completed the root. Check the deadline one more time
// before committing.
if(!shouldYield()){// Still time left. Commit the root.
completeRoot(root,_finishedWork,expirationTime);}else{// There's no time left. Mark this root as complete. We'll come
// back and commit it later.
root.finishedWork=_finishedWork;}}}}isRendering=false;}function completeRoot(root,finishedWork,expirationTime){// Check if there's a batch that matches this expiration time.
var firstBatch=root.firstBatch;if(firstBatch!==null&&firstBatch._expirationTime<=expirationTime){if(completedBatches===null){completedBatches=[firstBatch];}else{completedBatches.push(firstBatch);}if(firstBatch._defer){// This root is blocked from committing by a batch. Unschedule it until
// we receive another update.
root.finishedWork=finishedWork;root.expirationTime=NoWork;return;}}// Commit the root.
root.finishedWork=null;// Check if this is a nested update (a sync update scheduled during the
// commit phase).
if(root===lastCommittedRootDuringThisBatch){// If the next root is the same as the previous root, this is a nested
// update. To prevent an infinite loop, increment the nested update count.
nestedUpdateCount++;}else{// Reset whenever we switch roots.
lastCommittedRootDuringThisBatch=root;nestedUpdateCount=0;}commitRoot(root,finishedWork);}// When working on async work, the reconciler asks the renderer if it should
// yield execution. For DOM, we implement this with requestIdleCallback.
function shouldYield(){if(deadlineDidExpire){return true;}if(deadline===null||deadline.timeRemaining()>timeHeuristicForUnitOfWork){// Disregard deadline.didTimeout. Only expired work should be flushed
// during a timeout. This path is only hit for non-expired work.
return false;}deadlineDidExpire=true;return true;}function onUncaughtError(error){!(nextFlushedRoot!==null)?invariant(false,'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.'):void 0;// Unschedule this root so we don't work on it again until there's
// another update.
nextFlushedRoot.expirationTime=NoWork;if(!hasUnhandledError){hasUnhandledError=true;unhandledError=error;}}// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function batchedUpdates$1(fn,a){var previousIsBatchingUpdates=isBatchingUpdates;isBatchingUpdates=true;try{return fn(a);}finally{isBatchingUpdates=previousIsBatchingUpdates;if(!isBatchingUpdates&&!isRendering){performSyncWork();}}}// TODO: Batching should be implemented at the renderer level, not inside
// the reconciler.
function unbatchedUpdates(fn,a){if(isBatchingUpdates&&!isUnbatchingUpdates){isUnbatchingUpdates=true;try{return fn(a);}finally{isUnbatchingUpdates=false;}}return fn(a);}// TODO: Batching should be implemented at the renderer level, not within
// the reconciler.
function flushSync(fn,a){!!isRendering?invariant(false,'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.'):void 0;var previousIsBatchingUpdates=isBatchingUpdates;isBatchingUpdates=true;try{return syncUpdates(fn,a);}finally{isBatchingUpdates=previousIsBatchingUpdates;performSyncWork();}}function interactiveUpdates$1(fn,a,b){if(isBatchingInteractiveUpdates){return fn(a,b);}// If there are any pending interactive updates, synchronously flush them.
// This needs to happen before we read any handlers, because the effect of
// the previous event may influence which handlers are called during
// this event.
if(!isBatchingUpdates&&!isRendering&&lowestPriorityPendingInteractiveExpirationTime!==NoWork){// Synchronously flush pending interactive updates.
performWork(lowestPriorityPendingInteractiveExpirationTime,null);lowestPriorityPendingInteractiveExpirationTime=NoWork;}var previousIsBatchingInteractiveUpdates=isBatchingInteractiveUpdates;var previousIsBatchingUpdates=isBatchingUpdates;isBatchingInteractiveUpdates=true;isBatchingUpdates=true;try{return fn(a,b);}finally{isBatchingInteractiveUpdates=previousIsBatchingInteractiveUpdates;isBatchingUpdates=previousIsBatchingUpdates;if(!isBatchingUpdates&&!isRendering){performSyncWork();}}}function flushInteractiveUpdates$1(){if(!isRendering&&lowestPriorityPendingInteractiveExpirationTime!==NoWork){// Synchronously flush pending interactive updates.
performWork(lowestPriorityPendingInteractiveExpirationTime,null);lowestPriorityPendingInteractiveExpirationTime=NoWork;}}function flushControlled(fn){var previousIsBatchingUpdates=isBatchingUpdates;isBatchingUpdates=true;try{syncUpdates(fn);}finally{isBatchingUpdates=previousIsBatchingUpdates;if(!isBatchingUpdates&&!isRendering){performSyncWork();}}}// 0 is PROD, 1 is DEV.
// Might add PROFILE later.
var didWarnAboutNestedUpdates=void 0;var didWarnAboutFindNodeInStrictMode=void 0;{didWarnAboutNestedUpdates=false;didWarnAboutFindNodeInStrictMode={};}function getContextForSubtree(parentComponent){if(!parentComponent){return emptyContextObject;}var fiber=get(parentComponent);var parentContext=findCurrentUnmaskedContext(fiber);if(fiber.tag===ClassComponent){var Component=fiber.type;if(isContextProvider(Component)){return processChildContext(fiber,Component,parentContext);}}return parentContext;}function scheduleRootUpdate(current$$1,element,expirationTime,callback){{if(phase==='render'&&current!==null&&!didWarnAboutNestedUpdates){didWarnAboutNestedUpdates=true;warningWithoutStack$1(false,'Render methods should be a pure function of props and state; '+'triggering nested component updates from render is not allowed. '+'If necessary, trigger nested updates in componentDidUpdate.\n\n'+'Check the render method of %s.',getComponentName(current.type)||'Unknown');}}var update=createUpdate(expirationTime);// Caution: React DevTools currently depends on this property
// being called "element".
update.payload={element:element};callback=callback===undefined?null:callback;if(callback!==null){!(typeof callback==='function')?warningWithoutStack$1(false,'render(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callback):void 0;update.callback=callback;}enqueueUpdate(current$$1,update);scheduleWork(current$$1,expirationTime);return expirationTime;}function updateContainerAtExpirationTime(element,container,parentComponent,expirationTime,callback){// TODO: If this is a nested container, this won't be the root.
var current$$1=container.current;{if(ReactFiberInstrumentation_1.debugTool){if(current$$1.alternate===null){ReactFiberInstrumentation_1.debugTool.onMountContainer(container);}else if(element===null){ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);}else{ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);}}}var context=getContextForSubtree(parentComponent);if(container.context===null){container.context=context;}else{container.pendingContext=context;}return scheduleRootUpdate(current$$1,element,expirationTime,callback);}function findHostInstance(component){var fiber=get(component);if(fiber===undefined){if(typeof component.render==='function'){invariant(false,'Unable to find node on an unmounted component.');}else{invariant(false,'Argument appears to not be a ReactComponent. Keys: %s',Object.keys(component));}}var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;}function findHostInstanceWithWarning(component,methodName){{var fiber=get(component);if(fiber===undefined){if(typeof component.render==='function'){invariant(false,'Unable to find node on an unmounted component.');}else{invariant(false,'Argument appears to not be a ReactComponent. Keys: %s',Object.keys(component));}}var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}if(hostFiber.mode&StrictMode){var componentName=getComponentName(fiber.type)||'Component';if(!didWarnAboutFindNodeInStrictMode[componentName]){didWarnAboutFindNodeInStrictMode[componentName]=true;if(fiber.mode&StrictMode){warningWithoutStack$1(false,'%s is deprecated in StrictMode. '+'%s was passed an instance of %s which is inside StrictMode. '+'Instead, add a ref directly to the element you want to reference.'+'\n%s'+'\n\nLearn more about using refs safely here:'+'\nhttps://fb.me/react-strict-mode-find-node',methodName,methodName,componentName,getStackByFiberInDevAndProd(hostFiber));}else{warningWithoutStack$1(false,'%s is deprecated in StrictMode. '+'%s was passed an instance of %s which renders StrictMode children. '+'Instead, add a ref directly to the element you want to reference.'+'\n%s'+'\n\nLearn more about using refs safely here:'+'\nhttps://fb.me/react-strict-mode-find-node',methodName,methodName,componentName,getStackByFiberInDevAndProd(hostFiber));}}}return hostFiber.stateNode;}return findHostInstance(component);}function createContainer(containerInfo,isConcurrent,hydrate){return createFiberRoot(containerInfo,isConcurrent,hydrate);}function updateContainer(element,container,parentComponent,callback){var current$$1=container.current;var currentTime=requestCurrentTime();var expirationTime=computeExpirationForFiber(currentTime,current$$1);return updateContainerAtExpirationTime(element,container,parentComponent,expirationTime,callback);}function getPublicRootInstance(container){var containerFiber=container.current;if(!containerFiber.child){return null;}switch(containerFiber.child.tag){case HostComponent:return getPublicInstance(containerFiber.child.stateNode);default:return containerFiber.child.stateNode;}}function findHostInstanceWithNoPortals(fiber){var hostFiber=findCurrentHostFiberWithNoPortals(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;}function injectIntoDevTools(devToolsConfig){var findFiberByHostInstance=devToolsConfig.findFiberByHostInstance;return injectInternals(_assign({},devToolsConfig,{findHostInstanceByFiber:function(fiber){var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;},findFiberByHostInstance:function(instance){if(!findFiberByHostInstance){// Might not be implemented by the renderer.
return null;}return findFiberByHostInstance(instance);}}));}// This file intentionally does *not* have the Flow annotation.
// Don't add it. See `./inline-typed.js` for an explanation.
function createPortal$1(children,containerInfo,// TODO: figure out the API for cross-renderer implementation.
implementation){var key=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;return{// This tag allow us to uniquely identify this as a React Portal
$$typeof:REACT_PORTAL_TYPE,key:key==null?null:''+key,children:children,containerInfo:containerInfo,implementation:implementation};}// TODO: this is special because it gets imported during build.
var ReactVersion='16.6.0';// TODO: This type is shared between the reconciler and ReactDOM, but will
// eventually be lifted out to the renderer.
var ReactCurrentOwner=ReactSharedInternals.ReactCurrentOwner;var topLevelUpdateWarnings=void 0;var warnOnInvalidCallback=void 0;var didWarnAboutUnstableCreatePortal=false;{if(typeof Map!=='function'||// $FlowIssue Flow incorrectly thinks Map has no prototype
Map.prototype==null||typeof Map.prototype.forEach!=='function'||typeof Set!=='function'||// $FlowIssue Flow incorrectly thinks Set has no prototype
Set.prototype==null||typeof Set.prototype.clear!=='function'||typeof Set.prototype.forEach!=='function'){warningWithoutStack$1(false,'React depends on Map and Set built-in types. Make sure that you load a '+'polyfill in older browsers. https://fb.me/react-polyfills');}topLevelUpdateWarnings=function(container){if(container._reactRootContainer&&container.nodeType!==COMMENT_NODE){var hostInstance=findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);if(hostInstance){!(hostInstance.parentNode===container)?warningWithoutStack$1(false,'render(...): It looks like the React-rendered content of this '+'container was removed without using React. This is not '+'supported and will cause errors. Instead, call '+'ReactDOM.unmountComponentAtNode to empty a container.'):void 0;}}var isRootRenderedBySomeReact=!!container._reactRootContainer;var rootEl=getReactRootElementInContainer(container);var hasNonRootReactChild=!!(rootEl&&getInstanceFromNode$1(rootEl));!(!hasNonRootReactChild||isRootRenderedBySomeReact)?warningWithoutStack$1(false,'render(...): Replacing React-rendered children with a new root '+'component. If you intended to update the children of this node, '+'you should instead have the existing children update their state '+'and render the new components instead of calling ReactDOM.render.'):void 0;!(container.nodeType!==ELEMENT_NODE||!container.tagName||container.tagName.toUpperCase()!=='BODY')?warningWithoutStack$1(false,'render(): Rendering components directly into document.body is '+'discouraged, since its children are often manipulated by third-party '+'scripts and browser extensions. This may lead to subtle '+'reconciliation issues. Try rendering into a container element created '+'for your app.'):void 0;};warnOnInvalidCallback=function(callback,callerName){!(callback===null||typeof callback==='function')?warningWithoutStack$1(false,'%s(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callerName,callback):void 0;};}setRestoreImplementation(restoreControlledState$1);function ReactBatch(root){var expirationTime=computeUniqueAsyncExpiration();this._expirationTime=expirationTime;this._root=root;this._next=null;this._callbacks=null;this._didComplete=false;this._hasChildren=false;this._children=null;this._defer=true;}ReactBatch.prototype.render=function(children){!this._defer?invariant(false,'batch.render: Cannot render a batch that already committed.'):void 0;this._hasChildren=true;this._children=children;var internalRoot=this._root._internalRoot;var expirationTime=this._expirationTime;var work=new ReactWork();updateContainerAtExpirationTime(children,internalRoot,null,expirationTime,work._onCommit);return work;};ReactBatch.prototype.then=function(onComplete){if(this._didComplete){onComplete();return;}var callbacks=this._callbacks;if(callbacks===null){callbacks=this._callbacks=[];}callbacks.push(onComplete);};ReactBatch.prototype.commit=function(){var internalRoot=this._root._internalRoot;var firstBatch=internalRoot.firstBatch;!(this._defer&&firstBatch!==null)?invariant(false,'batch.commit: Cannot commit a batch multiple times.'):void 0;if(!this._hasChildren){// This batch is empty. Return.
this._next=null;this._defer=false;return;}var expirationTime=this._expirationTime;// Ensure this is the first batch in the list.
if(firstBatch!==this){// This batch is not the earliest batch. We need to move it to the front.
// Update its expiration time to be the expiration time of the earliest
// batch, so that we can flush it without flushing the other batches.
if(this._hasChildren){expirationTime=this._expirationTime=firstBatch._expirationTime;// Rendering this batch again ensures its children will be the final state
// when we flush (updates are processed in insertion order: last
// update wins).
// TODO: This forces a restart. Should we print a warning?
this.render(this._children);}// Remove the batch from the list.
var previous=null;var batch=firstBatch;while(batch!==this){previous=batch;batch=batch._next;}!(previous!==null)?invariant(false,'batch.commit: Cannot commit a batch multiple times.'):void 0;previous._next=batch._next;// Add it to the front.
this._next=firstBatch;firstBatch=internalRoot.firstBatch=this;}// Synchronously flush all the work up to this batch's expiration time.
this._defer=false;flushRoot(internalRoot,expirationTime);// Pop the batch from the list.
var next=this._next;this._next=null;firstBatch=internalRoot.firstBatch=next;// Append the next earliest batch's children to the update queue.
if(firstBatch!==null&&firstBatch._hasChildren){firstBatch.render(firstBatch._children);}};ReactBatch.prototype._onComplete=function(){if(this._didComplete){return;}this._didComplete=true;var callbacks=this._callbacks;if(callbacks===null){return;}// TODO: Error handling.
for(var i=0;i<callbacks.length;i++){var _callback=callbacks[i];_callback();}};function ReactWork(){this._callbacks=null;this._didCommit=false;// TODO: Avoid need to bind by replacing callbacks in the update queue with
// list of Work objects.
this._onCommit=this._onCommit.bind(this);}ReactWork.prototype.then=function(onCommit){if(this._didCommit){onCommit();return;}var callbacks=this._callbacks;if(callbacks===null){callbacks=this._callbacks=[];}callbacks.push(onCommit);};ReactWork.prototype._onCommit=function(){if(this._didCommit){return;}this._didCommit=true;var callbacks=this._callbacks;if(callbacks===null){return;}// TODO: Error handling.
for(var i=0;i<callbacks.length;i++){var _callback2=callbacks[i];!(typeof _callback2==='function')?invariant(false,'Invalid argument passed as callback. Expected a function. Instead received: %s',_callback2):void 0;_callback2();}};function ReactRoot(container,isConcurrent,hydrate){var root=createContainer(container,isConcurrent,hydrate);this._internalRoot=root;}ReactRoot.prototype.render=function(children,callback){var root=this._internalRoot;var work=new ReactWork();callback=callback===undefined?null:callback;{warnOnInvalidCallback(callback,'render');}if(callback!==null){work.then(callback);}updateContainer(children,root,null,work._onCommit);return work;};ReactRoot.prototype.unmount=function(callback){var root=this._internalRoot;var work=new ReactWork();callback=callback===undefined?null:callback;{warnOnInvalidCallback(callback,'render');}if(callback!==null){work.then(callback);}updateContainer(null,root,null,work._onCommit);return work;};ReactRoot.prototype.legacy_renderSubtreeIntoContainer=function(parentComponent,children,callback){var root=this._internalRoot;var work=new ReactWork();callback=callback===undefined?null:callback;{warnOnInvalidCallback(callback,'render');}if(callback!==null){work.then(callback);}updateContainer(children,root,parentComponent,work._onCommit);return work;};ReactRoot.prototype.createBatch=function(){var batch=new ReactBatch(this);var expirationTime=batch._expirationTime;var internalRoot=this._internalRoot;var firstBatch=internalRoot.firstBatch;if(firstBatch===null){internalRoot.firstBatch=batch;batch._next=null;}else{// Insert sorted by expiration time then insertion order
var insertAfter=null;var insertBefore=firstBatch;while(insertBefore!==null&&insertBefore._expirationTime<=expirationTime){insertAfter=insertBefore;insertBefore=insertBefore._next;}batch._next=insertBefore;if(insertAfter!==null){insertAfter._next=batch;}}return batch;};/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */function isValidContainer(node){return!!(node&&(node.nodeType===ELEMENT_NODE||node.nodeType===DOCUMENT_NODE||node.nodeType===DOCUMENT_FRAGMENT_NODE||node.nodeType===COMMENT_NODE&&node.nodeValue===' react-mount-point-unstable '));}function getReactRootElementInContainer(container){if(!container){return null;}if(container.nodeType===DOCUMENT_NODE){return container.documentElement;}else{return container.firstChild;}}function shouldHydrateDueToLegacyHeuristic(container){var rootElement=getReactRootElementInContainer(container);return!!(rootElement&&rootElement.nodeType===ELEMENT_NODE&&rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));}setBatchingImplementation(batchedUpdates$1,interactiveUpdates$1,flushInteractiveUpdates$1);var warnedAboutHydrateAPI=false;function legacyCreateRootFromDOMContainer(container,forceHydrate){var shouldHydrate=forceHydrate||shouldHydrateDueToLegacyHeuristic(container);// First clear any existing content.
if(!shouldHydrate){var warned=false;var rootSibling=void 0;while(rootSibling=container.lastChild){{if(!warned&&rootSibling.nodeType===ELEMENT_NODE&&rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)){warned=true;warningWithoutStack$1(false,'render(): Target node has markup rendered by React, but there '+'are unrelated nodes as well. This is most commonly caused by '+'white-space inserted around server-rendered markup.');}}container.removeChild(rootSibling);}}{if(shouldHydrate&&!forceHydrate&&!warnedAboutHydrateAPI){warnedAboutHydrateAPI=true;lowPriorityWarning$1(false,'render(): Calling ReactDOM.render() to hydrate server-rendered markup '+'will stop working in React v17. Replace the ReactDOM.render() call '+'with ReactDOM.hydrate() if you want React to attach to the server HTML.');}}// Legacy roots are not async by default.
var isConcurrent=false;return new ReactRoot(container,isConcurrent,shouldHydrate);}function legacyRenderSubtreeIntoContainer(parentComponent,children,container,forceHydrate,callback){// TODO: Ensure all entry points contain this check
!isValidContainer(container)?invariant(false,'Target container is not a DOM element.'):void 0;{topLevelUpdateWarnings(container);}// TODO: Without `any` type, Flow says "Property cannot be accessed on any
// member of intersection type." Whyyyyyy.
var root=container._reactRootContainer;if(!root){// Initial mount
root=container._reactRootContainer=legacyCreateRootFromDOMContainer(container,forceHydrate);if(typeof callback==='function'){var originalCallback=callback;callback=function(){var instance=getPublicRootInstance(root._internalRoot);originalCallback.call(instance);};}// Initial mount should not be batched.
unbatchedUpdates(function(){if(parentComponent!=null){root.legacy_renderSubtreeIntoContainer(parentComponent,children,callback);}else{root.render(children,callback);}});}else{if(typeof callback==='function'){var _originalCallback=callback;callback=function(){var instance=getPublicRootInstance(root._internalRoot);_originalCallback.call(instance);};}// Update
if(parentComponent!=null){root.legacy_renderSubtreeIntoContainer(parentComponent,children,callback);}else{root.render(children,callback);}}return getPublicRootInstance(root._internalRoot);}function createPortal(children,container){var key=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;!isValidContainer(container)?invariant(false,'Target container is not a DOM element.'):void 0;// TODO: pass ReactDOM portal implementation as third argument
return createPortal$1(children,container,null,key);}var ReactDOM={createPortal:createPortal,findDOMNode:function(componentOrElement){{var owner=ReactCurrentOwner.current;if(owner!==null&&owner.stateNode!==null){var warnedAboutRefsInRender=owner.stateNode._warnedAboutRefsInRender;!warnedAboutRefsInRender?warningWithoutStack$1(false,'%s is accessing findDOMNode inside its render(). '+'render() should be a pure function of props and state. It should '+'never access something that requires stale data from the previous '+'render, such as refs. Move this logic to componentDidMount and '+'componentDidUpdate instead.',getComponentName(owner.type)||'A component'):void 0;owner.stateNode._warnedAboutRefsInRender=true;}}if(componentOrElement==null){return null;}if(componentOrElement.nodeType===ELEMENT_NODE){return componentOrElement;}{return findHostInstanceWithWarning(componentOrElement,'findDOMNode');}return findHostInstance(componentOrElement);},hydrate:function(element,container,callback){// TODO: throw or warn if we couldn't hydrate?
return legacyRenderSubtreeIntoContainer(null,element,container,true,callback);},render:function(element,container,callback){return legacyRenderSubtreeIntoContainer(null,element,container,false,callback);},unstable_renderSubtreeIntoContainer:function(parentComponent,element,containerNode,callback){!(parentComponent!=null&&has(parentComponent))?invariant(false,'parentComponent must be a valid React Component'):void 0;return legacyRenderSubtreeIntoContainer(parentComponent,element,containerNode,false,callback);},unmountComponentAtNode:function(container){!isValidContainer(container)?invariant(false,'unmountComponentAtNode(...): Target container is not a DOM element.'):void 0;if(container._reactRootContainer){{var rootEl=getReactRootElementInContainer(container);var renderedByDifferentReact=rootEl&&!getInstanceFromNode$1(rootEl);!!renderedByDifferentReact?warningWithoutStack$1(false,"unmountComponentAtNode(): The node you're attempting to unmount "+'was rendered by another copy of React.'):void 0;}// Unmount should not be batched.
unbatchedUpdates(function(){legacyRenderSubtreeIntoContainer(null,null,container,false,function(){container._reactRootContainer=null;});});// If you call unmountComponentAtNode twice in quick succession, you'll
// get `true` twice. That's probably fine?
return true;}else{{var _rootEl=getReactRootElementInContainer(container);var hasNonRootReactChild=!!(_rootEl&&getInstanceFromNode$1(_rootEl));// Check if the container itself is a React root node.
var isContainerReactRoot=container.nodeType===ELEMENT_NODE&&isValidContainer(container.parentNode)&&!!container.parentNode._reactRootContainer;!!hasNonRootReactChild?warningWithoutStack$1(false,"unmountComponentAtNode(): The node you're attempting to unmount "+'was rendered by React and is not a top-level container. %s',isContainerReactRoot?'You may have accidentally passed in a React root node instead '+'of its container.':'Instead, have the parent component update its state and '+'rerender in order to remove this component.'):void 0;}return false;}},// Temporary alias since we already shipped React 16 RC with it.
// TODO: remove in React 17.
unstable_createPortal:function(){if(!didWarnAboutUnstableCreatePortal){didWarnAboutUnstableCreatePortal=true;lowPriorityWarning$1(false,'The ReactDOM.unstable_createPortal() alias has been deprecated, '+'and will be removed in React 17+. Update your code to use '+'ReactDOM.createPortal() instead. It has the exact same API, '+'but without the "unstable_" prefix.');}return createPortal.apply(undefined,arguments);},unstable_batchedUpdates:batchedUpdates$1,unstable_interactiveUpdates:interactiveUpdates$1,flushSync:flushSync,unstable_flushControlled:flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{// Keep in sync with ReactDOMUnstableNativeDependencies.js
// and ReactTestUtils.js. This is an array for better minification.
Events:[getInstanceFromNode$1,getNodeFromInstance$1,getFiberCurrentPropsFromNode$1,injection.injectEventPluginsByName,eventNameDispatchConfigs,accumulateTwoPhaseDispatches,accumulateDirectDispatches,enqueueStateRestore,restoreStateIfNeeded,dispatchEvent,runEventsInBatch]}};ReactDOM.unstable_createRoot=function createRoot(container,options){!isValidContainer(container)?invariant(false,'unstable_createRoot(...): Target container is not a DOM element.'):void 0;var hydrate=options!=null&&options.hydrate===true;return new ReactRoot(container,true,hydrate);};var foundDevTools=injectIntoDevTools({findFiberByHostInstance:getClosestInstanceFromNode,bundleType:1,version:ReactVersion,rendererPackageName:'react-dom'});{if(!foundDevTools&&canUseDOM&&window.top===window.self){// If we're in Chrome or Firefox, provide a download link if not installed.
if(navigator.userAgent.indexOf('Chrome')>-1&&navigator.userAgent.indexOf('Edge')===-1||navigator.userAgent.indexOf('Firefox')>-1){var protocol=window.location.protocol;// Don't warn in exotic cases like chrome-extension://.
if(/^(https?|file):$/.test(protocol)){console.info('%cDownload the React DevTools '+'for a better development experience: '+'https://fb.me/react-devtools'+(protocol==='file:'?'\nYou might need to use a local HTTP server (instead of file://): '+'https://fb.me/react-devtools-faq':''),'font-weight:bold');}}}}var ReactDOM$2=Object.freeze({default:ReactDOM});var ReactDOM$3=ReactDOM$2&&ReactDOM||ReactDOM$2;// TODO: decide on the top-level export form.
// This is hacky but makes it work with both Rollup and Jest.
var reactDom=ReactDOM$3.default||ReactDOM$3;module.exports=reactDom;})();}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(52);
} else {
  module.exports = __webpack_require__(53);
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.6.0
 * scheduler-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


Object.defineProperty(exports, "__esModule", {
  value: !0
});
var b = 0;
exports.__interactionsRef = null;
exports.__subscriberRef = null;

exports.unstable_clear = function (a) {
  return a();
};

exports.unstable_getCurrent = function () {
  return null;
};

exports.unstable_getThreadID = function () {
  return ++b;
};

exports.unstable_trace = function (a, d, c) {
  return c();
};

exports.unstable_wrap = function (a) {
  return a;
};

exports.unstable_subscribe = function () {};

exports.unstable_unsubscribe = function () {};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.6.0
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    }); // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    // Gather advanced timing metrics for Profiler subtrees.
    // Trace which interactions trigger each commit.

    var enableSchedulerTracing = true; // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties

    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.

    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

    exports.__subscriberRef = null;

    if (enableSchedulerTracing) {
      exports.__interactionsRef = {
        current: new Set()
      };
      exports.__subscriberRef = {
        current: null
      };
    }

    function unstable_clear(callback) {
      if (!enableSchedulerTracing) {
        return callback();
      }

      var prevInteractions = exports.__interactionsRef.current;
      exports.__interactionsRef.current = new Set();

      try {
        return callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;
      }
    }

    function unstable_getCurrent() {
      if (!enableSchedulerTracing) {
        return null;
      } else {
        return exports.__interactionsRef.current;
      }
    }

    function unstable_getThreadID() {
      return ++threadIDCounter;
    }

    function unstable_trace(name, timestamp, callback) {
      var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback();
      }

      var interaction = {
        __count: 1,
        id: interactionIDCounter++,
        name: name,
        timestamp: timestamp
      };
      var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
      // To do that, clone the current interactions.
      // The previous set will be restored upon completion.

      var interactions = new Set(prevInteractions);
      interactions.add(interaction);
      exports.__interactionsRef.current = interactions;
      var subscriber = exports.__subscriberRef.current;
      var returnValue = void 0;

      try {
        if (subscriber !== null) {
          subscriber.onInteractionTraced(interaction);
        }
      } finally {
        try {
          if (subscriber !== null) {
            subscriber.onWorkStarted(interactions, threadID);
          }
        } finally {
          try {
            returnValue = callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;

            try {
              if (subscriber !== null) {
                subscriber.onWorkStopped(interactions, threadID);
              }
            } finally {
              interaction.__count--; // If no async work was scheduled for this interaction,
              // Notify subscribers that it's completed.

              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            }
          }
        }
      }

      return returnValue;
    }

    function unstable_wrap(callback) {
      var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback;
      }

      var wrappedInteractions = exports.__interactionsRef.current;
      var subscriber = exports.__subscriberRef.current;

      if (subscriber !== null) {
        subscriber.onWorkScheduled(wrappedInteractions, threadID);
      } // Update the pending async work count for the current interactions.
      // Update after calling subscribers in case of error.


      wrappedInteractions.forEach(function (interaction) {
        interaction.__count++;
      });
      var hasRun = false;

      function wrapped() {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = wrappedInteractions;
        subscriber = exports.__subscriberRef.current;

        try {
          var returnValue = void 0;

          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(wrappedInteractions, threadID);
            }
          } finally {
            try {
              returnValue = callback.apply(undefined, arguments);
            } finally {
              exports.__interactionsRef.current = prevInteractions;

              if (subscriber !== null) {
                subscriber.onWorkStopped(wrappedInteractions, threadID);
              }
            }
          }

          return returnValue;
        } finally {
          if (!hasRun) {
            // We only expect a wrapped function to be executed once,
            // But in the event that it's executed more than once–
            // Only decrement the outstanding interaction counts once.
            hasRun = true; // Update pending async counts for all wrapped interactions.
            // If this was the last scheduled async work for any of them,
            // Mark them as completed.

            wrappedInteractions.forEach(function (interaction) {
              interaction.__count--;

              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        }
      }

      wrapped.cancel = function cancel() {
        subscriber = exports.__subscriberRef.current;

        try {
          if (subscriber !== null) {
            subscriber.onWorkCanceled(wrappedInteractions, threadID);
          }
        } finally {
          // Update pending async counts for all wrapped interactions.
          // If this was the last scheduled async work for any of them,
          // Mark them as completed.
          wrappedInteractions.forEach(function (interaction) {
            interaction.__count--;

            if (subscriber && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          });
        }
      };

      return wrapped;
    }

    var subscribers = null;

    if (enableSchedulerTracing) {
      subscribers = new Set();
    }

    function unstable_subscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.add(subscriber);

        if (subscribers.size === 1) {
          exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
          };
        }
      }
    }

    function unstable_unsubscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.delete(subscriber);

        if (subscribers.size === 0) {
          exports.__subscriberRef.current = null;
        }
      }
    }

    function onInteractionTraced(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionTraced(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onInteractionScheduledWorkCompleted(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkScheduled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkScheduled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStarted(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStarted(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStopped(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStopped(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkCanceled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkCanceled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_trace = unstable_trace;
    exports.unstable_wrap = unstable_wrap;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_unsubscribe = unstable_unsubscribe;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return App; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_config__ = __webpack_require__(97);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__routes__ = __webpack_require__(55);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





var App =
/*#__PURE__*/
function (_Component) {
  _inherits(App, _Component);

  function App() {
    _classCallCheck(this, App);

    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));
  }

  _createClass(App, [{
    key: "render",
    value: function render() {
      return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("div", null, __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("h1", null, "This is App root page."), __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement("hr", null), Object(__WEBPACK_IMPORTED_MODULE_0_react_router_config__["a" /* renderRoutes */])(__WEBPACK_IMPORTED_MODULE_2__routes__["a" /* default */]));
    }
  }]);

  return App;
}(__WEBPACK_IMPORTED_MODULE_1_react__["Component"]);



/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__api__ = __webpack_require__(41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_loadable__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_loadable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_loadable__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Loading__ = __webpack_require__(109);



var routes = [{
  path: '/',
  exact: true,
  component: __WEBPACK_IMPORTED_MODULE_1_react_loadable___default()({
    loader: function loader() {
      return __webpack_require__.e/* import() */(4).then(__webpack_require__.bind(null, 110));
    },
    loading: __WEBPACK_IMPORTED_MODULE_2__components_Loading__["a" /* default */]
  })
}, {
  path: '/languages',
  exact: true,
  component: __WEBPACK_IMPORTED_MODULE_1_react_loadable___default()({
    loader: function loader() {
      return __webpack_require__.e/* import() */(3).then(__webpack_require__.bind(null, 111));
    },
    loading: __WEBPACK_IMPORTED_MODULE_2__components_Loading__["a" /* default */]
  })
}, {
  path: '/languages/:id',
  component: __WEBPACK_IMPORTED_MODULE_1_react_loadable___default()({
    loader: function loader() {
      return __webpack_require__.e/* import() */(1).then(__webpack_require__.bind(null, 112));
    },
    loading: __WEBPACK_IMPORTED_MODULE_2__components_Loading__["a" /* default */]
  }),
  loadData: function loadData() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return Object(__WEBPACK_IMPORTED_MODULE_0__api__["a" /* fetchPopularRepos */])(path.split('/').pop());
  }
}, {
  path: '/users',
  exact: true,
  component: __WEBPACK_IMPORTED_MODULE_1_react_loadable___default()({
    loader: function loader() {
      return __webpack_require__.e/* import() */(2).then(__webpack_require__.bind(null, 113));
    },
    loading: __WEBPACK_IMPORTED_MODULE_2__components_Loading__["a" /* default */]
  })
}, {
  path: '/users/:id',
  component: __WEBPACK_IMPORTED_MODULE_1_react_loadable___default()({
    loader: function loader() {
      return __webpack_require__.e/* import() */(0).then(__webpack_require__.bind(null, 114));
    },
    loading: __WEBPACK_IMPORTED_MODULE_2__components_Loading__["a" /* default */]
  }),
  loadData: function loadData() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return Object(__WEBPACK_IMPORTED_MODULE_0__api__["b" /* fetchUser */])(path.split('/').pop());
  }
}];
/* harmony default export */ __webpack_exports__["a"] = (routes);

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

// the whatwg-fetch polyfill installs the fetch() function
// on the global object (window or self)
//
// Return that as the export for use in Webpack, Browserify etc.
__webpack_require__(57);

module.exports = self.fetch.bind(self);

/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["Headers"] = Headers;
/* harmony export (immutable) */ __webpack_exports__["Request"] = Request;
/* harmony export (immutable) */ __webpack_exports__["Response"] = Response;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOMException", function() { return DOMException; });
/* harmony export (immutable) */ __webpack_exports__["fetch"] = fetch;
var support = {
  searchParams: 'URLSearchParams' in self,
  iterable: 'Symbol' in self && 'iterator' in Symbol,
  blob: 'FileReader' in self && 'Blob' in self && function () {
    try {
      new Blob();
      return true;
    } catch (e) {
      return false;
    }
  }(),
  formData: 'FormData' in self,
  arrayBuffer: 'ArrayBuffer' in self
};

function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj);
}

if (support.arrayBuffer) {
  var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

  var isArrayBufferView = ArrayBuffer.isView || function (obj) {
    return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
  };
}

function normalizeName(name) {
  if (typeof name !== 'string') {
    name = String(name);
  }

  if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
    throw new TypeError('Invalid character in header field name');
  }

  return name.toLowerCase();
}

function normalizeValue(value) {
  if (typeof value !== 'string') {
    value = String(value);
  }

  return value;
} // Build a destructive iterator for the value list


function iteratorFor(items) {
  var iterator = {
    next: function () {
      var value = items.shift();
      return {
        done: value === undefined,
        value: value
      };
    }
  };

  if (support.iterable) {
    iterator[Symbol.iterator] = function () {
      return iterator;
    };
  }

  return iterator;
}

function Headers(headers) {
  this.map = {};

  if (headers instanceof Headers) {
    headers.forEach(function (value, name) {
      this.append(name, value);
    }, this);
  } else if (Array.isArray(headers)) {
    headers.forEach(function (header) {
      this.append(header[0], header[1]);
    }, this);
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function (name) {
      this.append(name, headers[name]);
    }, this);
  }
}

Headers.prototype.append = function (name, value) {
  name = normalizeName(name);
  value = normalizeValue(value);
  var oldValue = this.map[name];
  this.map[name] = oldValue ? oldValue + ', ' + value : value;
};

Headers.prototype['delete'] = function (name) {
  delete this.map[normalizeName(name)];
};

Headers.prototype.get = function (name) {
  name = normalizeName(name);
  return this.has(name) ? this.map[name] : null;
};

Headers.prototype.has = function (name) {
  return this.map.hasOwnProperty(normalizeName(name));
};

Headers.prototype.set = function (name, value) {
  this.map[normalizeName(name)] = normalizeValue(value);
};

Headers.prototype.forEach = function (callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this);
    }
  }
};

Headers.prototype.keys = function () {
  var items = [];
  this.forEach(function (value, name) {
    items.push(name);
  });
  return iteratorFor(items);
};

Headers.prototype.values = function () {
  var items = [];
  this.forEach(function (value) {
    items.push(value);
  });
  return iteratorFor(items);
};

Headers.prototype.entries = function () {
  var items = [];
  this.forEach(function (value, name) {
    items.push([name, value]);
  });
  return iteratorFor(items);
};

if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
}

function consumed(body) {
  if (body.bodyUsed) {
    return Promise.reject(new TypeError('Already read'));
  }

  body.bodyUsed = true;
}

function fileReaderReady(reader) {
  return new Promise(function (resolve, reject) {
    reader.onload = function () {
      resolve(reader.result);
    };

    reader.onerror = function () {
      reject(reader.error);
    };
  });
}

function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  reader.readAsArrayBuffer(blob);
  return promise;
}

function readBlobAsText(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  reader.readAsText(blob);
  return promise;
}

function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf);
  var chars = new Array(view.length);

  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i]);
  }

  return chars.join('');
}

function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0);
  } else {
    var view = new Uint8Array(buf.byteLength);
    view.set(new Uint8Array(buf));
    return view.buffer;
  }
}

function Body() {
  this.bodyUsed = false;

  this._initBody = function (body) {
    this._bodyInit = body;

    if (!body) {
      this._bodyText = '';
    } else if (typeof body === 'string') {
      this._bodyText = body;
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body;
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body;
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString();
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.

      this._bodyInit = new Blob([this._bodyArrayBuffer]);
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body);
    } else {
      this._bodyText = body = Object.prototype.toString.call(body);
    }

    if (!this.headers.get('content-type')) {
      if (typeof body === 'string') {
        this.headers.set('content-type', 'text/plain;charset=UTF-8');
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set('content-type', this._bodyBlob.type);
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
      }
    }
  };

  if (support.blob) {
    this.blob = function () {
      var rejected = consumed(this);

      if (rejected) {
        return rejected;
      }

      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]));
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as blob');
      } else {
        return Promise.resolve(new Blob([this._bodyText]));
      }
    };

    this.arrayBuffer = function () {
      if (this._bodyArrayBuffer) {
        return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
      } else {
        return this.blob().then(readBlobAsArrayBuffer);
      }
    };
  }

  this.text = function () {
    var rejected = consumed(this);

    if (rejected) {
      return rejected;
    }

    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob);
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
    } else if (this._bodyFormData) {
      throw new Error('could not read FormData body as text');
    } else {
      return Promise.resolve(this._bodyText);
    }
  };

  if (support.formData) {
    this.formData = function () {
      return this.text().then(decode);
    };
  }

  this.json = function () {
    return this.text().then(JSON.parse);
  };

  return this;
} // HTTP methods whose capitalization should be normalized


var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

function normalizeMethod(method) {
  var upcased = method.toUpperCase();
  return methods.indexOf(upcased) > -1 ? upcased : method;
}

function Request(input, options) {
  options = options || {};
  var body = options.body;

  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError('Already read');
    }

    this.url = input.url;
    this.credentials = input.credentials;

    if (!options.headers) {
      this.headers = new Headers(input.headers);
    }

    this.method = input.method;
    this.mode = input.mode;
    this.signal = input.signal;

    if (!body && input._bodyInit != null) {
      body = input._bodyInit;
      input.bodyUsed = true;
    }
  } else {
    this.url = String(input);
  }

  this.credentials = options.credentials || this.credentials || 'same-origin';

  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers);
  }

  this.method = normalizeMethod(options.method || this.method || 'GET');
  this.mode = options.mode || this.mode || null;
  this.signal = options.signal || this.signal;
  this.referrer = null;

  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
    throw new TypeError('Body not allowed for GET or HEAD requests');
  }

  this._initBody(body);
}

Request.prototype.clone = function () {
  return new Request(this, {
    body: this._bodyInit
  });
};

function decode(body) {
  var form = new FormData();
  body.trim().split('&').forEach(function (bytes) {
    if (bytes) {
      var split = bytes.split('=');
      var name = split.shift().replace(/\+/g, ' ');
      var value = split.join('=').replace(/\+/g, ' ');
      form.append(decodeURIComponent(name), decodeURIComponent(value));
    }
  });
  return form;
}

function parseHeaders(rawHeaders) {
  var headers = new Headers(); // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  // https://tools.ietf.org/html/rfc7230#section-3.2

  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
  preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
    var parts = line.split(':');
    var key = parts.shift().trim();

    if (key) {
      var value = parts.join(':').trim();
      headers.append(key, value);
    }
  });
  return headers;
}

Body.call(Request.prototype);
function Response(bodyInit, options) {
  if (!options) {
    options = {};
  }

  this.type = 'default';
  this.status = options.status === undefined ? 200 : options.status;
  this.ok = this.status >= 200 && this.status < 300;
  this.statusText = 'statusText' in options ? options.statusText : 'OK';
  this.headers = new Headers(options.headers);
  this.url = options.url || '';

  this._initBody(bodyInit);
}
Body.call(Response.prototype);

Response.prototype.clone = function () {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  });
};

Response.error = function () {
  var response = new Response(null, {
    status: 0,
    statusText: ''
  });
  response.type = 'error';
  return response;
};

var redirectStatuses = [301, 302, 303, 307, 308];

Response.redirect = function (url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError('Invalid status code');
  }

  return new Response(null, {
    status: status,
    headers: {
      location: url
    }
  });
};

var DOMException = self.DOMException;

try {
  new DOMException();
} catch (err) {
  DOMException = function (message, name) {
    this.message = message;
    this.name = name;
    var error = Error(message);
    this.stack = error.stack;
  };

  DOMException.prototype = Object.create(Error.prototype);
  DOMException.prototype.constructor = DOMException;
}

function fetch(input, init) {
  return new Promise(function (resolve, reject) {
    var request = new Request(input, init);

    if (request.signal && request.signal.aborted) {
      return reject(new DOMException('Aborted', 'AbortError'));
    }

    var xhr = new XMLHttpRequest();

    function abortXhr() {
      xhr.abort();
    }

    xhr.onload = function () {
      var options = {
        status: xhr.status,
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
      };
      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
      var body = 'response' in xhr ? xhr.response : xhr.responseText;
      resolve(new Response(body, options));
    };

    xhr.onerror = function () {
      reject(new TypeError('Network request failed'));
    };

    xhr.ontimeout = function () {
      reject(new TypeError('Network request failed'));
    };

    xhr.onabort = function () {
      reject(new DOMException('Aborted', 'AbortError'));
    };

    xhr.open(request.method, request.url, true);

    if (request.credentials === 'include') {
      xhr.withCredentials = true;
    } else if (request.credentials === 'omit') {
      xhr.withCredentials = false;
    }

    if ('responseType' in xhr && support.blob) {
      xhr.responseType = 'blob';
    }

    request.headers.forEach(function (value, name) {
      xhr.setRequestHeader(name, value);
    });

    if (request.signal) {
      request.signal.addEventListener('abort', abortXhr);

      xhr.onreadystatechange = function () {
        // DONE (success or failure)
        if (xhr.readyState === 4) {
          request.signal.removeEventListener('abort', abortXhr);
        }
      };
    }

    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
  });
}
fetch.polyfill = true;

if (!self.fetch) {
  self.fetch = fetch;
  self.Headers = Headers;
  self.Request = Request;
  self.Response = Response;
}

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var assign = __webpack_require__(6);

var ReactPropTypesSecret = __webpack_require__(14);

var checkPropTypes = __webpack_require__(13);

var printWarning = function () {};

if (process.env.NODE_ENV !== 'production') {
  printWarning = function (text) {
    var message = 'Warning: ' + text;

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function (isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */

  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */


  var ANONYMOUS = '<<anonymous>>'; // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };
  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */

  /*eslint-disable no-self-compare*/

  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */


  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  } // Make `instanceof Error` still work for returned errors.


  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }

    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;

          if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
          manualPropTypeWarningCount < 3) {
            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }

      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }

          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }

        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }

      var propValue = props[propName];

      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }

      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

        if (error instanceof Error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }

    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }

      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }

      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error instanceof Error) {
            return error;
          }
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];

      if (typeof checker !== 'function') {
        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }

    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }

      for (var key in shapeTypes) {
        var checker = shapeTypes[key];

        if (!checker) {
          continue;
        }

        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

        if (error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      } // We need to check all keys in case some are required but missing from
      // props.


      var allKeys = assign({}, props[propName], shapeTypes);

      for (var key in allKeys) {
        var checker = shapeTypes[key];

        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

        if (error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;

      case 'boolean':
        return !propValue;

      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }

        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);

        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;

          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;

              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;

      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    } // Fallback for non-spec compliant Symbols which are polyfilled.


    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  } // Equivalent of `typeof` but with special handling for array and regexp.


  function getPropType(propValue) {
    var propType = typeof propValue;

    if (Array.isArray(propValue)) {
      return 'array';
    }

    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }

    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }

    return propType;
  } // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.


  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }

    var propType = getPropType(propValue);

    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }

    return propType;
  } // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"


  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);

    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;

      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;

      default:
        return type;
    }
  } // Returns class name of the object, if any.


  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }

    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var ReactPropTypesSecret = __webpack_require__(14);

function emptyFunction() {}

module.exports = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }

    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    err.name = 'Invariant Violation';
    throw err;
  }

  ;
  shim.isRequired = shim;

  function getShim() {
    return shim;
  }

  ; // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,
    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim
  };
  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

/***/ }),
/* 60 */,
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(16);
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}






/**
 * The public API for a <Router> that uses HTML5 history.
 */

var BrowserRouter = function (_React$Component) {
  _inherits(BrowserRouter, _React$Component);

  function BrowserRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, BrowserRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = Object(__WEBPACK_IMPORTED_MODULE_3_history__["a" /* createBrowserHistory */])(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  BrowserRouter.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.");
  };

  BrowserRouter.prototype.render = function render() {
    return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__Router__["a" /* default */], {
      history: this.history,
      children: this.props.children
    });
  };

  return BrowserRouter;
}(__WEBPACK_IMPORTED_MODULE_1_react___default.a.Component);

BrowserRouter.propTypes = {
  basename: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.string,
  forceRefresh: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.bool,
  getUserConfirmation: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func,
  keyLength: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.number,
  children: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.node
};
/* harmony default export */ __webpack_exports__["a"] = (BrowserRouter);

/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocationUtils__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__PathUtils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__createTransitionManager__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DOMUtils__ = __webpack_require__(24);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};







var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

var getHistoryState = function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
};
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */


var createBrowserHistory = function createBrowserHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  __WEBPACK_IMPORTED_MODULE_1_invariant___default()(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["b" /* canUseDOM */], 'Browser history needs a DOM');
  var globalHistory = window.history;
  var canUseHistory = Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["g" /* supportsHistory */])();
  var needsHashChangeListener = !Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["h" /* supportsPopStateOnHashChange */])();
  var _props$forceRefresh = props.forceRefresh,
      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
      _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? __WEBPACK_IMPORTED_MODULE_5__DOMUtils__["c" /* getConfirmation */] : _props$getUserConfirm,
      _props$keyLength = props.keyLength,
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;
  var basename = props.basename ? Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["g" /* stripTrailingSlash */])(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */])(props.basename)) : '';

  var getDOMLocation = function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;
    var path = pathname + search + hash;
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!basename || Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["c" /* hasBasename */])(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
    if (basename) path = Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["e" /* stripBasename */])(path, basename);
    return Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, key);
  };

  var createKey = function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  };

  var transitionManager = Object(__WEBPACK_IMPORTED_MODULE_4__createTransitionManager__["a" /* default */])();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  };

  var handlePopState = function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if (Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["d" /* isExtraneousPopstateEvent */])(event)) return;
    handlePop(getDOMLocation(event.state));
  };

  var handleHashChange = function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  };

  var forceNextPop = false;

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allKeys.indexOf(fromLocation.key);
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  };

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key]; // Public interface

  var createHref = function createHref(location) {
    return basename + Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location);
  };

  var push = function push(path, state) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
    var action = 'PUSH';
    var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.pushState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
          nextKeys.push(location.key);
          allKeys = nextKeys;
          setState({
            action: action,
            location: location
          });
        }
      } else {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');
        window.location.href = href;
      }
    });
  };

  var replace = function replace(path, state) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
    var action = 'REPLACE';
    var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.replaceState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          if (prevIndex !== -1) allKeys[prevIndex] = location.key;
          setState({
            action: action,
            location: location
          });
        }
      } else {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');
        window.location.replace(href);
      }
    });
  };

  var go = function go(n) {
    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["a" /* addEventListener */])(window, PopStateEvent, handlePopState);
      if (needsHashChangeListener) Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["a" /* addEventListener */])(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["e" /* removeEventListener */])(window, PopStateEvent, handlePopState);
      if (needsHashChangeListener) Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["e" /* removeEventListener */])(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
};

/* harmony default export */ __webpack_exports__["a"] = (createBrowserHistory);

/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
} // About 1.5x faster than the two-arg version of Array#splice()


function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
} // This implementation is based heavily on node's url.parse


function resolvePathname(to) {
  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var toParts = to && to.split('/') || [];
  var fromParts = from && from.split('/') || [];
  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';
  var hasTrailingSlash = void 0;

  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;

  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) {
    fromParts.unshift('..');
  }
  if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');
  var result = fromParts.join('/');
  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';
  return result;
}

/* harmony default export */ __webpack_exports__["a"] = (resolvePathname);

/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

function valueEqual(a, b) {
  if (a === b) return true;
  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
      return valueEqual(item, b[index]);
    });
  }

  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);
  if (aType !== bType) return false;

  if (aType === 'object') {
    var aValue = a.valueOf();
    var bValue = b.valueOf();
    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);
    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);
    if (aKeys.length !== bKeys.length) return false;
    return aKeys.every(function (key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
}

/* harmony default export */ __webpack_exports__["a"] = (valueEqual);

/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocationUtils__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__PathUtils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__createTransitionManager__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DOMUtils__ = __webpack_require__(24);
var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};







var HashChangeEvent = 'hashchange';
var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["f" /* stripLeadingSlash */])(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: __WEBPACK_IMPORTED_MODULE_3__PathUtils__["f" /* stripLeadingSlash */],
    decodePath: __WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */]
  },
  slash: {
    encodePath: __WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */],
    decodePath: __WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */]
  }
};

var getHashPath = function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
};

var pushHashPath = function pushHashPath(path) {
  return window.location.hash = path;
};

var replaceHashPath = function replaceHashPath(path) {
  var hashIndex = window.location.href.indexOf('#');
  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
};

var createHashHistory = function createHashHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  __WEBPACK_IMPORTED_MODULE_1_invariant___default()(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["b" /* canUseDOM */], 'Hash history needs a DOM');
  var globalHistory = window.history;
  var canGoWithoutReload = Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["f" /* supportsGoWithoutReloadUsingHash */])();
  var _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? __WEBPACK_IMPORTED_MODULE_5__DOMUtils__["c" /* getConfirmation */] : _props$getUserConfirm,
      _props$hashType = props.hashType,
      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;
  var basename = props.basename ? Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["g" /* stripTrailingSlash */])(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */])(props.basename)) : '';
  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;

  var getDOMLocation = function getDOMLocation() {
    var path = decodePath(getHashPath());
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!basename || Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["c" /* hasBasename */])(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
    if (basename) path = Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["e" /* stripBasename */])(path, basename);
    return Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path);
  };

  var transitionManager = Object(__WEBPACK_IMPORTED_MODULE_4__createTransitionManager__["a" /* default */])();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  };

  var forceNextPop = false;
  var ignorePath = null;

  var handleHashChange = function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;
      if (!forceNextPop && Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["b" /* locationsAreEqual */])(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;
      handlePop(location);
    }
  };

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(toLocation));
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allPaths.lastIndexOf(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(fromLocation));
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  }; // Ensure the hash is encoded properly before doing anything else.


  var path = getHashPath();
  var encodedPath = encodePath(path);
  if (path !== encodedPath) replaceHashPath(encodedPath);
  var initialLocation = getDOMLocation();
  var allPaths = [Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(initialLocation)]; // Public interface

  var createHref = function createHref(location) {
    return '#' + encodePath(basename + Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location));
  };

  var push = function push(path, state) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(state === undefined, 'Hash history cannot push state; it is ignored');
    var action = 'PUSH';
    var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);
        var prevIndex = allPaths.lastIndexOf(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(history.location));
        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
        nextPaths.push(path);
        allPaths = nextPaths;
        setState({
          action: action,
          location: location
        });
      } else {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');
        setState();
      }
    });
  };

  var replace = function replace(path, state) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(state === undefined, 'Hash history cannot replace state; it is ignored');
    var action = 'REPLACE';
    var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(history.location));
      if (prevIndex !== -1) allPaths[prevIndex] = path;
      setState({
        action: action,
        location: location
      });
    });
  };

  var go = function go(n) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');
    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["a" /* addEventListener */])(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["e" /* removeEventListener */])(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
};

/* harmony default export */ __webpack_exports__["a"] = (createHashHistory);

/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__PathUtils__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocationUtils__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__createTransitionManager__ = __webpack_require__(15);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};






var clamp = function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
};
/**
 * Creates a history object that stores locations in memory.
 */


var createMemoryHistory = function createMemoryHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var getUserConfirmation = props.getUserConfirmation,
      _props$initialEntries = props.initialEntries,
      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
      _props$initialIndex = props.initialIndex,
      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,
      _props$keyLength = props.keyLength,
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;
  var transitionManager = Object(__WEBPACK_IMPORTED_MODULE_3__createTransitionManager__["a" /* default */])();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = history.entries.length;
    transitionManager.notifyListeners(history.location, history.action);
  };

  var createKey = function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  };

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry) {
    return typeof entry === 'string' ? Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(entry, undefined, createKey()) : Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(entry, undefined, entry.key || createKey());
  }); // Public interface

  var createHref = __WEBPACK_IMPORTED_MODULE_1__PathUtils__["b" /* createPath */];

  var push = function push(path, state) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
    var action = 'PUSH';
    var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;
      var nextEntries = history.entries.slice(0);

      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  };

  var replace = function replace(path, state) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
    var action = 'REPLACE';
    var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      history.entries[history.index] = location;
      setState({
        action: action,
        location: location
      });
    });
  };

  var go = function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
    var action = 'POP';
    var location = history.entries[nextIndex];
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var canGo = function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  };

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return transitionManager.setPrompt(prompt);
  };

  var listen = function listen(listener) {
    return transitionManager.appendListener(listener);
  };

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };
  return history;
};

/* harmony default export */ __webpack_exports__["a"] = (createMemoryHistory);

/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(16);
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}






/**
 * The public API for a <Router> that uses window.location.hash.
 */

var HashRouter = function (_React$Component) {
  _inherits(HashRouter, _React$Component);

  function HashRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, HashRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = Object(__WEBPACK_IMPORTED_MODULE_3_history__["b" /* createHashHistory */])(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  HashRouter.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.");
  };

  HashRouter.prototype.render = function render() {
    return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__Router__["a" /* default */], {
      history: this.history,
      children: this.props.children
    });
  };

  return HashRouter;
}(__WEBPACK_IMPORTED_MODULE_1_react___default.a.Component);

HashRouter.propTypes = {
  basename: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.string,
  getUserConfirmation: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func,
  hashType: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.oneOf(["hashbang", "noslash", "slash"]),
  children: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.node
};
/* unused harmony default export */ var _unused_webpack_default_export = (HashRouter);

/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_MemoryRouter__ = __webpack_require__(26);
// Written in this round about way for babel-transform-imports

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_MemoryRouter__["a" /* default */]);

/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Route__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Link__ = __webpack_require__(25);
var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

function _objectWithoutProperties(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}





/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

var NavLink = function NavLink(_ref) {
  var to = _ref.to,
      exact = _ref.exact,
      strict = _ref.strict,
      location = _ref.location,
      activeClassName = _ref.activeClassName,
      className = _ref.className,
      activeStyle = _ref.activeStyle,
      style = _ref.style,
      getIsActive = _ref.isActive,
      ariaCurrent = _ref["aria-current"],
      rest = _objectWithoutProperties(_ref, ["to", "exact", "strict", "location", "activeClassName", "className", "activeStyle", "style", "isActive", "aria-current"]);

  var path = (typeof to === "undefined" ? "undefined" : _typeof(to)) === "object" ? to.pathname : to; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

  var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__Route__["a" /* default */], {
    path: escapedPath,
    exact: exact,
    strict: strict,
    location: location,
    children: function children(_ref2) {
      var location = _ref2.location,
          match = _ref2.match;
      var isActive = !!(getIsActive ? getIsActive(match, location) : match);
      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__Link__["a" /* default */], _extends({
        to: to,
        className: isActive ? [className, activeClassName].filter(function (i) {
          return i;
        }).join(" ") : className,
        style: isActive ? _extends({}, style, activeStyle) : style,
        "aria-current": isActive && ariaCurrent || null
      }, rest));
    }
  });
};

NavLink.propTypes = {
  to: __WEBPACK_IMPORTED_MODULE_3__Link__["a" /* default */].propTypes.to,
  exact: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  strict: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  location: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
  activeClassName: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  className: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  activeStyle: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
  style: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
  isActive: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,
  "aria-current": __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOf(["page", "step", "location", "date", "time", "true"])
};
NavLink.defaultProps = {
  activeClassName: "active",
  "aria-current": "page"
};
/* harmony default export */ __webpack_exports__["a"] = (NavLink);

/***/ }),
/* 70 */
/***/ (function(module, exports) {

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Prompt__ = __webpack_require__(29);
// Written in this round about way for babel-transform-imports

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Prompt__["a" /* default */]);

/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Redirect__ = __webpack_require__(30);
// Written in this round about way for babel-transform-imports

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Redirect__["a" /* default */]);

/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_StaticRouter__ = __webpack_require__(31);
// Written in this round about way for babel-transform-imports

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_StaticRouter__["a" /* default */]);

/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Switch__ = __webpack_require__(32);
// Written in this round about way for babel-transform-imports

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Switch__["a" /* default */]);

/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_generatePath__ = __webpack_require__(18);
// Written in this round about way for babel-transform-imports

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_generatePath__["a" /* default */]);

/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_matchPath__ = __webpack_require__(11);
// Written in this round about way for babel-transform-imports

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_matchPath__["a" /* default */]);

/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_withRouter__ = __webpack_require__(33);
// Written in this round about way for babel-transform-imports

/* unused harmony default export */ var _unused_webpack_default_export = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_withRouter__["a" /* default */]);

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

var REACT_STATICS = {
  childContextTypes: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }

    return targetComponent;
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;

/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export createProvider */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_inheritsLoose__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_PropTypes__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__utils_warning__ = __webpack_require__(19);





var didWarnAboutReceivingStore = false;

function warnAboutReceivingStore() {
  if (didWarnAboutReceivingStore) {
    return;
  }

  didWarnAboutReceivingStore = true;
  Object(__WEBPACK_IMPORTED_MODULE_4__utils_warning__["a" /* default */])('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reduxjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
}

function createProvider(storeKey) {
  var _Provider$childContex;

  if (storeKey === void 0) {
    storeKey = 'store';
  }

  var subscriptionKey = storeKey + "Subscription";

  var Provider =
  /*#__PURE__*/
  function (_Component) {
    Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_inheritsLoose__["a" /* default */])(Provider, _Component);

    var _proto = Provider.prototype;

    _proto.getChildContext = function getChildContext() {
      var _ref;

      return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;
    };

    function Provider(props, context) {
      var _this;

      _this = _Component.call(this, props, context) || this;
      _this[storeKey] = props.store;
      return _this;
    }

    _proto.render = function render() {
      return __WEBPACK_IMPORTED_MODULE_1_react__["Children"].only(this.props.children);
    };

    return Provider;
  }(__WEBPACK_IMPORTED_MODULE_1_react__["Component"]);

  if (process.env.NODE_ENV !== 'production') {
    Provider.prototype.componentWillReceiveProps = function (nextProps) {
      if (this[storeKey] !== nextProps.store) {
        warnAboutReceivingStore();
      }
    };
  }

  Provider.propTypes = {
    store: __WEBPACK_IMPORTED_MODULE_3__utils_PropTypes__["a" /* storeShape */].isRequired,
    children: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.element.isRequired
  };
  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = __WEBPACK_IMPORTED_MODULE_3__utils_PropTypes__["a" /* storeShape */].isRequired, _Provider$childContex[subscriptionKey] = __WEBPACK_IMPORTED_MODULE_3__utils_PropTypes__["b" /* subscriptionShape */], _Provider$childContex);
  return Provider;
}
/* harmony default export */ __webpack_exports__["a"] = (createProvider());
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))

/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _assertThisInitialized;
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

var ReactIs = __webpack_require__(37);

var React = __webpack_require__(0);

var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true
};
var TYPE_STATICS = {};
TYPE_STATICS[ReactIs.ForwardRef] = FORWARD_REF_STATICS;
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    var targetStatics = TYPE_STATICS[targetComponent['$$typeof']] || REACT_STATICS;
    var sourceStatics = TYPE_STATICS[sourceComponent['$$typeof']] || REACT_STATICS;

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }

    return targetComponent;
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.6.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


Object.defineProperty(exports, "__esModule", {
  value: !0
});
var b = "function" === typeof Symbol && Symbol.for,
    c = b ? Symbol.for("react.element") : 60103,
    d = b ? Symbol.for("react.portal") : 60106,
    e = b ? Symbol.for("react.fragment") : 60107,
    f = b ? Symbol.for("react.strict_mode") : 60108,
    g = b ? Symbol.for("react.profiler") : 60114,
    h = b ? Symbol.for("react.provider") : 60109,
    k = b ? Symbol.for("react.context") : 60110,
    l = b ? Symbol.for("react.concurrent_mode") : 60111,
    m = b ? Symbol.for("react.forward_ref") : 60112,
    n = b ? Symbol.for("react.suspense") : 60113,
    q = b ? Symbol.for("react.memo") : 60115,
    r = b ? Symbol.for("react.lazy") : 60116;

function t(a) {
  if ("object" === typeof a && null !== a) {
    var p = a.$$typeof;

    switch (p) {
      case c:
        switch (a = a.type, a) {
          case l:
          case e:
          case g:
          case f:
            return a;

          default:
            switch (a = a && a.$$typeof, a) {
              case k:
              case m:
              case h:
                return a;

              default:
                return p;
            }

        }

      case d:
        return p;
    }
  }
}

function u(a) {
  return t(a) === l;
}

exports.typeOf = t;
exports.AsyncMode = l;
exports.ConcurrentMode = l;
exports.ContextConsumer = k;
exports.ContextProvider = h;
exports.Element = c;
exports.ForwardRef = m;
exports.Fragment = e;
exports.Profiler = g;
exports.Portal = d;
exports.StrictMode = f;

exports.isValidElementType = function (a) {
  return "string" === typeof a || "function" === typeof a || a === e || a === l || a === g || a === f || a === n || "object" === typeof a && null !== a && (a.$$typeof === r || a.$$typeof === q || a.$$typeof === h || a.$$typeof === k || a.$$typeof === m);
};

exports.isAsyncMode = function (a) {
  return u(a);
};

exports.isConcurrentMode = u;

exports.isContextConsumer = function (a) {
  return t(a) === k;
};

exports.isContextProvider = function (a) {
  return t(a) === h;
};

exports.isElement = function (a) {
  return "object" === typeof a && null !== a && a.$$typeof === c;
};

exports.isForwardRef = function (a) {
  return t(a) === m;
};

exports.isFragment = function (a) {
  return t(a) === e;
};

exports.isProfiler = function (a) {
  return t(a) === g;
};

exports.isPortal = function (a) {
  return t(a) === d;
};

exports.isStrictMode = function (a) {
  return t(a) === f;
};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.6.0
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    }); // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.

    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }
    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    } // AsyncMode alias is deprecated along with isAsyncMode


    var AsyncMode = REACT_CONCURRENT_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true;
          lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }
      return isConcurrentMode(object);
    }

    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }

    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }

    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }

    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }

    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }

    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }

    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }

    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }

    exports.typeOf = typeOf;
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Profiler = Profiler;
    exports.Portal = Portal;
    exports.StrictMode = StrictMode;
    exports.isValidElementType = isValidElementType;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isProfiler = isProfiler;
    exports.isPortal = isPortal;
    exports.isStrictMode = isStrictMode;
  })();
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Subscription; });
// encapsulates the subscription logic for connecting a component to the redux store, as
// well as nesting subscriptions of descendant components, so that we can ensure the
// ancestor components re-render before descendants
var CLEARED = null;
var nullListeners = {
  notify: function notify() {}
};

function createListenerCollection() {
  // the current/next pattern is copied from redux's createStore code.
  // TODO: refactor+expose that code to be reusable here?
  var current = [];
  var next = [];
  return {
    clear: function clear() {
      next = CLEARED;
      current = CLEARED;
    },
    notify: function notify() {
      var listeners = current = next;

      for (var i = 0; i < listeners.length; i++) {
        listeners[i]();
      }
    },
    get: function get() {
      return next;
    },
    subscribe: function subscribe(listener) {
      var isSubscribed = true;
      if (next === current) next = current.slice();
      next.push(listener);
      return function unsubscribe() {
        if (!isSubscribed || current === CLEARED) return;
        isSubscribed = false;
        if (next === current) next = current.slice();
        next.splice(next.indexOf(listener), 1);
      };
    }
  };
}

var Subscription =
/*#__PURE__*/
function () {
  function Subscription(store, parentSub, onStateChange) {
    this.store = store;
    this.parentSub = parentSub;
    this.onStateChange = onStateChange;
    this.unsubscribe = null;
    this.listeners = nullListeners;
  }

  var _proto = Subscription.prototype;

  _proto.addNestedSub = function addNestedSub(listener) {
    this.trySubscribe();
    return this.listeners.subscribe(listener);
  };

  _proto.notifyNestedSubs = function notifyNestedSubs() {
    this.listeners.notify();
  };

  _proto.isSubscribed = function isSubscribed() {
    return Boolean(this.unsubscribe);
  };

  _proto.trySubscribe = function trySubscribe() {
    if (!this.unsubscribe) {
      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);
      this.listeners = createListenerCollection();
    }
  };

  _proto.tryUnsubscribe = function tryUnsubscribe() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
      this.listeners.clear();
      this.listeners = nullListeners;
    }
  };

  return Subscription;
}();



/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export createConnect */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_extends__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_objectWithoutPropertiesLoose__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_connectAdvanced__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_shallowEqual__ = __webpack_require__(86);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mapDispatchToProps__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__mapStateToProps__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__mergeProps__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__selectorFactory__ = __webpack_require__(95);








/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

function match(arg, factories, name) {
  for (var i = factories.length - 1; i >= 0; i--) {
    var result = factories[i](arg);
    if (result) return result;
  }

  return function (dispatch, options) {
    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
  };
}

function strictEqual(a, b) {
  return a === b;
} // createConnect with default args builds the 'official' connect behavior. Calling it with
// different options opens up some testing and extensibility scenarios


function createConnect(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$connectHOC = _ref.connectHOC,
      connectHOC = _ref$connectHOC === void 0 ? __WEBPACK_IMPORTED_MODULE_2__components_connectAdvanced__["a" /* default */] : _ref$connectHOC,
      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? __WEBPACK_IMPORTED_MODULE_5__mapStateToProps__["a" /* default */] : _ref$mapStateToPropsF,
      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? __WEBPACK_IMPORTED_MODULE_4__mapDispatchToProps__["a" /* default */] : _ref$mapDispatchToPro,
      _ref$mergePropsFactor = _ref.mergePropsFactories,
      mergePropsFactories = _ref$mergePropsFactor === void 0 ? __WEBPACK_IMPORTED_MODULE_6__mergeProps__["a" /* default */] : _ref$mergePropsFactor,
      _ref$selectorFactory = _ref.selectorFactory,
      selectorFactory = _ref$selectorFactory === void 0 ? __WEBPACK_IMPORTED_MODULE_7__selectorFactory__["a" /* default */] : _ref$selectorFactory;

  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
    if (_ref2 === void 0) {
      _ref2 = {};
    }

    var _ref3 = _ref2,
        _ref3$pure = _ref3.pure,
        pure = _ref3$pure === void 0 ? true : _ref3$pure,
        _ref3$areStatesEqual = _ref3.areStatesEqual,
        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,
        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,
        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? __WEBPACK_IMPORTED_MODULE_3__utils_shallowEqual__["a" /* default */] : _ref3$areOwnPropsEqua,
        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,
        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? __WEBPACK_IMPORTED_MODULE_3__utils_shallowEqual__["a" /* default */] : _ref3$areStatePropsEq,
        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,
        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? __WEBPACK_IMPORTED_MODULE_3__utils_shallowEqual__["a" /* default */] : _ref3$areMergedPropsE,
        extraOptions = Object(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_objectWithoutPropertiesLoose__["a" /* default */])(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);

    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
    return connectHOC(selectorFactory, Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_extends__["a" /* default */])({
      // used in error messages
      methodName: 'connect',
      // used to compute Connect's displayName from the wrapped component's displayName.
      getDisplayName: function getDisplayName(name) {
        return "Connect(" + name + ")";
      },
      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
      shouldHandleStateChanges: Boolean(mapStateToProps),
      // passed through to selectorFactory
      initMapStateToProps: initMapStateToProps,
      initMapDispatchToProps: initMapDispatchToProps,
      initMergeProps: initMergeProps,
      pure: pure,
      areStatesEqual: areStatesEqual,
      areOwnPropsEqual: areOwnPropsEqual,
      areStatePropsEqual: areStatePropsEqual,
      areMergedPropsEqual: areMergedPropsEqual
    }, extraOptions));
  };
}
/* harmony default export */ __webpack_exports__["a"] = (createConnect());

/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shallowEqual;
var hasOwn = Object.prototype.hasOwnProperty;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export whenMapDispatchToPropsIsFunction */
/* unused harmony export whenMapDispatchToPropsIsMissing */
/* unused harmony export whenMapDispatchToPropsIsObject */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_redux__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__ = __webpack_require__(38);


function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
  return typeof mapDispatchToProps === 'function' ? Object(__WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__["b" /* wrapMapToPropsFunc */])(mapDispatchToProps, 'mapDispatchToProps') : undefined;
}
function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
  return !mapDispatchToProps ? Object(__WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__["a" /* wrapMapToPropsConstant */])(function (dispatch) {
    return {
      dispatch: dispatch
    };
  }) : undefined;
}
function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? Object(__WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__["a" /* wrapMapToPropsConstant */])(function (dispatch) {
    return Object(__WEBPACK_IMPORTED_MODULE_0_redux__["a" /* bindActionCreators */])(mapDispatchToProps, dispatch);
  }) : undefined;
}
/* harmony default export */ __webpack_exports__["a"] = ([whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject]);

/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ponyfill_js__ = __webpack_require__(91);
/* global window */

var root;

if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (true) {
  root = module;
} else {
  root = Function('return this')();
}

var result = Object(__WEBPACK_IMPORTED_MODULE_0__ponyfill_js__["a" /* default */])(root);
/* harmony default export */ __webpack_exports__["a"] = (result);
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(89), __webpack_require__(90)(module)))

/***/ }),
/* 89 */
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),
/* 90 */
/***/ (function(module, exports) {

module.exports = function (originalModule) {
  if (!originalModule.webpackPolyfill) {
    var module = Object.create(originalModule); // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function () {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function () {
        return module.i;
      }
    });
    Object.defineProperty(module, "exports", {
      enumerable: true
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = symbolObservablePonyfill;
function symbolObservablePonyfill(root) {
  var result;
  var Symbol = root.Symbol;

  if (typeof Symbol === 'function') {
    if (Symbol.observable) {
      result = Symbol.observable;
    } else {
      result = Symbol('observable');
      Symbol.observable = result;
    }
  } else {
    result = '@@observable';
  }

  return result;
}
;

/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isPlainObject;
/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */
function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  var proto = obj;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(obj) === proto;
}

/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export whenMapStateToPropsIsFunction */
/* unused harmony export whenMapStateToPropsIsMissing */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__wrapMapToProps__ = __webpack_require__(38);

function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === 'function' ? Object(__WEBPACK_IMPORTED_MODULE_0__wrapMapToProps__["b" /* wrapMapToPropsFunc */])(mapStateToProps, 'mapStateToProps') : undefined;
}
function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? Object(__WEBPACK_IMPORTED_MODULE_0__wrapMapToProps__["a" /* wrapMapToPropsConstant */])(function () {
    return {};
  }) : undefined;
}
/* harmony default export */ __webpack_exports__["a"] = ([whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing]);

/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export defaultMergeProps */
/* unused harmony export wrapMergePropsFunc */
/* unused harmony export whenMergePropsIsFunction */
/* unused harmony export whenMergePropsIsOmitted */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_extends__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_verifyPlainObject__ = __webpack_require__(39);


function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_extends__["a" /* default */])({}, ownProps, stateProps, dispatchProps);
}
function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName,
        pure = _ref.pure,
        areMergedPropsEqual = _ref.areMergedPropsEqual;
    var hasRunOnce = false;
    var mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
        if (process.env.NODE_ENV !== 'production') Object(__WEBPACK_IMPORTED_MODULE_1__utils_verifyPlainObject__["a" /* default */])(mergedProps, displayName, 'mergeProps');
      }

      return mergedProps;
    };
  };
}
function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}
function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : undefined;
}
/* harmony default export */ __webpack_exports__["a"] = ([whenMergePropsIsFunction, whenMergePropsIsOmitted]);
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))

/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export impureFinalPropsSelectorFactory */
/* unused harmony export pureFinalPropsSelectorFactory */
/* harmony export (immutable) */ __webpack_exports__["a"] = finalPropsSelectorFactory;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_objectWithoutPropertiesLoose__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__verifySubselectors__ = __webpack_require__(96);


function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
  };
}
function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual,
      areOwnPropsEqual = _ref.areOwnPropsEqual,
      areStatePropsEqual = _ref.areStatePropsEqual;
  var hasRunAtLeastOnce = false;
  var state;
  var ownProps;
  var stateProps;
  var dispatchProps;
  var mergedProps;

  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }

  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;
    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state);
    state = nextState;
    ownProps = nextOwnProps;
    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }

  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
} // TODO: Add more comments
// If pure is true, the selector returned by selectorFactory will memoize its results,
// allowing connectAdvanced's shouldComponentUpdate to return false if final
// props have not changed. If false, the selector will always return a new
// object and shouldComponentUpdate will always return true.

function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps,
      initMapDispatchToProps = _ref2.initMapDispatchToProps,
      initMergeProps = _ref2.initMergeProps,
      options = Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_objectWithoutPropertiesLoose__["a" /* default */])(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);

  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);

  if (process.env.NODE_ENV !== 'production') {
    Object(__WEBPACK_IMPORTED_MODULE_1__verifySubselectors__["a" /* default */])(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
  }

  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))

/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = verifySubselectors;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_warning__ = __webpack_require__(19);


function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
    if (!selector.hasOwnProperty('dependsOnOwnProps')) {
      Object(__WEBPACK_IMPORTED_MODULE_0__utils_warning__["a" /* default */])("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
    }
  }
}

function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
  verify(mapStateToProps, 'mapStateToProps', displayName);
  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
  verify(mergeProps, 'mergeProps', displayName);
}

/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export matchRoutes */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return renderRoutes; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router__ = __webpack_require__(98);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_extends__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react__);




function matchRoutes(routes, pathname,
/*not public API*/
branch) {
  if (branch === void 0) {
    branch = [];
  }

  routes.some(function (route) {
    var match = route.path ? Object(__WEBPACK_IMPORTED_MODULE_0_react_router__["d" /* matchPath */])(pathname, route) : branch.length ? branch[branch.length - 1].match // use parent match
    : __WEBPACK_IMPORTED_MODULE_0_react_router__["b" /* Router */].computeRootMatch(pathname); // use default "root" match

    if (match) {
      branch.push({
        route: route,
        match: match
      });

      if (route.routes) {
        matchRoutes(route.routes, pathname, branch);
      }
    }

    return match;
  });
  return branch;
}

function renderRoutes(routes, extraProps, switchProps) {
  if (extraProps === void 0) {
    extraProps = {};
  }

  if (switchProps === void 0) {
    switchProps = {};
  }

  return routes ? __WEBPACK_IMPORTED_MODULE_2_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_react_router__["c" /* Switch */], switchProps, routes.map(function (route, i) {
    return __WEBPACK_IMPORTED_MODULE_2_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_react_router__["a" /* Route */], {
      key: route.key || i,
      path: route.path,
      exact: route.exact,
      strict: route.strict,
      render: function render(props) {
        return route.render ? route.render(Object(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_extends__["a" /* default */])({}, props, extraProps, {
          route: route
        })) : __WEBPACK_IMPORTED_MODULE_2_react___default.a.createElement(route.component, Object(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_extends__["a" /* default */])({}, props, extraProps, {
          route: route
        }));
      }
    });
  })) : null;
}



/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__MemoryRouter__ = __webpack_require__(26);
/* unused harmony reexport MemoryRouter */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Prompt__ = __webpack_require__(29);
/* unused harmony reexport Prompt */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Redirect__ = __webpack_require__(30);
/* unused harmony reexport Redirect */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Route__ = __webpack_require__(17);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_3__Route__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(10);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_4__Router__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__StaticRouter__ = __webpack_require__(31);
/* unused harmony reexport StaticRouter */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Switch__ = __webpack_require__(32);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_6__Switch__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__generatePath__ = __webpack_require__(18);
/* unused harmony reexport generatePath */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__matchPath__ = __webpack_require__(11);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_8__matchPath__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__withRouter__ = __webpack_require__(33);
/* unused harmony reexport withRouter */





















/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_redux__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__counterReducer__ = __webpack_require__(100);


/* harmony default export */ __webpack_exports__["a"] = (Object(__WEBPACK_IMPORTED_MODULE_0_redux__["b" /* combineReducers */])({
  counter: __WEBPACK_IMPORTED_MODULE_1__counterReducer__["a" /* default */]
}));

/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = dataReducer;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constants__ = __webpack_require__(108);
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


function dataReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case __WEBPACK_IMPORTED_MODULE_0__constants__["a" /* ADD_USER */]:
      return Object.assign({}, state, _defineProperty({}, action.payload, 0));

    case __WEBPACK_IMPORTED_MODULE_0__constants__["c" /* INCREMENT */]:
      return Object.assign({}, state, _defineProperty({}, action.payload, ++state[action.payload]));

    case __WEBPACK_IMPORTED_MODULE_0__constants__["b" /* DECREMENT */]:
      return Object.assign({}, state, _defineProperty({}, action.payload, --state[action.payload]));

    default:
      return state;
  }
}

/***/ }),
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return INCREMENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return DECREMENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ADD_USER; });
var INCREMENT = "INCREMENT";
var DECREMENT = "DECREMENT";
var ADD_USER = "ADD_USER";

/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = Loading;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);

function Loading(props) {
  if (props.error) {
    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", null, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("p", null, " Error! "), __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("button", {
      onClick: props.retry
    }, " Retry "));
  } else if (props.pastDelay) {
    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", null, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("p", null, "Loading..."));
  } else {
    return null;
  }
}

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgOTg4NzlmYTllMTQyNTY3NTc0NDEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvTG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9nZW5lcmF0ZVBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWxvYWRhYmxlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9MaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL3RyYWNpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLXRyYWNpbmcucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLXRyYWNpbmcuZGV2ZWxvcG1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC9BcHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC9yb3V0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzb21vcnBoaWMtZmV0Y2gvZmV0Y2gtbnBtLWJyb3dzZXJpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3doYXR3Zy1mZXRjaC9mZXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvQnJvd3NlclJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlSGFzaEhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlTWVtb3J5SGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9IYXNoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3dpdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvaXNQbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvdmVyaWZ5U3Vic2VsZWN0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItY29uZmlnL2VzbS9yZWFjdC1yb3V0ZXItY29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NoYXJlZC9yZWR1Y2Vycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkL3JlZHVjZXJzL2NvdW50ZXJSZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQvY29uc3RhbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zaGFyZWQvY29tcG9uZW50cy9Mb2FkaW5nLmpzIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJFcnJvciIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZSIsImNsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjYWxsIiwicnVuQ2xlYXJUaW1lb3V0IiwibWFya2VyIiwicXVldWUiLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJsZW5ndGgiLCJjb25jYXQiLCJkcmFpblF1ZXVlIiwidGltZW91dCIsImxlbiIsInJ1biIsIm5leHRUaWNrIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwiaSIsInB1c2giLCJJdGVtIiwiYXJyYXkiLCJwcm90b3R5cGUiLCJhcHBseSIsInRpdGxlIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJub29wIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwibmFtZSIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiU3ltYm9sIiwiZm9yIiwiaXNWYWxpZEVsZW1lbnQiLCJvYmplY3QiLCIkJHR5cGVvZiIsInRocm93T25EaXJlY3RBY2Nlc3MiLCJpbnZhcmlhbnQiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhIiwiYiIsImMiLCJkIiwiZiIsInVuZGVmaW5lZCIsImVycm9yIiwiYXJnSW5kZXgiLCJyZXBsYWNlIiwiZnJhbWVzVG9Qb3AiLCJfX0RFVl9fIiwid2FybmluZyIsInByaW50V2FybmluZyIsImtleSIsIm1lc3NhZ2UiLCJjb25zb2xlIiwieCIsImdldE93blByb3BlcnR5U3ltYm9scyIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJUeXBlRXJyb3IiLCJzaG91bGRVc2VOYXRpdmUiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsIm9yZGVyMiIsIm1hcCIsIm4iLCJqb2luIiwidGVzdDMiLCJzcGxpdCIsImZvckVhY2giLCJsZXR0ZXIiLCJrZXlzIiwiZXJyIiwidGFyZ2V0Iiwic291cmNlIiwiZnJvbSIsInRvIiwic3ltYm9scyIsInMiLCJhZGRMZWFkaW5nU2xhc2giLCJwYXRoIiwiY2hhckF0Iiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdWJzdHIiLCJoYXNCYXNlbmFtZSIsInByZWZpeCIsIlJlZ0V4cCIsInRlc3QiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwic2xpY2UiLCJwYXJzZVBhdGgiLCJwYXRobmFtZSIsInNlYXJjaCIsImhhc2giLCJoYXNoSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoSW5kZXgiLCJjcmVhdGVQYXRoIiwibG9jYXRpb24iLCJfZXh0ZW5kcyIsImNyZWF0ZUxvY2F0aW9uIiwic3RhdGUiLCJjdXJyZW50TG9jYXRpb24iLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsInJlc29sdmVQYXRobmFtZSIsImxvY2F0aW9uc0FyZUVxdWFsIiwidmFsdWVFcXVhbCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIlJvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJfdGVtcCIsIl90aGlzIiwiX3JldCIsIl9sZW4iLCJfa2V5IiwibWF0Y2giLCJjb21wdXRlTWF0Y2giLCJwcm9wcyIsImhpc3RvcnkiLCJnZXRDaGlsZENvbnRleHQiLCJyb3V0ZXIiLCJjb250ZXh0Iiwicm91dGUiLCJ1cmwiLCJwYXJhbXMiLCJpc0V4YWN0IiwiY29tcG9uZW50V2lsbE1vdW50IiwiX3RoaXMyIiwiX3Byb3BzIiwiY2hpbGRyZW4iLCJSZWFjdCIsIkNoaWxkcmVuIiwiY291bnQiLCJ1bmxpc3RlbiIsImxpc3RlbiIsInNldFN0YXRlIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVuZGVyIiwib25seSIsIkNvbXBvbmVudCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImlzUmVxdWlyZWQiLCJub2RlIiwiY29udGV4dFR5cGVzIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJwYXR0ZXJuQ2FjaGUiLCJjYWNoZUxpbWl0IiwiY2FjaGVDb3VudCIsImNvbXBpbGVQYXRoIiwicGF0dGVybiIsIm9wdGlvbnMiLCJjYWNoZUtleSIsImVuZCIsInN0cmljdCIsInNlbnNpdGl2ZSIsImNhY2hlIiwicmUiLCJwYXRoVG9SZWdleHAiLCJjb21waWxlZFBhdHRlcm4iLCJtYXRjaFBhdGgiLCJwYXJlbnQiLCJfb3B0aW9ucyIsIl9vcHRpb25zJGV4YWN0IiwiZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJleGVjIiwidmFsdWVzIiwicmVkdWNlIiwibWVtbyIsImluZGV4IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJsb2dnZWRUeXBlRmFpbHVyZXMiLCJ0ZXh0IiwiY2hlY2tQcm9wVHlwZXMiLCJ0eXBlU3BlY3MiLCJjb21wb25lbnROYW1lIiwiZ2V0U3RhY2siLCJ0eXBlU3BlY05hbWUiLCJleCIsInN0YWNrIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImFjdGlvbiIsImdldFVzZXJDb25maXJtYXRpb24iLCJjYWxsYmFjayIsInJlc3VsdCIsImFwcGVuZExpc3RlbmVyIiwiZm4iLCJpc0FjdGl2ZSIsImxpc3RlbmVyIiwiZmlsdGVyIiwiaXRlbSIsIm5vdGlmeUxpc3RlbmVycyIsImlzRW1wdHlDaGlsZHJlbiIsIlJvdXRlIiwiX3JlZiIsImNvbXB1dGVkTWF0Y2giLCJjb21wb25lbnQiLCJuZXh0Q29udGV4dCIsIl9jb250ZXh0JHJvdXRlciIsInN0YXRpY0NvbnRleHQiLCJjcmVhdGVFbGVtZW50Iiwic3RyaW5nIiwiYm9vbCIsImZ1bmMiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImNvbXBpbGVHZW5lcmF0b3IiLCJjb21waWxlZEdlbmVyYXRvciIsImNvbXBpbGUiLCJnZW5lcmF0ZVBhdGgiLCJnZW5lcmF0b3IiLCJwcmV0dHkiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsInJhbmRvbVN0cmluZyIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJvYmoiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiZ2V0U3RhdGUiLCJzdWJzY3JpYmUiLCJpc1N1YnNjcmliZWQiLCJ1bnN1YnNjcmliZSIsInNwbGljZSIsImRpc3BhdGNoIiwidHlwZSIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvYnNlcnZhYmxlIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsIm5leHQiLCIkJG9ic2VydmFibGUiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJhY3Rpb25EZXNjcmlwdGlvbiIsImdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UiLCJpbnB1dFN0YXRlIiwicmVkdWNlcnMiLCJ1bmV4cGVjdGVkS2V5Q2FjaGUiLCJyZWR1Y2VyS2V5cyIsImFyZ3VtZW50TmFtZSIsInVuZXhwZWN0ZWRLZXlzIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaW5pdGlhbFN0YXRlIiwiY29tYmluZVJlZHVjZXJzIiwiZmluYWxSZWR1Y2VycyIsImZpbmFsUmVkdWNlcktleXMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiY29tYmluYXRpb24iLCJ3YXJuaW5nTWVzc2FnZSIsImhhc0NoYW5nZWQiLCJuZXh0U3RhdGUiLCJfaSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJfZGVmaW5lUHJvcGVydHkiLCJkZWZpbmVQcm9wZXJ0eSIsIl9vYmplY3RTcHJlYWQiLCJvd25LZXlzIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY29tcG9zZSIsImZ1bmNzIiwiYXJnIiwiYXBwbHlNaWRkbGV3YXJlIiwibWlkZGxld2FyZXMiLCJzdG9yZSIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJpc0NydXNoZWQiLCJfdHlwZW9mIiwiaXRlcmF0b3IiLCJBTExfSU5JVElBTElaRVJTIiwiUkVBRFlfSU5JVElBTElaRVJTIiwiaXNXZWJwYWNrUmVhZHkiLCJnZXRNb2R1bGVJZHMiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZXZlcnkiLCJtb2R1bGVJZCIsImxvYWQiLCJsb2FkZXIiLCJwcm9taXNlIiwibG9hZGluZyIsImxvYWRlZCIsInRoZW4iLCJjYXRjaCIsImxvYWRNYXAiLCJwcm9taXNlcyIsInJlcyIsIlByb21pc2UiLCJhbGwiLCJyZXNvbHZlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjcmVhdGVMb2FkYWJsZUNvbXBvbmVudCIsImxvYWRGbiIsIl9jbGFzcyIsIm9wdHMiLCJkZWxheSIsIndlYnBhY2siLCJtb2R1bGVzIiwiaW5pdCIsIkxvYWRhYmxlQ29tcG9uZW50IiwicmV0cnkiLCJ0aW1lZE91dCIsIl9sb2FkTW9kdWxlIiwicGFzdERlbGF5IiwicHJlbG9hZCIsIl9tb3VudGVkIiwibG9hZGFibGUiLCJpc0FycmF5IiwibW9kdWxlTmFtZSIsInJlcG9ydCIsIl9kZWxheSIsIl90aW1lb3V0IiwidXBkYXRlIiwiX2NsZWFyVGltZW91dHMiLCJpc0xvYWRpbmciLCJMb2FkYWJsZSIsIkxvYWRhYmxlTWFwIiwiTWFwIiwiQ2FwdHVyZSIsIl9SZWFjdCRDb21wb25lbnQyIiwiZmx1c2hJbml0aWFsaXplcnMiLCJpbml0aWFsaXplcnMiLCJwb3AiLCJwcmVsb2FkQWxsIiwicmVqZWN0IiwicHJlbG9hZFJlYWR5IiwiY2FuVXNlRE9NIiwid2luZG93IiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJzdXBwb3J0c0hpc3RvcnkiLCJ1YSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UiLCJzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJpc01vZGlmaWVkRXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiTGluayIsImhhbmRsZUNsaWNrIiwib25DbGljayIsImRlZmF1bHRQcmV2ZW50ZWQiLCJidXR0b24iLCJwcmV2ZW50RGVmYXVsdCIsIl90aGlzJHByb3BzIiwiaW5uZXJSZWYiLCJocmVmIiwiY3JlYXRlSHJlZiIsInJlZiIsImRlZmF1bHRQcm9wcyIsIk1lbW9yeVJvdXRlciIsImNyZWF0ZUhpc3RvcnkiLCJpbml0aWFsRW50cmllcyIsImluaXRpYWxJbmRleCIsIm51bWJlciIsImtleUxlbmd0aCIsImlzYXJyYXkiLCJwYXJzZSIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwic3RyIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsIm0iLCJlc2NhcGVkIiwib2Zmc2V0IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsInRvVXBwZXJDYXNlIiwiZW5jb2RlQXN0ZXJpc2siLCJtYXRjaGVzIiwiZGF0YSIsImVuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRva2VuIiwic2VnbWVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJqIiwiYXR0YWNoS2V5cyIsImZsYWdzIiwicmVnZXhwVG9SZWdleHAiLCJncm91cHMiLCJhcnJheVRvUmVnZXhwIiwicGFydHMiLCJyZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsImVuZHNXaXRoRGVsaW1pdGVyIiwiUHJvbXB0IiwiZW5hYmxlIiwidW5ibG9jayIsImJsb2NrIiwiZGlzYWJsZSIsIndoZW4iLCJSZWRpcmVjdCIsImlzU3RhdGljIiwicGVyZm9ybSIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwicHJldlRvIiwibmV4dFRvIiwiY29tcHV0ZVRvIiwiYWRkQmFzZW5hbWUiLCJiYXNlbmFtZSIsImJhc2UiLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIlN0YXRpY1JvdXRlciIsImhhbmRsZVB1c2giLCJoYW5kbGVSZXBsYWNlIiwiX3RoaXMkcHJvcHMyIiwiaGFuZGxlTGlzdGVuIiwiaGFuZGxlQmxvY2siLCJnbyIsImdvQmFjayIsImdvRm9yd2FyZCIsIlN3aXRjaCIsImNoaWxkIiwiZWxlbWVudCIsIl9lbGVtZW50JHByb3BzIiwicGF0aFByb3AiLCJjbG9uZUVsZW1lbnQiLCJ3aXRoUm91dGVyIiwiQyIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsInJvdXRlQ29tcG9uZW50UHJvcHMiLCJkaXNwbGF5TmFtZSIsIldyYXBwZWRDb21wb25lbnQiLCJob2lzdFN0YXRpY3MiLCJfaW5oZXJpdHNMb29zZSIsInN1YnNjcmlwdGlvblNoYXBlIiwidHJ5U3Vic2NyaWJlIiwidHJ5VW5zdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwic3RvcmVTaGFwZSIsImhvdFJlbG9hZGluZ1ZlcnNpb24iLCJkdW1teVN0YXRlIiwibWFrZVNlbGVjdG9yU3RhdGVmdWwiLCJzb3VyY2VTZWxlY3RvciIsInNlbGVjdG9yIiwicnVuQ29tcG9uZW50U2VsZWN0b3IiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJjb25uZWN0QWR2YW5jZWQiLCJzZWxlY3RvckZhY3RvcnkiLCJfY29udGV4dFR5cGVzIiwiX2NoaWxkQ29udGV4dFR5cGVzIiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJfcmVmMiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmMiRzaG91bGRIYW5kbGVTdGEiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJfcmVmMiRzdG9yZUtleSIsInN0b3JlS2V5IiwiX3JlZjIkd2l0aFJlZiIsIndpdGhSZWYiLCJjb25uZWN0T3B0aW9ucyIsInN1YnNjcmlwdGlvbktleSIsIndyYXBXaXRoQ29ubmVjdCIsImlzVmFsaWRFbGVtZW50VHlwZSIsIndyYXBwZWRDb21wb25lbnROYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsIkNvbm5lY3QiLCJfQ29tcG9uZW50IiwicmVuZGVyQ291bnQiLCJwcm9wc01vZGUiLCJCb29sZWFuIiwic2V0V3JhcHBlZEluc3RhbmNlIiwiYmluZCIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJpbml0U2VsZWN0b3IiLCJpbml0U3Vic2NyaXB0aW9uIiwiX3Byb3RvIiwiX3JlZjMiLCJzdWJzY3JpcHRpb24iLCJmb3JjZVVwZGF0ZSIsImdldFdyYXBwZWRJbnN0YW5jZSIsIndyYXBwZWRJbnN0YW5jZSIsInBhcmVudFN1YiIsIlN1YnNjcmlwdGlvbiIsIm9uU3RhdGVDaGFuZ2UiLCJub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUiLCJhZGRFeHRyYVByb3BzIiwid2l0aEV4dHJhcyIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJvbGRMaXN0ZW5lcnMiLCJnZXQiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJpbml0Q29uc3RhbnRTZWxlY3RvciIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwiaW5pdFByb3h5U2VsZWN0b3IiLCJwcm94eSIsIm1hcFRvUHJvcHNQcm94eSIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwiZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSIsInZlcmlmeVBsYWluT2JqZWN0IiwiZmV0Y2hQb3B1bGFyUmVwb3MiLCJsYW5ndWFnZSIsImVuY29kZWRVUkkiLCJmZXRjaCIsImpzb24iLCJyZXBvcyIsIml0ZW1zIiwid2FybiIsImZldGNoVXNlciIsInVzZXIiLCJfX1BSRUxPQURFRF9TVEFURV9fIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsImh5ZHJhdGUiLCJfX0lOSVRJQUxfREFUQV9fIiwiZ2V0RWxlbWVudEJ5SWQiLCJrIiwicCIsInEiLCJyIiwidCIsInUiLCJ2IiwidyIsInkiLCJ6IiwiQSIsIkIiLCJhYSIsImciLCJoIiwibCIsIkQiLCJFIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkYiLCJHIiwicmVmcyIsInVwZGF0ZXIiLCJpc1JlYWN0Q29tcG9uZW50IiwiSCIsIkkiLCJKIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJLIiwiY3VycmVudCIsImN1cnJlbnREaXNwYXRjaGVyIiwiTCIsIk0iLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk4iLCJfb3duZXIiLCJiYSIsIk8iLCJlc2NhcGUiLCJQIiwiUSIsIlIiLCJrZXlQcmVmaXgiLCJTIiwiVCIsIlUiLCJkb25lIiwiViIsImNhIiwiZGEiLCJXIiwiWCIsInRvQXJyYXkiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImZvcndhcmRSZWYiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImNvbXBhcmUiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJ1bnN0YWJsZV9Db25jdXJyZW50TW9kZSIsIlN1c3BlbnNlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJjcmVhdGVGYWN0b3J5IiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsIlkiLCJaIiwiX2Fzc2lnbiIsIlJlYWN0VmVyc2lvbiIsImhhc1N5bWJvbCIsIlJFQUNUX1BPUlRBTF9UWVBFIiwiUkVBQ1RfRlJBR01FTlRfVFlQRSIsIlJFQUNUX1NUUklDVF9NT0RFX1RZUEUiLCJSRUFDVF9QUk9GSUxFUl9UWVBFIiwiUkVBQ1RfUFJPVklERVJfVFlQRSIsIlJFQUNUX0NPTlRFWFRfVFlQRSIsIlJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFIiwiUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX1RZUEUiLCJSRUFDVF9NRU1PX1RZUEUiLCJSRUFDVF9MQVpZX1RZUEUiLCJNQVlCRV9JVEVSQVRPUl9TWU1CT0wiLCJGQVVYX0lURVJBVE9SX1NZTUJPTCIsImdldEl0ZXJhdG9yRm4iLCJtYXliZUl0ZXJhYmxlIiwibWF5YmVJdGVyYXRvciIsInZhbGlkYXRlRm9ybWF0IiwibG93UHJpb3JpdHlXYXJuaW5nIiwiX2xlbjIiLCJfa2V5MiIsImxvd1ByaW9yaXR5V2FybmluZyQxIiwid2FybmluZ1dpdGhvdXRTdGFjayIsIl9hcmdzJG1hcCIsIl9tZXNzYWdlIiwid2FybmluZ1dpdGhvdXRTdGFjayQxIiwiZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50Iiwid2Fybk5vb3AiLCJwdWJsaWNJbnN0YW5jZSIsImNhbGxlck5hbWUiLCJfY29uc3RydWN0b3IiLCJ3YXJuaW5nS2V5IiwiUmVhY3ROb29wVXBkYXRlUXVldWUiLCJjb21wbGV0ZVN0YXRlIiwicGFydGlhbFN0YXRlIiwiZW1wdHlPYmplY3QiLCJmcmVlemUiLCJkZXByZWNhdGVkQVBJcyIsInJlcGxhY2VTdGF0ZSIsImRlZmluZURlcHJlY2F0aW9uV2FybmluZyIsImluZm8iLCJmbk5hbWUiLCJDb21wb25lbnREdW1teSIsInB1cmVDb21wb25lbnRQcm90b3R5cGUiLCJyZWZPYmplY3QiLCJzZWFsIiwiQkVGT1JFX1NMQVNIX1JFIiwiZGVzY3JpYmVDb21wb25lbnRGcmFtZSIsIm93bmVyTmFtZSIsInNvdXJjZUluZm8iLCJmaWxlTmFtZSIsInBhdGhCZWZvcmVTbGFzaCIsImZvbGRlck5hbWUiLCJsaW5lTnVtYmVyIiwiUmVzb2x2ZWQiLCJyZWZpbmVSZXNvbHZlZExhenlDb21wb25lbnQiLCJsYXp5Q29tcG9uZW50IiwiZ2V0V3JhcHBlZE5hbWUiLCJvdXRlclR5cGUiLCJpbm5lclR5cGUiLCJ3cmFwcGVyTmFtZSIsImZ1bmN0aW9uTmFtZSIsImdldENvbXBvbmVudE5hbWUiLCJ0YWciLCJ0aGVuYWJsZSIsInJlc29sdmVkVGhlbmFibGUiLCJSZWFjdERlYnVnQ3VycmVudEZyYW1lIiwiY3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQiLCJzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCIsImdldEN1cnJlbnRTdGFjayIsImdldFN0YWNrQWRkZW5kdW0iLCJvd25lciIsIl9zb3VyY2UiLCJpbXBsIiwiUmVhY3RTaGFyZWRJbnRlcm5hbHMiLCJSZWFjdENvbXBvbmVudFRyZWVIb29rIiwid2FybmluZyQxIiwiUkVTRVJWRURfUFJPUFMiLCJzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biIsInNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duIiwiaGFzVmFsaWRSZWYiLCJjb25maWciLCJnZXR0ZXIiLCJpc1JlYWN0V2FybmluZyIsImhhc1ZhbGlkS2V5IiwiZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIiLCJ3YXJuQWJvdXRBY2Nlc3NpbmdLZXkiLCJkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlciIsIndhcm5BYm91dEFjY2Vzc2luZ1JlZiIsIlJlYWN0RWxlbWVudCIsIl9zdG9yZSIsInByb3BOYW1lIiwiY2hpbGRyZW5MZW5ndGgiLCJjaGlsZEFycmF5IiwiY2xvbmVBbmRSZXBsYWNlS2V5Iiwib2xkRWxlbWVudCIsIm5ld0tleSIsIm5ld0VsZW1lbnQiLCJfc2VsZiIsIlNFUEFSQVRPUiIsIlNVQlNFUEFSQVRPUiIsImVzY2FwZVJlZ2V4IiwiZXNjYXBlckxvb2t1cCIsImVzY2FwZWRTdHJpbmciLCJkaWRXYXJuQWJvdXRNYXBzIiwidXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgiLCJlc2NhcGVVc2VyUHJvdmlkZWRLZXkiLCJQT09MX1NJWkUiLCJ0cmF2ZXJzZUNvbnRleHRQb29sIiwiZ2V0UG9vbGVkVHJhdmVyc2VDb250ZXh0IiwibWFwUmVzdWx0IiwibWFwRnVuY3Rpb24iLCJtYXBDb250ZXh0IiwidHJhdmVyc2VDb250ZXh0IiwicmVsZWFzZVRyYXZlcnNlQ29udGV4dCIsInRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsIiwibmFtZVNvRmFyIiwiaW52b2tlQ2FsbGJhY2siLCJnZXRDb21wb25lbnRLZXkiLCJuZXh0TmFtZSIsInN1YnRyZWVDb3VudCIsIm5leHROYW1lUHJlZml4IiwiaXRlcmF0b3JGbiIsImVudHJpZXMiLCJzdGVwIiwiaWkiLCJhZGRlbmR1bSIsImNoaWxkcmVuU3RyaW5nIiwidHJhdmVyc2VBbGxDaGlsZHJlbiIsImZvckVhY2hTaW5nbGVDaGlsZCIsImJvb2tLZWVwaW5nIiwiZm9yRWFjaENoaWxkcmVuIiwiZm9yRWFjaEZ1bmMiLCJmb3JFYWNoQ29udGV4dCIsIm1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQiLCJjaGlsZEtleSIsIm1hcHBlZENoaWxkIiwibWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbCIsImVzY2FwZWRQcmVmaXgiLCJtYXBDaGlsZHJlbiIsImNvdW50Q2hpbGRyZW4iLCJvbmx5Q2hpbGQiLCJkZWZhdWx0VmFsdWUiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsImhhc1dhcm5lZEFib3V0VXNpbmdOZXN0ZWRDb250ZXh0Q29uc3VtZXJzIiwiaGFzV2FybmVkQWJvdXRVc2luZ0NvbnN1bWVyUHJvdmlkZXIiLCJkZWZpbmVQcm9wZXJ0aWVzIiwic2V0IiwiX1Byb3ZpZGVyIiwiX2N1cnJlbnRSZW5kZXJlciIsIl9jdXJyZW50UmVuZGVyZXIyIiwiY3RvciIsInByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duIiwiZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtIiwiZ2V0U291cmNlSW5mb0Vycm9yQWRkZW5kdW0iLCJlbGVtZW50UHJvcHMiLCJvd25lckhhc0tleVVzZVdhcm5pbmciLCJnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvIiwicGFyZW50VHlwZSIsInBhcmVudE5hbWUiLCJ2YWxpZGF0ZUV4cGxpY2l0S2V5IiwidmFsaWRhdGVkIiwiY3VycmVudENvbXBvbmVudEVycm9ySW5mbyIsImNoaWxkT3duZXIiLCJ2YWxpZGF0ZUNoaWxkS2V5cyIsInZhbGlkYXRlUHJvcFR5cGVzIiwiZ2V0RGVmYXVsdFByb3BzIiwiaXNSZWFjdENsYXNzQXBwcm92ZWQiLCJ2YWxpZGF0ZUZyYWdtZW50UHJvcHMiLCJmcmFnbWVudCIsImNyZWF0ZUVsZW1lbnRXaXRoVmFsaWRhdGlvbiIsInZhbGlkVHlwZSIsInR5cGVTdHJpbmciLCJjcmVhdGVGYWN0b3J5V2l0aFZhbGlkYXRpb24iLCJ2YWxpZGF0ZWRGYWN0b3J5IiwiY2xvbmVFbGVtZW50V2l0aFZhbGlkYXRpb24iLCJSZWFjdCQyIiwiUmVhY3QkMyIsInJlYWN0IiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlYSIsImZhIiwib25FcnJvciIsImhhIiwiaWEiLCJqYSIsImthIiwibGEiLCJtYSIsIm5hIiwib2EiLCJwYSIsInFhIiwicmEiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInNhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJ0YSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ2YSIsImRlcGVuZGVuY2llcyIsIndhIiwieGEiLCJ5YSIsInphIiwiY3VycmVudFRhcmdldCIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiRWEiLCJGYSIsIkdhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkhhIiwic3RhdGVOb2RlIiwiZGlzYWJsZWQiLCJJYSIsIkthIiwiTGEiLCJNYSIsIk5hIiwicGFyZW50Tm9kZSIsIk9hIiwiUGEiLCJRYSIsIlJhIiwicmV0dXJuIiwiU2EiLCJkaXNwYXRjaENvbmZpZyIsIlRhIiwiX3RhcmdldEluc3QiLCJVYSIsIlZhIiwiV2EiLCJYYSIsIllhIiwidG9Mb3dlckNhc2UiLCJaYSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIiRhIiwiYWIiLCJzdHlsZSIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJiYiIsImNiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJwYiIsInRleHRDb250ZW50IiwicWIiLCJyYiIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZGVzdHJ1Y3RvciIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJub3ciLCJpc1RydXN0ZWQiLCJleHRlbmQiLCJzYiIsInRiIiwiZXZlbnRQb29sIiwidWIiLCJnZXRQb29sZWQiLCJ2YiIsIndiIiwieGIiLCJ5YiIsInpiIiwiZG9jdW1lbnRNb2RlIiwiQWIiLCJCYiIsIkNiIiwiRGIiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiRWIiLCJGYiIsImtleUNvZGUiLCJHYiIsImRldGFpbCIsIkhiIiwiS2IiLCJ3aGljaCIsIkxiIiwiY2hhciIsImxvY2FsZSIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiVmIiLCJXYiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInRlbCIsInRpbWUiLCJ3ZWVrIiwiZGMiLCJub2RlTmFtZSIsImVjIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwibm9kZVR5cGUiLCJmYyIsInNldEF0dHJpYnV0ZSIsImdjIiwiaGMiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiX3ZhbHVlVHJhY2tlciIsImljIiwiamMiLCJjaGVja2VkIiwia2MiLCJsYyIsIm1jIiwibmMiLCJvYyIsInBjIiwicWMiLCJyYyIsInNjIiwidGMiLCJ1YyIsInZjIiwid2MiLCJ4YyIsInljIiwiemMiLCJBYyIsIkJjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJhY2NlcHRzQm9vbGVhbnMiLCJJYyIsImlzTmFOIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsIk1jIiwiTmMiLCJ0YWJJbmRleCIsIk9jIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJQYyIsIlFjIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJSYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJTYyIsIlRjIiwiVWMiLCJiZCIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiY2QiLCJjaGFuZ2UiLCJkZCIsImVkIiwiZmQiLCJnZCIsImhkIiwiaWQiLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJwZCIsInFkIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsInJkIiwidmlldyIsInNkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsInRkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInVkIiwidmQiLCJ3ZCIsInhkIiwieWQiLCJ6ZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkFkIiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiQmQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsIkNkIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJhbHRlcm5hdGUiLCJEZCIsIkVkIiwiRmQiLCJHZCIsImVmZmVjdFRhZyIsIkhkIiwiSWQiLCJzaWJsaW5nIiwiSmQiLCJLZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJMZCIsImNsaXBib2FyZERhdGEiLCJNZCIsIk5kIiwiY2hhckNvZGUiLCJPZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJQZCIsIlFkIiwiUmQiLCJkYXRhVHJhbnNmZXIiLCJTZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJUZCIsIlVkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJWZCIsIldkIiwiWGQiLCJZZCIsImlzSW50ZXJhY3RpdmUiLCJaZCIsImlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSIsIiRkIiwiYWUiLCJiZSIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJjb250YWluZXJJbmZvIiwidG9wTGV2ZWxUeXBlIiwiY2UiLCJkZSIsImVlIiwiZ2UiLCJoZSIsImllIiwiamUiLCJrZSIsImxlIiwiYm9keSIsIm1lIiwiZmlyc3RDaGlsZCIsIm5lIiwibmV4dFNpYmxpbmciLCJvZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJwZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwicWUiLCJjb250ZW50RWRpdGFibGUiLCJzZSIsInNlbGVjdCIsInRlIiwidWUiLCJIZSIsIkllIiwiSmUiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiS2UiLCJvblNlbGVjdCIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJMZSIsIk1lIiwiTmUiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsIk9lIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJQZSIsIlFlIiwiUmUiLCJTZSIsImh0bWwiLCJtYXRobWwiLCJzdmciLCJUZSIsIlVlIiwiVmUiLCJXZSIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiWGUiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJZZSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiWmUiLCIkZSIsInRyaW0iLCJzZXRQcm9wZXJ0eSIsImFmIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJiZiIsImNmIiwiaXMiLCJkZiIsImJsdXIiLCJmb2N1cyIsImVmIiwiZmYiLCJnZiIsImhmIiwiYXV0b0ZvY3VzIiwiamYiLCJfX2h0bWwiLCJrZiIsImxmIiwibWYiLCJuZiIsIlNldCIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJ0ZiIsInVmIiwidmYiLCJ3ZiIsInhmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiRGYiLCJlbGVtZW50VHlwZSIsInBlbmRpbmdQcm9wcyIsImZpcnN0Q29udGV4dERlcGVuZGVuY3kiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibW9kZSIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJFZiIsIkZmIiwiR2YiLCJIZiIsIklmIiwiSmYiLCJLZiIsIkxmIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJNZiIsImRpZEVycm9yIiwiZWFybGllc3RQZW5kaW5nVGltZSIsImxhdGVzdFBlbmRpbmdUaW1lIiwiTmYiLCJPZiIsImxhdGVzdFBpbmdlZFRpbWUiLCJlYXJsaWVzdFN1c3BlbmRlZFRpbWUiLCJsYXRlc3RTdXNwZW5kZWRUaW1lIiwiUGYiLCJuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbiIsIlFmIiwiUmYiLCJiYXNlU3RhdGUiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsIlNmIiwiVGYiLCJwYXlsb2FkIiwiVWYiLCJWZiIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsIm9ic2VydmVkQml0cyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwieWciLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwidmciLCJ3ZyIsInhnIiwiemciLCJBZyIsImNvbnRleHRUeXBlIiwicmVhZENvbnRleHQiLCJCZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiQ2ciLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJEZyIsIkVnIiwiX3N0cmluZ1JlZiIsIkZnIiwiR2ciLCJkZWxldGUiLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiU2ciLCJUZyIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJhaCIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImJoIiwicGVuZGluZ0NvbnRleHQiLCJjaCIsImRoIiwiYWxyZWFkeUNhcHR1cmVkIiwiZGlkVGltZW91dCIsInRpbWVkT3V0QXQiLCJmYWxsYmFjayIsImVoIiwiaGlkZGVuIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIm9uY2xpY2siLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJMaCIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJNaCIsIk5oIiwiT2giLCJjb21wb25lbnREaWRDYXRjaCIsIlBoIiwiYWRkIiwiY29tcG9uZW50U3RhY2siLCJRaCIsIlJoIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJhaSIsImJpIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiY2kiLCJtYXhEdXJhdGlvbiIsImRpIiwiaGFzIiwiZmluaXNoZWRXb3JrIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJqaSIsImtpIiwibGkiLCJtaSIsIm5pIiwib2kiLCJwaSIsInFpIiwicmkiLCJzaSIsInRpIiwidWkiLCJ1bnN0YWJsZV9ub3ciLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJCaSIsInRpbWVvdXRIYW5kbGUiLCJDaSIsIkRpIiwiRWkiLCJuZXh0U2NoZWR1bGVkUm9vdCIsIkZpIiwiR2kiLCJfb25Db21wbGV0ZSIsIkhpIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInJhbmdlQ291bnQiLCJmZSIsImRiIiwiSWIiLCJKYyIsIktjIiwiTmkiLCJPaSIsIkpiIiwiTGMiLCJmaCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJnaCIsImhoIiwidmUiLCJRYiIsIlppIiwiJGkiLCJWYyIsImFqIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJpaCIsImpoIiwid2UiLCJraCIsIldjIiwibGgiLCJSYiIsIm1oIiwiYmoiLCJlYiIsIm5oIiwieGUiLCJtaW4iLCJ5ZSIsIm9oIiwiZmIiLCJTYiIsImNqIiwiVGIiLCJKYSIsIlhjIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiemUiLCJnYiIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiQWUiLCJZYyIsInBoIiwicWgiLCJkaiIsInJoIiwiWmMiLCJoYiIsInNoIiwiZWoiLCJmaiIsInRoIiwidWgiLCJCZSIsImdqIiwidmgiLCJVYiIsImhqIiwiQ2UiLCJEZSIsIndoIiwiaWoiLCJkaXNwbGF5IiwiamoiLCIkYyIsImtqIiwiYWQiLCJ4aCIsIkVlIiwibGoiLCJGZSIsIkdlIiwieWgiLCJ0aW1lUmVtYWluaW5nIiwiSWkiLCJKaSIsIktpIiwiTGkiLCJNaSIsIlBpIiwiUWkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIlJpIiwiX3Jvb3QiLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJfaW50ZXJuYWxSb290IiwiU2kiLCJfb25Db21taXQiLCJjb21taXQiLCJfZGlkQ29tbWl0IiwiVGkiLCJ1bm1vdW50IiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY3JlYXRlQmF0Y2giLCJVaSIsIlZpIiwiaGFzQXR0cmlidXRlIiwiV2kiLCJYaSIsIllpIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlcyIsImZsdXNoU3luYyIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50cyIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJtaiIsIm5qIiwicGVyZm9ybWFuY2UiLCJwcmV2aW91cyIsInByaW9yaXR5TGV2ZWwiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIl9zY2hlZE1vY2siLCJJbmZpbml0eSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJJbW1lZGlhdGVQcmlvcml0eSIsIlVzZXJCbG9ja2luZ1ByaW9yaXR5IiwiTm9ybWFsUHJpb3JpdHkiLCJJZGxlUHJpb3JpdHkiLCJtYXhTaWduZWQzMUJpdEludCIsIklNTUVESUFURV9QUklPUklUWV9USU1FT1VUIiwiVVNFUl9CTE9DS0lOR19QUklPUklUWSIsIk5PUk1BTF9QUklPUklUWV9USU1FT1VUIiwiSURMRV9QUklPUklUWSIsImZpcnN0Q2FsbGJhY2tOb2RlIiwiY3VycmVudFByaW9yaXR5TGV2ZWwiLCJjdXJyZW50RXZlbnRTdGFydFRpbWUiLCJjdXJyZW50RXhwaXJhdGlvblRpbWUiLCJpc0V4ZWN1dGluZ0NhbGxiYWNrIiwiaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQiLCJoYXNOYXRpdmVQZXJmb3JtYW5jZU5vdyIsInJlbWFpbmluZyIsImdldEZyYW1lRGVhZGxpbmUiLCJkZWFkbGluZU9iamVjdCIsImVuc3VyZUhvc3RDYWxsYmFja0lzU2NoZWR1bGVkIiwiY2FuY2VsSG9zdENhbGxiYWNrIiwicmVxdWVzdEhvc3RDYWxsYmFjayIsImZsdXNoV29yayIsImZsdXNoRmlyc3RDYWxsYmFjayIsImZsdXNoZWROb2RlIiwibGFzdENhbGxiYWNrTm9kZSIsInByZXZpb3VzUHJpb3JpdHlMZXZlbCIsInByZXZpb3VzRXhwaXJhdGlvblRpbWUiLCJjb250aW51YXRpb25DYWxsYmFjayIsImNvbnRpbnVhdGlvbk5vZGUiLCJuZXh0QWZ0ZXJDb250aW51YXRpb24iLCJmbHVzaEltbWVkaWF0ZVdvcmsiLCJjdXJyZW50VGltZSIsImV2ZW50SGFuZGxlciIsInByZXZpb3VzRXZlbnRTdGFydFRpbWUiLCJwYXJlbnRQcmlvcml0eUxldmVsIiwiZGVwcmVjYXRlZF9vcHRpb25zIiwic3RhcnRUaW1lIiwibmV3Tm9kZSIsImNhbGxiYWNrTm9kZSIsImxvY2FsRGF0ZSIsImxvY2FsU2V0VGltZW91dCIsImxvY2FsQ2xlYXJUaW1lb3V0IiwibG9jYWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJsb2NhbENhbmNlbEFuaW1hdGlvbkZyYW1lIiwiQU5JTUFUSU9OX0ZSQU1FX1RJTUVPVVQiLCJyQUZJRCIsInJBRlRpbWVvdXRJRCIsInJlcXVlc3RBbmltYXRpb25GcmFtZVdpdGhUaW1lb3V0IiwidGltZXN0YW1wIiwiUGVyZm9ybWFuY2UiLCJfY2FsbGJhY2siLCJfY3VycmVudFRpbWUiLCJfZmx1c2hDYWxsYmFjayIsIm1zIiwic2NoZWR1bGVkSG9zdENhbGxiYWNrIiwiaXNNZXNzYWdlRXZlbnRTY2hlZHVsZWQiLCJ0aW1lb3V0VGltZSIsImlzQW5pbWF0aW9uRnJhbWVTY2hlZHVsZWQiLCJpc0ZsdXNoaW5nSG9zdENhbGxiYWNrIiwiZnJhbWVEZWFkbGluZSIsInByZXZpb3VzRnJhbWVUaW1lIiwiYWN0aXZlRnJhbWVUaW1lIiwibWVzc2FnZUtleSIsImlkbGVUaWNrIiwicHJldlNjaGVkdWxlZENhbGxiYWNrIiwicHJldlRpbWVvdXRUaW1lIiwiYW5pbWF0aW9uVGljayIsInJhZlRpbWUiLCJuZXh0RnJhbWVUaW1lIiwiYWJzb2x1dGVUaW1lb3V0Iiwic2NoZWR1bGVyIiwidHJhY2luZyIsImludm9rZUd1YXJkZWRDYWxsYmFja0ltcGwiLCJmdW5jQXJncyIsImRpc3BhdGNoRXZlbnQiLCJjcmVhdGVFdmVudCIsImZha2VOb2RlIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrRGV2IiwiZXZ0Iiwid2luZG93RXZlbnQiLCJ3aW5kb3dFdmVudERlc2NyaXB0b3IiLCJjYWxsQ2FsbGJhY2siLCJldnRUeXBlIiwiZGlkU2V0RXJyb3IiLCJpc0Nyb3NzT3JpZ2luRXJyb3IiLCJoYW5kbGVXaW5kb3dFcnJvciIsImNvbG5vIiwibGluZW5vIiwiX3N1cHByZXNzTG9nZ2luZyIsImlubmVyIiwiaW5pdEV2ZW50IiwiaW52b2tlR3VhcmRlZENhbGxiYWNrSW1wbCQxIiwiaGFzRXJyb3IiLCJjYXVnaHRFcnJvciIsImhhc1JldGhyb3dFcnJvciIsInJldGhyb3dFcnJvciIsInJlcG9ydGVyIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsImhhc0NhdWdodEVycm9yIiwiZXZlbnRQbHVnaW5PcmRlciIsIm5hbWVzVG9QbHVnaW5zIiwicmVjb21wdXRlUGx1Z2luT3JkZXJpbmciLCJwbHVnaW5OYW1lIiwicGx1Z2luTW9kdWxlIiwicGx1Z2luSW5kZXgiLCJwbHVnaW5zIiwicHVibGlzaGVkRXZlbnRzIiwiZXZlbnROYW1lIiwicHVibGlzaEV2ZW50Rm9yUGx1Z2luIiwiZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzIiwicGhhc2VOYW1lIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZSIsInB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lIiwicmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwibG93ZXJDYXNlZE5hbWUiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwib25kYmxjbGljayIsImluamVjdGVkRXZlbnRQbHVnaW5PcmRlciIsImluamVjdGVkTmFtZXNUb1BsdWdpbnMiLCJpc09yZGVyaW5nRGlydHkiLCJnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlIiwiZ2V0SW5zdGFuY2VGcm9tTm9kZSIsImdldE5vZGVGcm9tSW5zdGFuY2UiLCJzZXRDb21wb25lbnRUcmVlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZUltcGwiLCJnZXRJbnN0YW5jZUZyb21Ob2RlSW1wbCIsImdldE5vZGVGcm9tSW5zdGFuY2VJbXBsIiwidmFsaWRhdGVFdmVudERpc3BhdGNoZXMiLCJkaXNwYXRjaExpc3RlbmVycyIsImRpc3BhdGNoSW5zdGFuY2VzIiwibGlzdGVuZXJzSXNBcnIiLCJsaXN0ZW5lcnNMZW4iLCJpbnN0YW5jZXNJc0FyciIsImluc3RhbmNlc0xlbiIsImV4ZWN1dGVEaXNwYXRjaCIsInNpbXVsYXRlZCIsImluc3QiLCJleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIiLCJhY2N1bXVsYXRlSW50byIsImZvckVhY2hBY2N1bXVsYXRlZCIsImFyciIsInNjb3BlIiwiZXZlbnRRdWV1ZSIsImV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZSIsImV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVNpbXVsYXRlZCIsImV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVRvcExldmVsIiwic2hvdWxkUHJldmVudE1vdXNlRXZlbnQiLCJpbmplY3Rpb24iLCJnZXRMaXN0ZW5lciIsIm5hdGl2ZUV2ZW50VGFyZ2V0IiwiZXZlbnRzIiwicG9zc2libGVQbHVnaW4iLCJleHRyYWN0ZWRFdmVudHMiLCJydW5FdmVudHNJbkJhdGNoIiwicHJvY2Vzc2luZ0V2ZW50UXVldWUiLCJydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoIiwiRnVuY3Rpb25Db21wb25lbnQiLCJDbGFzc0NvbXBvbmVudCIsIkluZGV0ZXJtaW5hdGVDb21wb25lbnQiLCJIb3N0Um9vdCIsIkhvc3RQb3J0YWwiLCJIb3N0Q29tcG9uZW50IiwiSG9zdFRleHQiLCJNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRm9yd2FyZFJlZiIsIlByb2ZpbGVyIiwiU3VzcGVuc2VDb21wb25lbnQiLCJNZW1vQ29tcG9uZW50IiwiU2ltcGxlTWVtb0NvbXBvbmVudCIsIkxhenlDb21wb25lbnQiLCJJbmNvbXBsZXRlQ2xhc3NDb21wb25lbnQiLCJyYW5kb21LZXkiLCJpbnRlcm5hbEluc3RhbmNlS2V5IiwiaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5IiwicHJlY2FjaGVGaWJlck5vZGUiLCJob3N0SW5zdCIsImdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0SW5zdGFuY2VGcm9tTm9kZSQxIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSQxIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSQxIiwidXBkYXRlRmliZXJQcm9wcyIsImdldFBhcmVudCIsImdldExvd2VzdENvbW1vbkFuY2VzdG9yIiwiaW5zdEEiLCJpbnN0QiIsImRlcHRoQSIsInRlbXBBIiwiZGVwdGhCIiwidGVtcEIiLCJkZXB0aCIsInRyYXZlcnNlVHdvUGhhc2UiLCJ0cmF2ZXJzZUVudGVyTGVhdmUiLCJhcmdGcm9tIiwiYXJnVG8iLCJjb21tb24iLCJwYXRoRnJvbSIsInBhdGhUbyIsIl9hbHRlcm5hdGUiLCJsaXN0ZW5lckF0UGhhc2UiLCJwcm9wYWdhdGlvblBoYXNlIiwiYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyIsInBoYXNlIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZSIsImFjY3VtdWxhdGVEaXNwYXRjaGVzIiwiaWdub3JlZERpcmVjdGlvbiIsImFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsImxlYXZlIiwiZW50ZXIiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsInVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSIsInVuc2FmZUNhc3RET01Ub3BMZXZlbFR5cGVUb1N0cmluZyIsIm1ha2VQcmVmaXhNYXAiLCJzdHlsZVByb3AiLCJwcmVmaXhlcyIsInZlbmRvclByZWZpeGVzIiwicHJlZml4ZWRFdmVudE5hbWVzIiwiZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUiLCJwcmVmaXhNYXAiLCJUT1BfQUJPUlQiLCJUT1BfQU5JTUFUSU9OX0VORCIsIlRPUF9BTklNQVRJT05fSVRFUkFUSU9OIiwiVE9QX0FOSU1BVElPTl9TVEFSVCIsIlRPUF9CTFVSIiwiVE9QX0NBTl9QTEFZIiwiVE9QX0NBTl9QTEFZX1RIUk9VR0giLCJUT1BfQ0FOQ0VMIiwiVE9QX0NIQU5HRSIsIlRPUF9DTElDSyIsIlRPUF9DTE9TRSIsIlRPUF9DT01QT1NJVElPTl9FTkQiLCJUT1BfQ09NUE9TSVRJT05fU1RBUlQiLCJUT1BfQ09NUE9TSVRJT05fVVBEQVRFIiwiVE9QX0NPTlRFWFRfTUVOVSIsIlRPUF9DT1BZIiwiVE9QX0NVVCIsIlRPUF9ET1VCTEVfQ0xJQ0siLCJUT1BfQVVYX0NMSUNLIiwiVE9QX0RSQUciLCJUT1BfRFJBR19FTkQiLCJUT1BfRFJBR19FTlRFUiIsIlRPUF9EUkFHX0VYSVQiLCJUT1BfRFJBR19MRUFWRSIsIlRPUF9EUkFHX09WRVIiLCJUT1BfRFJBR19TVEFSVCIsIlRPUF9EUk9QIiwiVE9QX0RVUkFUSU9OX0NIQU5HRSIsIlRPUF9FTVBUSUVEIiwiVE9QX0VOQ1JZUFRFRCIsIlRPUF9FTkRFRCIsIlRPUF9FUlJPUiIsIlRPUF9GT0NVUyIsIlRPUF9HT1RfUE9JTlRFUl9DQVBUVVJFIiwiVE9QX0lOUFVUIiwiVE9QX0lOVkFMSUQiLCJUT1BfS0VZX0RPV04iLCJUT1BfS0VZX1BSRVNTIiwiVE9QX0tFWV9VUCIsIlRPUF9MT0FEIiwiVE9QX0xPQURfU1RBUlQiLCJUT1BfTE9BREVEX0RBVEEiLCJUT1BfTE9BREVEX01FVEFEQVRBIiwiVE9QX0xPU1RfUE9JTlRFUl9DQVBUVVJFIiwiVE9QX01PVVNFX0RPV04iLCJUT1BfTU9VU0VfTU9WRSIsIlRPUF9NT1VTRV9PVVQiLCJUT1BfTU9VU0VfT1ZFUiIsIlRPUF9NT1VTRV9VUCIsIlRPUF9QQVNURSIsIlRPUF9QQVVTRSIsIlRPUF9QTEFZIiwiVE9QX1BMQVlJTkciLCJUT1BfUE9JTlRFUl9DQU5DRUwiLCJUT1BfUE9JTlRFUl9ET1dOIiwiVE9QX1BPSU5URVJfTU9WRSIsIlRPUF9QT0lOVEVSX09VVCIsIlRPUF9QT0lOVEVSX09WRVIiLCJUT1BfUE9JTlRFUl9VUCIsIlRPUF9QUk9HUkVTUyIsIlRPUF9SQVRFX0NIQU5HRSIsIlRPUF9SRVNFVCIsIlRPUF9TQ1JPTEwiLCJUT1BfU0VFS0VEIiwiVE9QX1NFRUtJTkciLCJUT1BfU0VMRUNUSU9OX0NIQU5HRSIsIlRPUF9TVEFMTEVEIiwiVE9QX1NVQk1JVCIsIlRPUF9TVVNQRU5EIiwiVE9QX1RFWFRfSU5QVVQiLCJUT1BfVElNRV9VUERBVEUiLCJUT1BfVE9HR0xFIiwiVE9QX1RPVUNIX0NBTkNFTCIsIlRPUF9UT1VDSF9FTkQiLCJUT1BfVE9VQ0hfTU9WRSIsIlRPUF9UT1VDSF9TVEFSVCIsIlRPUF9UUkFOU0lUSU9OX0VORCIsIlRPUF9WT0xVTUVfQ0hBTkdFIiwiVE9QX1dBSVRJTkciLCJUT1BfV0hFRUwiLCJtZWRpYUV2ZW50VHlwZXMiLCJnZXRSYXdFdmVudE5hbWUiLCJyb290Iiwic3RhcnRUZXh0IiwiZmFsbGJhY2tUZXh0IiwiaW5pdGlhbGl6ZSIsImdldFRleHQiLCJyZXNldCIsImdldERhdGEiLCJzdGFydFZhbHVlIiwic3RhcnRMZW5ndGgiLCJlbmRWYWx1ZSIsImVuZExlbmd0aCIsIm1pbkVuZCIsInNsaWNlVGFpbCIsIkVWRU5UX1BPT0xfU0laRSIsIkV2ZW50SW50ZXJmYWNlIiwiZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUiLCJmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2UiLCJTeW50aGV0aWNFdmVudCIsIm5vcm1hbGl6ZSIsImdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24iLCJTdXBlciIsIkNsYXNzIiwiYWRkRXZlbnRQb29saW5nVG8iLCJnZXRWYWwiLCJpc0Z1bmN0aW9uIiwid2FybmluZ0NvbmRpdGlvbiIsImdldFBvb2xlZEV2ZW50IiwibmF0aXZlSW5zdCIsIkV2ZW50Q29uc3RydWN0b3IiLCJyZWxlYXNlUG9vbGVkRXZlbnQiLCJTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50IiwiU3ludGhldGljSW5wdXRFdmVudCIsIkVORF9LRVlDT0RFUyIsIlNUQVJUX0tFWUNPREUiLCJjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IiwiY2FuVXNlVGV4dElucHV0RXZlbnQiLCJ1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSIsIlNQQUNFQkFSX0NPREUiLCJTUEFDRUJBUl9DSEFSIiwiaGFzU3BhY2VLZXlwcmVzcyIsImlzS2V5cHJlc3NDb21tYW5kIiwiZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUiLCJpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCIsImlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCIsImdldERhdGFGcm9tQ3VzdG9tRXZlbnQiLCJpc1VzaW5nS29yZWFuSU1FIiwiaXNDb21wb3NpbmciLCJleHRyYWN0Q29tcG9zaXRpb25FdmVudCIsImV2ZW50VHlwZSIsImZhbGxiYWNrRGF0YSIsImN1c3RvbURhdGEiLCJnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzIiwiY2hhcnMiLCJnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMiLCJleHRyYWN0QmVmb3JlSW5wdXRFdmVudCIsImNvbXBvc2l0aW9uIiwicmVzdG9yZUltcGwiLCJyZXN0b3JlVGFyZ2V0IiwicmVzdG9yZVF1ZXVlIiwicmVzdG9yZVN0YXRlT2ZUYXJnZXQiLCJpbnRlcm5hbEluc3RhbmNlIiwic2V0UmVzdG9yZUltcGxlbWVudGF0aW9uIiwiZW5xdWV1ZVN0YXRlUmVzdG9yZSIsIm5lZWRzU3RhdGVSZXN0b3JlIiwicmVzdG9yZVN0YXRlSWZOZWVkZWQiLCJxdWV1ZWRUYXJnZXRzIiwiX2JhdGNoZWRVcGRhdGVzSW1wbCIsImJvb2trZWVwaW5nIiwiX2ludGVyYWN0aXZlVXBkYXRlc0ltcGwiLCJfZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXNJbXBsIiwiaXNCYXRjaGluZyIsImJhdGNoZWRVcGRhdGVzIiwiY29udHJvbGxlZENvbXBvbmVudHNIYXZlUGVuZGluZ1VwZGF0ZXMiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMiLCJzZXRCYXRjaGluZ0ltcGxlbWVudGF0aW9uIiwiYmF0Y2hlZFVwZGF0ZXNJbXBsIiwiaW50ZXJhY3RpdmVVcGRhdGVzSW1wbCIsImZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzSW1wbCIsInN1cHBvcnRlZElucHV0VHlwZXMiLCJpc1RleHRJbnB1dEVsZW1lbnQiLCJlbGVtIiwiRUxFTUVOVF9OT0RFIiwiVEVYVF9OT0RFIiwiQ09NTUVOVF9OT0RFIiwiRE9DVU1FTlRfTk9ERSIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiLCJnZXRFdmVudFRhcmdldCIsImlzRXZlbnRTdXBwb3J0ZWQiLCJldmVudE5hbWVTdWZmaXgiLCJpc1N1cHBvcnRlZCIsImlzQ2hlY2thYmxlIiwiZ2V0VHJhY2tlciIsImRldGFjaFRyYWNrZXIiLCJnZXRWYWx1ZUZyb21Ob2RlIiwidHJhY2tWYWx1ZU9uTm9kZSIsInZhbHVlRmllbGQiLCJkZXNjcmlwdG9yIiwiY3VycmVudFZhbHVlIiwidHJhY2tlciIsInVwZGF0ZVZhbHVlSWZDaGFuZ2VkIiwibGFzdFZhbHVlIiwibmV4dFZhbHVlIiwiUGVuZGluZyIsIlJlamVjdGVkIiwiZGVzY3JpYmVGaWJlciIsImZpYmVyIiwiZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kIiwid29ya0luUHJvZ3Jlc3MiLCJnZXRDdXJyZW50RmliZXJPd25lck5hbWVJbkRldk9yTnVsbCIsImdldEN1cnJlbnRGaWJlclN0YWNrSW5EZXYiLCJyZXNldEN1cnJlbnRGaWJlciIsInNldEN1cnJlbnRGaWJlciIsInNldEN1cnJlbnRQaGFzZSIsImxpZmVDeWNsZVBoYXNlIiwiUkVTRVJWRUQiLCJTVFJJTkciLCJCT09MRUFOSVNIX1NUUklORyIsIkJPT0xFQU4iLCJPVkVSTE9BREVEX0JPT0xFQU4iLCJOVU1FUklDIiwiUE9TSVRJVkVfTlVNRVJJQyIsIkFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIiLCJBVFRSSUJVVEVfTkFNRV9DSEFSIiwiUk9PVF9BVFRSSUJVVEVfTkFNRSIsIlZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYIiwiaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSIsInZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSIsImlzQXR0cmlidXRlTmFtZVNhZmUiLCJzaG91bGRJZ25vcmVBdHRyaWJ1dGUiLCJwcm9wZXJ0eUluZm8iLCJpc0N1c3RvbUNvbXBvbmVudFRhZyIsInNob3VsZFJlbW92ZUF0dHJpYnV0ZVdpdGhXYXJuaW5nIiwic2hvdWxkUmVtb3ZlQXR0cmlidXRlIiwiZ2V0UHJvcGVydHlJbmZvIiwicHJvcGVydGllcyIsIlByb3BlcnR5SW5mb1JlY29yZCIsIkNBTUVMSVpFIiwiY2FwaXRhbGl6ZSIsImdldFZhbHVlRm9yUHJvcGVydHkiLCJleHBlY3RlZCIsInN0cmluZ1ZhbHVlIiwiZ2V0QXR0cmlidXRlIiwiZ2V0VmFsdWVGb3JBdHRyaWJ1dGUiLCJzZXRWYWx1ZUZvclByb3BlcnR5IiwiX2F0dHJpYnV0ZU5hbWUiLCJfdHlwZSIsImF0dHJpYnV0ZVZhbHVlIiwiZ2V0VG9TdHJpbmdWYWx1ZSIsIlJlYWN0RGVidWdDdXJyZW50RnJhbWUkMSIsIlJlYWN0Q29udHJvbGxlZFZhbHVlUHJvcFR5cGVzIiwiaGFzUmVhZE9ubHlWYWx1ZSIsImNoZWNrYm94IiwiaW1hZ2UiLCJyYWRpbyIsInN1Ym1pdCIsIm9uQ2hhbmdlIiwicmVhZE9ubHkiLCJlbmFibGVVc2VyVGltaW5nQVBJIiwiZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzIiwiZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzRm9yU3RyaWN0TW9kZSIsInJlcGxheUZhaWxlZFVuaXRPZldvcmtXaXRoSW52b2tlR3VhcmRlZENhbGxiYWNrIiwid2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMiLCJlbmFibGVQcm9maWxlclRpbWVyIiwiZW5hYmxlU2NoZWR1bGVyVHJhY2luZyIsImRpc2FibGVJbnB1dEF0dHJpYnV0ZVN5bmNpbmciLCJkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUiLCJkaWRXYXJuQ2hlY2tlZERlZmF1bHRDaGVja2VkIiwiZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZCIsImRpZFdhcm5VbmNvbnRyb2xsZWRUb0NvbnRyb2xsZWQiLCJpc0NvbnRyb2xsZWQiLCJ1c2VzQ2hlY2tlZCIsImdldEhvc3RQcm9wcyIsImhvc3RQcm9wcyIsImluaXRXcmFwcGVyU3RhdGUiLCJ1cGRhdGVDaGVja2VkIiwidXBkYXRlV3JhcHBlciIsIl9jb250cm9sbGVkIiwic2V0RGVmYXVsdFZhbHVlIiwicG9zdE1vdW50V3JhcHBlciIsImlzSHlkcmF0aW5nIiwiaXNCdXR0b24iLCJfaW5pdGlhbFZhbHVlIiwicmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSIsInVwZGF0ZU5hbWVkQ291c2lucyIsInJvb3ROb2RlIiwicXVlcnlSb290Iiwib3RoZXJOb2RlIiwib3RoZXJQcm9wcyIsImV2ZW50VHlwZXMkMSIsImNyZWF0ZUFuZEFjY3VtdWxhdGVDaGFuZ2VFdmVudCIsImFjdGl2ZUVsZW1lbnRJbnN0Iiwic2hvdWxkVXNlQ2hhbmdlRXZlbnQiLCJtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50IiwicnVuRXZlbnRJbkJhdGNoIiwiZ2V0SW5zdElmVmFsdWVDaGFuZ2VkIiwidGFyZ2V0Tm9kZSIsImdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudCIsImlzSW5wdXRFdmVudFN1cHBvcnRlZCIsInN0YXJ0V2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSIsImhhbmRsZVByb3BlcnR5Q2hhbmdlIiwic3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UiLCJoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50UG9seWZpbGwiLCJnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsIiwic2hvdWxkVXNlQ2xpY2tFdmVudCIsImdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50IiwiZ2V0VGFyZ2V0SW5zdEZvcklucHV0T3JDaGFuZ2VFdmVudCIsImhhbmRsZUNvbnRyb2xsZWRJbnB1dEJsdXIiLCJnZXRUYXJnZXRJbnN0RnVuYyIsImhhbmRsZUV2ZW50RnVuYyIsIkRPTUV2ZW50UGx1Z2luT3JkZXIiLCJTeW50aGV0aWNVSUV2ZW50IiwibW9kaWZpZXJLZXlUb1Byb3AiLCJtb2RpZmllclN0YXRlR2V0dGVyIiwia2V5QXJnIiwic3ludGhldGljRXZlbnQiLCJrZXlQcm9wIiwiZ2V0RXZlbnRNb2RpZmllclN0YXRlIiwicHJldmlvdXNTY3JlZW5YIiwicHJldmlvdXNTY3JlZW5ZIiwiaXNNb3ZlbWVudFhTZXQiLCJpc01vdmVtZW50WVNldCIsIlN5bnRoZXRpY01vdXNlRXZlbnQiLCJTeW50aGV0aWNQb2ludGVyRXZlbnQiLCJldmVudFR5cGVzJDIiLCJpc092ZXJFdmVudCIsImlzT3V0RXZlbnQiLCJ3aW4iLCJkb2MiLCJyZWxhdGVkIiwiZXZlbnRJbnRlcmZhY2UiLCJsZWF2ZUV2ZW50VHlwZSIsImVudGVyRXZlbnRUeXBlIiwiZXZlbnRUeXBlUHJlZml4IiwiZnJvbU5vZGUiLCJ0b05vZGUiLCJoYXNPd25Qcm9wZXJ0eSQxIiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwiTm9FZmZlY3QiLCJQZXJmb3JtZWRXb3JrIiwiUGxhY2VtZW50IiwiVXBkYXRlIiwiUGxhY2VtZW50QW5kVXBkYXRlIiwiRGVsZXRpb24iLCJDb250ZW50UmVzZXQiLCJDYWxsYmFjayIsIkRpZENhcHR1cmUiLCJSZWYiLCJTbmFwc2hvdCIsIkxpZmVjeWNsZUVmZmVjdE1hc2siLCJIb3N0RWZmZWN0TWFzayIsIkluY29tcGxldGUiLCJTaG91bGRDYXB0dXJlIiwiUmVhY3RDdXJyZW50T3duZXIkMSIsIk1PVU5USU5HIiwiTU9VTlRFRCIsIlVOTU9VTlRFRCIsImlzRmliZXJNb3VudGVkSW1wbCIsImlzRmliZXJNb3VudGVkIiwib3duZXJGaWJlciIsIl93YXJuZWRBYm91dFJlZnNJblJlbmRlciIsImFzc2VydElzTW91bnRlZCIsImZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoIiwicGFyZW50QSIsInBhcmVudEIiLCJkaWRGaW5kQ2hpbGQiLCJfY2hpbGQiLCJmaW5kQ3VycmVudEhvc3RGaWJlciIsImN1cnJlbnRQYXJlbnQiLCJmaW5kQ3VycmVudEhvc3RGaWJlcldpdGhOb1BvcnRhbHMiLCJhZGRFdmVudEJ1YmJsZUxpc3RlbmVyIiwiYWRkRXZlbnRDYXB0dXJlTGlzdGVuZXIiLCJTeW50aGV0aWNBbmltYXRpb25FdmVudCIsIlN5bnRoZXRpY0NsaXBib2FyZEV2ZW50IiwiU3ludGhldGljRm9jdXNFdmVudCIsImdldEV2ZW50Q2hhckNvZGUiLCJub3JtYWxpemVLZXkiLCJ0cmFuc2xhdGVUb0tleSIsImdldEV2ZW50S2V5IiwiU3ludGhldGljS2V5Ym9hcmRFdmVudCIsIlN5bnRoZXRpY0RyYWdFdmVudCIsIlN5bnRoZXRpY1RvdWNoRXZlbnQiLCJTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQiLCJTeW50aGV0aWNXaGVlbEV2ZW50IiwiaW50ZXJhY3RpdmVFdmVudFR5cGVOYW1lcyIsIm5vbkludGVyYWN0aXZlRXZlbnRUeXBlTmFtZXMiLCJldmVudFR5cGVzJDQiLCJ0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWciLCJhZGRFdmVudFR5cGVOYW1lVG9Db25maWciLCJ0b3BFdmVudCIsImNhcGl0YWxpemVkRXZlbnQiLCJvbkV2ZW50IiwiZXZlbnRUdXBsZSIsImtub3duSFRNTFRvcExldmVsVHlwZXMiLCJDQUxMQkFDS19CT09LS0VFUElOR19QT09MX1NJWkUiLCJjYWxsYmFja0Jvb2trZWVwaW5nUG9vbCIsImZpbmRSb290Q29udGFpbmVyTm9kZSIsImdldFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZyIsInJlbGVhc2VUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmciLCJoYW5kbGVUb3BMZXZlbCIsImFuY2VzdG9yIiwiX2VuYWJsZWQiLCJzZXRFbmFibGVkIiwiZW5hYmxlZCIsImlzRW5hYmxlZCIsInRyYXBCdWJibGVkRXZlbnQiLCJkaXNwYXRjaEludGVyYWN0aXZlRXZlbnQiLCJ0cmFwQ2FwdHVyZWRFdmVudCIsImFscmVhZHlMaXN0ZW5pbmdUbyIsInJlYWN0VG9wTGlzdGVuZXJzQ291bnRlciIsInRvcExpc3RlbmVyc0lES2V5IiwiZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQiLCJtb3VudEF0IiwibGlzdGVuVG8iLCJpc0xpc3RlbmluZyIsImRlcGVuZGVuY3kiLCJpc01lZGlhRXZlbnQiLCJpc0xpc3RlbmluZ1RvQWxsRGVwZW5kZW5jaWVzIiwiZ2V0QWN0aXZlRWxlbWVudCIsImdldExlYWZOb2RlIiwiZ2V0U2libGluZ05vZGUiLCJnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0Iiwibm9kZVN0YXJ0Iiwibm9kZUVuZCIsImdldE9mZnNldHMiLCJvdXRlck5vZGUiLCJzZWxlY3Rpb24iLCJnZXRNb2Rlcm5PZmZzZXRzRnJvbVBvaW50cyIsImluZGV4V2l0aGluQW5jaG9yIiwiaW5kZXhXaXRoaW5Gb2N1cyIsIm91dGVyIiwic2V0T2Zmc2V0cyIsIm9mZnNldHMiLCJ0ZW1wIiwic3RhcnRNYXJrZXIiLCJlbmRNYXJrZXIiLCJpc1RleHROb2RlIiwiY29udGFpbnNOb2RlIiwiaW5uZXJOb2RlIiwiaXNJbkRvY3VtZW50IiwiZ2V0QWN0aXZlRWxlbWVudERlZXAiLCJoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMiLCJnZXRTZWxlY3Rpb25JbmZvcm1hdGlvbiIsImdldFNlbGVjdGlvbiQxIiwicmVzdG9yZVNlbGVjdGlvbiIsInByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24iLCJjdXJGb2N1c2VkRWxlbSIsInByaW9yRm9jdXNlZEVsZW0iLCJwcmlvclNlbGVjdGlvblJhbmdlIiwic2V0U2VsZWN0aW9uIiwic2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50IiwiZXZlbnRUeXBlcyQzIiwiYWN0aXZlRWxlbWVudCQxIiwiYWN0aXZlRWxlbWVudEluc3QkMSIsImxhc3RTZWxlY3Rpb24iLCJtb3VzZURvd24iLCJnZXRFdmVudFRhcmdldERvY3VtZW50IiwiZXZlbnRUYXJnZXQiLCJjb25zdHJ1Y3RTZWxlY3RFdmVudCIsImN1cnJlbnRTZWxlY3Rpb24iLCJkaWRXYXJuU2VsZWN0ZWRTZXRPbk9wdGlvbiIsImRpZFdhcm5JbnZhbGlkQ2hpbGQiLCJmbGF0dGVuQ2hpbGRyZW4iLCJjb250ZW50IiwidmFsaWRhdGVQcm9wcyIsInBvc3RNb3VudFdyYXBwZXIkMSIsImdldEhvc3RQcm9wcyQxIiwiZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlJDEiLCJ2YWx1ZVByb3BOYW1lcyIsImNoZWNrU2VsZWN0UHJvcFR5cGVzIiwidXBkYXRlT3B0aW9ucyIsInByb3BWYWx1ZSIsInNldERlZmF1bHRTZWxlY3RlZCIsInNlbGVjdGVkVmFsdWVzIiwic2VsZWN0ZWRWYWx1ZSIsIl9zZWxlY3RlZFZhbHVlIiwiX2kyIiwiZ2V0SG9zdFByb3BzJDIiLCJpbml0V3JhcHBlclN0YXRlJDEiLCJwb3N0TW91bnRXcmFwcGVyJDIiLCJwb3N0VXBkYXRlV3JhcHBlciIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUkMiIsImRpZFdhcm5WYWxEZWZhdWx0VmFsIiwiZ2V0SG9zdFByb3BzJDMiLCJpbml0V3JhcHBlclN0YXRlJDIiLCJ1cGRhdGVXcmFwcGVyJDEiLCJuZXdWYWx1ZSIsInBvc3RNb3VudFdyYXBwZXIkMyIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUkMyIsIkhUTUxfTkFNRVNQQUNFJDEiLCJNQVRIX05BTUVTUEFDRSIsIlNWR19OQU1FU1BBQ0UiLCJOYW1lc3BhY2VzIiwiZ2V0SW50cmluc2ljTmFtZXNwYWNlIiwiZ2V0Q2hpbGROYW1lc3BhY2UiLCJwYXJlbnROYW1lc3BhY2UiLCJjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiYXJnMCIsImFyZzEiLCJhcmcyIiwiYXJnMyIsInJldXNhYmxlU1ZHQ29udGFpbmVyIiwic2V0SW5uZXJIVE1MIiwic3ZnTm9kZSIsInNldFRleHRDb250ZW50IiwiaXNVbml0bGVzc051bWJlciIsInByZWZpeEtleSIsInByb3AiLCJkYW5nZXJvdXNTdHlsZVZhbHVlIiwiaXNDdXN0b21Qcm9wZXJ0eSIsImlzRW1wdHkiLCJ1cHBlcmNhc2VQYXR0ZXJuIiwibXNQYXR0ZXJuIiwiaHlwaGVuYXRlU3R5bGVOYW1lIiwid2FyblZhbGlkU3R5bGUiLCJiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4iLCJtc1BhdHRlcm4kMSIsImh5cGhlblBhdHRlcm4iLCJiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4iLCJ3YXJuZWRTdHlsZU5hbWVzIiwid2FybmVkU3R5bGVWYWx1ZXMiLCJ3YXJuZWRGb3JOYU5WYWx1ZSIsIndhcm5lZEZvckluZmluaXR5VmFsdWUiLCJjYW1lbGl6ZSIsIl8iLCJjaGFyYWN0ZXIiLCJ3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSIsIndhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZSIsIndhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbiIsIndhcm5TdHlsZVZhbHVlSXNOYU4iLCJ3YXJuU3R5bGVWYWx1ZUlzSW5maW5pdHkiLCJpc0Zpbml0ZSIsIndhcm5WYWxpZFN0eWxlJDEiLCJjcmVhdGVEYW5nZXJvdXNTdHJpbmdGb3JTdHlsZXMiLCJzdHlsZXMiLCJzZXJpYWxpemVkIiwic3R5bGVOYW1lIiwic3R5bGVWYWx1ZSIsInNldFZhbHVlRm9yU3R5bGVzIiwib21pdHRlZENsb3NlVGFncyIsInZvaWRFbGVtZW50VGFncyIsIkhUTUwkMSIsIlJlYWN0RGVidWdDdXJyZW50RnJhbWUkMiIsImFzc2VydFZhbGlkUHJvcHMiLCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmciLCJpc0N1c3RvbUNvbXBvbmVudCIsInBvc3NpYmxlU3RhbmRhcmROYW1lcyIsImFjY2VwdCIsImFjY2VwdGNoYXJzZXQiLCJhY2Nlc3NrZXkiLCJhbGxvd2Z1bGxzY3JlZW4iLCJhbHQiLCJhcyIsImFzeW5jIiwiYXV0b2NhcGl0YWxpemUiLCJhdXRvY29tcGxldGUiLCJhdXRvY29ycmVjdCIsImF1dG9mb2N1cyIsImF1dG9wbGF5IiwiYXV0b3NhdmUiLCJjZWxscGFkZGluZyIsImNlbGxzcGFjaW5nIiwiY2hhbGxlbmdlIiwiY2hhcnNldCIsImNpdGUiLCJjbGFzcyIsImNsYXNzaWQiLCJjbGFzc25hbWUiLCJjb2xzIiwiY29sc3BhbiIsImNvbnRlbnRlZGl0YWJsZSIsImNvbnRleHRtZW51IiwiY29udHJvbHMiLCJjb250cm9sc2xpc3QiLCJjb29yZHMiLCJjcm9zc29yaWdpbiIsImRhbmdlcm91c2x5c2V0aW5uZXJodG1sIiwiZGVmYXVsdGNoZWNrZWQiLCJkZWZhdWx0dmFsdWUiLCJkZWZlciIsImRvd25sb2FkIiwiZHJhZ2dhYmxlIiwiZW5jdHlwZSIsImZvcm1tZXRob2QiLCJmb3JtYWN0aW9uIiwiZm9ybWVuY3R5cGUiLCJmb3Jtbm92YWxpZGF0ZSIsImZvcm10YXJnZXQiLCJmcmFtZWJvcmRlciIsImhlYWRlcnMiLCJoaWdoIiwiaHJlZmxhbmciLCJodG1sZm9yIiwiaHR0cGVxdWl2IiwiaWNvbiIsImlubmVyaHRtbCIsImlucHV0bW9kZSIsImludGVncml0eSIsIml0ZW1pZCIsIml0ZW1wcm9wIiwiaXRlbXJlZiIsIml0ZW1zY29wZSIsIml0ZW10eXBlIiwia2V5cGFyYW1zIiwia2V5dHlwZSIsImtpbmQiLCJsYWJlbCIsImxhbmciLCJsaXN0IiwibG9vcCIsImxvdyIsIm1hbmlmZXN0IiwibWFyZ2lud2lkdGgiLCJtYXJnaW5oZWlnaHQiLCJtYXgiLCJtYXhsZW5ndGgiLCJtZWRpYSIsIm1lZGlhZ3JvdXAiLCJtZXRob2QiLCJtaW5sZW5ndGgiLCJtdXRlZCIsIm5vbW9kdWxlIiwibm9uY2UiLCJub3ZhbGlkYXRlIiwib3BlbiIsIm9wdGltdW0iLCJwbGFjZWhvbGRlciIsInBsYXlzaW5saW5lIiwicG9zdGVyIiwicHJvZmlsZSIsInJhZGlvZ3JvdXAiLCJyZWFkb25seSIsInJlZmVycmVycG9saWN5IiwicmVsIiwicmVxdWlyZWQiLCJyZXZlcnNlZCIsInJvbGUiLCJyb3dzIiwicm93c3BhbiIsInNhbmRib3giLCJzY29wZWQiLCJzY3JvbGxpbmciLCJzZWFtbGVzcyIsInNpemUiLCJzaXplcyIsInNwYW4iLCJzcGVsbGNoZWNrIiwic3JjIiwic3JjZG9jIiwic3JjbGFuZyIsInNyY3NldCIsInN1bW1hcnkiLCJ0YWJpbmRleCIsInVzZW1hcCIsIndtb2RlIiwid3JhcCIsImFib3V0IiwiYWNjZW50aGVpZ2h0IiwiYWNjdW11bGF0ZSIsImFkZGl0aXZlIiwiYWxpZ25tZW50YmFzZWxpbmUiLCJhbGxvd3Jlb3JkZXIiLCJhbHBoYWJldGljIiwiYW1wbGl0dWRlIiwiYXJhYmljZm9ybSIsImFzY2VudCIsImF0dHJpYnV0ZW5hbWUiLCJhdHRyaWJ1dGV0eXBlIiwiYXV0b3JldmVyc2UiLCJhemltdXRoIiwiYmFzZWZyZXF1ZW5jeSIsImJhc2VsaW5lc2hpZnQiLCJiYXNlcHJvZmlsZSIsImJib3giLCJiZWdpbiIsImJpYXMiLCJieSIsImNhbGNtb2RlIiwiY2FwaGVpZ2h0IiwiY2xpcCIsImNsaXBwYXRoIiwiY2xpcHBhdGh1bml0cyIsImNsaXBydWxlIiwiY29sb3JpbnRlcnBvbGF0aW9uIiwiY29sb3JpbnRlcnBvbGF0aW9uZmlsdGVycyIsImNvbG9ycHJvZmlsZSIsImNvbG9ycmVuZGVyaW5nIiwiY29udGVudHNjcmlwdHR5cGUiLCJjb250ZW50c3R5bGV0eXBlIiwiY3Vyc29yIiwiY3giLCJjeSIsImRhdGF0eXBlIiwiZGVjZWxlcmF0ZSIsImRlc2NlbnQiLCJkaWZmdXNlY29uc3RhbnQiLCJkaXJlY3Rpb24iLCJkaXZpc29yIiwiZG9taW5hbnRiYXNlbGluZSIsImR1ciIsImR4IiwiZHkiLCJlZGdlbW9kZSIsImVsZXZhdGlvbiIsImVuYWJsZWJhY2tncm91bmQiLCJleHBvbmVudCIsImV4dGVybmFscmVzb3VyY2VzcmVxdWlyZWQiLCJmaWxsIiwiZmlsbG9wYWNpdHkiLCJmaWxscnVsZSIsImZpbHRlcnJlcyIsImZpbHRlcnVuaXRzIiwiZmxvb2RvcGFjaXR5IiwiZmxvb2Rjb2xvciIsImZvY3VzYWJsZSIsImZvbnRmYW1pbHkiLCJmb250c2l6ZSIsImZvbnRzaXplYWRqdXN0IiwiZm9udHN0cmV0Y2giLCJmb250c3R5bGUiLCJmb250dmFyaWFudCIsImZvbnR3ZWlnaHQiLCJmeCIsImZ5IiwiZzEiLCJnMiIsImdseXBobmFtZSIsImdseXBob3JpZW50YXRpb25ob3Jpem9udGFsIiwiZ2x5cGhvcmllbnRhdGlvbnZlcnRpY2FsIiwiZ2x5cGhyZWYiLCJncmFkaWVudHRyYW5zZm9ybSIsImdyYWRpZW50dW5pdHMiLCJoYW5naW5nIiwiaG9yaXphZHZ4IiwiaG9yaXpvcmlnaW54IiwiaWRlb2dyYXBoaWMiLCJpbWFnZXJlbmRlcmluZyIsImluMiIsImluIiwiaW5saXN0IiwiaW50ZXJjZXB0IiwiazEiLCJrMiIsImszIiwiazQiLCJrZXJuZWxtYXRyaXgiLCJrZXJuZWx1bml0bGVuZ3RoIiwia2VybmluZyIsImtleXBvaW50cyIsImtleXNwbGluZXMiLCJrZXl0aW1lcyIsImxlbmd0aGFkanVzdCIsImxldHRlcnNwYWNpbmciLCJsaWdodGluZ2NvbG9yIiwibGltaXRpbmdjb25lYW5nbGUiLCJsb2NhbCIsIm1hcmtlcmVuZCIsIm1hcmtlcmhlaWdodCIsIm1hcmtlcm1pZCIsIm1hcmtlcnN0YXJ0IiwibWFya2VydW5pdHMiLCJtYXJrZXJ3aWR0aCIsIm1hc2siLCJtYXNrY29udGVudHVuaXRzIiwibWFza3VuaXRzIiwibWF0aGVtYXRpY2FsIiwibnVtb2N0YXZlcyIsIm9wZXJhdG9yIiwib3JpZW50Iiwib3JpZW50YXRpb24iLCJvcmlnaW4iLCJvdmVyZmxvdyIsIm92ZXJsaW5lcG9zaXRpb24iLCJvdmVybGluZXRoaWNrbmVzcyIsInBhaW50b3JkZXIiLCJwYW5vc2UxIiwicGF0aGxlbmd0aCIsInBhdHRlcm5jb250ZW50dW5pdHMiLCJwYXR0ZXJudHJhbnNmb3JtIiwicGF0dGVybnVuaXRzIiwicG9pbnRlcmV2ZW50cyIsInBvaW50cyIsInBvaW50c2F0eCIsInBvaW50c2F0eSIsInBvaW50c2F0eiIsInByZXNlcnZlYWxwaGEiLCJwcmVzZXJ2ZWFzcGVjdHJhdGlvIiwicHJpbWl0aXZldW5pdHMiLCJwcm9wZXJ0eSIsInJhZGl1cyIsInJlZngiLCJyZWZ5IiwicmVuZGVyaW5naW50ZW50IiwicmVwZWF0Y291bnQiLCJyZXBlYXRkdXIiLCJyZXF1aXJlZGV4dGVuc2lvbnMiLCJyZXF1aXJlZGZlYXR1cmVzIiwicmVzb3VyY2UiLCJyZXN0YXJ0IiwicmVzdWx0cyIsInJvdGF0ZSIsInJ4IiwicnkiLCJzY2FsZSIsInNlY3VyaXR5Iiwic2VlZCIsInNoYXBlcmVuZGVyaW5nIiwic2xvcGUiLCJzcGFjaW5nIiwic3BlY3VsYXJjb25zdGFudCIsInNwZWN1bGFyZXhwb25lbnQiLCJzcGVlZCIsInNwcmVhZG1ldGhvZCIsInN0YXJ0b2Zmc2V0Iiwic3RkZGV2aWF0aW9uIiwic3RlbWgiLCJzdGVtdiIsInN0aXRjaHRpbGVzIiwic3RvcGNvbG9yIiwic3RvcG9wYWNpdHkiLCJzdHJpa2V0aHJvdWdocG9zaXRpb24iLCJzdHJpa2V0aHJvdWdodGhpY2tuZXNzIiwic3Ryb2tlIiwic3Ryb2tlZGFzaGFycmF5Iiwic3Ryb2tlZGFzaG9mZnNldCIsInN0cm9rZWxpbmVjYXAiLCJzdHJva2VsaW5lam9pbiIsInN0cm9rZW1pdGVybGltaXQiLCJzdHJva2V3aWR0aCIsInN0cm9rZW9wYWNpdHkiLCJzdXBwcmVzc2NvbnRlbnRlZGl0YWJsZXdhcm5pbmciLCJzdXBwcmVzc2h5ZHJhdGlvbndhcm5pbmciLCJzdXJmYWNlc2NhbGUiLCJzeXN0ZW1sYW5ndWFnZSIsInRhYmxldmFsdWVzIiwidGFyZ2V0eCIsInRhcmdldHkiLCJ0ZXh0YW5jaG9yIiwidGV4dGRlY29yYXRpb24iLCJ0ZXh0bGVuZ3RoIiwidGV4dHJlbmRlcmluZyIsInRyYW5zZm9ybSIsInR5cGVvZiIsInUxIiwidTIiLCJ1bmRlcmxpbmVwb3NpdGlvbiIsInVuZGVybGluZXRoaWNrbmVzcyIsInVuaWNvZGUiLCJ1bmljb2RlYmlkaSIsInVuaWNvZGVyYW5nZSIsInVuaXRzcGVyZW0iLCJ1bnNlbGVjdGFibGUiLCJ2YWxwaGFiZXRpYyIsInZlY3RvcmVmZmVjdCIsInZlcnRhZHZ5IiwidmVydG9yaWdpbngiLCJ2ZXJ0b3JpZ2lueSIsInZoYW5naW5nIiwidmlkZW9ncmFwaGljIiwidmlld2JveCIsInZpZXd0YXJnZXQiLCJ2aXNpYmlsaXR5Iiwidm1hdGhlbWF0aWNhbCIsInZvY2FiIiwid2lkdGhzIiwid29yZHNwYWNpbmciLCJ3cml0aW5nbW9kZSIsIngxIiwieDIiLCJ4Y2hhbm5lbHNlbGVjdG9yIiwieGhlaWdodCIsInhsaW5rYWN0dWF0ZSIsInhsaW5rYXJjcm9sZSIsInhsaW5raHJlZiIsInhsaW5rcm9sZSIsInhsaW5rc2hvdyIsInhsaW5rdGl0bGUiLCJ4bGlua3R5cGUiLCJ4bWxiYXNlIiwieG1sbGFuZyIsInhtbG5zIiwieG1sbnN4bGluayIsInhtbHNwYWNlIiwieTEiLCJ5MiIsInljaGFubmVsc2VsZWN0b3IiLCJ6b29tYW5kcGFuIiwiYXJpYVByb3BlcnRpZXMiLCJ3YXJuZWRQcm9wZXJ0aWVzIiwickFSSUEiLCJyQVJJQUNhbWVsIiwiaGFzT3duUHJvcGVydHkkMiIsInZhbGlkYXRlUHJvcGVydHkiLCJhcmlhTmFtZSIsImNvcnJlY3ROYW1lIiwic3RhbmRhcmROYW1lIiwid2FybkludmFsaWRBUklBUHJvcHMiLCJpbnZhbGlkUHJvcHMiLCJpc1ZhbGlkIiwidW5rbm93blByb3BTdHJpbmciLCJ2YWxpZGF0ZVByb3BlcnRpZXMiLCJkaWRXYXJuVmFsdWVOdWxsIiwidmFsaWRhdGVQcm9wZXJ0aWVzJDEiLCJ2YWxpZGF0ZVByb3BlcnR5JDEiLCJ3YXJuZWRQcm9wZXJ0aWVzJDEiLCJfaGFzT3duUHJvcGVydHkiLCJFVkVOVF9OQU1FX1JFR0VYIiwiSU5WQUxJRF9FVkVOVF9OQU1FX1JFR0VYIiwickFSSUEkMSIsInJBUklBQ2FtZWwkMSIsImNhblVzZUV2ZW50U3lzdGVtIiwiaXNSZXNlcnZlZCIsIndhcm5Vbmtub3duUHJvcGVydGllcyIsInVua25vd25Qcm9wcyIsInZhbGlkYXRlUHJvcGVydGllcyQyIiwiZGlkV2FybkludmFsaWRIeWRyYXRpb24iLCJkaWRXYXJuU2hhZHlET00iLCJEQU5HRVJPVVNMWV9TRVRfSU5ORVJfSFRNTCIsIlNVUFBSRVNTX0NPTlRFTlRfRURJVEFCTEVfV0FSTklORyIsIlNVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HJDEiLCJBVVRPRk9DVVMiLCJDSElMRFJFTiIsIlNUWUxFJDEiLCJIVE1MIiwiSFRNTF9OQU1FU1BBQ0UiLCJ3YXJuZWRVbmtub3duVGFncyIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsInZhbGlkYXRlUHJvcGVydGllc0luRGV2ZWxvcG1lbnQiLCJ3YXJuRm9yVGV4dERpZmZlcmVuY2UiLCJ3YXJuRm9yUHJvcERpZmZlcmVuY2UiLCJ3YXJuRm9yRXh0cmFBdHRyaWJ1dGVzIiwid2FybkZvckludmFsaWRFdmVudExpc3RlbmVyIiwiY2FuRGlmZlN0eWxlRm9ySHlkcmF0aW9uV2FybmluZyIsIm5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZSIsIm5vcm1hbGl6ZUhUTUwiLCJkaWFsb2ciLCJ3ZWJ2aWV3IiwiTk9STUFMSVpFX05FV0xJTkVTX1JFR0VYIiwiTk9STUFMSVpFX05VTExfQU5EX1JFUExBQ0VNRU5UX1JFR0VYIiwibWFya3VwIiwibWFya3VwU3RyaW5nIiwic2VydmVyVGV4dCIsImNsaWVudFRleHQiLCJub3JtYWxpemVkQ2xpZW50VGV4dCIsIm5vcm1hbGl6ZWRTZXJ2ZXJUZXh0Iiwic2VydmVyVmFsdWUiLCJjbGllbnRWYWx1ZSIsIm5vcm1hbGl6ZWRDbGllbnRWYWx1ZSIsIm5vcm1hbGl6ZWRTZXJ2ZXJWYWx1ZSIsImF0dHJpYnV0ZU5hbWVzIiwibmFtZXMiLCJ0ZXN0RWxlbWVudCIsImVuc3VyZUxpc3RlbmluZ1RvIiwicm9vdENvbnRhaW5lckVsZW1lbnQiLCJpc0RvY3VtZW50T3JGcmFnbWVudCIsImdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lciIsInRyYXBDbGlja09uTm9uSW50ZXJhY3RpdmVFbGVtZW50Iiwic2V0SW5pdGlhbERPTVByb3BlcnRpZXMiLCJkb21FbGVtZW50IiwicHJvcEtleSIsIm5leHRQcm9wIiwibmV4dEh0bWwiLCJjYW5TZXRUZXh0Q29udGVudCIsInVwZGF0ZURPTVByb3BlcnRpZXMiLCJ1cGRhdGVQYXlsb2FkIiwid2FzQ3VzdG9tQ29tcG9uZW50VGFnIiwiZGl2Iiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJyYXdQcm9wcyIsInNoYWR5Um9vdCIsImRpZmZQcm9wZXJ0aWVzIiwibGFzdFJhd1Byb3BzIiwibmV4dFJhd1Byb3BzIiwibGFzdFByb3BzIiwic3R5bGVVcGRhdGVzIiwibGFzdFN0eWxlIiwibGFzdFByb3AiLCJsYXN0SHRtbCIsInVwZGF0ZVByb3BlcnRpZXMiLCJnZXRQb3NzaWJsZVN0YW5kYXJkTmFtZSIsImRpZmZIeWRyYXRlZFByb3BlcnRpZXMiLCJleHRyYUF0dHJpYnV0ZU5hbWVzIiwiYXR0cmlidXRlcyIsInNlcnZlckhUTUwiLCJleHBlY3RlZEhUTUwiLCJleHBlY3RlZFN0eWxlIiwiaXNNaXNtYXRjaER1ZVRvQmFkQ2FzaW5nIiwib3duTmFtZXNwYWNlIiwiZGlmZkh5ZHJhdGVkVGV4dCIsInRleHROb2RlIiwiaXNEaWZmZXJlbnQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwicmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSQxIiwidmFsaWRhdGVET01OZXN0aW5nIiwidXBkYXRlZEFuY2VzdG9ySW5mbyIsInNwZWNpYWxUYWdzIiwiaW5TY29wZVRhZ3MiLCJidXR0b25TY29wZVRhZ3MiLCJpbXBsaWVkRW5kVGFncyIsImVtcHR5QW5jZXN0b3JJbmZvIiwiZm9ybVRhZyIsImFUYWdJblNjb3BlIiwiYnV0dG9uVGFnSW5TY29wZSIsIm5vYnJUYWdJblNjb3BlIiwicFRhZ0luQnV0dG9uU2NvcGUiLCJsaXN0SXRlbVRhZ0F1dG9jbG9zaW5nIiwiZGxJdGVtVGFnQXV0b2Nsb3NpbmciLCJvbGRJbmZvIiwiYW5jZXN0b3JJbmZvIiwiaXNUYWdWYWxpZFdpdGhQYXJlbnQiLCJwYXJlbnRUYWciLCJmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnIiwiZGlkV2FybiIsImNoaWxkVGFnIiwiY2hpbGRUZXh0IiwicGFyZW50SW5mbyIsImludmFsaWRQYXJlbnQiLCJpbnZhbGlkQW5jZXN0b3IiLCJpbnZhbGlkUGFyZW50T3JBbmNlc3RvciIsImFuY2VzdG9yVGFnIiwid2FybktleSIsInRhZ0Rpc3BsYXlOYW1lIiwid2hpdGVzcGFjZUluZm8iLCJzaGltIiwic3VwcG9ydHNQZXJzaXN0ZW5jZSIsImNsb25lSW5zdGFuY2UiLCJjcmVhdGVDb250YWluZXJDaGlsZFNldCIsImFwcGVuZENoaWxkVG9Db250YWluZXJDaGlsZFNldCIsImZpbmFsaXplQ29udGFpbmVyQ2hpbGRyZW4iLCJyZXBsYWNlQ29udGFpbmVyQ2hpbGRyZW4iLCJjbG9uZUhpZGRlbkluc3RhbmNlIiwiY2xvbmVVbmhpZGRlbkluc3RhbmNlIiwiY3JlYXRlSGlkZGVuVGV4dEluc3RhbmNlIiwiU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkciLCJTVFlMRSIsImV2ZW50c0VuYWJsZWQiLCJzZWxlY3Rpb25JbmZvcm1hdGlvbiIsInNob3VsZEF1dG9Gb2N1c0hvc3RDb21wb25lbnQiLCJnZXRSb290SG9zdENvbnRleHQiLCJyb290Q29udGFpbmVySW5zdGFuY2UiLCJuYW1lc3BhY2UiLCJjb250YWluZXIiLCJ2YWxpZGF0ZWRUYWciLCJfYW5jZXN0b3JJbmZvIiwiZ2V0Q2hpbGRIb3N0Q29udGV4dCIsInBhcmVudEhvc3RDb250ZXh0IiwicGFyZW50SG9zdENvbnRleHREZXYiLCJfbmFtZXNwYWNlIiwiX2FuY2VzdG9ySW5mbzIiLCJnZXRQdWJsaWNJbnN0YW5jZSIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwiY3JlYXRlSW5zdGFuY2UiLCJob3N0Q29udGV4dCIsImludGVybmFsSW5zdGFuY2VIYW5kbGUiLCJob3N0Q29udGV4dERldiIsIm93bkFuY2VzdG9ySW5mbyIsImFwcGVuZEluaXRpYWxDaGlsZCIsInBhcmVudEluc3RhbmNlIiwiZmluYWxpemVJbml0aWFsQ2hpbGRyZW4iLCJwcmVwYXJlVXBkYXRlIiwib2xkUHJvcHMiLCJuZXdQcm9wcyIsInNob3VsZFNldFRleHRDb250ZW50Iiwic2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSIsImNyZWF0ZVRleHRJbnN0YW5jZSIsImlzUHJpbWFyeVJlbmRlcmVyIiwic2NoZWR1bGVUaW1lb3V0IiwiY2FuY2VsVGltZW91dCIsIm5vVGltZW91dCIsInN1cHBvcnRzTXV0YXRpb24iLCJjb21taXRNb3VudCIsImNvbW1pdFVwZGF0ZSIsInJlc2V0VGV4dENvbnRlbnQiLCJjb21taXRUZXh0VXBkYXRlIiwidGV4dEluc3RhbmNlIiwib2xkVGV4dCIsIm5ld1RleHQiLCJhcHBlbmRDaGlsZFRvQ29udGFpbmVyIiwicmVhY3RSb290Q29udGFpbmVyIiwiYmVmb3JlQ2hpbGQiLCJpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImhpZGVJbnN0YW5jZSIsImhpZGVUZXh0SW5zdGFuY2UiLCJ1bmhpZGVJbnN0YW5jZSIsInVuaGlkZVRleHRJbnN0YW5jZSIsInN1cHBvcnRzSHlkcmF0aW9uIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsImdldE5leHRIeWRyYXRhYmxlU2libGluZyIsImdldEZpcnN0SHlkcmF0YWJsZUNoaWxkIiwiaHlkcmF0ZUluc3RhbmNlIiwiaHlkcmF0ZVRleHRJbnN0YW5jZSIsImRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UiLCJwYXJlbnRDb250YWluZXIiLCJkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlIiwicGFyZW50UHJvcHMiLCJkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UiLCJyZWFjdEVtb2ppIiwid2FybmluZ0Vtb2ppIiwic3VwcG9ydHNVc2VyVGltaW5nIiwibWFyayIsImNsZWFyTWFya3MiLCJtZWFzdXJlIiwiY2xlYXJNZWFzdXJlcyIsImN1cnJlbnRGaWJlciIsImN1cnJlbnRQaGFzZSIsImN1cnJlbnRQaGFzZUZpYmVyIiwiaXNDb21taXR0aW5nIiwiaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50Q29tbWl0IiwiaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50UGhhc2UiLCJjb21taXRDb3VudEluQ3VycmVudFdvcmtMb29wIiwiZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQiLCJpc1dhaXRpbmdGb3JDYWxsYmFjayIsImxhYmVsc0luQ3VycmVudENvbW1pdCIsImZvcm1hdE1hcmtOYW1lIiwibWFya05hbWUiLCJmb3JtYXRMYWJlbCIsInN1ZmZpeCIsImJlZ2luTWFyayIsImNsZWFyTWFyayIsImVuZE1hcmsiLCJmb3JtYXR0ZWRNYXJrTmFtZSIsImZvcm1hdHRlZExhYmVsIiwiZ2V0RmliZXJNYXJrTmFtZSIsImRlYnVnSUQiLCJnZXRGaWJlckxhYmVsIiwiYmVnaW5GaWJlck1hcmsiLCJfZGVidWdJRCIsImNsZWFyRmliZXJNYXJrIiwiZW5kRmliZXJNYXJrIiwic2hvdWxkSWdub3JlRmliZXIiLCJjbGVhclBlbmRpbmdQaGFzZU1lYXN1cmVtZW50IiwicGF1c2VUaW1lcnMiLCJfZGVidWdJc0N1cnJlbnRseVRpbWluZyIsInJlc3VtZVRpbWVyc1JlY3Vyc2l2ZWx5IiwicmVzdW1lVGltZXJzIiwicmVjb3JkRWZmZWN0IiwicmVjb3JkU2NoZWR1bGVVcGRhdGUiLCJzdGFydFJlcXVlc3RDYWxsYmFja1RpbWVyIiwic3RvcFJlcXVlc3RDYWxsYmFja1RpbWVyIiwiZGlkRXhwaXJlIiwic3RhcnRXb3JrVGltZXIiLCJjYW5jZWxXb3JrVGltZXIiLCJzdG9wV29ya1RpbWVyIiwic3RvcEZhaWxlZFdvcmtUaW1lciIsInN0YXJ0UGhhc2VUaW1lciIsInN0b3BQaGFzZVRpbWVyIiwic3RhcnRXb3JrTG9vcFRpbWVyIiwibmV4dFVuaXRPZldvcmsiLCJzdG9wV29ya0xvb3BUaW1lciIsImludGVycnVwdGVkQnkiLCJkaWRDb21wbGV0ZVJvb3QiLCJzdGFydENvbW1pdFRpbWVyIiwiY2xlYXIiLCJzdG9wQ29tbWl0VGltZXIiLCJzdGFydENvbW1pdFNuYXBzaG90RWZmZWN0c1RpbWVyIiwic3RvcENvbW1pdFNuYXBzaG90RWZmZWN0c1RpbWVyIiwic3RhcnRDb21taXRIb3N0RWZmZWN0c1RpbWVyIiwic3RvcENvbW1pdEhvc3RFZmZlY3RzVGltZXIiLCJzdGFydENvbW1pdExpZmVDeWNsZXNUaW1lciIsInN0b3BDb21taXRMaWZlQ3ljbGVzVGltZXIiLCJ2YWx1ZVN0YWNrIiwiZmliZXJTdGFjayIsImNyZWF0ZUN1cnNvciIsImNoZWNrVGhhdFN0YWNrSXNFbXB0eSIsInJlc2V0U3RhY2tBZnRlckZhdGFsRXJyb3JJbkRldiIsIndhcm5lZEFib3V0TWlzc2luZ0dldENoaWxkQ29udGV4dCIsImVtcHR5Q29udGV4dE9iamVjdCIsImNvbnRleHRTdGFja0N1cnNvciIsImRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IiLCJwcmV2aW91c0NvbnRleHQiLCJnZXRVbm1hc2tlZENvbnRleHQiLCJkaWRQdXNoT3duQ29udGV4dElmUHJvdmlkZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImNhY2hlQ29udGV4dCIsInVubWFza2VkQ29udGV4dCIsIm1hc2tlZENvbnRleHQiLCJnZXRNYXNrZWRDb250ZXh0IiwiaGFzQ29udGV4dENoYW5nZWQiLCJwb3BDb250ZXh0IiwicG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0IiwicHVzaFRvcExldmVsQ29udGV4dE9iamVjdCIsImRpZENoYW5nZSIsInByb2Nlc3NDaGlsZENvbnRleHQiLCJwYXJlbnRDb250ZXh0IiwiY2hpbGRDb250ZXh0IiwiY29udGV4dEtleSIsInB1c2hDb250ZXh0UHJvdmlkZXIiLCJtZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIiLCJtZXJnZWRDb250ZXh0IiwiZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQiLCJoYXNMb2dnZWRFcnJvciIsImNhdGNoRXJyb3JzIiwiaXNEZXZUb29sc1ByZXNlbnQiLCJpbmplY3RJbnRlcm5hbHMiLCJpbnRlcm5hbHMiLCJob29rIiwicmVuZGVyZXJJRCIsIm9uQ29tbWl0Um9vdCIsIm9uQ29tbWl0VW5tb3VudCIsIk5vV29yayIsIlN5bmMiLCJOZXZlciIsIlVOSVRfU0laRSIsIk1BR0lDX05VTUJFUl9PRkZTRVQiLCJtc1RvRXhwaXJhdGlvblRpbWUiLCJleHBpcmF0aW9uVGltZVRvTXMiLCJjZWlsaW5nIiwibnVtIiwicHJlY2lzaW9uIiwiY29tcHV0ZUV4cGlyYXRpb25CdWNrZXQiLCJleHBpcmF0aW9uSW5NcyIsImJ1Y2tldFNpemVNcyIsIkxPV19QUklPUklUWV9FWFBJUkFUSU9OIiwiTE9XX1BSSU9SSVRZX0JBVENIX1NJWkUiLCJjb21wdXRlQXN5bmNFeHBpcmF0aW9uIiwiSElHSF9QUklPUklUWV9FWFBJUkFUSU9OIiwiSElHSF9QUklPUklUWV9CQVRDSF9TSVpFIiwiY29tcHV0ZUludGVyYWN0aXZlRXhwaXJhdGlvbiIsIk5vQ29udGV4dCIsIkNvbmN1cnJlbnRNb2RlIiwiUHJvZmlsZU1vZGUiLCJoYXNCYWRNYXBQb2x5ZmlsbCIsIm5vbkV4dGVuc2libGVPYmplY3QiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInRlc3RNYXAiLCJ0ZXN0U2V0IiwiZGVidWdDb3VudGVyIiwiRmliZXJOb2RlIiwiYWN0dWFsRHVyYXRpb24iLCJhY3R1YWxTdGFydFRpbWUiLCJzZWxmQmFzZUR1cmF0aW9uIiwidHJlZUJhc2VEdXJhdGlvbiIsImNyZWF0ZUZpYmVyIiwic2hvdWxkQ29uc3RydWN0IiwiaXNTaW1wbGVGdW5jdGlvbkNvbXBvbmVudCIsInJlc29sdmVMYXp5Q29tcG9uZW50VGFnIiwiY3JlYXRlV29ya0luUHJvZ3Jlc3MiLCJjcmVhdGVIb3N0Um9vdEZpYmVyIiwiaXNDb25jdXJyZW50IiwiY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzIiwiZmliZXJUYWciLCJyZXNvbHZlZFR5cGUiLCJnZXRUYWciLCJjcmVhdGVGaWJlckZyb21GcmFnbWVudCIsImNyZWF0ZUZpYmVyRnJvbU1vZGUiLCJjcmVhdGVGaWJlckZyb21Qcm9maWxlciIsImNyZWF0ZUZpYmVyRnJvbVN1c3BlbnNlIiwiY3JlYXRlRmliZXJGcm9tRWxlbWVudCIsImVsZW1lbnRzIiwib25SZW5kZXIiLCJjcmVhdGVGaWJlckZyb21UZXh0IiwiY3JlYXRlRmliZXJGcm9tSG9zdEluc3RhbmNlRm9yRGVsZXRpb24iLCJjcmVhdGVGaWJlckZyb21Qb3J0YWwiLCJwb3J0YWwiLCJhc3NpZ25GaWJlclByb3BlcnRpZXNJbkRFViIsImNyZWF0ZUZpYmVyUm9vdCIsInVuaW5pdGlhbGl6ZWRGaWJlciIsImludGVyYWN0aW9uVGhyZWFkSUQiLCJ1bnN0YWJsZV9nZXRUaHJlYWRJRCIsIm1lbW9pemVkSW50ZXJhY3Rpb25zIiwicGVuZGluZ0ludGVyYWN0aW9uTWFwIiwiUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MiLCJkaXNjYXJkUGVuZGluZ1dhcm5pbmdzIiwiZmx1c2hQZW5kaW5nRGVwcmVjYXRpb25XYXJuaW5ncyIsImZsdXNoUGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzIiwicmVjb3JkRGVwcmVjYXRpb25XYXJuaW5ncyIsInJlY29yZFVuc2FmZUxpZmVjeWNsZVdhcm5pbmdzIiwicmVjb3JkTGVnYWN5Q29udGV4dFdhcm5pbmciLCJmbHVzaExlZ2FjeUNvbnRleHRXYXJuaW5nIiwiTElGRUNZQ0xFX1NVR0dFU1RJT05TIiwicGVuZGluZ0NvbXBvbmVudFdpbGxNb3VudFdhcm5pbmdzIiwicGVuZGluZ0NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNXYXJuaW5ncyIsInBlbmRpbmdDb21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MiLCJwZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MiLCJwZW5kaW5nTGVnYWN5Q29udGV4dFdhcm5pbmciLCJkaWRXYXJuQWJvdXREZXByZWNhdGVkTGlmZWN5Y2xlcyIsImRpZFdhcm5BYm91dFVuc2FmZUxpZmVjeWNsZXMiLCJkaWRXYXJuQWJvdXRMZWdhY3lDb250ZXh0Iiwic2V0VG9Tb3J0ZWRTdHJpbmciLCJzb3J0IiwibGlmZWN5Y2xlV2FybmluZ3NNYXAiLCJzdHJpY3RSb290IiwibGlmZWN5Y2xlc1dhcm5pbmdNZXNhZ2VzIiwibGlmZWN5Y2xlIiwibGlmZWN5Y2xlV2FybmluZ3MiLCJjb21wb25lbnROYW1lcyIsImZvcm1hdHRlZCIsInN1Z2dlc3Rpb24iLCJzb3J0ZWRDb21wb25lbnROYW1lcyIsInN0cmljdFJvb3RDb21wb25lbnRTdGFjayIsImZpbmRTdHJpY3RSb290IiwibWF5YmVTdHJpY3RSb290IiwidW5pcXVlTmFtZXMiLCJzb3J0ZWROYW1lcyIsIl91bmlxdWVOYW1lcyIsIl9zb3J0ZWROYW1lcyIsIl91bmlxdWVOYW1lczIiLCJfc29ydGVkTmFtZXMyIiwiX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyIsIndhcm5pbmdzRm9yUm9vdCIsInVuc2FmZUxpZmVjeWNsZXMiLCJmaWJlckFycmF5IiwiUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbiIsImRlYnVnVG9vbCIsIlJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMSIsIm1hcmtQZW5kaW5nUHJpb3JpdHlMZXZlbCIsImZpbmROZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbiIsIm1hcmtDb21taXR0ZWRQcmlvcml0eUxldmVscyIsImVhcmxpZXN0UmVtYWluaW5nVGltZSIsImhhc0xvd2VyUHJpb3JpdHlXb3JrIiwiZXJyb3JlZEV4cGlyYXRpb25UaW1lIiwiaXNQcmlvcml0eUxldmVsU3VzcGVuZGVkIiwibWFya1N1c3BlbmRlZFByaW9yaXR5TGV2ZWwiLCJzdXNwZW5kZWRUaW1lIiwiY2xlYXJQaW5nIiwibWFya1BpbmdlZFByaW9yaXR5TGV2ZWwiLCJwaW5nZWRUaW1lIiwiY29tcGxldGVkVGltZSIsImZpbmRFYXJsaWVzdE91dHN0YW5kaW5nUHJpb3JpdHlMZXZlbCIsInJlbmRlckV4cGlyYXRpb25UaW1lIiwiZWFybGllc3RFeHBpcmF0aW9uVGltZSIsImRpZEV4cGlyZUF0RXhwaXJhdGlvblRpbWUiLCJjb21wbGV0ZWRFeHBpcmF0aW9uVGltZSIsIlVwZGF0ZVN0YXRlIiwiUmVwbGFjZVN0YXRlIiwiRm9yY2VVcGRhdGUiLCJDYXB0dXJlVXBkYXRlIiwiaGFzRm9yY2VVcGRhdGUiLCJkaWRXYXJuVXBkYXRlSW5zaWRlVXBkYXRlIiwiY3VycmVudGx5UHJvY2Vzc2luZ1F1ZXVlIiwicmVzZXRDdXJyZW50bHlQcm9jZXNzaW5nUXVldWUiLCJjcmVhdGVVcGRhdGVRdWV1ZSIsImNsb25lVXBkYXRlUXVldWUiLCJjcmVhdGVVcGRhdGUiLCJhcHBlbmRVcGRhdGVUb1F1ZXVlIiwiZW5xdWV1ZVVwZGF0ZSIsInF1ZXVlMSIsInF1ZXVlMiIsImVucXVldWVDYXB0dXJlZFVwZGF0ZSIsIndvcmtJblByb2dyZXNzUXVldWUiLCJlbnN1cmVXb3JrSW5Qcm9ncmVzc1F1ZXVlSXNBQ2xvbmUiLCJnZXRTdGF0ZUZyb21VcGRhdGUiLCJwcmV2U3RhdGUiLCJfcGF5bG9hZCIsIl9wYXlsb2FkMiIsInByb2Nlc3NVcGRhdGVRdWV1ZSIsIm5ld0Jhc2VTdGF0ZSIsIm5ld0ZpcnN0VXBkYXRlIiwibmV3RXhwaXJhdGlvblRpbWUiLCJyZXN1bHRTdGF0ZSIsInVwZGF0ZUV4cGlyYXRpb25UaW1lIiwibmV3Rmlyc3RDYXB0dXJlZFVwZGF0ZSIsIl91cGRhdGVFeHBpcmF0aW9uVGltZSIsIl9jYWxsYmFjazIiLCJyZXNldEhhc0ZvcmNlVXBkYXRlQmVmb3JlUHJvY2Vzc2luZyIsImNoZWNrSGFzRm9yY2VVcGRhdGVBZnRlclByb2Nlc3NpbmciLCJjb21taXRVcGRhdGVRdWV1ZSIsImZpbmlzaGVkUXVldWUiLCJjb21taXRVcGRhdGVFZmZlY3RzIiwiZWZmZWN0IiwiX2NhbGxiYWNrMyIsImNyZWF0ZUNhcHR1cmVkVmFsdWUiLCJ2YWx1ZUN1cnNvciIsInJlbmRlcmVyU2lnaWwiLCJjdXJyZW50bHlSZW5kZXJpbmdGaWJlciIsImxhc3RDb250ZXh0RGVwZW5kZW5jeSIsImxhc3RDb250ZXh0V2l0aEFsbEJpdHNPYnNlcnZlZCIsInJlc2V0Q29udGV4dERlcGVuZGVuY2VzIiwicHVzaFByb3ZpZGVyIiwicHJvdmlkZXJGaWJlciIsInBvcFByb3ZpZGVyIiwib2xkVmFsdWUiLCJjaGFuZ2VkQml0cyIsInByb3BhZ2F0ZUNvbnRleHRDaGFuZ2UiLCJuZXh0RmliZXIiLCJwcmVwYXJlVG9SZWFkQ29udGV4dCIsInJlc29sdmVkT2JzZXJ2ZWRCaXRzIiwiY29udGV4dEl0ZW0iLCJOT19DT05URVhUIiwiY29udGV4dFN0YWNrQ3Vyc29yJDEiLCJjb250ZXh0RmliZXJTdGFja0N1cnNvciIsInJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yIiwicmVxdWlyZWRDb250ZXh0IiwiZ2V0Um9vdEhvc3RDb250YWluZXIiLCJyb290SW5zdGFuY2UiLCJwdXNoSG9zdENvbnRhaW5lciIsIm5leHRSb290SW5zdGFuY2UiLCJuZXh0Um9vdENvbnRleHQiLCJwb3BIb3N0Q29udGFpbmVyIiwiZ2V0SG9zdENvbnRleHQiLCJwdXNoSG9zdENvbnRleHQiLCJwb3BIb3N0Q29udGV4dCIsImNvbW1pdFRpbWUiLCJwcm9maWxlclN0YXJ0VGltZSIsImdldENvbW1pdFRpbWUiLCJyZWNvcmRDb21taXRUaW1lIiwic3RhcnRQcm9maWxlclRpbWVyIiwic3RvcFByb2ZpbGVyVGltZXJJZlJ1bm5pbmciLCJzdG9wUHJvZmlsZXJUaW1lcklmUnVubmluZ0FuZFJlY29yZERlbHRhIiwib3ZlcnJpZGVCYXNlVGltZSIsIlJlYWN0Q3VycmVudE93bmVyJDQiLCJyZWFkQ29udGV4dCQxIiwiZGlzcGF0Y2hlciIsImZha2VJbnRlcm5hbEluc3RhbmNlIiwiaXNBcnJheSQxIiwiZW1wdHlSZWZzT2JqZWN0IiwiZGlkV2FybkFib3V0U3RhdGVBc3NpZ25tZW50Rm9yQ29tcG9uZW50IiwiZGlkV2FybkFib3V0VW5pbml0aWFsaXplZFN0YXRlIiwiZGlkV2FybkFib3V0R2V0U25hcHNob3RCZWZvcmVVcGRhdGVXaXRob3V0RGlkVXBkYXRlIiwiZGlkV2FybkFib3V0TGVnYWN5TGlmZWN5Y2xlc0FuZERlcml2ZWRTdGF0ZSIsImRpZFdhcm5BYm91dFVuZGVmaW5lZERlcml2ZWRTdGF0ZSIsIndhcm5PblVuZGVmaW5lZERlcml2ZWRTdGF0ZSIsIndhcm5PbkludmFsaWRDYWxsYmFjayQxIiwiZGlkV2FybkFib3V0RGlyZWN0bHlBc3NpZ25pbmdQcm9wc1RvU3RhdGUiLCJkaWRXYXJuQWJvdXRDb250ZXh0VHlwZUFuZENvbnRleHRUeXBlcyIsImRpZFdhcm5BYm91dEludmFsaWRhdGVDb250ZXh0VHlwZSIsImRpZFdhcm5PbkludmFsaWRDYWxsYmFjayIsImFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY2xhc3NDb21wb25lbnRVcGRhdGVyIiwicmVxdWVzdEN1cnJlbnRUaW1lIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNjaGVkdWxlV29yayIsImNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlIiwib2xkU3RhdGUiLCJuZXdTdGF0ZSIsInNob3VsZFVwZGF0ZSIsImNoZWNrQ2xhc3NJbnN0YW5jZSIsInJlbmRlclByZXNlbnQiLCJub0dldEluaXRpYWxTdGF0ZU9uRVM2IiwiZ2V0SW5pdGlhbFN0YXRlIiwibm9HZXREZWZhdWx0UHJvcHNPbkVTNiIsIm5vSW5zdGFuY2VQcm9wVHlwZXMiLCJub0luc3RhbmNlQ29udGV4dFR5cGUiLCJub0luc3RhbmNlQ29udGV4dFR5cGVzIiwibm9Db21wb25lbnRTaG91bGRVcGRhdGUiLCJjb21wb25lbnRTaG91bGRVcGRhdGUiLCJub0NvbXBvbmVudERpZFVubW91bnQiLCJjb21wb25lbnREaWRVbm1vdW50Iiwibm9Db21wb25lbnREaWRSZWNlaXZlUHJvcHMiLCJjb21wb25lbnREaWRSZWNlaXZlUHJvcHMiLCJub0NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMiLCJjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzIiwibm9VbnNhZmVDb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMiLCJoYXNNdXRhdGVkUHJvcHMiLCJub0luc3RhbmNlRGVmYXVsdFByb3BzIiwibm9JbnN0YW5jZUdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm5vSW5zdGFuY2VHZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2giLCJub1N0YXRpY0dldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiX3N0YXRlIiwiYWRvcHRDbGFzc0luc3RhbmNlIiwiX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSIsImNvbnN0cnVjdENsYXNzSW5zdGFuY2UiLCJpc0xlZ2FjeUNvbnRleHRDb25zdW1lciIsImZvdW5kV2lsbE1vdW50TmFtZSIsImZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUiLCJmb3VuZFdpbGxVcGRhdGVOYW1lIiwiX2NvbXBvbmVudE5hbWUiLCJuZXdBcGlOYW1lIiwiY2FsbENvbXBvbmVudFdpbGxNb3VudCIsImNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibW91bnRDbGFzc0luc3RhbmNlIiwicmVzdW1lTW91bnRDbGFzc0luc3RhbmNlIiwib2xkQ29udGV4dCIsIm5leHRMZWdhY3lVbm1hc2tlZENvbnRleHQiLCJoYXNOZXdMaWZlY3ljbGVzIiwidXBkYXRlQ2xhc3NJbnN0YW5jZSIsIm5leHRVbm1hc2tlZENvbnRleHQiLCJkaWRXYXJuQWJvdXRHZW5lcmF0b3JzIiwiZGlkV2FybkFib3V0U3RyaW5nUmVmSW5TdHJpY3RNb2RlIiwib3duZXJIYXNGdW5jdGlvblR5cGVXYXJuaW5nIiwid2FybkZvck1pc3NpbmdLZXkiLCJjb2VyY2VSZWYiLCJyZXR1cm5GaWJlciIsImN1cnJlbnQkJDEiLCJtaXhlZFJlZiIsInN0cmluZ1JlZiIsInRocm93T25JbnZhbGlkT2JqZWN0VHlwZSIsIm5ld0NoaWxkIiwid2Fybk9uRnVuY3Rpb25UeXBlIiwiQ2hpbGRSZWNvbmNpbGVyIiwic2hvdWxkVHJhY2tTaWRlRWZmZWN0cyIsImRlbGV0ZUNoaWxkIiwiY2hpbGRUb0RlbGV0ZSIsImxhc3QiLCJkZWxldGVSZW1haW5pbmdDaGlsZHJlbiIsImN1cnJlbnRGaXJzdENoaWxkIiwibWFwUmVtYWluaW5nQ2hpbGRyZW4iLCJleGlzdGluZ0NoaWxkcmVuIiwiZXhpc3RpbmdDaGlsZCIsInVzZUZpYmVyIiwiY2xvbmUiLCJwbGFjZUNoaWxkIiwibmV3RmliZXIiLCJsYXN0UGxhY2VkSW5kZXgiLCJuZXdJbmRleCIsIm9sZEluZGV4IiwicGxhY2VTaW5nbGVDaGlsZCIsInVwZGF0ZVRleHROb2RlIiwiY3JlYXRlZCIsImV4aXN0aW5nIiwidXBkYXRlRWxlbWVudCIsInVwZGF0ZVBvcnRhbCIsInVwZGF0ZUZyYWdtZW50IiwiY3JlYXRlQ2hpbGQiLCJfY3JlYXRlZCIsIl9jcmVhdGVkMiIsIl9jcmVhdGVkMyIsInVwZGF0ZVNsb3QiLCJvbGRGaWJlciIsInVwZGF0ZUZyb21NYXAiLCJuZXdJZHgiLCJtYXRjaGVkRmliZXIiLCJfbWF0Y2hlZEZpYmVyIiwiX21hdGNoZWRGaWJlcjIiLCJfbWF0Y2hlZEZpYmVyMyIsIndhcm5PbkludmFsaWRLZXkiLCJrbm93bktleXMiLCJyZWNvbmNpbGVDaGlsZHJlbkFycmF5IiwibmV3Q2hpbGRyZW4iLCJyZXN1bHRpbmdGaXJzdENoaWxkIiwicHJldmlvdXNOZXdGaWJlciIsIm5leHRPbGRGaWJlciIsIl9uZXdGaWJlciIsIl9uZXdGaWJlcjIiLCJyZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yIiwibmV3Q2hpbGRyZW5JdGVyYWJsZSIsInRvU3RyaW5nVGFnIiwiX25ld0NoaWxkcmVuIiwiX3N0ZXAiLCJfbmV3RmliZXIzIiwiX25ld0ZpYmVyNCIsInJlY29uY2lsZVNpbmdsZVRleHROb2RlIiwicmVjb25jaWxlU2luZ2xlRWxlbWVudCIsIl9jcmVhdGVkNCIsInJlY29uY2lsZVNpbmdsZVBvcnRhbCIsInJlY29uY2lsZUNoaWxkRmliZXJzIiwiaXNVbmtleWVkVG9wTGV2ZWxGcmFnbWVudCIsImlzT2JqZWN0IiwiX2lzTW9ja0Z1bmN0aW9uIiwibW91bnRDaGlsZEZpYmVycyIsImNsb25lQ2hpbGRGaWJlcnMiLCJjdXJyZW50Q2hpbGQiLCJoeWRyYXRpb25QYXJlbnRGaWJlciIsIm5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJlbnRlckh5ZHJhdGlvblN0YXRlIiwiZGVsZXRlSHlkcmF0YWJsZUluc3RhbmNlIiwiaW5zZXJ0Tm9uSHlkcmF0ZWRJbnN0YW5jZSIsIl90ZXh0IiwidHJ5SHlkcmF0ZSIsIm5leHRJbnN0YW5jZSIsInRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiZmlyc3RBdHRlbXB0ZWRJbnN0YW5jZSIsInByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSIsInBvcFRvTmV4dEhvc3RQYXJlbnQiLCJwb3BIeWRyYXRpb25TdGF0ZSIsInJlc2V0SHlkcmF0aW9uU3RhdGUiLCJyZWFkTGF6eUNvbXBvbmVudFR5cGUiLCJzdGF0dXMiLCJfdGhlbmFibGUiLCJtb2R1bGVPYmplY3QiLCJkZWZhdWx0RXhwb3J0IiwiUmVhY3RDdXJyZW50T3duZXIkMyIsImRpZFdhcm5BYm91dEJhZENsYXNzIiwiZGlkV2FybkFib3V0Q29udGV4dFR5cGVPbkZ1bmN0aW9uQ29tcG9uZW50IiwiZGlkV2FybkFib3V0R2V0RGVyaXZlZFN0YXRlT25GdW5jdGlvbkNvbXBvbmVudCIsImRpZFdhcm5BYm91dEZ1bmN0aW9uUmVmcyIsInJlY29uY2lsZUNoaWxkcmVuIiwibmV4dENoaWxkcmVuIiwiZm9yY2VVbm1vdW50Q3VycmVudEFuZFJlY29uY2lsZSIsInVwZGF0ZUZvcndhcmRSZWYiLCJjdXJyZW50UmVmIiwiYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayIsInVwZGF0ZU1lbW9Db21wb25lbnQiLCJ1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50IiwidXBkYXRlRnVuY3Rpb25Db21wb25lbnQiLCJ1cGRhdGVNb2RlIiwidXBkYXRlUHJvZmlsZXIiLCJtYXJrUmVmIiwidXBkYXRlQ2xhc3NDb21wb25lbnQiLCJoYXNDb250ZXh0IiwiZmluaXNoQ2xhc3NDb21wb25lbnQiLCJkaWRDYXB0dXJlRXJyb3IiLCJwdXNoSG9zdFJvb3RDb250ZXh0IiwidXBkYXRlSG9zdFJvb3QiLCJwcmV2Q2hpbGRyZW4iLCJ1cGRhdGVIb3N0Q29tcG9uZW50IiwiaXNEaXJlY3RUZXh0Q2hpbGQiLCJ1cGRhdGVIb3N0VGV4dCIsInJlc29sdmVEZWZhdWx0UHJvcHMiLCJiYXNlUHJvcHMiLCJtb3VudExhenlDb21wb25lbnQiLCJfY3VycmVudCIsInJlc29sdmVkVGFnIiwicmVzb2x2ZWRQcm9wcyIsIm1vdW50SW5jb21wbGV0ZUNsYXNzQ29tcG9uZW50IiwibW91bnRJbmRldGVybWluYXRlQ29tcG9uZW50IiwiZGVidWdTb3VyY2UiLCJfY29tcG9uZW50TmFtZTIiLCJ1cGRhdGVTdXNwZW5zZUNvbXBvbmVudCIsIm5leHREaWRUaW1lb3V0IiwibmV4dEZhbGxiYWNrQ2hpbGRyZW4iLCJwcmltYXJ5Q2hpbGRGcmFnbWVudCIsImZhbGxiYWNrQ2hpbGRGcmFnbWVudCIsIm5leHRQcmltYXJ5Q2hpbGRyZW4iLCJwcmV2RGlkVGltZW91dCIsImN1cnJlbnRQcmltYXJ5Q2hpbGRGcmFnbWVudCIsImN1cnJlbnRGYWxsYmFja0NoaWxkRnJhZ21lbnQiLCJfbmV4dEZhbGxiYWNrQ2hpbGRyZW4iLCJfcHJpbWFyeUNoaWxkRnJhZ21lbnQiLCJfZmFsbGJhY2tDaGlsZEZyYWdtZW50IiwiX25leHRQcmltYXJ5Q2hpbGRyZW4iLCJjdXJyZW50UHJpbWFyeUNoaWxkIiwiY3VycmVudEZhbGxiYWNrQ2hpbGQiLCJwcmltYXJ5Q2hpbGQiLCJfY3VycmVudFByaW1hcnlDaGlsZCIsIl9uZXh0RmFsbGJhY2tDaGlsZHJlbjIiLCJfcHJpbWFyeUNoaWxkRnJhZ21lbnQyIiwiX2ZhbGxiYWNrQ2hpbGRGcmFnbWVudDIiLCJfbmV4dFByaW1hcnlDaGlsZHJlbjIiLCJ1cGRhdGVQb3J0YWxDb21wb25lbnQiLCJ1cGRhdGVDb250ZXh0UHJvdmlkZXIiLCJwcm92aWRlclR5cGUiLCJwcm92aWRlclByb3BUeXBlcyIsImhhc1dhcm5lZEFib3V0VXNpbmdDb250ZXh0QXNDb25zdW1lciIsInVwZGF0ZUNvbnRleHRDb25zdW1lciIsImJlZ2luV29yayIsInByaW1hcnlDaGlsZEV4cGlyYXRpb25UaW1lIiwiX2VsZW1lbnRUeXBlIiwidW5yZXNvbHZlZFByb3BzIiwiX0NvbXBvbmVudDIiLCJfdW5yZXNvbHZlZFByb3BzIiwiX3Jlc29sdmVkUHJvcHMiLCJfdW5yZXNvbHZlZFByb3BzMiIsIl9yZXNvbHZlZFByb3BzMiIsIl91bnJlc29sdmVkUHJvcHMzIiwiX3Jlc29sdmVkUHJvcHMzIiwiX0NvbXBvbmVudDMiLCJfdW5yZXNvbHZlZFByb3BzNCIsIl9yZXNvbHZlZFByb3BzNCIsIm1hcmtVcGRhdGUiLCJtYXJrUmVmJDEiLCJhcHBlbmRBbGxDaGlsZHJlbiIsInVwZGF0ZUhvc3RDb250YWluZXIiLCJ1cGRhdGVIb3N0Q29tcG9uZW50JDEiLCJ1cGRhdGVIb3N0VGV4dCQxIiwibmVlZHNWaXNpYmlsaXR5VG9nZ2xlIiwiaXNIaWRkZW4iLCJjdXJyZW50SG9zdENvbnRleHQiLCJicmFuY2hlcyIsIl9pbnN0YW5jZSIsIm9sZElzSGlkZGVuIiwibmV3SXNIaWRkZW4iLCJwcmltYXJ5Q2hpbGRQYXJlbnQiLCJhcHBlbmRBbGxDaGlsZHJlblRvQ29udGFpbmVyIiwiY29udGFpbmVyQ2hpbGRTZXQiLCJfaW5zdGFuY2UyIiwicG9ydGFsT3JSb290IiwiY2hpbGRyZW5VbmNoYW5nZWQiLCJuZXdDaGlsZFNldCIsImN1cnJlbnRJbnN0YW5jZSIsInJlY3ljbGFibGVJbnN0YW5jZSIsIm5ld0luc3RhbmNlIiwiY29tcGxldGVXb3JrIiwiZmliZXJSb290Iiwid2FzSHlkcmF0ZWQiLCJfcm9vdENvbnRhaW5lckluc3RhbmNlIiwiX2N1cnJlbnRIb3N0Q29udGV4dCIsIl93YXNIeWRyYXRlZCIsInNob3VsZENhcHR1cmVTdXNwZW5zZSIsInNob3dFcnJvckRpYWxvZyIsImNhcHR1cmVkRXJyb3IiLCJsb2dDYXB0dXJlZEVycm9yIiwibG9nRXJyb3IiLCJlcnJvckJvdW5kYXJ5TmFtZSIsImVycm9yQm91bmRhcnlGb3VuZCIsIndpbGxSZXRyeSIsImNvbXBvbmVudE5hbWVNZXNzYWdlIiwiZXJyb3JCb3VuZGFyeU1lc3NhZ2UiLCJjb21iaW5lZE1lc3NhZ2UiLCJkaWRXYXJuQWJvdXRVbmRlZmluZWRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImJvdW5kYXJ5IiwiZXJyb3JJbmZvIiwiZXJyb3JCb3VuZGFyeSIsImNhbGxDb21wb25lbnRXaWxsVW5tb3VudFdpdGhUaW1lciIsInNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudCIsInVubW91bnRFcnJvciIsImNhcHR1cmVDb21taXRQaGFzZUVycm9yIiwic2FmZWx5RGV0YWNoUmVmIiwicmVmRXJyb3IiLCJjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXMiLCJzbmFwc2hvdCIsImRpZFdhcm5TZXQiLCJjb21taXRMaWZlQ3ljbGVzIiwiZmluaXNoZWRSb290IiwiY29tbWl0dGVkRXhwaXJhdGlvblRpbWUiLCJfdXBkYXRlUXVldWUiLCJfbmV3U3RhdGUiLCJvbGREaWRUaW1lb3V0IiwibmV3RGlkVGltZW91dCIsImhpZGVPclVuaGlkZUFsbENoaWxkcmVuIiwiX2luc3RhbmNlMyIsImNvbW1pdEF0dGFjaFJlZiIsImluc3RhbmNlVG9Vc2UiLCJjb21taXREZXRhY2hSZWYiLCJjb21taXRVbm1vdW50IiwidW5tb3VudEhvc3RDb21wb25lbnRzIiwiZW1wdHlQb3J0YWxDb250YWluZXIiLCJjb21taXROZXN0ZWRVbm1vdW50cyIsImRldGFjaEZpYmVyIiwiZW1wdHlDaGlsZFNldCIsImNvbW1pdENvbnRhaW5lciIsIl9wZW5kaW5nQ2hpbGRyZW4iLCJnZXRIb3N0UGFyZW50RmliZXIiLCJpc0hvc3RQYXJlbnQiLCJnZXRIb3N0U2libGluZyIsInNpYmxpbmdzIiwiY29tbWl0UGxhY2VtZW50IiwicGFyZW50RmliZXIiLCJpc0NvbnRhaW5lciIsImJlZm9yZSIsImN1cnJlbnRQYXJlbnRJc1ZhbGlkIiwiY3VycmVudFBhcmVudElzQ29udGFpbmVyIiwiZmluZFBhcmVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsImNvbW1pdFJlc2V0VGV4dENvbnRlbnQiLCJjcmVhdGVSb290RXJyb3JVcGRhdGUiLCJvblVuY2F1Z2h0RXJyb3IiLCJjcmVhdGVDbGFzc0Vycm9yVXBkYXRlIiwibWFya0xlZ2FjeUVycm9yQm91bmRhcnlBc0ZhaWxlZCIsInRocm93RXhjZXB0aW9uIiwic291cmNlRmliZXIiLCJfd29ya0luUHJvZ3Jlc3MiLCJlYXJsaWVzdFRpbWVvdXRNcyIsInN0YXJ0VGltZU1zIiwidGltZW91dFByb3BNcyIsInBpbmdUaW1lIiwib25SZXNvbHZlT3JSZWplY3QiLCJyZXRyeVN1c3BlbmRlZFJvb3QiLCJ1bnN0YWJsZV93cmFwIiwiYWJzb2x1dGVUaW1lb3V0TXMiLCJlYXJsaWVzdEV4cGlyYXRpb25UaW1lTXMiLCJyZW5kZXJEaWRTdXNwZW5kIiwicmVuZGVyRGlkRXJyb3IiLCJfZXJyb3JJbmZvIiwiaXNBbHJlYWR5RmFpbGVkTGVnYWN5RXJyb3JCb3VuZGFyeSIsIl91cGRhdGUiLCJ1bndpbmRXb3JrIiwiX2VmZmVjdFRhZyIsIl9lZmZlY3RUYWcyIiwidW53aW5kSW50ZXJydXB0ZWRXb3JrIiwiaW50ZXJydXB0ZWRXb3JrIiwiRGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudE93bmVyJDIiLCJkaWRXYXJuQWJvdXRTdGF0ZVRyYW5zaXRpb24iLCJkaWRXYXJuU2V0U3RhdGVDaGlsZENvbnRleHQiLCJ3YXJuQWJvdXRVcGRhdGVPblVubW91bnRlZCIsIndhcm5BYm91dEludmFsaWRVcGRhdGVzIiwiX19pbnRlcmFjdGlvbnNSZWYiLCJsYXN0VW5pcXVlQXN5bmNFeHBpcmF0aW9uIiwiZXhwaXJhdGlvbkNvbnRleHQiLCJpc1dvcmtpbmciLCJuZXh0Um9vdCIsIm5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSIsIm5leHRMYXRlc3RBYnNvbHV0ZVRpbWVvdXRNcyIsIm5leHRSZW5kZXJEaWRFcnJvciIsImlzQ29tbWl0dGluZyQxIiwibGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQiLCJzdGFzaGVkV29ya0luUHJvZ3Jlc3NQcm9wZXJ0aWVzIiwicmVwbGF5VW5pdE9mV29yayIsImlzUmVwbGF5aW5nRmFpbGVkVW5pdE9mV29yayIsIm9yaWdpbmFsUmVwbGF5RXJyb3IiLCJyZXRocm93T3JpZ2luYWxFcnJvciIsImZhaWxlZFVuaXRPZldvcmsiLCJ0aHJvd25WYWx1ZSIsImlzWWllbGR5Iiwid29ya0xvb3AiLCJyZXBsYXlFcnJvciIsInJlc2V0U3RhY2siLCJjb21taXRBbGxIb3N0RWZmZWN0cyIsInByaW1hcnlFZmZlY3RUYWciLCJfY3VycmVudDIiLCJjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVjeWNsZXMiLCJjb21taXRBbGxMaWZlQ3ljbGVzIiwiY29tbWl0Um9vdCIsInVwZGF0ZUV4cGlyYXRpb25UaW1lQmVmb3JlQ29tbWl0IiwiY2hpbGRFeHBpcmF0aW9uVGltZUJlZm9yZUNvbW1pdCIsImVhcmxpZXN0UmVtYWluaW5nVGltZUJlZm9yZUNvbW1pdCIsInByZXZJbnRlcmFjdGlvbnMiLCJfZGlkRXJyb3IiLCJfZXJyb3IiLCJfZGlkRXJyb3IyIiwiX2Vycm9yMiIsIm9uQ29tbWl0V29yayIsInVwZGF0ZUV4cGlyYXRpb25UaW1lQWZ0ZXJDb21taXQiLCJjaGlsZEV4cGlyYXRpb25UaW1lQWZ0ZXJDb21taXQiLCJlYXJsaWVzdFJlbWFpbmluZ1RpbWVBZnRlckNvbW1pdCIsIm9uQ29tbWl0Iiwic3Vic2NyaWJlciIsIl9fc3Vic2NyaWJlclJlZiIsInRocmVhZElEIiwiY29tcHV0ZVRocmVhZElEIiwib25Xb3JrU3RvcHBlZCIsImhhc1VuaGFuZGxlZEVycm9yIiwidW5oYW5kbGVkRXJyb3IiLCJzY2hlZHVsZWRJbnRlcmFjdGlvbnMiLCJzY2hlZHVsZWRFeHBpcmF0aW9uVGltZSIsImludGVyYWN0aW9uIiwiX19jb3VudCIsIm9uSW50ZXJhY3Rpb25TY2hlZHVsZWRXb3JrQ29tcGxldGVkIiwicmVzZXRDaGlsZEV4cGlyYXRpb25UaW1lIiwicmVuZGVyVGltZSIsIm5ld0NoaWxkRXhwaXJhdGlvblRpbWUiLCJzaG91bGRCdWJibGVBY3R1YWxEdXJhdGlvbnMiLCJjaGlsZFVwZGF0ZUV4cGlyYXRpb25UaW1lIiwiY2hpbGRDaGlsZEV4cGlyYXRpb25UaW1lIiwiX2NoaWxkVXBkYXRlRXhwaXJhdGlvblRpbWUiLCJfY2hpbGRDaGlsZEV4cGlyYXRpb25UaW1lIiwiY29tcGxldGVVbml0T2ZXb3JrIiwic2libGluZ0ZpYmVyIiwib25Db21wbGV0ZVdvcmsiLCJwZXJmb3JtVW5pdE9mV29yayIsIm9uQmVnaW5Xb3JrIiwic2hvdWxkWWllbGQiLCJyZW5kZXJSb290IiwiaXNFeHBpcmVkIiwiaW50ZXJhY3Rpb25zIiwib25Xb3JrU3RhcnRlZCIsImRpZEZhdGFsIiwiX2RpZENvbXBsZXRlUm9vdCIsIm9uRmF0YWwiLCJfZGlkQ29tcGxldGVSb290MiIsIm9uWWllbGQiLCJyb290V29ya0luUHJvZ3Jlc3MiLCJzdXNwZW5kZWRFeHBpcmF0aW9uVGltZSIsInJvb3RFeHBpcmF0aW9uVGltZSIsIm9uU3VzcGVuZCIsIl9zdXNwZW5kZWRFeHBpcmF0aW9uVGltZSIsIl9yb290RXhwaXJhdGlvblRpbWUiLCJfc3VzcGVuZGVkRXhwaXJhdGlvblRpbWUyIiwiY3VycmVudFRpbWVNcyIsIm1zVW50aWxUaW1lb3V0IiwiX3Jvb3RFeHBpcmF0aW9uVGltZTIiLCJvbkNvbXBsZXRlIiwicm9vdEZpYmVyIiwiX2Vycm9ySW5mbzIiLCJfdXBkYXRlMiIsImNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24iLCJpc0JhdGNoaW5nSW50ZXJhY3RpdmVVcGRhdGVzIiwibG93ZXN0UHJpb3JpdHlQZW5kaW5nSW50ZXJhY3RpdmVFeHBpcmF0aW9uVGltZSIsImJvdW5kYXJ5RmliZXIiLCJyZXRyeVRpbWUiLCJzY2hlZHVsZVdvcmtUb1Jvb3QiLCJzb3VyY2VUYWciLCJyZXF1ZXN0V29yayIsInBlbmRpbmdJbnRlcmFjdGlvbnMiLCJvbldvcmtTY2hlZHVsZWQiLCJuZXN0ZWRVcGRhdGVDb3VudCIsIk5FU1RFRF9VUERBVEVfTElNSVQiLCJzeW5jVXBkYXRlcyIsInByZXZpb3VzRXhwaXJhdGlvbkNvbnRleHQiLCJmaXJzdFNjaGVkdWxlZFJvb3QiLCJsYXN0U2NoZWR1bGVkUm9vdCIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja0lEIiwiaXNSZW5kZXJpbmciLCJuZXh0Rmx1c2hlZFJvb3QiLCJuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lIiwiZGVhZGxpbmVEaWRFeHBpcmUiLCJkZWFkbGluZSIsImlzQmF0Y2hpbmdVcGRhdGVzIiwiaXNVbmJhdGNoaW5nVXBkYXRlcyIsImNvbXBsZXRlZEJhdGNoZXMiLCJvcmlnaW5hbFN0YXJ0VGltZU1zIiwiY3VycmVudFJlbmRlcmVyVGltZSIsImN1cnJlbnRTY2hlZHVsZXJUaW1lIiwibGFzdENvbW1pdHRlZFJvb3REdXJpbmdUaGlzQmF0Y2giLCJ0aW1lSGV1cmlzdGljRm9yVW5pdE9mV29yayIsInJlY29tcHV0ZUN1cnJlbnRSZW5kZXJlclRpbWUiLCJzY2hlZHVsZUNhbGxiYWNrV2l0aEV4cGlyYXRpb25UaW1lIiwiY3VycmVudE1zIiwiZXhwaXJhdGlvblRpbWVNcyIsInBlcmZvcm1Bc3luY1dvcmsiLCJvblRpbWVvdXQiLCJmbHVzaFJvb3QiLCJmaW5kSGlnaGVzdFByaW9yaXR5Um9vdCIsImFkZFJvb3RUb1NjaGVkdWxlIiwicGVyZm9ybVdvcmtPblJvb3QiLCJwZXJmb3JtU3luY1dvcmsiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsImhpZ2hlc3RQcmlvcml0eVdvcmsiLCJoaWdoZXN0UHJpb3JpdHlSb290IiwicHJldmlvdXNTY2hlZHVsZWRSb290IiwiZGwiLCJwZXJmb3JtV29yayIsIm1pbkV4cGlyYXRpb25UaW1lIiwiZmluaXNoUmVuZGVyaW5nIiwiYmF0Y2hlcyIsImJhdGNoIiwiY29tcGxldGVSb290IiwiX2ZpbmlzaGVkV29yayIsIl90aW1lb3V0SGFuZGxlIiwiX2lzWWllbGR5IiwiYmF0Y2hlZFVwZGF0ZXMkMSIsInByZXZpb3VzSXNCYXRjaGluZ1VwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiaW50ZXJhY3RpdmVVcGRhdGVzJDEiLCJwcmV2aW91c0lzQmF0Y2hpbmdJbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaEludGVyYWN0aXZlVXBkYXRlcyQxIiwiZmx1c2hDb250cm9sbGVkIiwiZGlkV2FybkFib3V0TmVzdGVkVXBkYXRlcyIsImRpZFdhcm5BYm91dEZpbmROb2RlSW5TdHJpY3RNb2RlIiwiZ2V0Q29udGV4dEZvclN1YnRyZWUiLCJwYXJlbnRDb21wb25lbnQiLCJzY2hlZHVsZVJvb3RVcGRhdGUiLCJ1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lIiwib25Nb3VudENvbnRhaW5lciIsIm9uVW5tb3VudENvbnRhaW5lciIsIm9uVXBkYXRlQ29udGFpbmVyIiwiZmluZEhvc3RJbnN0YW5jZSIsImhvc3RGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VXaXRoV2FybmluZyIsImNyZWF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lciIsImdldFB1YmxpY1Jvb3RJbnN0YW5jZSIsImNvbnRhaW5lckZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJpbmplY3RJbnRvRGV2VG9vbHMiLCJkZXZUb29sc0NvbmZpZyIsImNyZWF0ZVBvcnRhbCQxIiwidG9wTGV2ZWxVcGRhdGVXYXJuaW5ncyIsIndhcm5PbkludmFsaWRDYWxsYmFjayIsImRpZFdhcm5BYm91dFVuc3RhYmxlQ3JlYXRlUG9ydGFsIiwiaG9zdEluc3RhbmNlIiwiaXNSb290UmVuZGVyZWRCeVNvbWVSZWFjdCIsInJvb3RFbCIsImdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lciIsImhhc05vblJvb3RSZWFjdENoaWxkIiwiUmVhY3RCYXRjaCIsImludGVybmFsUm9vdCIsIndvcmsiLCJSZWFjdFdvcmsiLCJjYWxsYmFja3MiLCJSZWFjdFJvb3QiLCJpbnNlcnRBZnRlciIsImlzVmFsaWRDb250YWluZXIiLCJzaG91bGRIeWRyYXRlRHVlVG9MZWdhY3lIZXVyaXN0aWMiLCJyb290RWxlbWVudCIsIndhcm5lZEFib3V0SHlkcmF0ZUFQSSIsImxlZ2FjeUNyZWF0ZVJvb3RGcm9tRE9NQ29udGFpbmVyIiwiZm9yY2VIeWRyYXRlIiwic2hvdWxkSHlkcmF0ZSIsIndhcm5lZCIsInJvb3RTaWJsaW5nIiwibGVnYWN5UmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJvcmlnaW5hbENhbGxiYWNrIiwiX29yaWdpbmFsQ2FsbGJhY2siLCJSZWFjdERPTSIsImNvbXBvbmVudE9yRWxlbWVudCIsIndhcm5lZEFib3V0UmVmc0luUmVuZGVyIiwiY29udGFpbmVyTm9kZSIsInJlbmRlcmVkQnlEaWZmZXJlbnRSZWFjdCIsIl9yb290RWwiLCJpc0NvbnRhaW5lclJlYWN0Um9vdCIsImNyZWF0ZVJvb3QiLCJmb3VuZERldlRvb2xzIiwicHJvdG9jb2wiLCJSZWFjdERPTSQyIiwiUmVhY3RET00kMyIsInJlYWN0RG9tIiwidW5zdGFibGVfY2xlYXIiLCJ1bnN0YWJsZV9nZXRDdXJyZW50IiwidW5zdGFibGVfdHJhY2UiLCJ1bnN0YWJsZV9zdWJzY3JpYmUiLCJ1bnN0YWJsZV91bnN1YnNjcmliZSIsIkRFRkFVTFRfVEhSRUFEX0lEIiwiaW50ZXJhY3Rpb25JRENvdW50ZXIiLCJ0aHJlYWRJRENvdW50ZXIiLCJvbkludGVyYWN0aW9uVHJhY2VkIiwid3JhcHBlZEludGVyYWN0aW9ucyIsImhhc1J1biIsIndyYXBwZWQiLCJjYW5jZWwiLCJvbldvcmtDYW5jZWxlZCIsInN1YnNjcmliZXJzIiwiZGlkQ2F0Y2hFcnJvciIsIkFwcCIsInJlbmRlclJvdXRlcyIsInJvdXRlcyIsIkxvYWRpbmciLCJsb2FkRGF0YSIsInN1cHBvcnQiLCJzZWFyY2hQYXJhbXMiLCJpdGVyYWJsZSIsImJsb2IiLCJCbG9iIiwiZm9ybURhdGEiLCJhcnJheUJ1ZmZlciIsImlzRGF0YVZpZXciLCJEYXRhVmlldyIsImlzUHJvdG90eXBlT2YiLCJ2aWV3Q2xhc3NlcyIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJub3JtYWxpemVOYW1lIiwibm9ybWFsaXplVmFsdWUiLCJpdGVyYXRvckZvciIsInNoaWZ0IiwiSGVhZGVycyIsImFwcGVuZCIsImhlYWRlciIsInRoaXNBcmciLCJjb25zdW1lZCIsImJvZHlVc2VkIiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwib25sb2FkIiwib25lcnJvciIsInJlYWRCbG9iQXNBcnJheUJ1ZmZlciIsIkZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsInJlYWRCbG9iQXNUZXh0IiwicmVhZEFzVGV4dCIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImJ1ZiIsIlVpbnQ4QXJyYXkiLCJidWZmZXJDbG9uZSIsImJ5dGVMZW5ndGgiLCJidWZmZXIiLCJCb2R5IiwiX2luaXRCb2R5IiwiX2JvZHlJbml0IiwiX2JvZHlUZXh0IiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwiVVJMU2VhcmNoUGFyYW1zIiwiX2JvZHlBcnJheUJ1ZmZlciIsInJlamVjdGVkIiwiZGVjb2RlIiwibWV0aG9kcyIsIm5vcm1hbGl6ZU1ldGhvZCIsInVwY2FzZWQiLCJSZXF1ZXN0IiwiY3JlZGVudGlhbHMiLCJzaWduYWwiLCJyZWZlcnJlciIsImJ5dGVzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGFyc2VIZWFkZXJzIiwicmF3SGVhZGVycyIsInByZVByb2Nlc3NlZEhlYWRlcnMiLCJsaW5lIiwiUmVzcG9uc2UiLCJib2R5SW5pdCIsIm9rIiwic3RhdHVzVGV4dCIsInJlc3BvbnNlIiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiUmFuZ2VFcnJvciIsIkRPTUV4Y2VwdGlvbiIsInJlcXVlc3QiLCJhYm9ydGVkIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJhYm9ydFhociIsImFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZVRleHQiLCJvbnRpbWVvdXQiLCJvbmFib3J0Iiwid2l0aENyZWRlbnRpYWxzIiwicmVzcG9uc2VUeXBlIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzZW5kIiwicG9seWZpbGwiLCJlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsIiwiSVRFUkFUT1JfU1lNQk9MIiwiQU5PTllNT1VTIiwiUmVhY3RQcm9wVHlwZXMiLCJjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlciIsInN5bWJvbCIsImFueSIsImNyZWF0ZUFueVR5cGVDaGVja2VyIiwiYXJyYXlPZiIsImNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlciIsImNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlciIsImluc3RhbmNlT2YiLCJjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyIiwiY3JlYXRlTm9kZUNoZWNrZXIiLCJvYmplY3RPZiIsImNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIiLCJvbmVPZiIsImNyZWF0ZUVudW1UeXBlQ2hlY2tlciIsImNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIiLCJjcmVhdGVTaGFwZVR5cGVDaGVja2VyIiwiY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlciIsIlByb3BUeXBlRXJyb3IiLCJjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlciIsInZhbGlkYXRlIiwibWFudWFsUHJvcFR5cGVDYWxsQ2FjaGUiLCJtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCIsImNoZWNrVHlwZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImNoYWluZWRDaGVja1R5cGUiLCJleHBlY3RlZFR5cGUiLCJwcm9wVHlwZSIsImdldFByb3BUeXBlIiwicHJlY2lzZVR5cGUiLCJnZXRQcmVjaXNlVHlwZSIsInR5cGVDaGVja2VyIiwiZXhwZWN0ZWRDbGFzcyIsImV4cGVjdGVkQ2xhc3NOYW1lIiwiYWN0dWFsQ2xhc3NOYW1lIiwiZ2V0Q2xhc3NOYW1lIiwiZXhwZWN0ZWRWYWx1ZXMiLCJ2YWx1ZXNTdHJpbmciLCJhcnJheU9mVHlwZUNoZWNrZXJzIiwiY2hlY2tlciIsImdldFBvc3RmaXhGb3JUeXBlV2FybmluZyIsImlzTm9kZSIsInNoYXBlVHlwZXMiLCJhbGxLZXlzIiwiZW50cnkiLCJpc1N5bWJvbCIsImVtcHR5RnVuY3Rpb24iLCJnZXRTaGltIiwiQnJvd3NlclJvdXRlciIsImZvcmNlUmVmcmVzaCIsIlBvcFN0YXRlRXZlbnQiLCJIYXNoQ2hhbmdlRXZlbnQiLCJnZXRIaXN0b3J5U3RhdGUiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwiaGFuZGxlUG9wU3RhdGUiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwicmV2ZXJ0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImluaXRpYWxMb2NhdGlvbiIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwiaXNBYnNvbHV0ZSIsInNwbGljZU9uZSIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImhhc1RyYWlsaW5nU2xhc2giLCJ1cCIsInBhcnQiLCJ1bnNoaWZ0IiwiYVR5cGUiLCJiVHlwZSIsImFWYWx1ZSIsInZhbHVlT2YiLCJiVmFsdWUiLCJhS2V5cyIsImJLZXlzIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwiZ2V0SGFzaFBhdGgiLCJwdXNoSGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsImNhbkdvV2l0aG91dFJlbG9hZCIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImhhc2hDaGFuZ2VkIiwibmV4dFBhdGhzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwibmV4dEluZGV4IiwibmV4dEVudHJpZXMiLCJjYW5HbyIsIkhhc2hSb3V0ZXIiLCJOYXZMaW5rIiwiYWN0aXZlQ2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJnZXRJc0FjdGl2ZSIsImFyaWFDdXJyZW50IiwicmVzdCIsImVzY2FwZWRQYXRoIiwiUkVBQ1RfU1RBVElDUyIsIm1peGlucyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUiLCJ3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSIsImNyZWF0ZVByb3ZpZGVyIiwiX1Byb3ZpZGVyJGNoaWxkQ29udGV4IiwiUmVhY3RJcyIsIkZPUldBUkRfUkVGX1NUQVRJQ1MiLCJUWVBFX1NUQVRJQ1MiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsInR5cGVPZiIsIkFzeW5jTW9kZSIsIkVsZW1lbnQiLCJQb3J0YWwiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc1Byb2ZpbGVyIiwiaXNQb3J0YWwiLCJpc1N0cmljdE1vZGUiLCIkJHR5cGVvZlR5cGUiLCJoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSIsIkNMRUFSRUQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwiYWRkTmVzdGVkU3ViIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJjcmVhdGVDb25uZWN0IiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsImRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsImRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IiwiY29ubmVjdCIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsIm1lcmdlUHJvcHMiLCJfcmVmMyRwdXJlIiwicHVyZSIsIl9yZWYzJGFyZVN0YXRlc0VxdWFsIiwiYXJlU3RhdGVzRXF1YWwiLCJfcmVmMyRhcmVPd25Qcm9wc0VxdWEiLCJhcmVPd25Qcm9wc0VxdWFsIiwiX3JlZjMkYXJlU3RhdGVQcm9wc0VxIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiX3JlZjMkYXJlTWVyZ2VkUHJvcHNFIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImV4dHJhT3B0aW9ucyIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJoYXNPd24iLCJ3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiIsIndoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmciLCJ3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QiLCJnbG9iYWwiLCJGdW5jdGlvbiIsInBvbnlmaWxsIiwiZXZhbCIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwid2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24iLCJ3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImluaXRNZXJnZVByb3BzUHJveHkiLCJoYXNSdW5PbmNlIiwibWVyZ2VkUHJvcHMiLCJtZXJnZVByb3BzUHJveHkiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24iLCJ3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZCIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3IiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlRmlyc3RDYWxsIiwiZmlyc3RTdGF0ZSIsImZpcnN0T3duUHJvcHMiLCJoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlIiwiaGFuZGxlTmV3UHJvcHMiLCJoYW5kbGVOZXdTdGF0ZSIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0T3duUHJvcHMiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInZlcmlmeVN1YnNlbGVjdG9ycyIsInZlcmlmeSIsIm1hdGNoUm91dGVzIiwiYnJhbmNoIiwic29tZSIsImNvbXB1dGVSb290TWF0Y2giLCJleHRyYVByb3BzIiwic3dpdGNoUHJvcHMiLCJjb3VudGVyIiwiZGF0YVJlZHVjZXIiLCJBRERfVVNFUiIsIklOQ1JFTUVOVCIsIkRFQ1JFTUVOVCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFRLG9CQUFvQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUEwQyxXQUFXLEVBQUU7QUFDdkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBSTtBQUNKOztBQUVBO0FB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QVMxVyxPQUFULENBQWlCdndILEtBQWpCLEVBQXdCO0FBQ25DLE1BQUlBLEtBQUssQ0FBQ2xHLEtBQVYsRUFBaUI7QUFDYixXQUNJLHlFQUNJLGtGQURKLEVBRUk7QUFBUSxhQUFPLEVBQUdrRyxLQUFLLENBQUNpTztBQUF4QixpQkFGSixDQURKO0FBTUgsR0FQRCxNQU9PLElBQUlqTyxLQUFLLENBQUNvTyxTQUFWLEVBQXFCO0FBQ3hCLFdBQ0kseUVBQ0ksb0ZBREosQ0FESjtBQUtILEdBTk0sTUFNQTtBQUNILFdBQU8sSUFBUDtBQUNIO0FBQ0osQyIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gd2luZG93W1wid2VicGFja0pzb25wXCJdO1xuIFx0d2luZG93W1wid2VicGFja0pzb25wXCJdID0gZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBleGVjdXRlTW9kdWxlcykge1xuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW10sIHJlc3VsdDtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGNodW5rSWRzLCBtb3JlTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMpO1xuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0fTtcblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0cyB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4gXHR2YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuIFx0XHQ1OiAwXG4gXHR9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cbiBcdC8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbiBcdC8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5lID0gZnVuY3Rpb24gcmVxdWlyZUVuc3VyZShjaHVua0lkKSB7XG4gXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSA9PT0gMCkge1xuIFx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7IHJlc29sdmUoKTsgfSk7XG4gXHRcdH1cblxuIFx0XHQvLyBhIFByb21pc2UgbWVhbnMgXCJjdXJyZW50bHkgbG9hZGluZ1wiLlxuIFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkQ2h1bmtEYXRhWzJdO1xuIFx0XHR9XG5cbiBcdFx0Ly8gc2V0dXAgUHJvbWlzZSBpbiBjaHVuayBjYWNoZVxuIFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdO1xuIFx0XHR9KTtcbiBcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZTtcblxuIFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG4gXHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiBcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuIFx0XHRzY3JpcHQudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XG4gXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04JztcbiBcdFx0c2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiBcdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjAwMDA7XG5cbiBcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcbiBcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG4gXHRcdH1cbiBcdFx0c2NyaXB0LnNyYyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBjaHVua0lkICsgXCIuYnVuZGxlLmpzXCI7XG4gXHRcdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLCAxMjAwMDApO1xuIFx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlO1xuIFx0XHRmdW5jdGlvbiBvblNjcmlwdENvbXBsZXRlKCkge1xuIFx0XHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cbiBcdFx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuIFx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiBcdFx0XHR2YXIgY2h1bmsgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdFx0aWYoY2h1bmsgIT09IDApIHtcbiBcdFx0XHRcdGlmKGNodW5rKSB7XG4gXHRcdFx0XHRcdGNodW5rWzFdKG5ldyBFcnJvcignTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLicpKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcbiBcdFx0XHR9XG4gXHRcdH07XG4gXHRcdGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcblxuIFx0XHRyZXR1cm4gcHJvbWlzZTtcbiBcdH07XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG4gXHQvLyBvbiBlcnJvciBmdW5jdGlvbiBmb3IgYXN5bmMgbG9hZGluZ1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vZSA9IGZ1bmN0aW9uKGVycikgeyBjb25zb2xlLmVycm9yKGVycik7IHRocm93IGVycjsgfTtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0Myk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgOTg4NzlmYTllMTQyNTY3NTc0NDEiLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIF9fREVWX18gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nO1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChfX0RFVl9fKSB7XG4gIHZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiBwcmludFdhcm5pbmcoZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9XG5cbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHByaW50V2FybmluZy5hcHBseShudWxsLCBbZm9ybWF0XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3dhcm5pbmcvd2FybmluZy5qcyIsImltcG9ydCBfY3JlYXRlQnJvd3Nlckhpc3RvcnkgZnJvbSAnLi9jcmVhdGVCcm93c2VySGlzdG9yeSc7XG5leHBvcnQgeyBfY3JlYXRlQnJvd3Nlckhpc3RvcnkgYXMgY3JlYXRlQnJvd3Nlckhpc3RvcnkgfTtcbmltcG9ydCBfY3JlYXRlSGFzaEhpc3RvcnkgZnJvbSAnLi9jcmVhdGVIYXNoSGlzdG9yeSc7XG5leHBvcnQgeyBfY3JlYXRlSGFzaEhpc3RvcnkgYXMgY3JlYXRlSGFzaEhpc3RvcnkgfTtcbmltcG9ydCBfY3JlYXRlTWVtb3J5SGlzdG9yeSBmcm9tICcuL2NyZWF0ZU1lbW9yeUhpc3RvcnknO1xuZXhwb3J0IHsgX2NyZWF0ZU1lbW9yeUhpc3RvcnkgYXMgY3JlYXRlTWVtb3J5SGlzdG9yeSB9O1xuXG5leHBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuZXhwb3J0IHsgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2luZGV4LmpzIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwiZXhwb3J0IHZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIGhhc0Jhc2VuYW1lID0gZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBwYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbmV4cG9ydCB2YXIgY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuXG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuXG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6ICcjJyArIGhhc2g7XG5cbiAgcmV0dXJuIHBhdGg7XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL1BhdGhVdGlscy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2hpc3Rvcnkvbm9kZV9tb2R1bGVzL3dhcm5pbmcvYnJvd3Nlci5qcyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgeyBwYXJzZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5cbmV4cG9ydCB2YXIgY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxuZXhwb3J0IHZhciBsb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9Mb2NhdGlvblV0aWxzLmpzIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBoaXN0b3J5ID0gX3Byb3BzLmhpc3Rvcnk7XG5cblxuICAgIGludmFyaWFudChjaGlsZHJlbiA9PSBudWxsIHx8IFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMSwgXCJBIDxSb3V0ZXI+IG1heSBoYXZlIG9ubHkgb25lIGNoaWxkIGVsZW1lbnRcIik7XG5cbiAgICAvLyBEbyB0aGlzIGhlcmUgc28gd2UgY2FuIHNldFN0YXRlIHdoZW4gYSA8UmVkaXJlY3Q+IGNoYW5nZXMgdGhlXG4gICAgLy8gbG9jYXRpb24gaW4gY29tcG9uZW50V2lsbE1vdW50LiBUaGlzIGhhcHBlbnMgZS5nLiB3aGVuIGRvaW5nXG4gICAgLy8gc2VydmVyIHJlbmRlcmluZyB1c2luZyBhIDxTdGF0aWNSb3V0ZXI+LlxuICAgIHRoaXMudW5saXN0ZW4gPSBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICBtYXRjaDogX3RoaXMyLmNvbXB1dGVNYXRjaChoaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKHRoaXMucHJvcHMuaGlzdG9yeSA9PT0gbmV4dFByb3BzLmhpc3RvcnksIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICByZXR1cm4gY2hpbGRyZW4gPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5Sb3V0ZXIuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JvdXRlci5qcyIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbnZhciBwYXR0ZXJuQ2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbnZhciBjb21waWxlUGF0aCA9IGZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gXCJcIiArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIGNhY2hlID0gcGF0dGVybkNhY2hlW2NhY2hlS2V5XSB8fCAocGF0dGVybkNhY2hlW2NhY2hlS2V5XSA9IHt9KTtcblxuICBpZiAoY2FjaGVbcGF0dGVybl0pIHJldHVybiBjYWNoZVtwYXR0ZXJuXTtcblxuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmUgPSBwYXRoVG9SZWdleHAocGF0dGVybiwga2V5cywgb3B0aW9ucyk7XG4gIHZhciBjb21waWxlZFBhdHRlcm4gPSB7IHJlOiByZSwga2V5czoga2V5cyB9O1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdHRlcm5dID0gY29tcGlsZWRQYXR0ZXJuO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBjb21waWxlZFBhdHRlcm47XG59O1xuXG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aCBwYXR0ZXJuLlxuICovXG52YXIgbWF0Y2hQYXRoID0gZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgdmFyIHBhcmVudCA9IGFyZ3VtZW50c1syXTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIG9wdGlvbnMgPSB7IHBhdGg6IG9wdGlvbnMgfTtcblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuXG5cbiAgaWYgKHBhdGggPT0gbnVsbCkgcmV0dXJuIHBhcmVudDtcblxuICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgocGF0aCwgeyBlbmQ6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSksXG4gICAgICByZSA9IF9jb21waWxlUGF0aC5yZSxcbiAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICB2YXIgbWF0Y2ggPSByZS5leGVjKHBhdGhuYW1lKTtcblxuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcblxuICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHBhdGgsIC8vIHRoZSBwYXRoIHBhdHRlcm4gdXNlZCB0byBtYXRjaFxuICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgIGlzRXhhY3Q6IGlzRXhhY3QsIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoLmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcbiAgdmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuXG4gIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgdGV4dDtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9O1xufVxuXG4vKipcbiAqIEFzc2VydCB0aGF0IHRoZSB2YWx1ZXMgbWF0Y2ggd2l0aCB0aGUgdHlwZSBzcGVjcy5cbiAqIEVycm9yIG1lc3NhZ2VzIGFyZSBtZW1vcml6ZWQgYW5kIHdpbGwgb25seSBiZSBzaG93biBvbmNlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0eXBlU3BlY3MgTWFwIG9mIG5hbWUgdG8gYSBSZWFjdFByb3BUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gdmFsdWVzIFJ1bnRpbWUgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSB0eXBlLWNoZWNrZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gKiBAcGFyYW0gez9GdW5jdGlvbn0gZ2V0U3RhY2sgUmV0dXJucyB0aGUgY29tcG9uZW50IHN0YWNrLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBnZXRTdGFjaykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGZvciAodmFyIHR5cGVTcGVjTmFtZSBpbiB0eXBlU3BlY3MpIHtcbiAgICAgIGlmICh0eXBlU3BlY3MuaGFzT3duUHJvcGVydHkodHlwZVNwZWNOYW1lKSkge1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgICAgLy8gQWZ0ZXIgdGhlc2UgaGF2ZSBiZWVuIGNsZWFuZWQgdXAsIHdlJ2xsIGxldCB0aGVtIHRocm93LlxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgICBpZiAodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoXG4gICAgICAgICAgICAgIChjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycpICsgJzogJyArIGxvY2F0aW9uICsgJyB0eXBlIGAnICsgdHlwZVNwZWNOYW1lICsgJ2AgaXMgaW52YWxpZDsgJyArXG4gICAgICAgICAgICAgICdpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UsIGJ1dCByZWNlaXZlZCBgJyArIHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSArICdgLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciAmJiAhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJyArXG4gICAgICAgICAgICBsb2NhdGlvbiArICcgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgK1xuICAgICAgICAgICAgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICcgKyB0eXBlb2YgZXJyb3IgKyAnLiAnICtcbiAgICAgICAgICAgICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgK1xuICAgICAgICAgICAgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nXG4gICAgICAgICAgKVxuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG5cbiAgICAgICAgICB2YXIgc3RhY2sgPSBnZXRTdGFjayA/IGdldFN0YWNrKCkgOiAnJztcblxuICAgICAgICAgIHByaW50V2FybmluZyhcbiAgICAgICAgICAgICdGYWlsZWQgJyArIGxvY2F0aW9uICsgJyB0eXBlOiAnICsgZXJyb3IubWVzc2FnZSArIChzdGFjayAhPSBudWxsID8gc3RhY2sgOiAnJylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2hlY2tQcm9wVHlwZXM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcy5qcyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5cbnZhciBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICB2YXIgc2V0UHJvbXB0ID0gZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKTtcblxuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjb25maXJtVHJhbnNpdGlvblRvID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpO1xuXG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgdmFyIGFwcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyLmpzIiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Sb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlci5qcyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcblxudmFyIGlzRW1wdHlDaGlsZHJlbiA9IGZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cbnZhciBSb3V0ZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLCBfdGhpcy5jb250ZXh0LnJvdXRlcilcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKF9yZWYsIHJvdXRlcikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICAgIHBhdGggPSBfcmVmLnBhdGgsXG4gICAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHJldHVybiBjb21wdXRlZE1hdGNoOyAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcblxuICAgIGludmFyaWFudChyb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3Igd2l0aFJvdXRlcigpIG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIHZhciByb3V0ZSA9IHJvdXRlci5yb3V0ZTtcblxuICAgIHZhciBwYXRobmFtZSA9IChsb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbikucGF0aG5hbWU7XG5cbiAgICByZXR1cm4gbWF0Y2hQYXRoKHBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIHN0cmljdDogc3RyaWN0LCBleGFjdDogZXhhY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0sIHJvdXRlLm1hdGNoKTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLnJlbmRlciAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1hdGNoOiB0aGlzLmNvbXB1dGVNYXRjaChuZXh0UHJvcHMsIG5leHRDb250ZXh0LnJvdXRlcilcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBtYXRjaCA9IHRoaXMuc3RhdGUubWF0Y2g7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICByZW5kZXIgPSBfcHJvcHMucmVuZGVyO1xuICAgIHZhciBfY29udGV4dCRyb3V0ZXIgPSB0aGlzLmNvbnRleHQucm91dGVyLFxuICAgICAgICBoaXN0b3J5ID0gX2NvbnRleHQkcm91dGVyLmhpc3RvcnksXG4gICAgICAgIHJvdXRlID0gX2NvbnRleHQkcm91dGVyLnJvdXRlLFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gX2NvbnRleHQkcm91dGVyLnN0YXRpY0NvbnRleHQ7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuICAgIHZhciBwcm9wcyA9IHsgbWF0Y2g6IG1hdGNoLCBsb2NhdGlvbjogbG9jYXRpb24sIGhpc3Rvcnk6IGhpc3RvcnksIHN0YXRpY0NvbnRleHQ6IHN0YXRpY0NvbnRleHQgfTtcblxuICAgIGlmIChjb21wb25lbnQpIHJldHVybiBtYXRjaCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHJlbmRlcikgcmV0dXJuIG1hdGNoID8gcmVuZGVyKHByb3BzKSA6IG51bGw7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBjaGlsZHJlbihwcm9wcyk7XG5cbiAgICBpZiAoY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpIHJldHVybiBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGUucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHBhdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSlcbn07XG5Sb3V0ZS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbnZhciBwYXR0ZXJuQ2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbnZhciBjb21waWxlR2VuZXJhdG9yID0gZnVuY3Rpb24gY29tcGlsZUdlbmVyYXRvcihwYXR0ZXJuKSB7XG4gIHZhciBjYWNoZUtleSA9IHBhdHRlcm47XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGNvbXBpbGVkR2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0dGVybik7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0dGVybl0gPSBjb21waWxlZEdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRHZW5lcmF0b3I7XG59O1xuXG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIGdlbmVyYXRpbmcgYSBVUkwgcGF0aG5hbWUgZnJvbSBhIHBhdHRlcm4gYW5kIHBhcmFtZXRlcnMuXG4gKi9cbnZhciBnZW5lcmF0ZVBhdGggPSBmdW5jdGlvbiBnZW5lcmF0ZVBhdGgoKSB7XG4gIHZhciBwYXR0ZXJuID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBcIi9cIjtcbiAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKHBhdHRlcm4gPT09IFwiL1wiKSB7XG4gICAgcmV0dXJuIHBhdHRlcm47XG4gIH1cbiAgdmFyIGdlbmVyYXRvciA9IGNvbXBpbGVHZW5lcmF0b3IocGF0dGVybik7XG4gIHJldHVybiBnZW5lcmF0b3IocGFyYW1zLCB7IHByZXR0eTogdHJ1ZSB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlUGF0aDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL2dlbmVyYXRlUGF0aC5qcyIsIi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tZW1wdHkgKi9cbiAgfSBjYXRjaCAoZSkge31cbiAgLyogZXNsaW50LWVuYWJsZSBuby1lbXB0eSAqL1xuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3dhcm5pbmcuanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7XG4gICAgZGlzcGF0Y2goe1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUkVQTEFDRVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9ic2VydmFibGVcbiAgICovXG5cblxuICBmdW5jdGlvbiBvYnNlcnZhYmxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIG91dGVyU3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgIHJldHVybiBfcmVmID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWluaW1hbCBvYnNlcnZhYmxlIHN1YnNjcmlwdGlvbiBtZXRob2QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JzZXJ2ZXIgQW55IG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIGFzIGFuIG9ic2VydmVyLlxuICAgICAgICogVGhlIG9ic2VydmVyIG9iamVjdCBzaG91bGQgaGF2ZSBhIGBuZXh0YCBtZXRob2QuXG4gICAgICAgKiBAcmV0dXJucyB7c3Vic2NyaXB0aW9ufSBBbiBvYmplY3Qgd2l0aCBhbiBgdW5zdWJzY3JpYmVgIG1ldGhvZCB0aGF0IGNhblxuICAgICAgICogYmUgdXNlZCB0byB1bnN1YnNjcmliZSB0aGUgb2JzZXJ2YWJsZSBmcm9tIHRoZSBzdG9yZSwgYW5kIHByZXZlbnQgZnVydGhlclxuICAgICAgICogZW1pc3Npb24gb2YgdmFsdWVzIGZyb20gdGhlIG9ic2VydmFibGUuXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JzZXJ2ZXIgIT09ICdvYmplY3QnIHx8IG9ic2VydmVyID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChnZXRTdGF0ZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvYnNlcnZlU3RhdGUoKTtcbiAgICAgICAgdmFyIHVuc3Vic2NyaWJlID0gb3V0ZXJTdWJzY3JpYmUob2JzZXJ2ZVN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogdW5zdWJzY3JpYmVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCBfcmVmWyQkb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9IC8vIFdoZW4gYSBzdG9yZSBpcyBjcmVhdGVkLCBhbiBcIklOSVRcIiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCBzbyB0aGF0IGV2ZXJ5XG4gIC8vIHJlZHVjZXIgcmV0dXJucyB0aGVpciBpbml0aWFsIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAvLyB0aGUgaW5pdGlhbCBzdGF0ZSB0cmVlLlxuXG5cbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgfSk7XG4gIHJldHVybiBfcmVmMiA9IHtcbiAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgIHJlcGxhY2VSZWR1Y2VyOiByZXBsYWNlUmVkdWNlclxuICB9LCBfcmVmMlskJG9ic2VydmFibGVdID0gb2JzZXJ2YWJsZSwgX3JlZjI7XG59XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbikge1xuICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgdmFyIGFjdGlvbkRlc2NyaXB0aW9uID0gYWN0aW9uVHlwZSAmJiBcImFjdGlvbiBcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiB8fCAnYW4gYWN0aW9uJztcbiAgcmV0dXJuIFwiR2l2ZW4gXCIgKyBhY3Rpb25EZXNjcmlwdGlvbiArIFwiLCByZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIjtcbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiBcIiArIChcIkRvbid0IHRyeSB0byBoYW5kbGUgXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCIgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTtcbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UoX2tleSwgYWN0aW9uKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWN0aW9uQ3JlYXRvcnMpO1xuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gXCIgKyBcIk90aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC5cIik7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlU3RvcmUsIGNvbWJpbmVSZWR1Y2VycywgYmluZEFjdGlvbkNyZWF0b3JzLCBhcHBseU1pZGRsZXdhcmUsIGNvbXBvc2UsIEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMgfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZShcInByb3AtdHlwZXNcIik7XG5cbnZhciBBTExfSU5JVElBTElaRVJTID0gW107XG52YXIgUkVBRFlfSU5JVElBTElaRVJTID0gW107XG5cbmZ1bmN0aW9uIGlzV2VicGFja1JlYWR5KGdldE1vZHVsZUlkcykge1xuICBpZiAoKHR5cGVvZiBfX3dlYnBhY2tfbW9kdWxlc19fID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoX193ZWJwYWNrX21vZHVsZXNfXykpICE9PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGdldE1vZHVsZUlkcygpLmV2ZXJ5KGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuICAgIHJldHVybiB0eXBlb2YgbW9kdWxlSWQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdICE9PSBcInVuZGVmaW5lZFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbG9hZChsb2FkZXIpIHtcbiAgdmFyIHByb21pc2UgPSBsb2FkZXIoKTtcblxuICB2YXIgc3RhdGUgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBsb2FkZWQ6IG51bGwsXG4gICAgZXJyb3I6IG51bGxcbiAgfTtcblxuICBzdGF0ZS5wcm9taXNlID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChsb2FkZWQpIHtcbiAgICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgc3RhdGUubG9hZGVkID0gbG9hZGVkO1xuICAgIHJldHVybiBsb2FkZWQ7XG4gIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgc3RhdGUuZXJyb3IgPSBlcnI7XG4gICAgdGhyb3cgZXJyO1xuICB9KTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbmZ1bmN0aW9uIGxvYWRNYXAob2JqKSB7XG4gIHZhciBzdGF0ZSA9IHtcbiAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICBsb2FkZWQ6IHt9LFxuICAgIGVycm9yOiBudWxsXG4gIH07XG5cbiAgdmFyIHByb21pc2VzID0gW107XG5cbiAgdHJ5IHtcbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvYWQob2JqW2tleV0pO1xuXG4gICAgICBpZiAoIXJlc3VsdC5sb2FkaW5nKSB7XG4gICAgICAgIHN0YXRlLmxvYWRlZFtrZXldID0gcmVzdWx0LmxvYWRlZDtcbiAgICAgICAgc3RhdGUuZXJyb3IgPSByZXN1bHQuZXJyb3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcHJvbWlzZXMucHVzaChyZXN1bHQucHJvbWlzZSk7XG5cbiAgICAgIHJlc3VsdC5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICBzdGF0ZS5sb2FkZWRba2V5XSA9IHJlcztcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgc3RhdGUuZXJyb3IgPSBlcnI7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgc3RhdGUuZXJyb3IgPSBlcnI7XG4gIH1cblxuICBzdGF0ZS5wcm9taXNlID0gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICByZXR1cm4gcmVzO1xuICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUubG9hZGluZyA9IGZhbHNlO1xuICAgIHRocm93IGVycjtcbiAgfSk7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqLmRlZmF1bHQgOiBvYmo7XG59XG5cbmZ1bmN0aW9uIHJlbmRlcihsb2FkZWQsIHByb3BzKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KHJlc29sdmUobG9hZGVkKSwgcHJvcHMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2FkYWJsZUNvbXBvbmVudChsb2FkRm4sIG9wdGlvbnMpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgaWYgKCFvcHRpb25zLmxvYWRpbmcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWFjdC1sb2FkYWJsZSByZXF1aXJlcyBhIGBsb2FkaW5nYCBjb21wb25lbnRcIik7XG4gIH1cblxuICB2YXIgb3B0cyA9IE9iamVjdC5hc3NpZ24oe1xuICAgIGxvYWRlcjogbnVsbCxcbiAgICBsb2FkaW5nOiBudWxsLFxuICAgIGRlbGF5OiAyMDAsXG4gICAgdGltZW91dDogbnVsbCxcbiAgICByZW5kZXI6IHJlbmRlcixcbiAgICB3ZWJwYWNrOiBudWxsLFxuICAgIG1vZHVsZXM6IG51bGxcbiAgfSwgb3B0aW9ucyk7XG5cbiAgdmFyIHJlcyA9IG51bGw7XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBpZiAoIXJlcykge1xuICAgICAgcmVzID0gbG9hZEZuKG9wdHMubG9hZGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5wcm9taXNlO1xuICB9XG5cbiAgQUxMX0lOSVRJQUxJWkVSUy5wdXNoKGluaXQpO1xuXG4gIGlmICh0eXBlb2Ygb3B0cy53ZWJwYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBSRUFEWV9JTklUSUFMSVpFUlMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNXZWJwYWNrUmVhZHkob3B0cy53ZWJwYWNrKSkge1xuICAgICAgICByZXR1cm4gaW5pdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIF90ZW1wID0gX2NsYXNzID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGFibGVDb21wb25lbnQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGFibGVDb21wb25lbnQocHJvcHMpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkYWJsZUNvbXBvbmVudCk7XG5cbiAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICBfdGhpcy5yZXRyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBlcnJvcjogbnVsbCwgbG9hZGluZzogdHJ1ZSwgdGltZWRPdXQ6IGZhbHNlIH0pO1xuICAgICAgICByZXMgPSBsb2FkRm4ob3B0cy5sb2FkZXIpO1xuICAgICAgICBfdGhpcy5fbG9hZE1vZHVsZSgpO1xuICAgICAgfTtcblxuICAgICAgaW5pdCgpO1xuXG4gICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgZXJyb3I6IHJlcy5lcnJvcixcbiAgICAgICAgcGFzdERlbGF5OiBmYWxzZSxcbiAgICAgICAgdGltZWRPdXQ6IGZhbHNlLFxuICAgICAgICBsb2FkaW5nOiByZXMubG9hZGluZyxcbiAgICAgICAgbG9hZGVkOiByZXMubG9hZGVkXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIExvYWRhYmxlQ29tcG9uZW50LnByZWxvYWQgPSBmdW5jdGlvbiBwcmVsb2FkKCkge1xuICAgICAgcmV0dXJuIGluaXQoKTtcbiAgICB9O1xuXG4gICAgTG9hZGFibGVDb21wb25lbnQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIHRoaXMuX21vdW50ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fbG9hZE1vZHVsZSgpO1xuICAgIH07XG5cbiAgICBMb2FkYWJsZUNvbXBvbmVudC5wcm90b3R5cGUuX2xvYWRNb2R1bGUgPSBmdW5jdGlvbiBfbG9hZE1vZHVsZSgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5jb250ZXh0LmxvYWRhYmxlICYmIEFycmF5LmlzQXJyYXkob3B0cy5tb2R1bGVzKSkge1xuICAgICAgICBvcHRzLm1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlTmFtZSkge1xuICAgICAgICAgIF90aGlzMi5jb250ZXh0LmxvYWRhYmxlLnJlcG9ydChtb2R1bGVOYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVzLmxvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG9wdHMuZGVsYXkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgaWYgKG9wdHMuZGVsYXkgPT09IDApIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcGFzdERlbGF5OiB0cnVlIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2RlbGF5ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoeyBwYXN0RGVsYXk6IHRydWUgfSk7XG4gICAgICAgICAgfSwgb3B0cy5kZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBvcHRzLnRpbWVvdXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7IHRpbWVkT3V0OiB0cnVlIH0pO1xuICAgICAgICB9LCBvcHRzLnRpbWVvdXQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICBpZiAoIV90aGlzMi5fbW91bnRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgZXJyb3I6IHJlcy5lcnJvcixcbiAgICAgICAgICBsb2FkZWQ6IHJlcy5sb2FkZWQsXG4gICAgICAgICAgbG9hZGluZzogcmVzLmxvYWRpbmdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgX3RoaXMyLl9jbGVhclRpbWVvdXRzKCk7XG4gICAgICB9O1xuXG4gICAgICByZXMucHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdXBkYXRlKCk7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHVwZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIExvYWRhYmxlQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5fbW91bnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fY2xlYXJUaW1lb3V0cygpO1xuICAgIH07XG5cbiAgICBMb2FkYWJsZUNvbXBvbmVudC5wcm90b3R5cGUuX2NsZWFyVGltZW91dHMgPSBmdW5jdGlvbiBfY2xlYXJUaW1lb3V0cygpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9kZWxheSk7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgfTtcblxuICAgIExvYWRhYmxlQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5sb2FkaW5nIHx8IHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQob3B0cy5sb2FkaW5nLCB7XG4gICAgICAgICAgaXNMb2FkaW5nOiB0aGlzLnN0YXRlLmxvYWRpbmcsXG4gICAgICAgICAgcGFzdERlbGF5OiB0aGlzLnN0YXRlLnBhc3REZWxheSxcbiAgICAgICAgICB0aW1lZE91dDogdGhpcy5zdGF0ZS50aW1lZE91dCxcbiAgICAgICAgICBlcnJvcjogdGhpcy5zdGF0ZS5lcnJvcixcbiAgICAgICAgICByZXRyeTogdGhpcy5yZXRyeVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5sb2FkZWQpIHtcbiAgICAgICAgcmV0dXJuIG9wdHMucmVuZGVyKHRoaXMuc3RhdGUubG9hZGVkLCB0aGlzLnByb3BzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gTG9hZGFibGVDb21wb25lbnQ7XG4gIH0oUmVhY3QuQ29tcG9uZW50KSwgX2NsYXNzLmNvbnRleHRUeXBlcyA9IHtcbiAgICBsb2FkYWJsZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHJlcG9ydDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pXG4gIH0sIF90ZW1wO1xufVxuXG5mdW5jdGlvbiBMb2FkYWJsZShvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVMb2FkYWJsZUNvbXBvbmVudChsb2FkLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gTG9hZGFibGVNYXAob3B0cykge1xuICBpZiAodHlwZW9mIG9wdHMucmVuZGVyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJMb2FkYWJsZU1hcCByZXF1aXJlcyBhIGByZW5kZXIobG9hZGVkLCBwcm9wcylgIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZUxvYWRhYmxlQ29tcG9uZW50KGxvYWRNYXAsIG9wdHMpO1xufVxuXG5Mb2FkYWJsZS5NYXAgPSBMb2FkYWJsZU1hcDtcblxudmFyIENhcHR1cmUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudDIpIHtcbiAgX2luaGVyaXRzKENhcHR1cmUsIF9SZWFjdCRDb21wb25lbnQyKTtcblxuICBmdW5jdGlvbiBDYXB0dXJlKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDYXB0dXJlKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIENhcHR1cmUucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbG9hZGFibGU6IHtcbiAgICAgICAgcmVwb3J0OiB0aGlzLnByb3BzLnJlcG9ydFxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgQ2FwdHVyZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICB9O1xuXG4gIHJldHVybiBDYXB0dXJlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5DYXB0dXJlLnByb3BUeXBlcyA9IHtcbiAgcmVwb3J0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59O1xuQ2FwdHVyZS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgbG9hZGFibGU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcmVwb3J0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuTG9hZGFibGUuQ2FwdHVyZSA9IENhcHR1cmU7XG5cbmZ1bmN0aW9uIGZsdXNoSW5pdGlhbGl6ZXJzKGluaXRpYWxpemVycykge1xuICB2YXIgcHJvbWlzZXMgPSBbXTtcblxuICB3aGlsZSAoaW5pdGlhbGl6ZXJzLmxlbmd0aCkge1xuICAgIHZhciBpbml0ID0gaW5pdGlhbGl6ZXJzLnBvcCgpO1xuICAgIHByb21pc2VzLnB1c2goaW5pdCgpKTtcbiAgfVxuXG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGluaXRpYWxpemVycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmbHVzaEluaXRpYWxpemVycyhpbml0aWFsaXplcnMpO1xuICAgIH1cbiAgfSk7XG59XG5cbkxvYWRhYmxlLnByZWxvYWRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgZmx1c2hJbml0aWFsaXplcnMoQUxMX0lOSVRJQUxJWkVSUykudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICB9KTtcbn07XG5cbkxvYWRhYmxlLnByZWxvYWRSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAvLyBXZSBhbHdheXMgd2lsbCByZXNvbHZlLCBlcnJvcnMgc2hvdWxkIGJlIGhhbmRsZWQgd2l0aGluIGxvYWRpbmcgVUlzLlxuICAgIGZsdXNoSW5pdGlhbGl6ZXJzKFJFQURZX0lOSVRJQUxJWkVSUykudGhlbihyZXNvbHZlLCByZXNvbHZlKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExvYWRhYmxlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1sb2FkYWJsZS9saWIvaW5kZXguanMiLCJleHBvcnQgdmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbmV4cG9ydCB2YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciByZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIGdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5leHBvcnQgdmFyIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgPSBmdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0RPTVV0aWxzLmpzIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tIFwiaGlzdG9yeVwiO1xuXG52YXIgaXNNb2RpZmllZEV2ZW50ID0gZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cbnZhciBMaW5rID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIV90aGlzLnByb3BzLnRhcmdldCAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICB2YXIgaGlzdG9yeSA9IF90aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICAgIHJlcGxhY2UgPSBfdGhpcyRwcm9wcy5yZXBsYWNlLFxuICAgICAgICAgICAgICB0byA9IF90aGlzJHByb3BzLnRvO1xuXG5cbiAgICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIExpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcmVwbGFjZSA9IF9wcm9wcy5yZXBsYWNlLFxuICAgICAgICB0byA9IF9wcm9wcy50byxcbiAgICAgICAgaW5uZXJSZWYgPSBfcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgW1wicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgIGludmFyaWFudCh0byAhPT0gdW5kZWZpbmVkLCAnWW91IG11c3Qgc3BlY2lmeSB0aGUgXCJ0b1wiIHByb3BlcnR5Jyk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcblxuICAgIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBoaXN0b3J5LmxvY2F0aW9uKSA6IHRvO1xuXG4gICAgdmFyIGhyZWYgPSBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgb25DbGljazogdGhpcy5oYW5kbGVDbGljaywgaHJlZjogaHJlZiwgcmVmOiBpbm5lclJlZiB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpbms7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkxpbmsucHJvcFR5cGVzID0ge1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkLFxuICBpbm5lclJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmNdKVxufTtcbkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICByZXBsYWNlOiBmYWxzZVxufTtcbkxpbmsuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgY3JlYXRlSHJlZjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBMaW5rO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0xpbmsuanMiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbW9yeVJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyLmpzIiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZSBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1JvdXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlLmpzIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXlcbiAqIGZyb20gYSBzY3JlZW4gd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUHJvbXB0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb21wdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvbXB0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9tcHQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQcm9tcHQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZShtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykgdGhpcy51bmJsb2NrKCk7XG5cbiAgICB0aGlzLnVuYmxvY2sgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuYmxvY2sobWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHRoaXMudW5ibG9jayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpZiAodGhpcy5wcm9wcy53aGVuKSB0aGlzLmVuYWJsZSh0aGlzLnByb3BzLm1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy53aGVuKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMud2hlbiB8fCB0aGlzLnByb3BzLm1lc3NhZ2UgIT09IG5leHRQcm9wcy5tZXNzYWdlKSB0aGlzLmVuYWJsZShuZXh0UHJvcHMubWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5kaXNhYmxlKCk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFByb21wdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gIG1lc3NhZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZFxufTtcblByb21wdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHdoZW46IHRydWVcbn07XG5Qcm9tcHQuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGJsb2NrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1Byb21wdC5qcyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBnZW5lcmF0ZVBhdGggZnJvbSBcIi4vZ2VuZXJhdGVQYXRoXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHVwZGF0aW5nIHRoZSBsb2NhdGlvbiBwcm9ncmFtbWF0aWNhbGx5XG4gKiB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbnZhciBSZWRpcmVjdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZWRpcmVjdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVkaXJlY3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZGlyZWN0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmlzU3RhdGljID0gZnVuY3Rpb24gaXNTdGF0aWMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5yb3V0ZXIgJiYgdGhpcy5jb250ZXh0LnJvdXRlci5zdGF0aWNDb250ZXh0O1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgaWYgKHRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHByZXZUbyA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG4gICAgdmFyIG5leHRUbyA9IGNyZWF0ZUxvY2F0aW9uKHRoaXMucHJvcHMudG8pO1xuXG4gICAgaWYgKGxvY2F0aW9uc0FyZUVxdWFsKHByZXZUbywgbmV4dFRvKSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJZb3UgdHJpZWQgdG8gcmVkaXJlY3QgdG8gdGhlIHNhbWUgcm91dGUgeW91J3JlIGN1cnJlbnRseSBvbjogXCIgKyAoXCJcXFwiXCIgKyBuZXh0VG8ucGF0aG5hbWUgKyBuZXh0VG8uc2VhcmNoICsgXCJcXFwiXCIpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcHV0ZVRvID0gZnVuY3Rpb24gY29tcHV0ZVRvKF9yZWYpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgdG8gPSBfcmVmLnRvO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHtcbiAgICAgIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG87XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnBlcmZvcm0gPSBmdW5jdGlvbiBwZXJmb3JtKCkge1xuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgIHZhciBwdXNoID0gdGhpcy5wcm9wcy5wdXNoO1xuXG4gICAgdmFyIHRvID0gdGhpcy5jb21wdXRlVG8odGhpcy5wcm9wcyk7XG5cbiAgICBpZiAocHVzaCkge1xuICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICB9XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUmVkaXJlY3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZnJvbTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG59O1xuUmVkaXJlY3QuZGVmYXVsdFByb3BzID0ge1xuICBwdXNoOiBmYWxzZVxufTtcblJlZGlyZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3QuanMiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGNyZWF0ZVBhdGggfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxudmFyIGFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufTtcblxudmFyIGFkZEJhc2VuYW1lID0gZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn07XG5cbnZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcblxuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn07XG5cbnZhciBjcmVhdGVVUkwgPSBmdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59O1xuXG52YXIgc3RhdGljSGFuZGxlciA9IGZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSk7XG4gIH07XG59O1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aWNSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNyZWF0ZUhyZWYgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChfdGhpcy5wcm9wcy5iYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSBcIlBVU0hcIjtcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gXCJSRVBMQUNFXCI7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjoge1xuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLmNvbnRleHRcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIik7XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJhc2VuYW1lID0gX3Byb3BzLmJhc2VuYW1lLFxuICAgICAgICBjb250ZXh0ID0gX3Byb3BzLmNvbnRleHQsXG4gICAgICAgIGxvY2F0aW9uID0gX3Byb3BzLmxvY2F0aW9uLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogdGhpcy5jcmVhdGVIcmVmLFxuICAgICAgYWN0aW9uOiBcIlBPUFwiLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcihcImdvXCIpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKFwiZ29CYWNrXCIpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKFwiZ29Gb3J3YXJkXCIpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGhpc3Rvcnk6IGhpc3RvcnkgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbn07XG5TdGF0aWNSb3V0ZXIuZGVmYXVsdFByb3BzID0ge1xuICBiYXNlbmFtZTogXCJcIixcbiAgbG9jYXRpb246IFwiL1wiXG59O1xuU3RhdGljUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXIuanMiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3dpdGNoKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciByb3V0ZSA9IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGU7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG5cbiAgICB2YXIgbWF0Y2ggPSB2b2lkIDAsXG4gICAgICAgIGNoaWxkID0gdm9pZCAwO1xuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgICB2YXIgX2VsZW1lbnQkcHJvcHMgPSBlbGVtZW50LnByb3BzLFxuICAgICAgICAgICAgcGF0aFByb3AgPSBfZWxlbWVudCRwcm9wcy5wYXRoLFxuICAgICAgICAgICAgZXhhY3QgPSBfZWxlbWVudCRwcm9wcy5leGFjdCxcbiAgICAgICAgICAgIHN0cmljdCA9IF9lbGVtZW50JHByb3BzLnN0cmljdCxcbiAgICAgICAgICAgIHNlbnNpdGl2ZSA9IF9lbGVtZW50JHByb3BzLnNlbnNpdGl2ZSxcbiAgICAgICAgICAgIGZyb20gPSBfZWxlbWVudCRwcm9wcy5mcm9tO1xuXG4gICAgICAgIHZhciBwYXRoID0gcGF0aFByb3AgfHwgZnJvbTtcblxuICAgICAgICBjaGlsZCA9IGVsZW1lbnQ7XG4gICAgICAgIG1hdGNoID0gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIGV4YWN0OiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0sIHJvdXRlLm1hdGNoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgeyBsb2NhdGlvbjogbG9jYXRpb24sIGNvbXB1dGVkTWF0Y2g6IG1hdGNoIH0pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Td2l0Y2guY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Td2l0Y2guanMiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSBcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xudmFyIHdpdGhSb3V0ZXIgPSBmdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4ocm91dGVDb21wb25lbnRQcm9wcykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgcm91dGVDb21wb25lbnRQcm9wcywge1xuICAgICAgICAgIHJlZjogd3JhcHBlZENvbXBvbmVudFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcbiAgQy5wcm9wVHlwZXMgPSB7XG4gICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLmZ1bmNcbiAgfTtcblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvd2l0aFJvdXRlci5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5leHBvcnQgdmFyIHN1YnNjcmlwdGlvblNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgdHJ5U3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB0cnlVbnN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgbm90aWZ5TmVzdGVkU3ViczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgaXNTdWJzY3JpYmVkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTtcbmV4cG9ydCB2YXIgc3RvcmVTaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvUHJvcFR5cGVzLmpzIiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgX2Fzc2VydFRoaXNJbml0aWFsaXplZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG52YXIgaG90UmVsb2FkaW5nVmVyc2lvbiA9IDA7XG52YXIgZHVtbXlTdGF0ZSA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gbWFrZVNlbGVjdG9yU3RhdGVmdWwoc291cmNlU2VsZWN0b3IsIHN0b3JlKSB7XG4gIC8vIHdyYXAgdGhlIHNlbGVjdG9yIGluIGFuIG9iamVjdCB0aGF0IHRyYWNrcyBpdHMgcmVzdWx0cyBiZXR3ZWVuIHJ1bnMuXG4gIHZhciBzZWxlY3RvciA9IHtcbiAgICBydW46IGZ1bmN0aW9uIHJ1bkNvbXBvbmVudFNlbGVjdG9yKHByb3BzKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmV4dFByb3BzID0gc291cmNlU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgcHJvcHMpO1xuXG4gICAgICAgIGlmIChuZXh0UHJvcHMgIT09IHNlbGVjdG9yLnByb3BzIHx8IHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICBzZWxlY3Rvci5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgICAgICBzZWxlY3Rvci5lcnJvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IHRydWU7XG4gICAgICAgIHNlbGVjdG9yLmVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gc2VsZWN0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxuICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcbiAgICB9KSkoWW91ckNvbXBvbmVudClcbiAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXG4qL1xuc2VsZWN0b3JGYWN0b3J5LCAvLyBvcHRpb25zIG9iamVjdDpcbl9yZWYpIHtcbiAgdmFyIF9jb250ZXh0VHlwZXMsIF9jaGlsZENvbnRleHRUeXBlcztcblxuICBpZiAoX3JlZiA9PT0gdm9pZCAwKSB7XG4gICAgX3JlZiA9IHt9O1xuICB9XG5cbiAgdmFyIF9yZWYyID0gX3JlZixcbiAgICAgIF9yZWYyJGdldERpc3BsYXlOYW1lID0gX3JlZjIuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYyJGdldERpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBcIkNvbm5lY3RBZHZhbmNlZChcIiArIG5hbWUgKyBcIilcIjtcbiAgfSA6IF9yZWYyJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZjIkbWV0aG9kTmFtZSA9IF9yZWYyLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZjIkbWV0aG9kTmFtZSA9PT0gdm9pZCAwID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmMiRtZXRob2ROYW1lLFxuICAgICAgX3JlZjIkcmVuZGVyQ291bnRQcm9wID0gX3JlZjIucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZjIkcmVuZGVyQ291bnRQcm9wID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmMiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPSBfcmVmMi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRzaG91bGRIYW5kbGVTdGEsXG4gICAgICBfcmVmMiRzdG9yZUtleSA9IF9yZWYyLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmMiRzdG9yZUtleSA9PT0gdm9pZCAwID8gJ3N0b3JlJyA6IF9yZWYyJHN0b3JlS2V5LFxuICAgICAgX3JlZjIkd2l0aFJlZiA9IF9yZWYyLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZjIkd2l0aFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR3aXRoUmVmLFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiZ2V0RGlzcGxheU5hbWVcIiwgXCJtZXRob2ROYW1lXCIsIFwicmVuZGVyQ291bnRQcm9wXCIsIFwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzXCIsIFwic3RvcmVLZXlcIiwgXCJ3aXRoUmVmXCJdKTtcblxuICB2YXIgc3Vic2NyaXB0aW9uS2V5ID0gc3RvcmVLZXkgKyAnU3Vic2NyaXB0aW9uJztcbiAgdmFyIHZlcnNpb24gPSBob3RSZWxvYWRpbmdWZXJzaW9uKys7XG4gIHZhciBjb250ZXh0VHlwZXMgPSAoX2NvbnRleHRUeXBlcyA9IHt9LCBfY29udGV4dFR5cGVzW3N0b3JlS2V5XSA9IHN0b3JlU2hhcGUsIF9jb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY29udGV4dFR5cGVzKTtcbiAgdmFyIGNoaWxkQ29udGV4dFR5cGVzID0gKF9jaGlsZENvbnRleHRUeXBlcyA9IHt9LCBfY2hpbGRDb250ZXh0VHlwZXNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvblNoYXBlLCBfY2hpbGRDb250ZXh0VHlwZXMpO1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcFdpdGhDb25uZWN0KFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICBpbnZhcmlhbnQoaXNWYWxpZEVsZW1lbnRUeXBlKFdyYXBwZWRDb21wb25lbnQpLCBcIllvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IFwiICsgKG1ldGhvZE5hbWUgKyBcIi4gSW5zdGVhZCByZWNlaXZlZCBcIiArIEpTT04uc3RyaW5naWZ5KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgd2l0aFJlZjogd2l0aFJlZixcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnQgLy8gVE9ETyBBY3R1YWxseSBmaXggb3VyIHVzZSBvZiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzXG5cbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLWRlcHJlY2F0ZWQgKi9cblxuICAgIH0pO1xuXG4gICAgdmFyIENvbm5lY3QgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgX2luaGVyaXRzTG9vc2UoQ29ubmVjdCwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIENvbm5lY3QocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzO1xuXG4gICAgICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7fTtcbiAgICAgICAgX3RoaXMucmVuZGVyQ291bnQgPSAwO1xuICAgICAgICBfdGhpcy5zdG9yZSA9IHByb3BzW3N0b3JlS2V5XSB8fCBjb250ZXh0W3N0b3JlS2V5XTtcbiAgICAgICAgX3RoaXMucHJvcHNNb2RlID0gQm9vbGVhbihwcm9wc1tzdG9yZUtleV0pO1xuICAgICAgICBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UgPSBfdGhpcy5zZXRXcmFwcGVkSW5zdGFuY2UuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7XG4gICAgICAgIGludmFyaWFudChfdGhpcy5zdG9yZSwgXCJDb3VsZCBub3QgZmluZCBcXFwiXCIgKyBzdG9yZUtleSArIFwiXFxcIiBpbiBlaXRoZXIgdGhlIGNvbnRleHQgb3IgcHJvcHMgb2YgXCIgKyAoXCJcXFwiXCIgKyBkaXNwbGF5TmFtZSArIFwiXFxcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgXCIpICsgKFwib3IgZXhwbGljaXRseSBwYXNzIFxcXCJcIiArIHN0b3JlS2V5ICsgXCJcXFwiIGFzIGEgcHJvcCB0byBcXFwiXCIgKyBkaXNwbGF5TmFtZSArIFwiXFxcIi5cIikpO1xuXG4gICAgICAgIF90aGlzLmluaXRTZWxlY3RvcigpO1xuXG4gICAgICAgIF90aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcblxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvdG8gPSBDb25uZWN0LnByb3RvdHlwZTtcblxuICAgICAgX3Byb3RvLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgICAgdmFyIF9yZWYzO1xuXG4gICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IHJlY2VpdmVkIHN0b3JlIGZyb20gcHJvcHMsIGl0cyBzdWJzY3JpcHRpb24gc2hvdWxkIGJlIHRyYW5zcGFyZW50XG4gICAgICAgIC8vIHRvIGFueSBkZXNjZW5kYW50cyByZWNlaXZpbmcgc3RvcmUrc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dDsgaXQgcGFzc2VzIGFsb25nXG4gICAgICAgIC8vIHN1YnNjcmlwdGlvbiBwYXNzZWQgdG8gaXQuIE90aGVyd2lzZSwgaXQgc2hhZG93cyB0aGUgcGFyZW50IHN1YnNjcmlwdGlvbiwgd2hpY2ggYWxsb3dzXG4gICAgICAgIC8vIENvbm5lY3QgdG8gY29udHJvbCBvcmRlcmluZyBvZiBub3RpZmljYXRpb25zIHRvIGZsb3cgdG9wLWRvd24uXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLnByb3BzTW9kZSA/IG51bGwgOiB0aGlzLnN1YnNjcmlwdGlvbjtcbiAgICAgICAgcmV0dXJuIF9yZWYzID0ge30sIF9yZWYzW3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb24gfHwgdGhpcy5jb250ZXh0W3N1YnNjcmlwdGlvbktleV0sIF9yZWYzO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47IC8vIGNvbXBvbmVudFdpbGxNb3VudCBmaXJlcyBkdXJpbmcgc2VydmVyIHNpZGUgcmVuZGVyaW5nLCBidXQgY29tcG9uZW50RGlkTW91bnQgYW5kXG4gICAgICAgIC8vIGNvbXBvbmVudFdpbGxVbm1vdW50IGRvIG5vdC4gQmVjYXVzZSBvZiB0aGlzLCB0cnlTdWJzY3JpYmUgaGFwcGVucyBkdXJpbmcgLi4uZGlkTW91bnQuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgdW5zdWJzY3JpcHRpb24gd291bGQgbmV2ZXIgdGFrZSBwbGFjZSBkdXJpbmcgU1NSLCBjYXVzaW5nIGEgbWVtb3J5IGxlYWsuXG4gICAgICAgIC8vIFRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSBhIGNoaWxkIGNvbXBvbmVudCBtYXkgaGF2ZSB0cmlnZ2VyZWQgYSBzdGF0ZSBjaGFuZ2UgYnlcbiAgICAgICAgLy8gZGlzcGF0Y2hpbmcgYW4gYWN0aW9uIGluIGl0cyBjb21wb25lbnRXaWxsTW91bnQsIHdlIGhhdmUgdG8gcmUtcnVuIHRoZSBzZWxlY3QgYW5kIG1heWJlXG4gICAgICAgIC8vIHJlLXJlbmRlci5cblxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bihuZXh0UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMgPSBub29wO1xuICAgICAgICB0aGlzLnN0b3JlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4gPSBub29wO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmdldFdyYXBwZWRJbnN0YW5jZSA9IGZ1bmN0aW9uIGdldFdyYXBwZWRJbnN0YW5jZSgpIHtcbiAgICAgICAgaW52YXJpYW50KHdpdGhSZWYsIFwiVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB5b3UgbmVlZCB0byBzcGVjaWZ5IFwiICsgKFwieyB3aXRoUmVmOiB0cnVlIH0gaW4gdGhlIG9wdGlvbnMgYXJndW1lbnQgb2YgdGhlIFwiICsgbWV0aG9kTmFtZSArIFwiKCkgY2FsbC5cIikpO1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVkSW5zdGFuY2U7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uc2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gc2V0V3JhcHBlZEluc3RhbmNlKHJlZikge1xuICAgICAgICB0aGlzLndyYXBwZWRJbnN0YW5jZSA9IHJlZjtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5pbml0U2VsZWN0b3IgPSBmdW5jdGlvbiBpbml0U2VsZWN0b3IoKSB7XG4gICAgICAgIHZhciBzb3VyY2VTZWxlY3RvciA9IHNlbGVjdG9yRmFjdG9yeSh0aGlzLnN0b3JlLmRpc3BhdGNoLCBzZWxlY3RvckZhY3RvcnlPcHRpb25zKTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IG1ha2VTZWxlY3RvclN0YXRlZnVsKHNvdXJjZVNlbGVjdG9yLCB0aGlzLnN0b3JlKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uaW5pdFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIGluaXRTdWJzY3JpcHRpb24oKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47IC8vIHBhcmVudFN1YidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIHZhciBwYXJlbnRTdWIgPSAodGhpcy5wcm9wc01vZGUgPyB0aGlzLnByb3BzIDogdGhpcy5jb250ZXh0KVtzdWJzY3JpcHRpb25LZXldO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24odGhpcy5zdG9yZSwgcGFyZW50U3ViLCB0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzKSk7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHRoaXMuc3Vic2NyaXB0aW9uYCB3aWxsIHRoZW4gYmUgbnVsbC4gQW5cbiAgICAgICAgLy8gZXh0cmEgbnVsbCBjaGVjayBldmVyeSBjaGFuZ2UgY2FuIGJlIGF2b2lkZWQgYnkgY29weWluZyB0aGUgbWV0aG9kIG9udG8gYHRoaXNgIGFuZCB0aGVuXG4gICAgICAgIC8vIHJlcGxhY2luZyBpdCB3aXRoIGEgbm8tb3Agb24gdW5tb3VudC4gVGhpcyBjYW4gcHJvYmFibHkgYmUgYXZvaWRlZCBpZiBTdWJzY3JpcHRpb24nc1xuICAgICAgICAvLyBsaXN0ZW5lcnMgbG9naWMgaXMgY2hhbmdlZCB0byBub3QgY2FsbCBsaXN0ZW5lcnMgdGhhdCBoYXZlIGJlZW4gdW5zdWJzY3JpYmVkIGluIHRoZVxuICAgICAgICAvLyBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IHRoaXMuc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZCh0aGlzLnN1YnNjcmlwdGlvbik7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8ub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIG9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKHRoaXMucHJvcHMpO1xuXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHRoaXMubm90aWZ5TmVzdGVkU3Vic09uQ29tcG9uZW50RGlkVXBkYXRlO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoZHVtbXlTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgIC8vIGBjb21wb25lbnREaWRVcGRhdGVgIGlzIGNvbmRpdGlvbmFsbHkgaW1wbGVtZW50ZWQgd2hlbiBgb25TdGF0ZUNoYW5nZWAgZGV0ZXJtaW5lcyBpdFxuICAgICAgICAvLyBuZWVkcyB0byBub3RpZnkgbmVzdGVkIHN1YnMuIE9uY2UgY2FsbGVkLCBpdCB1bmltcGxlbWVudHMgaXRzZWxmIHVudGlsIGZ1cnRoZXIgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlcyBvY2N1ci4gRG9pbmcgaXQgdGhpcyB3YXkgdnMgaGF2aW5nIGEgcGVybWFuZW50IGBjb21wb25lbnREaWRVcGRhdGVgIHRoYXQgZG9lc1xuICAgICAgICAvLyBhIGJvb2xlYW4gY2hlY2sgZXZlcnkgdGltZSBhdm9pZHMgYW4gZXh0cmEgbWV0aG9kIGNhbGwgbW9zdCBvZiB0aGUgdGltZSwgcmVzdWx0aW5nXG4gICAgICAgIC8vIGluIHNvbWUgcGVyZiBib29zdC5cbiAgICAgICAgdGhpcy5jb21wb25lbnREaWRVcGRhdGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5zdWJzY3JpcHRpb24pICYmIHRoaXMuc3Vic2NyaXB0aW9uLmlzU3Vic2NyaWJlZCgpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmFkZEV4dHJhUHJvcHMgPSBmdW5jdGlvbiBhZGRFeHRyYVByb3BzKHByb3BzKSB7XG4gICAgICAgIGlmICghd2l0aFJlZiAmJiAhcmVuZGVyQ291bnRQcm9wICYmICEodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pKSByZXR1cm4gcHJvcHM7IC8vIG1ha2UgYSBzaGFsbG93IGNvcHkgc28gdGhhdCBmaWVsZHMgYWRkZWQgZG9uJ3QgbGVhayB0byB0aGUgb3JpZ2luYWwgc2VsZWN0b3IuXG4gICAgICAgIC8vIHRoaXMgaXMgZXNwZWNpYWxseSBpbXBvcnRhbnQgZm9yICdyZWYnIHNpbmNlIHRoYXQncyBhIHJlZmVyZW5jZSBiYWNrIHRvIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaW5zdGFuY2UuIGEgc2luZ2xldG9uIG1lbW9pemVkIHNlbGVjdG9yIHdvdWxkIHRoZW4gYmUgaG9sZGluZyBhIHJlZmVyZW5jZSB0byB0aGVcbiAgICAgICAgLy8gaW5zdGFuY2UsIHByZXZlbnRpbmcgdGhlIGluc3RhbmNlIGZyb20gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWQsIGFuZCB0aGF0IHdvdWxkIGJlIGJhZFxuXG4gICAgICAgIHZhciB3aXRoRXh0cmFzID0gX2V4dGVuZHMoe30sIHByb3BzKTtcblxuICAgICAgICBpZiAod2l0aFJlZikgd2l0aEV4dHJhcy5yZWYgPSB0aGlzLnNldFdyYXBwZWRJbnN0YW5jZTtcbiAgICAgICAgaWYgKHJlbmRlckNvdW50UHJvcCkgd2l0aEV4dHJhc1tyZW5kZXJDb3VudFByb3BdID0gdGhpcy5yZW5kZXJDb3VudCsrO1xuICAgICAgICBpZiAodGhpcy5wcm9wc01vZGUgJiYgdGhpcy5zdWJzY3JpcHRpb24pIHdpdGhFeHRyYXNbc3Vic2NyaXB0aW9uS2V5XSA9IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gd2l0aEV4dHJhcztcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3I7XG4gICAgICAgIHNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzZWxlY3Rvci5lcnJvcikge1xuICAgICAgICAgIHRocm93IHNlbGVjdG9yLmVycm9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIHRoaXMuYWRkRXh0cmFQcm9wcyhzZWxlY3Rvci5wcm9wcykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29ubmVjdDtcbiAgICB9KENvbXBvbmVudCk7XG4gICAgLyogZXNsaW50LWVuYWJsZSByZWFjdC9uby1kZXByZWNhdGVkICovXG5cblxuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgIENvbm5lY3QuY2hpbGRDb250ZXh0VHlwZXMgPSBjaGlsZENvbnRleHRUeXBlcztcbiAgICBDb25uZWN0LmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcbiAgICBDb25uZWN0LnByb3BUeXBlcyA9IGNvbnRleHRUeXBlcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZSgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgLy8gV2UgYXJlIGhvdCByZWxvYWRpbmchXG4gICAgICAgIGlmICh0aGlzLnZlcnNpb24gIT09IHZlcnNpb24pIHtcbiAgICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICAgIHRoaXMuaW5pdFNlbGVjdG9yKCk7IC8vIElmIGFueSBjb25uZWN0ZWQgZGVzY2VuZGFudHMgZG9uJ3QgaG90IHJlbG9hZCAoYW5kIHJlc3Vic2NyaWJlIGluIHRoZSBwcm9jZXNzKSwgdGhlaXJcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMgd2lsbCBiZSBsb3N0IHdoZW4gd2UgdW5zdWJzY3JpYmUuIFVuZm9ydHVuYXRlbHksIGJ5IGNvcHlpbmcgb3ZlciBhbGxcbiAgICAgICAgICAvLyBsaXN0ZW5lcnMsIHRoaXMgZG9lcyBtZWFuIHRoYXQgdGhlIG9sZCB2ZXJzaW9ucyBvZiBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd2lsbCBzdGlsbCBiZVxuICAgICAgICAgIC8vIG5vdGlmaWVkIG9mIHN0YXRlIGNoYW5nZXM7IGhvd2V2ZXIsIHRoZWlyIG9uU3RhdGVDaGFuZ2UgZnVuY3Rpb24gaXMgYSBuby1vcCBzbyB0aGlzXG4gICAgICAgICAgLy8gaXNuJ3QgYSBodWdlIGRlYWwuXG5cbiAgICAgICAgICB2YXIgb2xkTGlzdGVuZXJzID0gW107XG5cbiAgICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycyA9IHRoaXMuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5nZXQoKTtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5pbml0U3Vic2NyaXB0aW9uKCk7XG5cbiAgICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIG9sZExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLnN1YnNjcmlwdGlvbi5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZC5qcyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vIFxuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufSAvLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vLyBcbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vICAgIFxuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vICAgIFxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07IC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG5cblxuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJpbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICcuL2lzUGxhaW5PYmplY3QnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi93YXJuaW5nJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVBsYWluT2JqZWN0KHZhbHVlLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybmluZyhtZXRob2ROYW1lICsgXCIoKSBpbiBcIiArIGRpc3BsYXlOYW1lICsgXCIgbXVzdCByZXR1cm4gYSBwbGFpbiBvYmplY3QuIEluc3RlYWQgcmVjZWl2ZWQgXCIgKyB2YWx1ZSArIFwiLlwiKTtcbiAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy92ZXJpZnlQbGFpbk9iamVjdC5qcyIsImltcG9ydCBfQnJvd3NlclJvdXRlciBmcm9tIFwiLi9Ccm93c2VyUm91dGVyXCI7XG5leHBvcnQgeyBfQnJvd3NlclJvdXRlciBhcyBCcm93c2VyUm91dGVyIH07XG5pbXBvcnQgX0hhc2hSb3V0ZXIgZnJvbSBcIi4vSGFzaFJvdXRlclwiO1xuZXhwb3J0IHsgX0hhc2hSb3V0ZXIgYXMgSGFzaFJvdXRlciB9O1xuaW1wb3J0IF9MaW5rIGZyb20gXCIuL0xpbmtcIjtcbmV4cG9ydCB7IF9MaW5rIGFzIExpbmsgfTtcbmltcG9ydCBfTWVtb3J5Um91dGVyIGZyb20gXCIuL01lbW9yeVJvdXRlclwiO1xuZXhwb3J0IHsgX01lbW9yeVJvdXRlciBhcyBNZW1vcnlSb3V0ZXIgfTtcbmltcG9ydCBfTmF2TGluayBmcm9tIFwiLi9OYXZMaW5rXCI7XG5leHBvcnQgeyBfTmF2TGluayBhcyBOYXZMaW5rIH07XG5pbXBvcnQgX1Byb21wdCBmcm9tIFwiLi9Qcm9tcHRcIjtcbmV4cG9ydCB7IF9Qcm9tcHQgYXMgUHJvbXB0IH07XG5pbXBvcnQgX1JlZGlyZWN0IGZyb20gXCIuL1JlZGlyZWN0XCI7XG5leHBvcnQgeyBfUmVkaXJlY3QgYXMgUmVkaXJlY3QgfTtcbmltcG9ydCBfUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcbmV4cG9ydCB7IF9Sb3V0ZSBhcyBSb3V0ZSB9O1xuaW1wb3J0IF9Sb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5leHBvcnQgeyBfUm91dGVyIGFzIFJvdXRlciB9O1xuaW1wb3J0IF9TdGF0aWNSb3V0ZXIgZnJvbSBcIi4vU3RhdGljUm91dGVyXCI7XG5leHBvcnQgeyBfU3RhdGljUm91dGVyIGFzIFN0YXRpY1JvdXRlciB9O1xuaW1wb3J0IF9Td2l0Y2ggZnJvbSBcIi4vU3dpdGNoXCI7XG5leHBvcnQgeyBfU3dpdGNoIGFzIFN3aXRjaCB9O1xuaW1wb3J0IF9nZW5lcmF0ZVBhdGggZnJvbSBcIi4vZ2VuZXJhdGVQYXRoXCI7XG5leHBvcnQgeyBfZ2VuZXJhdGVQYXRoIGFzIGdlbmVyYXRlUGF0aCB9O1xuaW1wb3J0IF9tYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5leHBvcnQgeyBfbWF0Y2hQYXRoIGFzIG1hdGNoUGF0aCB9O1xuaW1wb3J0IF93aXRoUm91dGVyIGZyb20gXCIuL3dpdGhSb3V0ZXJcIjtcbmV4cG9ydCB7IF93aXRoUm91dGVyIGFzIHdpdGhSb3V0ZXIgfTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9pbmRleC5qcyIsImltcG9ydCBmZXRjaCBmcm9tICdpc29tb3JwaGljLWZldGNoJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoUG9wdWxhclJlcG9zIChsYW5ndWFnZSA9ICdhbGwnKSB7XHJcbiAgICBjb25zdCBlbmNvZGVkVVJJID0gZW5jb2RlVVJJKGBodHRwczovL2FwaS5naXRodWIuY29tL3NlYXJjaC9yZXBvc2l0b3JpZXM/cT1zdGFyczo+MStsYW5ndWFnZToke2xhbmd1YWdlfSZzb3J0PXN0YXJzJm9yZGVyPWRlc2MmdHlwZT1SZXBvc2l0b3JpZXNgKVxyXG5cclxuICAgIHJldHVybiBmZXRjaChlbmNvZGVkVVJJKVxyXG4gICAgICAgIC50aGVuKGRhdGEgPT4gZGF0YS5qc29uKCkgKVxyXG4gICAgICAgIC50aGVuKHJlcG9zID0+IHJlcG9zLml0ZW1zKVxyXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmZXRjaFVzZXIodXNlciA9ICcgJykge1xyXG4gICAgY29uc3QgZW5jb2RlZFVSSSA9IGVuY29kZVVSSShgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS91c2Vycy8ke3VzZXJ9YClcclxuXHJcbiAgICByZXR1cm4gZmV0Y2goZW5jb2RlZFVSSSlcclxuICAgICAgICAudGhlbihkYXRhID0+IGRhdGEuanNvbigpIClcclxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGVycilcclxuICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICB9KVxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NoYXJlZC9hcGkuanMiLCJpbXBvcnQgUHJvdmlkZXIsIHsgY3JlYXRlUHJvdmlkZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmV4cG9ydCB7IFByb3ZpZGVyLCBjcmVhdGVQcm92aWRlciwgY29ubmVjdEFkdmFuY2VkLCBjb25uZWN0IH07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwiaW1wb3J0IHsgQnJvd3NlclJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXHJcbmltcG9ydCByZWR1Y2VycyBmcm9tICcuLi9zaGFyZWQvcmVkdWNlcnMnXHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbmltcG9ydCBMb2FkYWJsZSBmcm9tICdyZWFjdC1sb2FkYWJsZSdcclxuaW1wb3J0IHsgY3JlYXRlU3RvcmUgfSBmcm9tICdyZWR1eCdcclxuaW1wb3J0IHsgaHlkcmF0ZSB9IGZyb20gJ3JlYWN0LWRvbSdcclxuaW1wb3J0IEFwcCBmcm9tICcuLi9zaGFyZWQvQXBwJ1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5jb25zdCBwcmVsb2FkZWRTdGF0ZSA9IHdpbmRvdy5fX1BSRUxPQURFRF9TVEFURV9fXHJcbmRlbGV0ZSB3aW5kb3cuX19QUkVMT0FERURfU1RBVEVfX1xyXG5cclxuY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcclxuICAgIHJlZHVjZXJzLFxyXG4gICAgcHJlbG9hZGVkU3RhdGUsXHJcbiAgICB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXygpXHJcbilcclxuXHJcbkxvYWRhYmxlLnByZWxvYWRSZWFkeSgpLnRoZW4oICgpID0+IHtcclxuICAgIGh5ZHJhdGUoXHJcbiAgICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgICAgIDxCcm93c2VyUm91dGVyPlxyXG4gICAgICAgICAgICAgICAgPEFwcCBkYXRhPXsgd2luZG93Ll9fSU5JVElBTF9EQVRBX18gfSAvPlxyXG4gICAgICAgICAgICA8L0Jyb3dzZXJSb3V0ZXI+XHJcbiAgICAgICAgPC9Qcm92aWRlcj4sXHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpXHJcbiAgICApXHJcbn0pXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9icm93c2VyL2luZGV4LmpzIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi42LjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix6PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLEE9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTpcbjYwMTE1LEI9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixDPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBhYShhLGIsZSxjLGQsZyxoLGYpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBsPVtlLGMsZCxnLGgsZl0sbT0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGxbbSsrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIEQoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxlPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTA7YzxiO2MrKyllKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTthYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGUpfXZhciBFPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxGPXt9O1xuZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1GO3RoaXMudXBkYXRlcj1lfHxFfUcucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ry5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0QoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtHLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBIKCl7fUgucHJvdG90eXBlPUcucHJvdG90eXBlO2Z1bmN0aW9uIEkoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Rjt0aGlzLnVwZGF0ZXI9ZXx8RX12YXIgSj1JLnByb3RvdHlwZT1uZXcgSDtcbkouY29uc3RydWN0b3I9STtrKEosRy5wcm90b3R5cGUpO0ouaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEs9e2N1cnJlbnQ6bnVsbCxjdXJyZW50RGlzcGF0Y2hlcjpudWxsfSxMPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTT17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTihhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpTC5jYWxsKGIsYykmJiFNLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGw9QXJyYXkoZiksbT0wO208ZjttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gYmEoYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nLFE9W107ZnVuY3Rpb24gUihhLGIsZSxjKXtpZihRLmxlbmd0aCl7dmFyIGQ9US5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWU7ZC5jb250ZXh0PWM7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmUsY29udGV4dDpjLGNvdW50OjB9fVxuZnVuY3Rpb24gUyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlEubGVuZ3RoJiZRLnB1c2goYSl9XG5mdW5jdGlvbiBUKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBlKGMsYSxcIlwiPT09Yj9cIi5cIitVKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2Q9YVtoXTt2YXIgZj1iK1UoZCxoKTtnKz1UKGQsZixlLGMpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QyYmYVtDXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxoPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVShkLGgrKyksZys9VChkLGYsZSxjKTtlbHNlXCJvYmplY3RcIj09PWQmJihlPVwiXCIrYSxEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjplLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBWKGEsYixlKXtyZXR1cm4gbnVsbD09YT8wOlQoYSxcIlwiLGIsZSl9ZnVuY3Rpb24gVShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gY2EoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gZGEoYSxiLGUpe3ZhciBjPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VyhhLGMsZSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihPKGEpJiYoYT1iYShhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2UpKSxjLnB1c2goYSkpfWZ1bmN0aW9uIFcoYSxiLGUsYyxkKXt2YXIgZz1cIlwiO251bGwhPWUmJihnPShcIlwiK2UpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIik7Yj1SKGIsZyxjLGQpO1YoYSxkYSxiKTtTKGIpfVxudmFyIFg9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VyhhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9UihudWxsLG51bGwsYixlKTtWKGEsY2EsYik7UyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFYoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtXKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TyhhKT92b2lkIDA6RChcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RyxQdXJlQ29tcG9uZW50OkksY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsXG5fY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxyZW5kZXI6YX19LGxhenk6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkIsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19LG1lbW86ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6QSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19LEZyYWdtZW50OnIsU3RyaWN0TW9kZTp0LHVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlOngsU3VzcGVuc2U6eix1bnN0YWJsZV9Qcm9maWxlcjp1LGNyZWF0ZUVsZW1lbnQ6TixjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe251bGw9PT1hfHx2b2lkIDA9PT1hP0QoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGQ9ayh7fSxhLnByb3BzKSxcbmc9YS5rZXksaD1hLnJlZixmPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZixmPUsuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBsPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJihsPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpTC5jYWxsKGIsYykmJiFNLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1sP2xbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxjKXtsPUFycmF5KGMpO2Zvcih2YXIgbT0wO208YzttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9Ti5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LFxuaXNWYWxpZEVsZW1lbnQ6Tyx2ZXJzaW9uOlwiMTYuNi4wXCIsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e1JlYWN0Q3VycmVudE93bmVyOkssYXNzaWduOmt9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHR8fFo7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi42LjBcbiAqIHJlYWN0LmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xudmFyIGNoZWNrUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcycpO1xuXG4vLyBUT0RPOiB0aGlzIGlzIHNwZWNpYWwgYmVjYXVzZSBpdCBnZXRzIGltcG9ydGVkIGR1cmluZyBidWlsZC5cblxudmFyIFJlYWN0VmVyc2lvbiA9ICcxNi42LjAnO1xuXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy4gSWYgdGhlcmUgaXMgbm8gbmF0aXZlIFN5bWJvbFxuLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLlxudmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcblxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcbnZhciBSRUFDVF9QT1JUQUxfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnBvcnRhbCcpIDogMHhlYWNhO1xudmFyIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5mcmFnbWVudCcpIDogMHhlYWNiO1xudmFyIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zdHJpY3RfbW9kZScpIDogMHhlYWNjO1xudmFyIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wcm9maWxlcicpIDogMHhlYWQyO1xudmFyIFJFQUNUX1BST1ZJREVSX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wcm92aWRlcicpIDogMHhlYWNkO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbnRleHQnKSA6IDB4ZWFjZTtcbnZhciBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbmN1cnJlbnRfbW9kZScpIDogMHhlYWNmO1xudmFyIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5mb3J3YXJkX3JlZicpIDogMHhlYWQwO1xudmFyIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZScpIDogMHhlYWQxO1xudmFyIFJFQUNUX01FTU9fVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0Lm1lbW8nKSA6IDB4ZWFkMztcbnZhciBSRUFDVF9MQVpZX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5sYXp5JykgOiAweGVhZDQ7XG5cbnZhciBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJztcblxuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIGlmIChtYXliZUl0ZXJhYmxlID09PSBudWxsIHx8IHR5cGVvZiBtYXliZUl0ZXJhYmxlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBtYXliZUl0ZXJhdG9yID0gTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXTtcbiAgaWYgKHR5cGVvZiBtYXliZUl0ZXJhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG1heWJlSXRlcmF0b3I7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uICgpIHt9O1xuXG57XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3IgPSB2b2lkIDA7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8vIFJlbHlpbmcgb24gdGhlIGBpbnZhcmlhbnQoKWAgaW1wbGVtZW50YXRpb24gbGV0cyB1c1xuLy8gcHJlc2VydmUgdGhlIGZvcm1hdCBhbmQgcGFyYW1zIGluIHRoZSB3d3cgYnVpbGRzLlxuXG4vKipcbiAqIEZvcmtlZCBmcm9tIGZianMvd2FybmluZzpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mYmpzL2Jsb2IvZTY2YmEyMGFkNWJlNDMzZWI1NDQyM2YyYjA5N2Q4MjkzMjRkOWRlNi9wYWNrYWdlcy9mYmpzL3NyYy9fX2ZvcmtzX18vd2FybmluZy5qc1xuICpcbiAqIE9ubHkgY2hhbmdlIGlzIHdlIHVzZSBjb25zb2xlLndhcm4gaW5zdGVhZCBvZiBjb25zb2xlLmVycm9yLFxuICogYW5kIGRvIG5vdGhpbmcgd2hlbiAnY29uc29sZScgaXMgbm90IHN1cHBvcnRlZC5cbiAqIFRoaXMgcmVhbGx5IHNpbXBsaWZpZXMgdGhlIGNvZGUuXG4gKiAtLS1cbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgbG93UHJpb3JpdHlXYXJuaW5nID0gZnVuY3Rpb24gKCkge307XG5cbntcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG5cbiAgbG93UHJpb3JpdHlXYXJuaW5nID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bsb3dQcmlvcml0eVdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHByaW50V2FybmluZy5hcHBseSh1bmRlZmluZWQsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG52YXIgbG93UHJpb3JpdHlXYXJuaW5nJDEgPSBsb3dQcmlvcml0eVdhcm5pbmc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nV2l0aG91dFN0YWNrID0gZnVuY3Rpb24gKCkge307XG5cbntcbiAgd2FybmluZ1dpdGhvdXRTdGFjayA9IGZ1bmN0aW9uIChjb25kaXRpb24sIGZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2B3YXJuaW5nV2l0aG91dFN0YWNrKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgKyAnbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgICBpZiAoYXJncy5sZW5ndGggPiA4KSB7XG4gICAgICAvLyBDaGVjayBiZWZvcmUgdGhlIGNvbmRpdGlvbiB0byBjYXRjaCB2aW9sYXRpb25zIGVhcmx5LlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd3YXJuaW5nV2l0aG91dFN0YWNrKCkgY3VycmVudGx5IHN1cHBvcnRzIGF0IG1vc3QgOCBhcmd1bWVudHMuJyk7XG4gICAgfVxuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIF9hcmdzJG1hcCA9IGFyZ3MubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiAnJyArIGl0ZW07XG4gICAgICB9KSxcbiAgICAgICAgICBhID0gX2FyZ3MkbWFwWzBdLFxuICAgICAgICAgIGIgPSBfYXJncyRtYXBbMV0sXG4gICAgICAgICAgYyA9IF9hcmdzJG1hcFsyXSxcbiAgICAgICAgICBkID0gX2FyZ3MkbWFwWzNdLFxuICAgICAgICAgIGUgPSBfYXJncyRtYXBbNF0sXG4gICAgICAgICAgZiA9IF9hcmdzJG1hcFs1XSxcbiAgICAgICAgICBnID0gX2FyZ3MkbWFwWzZdLFxuICAgICAgICAgIGggPSBfYXJncyRtYXBbN107XG5cbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQ7XG5cbiAgICAgIC8vIFdlIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIHNwcmVhZCAob3IgLmFwcGx5KSBiZWNhdXNlIGl0IGJyZWFrcyBJRTk6XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEzNjEwXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlLCBhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgYSwgYik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UsIGEsIGIsIGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlLCBhLCBiLCBjLCBkKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgYSwgYiwgYywgZCwgZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UsIGEsIGIsIGMsIGQsIGUsIGYpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlLCBhLCBiLCBjLCBkLCBlLCBmLCBnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgYSwgYiwgYywgZCwgZSwgZiwgZywgaCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd3YXJuaW5nV2l0aG91dFN0YWNrKCkgY3VycmVudGx5IHN1cHBvcnRzIGF0IG1vc3QgOCBhcmd1bWVudHMuJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBfbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihfbWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxudmFyIHdhcm5pbmdXaXRob3V0U3RhY2skMSA9IHdhcm5pbmdXaXRob3V0U3RhY2s7XG5cbnZhciBkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnQgPSB7fTtcblxuZnVuY3Rpb24gd2Fybk5vb3AocHVibGljSW5zdGFuY2UsIGNhbGxlck5hbWUpIHtcbiAge1xuICAgIHZhciBfY29uc3RydWN0b3IgPSBwdWJsaWNJbnN0YW5jZS5jb25zdHJ1Y3RvcjtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IF9jb25zdHJ1Y3RvciAmJiAoX2NvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8IF9jb25zdHJ1Y3Rvci5uYW1lKSB8fCAnUmVhY3RDbGFzcyc7XG4gICAgdmFyIHdhcm5pbmdLZXkgPSBjb21wb25lbnROYW1lICsgJy4nICsgY2FsbGVyTmFtZTtcbiAgICBpZiAoZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50W3dhcm5pbmdLZXldKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgXCJDYW4ndCBjYWxsICVzIG9uIGEgY29tcG9uZW50IHRoYXQgaXMgbm90IHlldCBtb3VudGVkLiBcIiArICdUaGlzIGlzIGEgbm8tb3AsIGJ1dCBpdCBtaWdodCBpbmRpY2F0ZSBhIGJ1ZyBpbiB5b3VyIGFwcGxpY2F0aW9uLiAnICsgJ0luc3RlYWQsIGFzc2lnbiB0byBgdGhpcy5zdGF0ZWAgZGlyZWN0bHkgb3IgZGVmaW5lIGEgYHN0YXRlID0ge307YCAnICsgJ2NsYXNzIHByb3BlcnR5IHdpdGggdGhlIGRlc2lyZWQgc3RhdGUgaW4gdGhlICVzIGNvbXBvbmVudC4nLCBjYWxsZXJOYW1lLCBjb21wb25lbnROYW1lKTtcbiAgICBkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnRbd2FybmluZ0tleV0gPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgYWJzdHJhY3QgQVBJIGZvciBhbiB1cGRhdGUgcXVldWUuXG4gKi9cbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHtcbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2Ugd2Ugd2FudCB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIGNvbXBvbmVudCBpcyB1cGRhdGVkLlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IGNhbGxlck5hbWUgbmFtZSBvZiB0aGUgY2FsbGluZyBmdW5jdGlvbiBpbiB0aGUgcHVibGljIEFQSS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2ssIGNhbGxlck5hbWUpIHtcbiAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgc3RhdGUuIEFsd2F5cyB1c2UgdGhpcyBvciBgc2V0U3RhdGVgIHRvIG11dGF0ZSBzdGF0ZS5cbiAgICogWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBjb21wb25lbnQgaXMgdXBkYXRlZC5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBjYWxsZXJOYW1lIG5hbWUgb2YgdGhlIGNhbGxpbmcgZnVuY3Rpb24gaW4gdGhlIHB1YmxpYyBBUEkuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlLCBjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBjb21wb25lbnQgaXMgdXBkYXRlZC5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBOYW1lIG9mIHRoZSBjYWxsaW5nIGZ1bmN0aW9uIGluIHRoZSBwdWJsaWMgQVBJLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrLCBjYWxsZXJOYW1lKSB7XG4gICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdzZXRTdGF0ZScpO1xuICB9XG59O1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcbntcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbi8qKlxuICogQmFzZSBjbGFzcyBoZWxwZXJzIGZvciB0aGUgdXBkYXRpbmcgc3RhdGUgb2YgYSBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIENvbXBvbmVudChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIC8vIElmIGEgY29tcG9uZW50IGhhcyBzdHJpbmcgcmVmcywgd2Ugd2lsbCBhc3NpZ24gYSBkaWZmZXJlbnQgb2JqZWN0IGxhdGVyLlxuICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgLy8gV2UgaW5pdGlhbGl6ZSB0aGUgZGVmYXVsdCB1cGRhdGVyIGJ1dCB0aGUgcmVhbCBvbmUgZ2V0cyBpbmplY3RlZCBieSB0aGVcbiAgLy8gcmVuZGVyZXIuXG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG5cbkNvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuXG4vKipcbiAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgdG8gbXV0YXRlXG4gKiBzdGF0ZS4gWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICpcbiAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGNhbGxzIHRvIGBzZXRTdGF0ZWAgd2lsbCBydW4gc3luY2hyb25vdXNseSxcbiAqIGFzIHRoZXkgbWF5IGV2ZW50dWFsbHkgYmUgYmF0Y2hlZCB0b2dldGhlci4gIFlvdSBjYW4gcHJvdmlkZSBhbiBvcHRpb25hbFxuICogY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHdoZW4gdGhlIGNhbGwgdG8gc2V0U3RhdGUgaXMgYWN0dWFsbHlcbiAqIGNvbXBsZXRlZC5cbiAqXG4gKiBXaGVuIGEgZnVuY3Rpb24gaXMgcHJvdmlkZWQgdG8gc2V0U3RhdGUsIGl0IHdpbGwgYmUgY2FsbGVkIGF0IHNvbWUgcG9pbnQgaW5cbiAqIHRoZSBmdXR1cmUgKG5vdCBzeW5jaHJvbm91c2x5KS4gSXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgdXAgdG8gZGF0ZVxuICogY29tcG9uZW50IGFyZ3VtZW50cyAoc3RhdGUsIHByb3BzLCBjb250ZXh0KS4gVGhlc2UgdmFsdWVzIGNhbiBiZSBkaWZmZXJlbnRcbiAqIGZyb20gdGhpcy4qIGJlY2F1c2UgeW91ciBmdW5jdGlvbiBtYXkgYmUgY2FsbGVkIGFmdGVyIHJlY2VpdmVQcm9wcyBidXQgYmVmb3JlXG4gKiBzaG91bGRDb21wb25lbnRVcGRhdGUsIGFuZCB0aGlzIG5ldyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHdpbGwgbm90IHlldCBiZVxuICogYXNzaWduZWQgdG8gdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSBvciBmdW5jdGlvbiB0b1xuICogICAgICAgIHByb2R1Y2UgbmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIGN1cnJlbnQgc3RhdGUuXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHN0YXRlIGlzIHVwZGF0ZWQuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuQ29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG4gICEodHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyB8fCBwYXJ0aWFsU3RhdGUgPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy4nKSA6IHZvaWQgMDtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLCBwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrLCAnc2V0U3RhdGUnKTtcbn07XG5cbi8qKlxuICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICogY2VydGFpbnR5IHRoYXQgd2UgYXJlICoqbm90KiogaW4gYSBET00gdHJhbnNhY3Rpb24uXG4gKlxuICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICogY29tcG9uZW50J3Mgc3RhdGUgaGFzIGNoYW5nZWQgYnV0IGBzZXRTdGF0ZWAgd2FzIG5vdCBjYWxsZWQuXG4gKlxuICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICogYGNvbXBvbmVudFdpbGxVcGRhdGVgIGFuZCBgY29tcG9uZW50RGlkVXBkYXRlYC5cbiAqXG4gKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIHVwZGF0ZSBpcyBjb21wbGV0ZS5cbiAqIEBmaW5hbFxuICogQHByb3RlY3RlZFxuICovXG5Db21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcywgY2FsbGJhY2ssICdmb3JjZVVwZGF0ZScpO1xufTtcblxuLyoqXG4gKiBEZXByZWNhdGVkIEFQSXMuIFRoZXNlIEFQSXMgdXNlZCB0byBleGlzdCBvbiBjbGFzc2ljIFJlYWN0IGNsYXNzZXMgYnV0IHNpbmNlXG4gKiB3ZSB3b3VsZCBsaWtlIHRvIGRlcHJlY2F0ZSB0aGVtLCB3ZSdyZSBub3QgZ29pbmcgdG8gbW92ZSB0aGVtIG92ZXIgdG8gdGhpc1xuICogbW9kZXJuIGJhc2UgY2xhc3MuIEluc3RlYWQsIHdlIGRlZmluZSBhIGdldHRlciB0aGF0IHdhcm5zIGlmIGl0J3MgYWNjZXNzZWQuXG4gKi9cbntcbiAgdmFyIGRlcHJlY2F0ZWRBUElzID0ge1xuICAgIGlzTW91bnRlZDogWydpc01vdW50ZWQnLCAnSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwIHN1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gJyArICdjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy4nXSxcbiAgICByZXBsYWNlU3RhdGU6IFsncmVwbGFjZVN0YXRlJywgJ1JlZmFjdG9yIHlvdXIgY29kZSB0byB1c2Ugc2V0U3RhdGUgaW5zdGVhZCAoc2VlICcgKyAnaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMjM2KS4nXVxuICB9O1xuICB2YXIgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIGluZm8pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tcG9uZW50LnByb3RvdHlwZSwgbWV0aG9kTmFtZSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxvd1ByaW9yaXR5V2FybmluZyQxKGZhbHNlLCAnJXMoLi4uKSBpcyBkZXByZWNhdGVkIGluIHBsYWluIEphdmFTY3JpcHQgUmVhY3QgY2xhc3Nlcy4gJXMnLCBpbmZvWzBdLCBpbmZvWzFdKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIgZm5OYW1lIGluIGRlcHJlY2F0ZWRBUElzKSB7XG4gICAgaWYgKGRlcHJlY2F0ZWRBUElzLmhhc093blByb3BlcnR5KGZuTmFtZSkpIHtcbiAgICAgIGRlZmluZURlcHJlY2F0aW9uV2FybmluZyhmbk5hbWUsIGRlcHJlY2F0ZWRBUElzW2ZuTmFtZV0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBDb21wb25lbnREdW1teSgpIHt9XG5Db21wb25lbnREdW1teS5wcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuXG4vKipcbiAqIENvbnZlbmllbmNlIGNvbXBvbmVudCB3aXRoIGRlZmF1bHQgc2hhbGxvdyBlcXVhbGl0eSBjaGVjayBmb3Igc0NVLlxuICovXG5mdW5jdGlvbiBQdXJlQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgLy8gSWYgYSBjb21wb25lbnQgaGFzIHN0cmluZyByZWZzLCB3ZSB3aWxsIGFzc2lnbiBhIGRpZmZlcmVudCBvYmplY3QgbGF0ZXIuXG4gIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuXG52YXIgcHVyZUNvbXBvbmVudFByb3RvdHlwZSA9IFB1cmVDb21wb25lbnQucHJvdG90eXBlID0gbmV3IENvbXBvbmVudER1bW15KCk7XG5wdXJlQ29tcG9uZW50UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUHVyZUNvbXBvbmVudDtcbi8vIEF2b2lkIGFuIGV4dHJhIHByb3RvdHlwZSBqdW1wIGZvciB0aGVzZSBtZXRob2RzLlxuX2Fzc2lnbihwdXJlQ29tcG9uZW50UHJvdG90eXBlLCBDb21wb25lbnQucHJvdG90eXBlKTtcbnB1cmVDb21wb25lbnRQcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQgPSB0cnVlO1xuXG4vLyBhbiBpbW11dGFibGUgb2JqZWN0IHdpdGggYSBzaW5nbGUgbXV0YWJsZSB2YWx1ZVxuZnVuY3Rpb24gY3JlYXRlUmVmKCkge1xuICB2YXIgcmVmT2JqZWN0ID0ge1xuICAgIGN1cnJlbnQ6IG51bGxcbiAgfTtcbiAge1xuICAgIE9iamVjdC5zZWFsKHJlZk9iamVjdCk7XG4gIH1cbiAgcmV0dXJuIHJlZk9iamVjdDtcbn1cblxuLyoqXG4gKiBLZWVwcyB0cmFjayBvZiB0aGUgY3VycmVudCBvd25lci5cbiAqXG4gKiBUaGUgY3VycmVudCBvd25lciBpcyB0aGUgY29tcG9uZW50IHdobyBzaG91bGQgb3duIGFueSBjb21wb25lbnRzIHRoYXQgYXJlXG4gKiBjdXJyZW50bHkgYmVpbmcgY29uc3RydWN0ZWQuXG4gKi9cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAdHlwZSB7UmVhY3RDb21wb25lbnR9XG4gICAqL1xuICBjdXJyZW50OiBudWxsLFxuICBjdXJyZW50RGlzcGF0Y2hlcjogbnVsbFxufTtcblxudmFyIEJFRk9SRV9TTEFTSF9SRSA9IC9eKC4qKVtcXFxcXFwvXS87XG5cbnZhciBkZXNjcmliZUNvbXBvbmVudEZyYW1lID0gZnVuY3Rpb24gKG5hbWUsIHNvdXJjZSwgb3duZXJOYW1lKSB7XG4gIHZhciBzb3VyY2VJbmZvID0gJyc7XG4gIGlmIChzb3VyY2UpIHtcbiAgICB2YXIgcGF0aCA9IHNvdXJjZS5maWxlTmFtZTtcbiAgICB2YXIgZmlsZU5hbWUgPSBwYXRoLnJlcGxhY2UoQkVGT1JFX1NMQVNIX1JFLCAnJyk7XG4gICAge1xuICAgICAgLy8gSW4gREVWLCBpbmNsdWRlIGNvZGUgZm9yIGEgY29tbW9uIHNwZWNpYWwgY2FzZTpcbiAgICAgIC8vIHByZWZlciBcImZvbGRlci9pbmRleC5qc1wiIGluc3RlYWQgb2YganVzdCBcImluZGV4LmpzXCIuXG4gICAgICBpZiAoL15pbmRleFxcLi8udGVzdChmaWxlTmFtZSkpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcGF0aC5tYXRjaChCRUZPUkVfU0xBU0hfUkUpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICB2YXIgcGF0aEJlZm9yZVNsYXNoID0gbWF0Y2hbMV07XG4gICAgICAgICAgaWYgKHBhdGhCZWZvcmVTbGFzaCkge1xuICAgICAgICAgICAgdmFyIGZvbGRlck5hbWUgPSBwYXRoQmVmb3JlU2xhc2gucmVwbGFjZShCRUZPUkVfU0xBU0hfUkUsICcnKTtcbiAgICAgICAgICAgIGZpbGVOYW1lID0gZm9sZGVyTmFtZSArICcvJyArIGZpbGVOYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VJbmZvID0gJyAoYXQgJyArIGZpbGVOYW1lICsgJzonICsgc291cmNlLmxpbmVOdW1iZXIgKyAnKSc7XG4gIH0gZWxzZSBpZiAob3duZXJOYW1lKSB7XG4gICAgc291cmNlSW5mbyA9ICcgKGNyZWF0ZWQgYnkgJyArIG93bmVyTmFtZSArICcpJztcbiAgfVxuICByZXR1cm4gJ1xcbiAgICBpbiAnICsgKG5hbWUgfHwgJ1Vua25vd24nKSArIHNvdXJjZUluZm87XG59O1xuXG52YXIgUmVzb2x2ZWQgPSAxO1xuXG5cbmZ1bmN0aW9uIHJlZmluZVJlc29sdmVkTGF6eUNvbXBvbmVudChsYXp5Q29tcG9uZW50KSB7XG4gIHJldHVybiBsYXp5Q29tcG9uZW50Ll9zdGF0dXMgPT09IFJlc29sdmVkID8gbGF6eUNvbXBvbmVudC5fcmVzdWx0IDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0V3JhcHBlZE5hbWUob3V0ZXJUeXBlLCBpbm5lclR5cGUsIHdyYXBwZXJOYW1lKSB7XG4gIHZhciBmdW5jdGlvbk5hbWUgPSBpbm5lclR5cGUuZGlzcGxheU5hbWUgfHwgaW5uZXJUeXBlLm5hbWUgfHwgJyc7XG4gIHJldHVybiBvdXRlclR5cGUuZGlzcGxheU5hbWUgfHwgKGZ1bmN0aW9uTmFtZSAhPT0gJycgPyB3cmFwcGVyTmFtZSArICcoJyArIGZ1bmN0aW9uTmFtZSArICcpJyA6IHdyYXBwZXJOYW1lKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSh0eXBlKSB7XG4gIGlmICh0eXBlID09IG51bGwpIHtcbiAgICAvLyBIb3N0IHJvb3QsIHRleHQgbm9kZSBvciBqdXN0IGludmFsaWQgdHlwZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB7XG4gICAgaWYgKHR5cGVvZiB0eXBlLnRhZyA9PT0gJ251bWJlcicpIHtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ1JlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgb2JqZWN0IGluIGdldENvbXBvbmVudE5hbWUoKS4gJyArICdUaGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBudWxsO1xuICB9XG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFOlxuICAgICAgcmV0dXJuICdDb25jdXJyZW50TW9kZSc7XG4gICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgcmV0dXJuICdGcmFnbWVudCc7XG4gICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgIHJldHVybiAnUG9ydGFsJztcbiAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICByZXR1cm4gJ1Byb2ZpbGVyJztcbiAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICByZXR1cm4gJ1N0cmljdE1vZGUnO1xuICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgIHJldHVybiAnU3VzcGVuc2UnO1xuICB9XG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICBzd2l0Y2ggKHR5cGUuJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICByZXR1cm4gJ0NvbnRleHQuQ29uc3VtZXInO1xuICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICByZXR1cm4gJ0NvbnRleHQuUHJvdmlkZXInO1xuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICByZXR1cm4gZ2V0V3JhcHBlZE5hbWUodHlwZSwgdHlwZS5yZW5kZXIsICdGb3J3YXJkUmVmJyk7XG4gICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWUodHlwZS50eXBlKTtcbiAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHRoZW5hYmxlID0gdHlwZTtcbiAgICAgICAgICB2YXIgcmVzb2x2ZWRUaGVuYWJsZSA9IHJlZmluZVJlc29sdmVkTGF6eUNvbXBvbmVudCh0aGVuYWJsZSk7XG4gICAgICAgICAgaWYgKHJlc29sdmVkVGhlbmFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lKHJlc29sdmVkVGhlbmFibGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSB7fTtcblxudmFyIGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50ID0gbnVsbDtcblxuZnVuY3Rpb24gc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCkge1xuICB7XG4gICAgY3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQgPSBlbGVtZW50O1xuICB9XG59XG5cbntcbiAgLy8gU3RhY2sgaW1wbGVtZW50YXRpb24gaW5qZWN0ZWQgYnkgdGhlIGN1cnJlbnQgcmVuZGVyZXIuXG4gIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0Q3VycmVudFN0YWNrID0gbnVsbDtcblxuICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldFN0YWNrQWRkZW5kdW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YWNrID0gJyc7XG5cbiAgICAvLyBBZGQgYW4gZXh0cmEgdG9wIGZyYW1lIHdoaWxlIGFuIGVsZW1lbnQgaXMgYmVpbmcgdmFsaWRhdGVkXG4gICAgaWYgKGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQudHlwZSk7XG4gICAgICB2YXIgb3duZXIgPSBjdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudC5fb3duZXI7XG4gICAgICBzdGFjayArPSBkZXNjcmliZUNvbXBvbmVudEZyYW1lKG5hbWUsIGN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50Ll9zb3VyY2UsIG93bmVyICYmIGdldENvbXBvbmVudE5hbWUob3duZXIudHlwZSkpO1xuICAgIH1cblxuICAgIC8vIERlbGVnYXRlIHRvIHRoZSBpbmplY3RlZCByZW5kZXJlci1zcGVjaWZpYyBpbXBsZW1lbnRhdGlvblxuICAgIHZhciBpbXBsID0gUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRDdXJyZW50U3RhY2s7XG4gICAgaWYgKGltcGwpIHtcbiAgICAgIHN0YWNrICs9IGltcGwoKSB8fCAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG59XG5cbnZhciBSZWFjdFNoYXJlZEludGVybmFscyA9IHtcbiAgUmVhY3RDdXJyZW50T3duZXI6IFJlYWN0Q3VycmVudE93bmVyLFxuICAvLyBVc2VkIGJ5IHJlbmRlcmVycyB0byBhdm9pZCBidW5kbGluZyBvYmplY3QtYXNzaWduIHR3aWNlIGluIFVNRCBidW5kbGVzOlxuICBhc3NpZ246IF9hc3NpZ25cbn07XG5cbntcbiAgX2Fzc2lnbihSZWFjdFNoYXJlZEludGVybmFscywge1xuICAgIC8vIFRoZXNlIHNob3VsZCBub3QgYmUgaW5jbHVkZWQgaW4gcHJvZHVjdGlvbi5cbiAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lOiBSZWFjdERlYnVnQ3VycmVudEZyYW1lLFxuICAgIC8vIFNoaW0gZm9yIFJlYWN0IERPTSAxNi4wLjAgd2hpY2ggc3RpbGwgZGVzdHJ1Y3R1cmVkIChidXQgbm90IHVzZWQpIHRoaXMuXG4gICAgLy8gVE9ETzogcmVtb3ZlIGluIFJlYWN0IDE3LjAuXG4gICAgUmVhY3RDb21wb25lbnRUcmVlSG9vazoge31cbiAgfSk7XG59XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gd2FybmluZ1dpdGhvdXRTdGFjayQxO1xuXG57XG4gIHdhcm5pbmcgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTtcbiAgICB2YXIgc3RhY2sgPSBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldFN0YWNrQWRkZW5kdW0oKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvd2FybmluZy1hbmQtaW52YXJpYW50LWFyZ3NcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgd2FybmluZ1dpdGhvdXRTdGFjayQxLmFwcGx5KHVuZGVmaW5lZCwgW2ZhbHNlLCBmb3JtYXQgKyAnJXMnXS5jb25jYXQoYXJncywgW3N0YWNrXSkpO1xuICB9O1xufVxuXG52YXIgd2FybmluZyQxID0gd2FybmluZztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIFJFU0VSVkVEX1BST1BTID0ge1xuICBrZXk6IHRydWUsXG4gIHJlZjogdHJ1ZSxcbiAgX19zZWxmOiB0cnVlLFxuICBfX3NvdXJjZTogdHJ1ZVxufTtcblxudmFyIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duID0gdm9pZCAwO1xudmFyIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBoYXNWYWxpZFJlZihjb25maWcpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ3JlZicpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdyZWYnKS5nZXQ7XG4gICAgICBpZiAoZ2V0dGVyICYmIGdldHRlci5pc1JlYWN0V2FybmluZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjb25maWcucmVmICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGhhc1ZhbGlkS2V5KGNvbmZpZykge1xuICB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCAna2V5JykpIHtcbiAgICAgIHZhciBnZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNvbmZpZywgJ2tleScpLmdldDtcbiAgICAgIGlmIChnZXR0ZXIgJiYgZ2V0dGVyLmlzUmVhY3RXYXJuaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvbmZpZy5rZXkgIT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHZhciB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bikge1xuICAgICAgc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24gPSB0cnVlO1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXM6IGBrZXlgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgJyArICdpbiBgdW5kZWZpbmVkYCBiZWluZyByZXR1cm5lZC4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzYW1lICcgKyAndmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCAnICsgJ3Byb3AuIChodHRwczovL2ZiLm1lL3JlYWN0LXNwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgIH1cbiAgfTtcbiAgd2FybkFib3V0QWNjZXNzaW5nS2V5LmlzUmVhY3RXYXJuaW5nID0gdHJ1ZTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAna2V5Jywge1xuICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nS2V5LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHZhciB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93bikge1xuICAgICAgc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24gPSB0cnVlO1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXM6IGByZWZgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgJyArICdpbiBgdW5kZWZpbmVkYCBiZWluZyByZXR1cm5lZC4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzYW1lICcgKyAndmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCAnICsgJ3Byb3AuIChodHRwczovL2ZiLm1lL3JlYWN0LXNwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgIH1cbiAgfTtcbiAgd2FybkFib3V0QWNjZXNzaW5nUmVmLmlzUmVhY3RXYXJuaW5nID0gdHJ1ZTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAncmVmJywge1xuICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nUmVmLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBGYWN0b3J5IG1ldGhvZCB0byBjcmVhdGUgYSBuZXcgUmVhY3QgZWxlbWVudC4gVGhpcyBubyBsb25nZXIgYWRoZXJlcyB0b1xuICogdGhlIGNsYXNzIHBhdHRlcm4sIHNvIGRvIG5vdCB1c2UgbmV3IHRvIGNhbGwgaXQuIEFsc28sIG5vIGluc3RhbmNlb2YgY2hlY2tcbiAqIHdpbGwgd29yay4gSW5zdGVhZCB0ZXN0ICQkdHlwZW9mIGZpZWxkIGFnYWluc3QgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIHRvIGNoZWNrXG4gKiBpZiBzb21ldGhpbmcgaXMgYSBSZWFjdCBFbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7Kn0gdHlwZVxuICogQHBhcmFtIHsqfSBrZXlcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVmXG4gKiBAcGFyYW0geyp9IHNlbGYgQSAqdGVtcG9yYXJ5KiBoZWxwZXIgdG8gZGV0ZWN0IHBsYWNlcyB3aGVyZSBgdGhpc2AgaXNcbiAqIGRpZmZlcmVudCBmcm9tIHRoZSBgb3duZXJgIHdoZW4gUmVhY3QuY3JlYXRlRWxlbWVudCBpcyBjYWxsZWQsIHNvIHRoYXQgd2VcbiAqIGNhbiB3YXJuLiBXZSB3YW50IHRvIGdldCByaWQgb2Ygb3duZXIgYW5kIHJlcGxhY2Ugc3RyaW5nIGByZWZgcyB3aXRoIGFycm93XG4gKiBmdW5jdGlvbnMsIGFuZCBhcyBsb25nIGFzIGB0aGlzYCBhbmQgb3duZXIgYXJlIHRoZSBzYW1lLCB0aGVyZSB3aWxsIGJlIG5vXG4gKiBjaGFuZ2UgaW4gYmVoYXZpb3IuXG4gKiBAcGFyYW0geyp9IHNvdXJjZSBBbiBhbm5vdGF0aW9uIG9iamVjdCAoYWRkZWQgYnkgYSB0cmFuc3BpbGVyIG9yIG90aGVyd2lzZSlcbiAqIGluZGljYXRpbmcgZmlsZW5hbWUsIGxpbmUgbnVtYmVyLCBhbmQvb3Igb3RoZXIgaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0geyp9IG93bmVyXG4gKiBAcGFyYW0geyp9IHByb3BzXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgdmFyIGVsZW1lbnQgPSB7XG4gICAgLy8gVGhpcyB0YWcgYWxsb3dzIHVzIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgYXMgYSBSZWFjdCBFbGVtZW50XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcblxuICAgIC8vIEJ1aWx0LWluIHByb3BlcnRpZXMgdGhhdCBiZWxvbmcgb24gdGhlIGVsZW1lbnRcbiAgICB0eXBlOiB0eXBlLFxuICAgIGtleToga2V5LFxuICAgIHJlZjogcmVmLFxuICAgIHByb3BzOiBwcm9wcyxcblxuICAgIC8vIFJlY29yZCB0aGUgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGlzIGVsZW1lbnQuXG4gICAgX293bmVyOiBvd25lclxuICB9O1xuXG4gIHtcbiAgICAvLyBUaGUgdmFsaWRhdGlvbiBmbGFnIGlzIGN1cnJlbnRseSBtdXRhdGl2ZS4gV2UgcHV0IGl0IG9uXG4gICAgLy8gYW4gZXh0ZXJuYWwgYmFja2luZyBzdG9yZSBzbyB0aGF0IHdlIGNhbiBmcmVlemUgdGhlIHdob2xlIG9iamVjdC5cbiAgICAvLyBUaGlzIGNhbiBiZSByZXBsYWNlZCB3aXRoIGEgV2Vha01hcCBvbmNlIHRoZXkgYXJlIGltcGxlbWVudGVkIGluXG4gICAgLy8gY29tbW9ubHkgdXNlZCBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMuXG4gICAgZWxlbWVudC5fc3RvcmUgPSB7fTtcblxuICAgIC8vIFRvIG1ha2UgY29tcGFyaW5nIFJlYWN0RWxlbWVudHMgZWFzaWVyIGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB3ZSBtYWtlXG4gICAgLy8gdGhlIHZhbGlkYXRpb24gZmxhZyBub24tZW51bWVyYWJsZSAod2hlcmUgcG9zc2libGUsIHdoaWNoIHNob3VsZFxuICAgIC8vIGluY2x1ZGUgZXZlcnkgZW52aXJvbm1lbnQgd2UgcnVuIHRlc3RzIGluKSwgc28gdGhlIHRlc3QgZnJhbWV3b3JrXG4gICAgLy8gaWdub3JlcyBpdC5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudC5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0pO1xuICAgIC8vIHNlbGYgYW5kIHNvdXJjZSBhcmUgREVWIG9ubHkgcHJvcGVydGllcy5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zZWxmJywge1xuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IHNlbGZcbiAgICB9KTtcbiAgICAvLyBUd28gZWxlbWVudHMgY3JlYXRlZCBpbiB0d28gZGlmZmVyZW50IHBsYWNlcyBzaG91bGQgYmUgY29uc2lkZXJlZFxuICAgIC8vIGVxdWFsIGZvciB0ZXN0aW5nIHB1cnBvc2VzIGFuZCB0aGVyZWZvcmUgd2UgaGlkZSBpdCBmcm9tIGVudW1lcmF0aW9uLlxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NvdXJjZScsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBzb3VyY2VcbiAgICB9KTtcbiAgICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50LnByb3BzKTtcbiAgICAgIE9iamVjdC5mcmVlemUoZWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQ7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhbmQgcmV0dXJuIGEgbmV3IFJlYWN0RWxlbWVudCBvZiB0aGUgZ2l2ZW4gdHlwZS5cbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjY3JlYXRlZWxlbWVudFxuICovXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KHR5cGUsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lID0gdm9pZCAwO1xuXG4gIC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWRcbiAgdmFyIHByb3BzID0ge307XG5cbiAgdmFyIGtleSA9IG51bGw7XG4gIHZhciByZWYgPSBudWxsO1xuICB2YXIgc2VsZiA9IG51bGw7XG4gIHZhciBzb3VyY2UgPSBudWxsO1xuXG4gIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgIGlmIChoYXNWYWxpZFJlZihjb25maWcpKSB7XG4gICAgICByZWYgPSBjb25maWcucmVmO1xuICAgIH1cbiAgICBpZiAoaGFzVmFsaWRLZXkoY29uZmlnKSkge1xuICAgICAga2V5ID0gJycgKyBjb25maWcua2V5O1xuICAgIH1cblxuICAgIHNlbGYgPSBjb25maWcuX19zZWxmID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLl9fc2VsZjtcbiAgICBzb3VyY2UgPSBjb25maWcuX19zb3VyY2UgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcuX19zb3VyY2U7XG4gICAgLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgYXJlIGFkZGVkIHRvIGEgbmV3IHByb3BzIG9iamVjdFxuICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQ2hpbGRyZW4gY2FuIGJlIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQsIGFuZCB0aG9zZSBhcmUgdHJhbnNmZXJyZWQgb250b1xuICAvLyB0aGUgbmV3bHkgYWxsb2NhdGVkIHByb3BzIG9iamVjdC5cbiAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7XG4gICAgdmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICB9XG4gICAge1xuICAgICAgaWYgKE9iamVjdC5mcmVlemUpIHtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShjaGlsZEFycmF5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICB9XG5cbiAgLy8gUmVzb2x2ZSBkZWZhdWx0IHByb3BzXG4gIGlmICh0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzKSB7XG4gICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzO1xuICAgIGZvciAocHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAge1xuICAgIGlmIChrZXkgfHwgcmVmKSB7XG4gICAgICB2YXIgZGlzcGxheU5hbWUgPSB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8ICdVbmtub3duJyA6IHR5cGU7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAocmVmKSB7XG4gICAgICAgIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCwgcHJvcHMpO1xufVxuXG4vKipcbiAqIFJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgUmVhY3RFbGVtZW50cyBvZiBhIGdpdmVuIHR5cGUuXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI2NyZWF0ZWZhY3RvcnlcbiAqL1xuXG5cbmZ1bmN0aW9uIGNsb25lQW5kUmVwbGFjZUtleShvbGRFbGVtZW50LCBuZXdLZXkpIHtcbiAgdmFyIG5ld0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQob2xkRWxlbWVudC50eXBlLCBuZXdLZXksIG9sZEVsZW1lbnQucmVmLCBvbGRFbGVtZW50Ll9zZWxmLCBvbGRFbGVtZW50Ll9zb3VyY2UsIG9sZEVsZW1lbnQuX293bmVyLCBvbGRFbGVtZW50LnByb3BzKTtcblxuICByZXR1cm4gbmV3RWxlbWVudDtcbn1cblxuLyoqXG4gKiBDbG9uZSBhbmQgcmV0dXJuIGEgbmV3IFJlYWN0RWxlbWVudCB1c2luZyBlbGVtZW50IGFzIHRoZSBzdGFydGluZyBwb2ludC5cbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjY2xvbmVlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIGNsb25lRWxlbWVudChlbGVtZW50LCBjb25maWcsIGNoaWxkcmVuKSB7XG4gICEhKGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gdW5kZWZpbmVkKSA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkICVzLicsIGVsZW1lbnQpIDogdm9pZCAwO1xuXG4gIHZhciBwcm9wTmFtZSA9IHZvaWQgMDtcblxuICAvLyBPcmlnaW5hbCBwcm9wcyBhcmUgY29waWVkXG4gIHZhciBwcm9wcyA9IF9hc3NpZ24oe30sIGVsZW1lbnQucHJvcHMpO1xuXG4gIC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWRcbiAgdmFyIGtleSA9IGVsZW1lbnQua2V5O1xuICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG4gIC8vIFNlbGYgaXMgcHJlc2VydmVkIHNpbmNlIHRoZSBvd25lciBpcyBwcmVzZXJ2ZWQuXG4gIHZhciBzZWxmID0gZWxlbWVudC5fc2VsZjtcbiAgLy8gU291cmNlIGlzIHByZXNlcnZlZCBzaW5jZSBjbG9uZUVsZW1lbnQgaXMgdW5saWtlbHkgdG8gYmUgdGFyZ2V0ZWQgYnkgYVxuICAvLyB0cmFuc3BpbGVyLCBhbmQgdGhlIG9yaWdpbmFsIHNvdXJjZSBpcyBwcm9iYWJseSBhIGJldHRlciBpbmRpY2F0b3Igb2YgdGhlXG4gIC8vIHRydWUgb3duZXIuXG4gIHZhciBzb3VyY2UgPSBlbGVtZW50Ll9zb3VyY2U7XG5cbiAgLy8gT3duZXIgd2lsbCBiZSBwcmVzZXJ2ZWQsIHVubGVzcyByZWYgaXMgb3ZlcnJpZGRlblxuICB2YXIgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICBpZiAoaGFzVmFsaWRSZWYoY29uZmlnKSkge1xuICAgICAgLy8gU2lsZW50bHkgc3RlYWwgdGhlIHJlZiBmcm9tIHRoZSBwYXJlbnQuXG4gICAgICByZWYgPSBjb25maWcucmVmO1xuICAgICAgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgIH1cbiAgICBpZiAoaGFzVmFsaWRLZXkoY29uZmlnKSkge1xuICAgICAga2V5ID0gJycgKyBjb25maWcua2V5O1xuICAgIH1cblxuICAgIC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIG92ZXJyaWRlIGV4aXN0aW5nIHByb3BzXG4gICAgdmFyIGRlZmF1bHRQcm9wcyA9IHZvaWQgMDtcbiAgICBpZiAoZWxlbWVudC50eXBlICYmIGVsZW1lbnQudHlwZS5kZWZhdWx0UHJvcHMpIHtcbiAgICAgIGRlZmF1bHRQcm9wcyA9IGVsZW1lbnQudHlwZS5kZWZhdWx0UHJvcHM7XG4gICAgfVxuICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIGlmIChjb25maWdbcHJvcE5hbWVdID09PSB1bmRlZmluZWQgJiYgZGVmYXVsdFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHNcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDaGlsZHJlbiBjYW4gYmUgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCwgYW5kIHRob3NlIGFyZSB0cmFuc2ZlcnJlZCBvbnRvXG4gIC8vIHRoZSBuZXdseSBhbGxvY2F0ZWQgcHJvcHMgb2JqZWN0LlxuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgfSBlbHNlIGlmIChjaGlsZHJlbkxlbmd0aCA+IDEpIHtcbiAgICB2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIH1cbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cblxuICByZXR1cm4gUmVhY3RFbGVtZW50KGVsZW1lbnQudHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKTtcbn1cblxuLyoqXG4gKiBWZXJpZmllcyB0aGUgb2JqZWN0IGlzIGEgUmVhY3RFbGVtZW50LlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNpc3ZhbGlkZWxlbWVudFxuICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG9iamVjdGAgaXMgYSBSZWFjdEVsZW1lbnQuXG4gKiBAZmluYWxcbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG59XG5cbnZhciBTRVBBUkFUT1IgPSAnLic7XG52YXIgU1VCU0VQQVJBVE9SID0gJzonO1xuXG4vKipcbiAqIEVzY2FwZSBhbmQgd3JhcCBrZXkgc28gaXQgaXMgc2FmZSB0byB1c2UgYXMgYSByZWFjdGlkXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSB0byBiZSBlc2NhcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgZXNjYXBlZCBrZXkuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZShrZXkpIHtcbiAgdmFyIGVzY2FwZVJlZ2V4ID0gL1s9Ol0vZztcbiAgdmFyIGVzY2FwZXJMb29rdXAgPSB7XG4gICAgJz0nOiAnPTAnLFxuICAgICc6JzogJz0yJ1xuICB9O1xuICB2YXIgZXNjYXBlZFN0cmluZyA9ICgnJyArIGtleSkucmVwbGFjZShlc2NhcGVSZWdleCwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuICB9KTtcblxuICByZXR1cm4gJyQnICsgZXNjYXBlZFN0cmluZztcbn1cblxuLyoqXG4gKiBUT0RPOiBUZXN0IHRoYXQgYSBzaW5nbGUgY2hpbGQgYW5kIGFuIGFycmF5IHdpdGggb25lIGl0ZW0gaGF2ZSB0aGUgc2FtZSBrZXlcbiAqIHBhdHRlcm4uXG4gKi9cblxudmFyIGRpZFdhcm5BYm91dE1hcHMgPSBmYWxzZTtcblxudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4ID0gL1xcLysvZztcbmZ1bmN0aW9uIGVzY2FwZVVzZXJQcm92aWRlZEtleSh0ZXh0KSB7XG4gIHJldHVybiAoJycgKyB0ZXh0KS5yZXBsYWNlKHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4LCAnJCYvJyk7XG59XG5cbnZhciBQT09MX1NJWkUgPSAxMDtcbnZhciB0cmF2ZXJzZUNvbnRleHRQb29sID0gW107XG5mdW5jdGlvbiBnZXRQb29sZWRUcmF2ZXJzZUNvbnRleHQobWFwUmVzdWx0LCBrZXlQcmVmaXgsIG1hcEZ1bmN0aW9uLCBtYXBDb250ZXh0KSB7XG4gIGlmICh0cmF2ZXJzZUNvbnRleHRQb29sLmxlbmd0aCkge1xuICAgIHZhciB0cmF2ZXJzZUNvbnRleHQgPSB0cmF2ZXJzZUNvbnRleHRQb29sLnBvcCgpO1xuICAgIHRyYXZlcnNlQ29udGV4dC5yZXN1bHQgPSBtYXBSZXN1bHQ7XG4gICAgdHJhdmVyc2VDb250ZXh0LmtleVByZWZpeCA9IGtleVByZWZpeDtcbiAgICB0cmF2ZXJzZUNvbnRleHQuZnVuYyA9IG1hcEZ1bmN0aW9uO1xuICAgIHRyYXZlcnNlQ29udGV4dC5jb250ZXh0ID0gbWFwQ29udGV4dDtcbiAgICB0cmF2ZXJzZUNvbnRleHQuY291bnQgPSAwO1xuICAgIHJldHVybiB0cmF2ZXJzZUNvbnRleHQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3VsdDogbWFwUmVzdWx0LFxuICAgICAga2V5UHJlZml4OiBrZXlQcmVmaXgsXG4gICAgICBmdW5jOiBtYXBGdW5jdGlvbixcbiAgICAgIGNvbnRleHQ6IG1hcENvbnRleHQsXG4gICAgICBjb3VudDogMFxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVsZWFzZVRyYXZlcnNlQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQpIHtcbiAgdHJhdmVyc2VDb250ZXh0LnJlc3VsdCA9IG51bGw7XG4gIHRyYXZlcnNlQ29udGV4dC5rZXlQcmVmaXggPSBudWxsO1xuICB0cmF2ZXJzZUNvbnRleHQuZnVuYyA9IG51bGw7XG4gIHRyYXZlcnNlQ29udGV4dC5jb250ZXh0ID0gbnVsbDtcbiAgdHJhdmVyc2VDb250ZXh0LmNvdW50ID0gMDtcbiAgaWYgKHRyYXZlcnNlQ29udGV4dFBvb2wubGVuZ3RoIDwgUE9PTF9TSVpFKSB7XG4gICAgdHJhdmVyc2VDb250ZXh0UG9vbC5wdXNoKHRyYXZlcnNlQ29udGV4dCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZVNvRmFyIE5hbWUgb2YgdGhlIGtleSBwYXRoIHNvIGZhci5cbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0byBpbnZva2Ugd2l0aCBlYWNoIGNoaWxkIGZvdW5kLlxuICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IFVzZWQgdG8gcGFzcyBpbmZvcm1hdGlvbiB0aHJvdWdob3V0IHRoZSB0cmF2ZXJzYWxcbiAqIHByb2Nlc3MuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sIG5hbWVTb0ZhciwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBjaGlsZHJlbjtcblxuICBpZiAodHlwZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgLy8gQWxsIG9mIHRoZSBhYm92ZSBhcmUgcGVyY2VpdmVkIGFzIG51bGwuXG4gICAgY2hpbGRyZW4gPSBudWxsO1xuICB9XG5cbiAgdmFyIGludm9rZUNhbGxiYWNrID0gZmFsc2U7XG5cbiAgaWYgKGNoaWxkcmVuID09PSBudWxsKSB7XG4gICAgaW52b2tlQ2FsbGJhY2sgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIGludm9rZUNhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICBzd2l0Y2ggKGNoaWxkcmVuLiQkdHlwZW9mKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICAgIGludm9rZUNhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChpbnZva2VDYWxsYmFjaykge1xuICAgIGNhbGxiYWNrKHRyYXZlcnNlQ29udGV4dCwgY2hpbGRyZW4sXG4gICAgLy8gSWYgaXQncyB0aGUgb25seSBjaGlsZCwgdHJlYXQgdGhlIG5hbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gYW4gYXJyYXlcbiAgICAvLyBzbyB0aGF0IGl0J3MgY29uc2lzdGVudCBpZiB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGdyb3dzLlxuICAgIG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyKTtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHZhciBjaGlsZCA9IHZvaWQgMDtcbiAgdmFyIG5leHROYW1lID0gdm9pZCAwO1xuICB2YXIgc3VidHJlZUNvdW50ID0gMDsgLy8gQ291bnQgb2YgY2hpbGRyZW4gZm91bmQgaW4gdGhlIGN1cnJlbnQgc3VidHJlZS5cbiAgdmFyIG5leHROYW1lUHJlZml4ID0gbmFtZVNvRmFyID09PSAnJyA/IFNFUEFSQVRPUiA6IG5hbWVTb0ZhciArIFNVQlNFUEFSQVRPUjtcblxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaSk7XG4gICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKTtcbiAgICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHtcbiAgICAgICAgLy8gV2FybiBhYm91dCB1c2luZyBNYXBzIGFzIGNoaWxkcmVuXG4gICAgICAgIGlmIChpdGVyYXRvckZuID09PSBjaGlsZHJlbi5lbnRyaWVzKSB7XG4gICAgICAgICAgIWRpZFdhcm5BYm91dE1hcHMgPyB3YXJuaW5nJDEoZmFsc2UsICdVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIHVuc3VwcG9ydGVkIGFuZCB3aWxsIGxpa2VseSB5aWVsZCAnICsgJ3VuZXhwZWN0ZWQgcmVzdWx0cy4gQ29udmVydCBpdCB0byBhIHNlcXVlbmNlL2l0ZXJhYmxlIG9mIGtleWVkICcgKyAnUmVhY3RFbGVtZW50cyBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgICAgICAgIGRpZFdhcm5BYm91dE1hcHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChjaGlsZHJlbik7XG4gICAgICB2YXIgc3RlcCA9IHZvaWQgMDtcbiAgICAgIHZhciBpaSA9IDA7XG4gICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIGNoaWxkID0gc3RlcC52YWx1ZTtcbiAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaWkrKyk7XG4gICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZCwgbmV4dE5hbWUsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBhZGRlbmR1bSA9ICcnO1xuICAgICAge1xuICAgICAgICBhZGRlbmR1bSA9ICcgSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSAnICsgJ2luc3RlYWQuJyArIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSgpO1xuICAgICAgfVxuICAgICAgdmFyIGNoaWxkcmVuU3RyaW5nID0gJycgKyBjaGlsZHJlbjtcbiAgICAgIGludmFyaWFudChmYWxzZSwgJ09iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogJXMpLiVzJywgY2hpbGRyZW5TdHJpbmcgPT09ICdbb2JqZWN0IE9iamVjdF0nID8gJ29iamVjdCB3aXRoIGtleXMgeycgKyBPYmplY3Qua2V5cyhjaGlsZHJlbikuam9pbignLCAnKSArICd9JyA6IGNoaWxkcmVuU3RyaW5nLCBhZGRlbmR1bSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1YnRyZWVDb3VudDtcbn1cblxuLyoqXG4gKiBUcmF2ZXJzZXMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLCBidXRcbiAqIG1pZ2h0IGFsc28gYmUgc3BlY2lmaWVkIHRocm91Z2ggYXR0cmlidXRlczpcbiAqXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4sIC4uLilgXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMubGVmdFBhbmVsQ2hpbGRyZW4sIC4uLilgXG4gKlxuICogVGhlIGB0cmF2ZXJzZUNvbnRleHRgIGlzIGFuIG9wdGlvbmFsIGFyZ3VtZW50IHRoYXQgaXMgcGFzc2VkIHRocm91Z2ggdGhlXG4gKiBlbnRpcmUgdHJhdmVyc2FsLiBJdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBhY2N1bXVsYXRpb25zIG9yIGFueXRoaW5nIGVsc2UgdGhhdFxuICogdGhlIGNhbGxiYWNrIG1pZ2h0IGZpbmQgcmVsZXZhbnQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBvYmplY3QuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgVG8gaW52b2tlIHVwb24gdHJhdmVyc2luZyBlYWNoIGNoaWxkLlxuICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IENvbnRleHQgZm9yIHRyYXZlcnNhbC5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sICcnLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGtleSBzdHJpbmcgdGhhdCBpZGVudGlmaWVzIGEgY29tcG9uZW50IHdpdGhpbiBhIHNldC5cbiAqXG4gKiBAcGFyYW0geyp9IGNvbXBvbmVudCBBIGNvbXBvbmVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYSBtYW51YWwga2V5LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IHRoYXQgaXMgdXNlZCBpZiBhIG1hbnVhbCBrZXkgaXMgbm90IHByb3ZpZGVkLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRLZXkoY29tcG9uZW50LCBpbmRleCkge1xuICAvLyBEbyBzb21lIHR5cGVjaGVja2luZyBoZXJlIHNpbmNlIHdlIGNhbGwgdGhpcyBibGluZGx5LiBXZSB3YW50IHRvIGVuc3VyZVxuICAvLyB0aGF0IHdlIGRvbid0IGJsb2NrIHBvdGVudGlhbCBmdXR1cmUgRVMgQVBJcy5cbiAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdvYmplY3QnICYmIGNvbXBvbmVudCAhPT0gbnVsbCAmJiBjb21wb25lbnQua2V5ICE9IG51bGwpIHtcbiAgICAvLyBFeHBsaWNpdCBrZXlcbiAgICByZXR1cm4gZXNjYXBlKGNvbXBvbmVudC5rZXkpO1xuICB9XG4gIC8vIEltcGxpY2l0IGtleSBkZXRlcm1pbmVkIGJ5IHRoZSBpbmRleCBpbiB0aGUgc2V0XG4gIHJldHVybiBpbmRleC50b1N0cmluZygzNik7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZChib29rS2VlcGluZywgY2hpbGQsIG5hbWUpIHtcbiAgdmFyIGZ1bmMgPSBib29rS2VlcGluZy5mdW5jLFxuICAgICAgY29udGV4dCA9IGJvb2tLZWVwaW5nLmNvbnRleHQ7XG5cbiAgZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBib29rS2VlcGluZy5jb3VudCsrKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlcyB0aHJvdWdoIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0Y2hpbGRyZW5mb3JlYWNoXG4gKlxuICogVGhlIHByb3ZpZGVkIGZvckVhY2hGdW5jKGNoaWxkLCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZvckVhY2hGdW5jXG4gKiBAcGFyYW0geyp9IGZvckVhY2hDb250ZXh0IENvbnRleHQgZm9yIGZvckVhY2hDb250ZXh0LlxuICovXG5mdW5jdGlvbiBmb3JFYWNoQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgdHJhdmVyc2VDb250ZXh0ID0gZ2V0UG9vbGVkVHJhdmVyc2VDb250ZXh0KG51bGwsIG51bGwsIGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCk7XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hTaW5nbGVDaGlsZCwgdHJhdmVyc2VDb250ZXh0KTtcbiAgcmVsZWFzZVRyYXZlcnNlQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0KGJvb2tLZWVwaW5nLCBjaGlsZCwgY2hpbGRLZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGJvb2tLZWVwaW5nLnJlc3VsdCxcbiAgICAgIGtleVByZWZpeCA9IGJvb2tLZWVwaW5nLmtleVByZWZpeCxcbiAgICAgIGZ1bmMgPSBib29rS2VlcGluZy5mdW5jLFxuICAgICAgY29udGV4dCA9IGJvb2tLZWVwaW5nLmNvbnRleHQ7XG5cblxuICB2YXIgbWFwcGVkQ2hpbGQgPSBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGJvb2tLZWVwaW5nLmNvdW50KyspO1xuICBpZiAoQXJyYXkuaXNBcnJheShtYXBwZWRDaGlsZCkpIHtcbiAgICBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKG1hcHBlZENoaWxkLCByZXN1bHQsIGNoaWxkS2V5LCBmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGM7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAobWFwcGVkQ2hpbGQgIT0gbnVsbCkge1xuICAgIGlmIChpc1ZhbGlkRWxlbWVudChtYXBwZWRDaGlsZCkpIHtcbiAgICAgIG1hcHBlZENoaWxkID0gY2xvbmVBbmRSZXBsYWNlS2V5KG1hcHBlZENoaWxkLFxuICAgICAgLy8gS2VlcCBib3RoIHRoZSAobWFwcGVkKSBhbmQgb2xkIGtleXMgaWYgdGhleSBkaWZmZXIsIGp1c3QgYXNcbiAgICAgIC8vIHRyYXZlcnNlQWxsQ2hpbGRyZW4gdXNlZCB0byBkbyBmb3Igb2JqZWN0cyBhcyBjaGlsZHJlblxuICAgICAga2V5UHJlZml4ICsgKG1hcHBlZENoaWxkLmtleSAmJiAoIWNoaWxkIHx8IGNoaWxkLmtleSAhPT0gbWFwcGVkQ2hpbGQua2V5KSA/IGVzY2FwZVVzZXJQcm92aWRlZEtleShtYXBwZWRDaGlsZC5rZXkpICsgJy8nIDogJycpICsgY2hpbGRLZXkpO1xuICAgIH1cbiAgICByZXN1bHQucHVzaChtYXBwZWRDaGlsZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgYXJyYXksIHByZWZpeCwgZnVuYywgY29udGV4dCkge1xuICB2YXIgZXNjYXBlZFByZWZpeCA9ICcnO1xuICBpZiAocHJlZml4ICE9IG51bGwpIHtcbiAgICBlc2NhcGVkUHJlZml4ID0gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHByZWZpeCkgKyAnLyc7XG4gIH1cbiAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IGdldFBvb2xlZFRyYXZlcnNlQ29udGV4dChhcnJheSwgZXNjYXBlZFByZWZpeCwgZnVuYywgY29udGV4dCk7XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQsIHRyYXZlcnNlQ29udGV4dCk7XG4gIHJlbGVhc2VUcmF2ZXJzZUNvbnRleHQodHJhdmVyc2VDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBNYXBzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0Y2hpbGRyZW5tYXBcbiAqXG4gKiBUaGUgcHJvdmlkZWQgbWFwRnVuY3Rpb24oY2hpbGQsIGtleSwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBmdW5jIFRoZSBtYXAgZnVuY3Rpb24uXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgQ29udGV4dCBmb3IgbWFwRnVuY3Rpb24uXG4gKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCBjb250YWluaW5nIHRoZSBvcmRlcmVkIG1hcCBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIHJlc3VsdCwgbnVsbCwgZnVuYywgY29udGV4dCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ291bnQgdGhlIG51bWJlciBvZiBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzXG4gKiBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3RjaGlsZHJlbmNvdW50XG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4uXG4gKi9cbmZ1bmN0aW9uIGNvdW50Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSwgbnVsbCk7XG59XG5cbi8qKlxuICogRmxhdHRlbiBhIGNoaWxkcmVuIG9iamVjdCAodHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gKSBhbmRcbiAqIHJldHVybiBhbiBhcnJheSB3aXRoIGFwcHJvcHJpYXRlbHkgcmUta2V5ZWQgY2hpbGRyZW4uXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNyZWFjdGNoaWxkcmVudG9hcnJheVxuICovXG5mdW5jdGlvbiB0b0FycmF5KGNoaWxkcmVuKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IGNoaWxkIGluIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiBhbmQgdmVyaWZpZXMgdGhhdCB0aGVyZVxuICogaXMgb25seSBvbmUgY2hpbGQgaW4gdGhlIGNvbGxlY3Rpb24uXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNyZWFjdGNoaWxkcmVub25seVxuICpcbiAqIFRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIG9mIHRoaXMgZnVuY3Rpb24gYXNzdW1lcyB0aGF0IGEgc2luZ2xlIGNoaWxkIGdldHNcbiAqIHBhc3NlZCB3aXRob3V0IGEgd3JhcHBlciwgYnV0IHRoZSBwdXJwb3NlIG9mIHRoaXMgaGVscGVyIGZ1bmN0aW9uIGlzIHRvXG4gKiBhYnN0cmFjdCBhd2F5IHRoZSBwYXJ0aWN1bGFyIHN0cnVjdHVyZSBvZiBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IGNoaWxkcmVuIENoaWxkIGNvbGxlY3Rpb24gc3RydWN0dXJlLlxuICogQHJldHVybiB7UmVhY3RFbGVtZW50fSBUaGUgZmlyc3QgYW5kIG9ubHkgYFJlYWN0RWxlbWVudGAgY29udGFpbmVkIGluIHRoZVxuICogc3RydWN0dXJlLlxuICovXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgIWlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLicpIDogdm9pZCAwO1xuICByZXR1cm4gY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICBpZiAoY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB7XG4gICAgICAhKGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSBudWxsIHx8IHR5cGVvZiBjYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJykgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdjcmVhdGVDb250ZXh0OiBFeHBlY3RlZCB0aGUgb3B0aW9uYWwgc2Vjb25kIGFyZ3VtZW50IHRvIGJlIGEgJyArICdmdW5jdGlvbi4gSW5zdGVhZCByZWNlaXZlZDogJXMnLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykgOiB2b2lkIDA7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbnRleHQgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgICBfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IGNhbGN1bGF0ZUNoYW5nZWRCaXRzLFxuICAgIC8vIEFzIGEgd29ya2Fyb3VuZCB0byBzdXBwb3J0IG11bHRpcGxlIGNvbmN1cnJlbnQgcmVuZGVyZXJzLCB3ZSBjYXRlZ29yaXplXG4gICAgLy8gc29tZSByZW5kZXJlcnMgYXMgcHJpbWFyeSBhbmQgb3RoZXJzIGFzIHNlY29uZGFyeS4gV2Ugb25seSBleHBlY3RcbiAgICAvLyB0aGVyZSB0byBiZSB0d28gY29uY3VycmVudCByZW5kZXJlcnMgYXQgbW9zdDogUmVhY3QgTmF0aXZlIChwcmltYXJ5KSBhbmRcbiAgICAvLyBGYWJyaWMgKHNlY29uZGFyeSk7IFJlYWN0IERPTSAocHJpbWFyeSkgYW5kIFJlYWN0IEFSVCAoc2Vjb25kYXJ5KS5cbiAgICAvLyBTZWNvbmRhcnkgcmVuZGVyZXJzIHN0b3JlIHRoZWlyIGNvbnRleHQgdmFsdWVzIG9uIHNlcGFyYXRlIGZpZWxkcy5cbiAgICBfY3VycmVudFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgX2N1cnJlbnRWYWx1ZTI6IGRlZmF1bHRWYWx1ZSxcbiAgICAvLyBUaGVzZSBhcmUgY2lyY3VsYXJcbiAgICBQcm92aWRlcjogbnVsbCxcbiAgICBDb25zdW1lcjogbnVsbFxuICB9O1xuXG4gIGNvbnRleHQuUHJvdmlkZXIgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX1BST1ZJREVSX1RZUEUsXG4gICAgX2NvbnRleHQ6IGNvbnRleHRcbiAgfTtcblxuICB2YXIgaGFzV2FybmVkQWJvdXRVc2luZ05lc3RlZENvbnRleHRDb25zdW1lcnMgPSBmYWxzZTtcbiAgdmFyIGhhc1dhcm5lZEFib3V0VXNpbmdDb25zdW1lclByb3ZpZGVyID0gZmFsc2U7XG5cbiAge1xuICAgIC8vIEEgc2VwYXJhdGUgb2JqZWN0LCBidXQgcHJveGllcyBiYWNrIHRvIHRoZSBvcmlnaW5hbCBjb250ZXh0IG9iamVjdCBmb3JcbiAgICAvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gSXQgaGFzIGEgZGlmZmVyZW50ICQkdHlwZW9mLCBzbyB3ZSBjYW4gcHJvcGVybHlcbiAgICAvLyB3YXJuIGZvciB0aGUgaW5jb3JyZWN0IHVzYWdlIG9mIENvbnRleHQgYXMgYSBDb25zdW1lci5cbiAgICB2YXIgQ29uc3VtZXIgPSB7XG4gICAgICAkJHR5cGVvZjogUkVBQ1RfQ09OVEVYVF9UWVBFLFxuICAgICAgX2NvbnRleHQ6IGNvbnRleHQsXG4gICAgICBfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IGNvbnRleHQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzXG4gICAgfTtcbiAgICAvLyAkRmxvd0ZpeE1lOiBGbG93IGNvbXBsYWlucyBhYm91dCBub3Qgc2V0dGluZyBhIHZhbHVlLCB3aGljaCBpcyBpbnRlbnRpb25hbCBoZXJlXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQ29uc3VtZXIsIHtcbiAgICAgIFByb3ZpZGVyOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghaGFzV2FybmVkQWJvdXRVc2luZ0NvbnN1bWVyUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGhhc1dhcm5lZEFib3V0VXNpbmdDb25zdW1lclByb3ZpZGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1JlbmRlcmluZyA8Q29udGV4dC5Db25zdW1lci5Qcm92aWRlcj4gaXMgbm90IHN1cHBvcnRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluICcgKyAnYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gRGlkIHlvdSBtZWFuIHRvIHJlbmRlciA8Q29udGV4dC5Qcm92aWRlcj4gaW5zdGVhZD8nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuUHJvdmlkZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKF9Qcm92aWRlcikge1xuICAgICAgICAgIGNvbnRleHQuUHJvdmlkZXIgPSBfUHJvdmlkZXI7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBfY3VycmVudFZhbHVlOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBjb250ZXh0Ll9jdXJyZW50VmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKF9jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSBfY3VycmVudFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgX2N1cnJlbnRWYWx1ZTI6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuX2N1cnJlbnRWYWx1ZTI7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKF9jdXJyZW50VmFsdWUyKSB7XG4gICAgICAgICAgY29udGV4dC5fY3VycmVudFZhbHVlMiA9IF9jdXJyZW50VmFsdWUyO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgQ29uc3VtZXI6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFoYXNXYXJuZWRBYm91dFVzaW5nTmVzdGVkQ29udGV4dENvbnN1bWVycykge1xuICAgICAgICAgICAgaGFzV2FybmVkQWJvdXRVc2luZ05lc3RlZENvbnRleHRDb25zdW1lcnMgPSB0cnVlO1xuICAgICAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnUmVuZGVyaW5nIDxDb250ZXh0LkNvbnN1bWVyLkNvbnN1bWVyPiBpcyBub3Qgc3VwcG9ydGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gJyArICdhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiBEaWQgeW91IG1lYW4gdG8gcmVuZGVyIDxDb250ZXh0LkNvbnN1bWVyPiBpbnN0ZWFkPycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY29udGV4dC5Db25zdW1lcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIC8vICRGbG93Rml4TWU6IEZsb3cgY29tcGxhaW5zIGFib3V0IG1pc3NpbmcgcHJvcGVydGllcyBiZWNhdXNlIGl0IGRvZXNuJ3QgdW5kZXJzdGFuZCBkZWZpbmVQcm9wZXJ0eVxuICAgIGNvbnRleHQuQ29uc3VtZXIgPSBDb25zdW1lcjtcbiAgfVxuXG4gIHtcbiAgICBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIgPSBudWxsO1xuICAgIGNvbnRleHQuX2N1cnJlbnRSZW5kZXJlcjIgPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIGxhenkoY3Rvcikge1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9MQVpZX1RZUEUsXG4gICAgX2N0b3I6IGN0b3IsXG4gICAgLy8gUmVhY3QgdXNlcyB0aGVzZSBmaWVsZHMgdG8gc3RvcmUgdGhlIHJlc3VsdC5cbiAgICBfc3RhdHVzOiAtMSxcbiAgICBfcmVzdWx0OiBudWxsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRSZWYocmVuZGVyKSB7XG4gIHtcbiAgICBpZiAodHlwZW9mIHJlbmRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnZm9yd2FyZFJlZiByZXF1aXJlcyBhIHJlbmRlciBmdW5jdGlvbiBidXQgd2FzIGdpdmVuICVzLicsIHJlbmRlciA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiByZW5kZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAhKFxuICAgICAgLy8gRG8gbm90IHdhcm4gZm9yIDAgYXJndW1lbnRzIGJlY2F1c2UgaXQgY291bGQgYmUgZHVlIHRvIHVzYWdlIG9mIHRoZSAnYXJndW1lbnRzJyBvYmplY3RcbiAgICAgIHJlbmRlci5sZW5ndGggPT09IDAgfHwgcmVuZGVyLmxlbmd0aCA9PT0gMikgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdmb3J3YXJkUmVmIHJlbmRlciBmdW5jdGlvbnMgYWNjZXB0IGV4YWN0bHkgdHdvIHBhcmFtZXRlcnM6IHByb3BzIGFuZCByZWYuICVzJywgcmVuZGVyLmxlbmd0aCA9PT0gMSA/ICdEaWQgeW91IGZvcmdldCB0byB1c2UgdGhlIHJlZiBwYXJhbWV0ZXI/JyA6ICdBbnkgYWRkaXRpb25hbCBwYXJhbWV0ZXIgd2lsbCBiZSB1bmRlZmluZWQuJykgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgaWYgKHJlbmRlciAhPSBudWxsKSB7XG4gICAgICAhKHJlbmRlci5kZWZhdWx0UHJvcHMgPT0gbnVsbCAmJiByZW5kZXIucHJvcFR5cGVzID09IG51bGwpID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnZm9yd2FyZFJlZiByZW5kZXIgZnVuY3Rpb25zIGRvIG5vdCBzdXBwb3J0IHByb3BUeXBlcyBvciBkZWZhdWx0UHJvcHMuICcgKyAnRGlkIHlvdSBhY2NpZGVudGFsbHkgcGFzcyBhIFJlYWN0IGNvbXBvbmVudD8nKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFLFxuICAgIHJlbmRlcjogcmVuZGVyXG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50VHlwZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgfHxcbiAgLy8gTm90ZTogaXRzIHR5cGVvZiBtaWdodCBiZSBvdGhlciB0aGFuICdzeW1ib2wnIG9yICdudW1iZXInIGlmIGl0J3MgYSBwb2x5ZmlsbC5cbiAgdHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfVFlQRSB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFKTtcbn1cblxuZnVuY3Rpb24gbWVtbyh0eXBlLCBjb21wYXJlKSB7XG4gIHtcbiAgICBpZiAoIWlzVmFsaWRFbGVtZW50VHlwZSh0eXBlKSkge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnbWVtbzogVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBjb21wb25lbnQuIEluc3RlYWQgJyArICdyZWNlaXZlZDogJXMnLCB0eXBlID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHR5cGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9NRU1PX1RZUEUsXG4gICAgdHlwZTogdHlwZSxcbiAgICBjb21wYXJlOiBjb21wYXJlID09PSB1bmRlZmluZWQgPyBudWxsIDogY29tcGFyZVxuICB9O1xufVxuXG4vKipcbiAqIFJlYWN0RWxlbWVudFZhbGlkYXRvciBwcm92aWRlcyBhIHdyYXBwZXIgYXJvdW5kIGEgZWxlbWVudCBmYWN0b3J5XG4gKiB3aGljaCB2YWxpZGF0ZXMgdGhlIHByb3BzIHBhc3NlZCB0byB0aGUgZWxlbWVudC4gVGhpcyBpcyBpbnRlbmRlZCB0byBiZVxuICogdXNlZCBvbmx5IGluIERFViBhbmQgY291bGQgYmUgcmVwbGFjZWQgYnkgYSBzdGF0aWMgdHlwZSBjaGVja2VyIGZvciBsYW5ndWFnZXNcbiAqIHRoYXQgc3VwcG9ydCBpdC5cbiAqL1xuXG52YXIgcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24gPSB2b2lkIDA7XG5cbntcbiAgcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkge1xuICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnR5cGUpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gJ1xcblxcbkNoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gZ2V0U291cmNlSW5mb0Vycm9yQWRkZW5kdW0oZWxlbWVudFByb3BzKSB7XG4gIGlmIChlbGVtZW50UHJvcHMgIT09IG51bGwgJiYgZWxlbWVudFByb3BzICE9PSB1bmRlZmluZWQgJiYgZWxlbWVudFByb3BzLl9fc291cmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgc291cmNlID0gZWxlbWVudFByb3BzLl9fc291cmNlO1xuICAgIHZhciBmaWxlTmFtZSA9IHNvdXJjZS5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLCAnJyk7XG4gICAgdmFyIGxpbmVOdW1iZXIgPSBzb3VyY2UubGluZU51bWJlcjtcbiAgICByZXR1cm4gJ1xcblxcbkNoZWNrIHlvdXIgY29kZSBhdCAnICsgZmlsZU5hbWUgKyAnOicgKyBsaW5lTnVtYmVyICsgJy4nO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yXG4gKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAqIHVwZGF0ZXMuXG4gKi9cbnZhciBvd25lckhhc0tleVVzZVdhcm5pbmcgPSB7fTtcblxuZnVuY3Rpb24gZ2V0Q3VycmVudENvbXBvbmVudEVycm9ySW5mbyhwYXJlbnRUeXBlKSB7XG4gIHZhciBpbmZvID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7XG5cbiAgaWYgKCFpbmZvKSB7XG4gICAgdmFyIHBhcmVudE5hbWUgPSB0eXBlb2YgcGFyZW50VHlwZSA9PT0gJ3N0cmluZycgPyBwYXJlbnRUeXBlIDogcGFyZW50VHlwZS5kaXNwbGF5TmFtZSB8fCBwYXJlbnRUeXBlLm5hbWU7XG4gICAgaWYgKHBhcmVudE5hbWUpIHtcbiAgICAgIGluZm8gPSAnXFxuXFxuQ2hlY2sgdGhlIHRvcC1sZXZlbCByZW5kZXIgY2FsbCB1c2luZyA8JyArIHBhcmVudE5hbWUgKyAnPi4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaW5mbztcbn1cblxuLyoqXG4gKiBXYXJuIGlmIHRoZSBlbGVtZW50IGRvZXNuJ3QgaGF2ZSBhbiBleHBsaWNpdCBrZXkgYXNzaWduZWQgdG8gaXQuXG4gKiBUaGlzIGVsZW1lbnQgaXMgaW4gYW4gYXJyYXkuIFRoZSBhcnJheSBjb3VsZCBncm93IGFuZCBzaHJpbmsgb3IgYmVcbiAqIHJlb3JkZXJlZC4gQWxsIGNoaWxkcmVuIHRoYXQgaGF2ZW4ndCBhbHJlYWR5IGJlZW4gdmFsaWRhdGVkIGFyZSByZXF1aXJlZCB0b1xuICogaGF2ZSBhIFwia2V5XCIgcHJvcGVydHkgYXNzaWduZWQgdG8gaXQuIEVycm9yIHN0YXR1c2VzIGFyZSBjYWNoZWQgc28gYSB3YXJuaW5nXG4gKiB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBlbGVtZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVFeHBsaWNpdEtleShlbGVtZW50LCBwYXJlbnRUeXBlKSB7XG4gIGlmICghZWxlbWVudC5fc3RvcmUgfHwgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkIHx8IGVsZW1lbnQua2V5ICE9IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcblxuICB2YXIgY3VycmVudENvbXBvbmVudEVycm9ySW5mbyA9IGdldEN1cnJlbnRDb21wb25lbnRFcnJvckluZm8ocGFyZW50VHlwZSk7XG4gIGlmIChvd25lckhhc0tleVVzZVdhcm5pbmdbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgb3duZXJIYXNLZXlVc2VXYXJuaW5nW2N1cnJlbnRDb21wb25lbnRFcnJvckluZm9dID0gdHJ1ZTtcblxuICAvLyBVc3VhbGx5IHRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBvZmZlbmRlciwgYnV0IGlmIGl0IGFjY2VwdHMgY2hpbGRyZW4gYXMgYVxuICAvLyBwcm9wZXJ0eSwgaXQgbWF5IGJlIHRoZSBjcmVhdG9yIG9mIHRoZSBjaGlsZCB0aGF0J3MgcmVzcG9uc2libGUgZm9yXG4gIC8vIGFzc2lnbmluZyBpdCBhIGtleS5cbiAgdmFyIGNoaWxkT3duZXIgPSAnJztcbiAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5fb3duZXIgJiYgZWxlbWVudC5fb3duZXIgIT09IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICAvLyBHaXZlIHRoZSBjb21wb25lbnQgdGhhdCBvcmlnaW5hbGx5IGNyZWF0ZWQgdGhpcyBjaGlsZC5cbiAgICBjaGlsZE93bmVyID0gJyBJdCB3YXMgcGFzc2VkIGEgY2hpbGQgZnJvbSAnICsgZ2V0Q29tcG9uZW50TmFtZShlbGVtZW50Ll9vd25lci50eXBlKSArICcuJztcbiAgfVxuXG4gIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGVsZW1lbnQpO1xuICB7XG4gICAgd2FybmluZyQxKGZhbHNlLCAnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJyArICclcyVzIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLCBjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvLCBjaGlsZE93bmVyKTtcbiAgfVxuICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChudWxsKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgdGhhdCBldmVyeSBlbGVtZW50IGVpdGhlciBpcyBwYXNzZWQgaW4gYSBzdGF0aWMgbG9jYXRpb24sIGluIGFuXG4gKiBhcnJheSB3aXRoIGFuIGV4cGxpY2l0IGtleXMgcHJvcGVydHkgZGVmaW5lZCwgb3IgaW4gYW4gb2JqZWN0IGxpdGVyYWxcbiAqIHdpdGggdmFsaWQga2V5IHByb3BlcnR5LlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdE5vZGV9IG5vZGUgU3RhdGljYWxseSBwYXNzZWQgY2hpbGQgb2YgYW55IHR5cGUuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgbm9kZSdzIHBhcmVudCdzIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlQ2hpbGRLZXlzKG5vZGUsIHBhcmVudFR5cGUpIHtcbiAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTtcbiAgICAgIGlmIChpc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgdmFsaWRhdGVFeHBsaWNpdEtleShjaGlsZCwgcGFyZW50VHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzVmFsaWRFbGVtZW50KG5vZGUpKSB7XG4gICAgLy8gVGhpcyBlbGVtZW50IHdhcyBwYXNzZWQgaW4gYSB2YWxpZCBsb2NhdGlvbi5cbiAgICBpZiAobm9kZS5fc3RvcmUpIHtcbiAgICAgIG5vZGUuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vZGUpIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obm9kZSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBFbnRyeSBpdGVyYXRvcnMgdXNlZCB0byBwcm92aWRlIGltcGxpY2l0IGtleXMsXG4gICAgICAvLyBidXQgbm93IHdlIHByaW50IGEgc2VwYXJhdGUgd2FybmluZyBmb3IgdGhlbSBsYXRlci5cbiAgICAgIGlmIChpdGVyYXRvckZuICE9PSBub2RlLmVudHJpZXMpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpO1xuICAgICAgICB2YXIgc3RlcCA9IHZvaWQgMDtcbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRWxlbWVudChzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgdmFsaWRhdGVFeHBsaWNpdEtleShzdGVwLnZhbHVlLCBwYXJlbnRUeXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhbiBlbGVtZW50LCB2YWxpZGF0ZSB0aGF0IGl0cyBwcm9wcyBmb2xsb3cgdGhlIHByb3BUeXBlcyBkZWZpbml0aW9uLFxuICogcHJvdmlkZWQgYnkgdGhlIHR5cGUuXG4gKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCkge1xuICB2YXIgdHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgdmFyIG5hbWUgPSB2b2lkIDAsXG4gICAgICBwcm9wVHlwZXMgPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIENsYXNzIG9yIGZ1bmN0aW9uIGNvbXBvbmVudFxuICAgIG5hbWUgPSB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZTtcbiAgICBwcm9wVHlwZXMgPSB0eXBlLnByb3BUeXBlcztcbiAgfSBlbHNlIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFKSB7XG4gICAgLy8gRm9yd2FyZFJlZlxuICAgIHZhciBmdW5jdGlvbk5hbWUgPSB0eXBlLnJlbmRlci5kaXNwbGF5TmFtZSB8fCB0eXBlLnJlbmRlci5uYW1lIHx8ICcnO1xuICAgIG5hbWUgPSB0eXBlLmRpc3BsYXlOYW1lIHx8IChmdW5jdGlvbk5hbWUgIT09ICcnID8gJ0ZvcndhcmRSZWYoJyArIGZ1bmN0aW9uTmFtZSArICcpJyA6ICdGb3J3YXJkUmVmJyk7XG4gICAgcHJvcFR5cGVzID0gdHlwZS5wcm9wVHlwZXM7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9wVHlwZXMpIHtcbiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KTtcbiAgICBjaGVja1Byb3BUeXBlcyhwcm9wVHlwZXMsIGVsZW1lbnQucHJvcHMsICdwcm9wJywgbmFtZSwgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRTdGFja0FkZGVuZHVtKTtcbiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChudWxsKTtcbiAgfSBlbHNlIGlmICh0eXBlLlByb3BUeXBlcyAhPT0gdW5kZWZpbmVkICYmICFwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93bikge1xuICAgIHByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duID0gdHJ1ZTtcbiAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdDb21wb25lbnQgJXMgZGVjbGFyZWQgYFByb3BUeXBlc2AgaW5zdGVhZCBvZiBgcHJvcFR5cGVzYC4gRGlkIHlvdSBtaXNzcGVsbCB0aGUgcHJvcGVydHkgYXNzaWdubWVudD8nLCBuYW1lIHx8ICdVbmtub3duJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiB0eXBlLmdldERlZmF1bHRQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICF0eXBlLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ2dldERlZmF1bHRQcm9wcyBpcyBvbmx5IHVzZWQgb24gY2xhc3NpYyBSZWFjdC5jcmVhdGVDbGFzcyAnICsgJ2RlZmluaXRpb25zLiBVc2UgYSBzdGF0aWMgcHJvcGVydHkgbmFtZWQgYGRlZmF1bHRQcm9wc2AgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgfVxufVxuXG4vKipcbiAqIEdpdmVuIGEgZnJhZ21lbnQsIHZhbGlkYXRlIHRoYXQgaXQgY2FuIG9ubHkgYmUgcHJvdmlkZWQgd2l0aCBmcmFnbWVudCBwcm9wc1xuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGZyYWdtZW50XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlRnJhZ21lbnRQcm9wcyhmcmFnbWVudCkge1xuICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChmcmFnbWVudCk7XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmcmFnbWVudC5wcm9wcyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChrZXkgIT09ICdjaGlsZHJlbicgJiYga2V5ICE9PSAna2V5Jykge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnSW52YWxpZCBwcm9wIGAlc2Agc3VwcGxpZWQgdG8gYFJlYWN0LkZyYWdtZW50YC4gJyArICdSZWFjdC5GcmFnbWVudCBjYW4gb25seSBoYXZlIGBrZXlgIGFuZCBgY2hpbGRyZW5gIHByb3BzLicsIGtleSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoZnJhZ21lbnQucmVmICE9PSBudWxsKSB7XG4gICAgd2FybmluZyQxKGZhbHNlLCAnSW52YWxpZCBhdHRyaWJ1dGUgYHJlZmAgc3VwcGxpZWQgdG8gYFJlYWN0LkZyYWdtZW50YC4nKTtcbiAgfVxuXG4gIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KG51bGwpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50V2l0aFZhbGlkYXRpb24odHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gIHZhciB2YWxpZFR5cGUgPSBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSk7XG5cbiAgLy8gV2Ugd2FybiBpbiB0aGlzIGNhc2UgYnV0IGRvbid0IHRocm93LiBXZSBleHBlY3QgdGhlIGVsZW1lbnQgY3JlYXRpb24gdG9cbiAgLy8gc3VjY2VlZCBhbmQgdGhlcmUgd2lsbCBsaWtlbHkgYmUgZXJyb3JzIGluIHJlbmRlci5cbiAgaWYgKCF2YWxpZFR5cGUpIHtcbiAgICB2YXIgaW5mbyA9ICcnO1xuICAgIGlmICh0eXBlID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwgJiYgT2JqZWN0LmtleXModHlwZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBpbmZvICs9ICcgWW91IGxpa2VseSBmb3Jnb3QgdG8gZXhwb3J0IHlvdXIgY29tcG9uZW50IGZyb20gdGhlIGZpbGUgJyArIFwiaXQncyBkZWZpbmVkIGluLCBvciB5b3UgbWlnaHQgaGF2ZSBtaXhlZCB1cCBkZWZhdWx0IGFuZCBuYW1lZCBpbXBvcnRzLlwiO1xuICAgIH1cblxuICAgIHZhciBzb3VyY2VJbmZvID0gZ2V0U291cmNlSW5mb0Vycm9yQWRkZW5kdW0ocHJvcHMpO1xuICAgIGlmIChzb3VyY2VJbmZvKSB7XG4gICAgICBpbmZvICs9IHNvdXJjZUluZm87XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZm8gKz0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7XG4gICAgfVxuXG4gICAgdmFyIHR5cGVTdHJpbmcgPSB2b2lkIDA7XG4gICAgaWYgKHR5cGUgPT09IG51bGwpIHtcbiAgICAgIHR5cGVTdHJpbmcgPSAnbnVsbCc7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlU3RyaW5nID0gJ2FycmF5JztcbiAgICB9IGVsc2UgaWYgKHR5cGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEUpIHtcbiAgICAgIHR5cGVTdHJpbmcgPSAnPCcgKyAoZ2V0Q29tcG9uZW50TmFtZSh0eXBlLnR5cGUpIHx8ICdVbmtub3duJykgKyAnIC8+JztcbiAgICAgIGluZm8gPSAnIERpZCB5b3UgYWNjaWRlbnRhbGx5IGV4cG9ydCBhIEpTWCBsaXRlcmFsIGluc3RlYWQgb2YgYSBjb21wb25lbnQ/JztcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZVN0cmluZyA9IHR5cGVvZiB0eXBlO1xuICAgIH1cblxuICAgIHdhcm5pbmckMShmYWxzZSwgJ1JlYWN0LmNyZWF0ZUVsZW1lbnQ6IHR5cGUgaXMgaW52YWxpZCAtLSBleHBlY3RlZCBhIHN0cmluZyAoZm9yICcgKyAnYnVpbHQtaW4gY29tcG9uZW50cykgb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSAnICsgJ2NvbXBvbmVudHMpIGJ1dCBnb3Q6ICVzLiVzJywgdHlwZVN0cmluZywgaW5mbyk7XG4gIH1cblxuICB2YXIgZWxlbWVudCA9IGNyZWF0ZUVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAvLyBUaGUgcmVzdWx0IGNhbiBiZSBudWxsaXNoIGlmIGEgbW9jayBvciBhIGN1c3RvbSBmdW5jdGlvbiBpcyB1c2VkLlxuICAvLyBUT0RPOiBEcm9wIHRoaXMgd2hlbiB0aGVzZSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgYXMgdGhlIHR5cGUgYXJndW1lbnQuXG4gIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIC8vIFNraXAga2V5IHdhcm5pbmcgaWYgdGhlIHR5cGUgaXNuJ3QgdmFsaWQgc2luY2Ugb3VyIGtleSB2YWxpZGF0aW9uIGxvZ2ljXG4gIC8vIGRvZXNuJ3QgZXhwZWN0IGEgbm9uLXN0cmluZy9mdW5jdGlvbiB0eXBlIGFuZCBjYW4gdGhyb3cgY29uZnVzaW5nIGVycm9ycy5cbiAgLy8gV2UgZG9uJ3Qgd2FudCBleGNlcHRpb24gYmVoYXZpb3IgdG8gZGlmZmVyIGJldHdlZW4gZGV2IGFuZCBwcm9kLlxuICAvLyAoUmVuZGVyaW5nIHdpbGwgdGhyb3cgd2l0aCBhIGhlbHBmdWwgbWVzc2FnZSBhbmQgYXMgc29vbiBhcyB0aGUgdHlwZSBpc1xuICAvLyBmaXhlZCwgdGhlIGtleSB3YXJuaW5ncyB3aWxsIGFwcGVhci4pXG4gIGlmICh2YWxpZFR5cGUpIHtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCB0eXBlKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSkge1xuICAgIHZhbGlkYXRlRnJhZ21lbnRQcm9wcyhlbGVtZW50KTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGYWN0b3J5V2l0aFZhbGlkYXRpb24odHlwZSkge1xuICB2YXIgdmFsaWRhdGVkRmFjdG9yeSA9IGNyZWF0ZUVsZW1lbnRXaXRoVmFsaWRhdGlvbi5iaW5kKG51bGwsIHR5cGUpO1xuICB2YWxpZGF0ZWRGYWN0b3J5LnR5cGUgPSB0eXBlO1xuICAvLyBMZWdhY3kgaG9vazogcmVtb3ZlIGl0XG4gIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsaWRhdGVkRmFjdG9yeSwgJ3R5cGUnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBsb3dQcmlvcml0eVdhcm5pbmckMShmYWxzZSwgJ0ZhY3RvcnkudHlwZSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdGhlIGNsYXNzIGRpcmVjdGx5ICcgKyAnYmVmb3JlIHBhc3NpbmcgaXQgdG8gY3JlYXRlRmFjdG9yeS4nKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd0eXBlJywge1xuICAgICAgICAgIHZhbHVlOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB2YWxpZGF0ZWRGYWN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbG9uZUVsZW1lbnRXaXRoVmFsaWRhdGlvbihlbGVtZW50LCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgdmFyIG5ld0VsZW1lbnQgPSBjbG9uZUVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIG5ld0VsZW1lbnQudHlwZSk7XG4gIH1cbiAgdmFsaWRhdGVQcm9wVHlwZXMobmV3RWxlbWVudCk7XG4gIHJldHVybiBuZXdFbGVtZW50O1xufVxuXG52YXIgUmVhY3QgPSB7XG4gIENoaWxkcmVuOiB7XG4gICAgbWFwOiBtYXBDaGlsZHJlbixcbiAgICBmb3JFYWNoOiBmb3JFYWNoQ2hpbGRyZW4sXG4gICAgY291bnQ6IGNvdW50Q2hpbGRyZW4sXG4gICAgdG9BcnJheTogdG9BcnJheSxcbiAgICBvbmx5OiBvbmx5Q2hpbGRcbiAgfSxcblxuICBjcmVhdGVSZWY6IGNyZWF0ZVJlZixcbiAgQ29tcG9uZW50OiBDb21wb25lbnQsXG4gIFB1cmVDb21wb25lbnQ6IFB1cmVDb21wb25lbnQsXG5cbiAgY3JlYXRlQ29udGV4dDogY3JlYXRlQ29udGV4dCxcbiAgZm9yd2FyZFJlZjogZm9yd2FyZFJlZixcbiAgbGF6eTogbGF6eSxcbiAgbWVtbzogbWVtbyxcblxuICBGcmFnbWVudDogUkVBQ1RfRlJBR01FTlRfVFlQRSxcbiAgU3RyaWN0TW9kZTogUkVBQ1RfU1RSSUNUX01PREVfVFlQRSxcbiAgdW5zdGFibGVfQ29uY3VycmVudE1vZGU6IFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFLFxuICBTdXNwZW5zZTogUkVBQ1RfU1VTUEVOU0VfVFlQRSxcbiAgdW5zdGFibGVfUHJvZmlsZXI6IFJFQUNUX1BST0ZJTEVSX1RZUEUsXG5cbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudFdpdGhWYWxpZGF0aW9uLFxuICBjbG9uZUVsZW1lbnQ6IGNsb25lRWxlbWVudFdpdGhWYWxpZGF0aW9uLFxuICBjcmVhdGVGYWN0b3J5OiBjcmVhdGVGYWN0b3J5V2l0aFZhbGlkYXRpb24sXG4gIGlzVmFsaWRFbGVtZW50OiBpc1ZhbGlkRWxlbWVudCxcblxuICB2ZXJzaW9uOiBSZWFjdFZlcnNpb24sXG5cbiAgX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6IFJlYWN0U2hhcmVkSW50ZXJuYWxzXG59O1xuXG5cblxudmFyIFJlYWN0JDIgPSBPYmplY3QuZnJlZXplKHtcblx0ZGVmYXVsdDogUmVhY3Rcbn0pO1xuXG52YXIgUmVhY3QkMyA9ICggUmVhY3QkMiAmJiBSZWFjdCApIHx8IFJlYWN0JDI7XG5cbi8vIFRPRE86IGRlY2lkZSBvbiB0aGUgdG9wLWxldmVsIGV4cG9ydCBmb3JtLlxuLy8gVGhpcyBpcyBoYWNreSBidXQgbWFrZXMgaXQgd29yayB3aXRoIGJvdGggUm9sbHVwIGFuZCBKZXN0LlxudmFyIHJlYWN0ID0gUmVhY3QkMy5kZWZhdWx0IHx8IFJlYWN0JDM7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVhY3Q7XG4gIH0pKCk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNi4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksZGE9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBlYShhLGIsYyxkLGUsZixnLGgpe2lmKCFhKXthPXZvaWQgMDtpZih2b2lkIDA9PT1iKWE9RXJyb3IoXCJNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtlbHNle3ZhciBrPVtjLGQsZSxmLGcsaF0sbD0wO2E9RXJyb3IoYi5yZXBsYWNlKC8lcy9nLGZ1bmN0aW9uKCl7cmV0dXJuIGtbbCsrXX0pKTthLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCJ9YS5mcmFtZXNUb1BvcD0xO3Rocm93IGE7fX1cbmZ1bmN0aW9uIHIoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxkPTA7ZDxiO2QrKyljKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tkKzFdKTtlYSghMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGMpfWFhP3ZvaWQgMDpyKFwiMjI3XCIpO2Z1bmN0aW9uIGZhKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fVxudmFyIGhhPSExLGlhPW51bGwsamE9ITEsa2E9bnVsbCxsYT17b25FcnJvcjpmdW5jdGlvbihhKXtoYT0hMDtpYT1hfX07ZnVuY3Rpb24gbWEoYSxiLGMsZCxlLGYsZyxoLGspe2hhPSExO2lhPW51bGw7ZmEuYXBwbHkobGEsYXJndW1lbnRzKX1mdW5jdGlvbiBuYShhLGIsYyxkLGUsZixnLGgsayl7bWEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGhhKXtpZihoYSl7dmFyIGw9aWE7aGE9ITE7aWE9bnVsbH1lbHNlIHIoXCIxOThcIiksbD12b2lkIDA7amF8fChqYT0hMCxrYT1sKX19dmFyIG9hPW51bGwscGE9e307XG5mdW5jdGlvbiBxYSgpe2lmKG9hKWZvcih2YXIgYSBpbiBwYSl7dmFyIGI9cGFbYV0sYz1vYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOnIoXCI5NlwiLGEpO2lmKCFyYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpyKFwiOTdcIixhKTtyYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO3NhLmhhc093blByb3BlcnR5KGgpP3IoXCI5OVwiLGgpOnZvaWQgMDtzYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ0YShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odGEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpyKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gdGEoYSxiLGMpe3VhW2FdP3IoXCIxMDBcIixhKTp2b2lkIDA7dWFbYV09Yjt2YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciByYT1bXSxzYT17fSx1YT17fSx2YT17fSx3YT1udWxsLHhhPW51bGwseWE9bnVsbDtmdW5jdGlvbiB6YShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXlhKGQpO25hKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24gQWEoYSxiKXtudWxsPT1iP3IoXCIzMFwiKTp2b2lkIDA7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfVxuZnVuY3Rpb24gQmEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIENhPW51bGw7ZnVuY3Rpb24gRGEoYSxiKXtpZihhKXt2YXIgYz1hLl9kaXNwYXRjaExpc3RlbmVycyxkPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtlKyspemEoYSxiLGNbZV0sZFtlXSk7ZWxzZSBjJiZ6YShhLGIsYyxkKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBFYShhKXtyZXR1cm4gRGEoYSwhMCl9ZnVuY3Rpb24gRmEoYSl7cmV0dXJuIERhKGEsITEpfVxudmFyIEdhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOmZ1bmN0aW9uKGEpe29hP3IoXCIxMDFcIik6dm9pZCAwO29hPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO3FhKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtwYS5oYXNPd25Qcm9wZXJ0eShjKSYmcGFbY109PT1kfHwocGFbY10/cihcIjEwMlwiLGMpOnZvaWQgMCxwYVtjXT1kLGI9ITApfWImJnFhKCl9fTtcbmZ1bmN0aW9uIEhhKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9d2EoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/cihcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIElhKGEsYil7bnVsbCE9PWEmJihDYT1BYShDYSxhKSk7YT1DYTtDYT1udWxsO2lmKGEmJihiP0JhKGEsRWEpOkJhKGEsRmEpLENhP3IoXCI5NVwiKTp2b2lkIDAsamEpKXRocm93IGI9a2EsamE9ITEsa2E9bnVsbCxiO312YXIgS2E9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksTGE9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitLYSxNYT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0thO2Z1bmN0aW9uIE5hKGEpe2lmKGFbTGFdKXJldHVybiBhW0xhXTtmb3IoOyFhW0xhXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0xhXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIE9hKGEpe2E9YVtMYV07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX1cbmZ1bmN0aW9uIFBhKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTtyKFwiMzNcIil9ZnVuY3Rpb24gUWEoYSl7cmV0dXJuIGFbTWFdfHxudWxsfWZ1bmN0aW9uIFJhKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gU2EoYSxiLGMpe2lmKGI9SGEoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1BYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1BYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1cbmZ1bmN0aW9uIFRhKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9UmEoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KVNhKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspU2EoY1tiXSxcImJ1YmJsZWRcIixhKX19ZnVuY3Rpb24gVWEoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9SGEoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPUFhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUFhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBWYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlVhKGEuX3RhcmdldEluc3QsbnVsbCxhKX1cbmZ1bmN0aW9uIFdhKGEpe0JhKGEsVGEpfXZhciBYYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHwhd2luZG93LmRvY3VtZW50fHwhd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO2Z1bmN0aW9uIFlhKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFphPXthbmltYXRpb25lbmQ6WWEoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246WWEoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpZYShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpZYShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LCRhPXt9LGFiPXt9O1xuWGEmJihhYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBaYS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBaYS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBaYS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBaYS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIGJiKGEpe2lmKCRhW2FdKXJldHVybiAkYVthXTtpZighWmFbYV0pcmV0dXJuIGE7dmFyIGI9WmFbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gYWIpcmV0dXJuICRhW2FdPWJbY107cmV0dXJuIGF9XG52YXIgY2I9YmIoXCJhbmltYXRpb25lbmRcIiksaWI9YmIoXCJhbmltYXRpb25pdGVyYXRpb25cIiksamI9YmIoXCJhbmltYXRpb25zdGFydFwiKSxrYj1iYihcInRyYW5zaXRpb25lbmRcIiksbGI9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLG1iPW51bGwsbmI9bnVsbCxvYj1udWxsO1xuZnVuY3Rpb24gcGIoKXtpZihvYilyZXR1cm4gb2I7dmFyIGEsYj1uYixjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBtYj9tYi52YWx1ZTptYi50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBvYj1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIHFiKCl7cmV0dXJuITB9ZnVuY3Rpb24gcmIoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHkoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP3FiOnJiO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cmI7cmV0dXJuIHRoaXN9XG5uKHkucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cWIpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWIpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9cWJ9LGlzUGVyc2lzdGVudDpyYixkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1yYjt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO3kuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xueS5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtzYihjKTtyZXR1cm4gY307c2IoeSk7ZnVuY3Rpb24gdGIoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gdWIoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOnIoXCIyNzlcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfVxuZnVuY3Rpb24gc2IoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9dGI7YS5yZWxlYXNlPXVifXZhciB2Yj15LmV4dGVuZCh7ZGF0YTpudWxsfSksd2I9eS5leHRlbmQoe2RhdGE6bnVsbH0pLHhiPVs5LDEzLDI3LDMyXSx5Yj1YYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csemI9bnVsbDtYYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoemI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBBYj1YYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXpiLEJiPVhhJiYoIXlifHx6YiYmODx6YiYmMTE+PXpiKSxDYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxEYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxFYj0hMTtcbmZ1bmN0aW9uIEZiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09eGIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBHYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBIYj0hMTtmdW5jdGlvbiBLYihhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gR2IoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0ViPSEwO3JldHVybiBDYjtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1DYiYmRWI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gTGIoYSxiKXtpZihIYilyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwheWImJkZiKGEsYik/KGE9cGIoKSxvYj1uYj1tYj1udWxsLEhiPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBCYiYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgTWI9e2V2ZW50VHlwZXM6RGIsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKHliKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmU9RGIuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmU9RGIuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjplPURiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSBIYj9GYihhLGMpJiYoZT1EYi5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPURiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KEJiJiZcImtvXCIhPT1jLmxvY2FsZSYmKEhifHxlIT09RGIuY29tcG9zaXRpb25TdGFydD9lPT09RGIuY29tcG9zaXRpb25FbmQmJkhiJiYoZj1wYigpKToobWI9ZCxuYj1cInZhbHVlXCJpbiBtYj9tYi52YWx1ZTptYi50ZXh0Q29udGVudCxIYj1cbiEwKSksZT12Yi5nZXRQb29sZWQoZSxiLGMsZCksZj9lLmRhdGE9ZjooZj1HYihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksV2EoZSksZj1lKTpmPW51bGw7KGE9QWI/S2IoYSxjKTpMYihhLGMpKT8oYj13Yi5nZXRQb29sZWQoRGIuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFdhKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LE5iPW51bGwsT2I9bnVsbCxQYj1udWxsO2Z1bmN0aW9uIFZiKGEpe2lmKGE9eGEoYSkpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBOYj9yKFwiMjgwXCIpOnZvaWQgMDt2YXIgYj13YShhLnN0YXRlTm9kZSk7TmIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBXYihhKXtPYj9QYj9QYi5wdXNoKGEpOlBiPVthXTpPYj1hfWZ1bmN0aW9uIFhiKCl7aWYoT2Ipe3ZhciBhPU9iLGI9UGI7UGI9T2I9bnVsbDtWYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspVmIoYlthXSl9fVxuZnVuY3Rpb24gWWIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBaYihhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiAkYigpe312YXIgYWM9ITE7ZnVuY3Rpb24gYmMoYSxiKXtpZihhYylyZXR1cm4gYShiKTthYz0hMDt0cnl7cmV0dXJuIFliKGEsYil9ZmluYWxseXtpZihhYz0hMSxudWxsIT09T2J8fG51bGwhPT1QYikkYigpLFhiKCl9fXZhciBjYz17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBkYyhhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWNjW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbmZ1bmN0aW9uIGVjKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBmYyhhKXtpZighWGEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZ2MoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIGhjKGEpe3ZhciBiPWdjKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBpYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9aGMoYSkpfWZ1bmN0aW9uIGpjKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1nYyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIGtjPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELGxjPS9eKC4qKVtcXFxcXFwvXS8sRD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLG1jPUQ/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsbmM9RD9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LG9jPUQ/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHBjPUQ/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHFjPUQ/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHJjPUQ/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHNjPUQ/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsdGM9RD9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLHVjPUQ/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHZjPUQ/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOlxuNjAxMTMsd2M9RD9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx4Yz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHljPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiB6YyhhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eWMmJmFbeWNdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBBYyhhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHRjOnJldHVyblwiQ29uY3VycmVudE1vZGVcIjtjYXNlIG9jOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIG5jOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBxYzpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBwYzpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIHZjOnJldHVyblwiU3VzcGVuc2VcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2Ugc2M6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSByYzpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIHVjOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXG5cIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSB3YzpyZXR1cm4gQWMoYS50eXBlKTtjYXNlIHhjOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gQWMoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQmMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAwOmNhc2UgMTpjYXNlIDU6Y2FzZSA4OnZhciBjPWEuX2RlYnVnT3duZXIsZD1hLl9kZWJ1Z1NvdXJjZSxlPUFjKGEudHlwZSk7dmFyIGY9bnVsbDtjJiYoZj1BYyhjLnR5cGUpKTtjPWU7ZT1cIlwiO2Q/ZT1cIiAoYXQgXCIrZC5maWxlTmFtZS5yZXBsYWNlKGxjLFwiXCIpK1wiOlwiK2QubGluZU51bWJlcitcIilcIjpmJiYoZT1cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiKTtmPVwiXFxuICAgIGluIFwiKyhjfHxcIlVua25vd25cIikrZTticmVhayBhO2RlZmF1bHQ6Zj1cIlwifWIrPWY7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBDYz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sRGM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxFYz17fSxGYz17fTtcbmZ1bmN0aW9uIEdjKGEpe2lmKERjLmNhbGwoRmMsYSkpcmV0dXJuITA7aWYoRGMuY2FsbChFYyxhKSlyZXR1cm4hMTtpZihDYy50ZXN0KGEpKXJldHVybiBGY1thXT0hMDtFY1thXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBIYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIEljKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fEhjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gRihhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIEc9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSwwLCExLGEsbnVsbCl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07R1tiXT1uZXcgRihiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSwyLCExLGEsbnVsbCl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtHW2FdPW5ldyBGKGEsMywhMCxhLG51bGwpfSk7XG5bXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0dbYV09bmV3IEYoYSw0LCExLGEsbnVsbCl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDYsITEsYSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7R1thXT1uZXcgRihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIE1jPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gTmMoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoTWMsXG5OYyk7R1tiXT1uZXcgRihiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoTWMsTmMpO0dbYl09bmV3IEYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoTWMsTmMpO0dbYl09bmV3IEYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtHLnRhYkluZGV4PW5ldyBGKFwidGFiSW5kZXhcIiwxLCExLFwidGFiaW5kZXhcIixudWxsKTtcbmZ1bmN0aW9uIE9jKGEsYixjLGQpe3ZhciBlPUcuaGFzT3duUHJvcGVydHkoYik/R1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KEljKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9HYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gUGMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFFjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIFJjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVBjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gU2MoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZPYyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gVGMoYSxiKXtTYyhhLGIpO3ZhciBjPVBjKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP1VjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJlVjKGEsYi50eXBlLFBjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gYmQoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gVWMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBjZD17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBkZChhLGIsYyl7YT15LmdldFBvb2xlZChjZC5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO1diKGMpO1dhKGEpO3JldHVybiBhfXZhciBlZD1udWxsLGZkPW51bGw7ZnVuY3Rpb24gZ2QoYSl7SWEoYSwhMSl9XG5mdW5jdGlvbiBoZChhKXt2YXIgYj1QYShhKTtpZihqYyhiKSlyZXR1cm4gYX1mdW5jdGlvbiBpZChhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBqZD0hMTtYYSYmKGpkPWZjKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIGtkKCl7ZWQmJihlZC5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixsZCksZmQ9ZWQ9bnVsbCl9ZnVuY3Rpb24gbGQoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJmhkKGZkKSYmKGE9ZGQoZmQsYSxlYyhhKSksYmMoZ2QsYSkpfWZ1bmN0aW9uIG1kKGEsYixjKXtcImZvY3VzXCI9PT1hPyhrZCgpLGVkPWIsZmQ9YyxlZC5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixsZCkpOlwiYmx1clwiPT09YSYma2QoKX1mdW5jdGlvbiBuZChhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBoZChmZCl9XG5mdW5jdGlvbiBvZChhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIGhkKGIpfWZ1bmN0aW9uIHBkKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIGhkKGIpfVxudmFyIHFkPXtldmVudFR5cGVzOmNkLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6amQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1BhKGIpOndpbmRvdyxmPXZvaWQgMCxnPXZvaWQgMCxoPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09aHx8XCJpbnB1dFwiPT09aCYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1pZDpkYyhlKT9qZD9mPXBkOihmPW5kLGc9bWQpOihoPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1oLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPW9kKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBkZChmLGMsZCk7ZyYmZyhhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJlVjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LHJkPXkuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxzZD17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiB0ZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPXNkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gdWQoKXtyZXR1cm4gdGR9XG52YXIgdmQ9MCx3ZD0wLHhkPSExLHlkPSExLHpkPXJkLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp1ZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj12ZDt2ZD1hLnNjcmVlblg7cmV0dXJuIHhkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooeGQ9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj13ZDt3ZD1hLnNjcmVlblk7cmV0dXJuIHlkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooeWQ9ITAsMCl9fSksQWQ9emQuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLEJkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxDZD17ZXZlbnRUeXBlczpCZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9OYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGc9dm9pZCAwLGg9dm9pZCAwLGs9dm9pZCAwLGw9dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWc9emQsaD1CZC5tb3VzZUxlYXZlLGs9QmQubW91c2VFbnRlcixsPVwibW91c2VcIjtcbmVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWc9QWQsaD1CZC5wb2ludGVyTGVhdmUsaz1CZC5wb2ludGVyRW50ZXIsbD1cInBvaW50ZXJcIjt2YXIgbT1udWxsPT1mP2U6UGEoZik7ZT1udWxsPT1iP2U6UGEoYik7YT1nLmdldFBvb2xlZChoLGYsYyxkKTthLnR5cGU9bCtcImxlYXZlXCI7YS50YXJnZXQ9bTthLnJlbGF0ZWRUYXJnZXQ9ZTtjPWcuZ2V0UG9vbGVkKGssYixjLGQpO2MudHlwZT1sK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1tO2Q9YjtpZihmJiZkKWE6e2I9ZjtlPWQ7bD0wO2ZvcihnPWI7ZztnPVJhKGcpKWwrKztnPTA7Zm9yKGs9ZTtrO2s9UmEoaykpZysrO2Zvcig7MDxsLWc7KWI9UmEoYiksbC0tO2Zvcig7MDxnLWw7KWU9UmEoZSksZy0tO2Zvcig7bC0tOyl7aWYoYj09PWV8fGI9PT1lLmFsdGVybmF0ZSlicmVhayBhO2I9UmEoYik7ZT1SYShlKX1iPW51bGx9ZWxzZSBiPW51bGw7ZT1iO2ZvcihiPVtdO2YmJmYhPT1lOyl7bD1cbmYuYWx0ZXJuYXRlO2lmKG51bGwhPT1sJiZsPT09ZSlicmVhaztiLnB1c2goZik7Zj1SYShmKX1mb3IoZj1bXTtkJiZkIT09ZTspe2w9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWwmJmw9PT1lKWJyZWFrO2YucHVzaChkKTtkPVJhKGQpfWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspVWEoYltkXSxcImJ1YmJsZWRcIixhKTtmb3IoZD1mLmxlbmd0aDswPGQtLTspVWEoZltkXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuW2EsY119fSxEZD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIEVkKGEsYil7cmV0dXJuIGE9PT1iPzAhPT1hfHwwIT09Ynx8MS9hPT09MS9iOmEhPT1hJiZiIT09Yn1cbmZ1bmN0aW9uIEZkKGEsYil7aWYoRWQoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFEZC5jYWxsKGIsY1tkXSl8fCFFZChhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEdkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIEhkKGEpezIhPT1HZChhKT9yKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIElkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPUdkKGEpLDM9PT1iP3IoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm4sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIEhkKGUpLGE7aWYoZz09PWQpcmV0dXJuIEhkKGUpLGI7Zz1nLnNpYmxpbmd9cihcIjE4OFwiKX1pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31nP1xudm9pZCAwOnIoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9yKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/cihcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBKZChhKXthPUlkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIEtkPXkuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxMZD15LmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLE1kPXJkLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gTmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgT2Q9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LFBkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxRZD1yZC5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9T2RbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9TmQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP1BkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp1ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9OZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9OZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXpkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxTZD1yZC5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp1ZH0pLFRkPXkuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLFVkPXpkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksVmQ9W1tcImFib3J0XCIsXCJhYm9ydFwiXSxbY2IsXCJhbmltYXRpb25FbmRcIl0sW2liLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCJdLFtqYixcImFuaW1hdGlvblN0YXJ0XCJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCJdLFtcImRyYWdcIixcImRyYWdcIl0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIl0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCJdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCJdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiXSxcbltcImVuZGVkXCIsXCJlbmRlZFwiXSxbXCJlcnJvclwiLFwiZXJyb3JcIl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCJdLFtcImxvYWRcIixcImxvYWRcIl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIl0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIl0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCJdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIl0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCJdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIl0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIl0sXG5bXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIl0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIl0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIl0sW2tiLFwidHJhbnNpdGlvbkVuZFwiXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdLFtcIndoZWVsXCIsXCJ3aGVlbFwiXV0sV2Q9e30sWGQ9e307ZnVuY3Rpb24gWWQoYSxiKXt2YXIgYz1hWzBdO2E9YVsxXTt2YXIgZD1cIm9uXCIrKGFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpKTtiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTtXZFthXT1iO1hkW2NdPWJ9XG5bW1wiYmx1clwiLFwiYmx1clwiXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiXSxbXCJjbGlja1wiLFwiY2xpY2tcIl0sW1wiY2xvc2VcIixcImNsb3NlXCJdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiXSxbXCJjb3B5XCIsXCJjb3B5XCJdLFtcImN1dFwiLFwiY3V0XCJdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIl0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiXSxbXCJkcm9wXCIsXCJkcm9wXCJdLFtcImZvY3VzXCIsXCJmb2N1c1wiXSxbXCJpbnB1dFwiLFwiaW5wdXRcIl0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCJdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiXSxbXCJrZXl1cFwiLFwia2V5VXBcIl0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIl0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiXSxbXCJwYXN0ZVwiLFwicGFzdGVcIl0sW1wicGF1c2VcIixcInBhdXNlXCJdLFtcInBsYXlcIixcInBsYXlcIl0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiXSxcbltcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCJdLFtcInJlc2V0XCIsXCJyZXNldFwiXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIl0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCJdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIl0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7WWQoYSwhMCl9KTtWZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe1lkKGEsITEpfSk7XG52YXIgWmQ9e2V2ZW50VHlwZXM6V2QsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9WGRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVhkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09TmQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPVFkO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1NZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPXpkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG5SZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPVNkO2JyZWFrO2Nhc2UgY2I6Y2FzZSBpYjpjYXNlIGpiOmE9S2Q7YnJlYWs7Y2FzZSBrYjphPVRkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPXJkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9VWQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1MZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPUFkO2JyZWFrO2RlZmF1bHQ6YT15fWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7V2EoYik7cmV0dXJuIGJ9fSwkZD1aZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsXG5hZT1bXTtmdW5jdGlvbiBiZShhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkO2ZvcihkPWM7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFkKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYyk7Yz1OYShkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1lYyhhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO2Zvcih2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9bnVsbCxoPTA7aDxyYS5sZW5ndGg7aCsrKXt2YXIgaz1yYVtoXTtrJiYoaz1rLmV4dHJhY3RFdmVudHMoZCxiLGYsZSkpJiYoZz1BYShnLGspKX1JYShnLCExKX19dmFyIGNlPSEwO1xuZnVuY3Rpb24gSChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPSgkZChhKT9kZTplZSkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITEpfWZ1bmN0aW9uIGdlKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KCRkKGEpP2RlOmVlKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMCl9ZnVuY3Rpb24gZGUoYSxiKXtaYihlZSxhLGIpfVxuZnVuY3Rpb24gZWUoYSxiKXtpZihjZSl7dmFyIGM9ZWMoYik7Yz1OYShjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PUdkKGMpfHwoYz1udWxsKTtpZihhZS5sZW5ndGgpe3ZhciBkPWFlLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e2JjKGJlLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+YWUubGVuZ3RoJiZhZS5wdXNoKGEpfX19dmFyIGhlPXt9LGllPTAsamU9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuZnVuY3Rpb24ga2UoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsamUpfHwoYVtqZV09aWUrKyxoZVthW2plXV09e30pO3JldHVybiBoZVthW2plXV19ZnVuY3Rpb24gbGUoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIG1lKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIG5lKGEsYil7dmFyIGM9bWUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9bWUoYyl9fWZ1bmN0aW9uIG9lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/b2UoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gcGUoKXtmb3IodmFyIGE9d2luZG93LGI9bGUoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXthPWIuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3fWNhdGNoKGMpe2JyZWFrfWI9bGUoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gcWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciByZT1YYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLHNlPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSx0ZT1udWxsLHVlPW51bGwsSGU9bnVsbCxJZT0hMTtcbmZ1bmN0aW9uIEplKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoSWV8fG51bGw9PXRlfHx0ZSE9PWxlKGMpKXJldHVybiBudWxsO2M9dGU7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmcWUoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gSGUmJkZkKEhlLGMpP251bGw6KEhlPWMsYT15LmdldFBvb2xlZChzZS5zZWxlY3QsdWUsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD10ZSxXYShhKSxhKX1cbnZhciBLZT17ZXZlbnRUeXBlczpzZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1rZShlKTtmPXZhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/UGEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihkYyhlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSl0ZT1lLHVlPWIsSGU9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOkhlPXVlPXRlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOkllPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gSWU9ITEsSmUoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYocmUpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBKZShjLGQpfXJldHVybiBudWxsfX07R2EuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt3YT1RYTt4YT1PYTt5YT1QYTtHYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOlpkLEVudGVyTGVhdmVFdmVudFBsdWdpbjpDZCxDaGFuZ2VFdmVudFBsdWdpbjpxZCxTZWxlY3RFdmVudFBsdWdpbjpLZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOk1ifSk7ZnVuY3Rpb24gTGUoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNZShhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUxlKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiBOZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrUGMoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIE9lKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9yKFwiOTFcIik6dm9pZCAwO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIFBlKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/cihcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOnIoXCI5M1wiKSxiPWJbMF0pLGM9YiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlBjKGMpfX1cbmZ1bmN0aW9uIFFlKGEsYil7dmFyIGM9UGMoYi52YWx1ZSksZD1QYyhiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIFJlKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBTZT17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBUZShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIFVlKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9UZShiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBWZT12b2lkIDAsV2U9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09U2Uuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7VmU9VmV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7VmUuaW5uZXJIVE1MPVwiPHN2Zz5cIitiK1wiPC9zdmc+XCI7Zm9yKGI9VmUuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gWGUoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBZZT17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxaZT1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoWWUpLmZvckVhY2goZnVuY3Rpb24oYSl7WmUuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtZZVtiXT1ZZVthXX0pfSk7XG5mdW5jdGlvbiAkZShhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIik7dmFyIGU9Yzt2YXIgZj1iW2NdO2U9bnVsbD09Znx8XCJib29sZWFuXCI9PT10eXBlb2YgZnx8XCJcIj09PWY/XCJcIjpkfHxcIm51bWJlclwiIT09dHlwZW9mIGZ8fDA9PT1mfHxZZS5oYXNPd25Qcm9wZXJ0eShlKSYmWWVbZV0/KFwiXCIrZikudHJpbSgpOmYrXCJweFwiO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgYWY9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIGJmKGEsYil7YiYmKGFmW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9yKFwiMTM3XCIsYSxcIlwiKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP3IoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6cihcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/cihcIjYyXCIsXCJcIik6dm9pZCAwKX1cbmZ1bmN0aW9uIGNmKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1cbmZ1bmN0aW9uIGRmKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPWtlKGEpO2I9dmFbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07aWYoIWMuaGFzT3duUHJvcGVydHkoZSl8fCFjW2VdKXtzd2l0Y2goZSl7Y2FzZSBcInNjcm9sbFwiOmdlKFwic2Nyb2xsXCIsYSk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpnZShcImZvY3VzXCIsYSk7Z2UoXCJibHVyXCIsYSk7Yy5ibHVyPSEwO2MuZm9jdXM9ITA7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOmZjKGUpJiZnZShlLGEpO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1sYi5pbmRleE9mKGUpJiZIKGUsYSl9Y1tlXT0hMH19fWZ1bmN0aW9uIGVmKCl7fXZhciBmZj1udWxsLGdmPW51bGw7XG5mdW5jdGlvbiBoZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9ZnVuY3Rpb24gamYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBrZj1zZXRUaW1lb3V0LGxmPWNsZWFyVGltZW91dDtmdW5jdGlvbiBtZihhKXtmb3IoYT1hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfVxuZnVuY3Rpb24gbmYoYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfW5ldyBTZXQ7dmFyIG9mPVtdLHBmPS0xO2Z1bmN0aW9uIEkoYSl7MD5wZnx8KGEuY3VycmVudD1vZltwZl0sb2ZbcGZdPW51bGwscGYtLSl9ZnVuY3Rpb24gSihhLGIpe3BmKys7b2ZbcGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgcWY9e30sSz17Y3VycmVudDpxZn0sTD17Y3VycmVudDohMX0scmY9cWY7XG5mdW5jdGlvbiBzZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIHFmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIE0oYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiB0ZihhKXtJKEwsYSk7SShLLGEpfWZ1bmN0aW9uIHVmKGEpe0koTCxhKTtJKEssYSl9XG5mdW5jdGlvbiB2ZihhLGIsYyl7Sy5jdXJyZW50IT09cWY/cihcIjE2OFwiKTp2b2lkIDA7SihLLGIsYSk7SihMLGMsYSl9ZnVuY3Rpb24gd2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWUgaW4gYT92b2lkIDA6cihcIjEwOFwiLEFjKGIpfHxcIlVua25vd25cIixlKTtyZXR1cm4gbih7fSxjLGQpfWZ1bmN0aW9uIHhmKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8cWY7cmY9Sy5jdXJyZW50O0ooSyxiLGEpO0ooTCxMLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiB5ZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7ZD92b2lkIDA6cihcIjE2OVwiKTtjPyhiPXdmKGEsYixyZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1iLEkoTCxhKSxJKEssYSksSihLLGIsYSkpOkkoTCxhKTtKKEwsYyxhKX12YXIgemY9bnVsbCxBZj1udWxsO2Z1bmN0aW9uIEJmKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19XG5mdW5jdGlvbiBDZihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTt6Zj1CZihmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7QWY9QmYoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIERmKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5maXJzdENvbnRleHREZXBlbmRlbmN5PXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIE4oYSxiLGMsZCl7cmV0dXJuIG5ldyBEZihhLGIsYyxkKX1cbmZ1bmN0aW9uIEVmKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gRmYoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIEVmKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT11YylyZXR1cm4gMTE7aWYoYT09PXdjKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIEdmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9TihhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yy5maXJzdENvbnRleHREZXBlbmRlbmN5PWEuZmlyc3RDb250ZXh0RGVwZW5kZW5jeTtjLnNpYmxpbmc9YS5zaWJsaW5nO1xuYy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gSGYoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKUVmKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIG9jOnJldHVybiBJZihjLmNoaWxkcmVuLGUsZixiKTtjYXNlIHRjOnJldHVybiBKZihjLGV8MyxmLGIpO2Nhc2UgcGM6cmV0dXJuIEpmKGMsZXwyLGYsYik7Y2FzZSBxYzpyZXR1cm4gYT1OKDEyLGMsYixlfDQpLGEuZWxlbWVudFR5cGU9cWMsYS50eXBlPXFjLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgdmM6cmV0dXJuIGE9TigxMyxjLGIsZSksYS5lbGVtZW50VHlwZT12YyxhLnR5cGU9dmMsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHJjOmc9MTA7YnJlYWsgYTtjYXNlIHNjOmc9OTticmVhayBhO2Nhc2UgdWM6Zz0xMTticmVhayBhO2Nhc2Ugd2M6Zz1cbjE0O2JyZWFrIGE7Y2FzZSB4YzpnPTE2O2Q9bnVsbDticmVhayBhfXIoXCIxMzBcIixudWxsPT1hP2E6dHlwZW9mIGEsXCJcIil9Yj1OKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gSWYoYSxiLGMsZCl7YT1OKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBKZihhLGIsYyxkKXthPU4oOCxhLGQsYik7Yj0wPT09KGImMSk/cGM6dGM7YS5lbGVtZW50VHlwZT1iO2EudHlwZT1iO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBLZihhLGIsYyl7YT1OKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIExmKGEsYixjKXtiPU4oNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9ZnVuY3Rpb24gTWYoYSxiKXthLmRpZEVycm9yPSExO3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZTswPT09Yz9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT1iOmM+Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YjphLmxhdGVzdFBlbmRpbmdUaW1lPGImJihhLmxhdGVzdFBlbmRpbmdUaW1lPWIpO05mKGIsYSl9XG5mdW5jdGlvbiBPZihhLGIpe2EuZGlkRXJyb3I9ITE7dmFyIGM9YS5sYXRlc3RQaW5nZWRUaW1lOzAhPT1jJiZjPD1iJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApO2M9YS5lYXJsaWVzdFBlbmRpbmdUaW1lO3ZhciBkPWEubGF0ZXN0UGVuZGluZ1RpbWU7Yz09PWI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWQ9PT1iP2EubGF0ZXN0UGVuZGluZ1RpbWU9MDpkOmQ9PT1iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1jKTtjPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2Q9YS5sYXRlc3RTdXNwZW5kZWRUaW1lOzA9PT1jP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWEubGF0ZXN0U3VzcGVuZGVkVGltZT1iOmM+Yj9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1iOmQ8YiYmKGEubGF0ZXN0U3VzcGVuZGVkVGltZT1iKTtOZihiLGEpfVxuZnVuY3Rpb24gUGYoYSxiKXt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7YT1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtpZigwPT09Ynx8MCE9PWMmJmM8YiliPWM7aWYoMD09PWJ8fDAhPT1hJiZhPGIpYj1hO3JldHVybiBifWZ1bmN0aW9uIE5mKGEsYil7dmFyIGM9Yi5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsZD1iLmxhdGVzdFN1c3BlbmRlZFRpbWUsZT1iLmVhcmxpZXN0UGVuZGluZ1RpbWUsZj1iLmxhdGVzdFBpbmdlZFRpbWU7ZT0wIT09ZT9lOmY7MD09PWUmJigwPT09YXx8ZD5hKSYmKGU9ZCk7YT1lOzAhPT1hJiYwIT09YyYmYzxhJiYoYT1jKTtiLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uPWU7Yi5leHBpcmF0aW9uVGltZT1hfXZhciBRZj0hMTtcbmZ1bmN0aW9uIFJmKGEpe3JldHVybntiYXNlU3RhdGU6YSxmaXJzdFVwZGF0ZTpudWxsLGxhc3RVcGRhdGU6bnVsbCxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1mdW5jdGlvbiBTZihhKXtyZXR1cm57YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBUZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBVZihhLGIpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBWZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1jKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO3ZhciBlPW51bGw7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9UmYoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBkPWEudXBkYXRlUXVldWUsZT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1kP251bGw9PT1lPyhkPWEudXBkYXRlUXVldWU9UmYoYS5tZW1vaXplZFN0YXRlKSxlPWMudXBkYXRlUXVldWU9UmYoYy5tZW1vaXplZFN0YXRlKSk6ZD1hLnVwZGF0ZVF1ZXVlPVNmKGUpOm51bGw9PT1lJiYoZT1jLnVwZGF0ZVF1ZXVlPVNmKGQpKTtudWxsPT09ZXx8ZD09PWU/VWYoZCxiKTpudWxsPT09ZC5sYXN0VXBkYXRlfHxudWxsPT09ZS5sYXN0VXBkYXRlPyhVZihkLGIpLFVmKGUsYikpOihVZihkLGIpLGUubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIFdmKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtjPW51bGw9PT1jP2EudXBkYXRlUXVldWU9UmYoYS5tZW1vaXplZFN0YXRlKTpYZihhLGMpO251bGw9PT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT9jLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yy5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooYy5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGMubGFzdENhcHR1cmVkVXBkYXRlPWIpfWZ1bmN0aW9uIFhmKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPVNmKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFlmKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgMTpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgMzphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXw2NDtjYXNlIDA6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIG4oe30sZCxlKTtjYXNlIDI6UWY9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiBaZihhLGIsYyxkLGUpe1FmPSExO2I9WGYoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGg9MCxrPWIuZmlyc3RVcGRhdGUsbD1mO251bGwhPT1rOyl7dmFyIG09ay5leHBpcmF0aW9uVGltZTtpZihtPmUpe2lmKG51bGw9PT1nJiYoZz1rLGY9bCksMD09PWh8fGg+bSloPW19ZWxzZSBsPVlmKGEsYixrLGwsYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWs6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0RWZmZWN0PWspKTtrPWsubmV4dH1tPW51bGw7Zm9yKGs9Yi5maXJzdENhcHR1cmVkVXBkYXRlO251bGwhPT1rOyl7dmFyIHA9ay5leHBpcmF0aW9uVGltZTtpZihwPmUpe2lmKG51bGw9PT1tJiYobT1rLG51bGw9PT1nJiYoZj1sKSksMD09PWh8fGg+cCloPXB9ZWxzZSBsPVlmKGEsYixrLGwsYyxkKSxcbm51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9azooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdENhcHR1cmVkRWZmZWN0PWspKTtrPWsubmV4dH1udWxsPT09ZyYmKGIubGFzdFVwZGF0ZT1udWxsKTtudWxsPT09bT9iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsOmEuZWZmZWN0VGFnfD0zMjtudWxsPT09ZyYmbnVsbD09PW0mJihmPWwpO2IuYmFzZVN0YXRlPWY7Yi5maXJzdFVwZGF0ZT1nO2IuZmlyc3RDYXB0dXJlZFVwZGF0ZT1tO2EuZXhwaXJhdGlvblRpbWU9aDthLm1lbW9pemVkU3RhdGU9bH1cbmZ1bmN0aW9uICRmKGEsYixjKXtudWxsIT09Yi5maXJzdENhcHR1cmVkVXBkYXRlJiYobnVsbCE9PWIubGFzdFVwZGF0ZSYmKGIubGFzdFVwZGF0ZS5uZXh0PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSxiLmxhc3RVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGUpLGIuZmlyc3RDYXB0dXJlZFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZT1udWxsKTthZyhiLmZpcnN0RWZmZWN0LGMpO2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGw7YWcoYi5maXJzdENhcHR1cmVkRWZmZWN0LGMpO2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1udWxsfWZ1bmN0aW9uIGFnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuY2FsbGJhY2s7aWYobnVsbCE9PWMpe2EuY2FsbGJhY2s9bnVsbDt2YXIgZD1iO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP3IoXCIxOTFcIixjKTp2b2lkIDA7Yy5jYWxsKGQpfWE9YS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIGJnKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6QmMoYil9fXZhciBjZz17Y3VycmVudDpudWxsfSxkZz1udWxsLGVnPW51bGwsZmc9bnVsbDtmdW5jdGlvbiBnZyhhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtKKGNnLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBoZyhhKXt2YXIgYj1jZy5jdXJyZW50O0koY2csYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBpZyhhKXtkZz1hO2ZnPWVnPW51bGw7YS5maXJzdENvbnRleHREZXBlbmRlbmN5PW51bGx9XG5mdW5jdGlvbiBqZyhhLGIpe2lmKGZnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilmZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtudWxsPT09ZWc/KG51bGw9PT1kZz9yKFwiMjkzXCIpOnZvaWQgMCxkZy5maXJzdENvbnRleHREZXBlbmRlbmN5PWVnPWIpOmVnPWVnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciBrZz17fSxPPXtjdXJyZW50OmtnfSxsZz17Y3VycmVudDprZ30sbWc9e2N1cnJlbnQ6a2d9O2Z1bmN0aW9uIG5nKGEpe2E9PT1rZz9yKFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIG9nKGEsYil7SihtZyxiLGEpO0oobGcsYSxhKTtKKE8sa2csYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6VWUobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPVVlKGIsYyl9SShPLGEpO0ooTyxiLGEpfWZ1bmN0aW9uIHBnKGEpe0koTyxhKTtJKGxnLGEpO0kobWcsYSl9ZnVuY3Rpb24gcWcoYSl7bmcobWcuY3VycmVudCk7dmFyIGI9bmcoTy5jdXJyZW50KTt2YXIgYz1VZShiLGEudHlwZSk7YiE9PWMmJihKKGxnLGEsYSksSihPLGMsYSkpfWZ1bmN0aW9uIHJnKGEpe2xnLmN1cnJlbnQ9PT1hJiYoSShPLGEpLEkobGcsYSkpfXZhciBzZz1rYy5SZWFjdEN1cnJlbnRPd25lcix0Zz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIHVnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7ZD1hLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGQuYmFzZVN0YXRlPWMpfVxudmFyIHlnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09R2QoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9dmcoKTtkPXdnKGQsYSk7dmFyIGU9VGYoZCk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO1ZmKGEsZSk7eGcoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9dmcoKTtkPXdnKGQsYSk7dmFyIGU9VGYoZCk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7VmYoYSxlKTt4ZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz12ZygpO2M9d2coYyxhKTt2YXIgZD1UZihjKTtkLnRhZz0yO3ZvaWQgMCE9PVxuYiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO1ZmKGEsZCk7eGcoYSxjKX19O2Z1bmN0aW9uIHpnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUZkKGMsZCl8fCFGZChlLGYpOiEwfVxuZnVuY3Rpb24gQWcoYSxiLGMpe3ZhciBkPSExLGU9cWY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9c2cuY3VycmVudERpc3BhdGNoZXIucmVhZENvbnRleHQoZik6KGU9TShiKT9yZjpLLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9zZihhLGUpOnFmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9eWc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gQmcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnlnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gQ2coYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz10Zzt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXNnLmN1cnJlbnREaXNwYXRjaGVyLnJlYWRDb250ZXh0KGYpOihmPU0oYik/cmY6Sy5jdXJyZW50LGUuY29udGV4dD1zZihhLGYpKTtmPWEudXBkYXRlUXVldWU7bnVsbCE9PWYmJihaZihhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYodWcoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmeWcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZj1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1mJiYoWmYoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSkpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBEZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO3ZhciBkPXZvaWQgMDtjJiYoMSE9PWMudGFnP3IoXCIyODlcIik6dm9pZCAwLGQ9Yy5zdGF0ZU5vZGUpO2Q/dm9pZCAwOnIoXCIxNDdcIixhKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PXRnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP3IoXCIyODRcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDpyKFwiMjkwXCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBGZyhhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmcihcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gR2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT1HZihhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPUtmKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1FZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9SGYoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9RWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1MZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1JZihjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9S2YoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgbWM6cmV0dXJuIGM9SGYoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9RWcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIG5jOnJldHVybiBiPUxmKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihEZyhiKXx8XG56YyhiKSlyZXR1cm4gYj1JZihiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtGZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHYoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgbWM6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1vYz9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgbmM6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoRGcoYyl8fHpjKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtGZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEIoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBtYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09b2M/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgbmM6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoRGcoZCl8fHpjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtGZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHcoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHE9Zyx1PWc9MCxBPW51bGw7bnVsbCE9PXEmJnU8aC5sZW5ndGg7dSsrKXtxLmluZGV4PnU/KEE9cSxxPW51bGwpOkE9cS5zaWJsaW5nO3ZhciB0PXYoZSxxLGhbdV0sayk7aWYobnVsbD09PXQpe251bGw9PT1xJiYocT1BKTticmVha31hJiZcbnEmJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLHEpO2c9Zih0LGcsdSk7bnVsbD09PW0/bD10Om0uc2libGluZz10O209dDtxPUF9aWYodT09PWgubGVuZ3RoKXJldHVybiBjKGUscSksbDtpZihudWxsPT09cSl7Zm9yKDt1PGgubGVuZ3RoO3UrKylpZihxPXAoZSxoW3VdLGspKWc9ZihxLGcsdSksbnVsbD09PW0/bD1xOm0uc2libGluZz1xLG09cTtyZXR1cm4gbH1mb3IocT1kKGUscSk7dTxoLmxlbmd0aDt1KyspaWYoQT1CKHEsZSx1LGhbdV0saykpYSYmbnVsbCE9PUEuYWx0ZXJuYXRlJiZxLmRlbGV0ZShudWxsPT09QS5rZXk/dTpBLmtleSksZz1mKEEsZyx1KSxudWxsPT09bT9sPUE6bS5zaWJsaW5nPUEsbT1BO2EmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gQyhlLGcsaCxrKXt2YXIgbD16YyhoKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgbD9yKFwiMTUwXCIpOnZvaWQgMDtoPWwuY2FsbChoKTtudWxsPT1oP3IoXCIxNTFcIik6dm9pZCAwO1xuZm9yKHZhciBtPWw9bnVsbCxxPWcsdT1nPTAsQT1udWxsLHQ9aC5uZXh0KCk7bnVsbCE9PXEmJiF0LmRvbmU7dSsrLHQ9aC5uZXh0KCkpe3EuaW5kZXg+dT8oQT1xLHE9bnVsbCk6QT1xLnNpYmxpbmc7dmFyIHc9dihlLHEsdC52YWx1ZSxrKTtpZihudWxsPT09dyl7cXx8KHE9QSk7YnJlYWt9YSYmcSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUscSk7Zz1mKHcsZyx1KTtudWxsPT09bT9sPXc6bS5zaWJsaW5nPXc7bT13O3E9QX1pZih0LmRvbmUpcmV0dXJuIGMoZSxxKSxsO2lmKG51bGw9PT1xKXtmb3IoOyF0LmRvbmU7dSsrLHQ9aC5uZXh0KCkpdD1wKGUsdC52YWx1ZSxrKSxudWxsIT09dCYmKGc9Zih0LGcsdSksbnVsbD09PW0/bD10Om0uc2libGluZz10LG09dCk7cmV0dXJuIGx9Zm9yKHE9ZChlLHEpOyF0LmRvbmU7dSsrLHQ9aC5uZXh0KCkpdD1CKHEsZSx1LHQudmFsdWUsayksbnVsbCE9PXQmJihhJiZudWxsIT09dC5hbHRlcm5hdGUmJnEuZGVsZXRlKG51bGw9PT10LmtleT91OlxudC5rZXkpLGc9Zih0LGcsdSksbnVsbD09PW0/bD10Om0uc2libGluZz10LG09dCk7YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09b2MmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgbWM6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKWlmKDc9PT1rLnRhZz9mLnR5cGU9PT1vYzprLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnR5cGU9PT1vYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsaCk7ZC5yZWY9RWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1cbmsuc2libGluZ31mLnR5cGU9PT1vYz8oZD1JZihmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9SGYoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9RWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIG5jOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9TGYoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XG5cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixoKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPUtmKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKERnKGYpKXJldHVybiB3KGEsZCxmLGgpO2lmKHpjKGYpKXJldHVybiBDKGEsZCxmLGgpO2wmJkZnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6aD1hLnR5cGUscihcIjE1MlwiLGguZGlzcGxheU5hbWV8fGgubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIEhnPUdnKCEwKSxJZz1HZyghMSksSmc9bnVsbCxLZz1udWxsLExnPSExO1xuZnVuY3Rpb24gTWcoYSxiKXt2YXIgYz1OKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gTmcoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBPZyhhKXtpZihMZyl7dmFyIGI9S2c7aWYoYil7dmFyIGM9YjtpZighTmcoYSxiKSl7Yj1tZihjKTtpZighYnx8IU5nKGEsYikpe2EuZWZmZWN0VGFnfD0yO0xnPSExO0pnPWE7cmV0dXJufU1nKEpnLGMpfUpnPWE7S2c9bmYoYil9ZWxzZSBhLmVmZmVjdFRhZ3w9MixMZz0hMSxKZz1hfX1mdW5jdGlvbiBQZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWc7KWE9YS5yZXR1cm47Smc9YX1mdW5jdGlvbiBRZyhhKXtpZihhIT09SmcpcmV0dXJuITE7aWYoIUxnKXJldHVybiBQZyhhKSxMZz0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIWpmKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1LZztiOylNZyhhLGIpLGI9bWYoYik7UGcoYSk7S2c9Smc/bWYoYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gUmcoKXtLZz1KZz1udWxsO0xnPSExfVxuZnVuY3Rpb24gU2coYSl7dmFyIGI9YS5fcmVzdWx0O3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYjtjYXNlIDI6dGhyb3cgYjtjYXNlIDA6dGhyb3cgYjtkZWZhdWx0OnRocm93IGEuX3N0YXR1cz0wLGI9YS5fY3RvcixiPWIoKSxiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pLGEuX3Jlc3VsdD1iLGI7fX12YXIgVGc9a2MuUmVhY3RDdXJyZW50T3duZXI7ZnVuY3Rpb24gUChhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0lnKGIsbnVsbCxjLGQpOkhnKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gVWcoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO2lmKCFMLmN1cnJlbnQmJmIubWVtb2l6ZWRQcm9wcz09PWQmJmY9PT0obnVsbCE9PWE/YS5yZWY6bnVsbCkpcmV0dXJuIFZnKGEsYixlKTtkPWMoZCxmKTtQKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gV2coYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFFZihnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLFhnKGEsYixnLGQsZSxmKTthPUhmKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZigwPT09ZXx8ZT5mKWlmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpGZCxjKGUsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuIFZnKGEsYixmKTthPUdmKGcsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBYZyhhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiYoMD09PWV8fGU+ZikmJkZkKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZj9WZyhhLGIsZik6WWcoYSxiLGMsZCxmKX1mdW5jdGlvbiBaZyhhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIFlnKGEsYixjLGQsZSl7dmFyIGY9TShjKT9yZjpLLmN1cnJlbnQ7Zj1zZihiLGYpO2lnKGIsZSk7Yz1jKGQsZik7Yi5lZmZlY3RUYWd8PTE7UChhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRnKGEsYixjLGQsZSl7aWYoTShjKSl7dmFyIGY9ITA7eGYoYil9ZWxzZSBmPSExO2lnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxBZyhiLGMsZCxlKSxDZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZy5jdXJyZW50RGlzcGF0Y2hlci5yZWFkQ29udGV4dChsKToobD1NKGMpP3JmOksuY3VycmVudCxsPXNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZCZyhiLGcsZCxsKTtRZj0hMTt2YXIgdj1iLm1lbW9pemVkU3RhdGU7az1nLnN0YXRlPXY7dmFyIEI9Yi51cGRhdGVRdWV1ZTtudWxsIT09QiYmKFpmKGIsQixkLGcsZSksaz1iLm1lbW9pemVkU3RhdGUpO2ghPT1kfHx2IT09a3x8TC5jdXJyZW50fHxRZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJih1ZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9UWZ8fHpnKGIsYyxoLGQsdixrLGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9aCxrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnLmN1cnJlbnREaXNwYXRjaGVyLnJlYWRDb250ZXh0KGwpOihsPU0oYyk/cmY6Sy5jdXJyZW50LGw9c2YoYixsKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywocD1cImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmQmcoYixnLGQsbCksUWY9ITEsaz1iLm1lbW9pemVkU3RhdGUsdj1nLnN0YXRlPWssQj1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1CJiYoWmYoYixCLGQsZyxlKSx2PWIubWVtb2l6ZWRTdGF0ZSksaCE9PWR8fGshPT12fHxMLmN1cnJlbnR8fFFmPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKHVnKGIsYyxtLGQpLHY9Yi5tZW1vaXplZFN0YXRlKSwobT1RZnx8emcoYixjLGgsZCxrLHYsbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsdixsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHYsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPVxudiksZy5wcm9wcz1kLGcuc3RhdGU9dixnLmNvbnRleHQ9bCxkPW0pOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gYWgoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gYWgoYSxiLGMsZCxlLGYpe1pnKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZ5ZihiLGMsITEpLFZnKGEsYixmKTtkPWIuc3RhdGVOb2RlO1RnLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPUhnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9SGcoYixudWxsLGgsZikpOlAoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmeWYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBiaChhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P3ZmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJnZmKGEsYi5jb250ZXh0LCExKTtvZyhhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBjaChhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGRoKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZiYmKGYuYWxyZWFkeUNhcHR1cmVkP251bGwhPT1hJiZmPT09YS5tZW1vaXplZFN0YXRlP2Y9e2FscmVhZHlDYXB0dXJlZDohMCxkaWRUaW1lb3V0OiEwLHRpbWVkT3V0QXQ6Zi50aW1lZE91dEF0fTooZi5hbHJlYWR5Q2FwdHVyZWQ9ITAsZi5kaWRUaW1lb3V0PSEwKTpmPW51bGwpO3ZhciBnPW51bGwhPT1mJiZmLmRpZFRpbWVvdXQ7aWYobnVsbD09PWEpZz8oZz1lLmZhbGxiYWNrLGU9SWYobnVsbCxkLDAsbnVsbCksZD1JZihnLGQsYyxudWxsKSxlLnNpYmxpbmc9ZCxjPWUsYy5yZXR1cm49ZC5yZXR1cm49Yik6Yz1kPUlnKGIsbnVsbCxlLmNoaWxkcmVuLGMpO2Vsc2V7dmFyIGg9YS5tZW1vaXplZFN0YXRlO251bGwhPT1oJiZoLmRpZFRpbWVvdXQ/KGQ9YS5jaGlsZCxhPWQuc2libGluZyxnPyhjPWUuZmFsbGJhY2ssZD1HZihkLGQucGVuZGluZ1Byb3BzLFxuMCksZC5lZmZlY3RUYWd8PTIsZT1kLnNpYmxpbmc9R2YoYSxjLGEuZXhwaXJhdGlvblRpbWUpLGUuZWZmZWN0VGFnfD0yLGM9ZCxkLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxkPWUsYy5yZXR1cm49ZC5yZXR1cm49Yik6KGc9YS5jaGlsZCxkPUhnKGIsZC5jaGlsZCxlLmNoaWxkcmVuLGMpLEhnKGIsZyxudWxsLGMpLGM9ZCkpOihhPWEuY2hpbGQsZz8oZz1lLmZhbGxiYWNrLGU9SWYobnVsbCxkLDAsbnVsbCksZS5lZmZlY3RUYWd8PTIsZS5jaGlsZD1hLGEucmV0dXJuPWUsZD1lLnNpYmxpbmc9SWYoZyxkLGMsbnVsbCksZC5lZmZlY3RUYWd8PTIsYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmQ9Yz1IZyhiLGEsZS5jaGlsZHJlbixjKSl9Yi5tZW1vaXplZFN0YXRlPWY7Yi5jaGlsZD1jO3JldHVybiBkfVxuZnVuY3Rpb24gVmcoYSxiLGMpe251bGwhPT1hJiYoYi5maXJzdENvbnRleHREZXBlbmRlbmN5PWEuZmlyc3RDb250ZXh0RGVwZW5kZW5jeSk7dmFyIGQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDA9PT1kfHxkPmMpcmV0dXJuIG51bGw7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP3IoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1HZihhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1HZihhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBlaChhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSYmYS5tZW1vaXplZFByb3BzPT09Yi5wZW5kaW5nUHJvcHMmJiFMLmN1cnJlbnQmJigwPT09ZHx8ZD5jKSl7c3dpdGNoKGIudGFnKXtjYXNlIDM6YmgoYik7UmcoKTticmVhaztjYXNlIDU6cWcoYik7YnJlYWs7Y2FzZSAxOk0oYi50eXBlKSYmeGYoYik7YnJlYWs7Y2FzZSA0Om9nKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpnZyhiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSk7YnJlYWs7Y2FzZSAxMzppZihkPWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09ZCYmZC5kaWRUaW1lb3V0KXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwIT09ZCYmZDw9YylyZXR1cm4gZGgoYSxiLGMpO2I9VmcoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH19cmV0dXJuIFZnKGEsYixjKX1iLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1cbmIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9c2YoYixLLmN1cnJlbnQpO2lnKGIsYyk7ZT1kKGEsZSk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2lmKE0oZCkpe3ZhciBmPSEwO3hmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZ1ZyhiLGQsZyxhKTtlLnVwZGF0ZXI9eWc7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtDZyhiLGQsYSxjKTtiPWFoKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLFxuUChudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2Y9Yi5wZW5kaW5nUHJvcHM7YT1TZyhlKTtiLnR5cGU9YTtlPWIudGFnPUZmKGEpO2Y9Y2goYSxmKTtnPXZvaWQgMDtzd2l0Y2goZSl7Y2FzZSAwOmc9WWcobnVsbCxiLGEsZixjKTticmVhaztjYXNlIDE6Zz0kZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTE6Zz1VZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTQ6Zz1XZyhudWxsLGIsYSxjaChhLnR5cGUsZiksZCxjKTticmVhaztkZWZhdWx0OnIoXCIyODNcIixhKX1yZXR1cm4gZztjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmNoKGQsZSksWWcoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09XG5kP2U6Y2goZCxlKSwkZyhhLGIsZCxlLGMpO2Nhc2UgMzpiaChiKTtkPWIudXBkYXRlUXVldWU7bnVsbD09PWQ/cihcIjI4MlwiKTp2b2lkIDA7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDtaZihiLGQsYi5wZW5kaW5nUHJvcHMsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKVJnKCksYj1WZyhhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGU9KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmUuaHlkcmF0ZSlLZz1uZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxKZz1iLGU9TGc9ITA7ZT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1JZyhiLG51bGwsZCxjKSk6KFAoYSxiLGQsYyksUmcoKSk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gcWcoYiksbnVsbD09PWEmJk9nKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4samYoZCxcbmUpP2c9bnVsbDpudWxsIT09ZiYmamYoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksWmcoYSxiKSwxMDczNzQxODIzIT09YyYmYi5tb2RlJjEmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYj1udWxsKTooUChhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmT2coYiksbnVsbDtjYXNlIDEzOnJldHVybiBkaChhLGIsYyk7Y2FzZSA0OnJldHVybiBvZyhiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1IZyhiLG51bGwsZCxjKTpQKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6Y2goZCxlKSxVZyhhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUChhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFAoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBQKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7Z2coYixmKTtpZihudWxsIT09Zyl7dmFyIGg9Zy52YWx1ZTtmPWg9PT1mJiYoMCE9PWh8fDEvaD09PTEvZil8fGghPT1oJiZmIT09Zj8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwO2lmKDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUwuY3VycmVudCl7Yj1WZyhhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZz1iLmNoaWxkLG51bGwhPT1nJiYoZy5yZXR1cm49Yik7bnVsbCE9PWc7KXtoPWcuZmlyc3RDb250ZXh0RGVwZW5kZW5jeTtpZihudWxsIT09aCl7ZG97aWYoaC5jb250ZXh0PT09ZCYmMCE9PShoLm9ic2VydmVkQml0cyZcbmYpKXtpZigxPT09Zy50YWcpe3ZhciBrPVRmKGMpO2sudGFnPTI7VmYoZyxrKX1pZigwPT09Zy5leHBpcmF0aW9uVGltZXx8Zy5leHBpcmF0aW9uVGltZT5jKWcuZXhwaXJhdGlvblRpbWU9YztrPWcuYWx0ZXJuYXRlO251bGwhPT1rJiYoMD09PWsuZXhwaXJhdGlvblRpbWV8fGsuZXhwaXJhdGlvblRpbWU+YykmJihrLmV4cGlyYXRpb25UaW1lPWMpO2Zvcih2YXIgbD1nLnJldHVybjtudWxsIT09bDspe2s9bC5hbHRlcm5hdGU7aWYoMD09PWwuY2hpbGRFeHBpcmF0aW9uVGltZXx8bC5jaGlsZEV4cGlyYXRpb25UaW1lPmMpbC5jaGlsZEV4cGlyYXRpb25UaW1lPWMsbnVsbCE9PWsmJigwPT09ay5jaGlsZEV4cGlyYXRpb25UaW1lfHxrLmNoaWxkRXhwaXJhdGlvblRpbWU+YykmJihrLmNoaWxkRXhwaXJhdGlvblRpbWU9Yyk7ZWxzZSBpZihudWxsIT09ayYmKDA9PT1rLmNoaWxkRXhwaXJhdGlvblRpbWV8fGsuY2hpbGRFeHBpcmF0aW9uVGltZT5jKSlrLmNoaWxkRXhwaXJhdGlvblRpbWU9XG5jO2Vsc2UgYnJlYWs7bD1sLnJldHVybn19az1nLmNoaWxkO2g9aC5uZXh0fXdoaWxlKG51bGwhPT1oKX1lbHNlIGs9MTA9PT1nLnRhZz9nLnR5cGU9PT1iLnR5cGU/bnVsbDpnLmNoaWxkOmcuY2hpbGQ7aWYobnVsbCE9PWspay5yZXR1cm49ZztlbHNlIGZvcihrPWc7bnVsbCE9PWs7KXtpZihrPT09Yil7az1udWxsO2JyZWFrfWc9ay5zaWJsaW5nO2lmKG51bGwhPT1nKXtnLnJldHVybj1rLnJldHVybjtrPWc7YnJlYWt9az1rLnJldHVybn1nPWt9fVAoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4saWcoYixjKSxlPWpnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxQKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1jaChlLnR5cGUsYi5wZW5kaW5nUHJvcHMpLFdnKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBYZyhhLFxuYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpjaChkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLE0oZCk/KGE9ITAseGYoYikpOmE9ITEsaWcoYixjKSxBZyhiLGQsZSxjKSxDZyhiLGQsZSxjKSxhaChudWxsLGIsZCwhMCxhLGMpO2RlZmF1bHQ6cihcIjE1NlwiKX19ZnVuY3Rpb24gemgoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIEFoPXZvaWQgMCxCaD12b2lkIDAsQ2g9dm9pZCAwLERoPXZvaWQgMDtcbkFoPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtCaD1mdW5jdGlvbigpe307XG5DaD1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7bmcoTy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9UWMoZyxmKTtkPVFjKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1NZShnLGYpO2Q9TWUoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1PZShnLGYpO2Q9T2UoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1lZil9YmYoYyxkKTtnPWM9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGMgaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShjKSYmZi5oYXNPd25Qcm9wZXJ0eShjKSYmbnVsbCE9ZltjXSlpZihcInN0eWxlXCI9PT1cbmMpe3ZhciBrPWZbY107Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiYoaHx8KGg9e30pLGhbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWMmJlwiY2hpbGRyZW5cIiE9PWMmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmXCJhdXRvRm9jdXNcIiE9PWMmJih1YS5oYXNPd25Qcm9wZXJ0eShjKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goYyxudWxsKSk7Zm9yKGMgaW4gZCl7dmFyIGw9ZFtjXTtrPW51bGwhPWY/ZltjXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShjKSYmbCE9PWsmJihudWxsIT1sfHxudWxsIT1rKSlpZihcInN0eWxlXCI9PT1jKWlmKGspe2ZvcihnIGluIGspIWsuaGFzT3duUHJvcGVydHkoZyl8fGwmJmwuaGFzT3duUHJvcGVydHkoZyl8fChofHwoaD17fSksaFtnXT1cIlwiKTtmb3IoZyBpbiBsKWwuaGFzT3duUHJvcGVydHkoZykmJmtbZ10hPT1sW2ddJiYoaHx8XG4oaD17fSksaFtnXT1sW2ddKX1lbHNlIGh8fChhfHwoYT1bXSksYS5wdXNoKGMsaCkpLGg9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Yz8obD1sP2wuX19odG1sOnZvaWQgMCxrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmshPT1sJiYoYT1hfHxbXSkucHVzaChjLFwiXCIrbCkpOlwiY2hpbGRyZW5cIj09PWM/az09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChjLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWMmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1jJiYodWEuaGFzT3duUHJvcGVydHkoYyk/KG51bGwhPWwmJmRmKGUsYyksYXx8az09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goYyxsKSl9aCYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGgpO2U9YTsoYi51cGRhdGVRdWV1ZT1lKSYmemgoYil9fTtEaD1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmemgoYil9O1xuZnVuY3Rpb24gRWgoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1CYyhjKSk7bnVsbCE9PWMmJkFjKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJkFjKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIEZoKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0doKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEhoKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBBZiYmQWYoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDE6RmgoYSk7dmFyIGI9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtHaChhLGMpfWJyZWFrO2Nhc2UgNTpGaChhKTticmVhaztjYXNlIDQ6SWgoYSl9fWZ1bmN0aW9uIEpoKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gS2goYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoSmgoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXIoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgMzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDpyKFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYoWGUoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fEpoKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpaWYoYylpZihkKXt2YXIgZj1iLGc9ZS5zdGF0ZU5vZGUsaD1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxoKTpmLmluc2VydEJlZm9yZShnLGgpfWVsc2UgYi5pbnNlcnRCZWZvcmUoZS5zdGF0ZU5vZGUsYyk7ZWxzZSBkPyhnPWIsaD1lLnN0YXRlTm9kZSw4PT09Zy5ub2RlVHlwZT8oZj1nLnBhcmVudE5vZGUsZi5pbnNlcnRCZWZvcmUoaCxnKSk6KGY9ZyxmLmFwcGVuZENoaWxkKGgpKSxnPWcuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09ZyYmdm9pZCAwIT09Z3x8bnVsbCE9PWYub25jbGlja3x8KGYub25jbGljaz1lZikpOmIuYXBwZW5kQ2hpbGQoZS5zdGF0ZU5vZGUpO1xuZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIEloKGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9Yi5yZXR1cm47YTpmb3IoOzspe251bGw9PT1jP3IoXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Yy5yZXR1cm59Yz0hMH1pZig1PT09Yi50YWd8fDY9PT1iLnRhZyl7YTpmb3IodmFyIGY9YixnPWY7OylpZihIaChnKSxudWxsIT09Zy5jaGlsZCYmNCE9PWcudGFnKWcuY2hpbGQucmV0dXJuPWcsZz1nLmNoaWxkO2Vsc2V7aWYoZz09PWYpYnJlYWs7Zm9yKDtudWxsPT09Zy5zaWJsaW5nOyl7aWYobnVsbD09PWcucmV0dXJufHxnLnJldHVybj09PWYpYnJlYWsgYTtnPWcucmV0dXJufWcuc2libGluZy5yZXR1cm49Zy5yZXR1cm47Zz1nLnNpYmxpbmd9ZT9cbihmPWQsZz1iLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZyk6Zi5yZW1vdmVDaGlsZChnKSk6ZC5yZW1vdmVDaGlsZChiLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yi50YWc/KGQ9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxlPSEwKTpIaChiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuO2I9Yi5yZXR1cm47ND09PWIudGFnJiYoYz0hMSl9Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319XG5mdW5jdGlvbiBMaChhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAxOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tNYV09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmU2MoYyxkKTtjZihhLGUpO2I9Y2YoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nPyRlKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9XZShjLGgpOlwiY2hpbGRyZW5cIj09PWc/WGUoYyxoKTpPYyhjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6VGMoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpRZShjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxcbmMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/TmUoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP05lKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpOZShjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/cihcIjE2MlwiKTp2b2lkIDA7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDpyKFwiMTYzXCIpfX1mdW5jdGlvbiBNaChhLGIsYyl7Yz1UZihjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtOaChkKTtFaChhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIE9oKGEsYixjKXtjPVRmKGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVBoP1BoPW5ldyBTZXQoW3RoaXNdKTpQaC5hZGQodGhpcykpO3ZhciBjPWIudmFsdWUsZT1iLnN0YWNrO0VoKGEsYik7dGhpcy5jb21wb25lbnREaWRDYXRjaChjLHtjb21wb25lbnRTdGFjazpudWxsIT09ZT9lOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gUWgoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TShhLnR5cGUpJiZ0ZihhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBwZyhhKSx1ZihhKSxiPWEuZWZmZWN0VGFnLDAhPT0oYiY2NCk/cihcIjI4NVwiKTp2b2lkIDAsYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhO2Nhc2UgNTpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDEzOmI9YS5lZmZlY3RUYWc7aWYoYiYxMDI0KXthLmVmZmVjdFRhZz1iJi0xMDI1fDY0O2I9YS5hbHRlcm5hdGU7Yj1udWxsIT09Yj9iLm1lbW9pemVkU3RhdGU6bnVsbDt2YXIgYz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWM/Yz17YWxyZWFkeUNhcHR1cmVkOiEwLGRpZFRpbWVvdXQ6ITEsdGltZWRPdXRBdDowfTpiPT09Yz9jPXthbHJlYWR5Q2FwdHVyZWQ6ITAsZGlkVGltZW91dDpjLmRpZFRpbWVvdXQsdGltZWRPdXRBdDpjLnRpbWVkT3V0QXR9OmMuYWxyZWFkeUNhcHR1cmVkPVxuITA7YS5tZW1vaXplZFN0YXRlPWM7cmV0dXJuIGF9cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBwZyhhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIGhnKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIFJoPXtyZWFkQ29udGV4dDpqZ30sU2g9a2MuUmVhY3RDdXJyZW50T3duZXIsVGg9MCxVaD0wLFZoPSExLFE9bnVsbCxSPW51bGwsUz0wLFdoPS0xLFhoPSExLFQ9bnVsbCxZaD0hMSxQaD1udWxsO2Z1bmN0aW9uIFpoKCl7aWYobnVsbCE9PVEpZm9yKHZhciBhPVEucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMTp2YXIgYz1iLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJnRmKGIpO2JyZWFrO2Nhc2UgMzpwZyhiKTt1ZihiKTticmVhaztjYXNlIDU6cmcoYik7YnJlYWs7Y2FzZSA0OnBnKGIpO2JyZWFrO2Nhc2UgMTA6aGcoYil9YT1hLnJldHVybn1SPW51bGw7Uz0wO1doPS0xO1hoPSExO1E9bnVsbH1cbmZ1bmN0aW9uICRoKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnJldHVybixkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjUxMikpe3ZhciBlPWI7Yj1hO3ZhciBmPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOk0oYi50eXBlKSYmdGYoYik7YnJlYWs7Y2FzZSAzOnBnKGIpO3VmKGIpO2Y9Yi5zdGF0ZU5vZGU7Zi5wZW5kaW5nQ29udGV4dCYmKGYuY29udGV4dD1mLnBlbmRpbmdDb250ZXh0LGYucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWV8fG51bGw9PT1lLmNoaWxkKVFnKGIpLGIuZWZmZWN0VGFnJj0tMztCaChiKTticmVhaztjYXNlIDU6cmcoYik7dmFyIGc9bmcobWcuY3VycmVudCksaD1iLnR5cGU7aWYobnVsbCE9PWUmJm51bGwhPWIuc3RhdGVOb2RlKUNoKGUsYixoLGYsZyksZS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO1xuZWxzZSBpZihmKXt2YXIgaz1uZyhPLmN1cnJlbnQpO2lmKFFnKGIpKXtmPWI7ZT1mLnN0YXRlTm9kZTt2YXIgbD1mLnR5cGUsbT1mLm1lbW9pemVkUHJvcHMscD1nO2VbTGFdPWY7ZVtNYV09bTtoPXZvaWQgMDtnPWw7c3dpdGNoKGcpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6SChcImxvYWRcIixlKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IobD0wO2w8bGIubGVuZ3RoO2wrKylIKGxiW2xdLGUpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpIKFwiZXJyb3JcIixlKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpIKFwiZXJyb3JcIixlKTtIKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6SChcInJlc2V0XCIsZSk7SChcInN1Ym1pdFwiLGUpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6SChcInRvZ2dsZVwiLGUpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlJjKGUsbSk7SChcImludmFsaWRcIixlKTtkZihwLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmUuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O0goXCJpbnZhbGlkXCIsZSk7ZGYocCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlBlKGUsbSksSChcImludmFsaWRcIixlKSxkZihwLFwib25DaGFuZ2VcIil9YmYoZyxtKTtsPW51bGw7Zm9yKGggaW4gbSltLmhhc093blByb3BlcnR5KGgpJiYoaz1tW2hdLFwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiBrP2UudGV4dENvbnRlbnQhPT1rJiYobD1bXCJjaGlsZHJlblwiLGtdKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJmUudGV4dENvbnRlbnQhPT1cIlwiK2smJihsPVtcImNoaWxkcmVuXCIsXCJcIitrXSk6dWEuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWsmJmRmKHAsaCkpO3N3aXRjaChnKXtjYXNlIFwiaW5wdXRcIjppYyhlKTtiZChlLG0sITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmljKGUpO1JlKGUsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLm9uQ2xpY2smJlxuKGUub25jbGljaz1lZil9aD1sO2YudXBkYXRlUXVldWU9aDtmPW51bGwhPT1oPyEwOiExO2YmJnpoKGIpfWVsc2V7bT1iO2U9aDtwPWY7bD05PT09Zy5ub2RlVHlwZT9nOmcub3duZXJEb2N1bWVudDtrPT09U2UuaHRtbCYmKGs9VGUoZSkpO2s9PT1TZS5odG1sP1wic2NyaXB0XCI9PT1lPyhlPWwuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGw9ZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIHAuaXM/bD1sLmNyZWF0ZUVsZW1lbnQoZSx7aXM6cC5pc30pOihsPWwuY3JlYXRlRWxlbWVudChlKSxcInNlbGVjdFwiPT09ZSYmcC5tdWx0aXBsZSYmKGwubXVsdGlwbGU9ITApKTpsPWwuY3JlYXRlRWxlbWVudE5TKGssZSk7ZT1sO2VbTGFdPW07ZVtNYV09ZjtBaChlLGIsITEsITEpO3A9ZTtsPWg7bT1mO3ZhciB2PWcsQj1jZihsLG0pO3N3aXRjaChsKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkgoXCJsb2FkXCIsXG5wKTtnPW07YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGc9MDtnPGxiLmxlbmd0aDtnKyspSChsYltnXSxwKTtnPW07YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkgoXCJlcnJvclwiLHApO2c9bTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpIKFwiZXJyb3JcIixwKTtIKFwibG9hZFwiLHApO2c9bTticmVhaztjYXNlIFwiZm9ybVwiOkgoXCJyZXNldFwiLHApO0goXCJzdWJtaXRcIixwKTtnPW07YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpIKFwidG9nZ2xlXCIscCk7Zz1tO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlJjKHAsbSk7Zz1RYyhwLG0pO0goXCJpbnZhbGlkXCIscCk7ZGYodixcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpnPU1lKHAsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnAuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtnPW4oe30sbSx7dmFsdWU6dm9pZCAwfSk7SChcImludmFsaWRcIixwKTtkZih2LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6UGUocCxcbm0pO2c9T2UocCxtKTtIKFwiaW52YWxpZFwiLHApO2RmKHYsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omc9bX1iZihsLGcpO2s9dm9pZCAwO3ZhciB3PWwsQz1wLHU9Zztmb3IoayBpbiB1KWlmKHUuaGFzT3duUHJvcGVydHkoaykpe3ZhciBxPXVba107XCJzdHlsZVwiPT09az8kZShDLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWs/KHE9cT9xLl9faHRtbDp2b2lkIDAsbnVsbCE9cSYmV2UoQyxxKSk6XCJjaGlsZHJlblwiPT09az9cInN0cmluZ1wiPT09dHlwZW9mIHE/KFwidGV4dGFyZWFcIiE9PXd8fFwiXCIhPT1xKSYmWGUoQyxxKTpcIm51bWJlclwiPT09dHlwZW9mIHEmJlhlKEMsXCJcIitxKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ayYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWsmJlwiYXV0b0ZvY3VzXCIhPT1rJiYodWEuaGFzT3duUHJvcGVydHkoayk/bnVsbCE9cSYmZGYodixrKTpudWxsIT1xJiZPYyhDLGsscSxCKSl9c3dpdGNoKGwpe2Nhc2UgXCJpbnB1dFwiOmljKHApO1xuYmQocCxtLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYyhwKTtSZShwLG0pO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1tLnZhbHVlJiZwLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitQYyhtLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmc9cDtnLm11bHRpcGxlPSEhbS5tdWx0aXBsZTtwPW0udmFsdWU7bnVsbCE9cD9OZShnLCEhbS5tdWx0aXBsZSxwLCExKTpudWxsIT1tLmRlZmF1bHRWYWx1ZSYmTmUoZywhIW0ubXVsdGlwbGUsbS5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGcub25DbGljayYmKHAub25jbGljaz1lZil9KGY9aGYoaCxmKSkmJnpoKGIpO2Iuc3RhdGVOb2RlPWV9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBudWxsPT09Yi5zdGF0ZU5vZGU/cihcIjE2NlwiKTp2b2lkIDA7YnJlYWs7Y2FzZSA2OmUmJm51bGwhPWIuc3RhdGVOb2RlP0RoKGUsYixlLm1lbW9pemVkUHJvcHMsZik6KFwic3RyaW5nXCIhPT1cbnR5cGVvZiBmJiYobnVsbD09PWIuc3RhdGVOb2RlP3IoXCIxNjZcIik6dm9pZCAwKSxlPW5nKG1nLmN1cnJlbnQpLG5nKE8uY3VycmVudCksUWcoYik/KGY9YixoPWYuc3RhdGVOb2RlLGU9Zi5tZW1vaXplZFByb3BzLGhbTGFdPWYsKGY9aC5ub2RlVmFsdWUhPT1lKSYmemgoYikpOihoPWIsZj0oOT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGYpLGZbTGFdPWIsaC5zdGF0ZU5vZGU9ZikpO2JyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpmPWIubWVtb2l6ZWRTdGF0ZTtoPW51bGwhPT1lP2UubWVtb2l6ZWRTdGF0ZTpudWxsOyhudWxsIT09ZiYmZi5kaWRUaW1lb3V0KSE9PShudWxsIT09aCYmaC5kaWRUaW1lb3V0KSYmKGIuZWZmZWN0VGFnfD00KTticmVhaztjYXNlIDc6YnJlYWs7Y2FzZSA4OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSA0OnBnKGIpO0JoKGIpO2JyZWFrO2Nhc2UgMTA6aGcoYik7YnJlYWs7Y2FzZSA5OmJyZWFrO2Nhc2UgMTQ6YnJlYWs7XG5jYXNlIDE3Ok0oYi50eXBlKSYmdGYoYik7YnJlYWs7ZGVmYXVsdDpyKFwiMTU2XCIpfVE9bnVsbDtiPWE7aWYoMTA3Mzc0MTgyMz09PVN8fDEwNzM3NDE4MjMhPT1iLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Y9MDtmb3IoaD1iLmNoaWxkO251bGwhPT1oOyl7ZT1oLmV4cGlyYXRpb25UaW1lO2c9aC5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDA9PT1mfHwwIT09ZSYmZTxmKWY9ZTtpZigwPT09Znx8MCE9PWcmJmc8ZilmPWc7aD1oLnNpYmxpbmd9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWZ9bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P1xuYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YTpjLmZpcnN0RWZmZWN0PWEsYy5sYXN0RWZmZWN0PWEpKX1lbHNle2E9UWgoYSxTKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTUxMSxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9bnVsbCxjLmVmZmVjdFRhZ3w9NTEyKX1pZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha31yZXR1cm4gbnVsbH1mdW5jdGlvbiBhaShhKXt2YXIgYj1laChhLmFsdGVybmF0ZSxhLFMpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9JGgoYSkpO1NoLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIGJpKGEsYixjKXtWaD9yKFwiMjQzXCIpOnZvaWQgMDtWaD0hMDtTaC5jdXJyZW50RGlzcGF0Y2hlcj1SaDt2YXIgZD1hLm5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uO2lmKGQhPT1TfHxhIT09Unx8bnVsbD09PVEpWmgoKSxSPWEsUz1kLFE9R2YoUi5jdXJyZW50LG51bGwsUyksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT0hMTtkb3t0cnl7aWYoYilmb3IoO251bGwhPT1RJiYhY2koKTspUT1haShRKTtlbHNlIGZvcig7bnVsbCE9PVE7KVE9YWkoUSl9Y2F0Y2goQyl7aWYobnVsbD09PVEpZT0hMCxOaChDKTtlbHNle251bGw9PT1RP3IoXCIyNzFcIik6dm9pZCAwO3ZhciBmPVEsZz1mLnJldHVybjtpZihudWxsPT09ZyllPSEwLE5oKEMpO2Vsc2V7YTp7dmFyIGg9YSxrPWcsbD1mLG09QztnPVM7bC5lZmZlY3RUYWd8PTUxMjtsLmZpcnN0RWZmZWN0PWwubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1tJiZcIm9iamVjdFwiPT09dHlwZW9mIG0mJlwiZnVuY3Rpb25cIj09PVxudHlwZW9mIG0udGhlbil7dmFyIHA9bTttPWs7dmFyIHY9LTEsQj0tMTtkb3tpZigxMz09PW0udGFnKXt2YXIgdz1tLmFsdGVybmF0ZTtpZihudWxsIT09dyYmKHc9dy5tZW1vaXplZFN0YXRlLG51bGwhPT13JiZ3LmRpZFRpbWVvdXQpKXtCPTEwKih3LnRpbWVkT3V0QXQtMik7YnJlYWt9dz1tLnBlbmRpbmdQcm9wcy5tYXhEdXJhdGlvbjtpZihcIm51bWJlclwiPT09dHlwZW9mIHcpaWYoMD49dyl2PTA7ZWxzZSBpZigtMT09PXZ8fHc8dil2PXd9bT1tLnJldHVybn13aGlsZShudWxsIT09bSk7bT1rO2Rve2lmKHc9MTM9PT1tLnRhZyl2b2lkIDA9PT1tLm1lbW9pemVkUHJvcHMuZmFsbGJhY2s/dz0hMToodz1tLm1lbW9pemVkU3RhdGUsdz1udWxsPT09d3x8IXcuZGlkVGltZW91dCk7aWYodyl7az1kaS5iaW5kKG51bGwsaCxtLGwsMD09PShtLm1vZGUmMSk/MTpnKTtwLnRoZW4oayxrKTtpZigwPT09KG0ubW9kZSYxKSl7bS5lZmZlY3RUYWd8PTMyO1AobC5hbHRlcm5hdGUsbCxudWxsLGcpO1xubC5lZmZlY3RUYWcmPS01MTM7MT09PWwudGFnJiYobC5lZmZlY3RUYWcmPS00MjEsbnVsbD09PWwuYWx0ZXJuYXRlJiYobC50YWc9MTcpKTticmVhayBhfS0xPT09dj9oPTEwNzM3NDE4MjM6KC0xPT09QiYmKEI9MTAqKFBmKGgsZyktMiktNUUzKSxoPUIrdik7MDw9aCYmV2g8aCYmKFdoPWgpO20uZWZmZWN0VGFnfD0xMDI0O20uZXhwaXJhdGlvblRpbWU9ZzticmVhayBhfW09bS5yZXR1cm59d2hpbGUobnVsbCE9PW0pO209RXJyb3IoXCJBbiB1cGRhdGUgd2FzIHN1c3BlbmRlZCwgYnV0IG5vIHBsYWNlaG9sZGVyIFVJIHdhcyBwcm92aWRlZC5cIil9WGg9ITA7bT1iZyhtLGwpO2g9aztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpsPW07aC5lZmZlY3RUYWd8PTEwMjQ7aC5leHBpcmF0aW9uVGltZT1nO2c9TWgoaCxsLGcpO1dmKGgsZyk7YnJlYWsgYTtjYXNlIDE6aWYobD1tLGs9aC50eXBlLHA9aC5zdGF0ZU5vZGUsMD09PShoLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFxubnVsbCE9PXAmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVBofHwhUGguaGFzKHApKSkpe2guZWZmZWN0VGFnfD0xMDI0O2guZXhwaXJhdGlvblRpbWU9ZztnPU9oKGgsbCxnKTtXZihoLGcpO2JyZWFrIGF9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpfVE9JGgoZik7Y29udGludWV9fX1icmVha313aGlsZSgxKTtWaD0hMTtmZz1lZz1kZz1TaC5jdXJyZW50RGlzcGF0Y2hlcj1udWxsO2lmKGUpUj1udWxsLGEuZmluaXNoZWRXb3JrPW51bGw7ZWxzZSBpZihudWxsIT09USlhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2V7Yj1hLmN1cnJlbnQuYWx0ZXJuYXRlO251bGw9PT1iP3IoXCIyODFcIik6dm9pZCAwO1I9bnVsbDtpZihYaCl7ZT1hLmxhdGVzdFBlbmRpbmdUaW1lO2Y9YS5sYXRlc3RTdXNwZW5kZWRUaW1lO2c9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDAhPT1lJiZlPmR8fDAhPT1mJiZmPmR8fDAhPT1nJiZnPmQpe09mKGEsZCk7ZWkoYSxiLFxuZCxhLmV4cGlyYXRpb25UaW1lLC0xKTtyZXR1cm59aWYoIWEuZGlkRXJyb3ImJiFjKXthLmRpZEVycm9yPSEwO2Q9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1kO2M9YS5leHBpcmF0aW9uVGltZT0xO2VpKGEsYixkLGMsLTEpO3JldHVybn19Y3x8LTE9PT1XaD8oYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9ZCxhLmZpbmlzaGVkV29yaz1iKTooT2YoYSxkKSxjPTEwKihQZihhLGQpLTIpLGM8V2gmJihXaD1jKSxjPTEwKih2ZygpLTIpLGM9V2gtYyxlaShhLGIsZCxhLmV4cGlyYXRpb25UaW1lLDA+Yz8wOmMpKX19XG5mdW5jdGlvbiBHaChhLGIpe3ZhciBjO2E6e1ZoJiYhWWg/cihcIjI2M1wiKTp2b2lkIDA7Zm9yKGM9YS5yZXR1cm47bnVsbCE9PWM7KXtzd2l0Y2goYy50YWcpe2Nhc2UgMTp2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09UGh8fCFQaC5oYXMoZCkpKXthPWJnKGIsYSk7YT1PaChjLGEsMSk7VmYoYyxhKTt4ZyhjLDEpO2M9dm9pZCAwO2JyZWFrIGF9YnJlYWs7Y2FzZSAzOmE9YmcoYixhKTthPU1oKGMsYSwxKTtWZihjLGEpO3hnKGMsMSk7Yz12b2lkIDA7YnJlYWsgYX1jPWMucmV0dXJufTM9PT1hLnRhZyYmKGM9YmcoYixhKSxjPU1oKGEsYywxKSxWZihhLGMpLHhnKGEsMSkpO2M9dm9pZCAwfXJldHVybiBjfVxuZnVuY3Rpb24gd2coYSxiKXswIT09VWg/YT1VaDpWaD9hPVloPzE6UzpiLm1vZGUmMT8oYT1maT8yKzEwKigoKGEtMisxNSkvMTB8MCkrMSk6MisyNSooKChhLTIrNTAwKS8yNXwwKSsxKSxudWxsIT09UiYmYT09PVMmJihhKz0xKSk6YT0xO2ZpJiZhPmdpJiYoZ2k9YSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBkaShhLGIsYyxkKXt2YXIgZT1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTt2YXIgZj1hLmxhdGVzdFN1c3BlbmRlZFRpbWU7aWYoMCE9PWUmJmQ+PWUmJmQ8PWYpe2Y9ZT1kO2EuZGlkRXJyb3I9ITE7dmFyIGc9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDA9PT1nfHxnPGYpYS5sYXRlc3RQaW5nZWRUaW1lPWY7TmYoZixhKX1lbHNlIGU9dmcoKSxlPXdnKGUsYiksTWYoYSxlKTswIT09KGIubW9kZSYxKSYmYT09PVImJlM9PT1kJiYoUj1udWxsKTtoaShiLGUpOzA9PT0oYi5tb2RlJjEpJiYoaGkoYyxlKSwxPT09Yy50YWcmJm51bGwhPT1jLnN0YXRlTm9kZSYmKGI9VGYoZSksYi50YWc9MixWZihjLGIpKSk7Yz1hLmV4cGlyYXRpb25UaW1lOzAhPT1jJiZpaShhLGMpfVxuZnVuY3Rpb24gaGkoYSxiKXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iKWEuZXhwaXJhdGlvblRpbWU9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKDA9PT1jLmV4cGlyYXRpb25UaW1lfHxjLmV4cGlyYXRpb25UaW1lPmIpJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7aWYoMD09PWQuY2hpbGRFeHBpcmF0aW9uVGltZXx8ZC5jaGlsZEV4cGlyYXRpb25UaW1lPmIpZC5jaGlsZEV4cGlyYXRpb25UaW1lPWI7bnVsbCE9PWMmJigwPT09Yy5jaGlsZEV4cGlyYXRpb25UaW1lfHxjLmNoaWxkRXhwaXJhdGlvblRpbWU+YikmJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1yZXR1cm4gbnVsbD09PVxuZT9udWxsOmV9ZnVuY3Rpb24geGcoYSxiKXthPWhpKGEsYik7bnVsbCE9PWEmJighVmgmJjAhPT1TJiZiPFMmJlpoKCksTWYoYSxiKSxWaCYmIVloJiZSPT09YXx8aWkoYSxhLmV4cGlyYXRpb25UaW1lKSxqaT5raSYmKGppPTAscihcIjE4NVwiKSkpfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSl7dmFyIGY9VWg7VWg9MTt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtVaD1mfX12YXIgVT1udWxsLFY9bnVsbCxtaT0wLG5pPXZvaWQgMCxXPSExLFg9bnVsbCxZPTAsZ2k9MCxvaT0hMSxwaT0hMSxxaT1udWxsLHJpPW51bGwsWj0hMSxzaT0hMSxmaT0hMSx0aT1udWxsLHVpPWRhLnVuc3RhYmxlX25vdygpLHZpPSh1aS8xMHwwKSsyLHdpPXZpLGtpPTUwLGppPTAseGk9bnVsbCx5aT0xO2Z1bmN0aW9uIHppKCl7dmk9KChkYS51bnN0YWJsZV9ub3coKS11aSkvMTB8MCkrMn1cbmZ1bmN0aW9uIEFpKGEsYil7aWYoMCE9PW1pKXtpZihiPm1pKXJldHVybjtudWxsIT09bmkmJmRhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrKG5pKX1taT1iO2E9ZGEudW5zdGFibGVfbm93KCktdWk7bmk9ZGEudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhCaSx7dGltZW91dDoxMCooYi0yKS1hfSl9ZnVuY3Rpb24gZWkoYSxiLGMsZCxlKXthLmV4cGlyYXRpb25UaW1lPWQ7MCE9PWV8fGNpKCk/MDxlJiYoYS50aW1lb3V0SGFuZGxlPWtmKENpLmJpbmQobnVsbCxhLGIsYyksZSkpOihhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuZmluaXNoZWRXb3JrPWIpfWZ1bmN0aW9uIENpKGEsYixjKXthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jO2EuZmluaXNoZWRXb3JrPWI7emkoKTt3aT12aTtEaShhLGMpfWZ1bmN0aW9uIHZnKCl7aWYoVylyZXR1cm4gd2k7RWkoKTtpZigwPT09WXx8MTA3Mzc0MTgyMz09PVkpemkoKSx3aT12aTtyZXR1cm4gd2l9XG5mdW5jdGlvbiBpaShhLGIpe2lmKG51bGw9PT1hLm5leHRTY2hlZHVsZWRSb290KWEuZXhwaXJhdGlvblRpbWU9YixudWxsPT09Vj8oVT1WPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooVj1WLm5leHRTY2hlZHVsZWRSb290PWEsVi5uZXh0U2NoZWR1bGVkUm9vdD1VKTtlbHNle3ZhciBjPWEuZXhwaXJhdGlvblRpbWU7aWYoMD09PWN8fGI8YylhLmV4cGlyYXRpb25UaW1lPWJ9V3x8KFo/c2kmJihYPWEsWT0xLEZpKGEsMSwhMCkpOjE9PT1iP0dpKDEsbnVsbCk6QWkoYSxiKSl9XG5mdW5jdGlvbiBFaSgpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1WKWZvcih2YXIgYz1WLGQ9VTtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Vj9yKFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7VT1WPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1VKVU9ZT1kLm5leHRTY2hlZHVsZWRSb290LFYubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09Vil7Vj1jO1YubmV4dFNjaGVkdWxlZFJvb3Q9VTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PWQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2lmKDA9PT1hfHxlPGEpYT1lLGI9ZDtpZihkPT09VilicmVhaztpZigxPT09YSlicmVhaztcbmM9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fVg9YjtZPWF9ZnVuY3Rpb24gQmkoYSl7aWYoYS5kaWRUaW1lb3V0JiZudWxsIT09VSl7emkoKTt2YXIgYj1VO2Rve3ZhciBjPWIuZXhwaXJhdGlvblRpbWU7MCE9PWMmJnZpPj1jJiYoYi5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj12aSk7Yj1iLm5leHRTY2hlZHVsZWRSb290fXdoaWxlKGIhPT1VKX1HaSgwLGEpfVxuZnVuY3Rpb24gR2koYSxiKXtyaT1iO0VpKCk7aWYobnVsbCE9PXJpKWZvcih6aSgpLHdpPXZpO251bGwhPT1YJiYwIT09WSYmKDA9PT1hfHxhPj1ZKSYmKCFvaXx8dmk+PVkpOylGaShYLFksdmk+PVkpLEVpKCksemkoKSx3aT12aTtlbHNlIGZvcig7bnVsbCE9PVgmJjAhPT1ZJiYoMD09PWF8fGE+PVkpOylGaShYLFksITApLEVpKCk7bnVsbCE9PXJpJiYobWk9MCxuaT1udWxsKTswIT09WSYmQWkoWCxZKTtyaT1udWxsO29pPSExO2ppPTA7eGk9bnVsbDtpZihudWxsIT09dGkpZm9yKGE9dGksdGk9bnVsbCxiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaChkKXtwaXx8KHBpPSEwLHFpPWQpfX1pZihwaSl0aHJvdyBhPXFpLHFpPW51bGwscGk9ITEsYTt9ZnVuY3Rpb24gRGkoYSxiKXtXP3IoXCIyNTNcIik6dm9pZCAwO1g9YTtZPWI7RmkoYSxiLCEwKTtHaSgxLG51bGwpfVxuZnVuY3Rpb24gRmkoYSxiLGMpe1c/cihcIjI0NVwiKTp2b2lkIDA7Vz0hMDtpZihudWxsPT09cml8fGMpe3ZhciBkPWEuZmluaXNoZWRXb3JrO251bGwhPT1kP0hpKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWEudGltZW91dEhhbmRsZSwtMSE9PWQmJihhLnRpbWVvdXRIYW5kbGU9LTEsbGYoZCkpLGJpKGEsITEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmSGkoYSxkLGIpKX1lbHNlIGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQ/SGkoYSxkLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGQ9YS50aW1lb3V0SGFuZGxlLC0xIT09ZCYmKGEudGltZW91dEhhbmRsZT0tMSxsZihkKSksYmkoYSwhMCxjKSxkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kJiYoY2koKT9hLmZpbmlzaGVkV29yaz1kOkhpKGEsZCxiKSkpO1c9ITF9XG5mdW5jdGlvbiBIaShhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT10aT90aT1bZF06dGkucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5leHBpcmF0aW9uVGltZT0wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO2E9PT14aT9qaSsrOih4aT1hLGppPTApO1loPVZoPSEwO2EuY3VycmVudD09PWI/cihcIjE3N1wiKTp2b2lkIDA7dmFyIGU9YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWU/cihcIjI2MVwiKTp2b2lkIDA7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZj1iLmV4cGlyYXRpb25UaW1lLGc9Yi5jaGlsZEV4cGlyYXRpb25UaW1lLGg9MD09PWZ8fDAhPT1nJiZnPGY/ZzpmO2EuZGlkRXJyb3I9ITE7aWYoMD09PWgpYS5lYXJsaWVzdFBlbmRpbmdUaW1lPTAsYS5sYXRlc3RQZW5kaW5nVGltZT0wLGEuZWFybGllc3RTdXNwZW5kZWRUaW1lPTAsYS5sYXRlc3RTdXNwZW5kZWRUaW1lPVxuMCxhLmxhdGVzdFBpbmdlZFRpbWU9MDtlbHNle3ZhciBrPWEubGF0ZXN0UGVuZGluZ1RpbWU7MCE9PWsmJihrPGg/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWEubGF0ZXN0UGVuZGluZ1RpbWU9MDphLmVhcmxpZXN0UGVuZGluZ1RpbWU8aCYmKGEuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lKSk7dmFyIGw9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7MD09PWw/TWYoYSxoKTpoPmEubGF0ZXN0U3VzcGVuZGVkVGltZT8oYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9MCxNZihhLGgpKTpoPGwmJk1mKGEsaCl9TmYoMCxhKTtTaC5jdXJyZW50PW51bGw7aWYoMTxiLmVmZmVjdFRhZylpZihudWxsIT09Yi5sYXN0RWZmZWN0KXtiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iO3ZhciBtPWIuZmlyc3RFZmZlY3R9ZWxzZSBtPWI7ZWxzZSBtPWIuZmlyc3RFZmZlY3Q7ZmY9Y2U7dmFyIHA9cGUoKTtpZihxZShwKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW5cbnApdmFyIHY9e3N0YXJ0OnAuc2VsZWN0aW9uU3RhcnQsZW5kOnAuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBCPXAub3duZXJEb2N1bWVudCx3PUImJkIuZGVmYXVsdFZpZXd8fHdpbmRvdyxDPXcuZ2V0U2VsZWN0aW9uJiZ3LmdldFNlbGVjdGlvbigpO2lmKEMmJjAhPT1DLnJhbmdlQ291bnQpe3ZhciB1PUMuYW5jaG9yTm9kZSxxPUMuYW5jaG9yT2Zmc2V0LEE9Qy5mb2N1c05vZGUsZmU9Qy5mb2N1c09mZnNldDt0cnl7dS5ub2RlVHlwZSxBLm5vZGVUeXBlfWNhdGNoKGRiKXt2PW51bGw7YnJlYWsgYX12YXIgSWI9MCxKYz0tMSxLYz0tMSxOaT0wLE9pPTAsdD1wLEpiPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgTGM7Oyl7dCE9PXV8fDAhPT1xJiYzIT09dC5ub2RlVHlwZXx8KEpjPUliK3EpO3QhPT1BfHwwIT09ZmUmJjMhPT10Lm5vZGVUeXBlfHwoS2M9SWIrZmUpOzM9PT10Lm5vZGVUeXBlJiYoSWIrPXQubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PShMYz10LmZpcnN0Q2hpbGQpKWJyZWFrO1xuSmI9dDt0PUxjfWZvcig7Oyl7aWYodD09PXApYnJlYWsgYjtKYj09PXUmJisrTmk9PT1xJiYoSmM9SWIpO0piPT09QSYmKytPaT09PWZlJiYoS2M9SWIpO2lmKG51bGwhPT0oTGM9dC5uZXh0U2libGluZykpYnJlYWs7dD1KYjtKYj10LnBhcmVudE5vZGV9dD1MY312PS0xPT09SmN8fC0xPT09S2M/bnVsbDp7c3RhcnQ6SmMsZW5kOktjfX1lbHNlIHY9bnVsbH12YXIgZmg9dnx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgZmg9bnVsbDtnZj17Zm9jdXNlZEVsZW06cCxzZWxlY3Rpb25SYW5nZTpmaH07Y2U9ITE7Zm9yKFQ9bTtudWxsIT09VDspe3ZhciBnaD0hMSxoaD12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVQ7KXtpZihULmVmZmVjdFRhZyYyNTYpe3ZhciB2ZT1ULmFsdGVybmF0ZTthOnt2YXIgUWI9VDtzd2l0Y2goUWIudGFnKXtjYXNlIDE6aWYoUWIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PXZlKXt2YXIgWmk9dmUubWVtb2l6ZWRQcm9wcywkaT12ZS5tZW1vaXplZFN0YXRlLFZjPVFiLnN0YXRlTm9kZTtcblZjLnByb3BzPVFiLm1lbW9pemVkUHJvcHM7VmMuc3RhdGU9UWIubWVtb2l6ZWRTdGF0ZTt2YXIgYWo9VmMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoWmksJGkpO1ZjLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWFqfWJyZWFrIGE7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWsgYTtkZWZhdWx0OnIoXCIxNjNcIil9fX1UPVQubmV4dEVmZmVjdH19Y2F0Y2goZGIpe2doPSEwLGhoPWRifWdoJiYobnVsbD09PVQ/cihcIjE3OFwiKTp2b2lkIDAsR2goVCxoaCksbnVsbCE9PVQmJihUPVQubmV4dEVmZmVjdCkpfWZvcihUPW07bnVsbCE9PVQ7KXt2YXIgaWg9ITEsamg9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1UOyl7dmFyIHdlPVQuZWZmZWN0VGFnO3dlJjE2JiZYZShULnN0YXRlTm9kZSxcIlwiKTtpZih3ZSYxMjgpe3ZhciBraD1ULmFsdGVybmF0ZTtpZihudWxsIT09a2gpe3ZhciBXYz1raC5yZWY7bnVsbCE9PVdjJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFdjP1xuV2MobnVsbCk6V2MuY3VycmVudD1udWxsKX19c3dpdGNoKHdlJjE0KXtjYXNlIDI6S2goVCk7VC5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpLaChUKTtULmVmZmVjdFRhZyY9LTM7TGgoVC5hbHRlcm5hdGUsVCk7YnJlYWs7Y2FzZSA0OkxoKFQuYWx0ZXJuYXRlLFQpO2JyZWFrO2Nhc2UgODp2YXIgbGg9VDtJaChsaCk7dmFyIFJiPWxoO1JiLnJldHVybj1udWxsO1JiLmNoaWxkPW51bGw7UmIuYWx0ZXJuYXRlJiYoUmIuYWx0ZXJuYXRlLmNoaWxkPW51bGwsUmIuYWx0ZXJuYXRlLnJldHVybj1udWxsKX1UPVQubmV4dEVmZmVjdH19Y2F0Y2goZGIpe2loPSEwLGpoPWRifWloJiYobnVsbD09PVQ/cihcIjE3OFwiKTp2b2lkIDAsR2goVCxqaCksbnVsbCE9PVQmJihUPVQubmV4dEVmZmVjdCkpfXZhciBtaD1nZixiaj1wZSgpLEU9bWguZm9jdXNlZEVsZW0sZWI9bWguc2VsZWN0aW9uUmFuZ2U7aWYoYmohPT1FJiZFJiZFLm93bmVyRG9jdW1lbnQmJm9lKEUub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG5FKSl7aWYobnVsbCE9PWViJiZxZShFKSl7dmFyIG5oPWViLnN0YXJ0LHhlPWViLmVuZDt2b2lkIDA9PT14ZSYmKHhlPW5oKTtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBFKUUuc2VsZWN0aW9uU3RhcnQ9bmgsRS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oeGUsRS52YWx1ZS5sZW5ndGgpO2Vsc2V7dmFyIHllPUUub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQsYmE9KHllJiZ5ZS5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxvaD1FLnRleHRDb250ZW50Lmxlbmd0aCxmYj1NYXRoLm1pbihlYi5zdGFydCxvaCksU2I9dm9pZCAwPT09ZWIuZW5kP2ZiOk1hdGgubWluKGViLmVuZCxvaCk7aWYoIWJhLmV4dGVuZCYmZmI+U2Ipe3ZhciBjaj1TYjtTYj1mYjtmYj1jan12YXIgVGI9bmUoRSxmYiksSmE9bmUoRSxTYik7aWYoVGImJkphJiYoMSE9PWJhLnJhbmdlQ291bnR8fGJhLmFuY2hvck5vZGUhPT1UYi5ub2RlfHxiYS5hbmNob3JPZmZzZXQhPT1UYi5vZmZzZXR8fGJhLmZvY3VzTm9kZSE9PVxuSmEubm9kZXx8YmEuZm9jdXNPZmZzZXQhPT1KYS5vZmZzZXQpKXt2YXIgWGM9eWUuY3JlYXRlUmFuZ2UoKTtYYy5zZXRTdGFydChUYi5ub2RlLFRiLm9mZnNldCk7YmEucmVtb3ZlQWxsUmFuZ2VzKCk7ZmI+U2I/KGJhLmFkZFJhbmdlKFhjKSxiYS5leHRlbmQoSmEubm9kZSxKYS5vZmZzZXQpKTooWGMuc2V0RW5kKEphLm5vZGUsSmEub2Zmc2V0KSxiYS5hZGRSYW5nZShYYykpfX19Zm9yKHZhciB6ZT1bXSxnYj1FO2diPWdiLnBhcmVudE5vZGU7KTE9PT1nYi5ub2RlVHlwZSYmemUucHVzaCh7ZWxlbWVudDpnYixsZWZ0OmdiLnNjcm9sbExlZnQsdG9wOmdiLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBFLmZvY3VzJiZFLmZvY3VzKCk7Zm9yKHZhciBBZT0wO0FlPHplLmxlbmd0aDtBZSsrKXt2YXIgWWM9emVbQWVdO1ljLmVsZW1lbnQuc2Nyb2xsTGVmdD1ZYy5sZWZ0O1ljLmVsZW1lbnQuc2Nyb2xsVG9wPVljLnRvcH19Z2Y9bnVsbDtjZT0hIWZmO2ZmPW51bGw7YS5jdXJyZW50PVxuYjtmb3IoVD1tO251bGwhPT1UOyl7dmFyIHBoPSExLHFoPXZvaWQgMDt0cnl7Zm9yKHZhciBkaj1lO251bGwhPT1UOyl7dmFyIHJoPVQuZWZmZWN0VGFnO2lmKHJoJjM2KXt2YXIgWmM9dm9pZCAwLGhiPVQuYWx0ZXJuYXRlLHg9VCxzaD1kajtzd2l0Y2goeC50YWcpe2Nhc2UgMTp2YXIgY2E9eC5zdGF0ZU5vZGU7aWYoeC5lZmZlY3RUYWcmNClpZihudWxsPT09aGIpY2EucHJvcHM9eC5tZW1vaXplZFByb3BzLGNhLnN0YXRlPXgubWVtb2l6ZWRTdGF0ZSxjYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGVqPWhiLm1lbW9pemVkUHJvcHMsZmo9aGIubWVtb2l6ZWRTdGF0ZTtjYS5wcm9wcz14Lm1lbW9pemVkUHJvcHM7Y2Euc3RhdGU9eC5tZW1vaXplZFN0YXRlO2NhLmNvbXBvbmVudERpZFVwZGF0ZShlaixmaixjYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIHRoPXgudXBkYXRlUXVldWU7bnVsbCE9PXRoJiYoY2EucHJvcHM9eC5tZW1vaXplZFByb3BzLFxuY2Euc3RhdGU9eC5tZW1vaXplZFN0YXRlLCRmKHgsdGgsY2Esc2gpKTticmVhaztjYXNlIDM6dmFyIHVoPXgudXBkYXRlUXVldWU7aWYobnVsbCE9PXVoKXt2YXIgQmU9bnVsbDtpZihudWxsIT09eC5jaGlsZClzd2l0Y2goeC5jaGlsZC50YWcpe2Nhc2UgNTpCZT14LmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6QmU9eC5jaGlsZC5zdGF0ZU5vZGV9JGYoeCx1aCxCZSxzaCl9YnJlYWs7Y2FzZSA1OnZhciBnaj14LnN0YXRlTm9kZTtudWxsPT09aGImJnguZWZmZWN0VGFnJjQmJmhmKHgudHlwZSx4Lm1lbW9pemVkUHJvcHMpJiZnai5mb2N1cygpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKHguZWZmZWN0VGFnJjMyKXt4Lm1lbW9pemVkU3RhdGU9e2FscmVhZHlDYXB0dXJlZDohMCxkaWRUaW1lb3V0OiExLHRpbWVkT3V0QXQ6MH07eGcoeCwxKTticmVha312YXIgdmg9bnVsbCE9PWhiP2hiLm1lbW9pemVkU3RhdGU6bnVsbCxcblViPXgubWVtb2l6ZWRTdGF0ZSxoaj1udWxsIT09dmg/dmguZGlkVGltZW91dDohMSxDZT14O2lmKG51bGw9PT1VYilaYz0hMTtlbHNlIGlmKFpjPVViLmRpZFRpbWVvdXQpQ2U9eC5jaGlsZCxVYi5hbHJlYWR5Q2FwdHVyZWQ9ITEsMD09PVViLnRpbWVkT3V0QXQmJihVYi50aW1lZE91dEF0PXZnKCkpO2lmKFpjIT09aGomJm51bGwhPT1DZSlhOmZvcih2YXIgRGU9Q2Usd2g9WmMsej1EZTs7KXtpZig1PT09ei50YWcpe3ZhciBpaj16LnN0YXRlTm9kZTtpZih3aClpai5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7dmFyIGpqPXouc3RhdGVOb2RlLCRjPXoubWVtb2l6ZWRQcm9wcy5zdHlsZSxraj12b2lkIDAhPT0kYyYmbnVsbCE9PSRjJiYkYy5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/JGMuZGlzcGxheTpudWxsO2pqLnN0eWxlLmRpc3BsYXk9a2p9fWVsc2UgaWYoNj09PXoudGFnKXouc3RhdGVOb2RlLm5vZGVWYWx1ZT13aD9cIlwiOnoubWVtb2l6ZWRQcm9wcztlbHNlIGlmKG51bGwhPT1cbnouY2hpbGQpe3ouY2hpbGQucmV0dXJuPXo7ej16LmNoaWxkO2NvbnRpbnVlfWlmKHo9PT1EZSlicmVhayBhO2Zvcig7bnVsbD09PXouc2libGluZzspe2lmKG51bGw9PT16LnJldHVybnx8ei5yZXR1cm49PT1EZSlicmVhayBhO3o9ei5yZXR1cm59ei5zaWJsaW5nLnJldHVybj16LnJldHVybjt6PXouc2libGluZ31icmVhaztjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6cihcIjE2M1wiKX19aWYocmgmMTI4KXt2YXIgYWQ9VC5yZWY7aWYobnVsbCE9PWFkKXt2YXIgeGg9VC5zdGF0ZU5vZGU7c3dpdGNoKFQudGFnKXtjYXNlIDU6dmFyIEVlPXhoO2JyZWFrO2RlZmF1bHQ6RWU9eGh9XCJmdW5jdGlvblwiPT09dHlwZW9mIGFkP2FkKEVlKTphZC5jdXJyZW50PUVlfX12YXIgbGo9VC5uZXh0RWZmZWN0O1QubmV4dEVmZmVjdD1udWxsO1Q9bGp9fWNhdGNoKGRiKXtwaD0hMCxxaD1kYn1waCYmKG51bGw9PT1UP3IoXCIxNzhcIik6dm9pZCAwLEdoKFQscWgpLG51bGwhPT1UJiYoVD1ULm5leHRFZmZlY3QpKX1WaD1cblloPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZiYmemYoYi5zdGF0ZU5vZGUpO3ZhciBGZT1iLmV4cGlyYXRpb25UaW1lLEdlPWIuY2hpbGRFeHBpcmF0aW9uVGltZSx5aD0wPT09RmV8fDAhPT1HZSYmR2U8RmU/R2U6RmU7MD09PXloJiYoUGg9bnVsbCk7YS5leHBpcmF0aW9uVGltZT15aDthLmZpbmlzaGVkV29yaz1udWxsfWZ1bmN0aW9uIGNpKCl7cmV0dXJuIG9pPyEwOm51bGw9PT1yaXx8cmkudGltZVJlbWFpbmluZygpPnlpPyExOm9pPSEwfWZ1bmN0aW9uIE5oKGEpe251bGw9PT1YP3IoXCIyNDZcIik6dm9pZCAwO1guZXhwaXJhdGlvblRpbWU9MDtwaXx8KHBpPSEwLHFpPWEpfWZ1bmN0aW9uIElpKGEsYil7dmFyIGM9WjtaPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhaPWMpfHxXfHxHaSgxLG51bGwpfX1mdW5jdGlvbiBKaShhLGIpe2lmKFomJiFzaSl7c2k9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7c2k9ITF9fXJldHVybiBhKGIpfVxuZnVuY3Rpb24gS2koYSxiLGMpe2lmKGZpKXJldHVybiBhKGIsYyk7Wnx8V3x8MD09PWdpfHwoR2koZ2ksbnVsbCksZ2k9MCk7dmFyIGQ9ZmksZT1aO1o9Zmk9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXtmaT1kLChaPWUpfHxXfHxHaSgxLG51bGwpfX1cbmZ1bmN0aW9uIExpKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7Mj09PUdkKGMpJiYxPT09Yy50YWc/dm9pZCAwOnIoXCIxNzBcIik7dmFyIGc9Yztkb3tzd2l0Y2goZy50YWcpe2Nhc2UgMzpnPWcuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTShnLnR5cGUpKXtnPWcuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWc9Zy5yZXR1cm59d2hpbGUobnVsbCE9PWcpO3IoXCIxNzFcIik7Zz12b2lkIDB9aWYoMT09PWMudGFnKXt2YXIgaD1jLnR5cGU7aWYoTShoKSl7Yz13ZihjLGgsZyk7YnJlYWsgYX19Yz1nfWVsc2UgYz1xZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWU7ZT1UZihkKTtlLnBheWxvYWQ9e2VsZW1lbnQ6YX07Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7XG5WZihmLGUpO3hnKGYsZCk7cmV0dXJuIGR9ZnVuY3Rpb24gTWkoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9dmcoKTtlPXdnKGYsZSk7cmV0dXJuIExpKGEsYixjLGUsZCl9ZnVuY3Rpb24gUGkoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOm5jLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuTmI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpUYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9UWEoZCk7ZT92b2lkIDA6cihcIjkwXCIpO2pjKGQpO1RjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpRZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmTmUoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtcbmZ1bmN0aW9uIFJpKGEpe3ZhciBiPTIrMjUqKCgodmcoKS0yKzUwMCkvMjV8MCkrMSk7Yjw9VGgmJihiPVRoKzEpO3RoaXMuX2V4cGlyYXRpb25UaW1lPVRoPWI7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1SaS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDpyKFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgU2k7TGkoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuUmkucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuUmkucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOnIoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/cihcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtEaShhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtSaS5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gU2koKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1TaS5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuU2kucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/cihcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07XG5mdW5jdGlvbiBUaShhLGIsYyl7Yj1OKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAsZGlkRXJyb3I6ITEscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsdGltZW91dEhhbmRsZTotMSxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMsbmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT246MCxleHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTt0aGlzLl9pbnRlcm5hbFJvb3Q9Yi5zdGF0ZU5vZGU9YX1cblRpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgU2k7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO01pKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07VGkucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IFNpO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtNaShudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O1RpLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBTaTtjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7TWkoYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcblRpLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBSaSh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIFVpKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1ZYj1JaTtaYj1LaTskYj1mdW5jdGlvbigpe1d8fDA9PT1naXx8KEdpKGdpLG51bGwpLGdpPTApfTtcbmZ1bmN0aW9uIFZpKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgVGkoYSwhMSxiKX1cbmZ1bmN0aW9uIFdpKGEsYixjLGQsZSl7VWkoYyk/dm9pZCAwOnIoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1QaShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPVZpKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVBpKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1KaShmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4gUGkoZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIFhpKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7VWkoYik/dm9pZCAwOnIoXCIyMDBcIik7cmV0dXJuIFFpKGEsYixudWxsLGMpfVxudmFyIFlpPXtjcmVhdGVQb3J0YWw6WGksZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj9yKFwiMTg4XCIpOnIoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9SmQoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gV2kobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFdpKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/cihcIjM4XCIpOnZvaWQgMDtyZXR1cm4gV2koYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7VWkoYSk/XG52b2lkIDA6cihcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KEppKGZ1bmN0aW9uKCl7V2kobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gWGkuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOklpLHVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlczpLaSxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtXP3IoXCIxODdcIik6dm9pZCAwO3ZhciBjPVo7Wj0hMDt0cnl7cmV0dXJuIGxpKGEsYil9ZmluYWxseXtaPWMsR2koMSxudWxsKX19LHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1aO1o9ITA7dHJ5e2xpKGEpfWZpbmFsbHl7KFo9Yil8fFd8fEdpKDEsbnVsbCl9fSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRzOltPYSxcblBhLFFhLEdhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSxzYSxXYSxmdW5jdGlvbihhKXtCYShhLFZhKX0sV2IsWGIsZWUsSWFdfSx1bnN0YWJsZV9jcmVhdGVSb290OmZ1bmN0aW9uKGEsYil7VWkoYSk/dm9pZCAwOnIoXCIyNzhcIik7cmV0dXJuIG5ldyBUaShhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX19OyhmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBDZihuKHt9LGEse2ZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9SmQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6TmEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi42LjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTtcbnZhciBtaj17ZGVmYXVsdDpZaX0sbmo9bWomJllpfHxtajttb2R1bGUuZXhwb3J0cz1uai5kZWZhdWx0fHxuajtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNi4wXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGM9bnVsbCxmPTMsaD0tMSxrPS0xLGw9ITEsbT0hMSxuPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cscT17dGltZVJlbWFpbmluZzpuP2Z1bmN0aW9uKCl7aWYobnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8aylyZXR1cm4gMDt2YXIgYT1wKCktcGVyZm9ybWFuY2Uubm93KCk7cmV0dXJuIDA8YT9hOjB9OmZ1bmN0aW9uKCl7aWYobnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8aylyZXR1cm4gMDt2YXIgYT1wKCktRGF0ZS5ub3coKTtyZXR1cm4gMDxhP2E6MH0sZGlkVGltZW91dDohMX07ZnVuY3Rpb24gcigpe2lmKCFsKXt2YXIgYT1jLmV4cGlyYXRpb25UaW1lO20/dCgpOm09ITA7dSh2LGEpfX1cbmZ1bmN0aW9uIHcoKXt2YXIgYT1jLGI9Yy5uZXh0O2lmKGM9PT1iKWM9bnVsbDtlbHNle3ZhciBkPWMucHJldmlvdXM7Yz1kLm5leHQ9YjtiLnByZXZpb3VzPWR9YS5uZXh0PWEucHJldmlvdXM9bnVsbDtkPWEuY2FsbGJhY2s7Yj1hLmV4cGlyYXRpb25UaW1lO2E9YS5wcmlvcml0eUxldmVsO3ZhciBlPWYsUj1rO2Y9YTtrPWI7dHJ5e3ZhciBnPWQocSl9ZmluYWxseXtmPWUsaz1SfWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKWlmKGc9e2NhbGxiYWNrOmcscHJpb3JpdHlMZXZlbDphLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9LG51bGw9PT1jKWM9Zy5uZXh0PWcucHJldmlvdXM9ZztlbHNle2Q9bnVsbDthPWM7ZG97aWYoYS5leHBpcmF0aW9uVGltZT49Yil7ZD1hO2JyZWFrfWE9YS5uZXh0fXdoaWxlKGEhPT1jKTtudWxsPT09ZD9kPWM6ZD09PWMmJihjPWcscigpKTtiPWQucHJldmlvdXM7Yi5uZXh0PWQucHJldmlvdXM9ZztnLm5leHQ9ZDtnLnByZXZpb3VzPVxuYn19ZnVuY3Rpb24geCgpe2lmKC0xPT09aCYmbnVsbCE9PWMmJjE9PT1jLnByaW9yaXR5TGV2ZWwpe2w9ITA7cS5kaWRUaW1lb3V0PSEwO3RyeXtkbyB3KCk7d2hpbGUobnVsbCE9PWMmJjE9PT1jLnByaW9yaXR5TGV2ZWwpfWZpbmFsbHl7bD0hMSxudWxsIT09Yz9yKCk6bT0hMX19fWZ1bmN0aW9uIHYoYSl7bD0hMDtxLmRpZFRpbWVvdXQ9YTt0cnl7aWYoYSlmb3IoO251bGwhPT1jOyl7dmFyIGI9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihjLmV4cGlyYXRpb25UaW1lPD1iKXtkbyB3KCk7d2hpbGUobnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8PWIpfWVsc2UgYnJlYWt9ZWxzZSBpZihudWxsIT09Yyl7ZG8gdygpO3doaWxlKG51bGwhPT1jJiYwPHAoKS1leHBvcnRzLnVuc3RhYmxlX25vdygpKX19ZmluYWxseXtsPSExLG51bGwhPT1jP3IoKTptPSExLHgoKX19XG52YXIgeT1EYXRlLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTp2b2lkIDAsQz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWU/Y2FuY2VsQW5pbWF0aW9uRnJhbWU6dm9pZCAwLEQsRTtmdW5jdGlvbiBGKGEpe0Q9QihmdW5jdGlvbihiKXtBKEUpO2EoYil9KTtFPXooZnVuY3Rpb24oKXtDKEQpO2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LDEwMCl9aWYobil7dmFyIEc9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRy5ub3coKX19ZWxzZSBleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB5Lm5vdygpfTt2YXIgdSx0LHA7XG5pZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdyYmd2luZG93Ll9zY2hlZE1vY2spe3ZhciBIPXdpbmRvdy5fc2NoZWRNb2NrO3U9SFswXTt0PUhbMV07cD1IWzJdfWVsc2UgaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcil7dmFyIEk9bnVsbCxKPS0xLEs9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT09SSl7dmFyIGQ9STtJPW51bGw7dHJ5e0o9YixkKGEpfWZpbmFsbHl7Sj0tMX19fTt1PWZ1bmN0aW9uKGEsYil7LTEhPT1KP3NldFRpbWVvdXQodSwwLGEsYik6KEk9YSxzZXRUaW1lb3V0KEssYiwhMCxiKSxzZXRUaW1lb3V0KEssMTA3Mzc0MTgyMywhMSwxMDczNzQxODIzKSl9O3Q9ZnVuY3Rpb24oKXtJPW51bGx9O3A9ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9O2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuLTE9PT1KPzA6Sn19ZWxzZXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUmJlxuKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBCJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBDJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIikpO3ZhciBMPW51bGwsTT0hMSxOPS0xLE89ITEsUD0hMSxRPTAsUz0zMyxUPTMzO3A9ZnVuY3Rpb24oKXtyZXR1cm4gUX07dmFyIFU9XCJfX3JlYWN0SWRsZUNhbGxiYWNrJFwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLFxuZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PVUpe009ITE7YT1MO3ZhciBiPU47TD1udWxsO049LTE7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKSxlPSExO2lmKDA+PVEtZClpZigtMSE9PWImJmI8PWQpZT0hMDtlbHNle098fChPPSEwLEYoVikpO0w9YTtOPWI7cmV0dXJufWlmKG51bGwhPT1hKXtQPSEwO3RyeXthKGUpfWZpbmFsbHl7UD0hMX19fX0sITEpO3ZhciBWPWZ1bmN0aW9uKGEpe2lmKG51bGwhPT1MKXtGKFYpO3ZhciBiPWEtUStUO2I8VCYmUzxUPyg4PmImJihiPTgpLFQ9YjxTP1M6Yik6Uz1iO1E9YStUO018fChNPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShVLFwiKlwiKSl9ZWxzZSBPPSExfTt1PWZ1bmN0aW9uKGEsYil7TD1hO049YjtQfHwwPmI/d2luZG93LnBvc3RNZXNzYWdlKFUsXCIqXCIpOk98fChPPSEwLEYoVikpfTt0PWZ1bmN0aW9uKCl7TD1udWxsO009ITE7Tj0tMX19ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO1xuZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpicmVhaztkZWZhdWx0OmE9M312YXIgZD1mLGU9aDtmPWE7aD1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Zj1kLGg9ZSx4KCl9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3ZhciBkPS0xIT09aD9oOmV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQpYj1kK2IudGltZW91dDtlbHNlIHN3aXRjaChmKXtjYXNlIDE6Yj1kKy0xO2JyZWFrO2Nhc2UgMjpiPWQrMjUwO2JyZWFrO2Nhc2UgNDpiPWQrMTA3Mzc0MTgyMzticmVhaztkZWZhdWx0OmI9ZCs1RTN9YT17Y2FsbGJhY2s6YSxwcmlvcml0eUxldmVsOmYsZXhwaXJhdGlvblRpbWU6YixuZXh0Om51bGwscHJldmlvdXM6bnVsbH07aWYobnVsbD09PWMpYz1hLm5leHQ9YS5wcmV2aW91cz1hLHIoKTtlbHNle2Q9bnVsbDt2YXIgZT1jO2Rve2lmKGUuZXhwaXJhdGlvblRpbWU+Yil7ZD1lO2JyZWFrfWU9ZS5uZXh0fXdoaWxlKGUhPT1jKTtudWxsPT09ZD9kPWM6ZD09PWMmJihjPWEscigpKTtiPWQucHJldmlvdXM7Yi5uZXh0PWQucHJldmlvdXM9XG5hO2EubmV4dD1kO2EucHJldmlvdXM9Yn1yZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1hLm5leHQ7aWYobnVsbCE9PWIpe2lmKGI9PT1hKWM9bnVsbDtlbHNle2E9PT1jJiYoYz1iKTt2YXIgZD1hLnByZXZpb3VzO2QubmV4dD1iO2IucHJldmlvdXM9ZH1hLm5leHQ9YS5wcmV2aW91cz1udWxsfX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9ZjtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZD1mLGU9aDtmPWI7aD1leHBvcnRzLnVuc3RhYmxlX25vdygpO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtmPWQsaD1lLHgoKX19fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIGZ9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi42LjBcbiAqIHNjaGVkdWxlci5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby12YXIgKi9cblxuLy8gVE9ETzogVXNlIHN5bWJvbHM/XG52YXIgSW1tZWRpYXRlUHJpb3JpdHkgPSAxO1xudmFyIFVzZXJCbG9ja2luZ1ByaW9yaXR5ID0gMjtcbnZhciBOb3JtYWxQcmlvcml0eSA9IDM7XG52YXIgSWRsZVByaW9yaXR5ID0gNDtcblxuLy8gTWF4IDMxIGJpdCBpbnRlZ2VyLiBUaGUgbWF4IGludGVnZXIgc2l6ZSBpbiBWOCBmb3IgMzItYml0IHN5c3RlbXMuXG4vLyBNYXRoLnBvdygyLCAzMCkgLSAxXG4vLyAwYjExMTExMTExMTExMTExMTExMTExMTExMTExMTExMVxudmFyIG1heFNpZ25lZDMxQml0SW50ID0gMTA3Mzc0MTgyMztcblxuLy8gVGltZXMgb3V0IGltbWVkaWF0ZWx5XG52YXIgSU1NRURJQVRFX1BSSU9SSVRZX1RJTUVPVVQgPSAtMTtcbi8vIEV2ZW50dWFsbHkgdGltZXMgb3V0XG52YXIgVVNFUl9CTE9DS0lOR19QUklPUklUWSA9IDI1MDtcbnZhciBOT1JNQUxfUFJJT1JJVFlfVElNRU9VVCA9IDUwMDA7XG4vLyBOZXZlciB0aW1lcyBvdXRcbnZhciBJRExFX1BSSU9SSVRZID0gbWF4U2lnbmVkMzFCaXRJbnQ7XG5cbi8vIENhbGxiYWNrcyBhcmUgc3RvcmVkIGFzIGEgY2lyY3VsYXIsIGRvdWJseSBsaW5rZWQgbGlzdC5cbnZhciBmaXJzdENhbGxiYWNrTm9kZSA9IG51bGw7XG5cbnZhciBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IE5vcm1hbFByaW9yaXR5O1xudmFyIGN1cnJlbnRFdmVudFN0YXJ0VGltZSA9IC0xO1xudmFyIGN1cnJlbnRFeHBpcmF0aW9uVGltZSA9IC0xO1xuXG4vLyBUaGlzIGlzIHNldCB3aGVuIGEgY2FsbGJhY2sgaXMgYmVpbmcgZXhlY3V0ZWQsIHRvIHByZXZlbnQgcmUtZW50cmFuY3kuXG52YXIgaXNFeGVjdXRpbmdDYWxsYmFjayA9IGZhbHNlO1xuXG52YXIgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSBmYWxzZTtcblxudmFyIGhhc05hdGl2ZVBlcmZvcm1hbmNlTm93ID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nO1xuXG52YXIgdGltZVJlbWFpbmluZztcbmlmIChoYXNOYXRpdmVQZXJmb3JtYW5jZU5vdykge1xuICB0aW1lUmVtYWluaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChmaXJzdENhbGxiYWNrTm9kZSAhPT0gbnVsbCAmJiBmaXJzdENhbGxiYWNrTm9kZS5leHBpcmF0aW9uVGltZSA8IGN1cnJlbnRFeHBpcmF0aW9uVGltZSkge1xuICAgICAgLy8gQSBoaWdoZXIgcHJpb3JpdHkgY2FsbGJhY2sgd2FzIHNjaGVkdWxlZC4gWWllbGQgc28gd2UgY2FuIHN3aXRjaCB0b1xuICAgICAgLy8gd29ya2luZyBvbiB0aGF0LlxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIC8vIFdlIGFzc3VtZSB0aGF0IGlmIHdlIGhhdmUgYSBwZXJmb3JtYW5jZSB0aW1lciB0aGF0IHRoZSByQUYgY2FsbGJhY2tcbiAgICAvLyBnZXRzIGEgcGVyZm9ybWFuY2UgdGltZXIgdmFsdWUuIE5vdCBzdXJlIGlmIHRoaXMgaXMgYWx3YXlzIHRydWUuXG4gICAgdmFyIHJlbWFpbmluZyA9IGdldEZyYW1lRGVhZGxpbmUoKSAtIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIHJldHVybiByZW1haW5pbmcgPiAwID8gcmVtYWluaW5nIDogMDtcbiAgfTtcbn0gZWxzZSB7XG4gIHRpbWVSZW1haW5pbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gRmFsbGJhY2sgdG8gRGF0ZS5ub3coKVxuICAgIGlmIChmaXJzdENhbGxiYWNrTm9kZSAhPT0gbnVsbCAmJiBmaXJzdENhbGxiYWNrTm9kZS5leHBpcmF0aW9uVGltZSA8IGN1cnJlbnRFeHBpcmF0aW9uVGltZSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHZhciByZW1haW5pbmcgPSBnZXRGcmFtZURlYWRsaW5lKCkgLSBEYXRlLm5vdygpO1xuICAgIHJldHVybiByZW1haW5pbmcgPiAwID8gcmVtYWluaW5nIDogMDtcbiAgfTtcbn1cblxudmFyIGRlYWRsaW5lT2JqZWN0ID0ge1xuICB0aW1lUmVtYWluaW5nOiB0aW1lUmVtYWluaW5nLFxuICBkaWRUaW1lb3V0OiBmYWxzZVxufTtcblxuZnVuY3Rpb24gZW5zdXJlSG9zdENhbGxiYWNrSXNTY2hlZHVsZWQoKSB7XG4gIGlmIChpc0V4ZWN1dGluZ0NhbGxiYWNrKSB7XG4gICAgLy8gRG9uJ3Qgc2NoZWR1bGUgd29yayB5ZXQ7IHdhaXQgdW50aWwgdGhlIG5leHQgdGltZSB3ZSB5aWVsZC5cbiAgICByZXR1cm47XG4gIH1cbiAgLy8gU2NoZWR1bGUgdGhlIGhvc3QgY2FsbGJhY2sgdXNpbmcgdGhlIGVhcmxpZXN0IGV4cGlyYXRpb24gaW4gdGhlIGxpc3QuXG4gIHZhciBleHBpcmF0aW9uVGltZSA9IGZpcnN0Q2FsbGJhY2tOb2RlLmV4cGlyYXRpb25UaW1lO1xuICBpZiAoIWlzSG9zdENhbGxiYWNrU2NoZWR1bGVkKSB7XG4gICAgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIC8vIENhbmNlbCB0aGUgZXhpc3RpbmcgaG9zdCBjYWxsYmFjay5cbiAgICBjYW5jZWxIb3N0Q2FsbGJhY2soKTtcbiAgfVxuICByZXF1ZXN0SG9zdENhbGxiYWNrKGZsdXNoV29yaywgZXhwaXJhdGlvblRpbWUpO1xufVxuXG5mdW5jdGlvbiBmbHVzaEZpcnN0Q2FsbGJhY2soKSB7XG4gIHZhciBmbHVzaGVkTm9kZSA9IGZpcnN0Q2FsbGJhY2tOb2RlO1xuXG4gIC8vIFJlbW92ZSB0aGUgbm9kZSBmcm9tIHRoZSBsaXN0IGJlZm9yZSBjYWxsaW5nIHRoZSBjYWxsYmFjay4gVGhhdCB3YXkgdGhlXG4gIC8vIGxpc3QgaXMgaW4gYSBjb25zaXN0ZW50IHN0YXRlIGV2ZW4gaWYgdGhlIGNhbGxiYWNrIHRocm93cy5cbiAgdmFyIG5leHQgPSBmaXJzdENhbGxiYWNrTm9kZS5uZXh0O1xuICBpZiAoZmlyc3RDYWxsYmFja05vZGUgPT09IG5leHQpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBsYXN0IGNhbGxiYWNrIGluIHRoZSBsaXN0LlxuICAgIGZpcnN0Q2FsbGJhY2tOb2RlID0gbnVsbDtcbiAgICBuZXh0ID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGFzdENhbGxiYWNrTm9kZSA9IGZpcnN0Q2FsbGJhY2tOb2RlLnByZXZpb3VzO1xuICAgIGZpcnN0Q2FsbGJhY2tOb2RlID0gbGFzdENhbGxiYWNrTm9kZS5uZXh0ID0gbmV4dDtcbiAgICBuZXh0LnByZXZpb3VzID0gbGFzdENhbGxiYWNrTm9kZTtcbiAgfVxuXG4gIGZsdXNoZWROb2RlLm5leHQgPSBmbHVzaGVkTm9kZS5wcmV2aW91cyA9IG51bGw7XG5cbiAgLy8gTm93IGl0J3Mgc2FmZSB0byBjYWxsIHRoZSBjYWxsYmFjay5cbiAgdmFyIGNhbGxiYWNrID0gZmx1c2hlZE5vZGUuY2FsbGJhY2s7XG4gIHZhciBleHBpcmF0aW9uVGltZSA9IGZsdXNoZWROb2RlLmV4cGlyYXRpb25UaW1lO1xuICB2YXIgcHJpb3JpdHlMZXZlbCA9IGZsdXNoZWROb2RlLnByaW9yaXR5TGV2ZWw7XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgdmFyIHByZXZpb3VzRXhwaXJhdGlvblRpbWUgPSBjdXJyZW50RXhwaXJhdGlvblRpbWU7XG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJpb3JpdHlMZXZlbDtcbiAgY3VycmVudEV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gIHZhciBjb250aW51YXRpb25DYWxsYmFjaztcbiAgdHJ5IHtcbiAgICBjb250aW51YXRpb25DYWxsYmFjayA9IGNhbGxiYWNrKGRlYWRsaW5lT2JqZWN0KTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbDtcbiAgICBjdXJyZW50RXhwaXJhdGlvblRpbWUgPSBwcmV2aW91c0V4cGlyYXRpb25UaW1lO1xuICB9XG5cbiAgLy8gQSBjYWxsYmFjayBtYXkgcmV0dXJuIGEgY29udGludWF0aW9uLiBUaGUgY29udGludWF0aW9uIHNob3VsZCBiZSBzY2hlZHVsZWRcbiAgLy8gd2l0aCB0aGUgc2FtZSBwcmlvcml0eSBhbmQgZXhwaXJhdGlvbiBhcyB0aGUganVzdC1maW5pc2hlZCBjYWxsYmFjay5cbiAgaWYgKHR5cGVvZiBjb250aW51YXRpb25DYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBjb250aW51YXRpb25Ob2RlID0ge1xuICAgICAgY2FsbGJhY2s6IGNvbnRpbnVhdGlvbkNhbGxiYWNrLFxuICAgICAgcHJpb3JpdHlMZXZlbDogcHJpb3JpdHlMZXZlbCxcbiAgICAgIGV4cGlyYXRpb25UaW1lOiBleHBpcmF0aW9uVGltZSxcbiAgICAgIG5leHQ6IG51bGwsXG4gICAgICBwcmV2aW91czogbnVsbFxuICAgIH07XG5cbiAgICAvLyBJbnNlcnQgdGhlIG5ldyBjYWxsYmFjayBpbnRvIHRoZSBsaXN0LCBzb3J0ZWQgYnkgaXRzIGV4cGlyYXRpb24uIFRoaXMgaXNcbiAgICAvLyBhbG1vc3QgdGhlIHNhbWUgYXMgdGhlIGNvZGUgaW4gYHNjaGVkdWxlQ2FsbGJhY2tgLCBleGNlcHQgdGhlIGNhbGxiYWNrXG4gICAgLy8gaXMgaW5zZXJ0ZWQgaW50byB0aGUgbGlzdCAqYmVmb3JlKiBjYWxsYmFja3Mgb2YgZXF1YWwgZXhwaXJhdGlvbiBpbnN0ZWFkXG4gICAgLy8gb2YgYWZ0ZXIuXG4gICAgaWYgKGZpcnN0Q2FsbGJhY2tOb2RlID09PSBudWxsKSB7XG4gICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCBjYWxsYmFjayBpbiB0aGUgbGlzdC5cbiAgICAgIGZpcnN0Q2FsbGJhY2tOb2RlID0gY29udGludWF0aW9uTm9kZS5uZXh0ID0gY29udGludWF0aW9uTm9kZS5wcmV2aW91cyA9IGNvbnRpbnVhdGlvbk5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBuZXh0QWZ0ZXJDb250aW51YXRpb24gPSBudWxsO1xuICAgICAgdmFyIG5vZGUgPSBmaXJzdENhbGxiYWNrTm9kZTtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5vZGUuZXhwaXJhdGlvblRpbWUgPj0gZXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgICAvLyBUaGlzIGNhbGxiYWNrIGV4cGlyZXMgYXQgb3IgYWZ0ZXIgdGhlIGNvbnRpbnVhdGlvbi4gV2Ugd2lsbCBpbnNlcnRcbiAgICAgICAgICAvLyB0aGUgY29udGludWF0aW9uICpiZWZvcmUqIHRoaXMgY2FsbGJhY2suXG4gICAgICAgICAgbmV4dEFmdGVyQ29udGludWF0aW9uID0gbm9kZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgICAgfSB3aGlsZSAobm9kZSAhPT0gZmlyc3RDYWxsYmFja05vZGUpO1xuXG4gICAgICBpZiAobmV4dEFmdGVyQ29udGludWF0aW9uID09PSBudWxsKSB7XG4gICAgICAgIC8vIE5vIGVxdWFsIG9yIGxvd2VyIHByaW9yaXR5IGNhbGxiYWNrIHdhcyBmb3VuZCwgd2hpY2ggbWVhbnMgdGhlIG5ld1xuICAgICAgICAvLyBjYWxsYmFjayBpcyB0aGUgbG93ZXN0IHByaW9yaXR5IGNhbGxiYWNrIGluIHRoZSBsaXN0LlxuICAgICAgICBuZXh0QWZ0ZXJDb250aW51YXRpb24gPSBmaXJzdENhbGxiYWNrTm9kZTtcbiAgICAgIH0gZWxzZSBpZiAobmV4dEFmdGVyQ29udGludWF0aW9uID09PSBmaXJzdENhbGxiYWNrTm9kZSkge1xuICAgICAgICAvLyBUaGUgbmV3IGNhbGxiYWNrIGlzIHRoZSBoaWdoZXN0IHByaW9yaXR5IGNhbGxiYWNrIGluIHRoZSBsaXN0LlxuICAgICAgICBmaXJzdENhbGxiYWNrTm9kZSA9IGNvbnRpbnVhdGlvbk5vZGU7XG4gICAgICAgIGVuc3VyZUhvc3RDYWxsYmFja0lzU2NoZWR1bGVkKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2aW91cyA9IG5leHRBZnRlckNvbnRpbnVhdGlvbi5wcmV2aW91cztcbiAgICAgIHByZXZpb3VzLm5leHQgPSBuZXh0QWZ0ZXJDb250aW51YXRpb24ucHJldmlvdXMgPSBjb250aW51YXRpb25Ob2RlO1xuICAgICAgY29udGludWF0aW9uTm9kZS5uZXh0ID0gbmV4dEFmdGVyQ29udGludWF0aW9uO1xuICAgICAgY29udGludWF0aW9uTm9kZS5wcmV2aW91cyA9IHByZXZpb3VzO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmbHVzaEltbWVkaWF0ZVdvcmsoKSB7XG4gIGlmIChcbiAgLy8gQ29uZmlybSB3ZSd2ZSBleGl0ZWQgdGhlIG91dGVyIG1vc3QgZXZlbnQgaGFuZGxlclxuICBjdXJyZW50RXZlbnRTdGFydFRpbWUgPT09IC0xICYmIGZpcnN0Q2FsbGJhY2tOb2RlICE9PSBudWxsICYmIGZpcnN0Q2FsbGJhY2tOb2RlLnByaW9yaXR5TGV2ZWwgPT09IEltbWVkaWF0ZVByaW9yaXR5KSB7XG4gICAgaXNFeGVjdXRpbmdDYWxsYmFjayA9IHRydWU7XG4gICAgZGVhZGxpbmVPYmplY3QuZGlkVGltZW91dCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIGRvIHtcbiAgICAgICAgZmx1c2hGaXJzdENhbGxiYWNrKCk7XG4gICAgICB9IHdoaWxlIChcbiAgICAgIC8vIEtlZXAgZmx1c2hpbmcgdW50aWwgdGhlcmUgYXJlIG5vIG1vcmUgaW1tZWRpYXRlIGNhbGxiYWNrc1xuICAgICAgZmlyc3RDYWxsYmFja05vZGUgIT09IG51bGwgJiYgZmlyc3RDYWxsYmFja05vZGUucHJpb3JpdHlMZXZlbCA9PT0gSW1tZWRpYXRlUHJpb3JpdHkpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0V4ZWN1dGluZ0NhbGxiYWNrID0gZmFsc2U7XG4gICAgICBpZiAoZmlyc3RDYWxsYmFja05vZGUgIT09IG51bGwpIHtcbiAgICAgICAgLy8gVGhlcmUncyBzdGlsbCB3b3JrIHJlbWFpbmluZy4gUmVxdWVzdCBhbm90aGVyIGNhbGxiYWNrLlxuICAgICAgICBlbnN1cmVIb3N0Q2FsbGJhY2tJc1NjaGVkdWxlZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmx1c2hXb3JrKGRpZFRpbWVvdXQpIHtcbiAgaXNFeGVjdXRpbmdDYWxsYmFjayA9IHRydWU7XG4gIGRlYWRsaW5lT2JqZWN0LmRpZFRpbWVvdXQgPSBkaWRUaW1lb3V0O1xuICB0cnkge1xuICAgIGlmIChkaWRUaW1lb3V0KSB7XG4gICAgICAvLyBGbHVzaCBhbGwgdGhlIGV4cGlyZWQgY2FsbGJhY2tzIHdpdGhvdXQgeWllbGRpbmcuXG4gICAgICB3aGlsZSAoZmlyc3RDYWxsYmFja05vZGUgIT09IG51bGwpIHtcbiAgICAgICAgLy8gUmVhZCB0aGUgY3VycmVudCB0aW1lLiBGbHVzaCBhbGwgdGhlIGNhbGxiYWNrcyB0aGF0IGV4cGlyZSBhdCBvclxuICAgICAgICAvLyBlYXJsaWVyIHRoYW4gdGhhdCB0aW1lLiBUaGVuIHJlYWQgdGhlIGN1cnJlbnQgdGltZSBhZ2FpbiBhbmQgcmVwZWF0LlxuICAgICAgICAvLyBUaGlzIG9wdGltaXplcyBmb3IgYXMgZmV3IHBlcmZvcm1hbmNlLm5vdyBjYWxscyBhcyBwb3NzaWJsZS5cbiAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcbiAgICAgICAgaWYgKGZpcnN0Q2FsbGJhY2tOb2RlLmV4cGlyYXRpb25UaW1lIDw9IGN1cnJlbnRUaW1lKSB7XG4gICAgICAgICAgZG8ge1xuICAgICAgICAgICAgZmx1c2hGaXJzdENhbGxiYWNrKCk7XG4gICAgICAgICAgfSB3aGlsZSAoZmlyc3RDYWxsYmFja05vZGUgIT09IG51bGwgJiYgZmlyc3RDYWxsYmFja05vZGUuZXhwaXJhdGlvblRpbWUgPD0gY3VycmVudFRpbWUpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBLZWVwIGZsdXNoaW5nIGNhbGxiYWNrcyB1bnRpbCB3ZSBydW4gb3V0IG9mIHRpbWUgaW4gdGhlIGZyYW1lLlxuICAgICAgaWYgKGZpcnN0Q2FsbGJhY2tOb2RlICE9PSBudWxsKSB7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBmbHVzaEZpcnN0Q2FsbGJhY2soKTtcbiAgICAgICAgfSB3aGlsZSAoZmlyc3RDYWxsYmFja05vZGUgIT09IG51bGwgJiYgZ2V0RnJhbWVEZWFkbGluZSgpIC0gZXhwb3J0cy51bnN0YWJsZV9ub3coKSA+IDApO1xuICAgICAgfVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBpc0V4ZWN1dGluZ0NhbGxiYWNrID0gZmFsc2U7XG4gICAgaWYgKGZpcnN0Q2FsbGJhY2tOb2RlICE9PSBudWxsKSB7XG4gICAgICAvLyBUaGVyZSdzIHN0aWxsIHdvcmsgcmVtYWluaW5nLiBSZXF1ZXN0IGFub3RoZXIgY2FsbGJhY2suXG4gICAgICBlbnN1cmVIb3N0Q2FsbGJhY2tJc1NjaGVkdWxlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIH1cbiAgICAvLyBCZWZvcmUgZXhpdGluZywgZmx1c2ggYWxsIHRoZSBpbW1lZGlhdGUgd29yayB0aGF0IHdhcyBzY2hlZHVsZWQuXG4gICAgZmx1c2hJbW1lZGlhdGVXb3JrKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KHByaW9yaXR5TGV2ZWwsIGV2ZW50SGFuZGxlcikge1xuICBzd2l0Y2ggKHByaW9yaXR5TGV2ZWwpIHtcbiAgICBjYXNlIEltbWVkaWF0ZVByaW9yaXR5OlxuICAgIGNhc2UgVXNlckJsb2NraW5nUHJpb3JpdHk6XG4gICAgY2FzZSBOb3JtYWxQcmlvcml0eTpcbiAgICBjYXNlIElkbGVQcmlvcml0eTpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBwcmlvcml0eUxldmVsID0gTm9ybWFsUHJpb3JpdHk7XG4gIH1cblxuICB2YXIgcHJldmlvdXNQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gIHZhciBwcmV2aW91c0V2ZW50U3RhcnRUaW1lID0gY3VycmVudEV2ZW50U3RhcnRUaW1lO1xuICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByaW9yaXR5TGV2ZWw7XG4gIGN1cnJlbnRFdmVudFN0YXJ0VGltZSA9IGV4cG9ydHMudW5zdGFibGVfbm93KCk7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZXZlbnRIYW5kbGVyKCk7XG4gIH0gZmluYWxseSB7XG4gICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmV2aW91c1ByaW9yaXR5TGV2ZWw7XG4gICAgY3VycmVudEV2ZW50U3RhcnRUaW1lID0gcHJldmlvdXNFdmVudFN0YXJ0VGltZTtcblxuICAgIC8vIEJlZm9yZSBleGl0aW5nLCBmbHVzaCBhbGwgdGhlIGltbWVkaWF0ZSB3b3JrIHRoYXQgd2FzIHNjaGVkdWxlZC5cbiAgICBmbHVzaEltbWVkaWF0ZVdvcmsoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bnN0YWJsZV93cmFwQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgdmFyIHBhcmVudFByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBUaGlzIGlzIGEgZm9yayBvZiBydW5XaXRoUHJpb3JpdHksIGlubGluZWQgZm9yIHBlcmZvcm1hbmNlLlxuICAgIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgICB2YXIgcHJldmlvdXNFdmVudFN0YXJ0VGltZSA9IGN1cnJlbnRFdmVudFN0YXJ0VGltZTtcbiAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHBhcmVudFByaW9yaXR5TGV2ZWw7XG4gICAgY3VycmVudEV2ZW50U3RhcnRUaW1lID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmV2aW91c1ByaW9yaXR5TGV2ZWw7XG4gICAgICBjdXJyZW50RXZlbnRTdGFydFRpbWUgPSBwcmV2aW91c0V2ZW50U3RhcnRUaW1lO1xuICAgICAgZmx1c2hJbW1lZGlhdGVXb3JrKCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiB1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhbGxiYWNrLCBkZXByZWNhdGVkX29wdGlvbnMpIHtcbiAgdmFyIHN0YXJ0VGltZSA9IGN1cnJlbnRFdmVudFN0YXJ0VGltZSAhPT0gLTEgPyBjdXJyZW50RXZlbnRTdGFydFRpbWUgOiBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuXG4gIHZhciBleHBpcmF0aW9uVGltZTtcbiAgaWYgKHR5cGVvZiBkZXByZWNhdGVkX29wdGlvbnMgPT09ICdvYmplY3QnICYmIGRlcHJlY2F0ZWRfb3B0aW9ucyAhPT0gbnVsbCAmJiB0eXBlb2YgZGVwcmVjYXRlZF9vcHRpb25zLnRpbWVvdXQgPT09ICdudW1iZXInKSB7XG4gICAgLy8gRklYTUU6IFJlbW92ZSB0aGlzIGJyYW5jaCBvbmNlIHdlIGxpZnQgZXhwaXJhdGlvbiB0aW1lcyBvdXQgb2YgUmVhY3QuXG4gICAgZXhwaXJhdGlvblRpbWUgPSBzdGFydFRpbWUgKyBkZXByZWNhdGVkX29wdGlvbnMudGltZW91dDtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGN1cnJlbnRQcmlvcml0eUxldmVsKSB7XG4gICAgICBjYXNlIEltbWVkaWF0ZVByaW9yaXR5OlxuICAgICAgICBleHBpcmF0aW9uVGltZSA9IHN0YXJ0VGltZSArIElNTUVESUFURV9QUklPUklUWV9USU1FT1VUO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVXNlckJsb2NraW5nUHJpb3JpdHk6XG4gICAgICAgIGV4cGlyYXRpb25UaW1lID0gc3RhcnRUaW1lICsgVVNFUl9CTE9DS0lOR19QUklPUklUWTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIElkbGVQcmlvcml0eTpcbiAgICAgICAgZXhwaXJhdGlvblRpbWUgPSBzdGFydFRpbWUgKyBJRExFX1BSSU9SSVRZO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTm9ybWFsUHJpb3JpdHk6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBleHBpcmF0aW9uVGltZSA9IHN0YXJ0VGltZSArIE5PUk1BTF9QUklPUklUWV9USU1FT1VUO1xuICAgIH1cbiAgfVxuXG4gIHZhciBuZXdOb2RlID0ge1xuICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICBwcmlvcml0eUxldmVsOiBjdXJyZW50UHJpb3JpdHlMZXZlbCxcbiAgICBleHBpcmF0aW9uVGltZTogZXhwaXJhdGlvblRpbWUsXG4gICAgbmV4dDogbnVsbCxcbiAgICBwcmV2aW91czogbnVsbFxuICB9O1xuXG4gIC8vIEluc2VydCB0aGUgbmV3IGNhbGxiYWNrIGludG8gdGhlIGxpc3QsIG9yZGVyZWQgZmlyc3QgYnkgZXhwaXJhdGlvbiwgdGhlblxuICAvLyBieSBpbnNlcnRpb24uIFNvIHRoZSBuZXcgY2FsbGJhY2sgaXMgaW5zZXJ0ZWQgYW55IG90aGVyIGNhbGxiYWNrIHdpdGhcbiAgLy8gZXF1YWwgZXhwaXJhdGlvbi5cbiAgaWYgKGZpcnN0Q2FsbGJhY2tOb2RlID09PSBudWxsKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgY2FsbGJhY2sgaW4gdGhlIGxpc3QuXG4gICAgZmlyc3RDYWxsYmFja05vZGUgPSBuZXdOb2RlLm5leHQgPSBuZXdOb2RlLnByZXZpb3VzID0gbmV3Tm9kZTtcbiAgICBlbnN1cmVIb3N0Q2FsbGJhY2tJc1NjaGVkdWxlZCgpO1xuICB9IGVsc2Uge1xuICAgIHZhciBuZXh0ID0gbnVsbDtcbiAgICB2YXIgbm9kZSA9IGZpcnN0Q2FsbGJhY2tOb2RlO1xuICAgIGRvIHtcbiAgICAgIGlmIChub2RlLmV4cGlyYXRpb25UaW1lID4gZXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgLy8gVGhlIG5ldyBjYWxsYmFjayBleHBpcmVzIGJlZm9yZSB0aGlzIG9uZS5cbiAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICB9IHdoaWxlIChub2RlICE9PSBmaXJzdENhbGxiYWNrTm9kZSk7XG5cbiAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgICAgLy8gTm8gY2FsbGJhY2sgd2l0aCBhIGxhdGVyIGV4cGlyYXRpb24gd2FzIGZvdW5kLCB3aGljaCBtZWFucyB0aGUgbmV3XG4gICAgICAvLyBjYWxsYmFjayBoYXMgdGhlIGxhdGVzdCBleHBpcmF0aW9uIGluIHRoZSBsaXN0LlxuICAgICAgbmV4dCA9IGZpcnN0Q2FsbGJhY2tOb2RlO1xuICAgIH0gZWxzZSBpZiAobmV4dCA9PT0gZmlyc3RDYWxsYmFja05vZGUpIHtcbiAgICAgIC8vIFRoZSBuZXcgY2FsbGJhY2sgaGFzIHRoZSBlYXJsaWVzdCBleHBpcmF0aW9uIGluIHRoZSBlbnRpcmUgbGlzdC5cbiAgICAgIGZpcnN0Q2FsbGJhY2tOb2RlID0gbmV3Tm9kZTtcbiAgICAgIGVuc3VyZUhvc3RDYWxsYmFja0lzU2NoZWR1bGVkKCk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzID0gbmV4dC5wcmV2aW91cztcbiAgICBwcmV2aW91cy5uZXh0ID0gbmV4dC5wcmV2aW91cyA9IG5ld05vZGU7XG4gICAgbmV3Tm9kZS5uZXh0ID0gbmV4dDtcbiAgICBuZXdOb2RlLnByZXZpb3VzID0gcHJldmlvdXM7XG4gIH1cblxuICByZXR1cm4gbmV3Tm9kZTtcbn1cblxuZnVuY3Rpb24gdW5zdGFibGVfY2FuY2VsQ2FsbGJhY2soY2FsbGJhY2tOb2RlKSB7XG4gIHZhciBuZXh0ID0gY2FsbGJhY2tOb2RlLm5leHQ7XG4gIGlmIChuZXh0ID09PSBudWxsKSB7XG4gICAgLy8gQWxyZWFkeSBjYW5jZWxsZWQuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG5leHQgPT09IGNhbGxiYWNrTm9kZSkge1xuICAgIC8vIFRoaXMgaXMgdGhlIG9ubHkgc2NoZWR1bGVkIGNhbGxiYWNrLiBDbGVhciB0aGUgbGlzdC5cbiAgICBmaXJzdENhbGxiYWNrTm9kZSA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgLy8gUmVtb3ZlIHRoZSBjYWxsYmFjayBmcm9tIGl0cyBwb3NpdGlvbiBpbiB0aGUgbGlzdC5cbiAgICBpZiAoY2FsbGJhY2tOb2RlID09PSBmaXJzdENhbGxiYWNrTm9kZSkge1xuICAgICAgZmlyc3RDYWxsYmFja05vZGUgPSBuZXh0O1xuICAgIH1cbiAgICB2YXIgcHJldmlvdXMgPSBjYWxsYmFja05vZGUucHJldmlvdXM7XG4gICAgcHJldmlvdXMubmV4dCA9IG5leHQ7XG4gICAgbmV4dC5wcmV2aW91cyA9IHByZXZpb3VzO1xuICB9XG5cbiAgY2FsbGJhY2tOb2RlLm5leHQgPSBjYWxsYmFja05vZGUucHJldmlvdXMgPSBudWxsO1xufVxuXG5mdW5jdGlvbiB1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCgpIHtcbiAgcmV0dXJuIGN1cnJlbnRQcmlvcml0eUxldmVsO1xufVxuXG4vLyBUaGUgcmVtYWluaW5nIGNvZGUgaXMgZXNzZW50aWFsbHkgYSBwb2x5ZmlsbCBmb3IgcmVxdWVzdElkbGVDYWxsYmFjay4gSXRcbi8vIHdvcmtzIGJ5IHNjaGVkdWxpbmcgYSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUsIHN0b3JpbmcgdGhlIHRpbWUgZm9yIHRoZSBzdGFydFxuLy8gb2YgdGhlIGZyYW1lLCB0aGVuIHNjaGVkdWxpbmcgYSBwb3N0TWVzc2FnZSB3aGljaCBnZXRzIHNjaGVkdWxlZCBhZnRlciBwYWludC5cbi8vIFdpdGhpbiB0aGUgcG9zdE1lc3NhZ2UgaGFuZGxlciBkbyBhcyBtdWNoIHdvcmsgYXMgcG9zc2libGUgdW50aWwgdGltZSArIGZyYW1lXG4vLyByYXRlLiBCeSBzZXBhcmF0aW5nIHRoZSBpZGxlIGNhbGwgaW50byBhIHNlcGFyYXRlIGV2ZW50IHRpY2sgd2UgZW5zdXJlIHRoYXRcbi8vIGxheW91dCwgcGFpbnQgYW5kIG90aGVyIGJyb3dzZXIgd29yayBpcyBjb3VudGVkIGFnYWluc3QgdGhlIGF2YWlsYWJsZSB0aW1lLlxuLy8gVGhlIGZyYW1lIHJhdGUgaXMgZHluYW1pY2FsbHkgYWRqdXN0ZWQuXG5cbi8vIFdlIGNhcHR1cmUgYSBsb2NhbCByZWZlcmVuY2UgdG8gYW55IGdsb2JhbCwgaW4gY2FzZSBpdCBnZXRzIHBvbHlmaWxsZWQgYWZ0ZXJcbi8vIHRoaXMgbW9kdWxlIGlzIGluaXRpYWxseSBldmFsdWF0ZWQuIFdlIHdhbnQgdG8gYmUgdXNpbmcgYVxuLy8gY29uc2lzdGVudCBpbXBsZW1lbnRhdGlvbi5cbnZhciBsb2NhbERhdGUgPSBEYXRlO1xuXG4vLyBUaGlzIGluaXRpYWxpemF0aW9uIGNvZGUgbWF5IHJ1biBldmVuIG9uIHNlcnZlciBlbnZpcm9ubWVudHMgaWYgYSBjb21wb25lbnRcbi8vIGp1c3QgaW1wb3J0cyBSZWFjdERPTSAoZS5nLiBmb3IgZmluZERPTU5vZGUpLiBTb21lIGVudmlyb25tZW50cyBtaWdodCBub3Rcbi8vIGhhdmUgc2V0VGltZW91dCBvciBjbGVhclRpbWVvdXQuIEhvd2V2ZXIsIHdlIGFsd2F5cyBleHBlY3QgdGhlbSB0byBiZSBkZWZpbmVkXG4vLyBvbiB0aGUgY2xpZW50LiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8xMzA4OFxudmFyIGxvY2FsU2V0VGltZW91dCA9IHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nID8gc2V0VGltZW91dCA6IHVuZGVmaW5lZDtcbnZhciBsb2NhbENsZWFyVGltZW91dCA9IHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicgPyBjbGVhclRpbWVvdXQgOiB1bmRlZmluZWQ7XG5cbi8vIFdlIGRvbid0IGV4cGVjdCBlaXRoZXIgb2YgdGhlc2UgdG8gbmVjZXNzYXJpbHkgYmUgZGVmaW5lZCwgYnV0IHdlIHdpbGwgZXJyb3Jcbi8vIGxhdGVyIGlmIHRoZXkgYXJlIG1pc3Npbmcgb24gdGhlIGNsaWVudC5cbnZhciBsb2NhbFJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPT09ICdmdW5jdGlvbicgPyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgOiB1bmRlZmluZWQ7XG52YXIgbG9jYWxDYW5jZWxBbmltYXRpb25GcmFtZSA9IHR5cGVvZiBjYW5jZWxBbmltYXRpb25GcmFtZSA9PT0gJ2Z1bmN0aW9uJyA/IGNhbmNlbEFuaW1hdGlvbkZyYW1lIDogdW5kZWZpbmVkO1xuXG4vLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgZG9lcyBub3QgcnVuIHdoZW4gdGhlIHRhYiBpcyBpbiB0aGUgYmFja2dyb3VuZC4gSWZcbi8vIHdlJ3JlIGJhY2tncm91bmRlZCB3ZSBwcmVmZXIgZm9yIHRoYXQgd29yayB0byBoYXBwZW4gc28gdGhhdCB0aGUgcGFnZVxuLy8gY29udGludWVzIHRvIGxvYWQgaW4gdGhlIGJhY2tncm91bmQuIFNvIHdlIGFsc28gc2NoZWR1bGUgYSAnc2V0VGltZW91dCcgYXNcbi8vIGEgZmFsbGJhY2suXG4vLyBUT0RPOiBOZWVkIGEgYmV0dGVyIGhldXJpc3RpYyBmb3IgYmFja2dyb3VuZGVkIHdvcmsuXG52YXIgQU5JTUFUSU9OX0ZSQU1FX1RJTUVPVVQgPSAxMDA7XG52YXIgckFGSUQ7XG52YXIgckFGVGltZW91dElEO1xudmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZVdpdGhUaW1lb3V0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIC8vIHNjaGVkdWxlIHJBRiBhbmQgYWxzbyBhIHNldFRpbWVvdXRcbiAgckFGSUQgPSBsb2NhbFJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAodGltZXN0YW1wKSB7XG4gICAgLy8gY2FuY2VsIHRoZSBzZXRUaW1lb3V0XG4gICAgbG9jYWxDbGVhclRpbWVvdXQockFGVGltZW91dElEKTtcbiAgICBjYWxsYmFjayh0aW1lc3RhbXApO1xuICB9KTtcbiAgckFGVGltZW91dElEID0gbG9jYWxTZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAvLyBjYW5jZWwgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgIGxvY2FsQ2FuY2VsQW5pbWF0aW9uRnJhbWUockFGSUQpO1xuICAgIGNhbGxiYWNrKGV4cG9ydHMudW5zdGFibGVfbm93KCkpO1xuICB9LCBBTklNQVRJT05fRlJBTUVfVElNRU9VVCk7XG59O1xuXG5pZiAoaGFzTmF0aXZlUGVyZm9ybWFuY2VOb3cpIHtcbiAgdmFyIFBlcmZvcm1hbmNlID0gcGVyZm9ybWFuY2U7XG4gIGV4cG9ydHMudW5zdGFibGVfbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBQZXJmb3JtYW5jZS5ub3coKTtcbiAgfTtcbn0gZWxzZSB7XG4gIGV4cG9ydHMudW5zdGFibGVfbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBsb2NhbERhdGUubm93KCk7XG4gIH07XG59XG5cbnZhciByZXF1ZXN0SG9zdENhbGxiYWNrO1xudmFyIGNhbmNlbEhvc3RDYWxsYmFjaztcbnZhciBnZXRGcmFtZURlYWRsaW5lO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Ll9zY2hlZE1vY2spIHtcbiAgLy8gRHluYW1pYyBpbmplY3Rpb24sIG9ubHkgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gIHZhciBpbXBsID0gd2luZG93Ll9zY2hlZE1vY2s7XG4gIHJlcXVlc3RIb3N0Q2FsbGJhY2sgPSBpbXBsWzBdO1xuICBjYW5jZWxIb3N0Q2FsbGJhY2sgPSBpbXBsWzFdO1xuICBnZXRGcmFtZURlYWRsaW5lID0gaW1wbFsyXTtcbn0gZWxzZSBpZiAoXG4vLyBJZiBTY2hlZHVsZXIgcnVucyBpbiBhIG5vbi1ET00gZW52aXJvbm1lbnQsIGl0IGZhbGxzIGJhY2sgdG8gYSBuYWl2ZVxuLy8gaW1wbGVtZW50YXRpb24gdXNpbmcgc2V0VGltZW91dC5cbnR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8XG4vLyBcImFkZEV2ZW50TGlzdGVuZXJcIiBtaWdodCBub3QgYmUgYXZhaWxhYmxlIG9uIHRoZSB3aW5kb3cgb2JqZWN0XG4vLyBpZiB0aGlzIGlzIGEgbW9ja2VkIFwid2luZG93XCIgb2JqZWN0LiBTbyB3ZSBuZWVkIHRvIHZhbGlkYXRlIHRoYXQgdG9vLlxudHlwZW9mIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gIHZhciBfY2FsbGJhY2sgPSBudWxsO1xuICB2YXIgX2N1cnJlbnRUaW1lID0gLTE7XG4gIHZhciBfZmx1c2hDYWxsYmFjayA9IGZ1bmN0aW9uIChkaWRUaW1lb3V0LCBtcykge1xuICAgIGlmIChfY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHZhciBjYiA9IF9jYWxsYmFjaztcbiAgICAgIF9jYWxsYmFjayA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICBfY3VycmVudFRpbWUgPSBtcztcbiAgICAgICAgY2IoZGlkVGltZW91dCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfY3VycmVudFRpbWUgPSAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJlcXVlc3RIb3N0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoY2IsIG1zKSB7XG4gICAgaWYgKF9jdXJyZW50VGltZSAhPT0gLTEpIHtcbiAgICAgIC8vIFByb3RlY3QgYWdhaW5zdCByZS1lbnRyYW5jeS5cbiAgICAgIHNldFRpbWVvdXQocmVxdWVzdEhvc3RDYWxsYmFjaywgMCwgY2IsIG1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2NhbGxiYWNrID0gY2I7XG4gICAgICBzZXRUaW1lb3V0KF9mbHVzaENhbGxiYWNrLCBtcywgdHJ1ZSwgbXMpO1xuICAgICAgc2V0VGltZW91dChfZmx1c2hDYWxsYmFjaywgbWF4U2lnbmVkMzFCaXRJbnQsIGZhbHNlLCBtYXhTaWduZWQzMUJpdEludCk7XG4gICAgfVxuICB9O1xuICBjYW5jZWxIb3N0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgX2NhbGxiYWNrID0gbnVsbDtcbiAgfTtcbiAgZ2V0RnJhbWVEZWFkbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gSW5maW5pdHk7XG4gIH07XG4gIGV4cG9ydHMudW5zdGFibGVfbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfY3VycmVudFRpbWUgPT09IC0xID8gMCA6IF9jdXJyZW50VGltZTtcbiAgfTtcbn0gZWxzZSB7XG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBUT0RPOiBSZW1vdmUgZmIubWUgbGlua1xuICAgIGlmICh0eXBlb2YgbG9jYWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gXCIgKyAnTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSAnICsgJ3BvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxscycpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGxvY2FsQ2FuY2VsQW5pbWF0aW9uRnJhbWUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBcIiArICdNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhICcgKyAncG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHNjaGVkdWxlZEhvc3RDYWxsYmFjayA9IG51bGw7XG4gIHZhciBpc01lc3NhZ2VFdmVudFNjaGVkdWxlZCA9IGZhbHNlO1xuICB2YXIgdGltZW91dFRpbWUgPSAtMTtcblxuICB2YXIgaXNBbmltYXRpb25GcmFtZVNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIHZhciBpc0ZsdXNoaW5nSG9zdENhbGxiYWNrID0gZmFsc2U7XG5cbiAgdmFyIGZyYW1lRGVhZGxpbmUgPSAwO1xuICAvLyBXZSBzdGFydCBvdXQgYXNzdW1pbmcgdGhhdCB3ZSBydW4gYXQgMzBmcHMgYnV0IHRoZW4gdGhlIGhldXJpc3RpYyB0cmFja2luZ1xuICAvLyB3aWxsIGFkanVzdCB0aGlzIHZhbHVlIHRvIGEgZmFzdGVyIGZwcyBpZiB3ZSBnZXQgbW9yZSBmcmVxdWVudCBhbmltYXRpb25cbiAgLy8gZnJhbWVzLlxuICB2YXIgcHJldmlvdXNGcmFtZVRpbWUgPSAzMztcbiAgdmFyIGFjdGl2ZUZyYW1lVGltZSA9IDMzO1xuXG4gIGdldEZyYW1lRGVhZGxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZyYW1lRGVhZGxpbmU7XG4gIH07XG5cbiAgLy8gV2UgdXNlIHRoZSBwb3N0TWVzc2FnZSB0cmljayB0byBkZWZlciBpZGxlIHdvcmsgdW50aWwgYWZ0ZXIgdGhlIHJlcGFpbnQuXG4gIHZhciBtZXNzYWdlS2V5ID0gJ19fcmVhY3RJZGxlQ2FsbGJhY2skJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO1xuICB2YXIgaWRsZVRpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuc291cmNlICE9PSB3aW5kb3cgfHwgZXZlbnQuZGF0YSAhPT0gbWVzc2FnZUtleSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlzTWVzc2FnZUV2ZW50U2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgICB2YXIgcHJldlNjaGVkdWxlZENhbGxiYWNrID0gc2NoZWR1bGVkSG9zdENhbGxiYWNrO1xuICAgIHZhciBwcmV2VGltZW91dFRpbWUgPSB0aW1lb3V0VGltZTtcbiAgICBzY2hlZHVsZWRIb3N0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHRpbWVvdXRUaW1lID0gLTE7XG5cbiAgICB2YXIgY3VycmVudFRpbWUgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuXG4gICAgdmFyIGRpZFRpbWVvdXQgPSBmYWxzZTtcbiAgICBpZiAoZnJhbWVEZWFkbGluZSAtIGN1cnJlbnRUaW1lIDw9IDApIHtcbiAgICAgIC8vIFRoZXJlJ3Mgbm8gdGltZSBsZWZ0IGluIHRoaXMgaWRsZSBwZXJpb2QuIENoZWNrIGlmIHRoZSBjYWxsYmFjayBoYXNcbiAgICAgIC8vIGEgdGltZW91dCBhbmQgd2hldGhlciBpdCdzIGJlZW4gZXhjZWVkZWQuXG4gICAgICBpZiAocHJldlRpbWVvdXRUaW1lICE9PSAtMSAmJiBwcmV2VGltZW91dFRpbWUgPD0gY3VycmVudFRpbWUpIHtcbiAgICAgICAgLy8gRXhjZWVkZWQgdGhlIHRpbWVvdXQuIEludm9rZSB0aGUgY2FsbGJhY2sgZXZlbiB0aG91Z2ggdGhlcmUncyBub1xuICAgICAgICAvLyB0aW1lIGxlZnQuXG4gICAgICAgIGRpZFRpbWVvdXQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTm8gdGltZW91dC5cbiAgICAgICAgaWYgKCFpc0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVkKSB7XG4gICAgICAgICAgLy8gU2NoZWR1bGUgYW5vdGhlciBhbmltYXRpb24gY2FsbGJhY2sgc28gd2UgcmV0cnkgbGF0ZXIuXG4gICAgICAgICAgaXNBbmltYXRpb25GcmFtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lV2l0aFRpbWVvdXQoYW5pbWF0aW9uVGljayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRXhpdCB3aXRob3V0IGludm9raW5nIHRoZSBjYWxsYmFjay5cbiAgICAgICAgc2NoZWR1bGVkSG9zdENhbGxiYWNrID0gcHJldlNjaGVkdWxlZENhbGxiYWNrO1xuICAgICAgICB0aW1lb3V0VGltZSA9IHByZXZUaW1lb3V0VGltZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2U2NoZWR1bGVkQ2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIGlzRmx1c2hpbmdIb3N0Q2FsbGJhY2sgPSB0cnVlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcHJldlNjaGVkdWxlZENhbGxiYWNrKGRpZFRpbWVvdXQpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaXNGbHVzaGluZ0hvc3RDYWxsYmFjayA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgLy8gQXNzdW1lcyB0aGF0IHdlIGhhdmUgYWRkRXZlbnRMaXN0ZW5lciBpbiB0aGlzIGVudmlyb25tZW50LiBNaWdodCBuZWVkXG4gIC8vIHNvbWV0aGluZyBiZXR0ZXIgZm9yIG9sZCBJRS5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBpZGxlVGljaywgZmFsc2UpO1xuXG4gIHZhciBhbmltYXRpb25UaWNrID0gZnVuY3Rpb24gKHJhZlRpbWUpIHtcbiAgICBpZiAoc2NoZWR1bGVkSG9zdENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICAvLyBFYWdlcmx5IHNjaGVkdWxlIHRoZSBuZXh0IGFuaW1hdGlvbiBjYWxsYmFjayBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZVxuICAgICAgLy8gZnJhbWUuIElmIHRoZSBzY2hlZHVsZXIgcXVldWUgaXMgbm90IGVtcHR5IGF0IHRoZSBlbmQgb2YgdGhlIGZyYW1lLCBpdFxuICAgICAgLy8gd2lsbCBjb250aW51ZSBmbHVzaGluZyBpbnNpZGUgdGhhdCBjYWxsYmFjay4gSWYgdGhlIHF1ZXVlICppcyogZW1wdHksXG4gICAgICAvLyB0aGVuIGl0IHdpbGwgZXhpdCBpbW1lZGlhdGVseS4gUG9zdGluZyB0aGUgY2FsbGJhY2sgYXQgdGhlIHN0YXJ0IG9mIHRoZVxuICAgICAgLy8gZnJhbWUgZW5zdXJlcyBpdCdzIGZpcmVkIHdpdGhpbiB0aGUgZWFybGllc3QgcG9zc2libGUgZnJhbWUuIElmIHdlXG4gICAgICAvLyB3YWl0ZWQgdW50aWwgdGhlIGVuZCBvZiB0aGUgZnJhbWUgdG8gcG9zdCB0aGUgY2FsbGJhY2ssIHdlIHJpc2sgdGhlXG4gICAgICAvLyBicm93c2VyIHNraXBwaW5nIGEgZnJhbWUgYW5kIG5vdCBmaXJpbmcgdGhlIGNhbGxiYWNrIHVudGlsIHRoZSBmcmFtZVxuICAgICAgLy8gYWZ0ZXIgdGhhdC5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZVdpdGhUaW1lb3V0KGFuaW1hdGlvblRpY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBObyBwZW5kaW5nIHdvcmsuIEV4aXQuXG4gICAgICBpc0FuaW1hdGlvbkZyYW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRGcmFtZVRpbWUgPSByYWZUaW1lIC0gZnJhbWVEZWFkbGluZSArIGFjdGl2ZUZyYW1lVGltZTtcbiAgICBpZiAobmV4dEZyYW1lVGltZSA8IGFjdGl2ZUZyYW1lVGltZSAmJiBwcmV2aW91c0ZyYW1lVGltZSA8IGFjdGl2ZUZyYW1lVGltZSkge1xuICAgICAgaWYgKG5leHRGcmFtZVRpbWUgPCA4KSB7XG4gICAgICAgIC8vIERlZmVuc2l2ZSBjb2RpbmcuIFdlIGRvbid0IHN1cHBvcnQgaGlnaGVyIGZyYW1lIHJhdGVzIHRoYW4gMTIwaHouXG4gICAgICAgIC8vIElmIHRoZSBjYWxjdWxhdGVkIGZyYW1lIHRpbWUgZ2V0cyBsb3dlciB0aGFuIDgsIGl0IGlzIHByb2JhYmx5IGEgYnVnLlxuICAgICAgICBuZXh0RnJhbWVUaW1lID0gODtcbiAgICAgIH1cbiAgICAgIC8vIElmIG9uZSBmcmFtZSBnb2VzIGxvbmcsIHRoZW4gdGhlIG5leHQgb25lIGNhbiBiZSBzaG9ydCB0byBjYXRjaCB1cC5cbiAgICAgIC8vIElmIHR3byBmcmFtZXMgYXJlIHNob3J0IGluIGEgcm93LCB0aGVuIHRoYXQncyBhbiBpbmRpY2F0aW9uIHRoYXQgd2VcbiAgICAgIC8vIGFjdHVhbGx5IGhhdmUgYSBoaWdoZXIgZnJhbWUgcmF0ZSB0aGFuIHdoYXQgd2UncmUgY3VycmVudGx5IG9wdGltaXppbmcuXG4gICAgICAvLyBXZSBhZGp1c3Qgb3VyIGhldXJpc3RpYyBkeW5hbWljYWxseSBhY2NvcmRpbmdseS4gRm9yIGV4YW1wbGUsIGlmIHdlJ3JlXG4gICAgICAvLyBydW5uaW5nIG9uIDEyMGh6IGRpc3BsYXkgb3IgOTBoeiBWUiBkaXNwbGF5LlxuICAgICAgLy8gVGFrZSB0aGUgbWF4IG9mIHRoZSB0d28gaW4gY2FzZSBvbmUgb2YgdGhlbSB3YXMgYW4gYW5vbWFseSBkdWUgdG9cbiAgICAgIC8vIG1pc3NlZCBmcmFtZSBkZWFkbGluZXMuXG4gICAgICBhY3RpdmVGcmFtZVRpbWUgPSBuZXh0RnJhbWVUaW1lIDwgcHJldmlvdXNGcmFtZVRpbWUgPyBwcmV2aW91c0ZyYW1lVGltZSA6IG5leHRGcmFtZVRpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXZpb3VzRnJhbWVUaW1lID0gbmV4dEZyYW1lVGltZTtcbiAgICB9XG4gICAgZnJhbWVEZWFkbGluZSA9IHJhZlRpbWUgKyBhY3RpdmVGcmFtZVRpbWU7XG4gICAgaWYgKCFpc01lc3NhZ2VFdmVudFNjaGVkdWxlZCkge1xuICAgICAgaXNNZXNzYWdlRXZlbnRTY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgd2luZG93LnBvc3RNZXNzYWdlKG1lc3NhZ2VLZXksICcqJyk7XG4gICAgfVxuICB9O1xuXG4gIHJlcXVlc3RIb3N0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGFic29sdXRlVGltZW91dCkge1xuICAgIHNjaGVkdWxlZEhvc3RDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRpbWVvdXRUaW1lID0gYWJzb2x1dGVUaW1lb3V0O1xuICAgIGlmIChpc0ZsdXNoaW5nSG9zdENhbGxiYWNrIHx8IGFic29sdXRlVGltZW91dCA8IDApIHtcbiAgICAgIC8vIERvbid0IHdhaXQgZm9yIHRoZSBuZXh0IGZyYW1lLiBDb250aW51ZSB3b3JraW5nIEFTQVAsIGluIGEgbmV3IGV2ZW50LlxuICAgICAgd2luZG93LnBvc3RNZXNzYWdlKG1lc3NhZ2VLZXksICcqJyk7XG4gICAgfSBlbHNlIGlmICghaXNBbmltYXRpb25GcmFtZVNjaGVkdWxlZCkge1xuICAgICAgLy8gSWYgckFGIGRpZG4ndCBhbHJlYWR5IHNjaGVkdWxlIG9uZSwgd2UgbmVlZCB0byBzY2hlZHVsZSBhIGZyYW1lLlxuICAgICAgLy8gVE9ETzogSWYgdGhpcyByQUYgZG9lc24ndCBtYXRlcmlhbGl6ZSBiZWNhdXNlIHRoZSBicm93c2VyIHRocm90dGxlcywgd2VcbiAgICAgIC8vIG1pZ2h0IHdhbnQgdG8gc3RpbGwgaGF2ZSBzZXRUaW1lb3V0IHRyaWdnZXIgcklDIGFzIGEgYmFja3VwIHRvIGVuc3VyZVxuICAgICAgLy8gdGhhdCB3ZSBrZWVwIHBlcmZvcm1pbmcgd29yay5cbiAgICAgIGlzQW5pbWF0aW9uRnJhbWVTY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lV2l0aFRpbWVvdXQoYW5pbWF0aW9uVGljayk7XG4gICAgfVxuICB9O1xuXG4gIGNhbmNlbEhvc3RDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICBzY2hlZHVsZWRIb3N0Q2FsbGJhY2sgPSBudWxsO1xuICAgIGlzTWVzc2FnZUV2ZW50U2NoZWR1bGVkID0gZmFsc2U7XG4gICAgdGltZW91dFRpbWUgPSAtMTtcbiAgfTtcbn1cblxuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSA9IEltbWVkaWF0ZVByaW9yaXR5O1xuZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSA9IFVzZXJCbG9ja2luZ1ByaW9yaXR5O1xuZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSA9IE5vcm1hbFByaW9yaXR5O1xuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHkgPSBJZGxlUHJpb3JpdHk7XG5leHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSA9IHVuc3RhYmxlX3J1bldpdGhQcmlvcml0eTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayA9IHVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s7XG5leHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrID0gdW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s7XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjayA9IHVuc3RhYmxlX3dyYXBDYWxsYmFjaztcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwgPSB1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgfSkoKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNi4wXG4gKiByZWFjdC1kb20uZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cblxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xudmFyIGNoZWNrUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcycpO1xudmFyIHNjaGVkdWxlciA9IHJlcXVpcmUoJ3NjaGVkdWxlcicpO1xudmFyIHRyYWNpbmcgPSByZXF1aXJlKCdzY2hlZHVsZXIvdHJhY2luZycpO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiAoKSB7fTtcblxue1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yID0gdm9pZCAwO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vLyBSZWx5aW5nIG9uIHRoZSBgaW52YXJpYW50KClgIGltcGxlbWVudGF0aW9uIGxldHMgdXNcbi8vIHByZXNlcnZlIHRoZSBmb3JtYXQgYW5kIHBhcmFtcyBpbiB0aGUgd3d3IGJ1aWxkcy5cblxuIVJlYWN0ID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RET00gd2FzIGxvYWRlZCBiZWZvcmUgUmVhY3QuIE1ha2Ugc3VyZSB5b3UgbG9hZCB0aGUgUmVhY3QgcGFja2FnZSBiZWZvcmUgbG9hZGluZyBSZWFjdERPTS4nKSA6IHZvaWQgMDtcblxudmFyIGludm9rZUd1YXJkZWRDYWxsYmFja0ltcGwgPSBmdW5jdGlvbiAobmFtZSwgZnVuYywgY29udGV4dCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgZnVuY0FyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDMpO1xuICB0cnkge1xuICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgZnVuY0FyZ3MpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRoaXMub25FcnJvcihlcnJvcik7XG4gIH1cbn07XG5cbntcbiAgLy8gSW4gREVWIG1vZGUsIHdlIHN3YXAgb3V0IGludm9rZUd1YXJkZWRDYWxsYmFjayBmb3IgYSBzcGVjaWFsIHZlcnNpb25cbiAgLy8gdGhhdCBwbGF5cyBtb3JlIG5pY2VseSB3aXRoIHRoZSBicm93c2VyJ3MgRGV2VG9vbHMuIFRoZSBpZGVhIGlzIHRvIHByZXNlcnZlXG4gIC8vIFwiUGF1c2Ugb24gZXhjZXB0aW9uc1wiIGJlaGF2aW9yLiBCZWNhdXNlIFJlYWN0IHdyYXBzIGFsbCB1c2VyLXByb3ZpZGVkXG4gIC8vIGZ1bmN0aW9ucyBpbiBpbnZva2VHdWFyZGVkQ2FsbGJhY2ssIGFuZCB0aGUgcHJvZHVjdGlvbiB2ZXJzaW9uIG9mXG4gIC8vIGludm9rZUd1YXJkZWRDYWxsYmFjayB1c2VzIGEgdHJ5LWNhdGNoLCBhbGwgdXNlciBleGNlcHRpb25zIGFyZSB0cmVhdGVkXG4gIC8vIGxpa2UgY2F1Z2h0IGV4Y2VwdGlvbnMsIGFuZCB0aGUgRGV2VG9vbHMgd29uJ3QgcGF1c2UgdW5sZXNzIHRoZSBkZXZlbG9wZXJcbiAgLy8gdGFrZXMgdGhlIGV4dHJhIHN0ZXAgb2YgZW5hYmxpbmcgcGF1c2Ugb24gY2F1Z2h0IGV4Y2VwdGlvbnMuIFRoaXMgaXNcbiAgLy8gdW50aW50dWl0aXZlLCB0aG91Z2gsIGJlY2F1c2UgZXZlbiB0aG91Z2ggUmVhY3QgaGFzIGNhdWdodCB0aGUgZXJyb3IsIGZyb21cbiAgLy8gdGhlIGRldmVsb3BlcidzIHBlcnNwZWN0aXZlLCB0aGUgZXJyb3IgaXMgdW5jYXVnaHQuXG4gIC8vXG4gIC8vIFRvIHByZXNlcnZlIHRoZSBleHBlY3RlZCBcIlBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBiZWhhdmlvciwgd2UgZG9uJ3QgdXNlIGFcbiAgLy8gdHJ5LWNhdGNoIGluIERFVi4gSW5zdGVhZCwgd2Ugc3luY2hyb25vdXNseSBkaXNwYXRjaCBhIGZha2UgZXZlbnQgdG8gYSBmYWtlXG4gIC8vIERPTSBub2RlLCBhbmQgY2FsbCB0aGUgdXNlci1wcm92aWRlZCBjYWxsYmFjayBmcm9tIGluc2lkZSBhbiBldmVudCBoYW5kbGVyXG4gIC8vIGZvciB0aGF0IGZha2UgZXZlbnQuIElmIHRoZSBjYWxsYmFjayB0aHJvd3MsIHRoZSBlcnJvciBpcyBcImNhcHR1cmVkXCIgdXNpbmdcbiAgLy8gYSBnbG9iYWwgZXZlbnQgaGFuZGxlci4gQnV0IGJlY2F1c2UgdGhlIGVycm9yIGhhcHBlbnMgaW4gYSBkaWZmZXJlbnRcbiAgLy8gZXZlbnQgbG9vcCBjb250ZXh0LCBpdCBkb2VzIG5vdCBpbnRlcnJ1cHQgdGhlIG5vcm1hbCBwcm9ncmFtIGZsb3cuXG4gIC8vIEVmZmVjdGl2ZWx5LCB0aGlzIGdpdmVzIHVzIHRyeS1jYXRjaCBiZWhhdmlvciB3aXRob3V0IGFjdHVhbGx5IHVzaW5nXG4gIC8vIHRyeS1jYXRjaC4gTmVhdCFcblxuICAvLyBDaGVjayB0aGF0IHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSBBUElzIHdlIG5lZWQgdG8gaW1wbGVtZW50IG91ciBzcGVjaWFsXG4gIC8vIERFViB2ZXJzaW9uIG9mIGludm9rZUd1YXJkZWRDYWxsYmFja1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kaXNwYXRjaEV2ZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGZha2VOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncmVhY3QnKTtcblxuICAgIHZhciBpbnZva2VHdWFyZGVkQ2FsbGJhY2tEZXYgPSBmdW5jdGlvbiAobmFtZSwgZnVuYywgY29udGV4dCwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgLy8gSWYgZG9jdW1lbnQgZG9lc24ndCBleGlzdCB3ZSBrbm93IGZvciBzdXJlIHdlIHdpbGwgY3Jhc2ggaW4gdGhpcyBtZXRob2RcbiAgICAgIC8vIHdoZW4gd2UgY2FsbCBkb2N1bWVudC5jcmVhdGVFdmVudCgpLiBIb3dldmVyIHRoaXMgY2FuIGNhdXNlIGNvbmZ1c2luZ1xuICAgICAgLy8gZXJyb3JzOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tpbmN1YmF0b3IvY3JlYXRlLXJlYWN0LWFwcC9pc3N1ZXMvMzQ4MlxuICAgICAgLy8gU28gd2UgcHJlZW1wdGl2ZWx5IHRocm93IHdpdGggYSBiZXR0ZXIgbWVzc2FnZSBpbnN0ZWFkLlxuICAgICAgISh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSA/IGludmFyaWFudChmYWxzZSwgJ1RoZSBgZG9jdW1lbnRgIGdsb2JhbCB3YXMgZGVmaW5lZCB3aGVuIFJlYWN0IHdhcyBpbml0aWFsaXplZCwgYnV0IGlzIG5vdCBkZWZpbmVkIGFueW1vcmUuIFRoaXMgY2FuIGhhcHBlbiBpbiBhIHRlc3QgZW52aXJvbm1lbnQgaWYgYSBjb21wb25lbnQgc2NoZWR1bGVzIGFuIHVwZGF0ZSBmcm9tIGFuIGFzeW5jaHJvbm91cyBjYWxsYmFjaywgYnV0IHRoZSB0ZXN0IGhhcyBhbHJlYWR5IGZpbmlzaGVkIHJ1bm5pbmcuIFRvIHNvbHZlIHRoaXMsIHlvdSBjYW4gZWl0aGVyIHVubW91bnQgdGhlIGNvbXBvbmVudCBhdCB0aGUgZW5kIG9mIHlvdXIgdGVzdCAoYW5kIGVuc3VyZSB0aGF0IGFueSBhc3luY2hyb25vdXMgb3BlcmF0aW9ucyBnZXQgY2FuY2VsZWQgaW4gYGNvbXBvbmVudFdpbGxVbm1vdW50YCksIG9yIHlvdSBjYW4gY2hhbmdlIHRoZSB0ZXN0IGl0c2VsZiB0byBiZSBhc3luY2hyb25vdXMuJykgOiB2b2lkIDA7XG4gICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG5cbiAgICAgIC8vIEtlZXBzIHRyYWNrIG9mIHdoZXRoZXIgdGhlIHVzZXItcHJvdmlkZWQgY2FsbGJhY2sgdGhyZXcgYW4gZXJyb3IuIFdlXG4gICAgICAvLyBzZXQgdGhpcyB0byB0cnVlIGF0IHRoZSBiZWdpbm5pbmcsIHRoZW4gc2V0IGl0IHRvIGZhbHNlIHJpZ2h0IGFmdGVyXG4gICAgICAvLyBjYWxsaW5nIHRoZSBmdW5jdGlvbi4gSWYgdGhlIGZ1bmN0aW9uIGVycm9ycywgYGRpZEVycm9yYCB3aWxsIG5ldmVyIGJlXG4gICAgICAvLyBzZXQgdG8gZmFsc2UuIFRoaXMgc3RyYXRlZ3kgd29ya3MgZXZlbiBpZiB0aGUgYnJvd3NlciBpcyBmbGFreSBhbmRcbiAgICAgIC8vIGZhaWxzIHRvIGNhbGwgb3VyIGdsb2JhbCBlcnJvciBoYW5kbGVyLCBiZWNhdXNlIGl0IGRvZXNuJ3QgcmVseSBvblxuICAgICAgLy8gdGhlIGVycm9yIGV2ZW50IGF0IGFsbC5cbiAgICAgIHZhciBkaWRFcnJvciA9IHRydWU7XG5cbiAgICAgIC8vIEtlZXBzIHRyYWNrIG9mIHRoZSB2YWx1ZSBvZiB3aW5kb3cuZXZlbnQgc28gdGhhdCB3ZSBjYW4gcmVzZXQgaXRcbiAgICAgIC8vIGR1cmluZyB0aGUgY2FsbGJhY2sgdG8gbGV0IHVzZXIgY29kZSBhY2Nlc3Mgd2luZG93LmV2ZW50IGluIHRoZVxuICAgICAgLy8gYnJvd3NlcnMgdGhhdCBzdXBwb3J0IGl0LlxuICAgICAgdmFyIHdpbmRvd0V2ZW50ID0gd2luZG93LmV2ZW50O1xuXG4gICAgICAvLyBLZWVwcyB0cmFjayBvZiB0aGUgZGVzY3JpcHRvciBvZiB3aW5kb3cuZXZlbnQgdG8gcmVzdG9yZSBpdCBhZnRlciBldmVudFxuICAgICAgLy8gZGlzcGF0Y2hpbmc6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTM2ODhcbiAgICAgIHZhciB3aW5kb3dFdmVudERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdywgJ2V2ZW50Jyk7XG5cbiAgICAgIC8vIENyZWF0ZSBhbiBldmVudCBoYW5kbGVyIGZvciBvdXIgZmFrZSBldmVudC4gV2Ugd2lsbCBzeW5jaHJvbm91c2x5XG4gICAgICAvLyBkaXNwYXRjaCBvdXIgZmFrZSBldmVudCB1c2luZyBgZGlzcGF0Y2hFdmVudGAuIEluc2lkZSB0aGUgaGFuZGxlciwgd2VcbiAgICAgIC8vIGNhbGwgdGhlIHVzZXItcHJvdmlkZWQgY2FsbGJhY2suXG4gICAgICB2YXIgZnVuY0FyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDMpO1xuICAgICAgZnVuY3Rpb24gY2FsbENhbGxiYWNrKCkge1xuICAgICAgICAvLyBXZSBpbW1lZGlhdGVseSByZW1vdmUgdGhlIGNhbGxiYWNrIGZyb20gZXZlbnQgbGlzdGVuZXJzIHNvIHRoYXRcbiAgICAgICAgLy8gbmVzdGVkIGBpbnZva2VHdWFyZGVkQ2FsbGJhY2tgIGNhbGxzIGRvIG5vdCBjbGFzaC4gT3RoZXJ3aXNlLCBhXG4gICAgICAgIC8vIG5lc3RlZCBjYWxsIHdvdWxkIHRyaWdnZXIgdGhlIGZha2UgZXZlbnQgaGFuZGxlcnMgb2YgYW55IGNhbGwgaGlnaGVyXG4gICAgICAgIC8vIGluIHRoZSBzdGFjay5cbiAgICAgICAgZmFrZU5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBjYWxsQ2FsbGJhY2ssIGZhbHNlKTtcblxuICAgICAgICAvLyBXZSBjaGVjayBmb3Igd2luZG93Lmhhc093blByb3BlcnR5KCdldmVudCcpIHRvIHByZXZlbnQgdGhlXG4gICAgICAgIC8vIHdpbmRvdy5ldmVudCBhc3NpZ25tZW50IGluIGJvdGggSUUgPD0gMTAgYXMgdGhleSB0aHJvdyBhbiBlcnJvclxuICAgICAgICAvLyBcIk1lbWJlciBub3QgZm91bmRcIiBpbiBzdHJpY3QgbW9kZSwgYW5kIGluIEZpcmVmb3ggd2hpY2ggZG9lcyBub3RcbiAgICAgICAgLy8gc3VwcG9ydCB3aW5kb3cuZXZlbnQuXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93LmV2ZW50ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuaGFzT3duUHJvcGVydHkoJ2V2ZW50JykpIHtcbiAgICAgICAgICB3aW5kb3cuZXZlbnQgPSB3aW5kb3dFdmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgZnVuY0FyZ3MpO1xuICAgICAgICBkaWRFcnJvciA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgYSBnbG9iYWwgZXJyb3IgZXZlbnQgaGFuZGxlci4gV2UgdXNlIHRoaXMgdG8gY2FwdHVyZSB0aGUgdmFsdWVcbiAgICAgIC8vIHRoYXQgd2FzIHRocm93bi4gSXQncyBwb3NzaWJsZSB0aGF0IHRoaXMgZXJyb3IgaGFuZGxlciB3aWxsIGZpcmUgbW9yZVxuICAgICAgLy8gdGhhbiBvbmNlOyBmb3IgZXhhbXBsZSwgaWYgbm9uLVJlYWN0IGNvZGUgYWxzbyBjYWxscyBgZGlzcGF0Y2hFdmVudGBcbiAgICAgIC8vIGFuZCBhIGhhbmRsZXIgZm9yIHRoYXQgZXZlbnQgdGhyb3dzLiBXZSBzaG91bGQgYmUgcmVzaWxpZW50IHRvIG1vc3Qgb2ZcbiAgICAgIC8vIHRob3NlIGNhc2VzLiBFdmVuIGlmIG91ciBlcnJvciBldmVudCBoYW5kbGVyIGZpcmVzIG1vcmUgdGhhbiBvbmNlLCB0aGVcbiAgICAgIC8vIGxhc3QgZXJyb3IgZXZlbnQgaXMgYWx3YXlzIHVzZWQuIElmIHRoZSBjYWxsYmFjayBhY3R1YWxseSBkb2VzIGVycm9yLFxuICAgICAgLy8gd2Uga25vdyB0aGF0IHRoZSBsYXN0IGVycm9yIGV2ZW50IGlzIHRoZSBjb3JyZWN0IG9uZSwgYmVjYXVzZSBpdCdzIG5vdFxuICAgICAgLy8gcG9zc2libGUgZm9yIGFueXRoaW5nIGVsc2UgdG8gaGF2ZSBoYXBwZW5lZCBpbiBiZXR3ZWVuIG91ciBjYWxsYmFja1xuICAgICAgLy8gZXJyb3JpbmcgYW5kIHRoZSBjb2RlIHRoYXQgZm9sbG93cyB0aGUgYGRpc3BhdGNoRXZlbnRgIGNhbGwgYmVsb3cuIElmXG4gICAgICAvLyB0aGUgY2FsbGJhY2sgZG9lc24ndCBlcnJvciwgYnV0IHRoZSBlcnJvciBldmVudCB3YXMgZmlyZWQsIHdlIGtub3cgdG9cbiAgICAgIC8vIGlnbm9yZSBpdCBiZWNhdXNlIGBkaWRFcnJvcmAgd2lsbCBiZSBmYWxzZSwgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgICAgdmFyIGVycm9yID0gdm9pZCAwO1xuICAgICAgLy8gVXNlIHRoaXMgdG8gdHJhY2sgd2hldGhlciB0aGUgZXJyb3IgZXZlbnQgaXMgZXZlciBjYWxsZWQuXG4gICAgICB2YXIgZGlkU2V0RXJyb3IgPSBmYWxzZTtcbiAgICAgIHZhciBpc0Nyb3NzT3JpZ2luRXJyb3IgPSBmYWxzZTtcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlV2luZG93RXJyb3IoZXZlbnQpIHtcbiAgICAgICAgZXJyb3IgPSBldmVudC5lcnJvcjtcbiAgICAgICAgZGlkU2V0RXJyb3IgPSB0cnVlO1xuICAgICAgICBpZiAoZXJyb3IgPT09IG51bGwgJiYgZXZlbnQuY29sbm8gPT09IDAgJiYgZXZlbnQubGluZW5vID09PSAwKSB7XG4gICAgICAgICAgaXNDcm9zc09yaWdpbkVycm9yID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgIC8vIFNvbWUgb3RoZXIgZXJyb3IgaGFuZGxlciBoYXMgcHJldmVudGVkIGRlZmF1bHQuXG4gICAgICAgICAgLy8gQnJvd3NlcnMgc2lsZW5jZSB0aGUgZXJyb3IgcmVwb3J0IGlmIHRoaXMgaGFwcGVucy5cbiAgICAgICAgICAvLyBXZSdsbCByZW1lbWJlciB0aGlzIHRvIGxhdGVyIGRlY2lkZSB3aGV0aGVyIHRvIGxvZyBpdCBvciBub3QuXG4gICAgICAgICAgaWYgKGVycm9yICE9IG51bGwgJiYgdHlwZW9mIGVycm9yID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZXJyb3IuX3N1cHByZXNzTG9nZ2luZyA9IHRydWU7XG4gICAgICAgICAgICB9IGNhdGNoIChpbm5lcikge1xuICAgICAgICAgICAgICAvLyBJZ25vcmUuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZSBhIGZha2UgZXZlbnQgdHlwZS5cbiAgICAgIHZhciBldnRUeXBlID0gJ3JlYWN0LScgKyAobmFtZSA/IG5hbWUgOiAnaW52b2tlZ3VhcmRlZGNhbGxiYWNrJyk7XG5cbiAgICAgIC8vIEF0dGFjaCBvdXIgZXZlbnQgaGFuZGxlcnNcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGhhbmRsZVdpbmRvd0Vycm9yKTtcbiAgICAgIGZha2VOb2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgY2FsbENhbGxiYWNrLCBmYWxzZSk7XG5cbiAgICAgIC8vIFN5bmNocm9ub3VzbHkgZGlzcGF0Y2ggb3VyIGZha2UgZXZlbnQuIElmIHRoZSB1c2VyLXByb3ZpZGVkIGZ1bmN0aW9uXG4gICAgICAvLyBlcnJvcnMsIGl0IHdpbGwgdHJpZ2dlciBvdXIgZ2xvYmFsIGVycm9yIGhhbmRsZXIuXG4gICAgICBldnQuaW5pdEV2ZW50KGV2dFR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gICAgICBmYWtlTm9kZS5kaXNwYXRjaEV2ZW50KGV2dCk7XG5cbiAgICAgIGlmICh3aW5kb3dFdmVudERlc2NyaXB0b3IpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2V2ZW50Jywgd2luZG93RXZlbnREZXNjcmlwdG9yKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpZEVycm9yKSB7XG4gICAgICAgIGlmICghZGlkU2V0RXJyb3IpIHtcbiAgICAgICAgICAvLyBUaGUgY2FsbGJhY2sgZXJyb3JlZCwgYnV0IHRoZSBlcnJvciBldmVudCBuZXZlciBmaXJlZC5cbiAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcignQW4gZXJyb3Igd2FzIHRocm93biBpbnNpZGUgb25lIG9mIHlvdXIgY29tcG9uZW50cywgYnV0IFJlYWN0ICcgKyBcImRvZXNuJ3Qga25vdyB3aGF0IGl0IHdhcy4gVGhpcyBpcyBsaWtlbHkgZHVlIHRvIGJyb3dzZXIgXCIgKyAnZmxha2luZXNzLiBSZWFjdCBkb2VzIGl0cyBiZXN0IHRvIHByZXNlcnZlIHRoZSBcIlBhdXNlIG9uICcgKyAnZXhjZXB0aW9uc1wiIGJlaGF2aW9yIG9mIHRoZSBEZXZUb29scywgd2hpY2ggcmVxdWlyZXMgc29tZSAnICsgXCJERVYtbW9kZSBvbmx5IHRyaWNrcy4gSXQncyBwb3NzaWJsZSB0aGF0IHRoZXNlIGRvbid0IHdvcmsgaW4gXCIgKyAneW91ciBicm93c2VyLiBUcnkgdHJpZ2dlcmluZyB0aGUgZXJyb3IgaW4gcHJvZHVjdGlvbiBtb2RlLCAnICsgJ29yIHN3aXRjaGluZyB0byBhIG1vZGVybiBicm93c2VyLiBJZiB5b3Ugc3VzcGVjdCB0aGF0IHRoaXMgaXMgJyArICdhY3R1YWxseSBhbiBpc3N1ZSB3aXRoIFJlYWN0LCBwbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Nyb3NzT3JpZ2luRXJyb3IpIHtcbiAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihcIkEgY3Jvc3Mtb3JpZ2luIGVycm9yIHdhcyB0aHJvd24uIFJlYWN0IGRvZXNuJ3QgaGF2ZSBhY2Nlc3MgdG8gXCIgKyAndGhlIGFjdHVhbCBlcnJvciBvYmplY3QgaW4gZGV2ZWxvcG1lbnQuICcgKyAnU2VlIGh0dHBzOi8vZmIubWUvcmVhY3QtY3Jvc3NvcmlnaW4tZXJyb3IgZm9yIG1vcmUgaW5mb3JtYXRpb24uJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbkVycm9yKGVycm9yKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIG91ciBldmVudCBsaXN0ZW5lcnNcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGhhbmRsZVdpbmRvd0Vycm9yKTtcbiAgICB9O1xuXG4gICAgaW52b2tlR3VhcmRlZENhbGxiYWNrSW1wbCA9IGludm9rZUd1YXJkZWRDYWxsYmFja0RldjtcbiAgfVxufVxuXG52YXIgaW52b2tlR3VhcmRlZENhbGxiYWNrSW1wbCQxID0gaW52b2tlR3VhcmRlZENhbGxiYWNrSW1wbDtcblxuLy8gVXNlZCBieSBGaWJlciB0byBzaW11bGF0ZSBhIHRyeS1jYXRjaC5cbnZhciBoYXNFcnJvciA9IGZhbHNlO1xudmFyIGNhdWdodEVycm9yID0gbnVsbDtcblxuLy8gVXNlZCBieSBldmVudCBzeXN0ZW0gdG8gY2FwdHVyZS9yZXRocm93IHRoZSBmaXJzdCBlcnJvci5cbnZhciBoYXNSZXRocm93RXJyb3IgPSBmYWxzZTtcbnZhciByZXRocm93RXJyb3IgPSBudWxsO1xuXG52YXIgcmVwb3J0ZXIgPSB7XG4gIG9uRXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICBjYXVnaHRFcnJvciA9IGVycm9yO1xuICB9XG59O1xuXG4vKipcbiAqIENhbGwgYSBmdW5jdGlvbiB3aGlsZSBndWFyZGluZyBhZ2FpbnN0IGVycm9ycyB0aGF0IGhhcHBlbnMgd2l0aGluIGl0LlxuICogUmV0dXJucyBhbiBlcnJvciBpZiBpdCB0aHJvd3MsIG90aGVyd2lzZSBudWxsLlxuICpcbiAqIEluIHByb2R1Y3Rpb24sIHRoaXMgaXMgaW1wbGVtZW50ZWQgdXNpbmcgYSB0cnktY2F0Y2guIFRoZSByZWFzb24gd2UgZG9uJ3RcbiAqIHVzZSBhIHRyeS1jYXRjaCBkaXJlY3RseSBpcyBzbyB0aGF0IHdlIGNhbiBzd2FwIG91dCBhIGRpZmZlcmVudFxuICogaW1wbGVtZW50YXRpb24gaW4gREVWIG1vZGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgdGhlIGd1YXJkIHRvIHVzZSBmb3IgbG9nZ2luZyBvciBkZWJ1Z2dpbmdcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZVxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIHVzZSB3aGVuIGNhbGxpbmcgdGhlIGZ1bmN0aW9uXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgQXJndW1lbnRzIGZvciBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBpbnZva2VHdWFyZGVkQ2FsbGJhY2sobmFtZSwgZnVuYywgY29udGV4dCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBoYXNFcnJvciA9IGZhbHNlO1xuICBjYXVnaHRFcnJvciA9IG51bGw7XG4gIGludm9rZUd1YXJkZWRDYWxsYmFja0ltcGwkMS5hcHBseShyZXBvcnRlciwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYW1lIGFzIGludm9rZUd1YXJkZWRDYWxsYmFjaywgYnV0IGluc3RlYWQgb2YgcmV0dXJuaW5nIGFuIGVycm9yLCBpdCBzdG9yZXNcbiAqIGl0IGluIGEgZ2xvYmFsIHNvIGl0IGNhbiBiZSByZXRocm93biBieSBgcmV0aHJvd0NhdWdodEVycm9yYCBsYXRlci5cbiAqIFRPRE86IFNlZSBpZiBjYXVnaHRFcnJvciBhbmQgcmV0aHJvd0Vycm9yIGNhbiBiZSB1bmlmaWVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIHRoZSBndWFyZCB0byB1c2UgZm9yIGxvZ2dpbmcgb3IgZGVidWdnaW5nXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2VcbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBUaGUgY29udGV4dCB0byB1c2Ugd2hlbiBjYWxsaW5nIHRoZSBmdW5jdGlvblxuICogQHBhcmFtIHsuLi4qfSBhcmdzIEFyZ3VtZW50cyBmb3IgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yKG5hbWUsIGZ1bmMsIGNvbnRleHQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIGlmIChoYXNFcnJvcikge1xuICAgIHZhciBlcnJvciA9IGNsZWFyQ2F1Z2h0RXJyb3IoKTtcbiAgICBpZiAoIWhhc1JldGhyb3dFcnJvcikge1xuICAgICAgaGFzUmV0aHJvd0Vycm9yID0gdHJ1ZTtcbiAgICAgIHJldGhyb3dFcnJvciA9IGVycm9yO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIER1cmluZyBleGVjdXRpb24gb2YgZ3VhcmRlZCBmdW5jdGlvbnMgd2Ugd2lsbCBjYXB0dXJlIHRoZSBmaXJzdCBlcnJvciB3aGljaFxuICogd2Ugd2lsbCByZXRocm93IHRvIGJlIGhhbmRsZWQgYnkgdGhlIHRvcCBsZXZlbCBlcnJvciBoYW5kbGVyLlxuICovXG5mdW5jdGlvbiByZXRocm93Q2F1Z2h0RXJyb3IoKSB7XG4gIGlmIChoYXNSZXRocm93RXJyb3IpIHtcbiAgICB2YXIgZXJyb3IgPSByZXRocm93RXJyb3I7XG4gICAgaGFzUmV0aHJvd0Vycm9yID0gZmFsc2U7XG4gICAgcmV0aHJvd0Vycm9yID0gbnVsbDtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNDYXVnaHRFcnJvcigpIHtcbiAgcmV0dXJuIGhhc0Vycm9yO1xufVxuXG5mdW5jdGlvbiBjbGVhckNhdWdodEVycm9yKCkge1xuICBpZiAoaGFzRXJyb3IpIHtcbiAgICB2YXIgZXJyb3IgPSBjYXVnaHRFcnJvcjtcbiAgICBoYXNFcnJvciA9IGZhbHNlO1xuICAgIGNhdWdodEVycm9yID0gbnVsbDtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH0gZWxzZSB7XG4gICAgaW52YXJpYW50KGZhbHNlLCAnY2xlYXJDYXVnaHRFcnJvciB3YXMgY2FsbGVkIGJ1dCBubyBlcnJvciB3YXMgY2FwdHVyZWQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmplY3RhYmxlIG9yZGVyaW5nIG9mIGV2ZW50IHBsdWdpbnMuXG4gKi9cbnZhciBldmVudFBsdWdpbk9yZGVyID0gbnVsbDtcblxuLyoqXG4gKiBJbmplY3RhYmxlIG1hcHBpbmcgZnJvbSBuYW1lcyB0byBldmVudCBwbHVnaW4gbW9kdWxlcy5cbiAqL1xudmFyIG5hbWVzVG9QbHVnaW5zID0ge307XG5cbi8qKlxuICogUmVjb21wdXRlcyB0aGUgcGx1Z2luIGxpc3QgdXNpbmcgdGhlIGluamVjdGVkIHBsdWdpbnMgYW5kIHBsdWdpbiBvcmRlcmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpIHtcbiAgaWYgKCFldmVudFBsdWdpbk9yZGVyKSB7XG4gICAgLy8gV2FpdCB1bnRpbCBhbiBgZXZlbnRQbHVnaW5PcmRlcmAgaXMgaW5qZWN0ZWQuXG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gbmFtZXNUb1BsdWdpbnMpIHtcbiAgICB2YXIgcGx1Z2luTW9kdWxlID0gbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgdmFyIHBsdWdpbkluZGV4ID0gZXZlbnRQbHVnaW5PcmRlci5pbmRleE9mKHBsdWdpbk5hbWUpO1xuICAgICEocGx1Z2luSW5kZXggPiAtMSkgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbnMgdGhhdCBkbyBub3QgZXhpc3QgaW4gdGhlIHBsdWdpbiBvcmRlcmluZywgYCVzYC4nLCBwbHVnaW5OYW1lKSA6IHZvaWQgMDtcbiAgICBpZiAocGx1Z2luc1twbHVnaW5JbmRleF0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICAhcGx1Z2luTW9kdWxlLmV4dHJhY3RFdmVudHMgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBFdmVudCBwbHVnaW5zIG11c3QgaW1wbGVtZW50IGFuIGBleHRyYWN0RXZlbnRzYCBtZXRob2QsIGJ1dCBgJXNgIGRvZXMgbm90LicsIHBsdWdpbk5hbWUpIDogdm9pZCAwO1xuICAgIHBsdWdpbnNbcGx1Z2luSW5kZXhdID0gcGx1Z2luTW9kdWxlO1xuICAgIHZhciBwdWJsaXNoZWRFdmVudHMgPSBwbHVnaW5Nb2R1bGUuZXZlbnRUeXBlcztcbiAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gcHVibGlzaGVkRXZlbnRzKSB7XG4gICAgICAhcHVibGlzaEV2ZW50Rm9yUGx1Z2luKHB1Ymxpc2hlZEV2ZW50c1tldmVudE5hbWVdLCBwbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBGYWlsZWQgdG8gcHVibGlzaCBldmVudCBgJXNgIGZvciBwbHVnaW4gYCVzYC4nLCBldmVudE5hbWUsIHBsdWdpbk5hbWUpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFB1Ymxpc2hlcyBhbiBldmVudCBzbyB0aGF0IGl0IGNhbiBiZSBkaXNwYXRjaGVkIGJ5IHRoZSBzdXBwbGllZCBwbHVnaW4uXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIERpc3BhdGNoIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBQbHVnaW5Nb2R1bGUgUGx1Z2luIHB1Ymxpc2hpbmcgdGhlIGV2ZW50LlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgd2FzIHN1Y2Nlc3NmdWxseSBwdWJsaXNoZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwdWJsaXNoRXZlbnRGb3JQbHVnaW4oZGlzcGF0Y2hDb25maWcsIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSB7XG4gICEhZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgZXZlbnQgbmFtZSwgYCVzYC4nLCBldmVudE5hbWUpIDogdm9pZCAwO1xuICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3NbZXZlbnROYW1lXSA9IGRpc3BhdGNoQ29uZmlnO1xuXG4gIHZhciBwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyA9IGRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO1xuICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICBmb3IgKHZhciBwaGFzZU5hbWUgaW4gcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICAgIGlmIChwaGFzZWRSZWdpc3RyYXRpb25OYW1lcy5oYXNPd25Qcm9wZXJ0eShwaGFzZU5hbWUpKSB7XG4gICAgICAgIHZhciBwaGFzZWRSZWdpc3RyYXRpb25OYW1lID0gcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcGhhc2VOYW1lXTtcbiAgICAgICAgcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUocGhhc2VkUmVnaXN0cmF0aW9uTmFtZSwgcGx1Z2luTW9kdWxlLCBldmVudE5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSwgcGx1Z2luTW9kdWxlLCBldmVudE5hbWUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBQdWJsaXNoZXMgYSByZWdpc3RyYXRpb24gbmFtZSB0aGF0IGlzIHVzZWQgdG8gaWRlbnRpZnkgZGlzcGF0Y2hlZCBldmVudHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgUmVnaXN0cmF0aW9uIG5hbWUgdG8gYWRkLlxuICogQHBhcmFtIHtvYmplY3R9IFBsdWdpbk1vZHVsZSBQbHVnaW4gcHVibGlzaGluZyB0aGUgZXZlbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwdWJsaXNoUmVnaXN0cmF0aW9uTmFtZShyZWdpc3RyYXRpb25OYW1lLCBwbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkge1xuICAhIXJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lIHJlZ2lzdHJhdGlvbiBuYW1lLCBgJXNgLicsIHJlZ2lzdHJhdGlvbk5hbWUpIDogdm9pZCAwO1xuICByZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSA9IHBsdWdpbk1vZHVsZTtcbiAgcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXSA9IHBsdWdpbk1vZHVsZS5ldmVudFR5cGVzW2V2ZW50TmFtZV0uZGVwZW5kZW5jaWVzO1xuXG4gIHtcbiAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSByZWdpc3RyYXRpb25OYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgcG9zc2libGVSZWdpc3RyYXRpb25OYW1lc1tsb3dlckNhc2VkTmFtZV0gPSByZWdpc3RyYXRpb25OYW1lO1xuXG4gICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgPT09ICdvbkRvdWJsZUNsaWNrJykge1xuICAgICAgcG9zc2libGVSZWdpc3RyYXRpb25OYW1lcy5vbmRibGNsaWNrID0gcmVnaXN0cmF0aW9uTmFtZTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgcGx1Z2lucyBzbyB0aGF0IHRoZXkgY2FuIGV4dHJhY3QgYW5kIGRpc3BhdGNoIGV2ZW50cy5cbiAqXG4gKiBAc2VlIHtFdmVudFBsdWdpbkh1Yn1cbiAqL1xuXG4vKipcbiAqIE9yZGVyZWQgbGlzdCBvZiBpbmplY3RlZCBwbHVnaW5zLlxuICovXG52YXIgcGx1Z2lucyA9IFtdO1xuXG4vKipcbiAqIE1hcHBpbmcgZnJvbSBldmVudCBuYW1lIHRvIGRpc3BhdGNoIGNvbmZpZ1xuICovXG52YXIgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzID0ge307XG5cbi8qKlxuICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIHBsdWdpbiBtb2R1bGVcbiAqL1xudmFyIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzID0ge307XG5cbi8qKlxuICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIGV2ZW50IG5hbWVcbiAqL1xudmFyIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMgPSB7fTtcblxuLyoqXG4gKiBNYXBwaW5nIGZyb20gbG93ZXJjYXNlIHJlZ2lzdHJhdGlvbiBuYW1lcyB0byB0aGUgcHJvcGVybHkgY2FzZWQgdmVyc2lvbixcbiAqIHVzZWQgdG8gd2FybiBpbiB0aGUgY2FzZSBvZiBtaXNzaW5nIGV2ZW50IGhhbmRsZXJzLiBBdmFpbGFibGVcbiAqIG9ubHkgaW4gdHJ1ZS5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzID0ge307XG4vLyBUcnVzdCB0aGUgZGV2ZWxvcGVyIHRvIG9ubHkgdXNlIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMgaW4gdHJ1ZVxuXG4vKipcbiAqIEluamVjdHMgYW4gb3JkZXJpbmcgb2YgcGx1Z2lucyAoYnkgcGx1Z2luIG5hbWUpLiBUaGlzIGFsbG93cyB0aGUgb3JkZXJpbmdcbiAqIHRvIGJlIGRlY291cGxlZCBmcm9tIGluamVjdGlvbiBvZiB0aGUgYWN0dWFsIHBsdWdpbnMgc28gdGhhdCBvcmRlcmluZyBpc1xuICogYWx3YXlzIGRldGVybWluaXN0aWMgcmVnYXJkbGVzcyBvZiBwYWNrYWdpbmcsIG9uLXRoZS1mbHkgaW5qZWN0aW9uLCBldGMuXG4gKlxuICogQHBhcmFtIHthcnJheX0gSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyXG4gKiBAaW50ZXJuYWxcbiAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbk9yZGVyfVxuICovXG5mdW5jdGlvbiBpbmplY3RFdmVudFBsdWdpbk9yZGVyKGluamVjdGVkRXZlbnRQbHVnaW5PcmRlcikge1xuICAhIWV2ZW50UGx1Z2luT3JkZXIgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbiBvcmRlcmluZyBtb3JlIHRoYW4gb25jZS4gWW91IGFyZSBsaWtlbHkgdHJ5aW5nIHRvIGxvYWQgbW9yZSB0aGFuIG9uZSBjb3B5IG9mIFJlYWN0LicpIDogdm9pZCAwO1xuICAvLyBDbG9uZSB0aGUgb3JkZXJpbmcgc28gaXQgY2Fubm90IGJlIGR5bmFtaWNhbGx5IG11dGF0ZWQuXG4gIGV2ZW50UGx1Z2luT3JkZXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChpbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIpO1xuICByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpO1xufVxuXG4vKipcbiAqIEluamVjdHMgcGx1Z2lucyB0byBiZSB1c2VkIGJ5IGBFdmVudFBsdWdpbkh1YmAuIFRoZSBwbHVnaW4gbmFtZXMgbXVzdCBiZVxuICogaW4gdGhlIG9yZGVyaW5nIGluamVjdGVkIGJ5IGBpbmplY3RFdmVudFBsdWdpbk9yZGVyYC5cbiAqXG4gKiBQbHVnaW5zIGNhbiBiZSBpbmplY3RlZCBhcyBwYXJ0IG9mIHBhZ2UgaW5pdGlhbGl6YXRpb24gb3Igb24tdGhlLWZseS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cbiAqIEBpbnRlcm5hbFxuICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZX1cbiAqL1xuZnVuY3Rpb24gaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKGluamVjdGVkTmFtZXNUb1BsdWdpbnMpIHtcbiAgdmFyIGlzT3JkZXJpbmdEaXJ0eSA9IGZhbHNlO1xuICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIGluamVjdGVkTmFtZXNUb1BsdWdpbnMpIHtcbiAgICBpZiAoIWluamVjdGVkTmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgcGx1Z2luTW9kdWxlID0gaW5qZWN0ZWROYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICBpZiAoIW5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpIHx8IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdICE9PSBwbHVnaW5Nb2R1bGUpIHtcbiAgICAgICEhbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0gPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IHR3byBkaWZmZXJlbnQgZXZlbnQgcGx1Z2lucyB1c2luZyB0aGUgc2FtZSBuYW1lLCBgJXNgLicsIHBsdWdpbk5hbWUpIDogdm9pZCAwO1xuICAgICAgbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0gPSBwbHVnaW5Nb2R1bGU7XG4gICAgICBpc09yZGVyaW5nRGlydHkgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNPcmRlcmluZ0RpcnR5KSB7XG4gICAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcbiAgfVxufVxuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZ1dpdGhvdXRTdGFjayA9IGZ1bmN0aW9uICgpIHt9O1xuXG57XG4gIHdhcm5pbmdXaXRob3V0U3RhY2sgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZ1dpdGhvdXRTdGFjayhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gOCkge1xuICAgICAgLy8gQ2hlY2sgYmVmb3JlIHRoZSBjb25kaXRpb24gdG8gY2F0Y2ggdmlvbGF0aW9ucyBlYXJseS5cbiAgICAgIHRocm93IG5ldyBFcnJvcignd2FybmluZ1dpdGhvdXRTdGFjaygpIGN1cnJlbnRseSBzdXBwb3J0cyBhdCBtb3N0IDggYXJndW1lbnRzLicpO1xuICAgIH1cbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBfYXJncyRtYXAgPSBhcmdzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gJycgKyBpdGVtO1xuICAgICAgfSksXG4gICAgICAgICAgYSA9IF9hcmdzJG1hcFswXSxcbiAgICAgICAgICBiID0gX2FyZ3MkbWFwWzFdLFxuICAgICAgICAgIGMgPSBfYXJncyRtYXBbMl0sXG4gICAgICAgICAgZCA9IF9hcmdzJG1hcFszXSxcbiAgICAgICAgICBlID0gX2FyZ3MkbWFwWzRdLFxuICAgICAgICAgIGYgPSBfYXJncyRtYXBbNV0sXG4gICAgICAgICAgZyA9IF9hcmdzJG1hcFs2XSxcbiAgICAgICAgICBoID0gX2FyZ3MkbWFwWzddO1xuXG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0O1xuXG4gICAgICAvLyBXZSBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBzcHJlYWQgKG9yIC5hcHBseSkgYmVjYXVzZSBpdCBicmVha3MgSUU5OlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMzYxMFxuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgYSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UsIGEsIGIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlLCBhLCBiLCBjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgYSwgYiwgYywgZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UsIGEsIGIsIGMsIGQsIGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlLCBhLCBiLCBjLCBkLCBlLCBmKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgYSwgYiwgYywgZCwgZSwgZiwgZyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UsIGEsIGIsIGMsIGQsIGUsIGYsIGcsIGgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignd2FybmluZ1dpdGhvdXRTdGFjaygpIGN1cnJlbnRseSBzdXBwb3J0cyBhdCBtb3N0IDggYXJndW1lbnRzLicpO1xuICAgICAgfVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgX21lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoX21lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG59XG5cbnZhciB3YXJuaW5nV2l0aG91dFN0YWNrJDEgPSB3YXJuaW5nV2l0aG91dFN0YWNrO1xuXG52YXIgZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSA9IG51bGw7XG52YXIgZ2V0SW5zdGFuY2VGcm9tTm9kZSA9IG51bGw7XG52YXIgZ2V0Tm9kZUZyb21JbnN0YW5jZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHNldENvbXBvbmVudFRyZWUoZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZUltcGwsIGdldEluc3RhbmNlRnJvbU5vZGVJbXBsLCBnZXROb2RlRnJvbUluc3RhbmNlSW1wbCkge1xuICBnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlID0gZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZUltcGw7XG4gIGdldEluc3RhbmNlRnJvbU5vZGUgPSBnZXRJbnN0YW5jZUZyb21Ob2RlSW1wbDtcbiAgZ2V0Tm9kZUZyb21JbnN0YW5jZSA9IGdldE5vZGVGcm9tSW5zdGFuY2VJbXBsO1xuICB7XG4gICAgIShnZXROb2RlRnJvbUluc3RhbmNlICYmIGdldEluc3RhbmNlRnJvbU5vZGUpID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnRXZlbnRQbHVnaW5VdGlscy5zZXRDb21wb25lbnRUcmVlKC4uLik6IEluamVjdGVkICcgKyAnbW9kdWxlIGlzIG1pc3NpbmcgZ2V0Tm9kZUZyb21JbnN0YW5jZSBvciBnZXRJbnN0YW5jZUZyb21Ob2RlLicpIDogdm9pZCAwO1xuICB9XG59XG5cbnZhciB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyA9IHZvaWQgMDtcbntcbiAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gICAgdmFyIGRpc3BhdGNoSW5zdGFuY2VzID0gZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzO1xuXG4gICAgdmFyIGxpc3RlbmVyc0lzQXJyID0gQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycyk7XG4gICAgdmFyIGxpc3RlbmVyc0xlbiA9IGxpc3RlbmVyc0lzQXJyID8gZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoIDogZGlzcGF0Y2hMaXN0ZW5lcnMgPyAxIDogMDtcblxuICAgIHZhciBpbnN0YW5jZXNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hJbnN0YW5jZXMpO1xuICAgIHZhciBpbnN0YW5jZXNMZW4gPSBpbnN0YW5jZXNJc0FyciA/IGRpc3BhdGNoSW5zdGFuY2VzLmxlbmd0aCA6IGRpc3BhdGNoSW5zdGFuY2VzID8gMSA6IDA7XG5cbiAgICAhKGluc3RhbmNlc0lzQXJyID09PSBsaXN0ZW5lcnNJc0FyciAmJiBpbnN0YW5jZXNMZW4gPT09IGxpc3RlbmVyc0xlbikgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdFdmVudFBsdWdpblV0aWxzOiBJbnZhbGlkIGBldmVudGAuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggdGhlIGV2ZW50IHRvIHRoZSBsaXN0ZW5lci5cbiAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50IFN5bnRoZXRpY0V2ZW50IHRvIGhhbmRsZVxuICogQHBhcmFtIHtib29sZWFufSBzaW11bGF0ZWQgSWYgdGhlIGV2ZW50IGlzIHNpbXVsYXRlZCAoY2hhbmdlcyBleG4gYmVoYXZpb3IpXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBBcHBsaWNhdGlvbi1sZXZlbCBjYWxsYmFja1xuICogQHBhcmFtIHsqfSBpbnN0IEludGVybmFsIGNvbXBvbmVudCBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIHNpbXVsYXRlZCwgbGlzdGVuZXIsIGluc3QpIHtcbiAgdmFyIHR5cGUgPSBldmVudC50eXBlIHx8ICd1bmtub3duLWV2ZW50JztcbiAgZXZlbnQuY3VycmVudFRhcmdldCA9IGdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCk7XG4gIGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcih0eXBlLCBsaXN0ZW5lciwgdW5kZWZpbmVkLCBldmVudCk7XG4gIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBudWxsO1xufVxuXG4vKipcbiAqIFN0YW5kYXJkL3NpbXBsZSBpdGVyYXRpb24gdGhyb3VnaCBhbiBldmVudCdzIGNvbGxlY3RlZCBkaXNwYXRjaGVzLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIHNpbXVsYXRlZCkge1xuICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaEluc3RhbmNlcyA9IGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcztcbiAge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycykpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIExpc3RlbmVycyBhbmQgSW5zdGFuY2VzIGFyZSB0d28gcGFyYWxsZWwgYXJyYXlzIHRoYXQgYXJlIGFsd2F5cyBpbiBzeW5jLlxuICAgICAgZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBzaW11bGF0ZWQsIGRpc3BhdGNoTGlzdGVuZXJzW2ldLCBkaXNwYXRjaEluc3RhbmNlc1tpXSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKSB7XG4gICAgZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBzaW11bGF0ZWQsIGRpc3BhdGNoTGlzdGVuZXJzLCBkaXNwYXRjaEluc3RhbmNlcyk7XG4gIH1cbiAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gbnVsbDtcbiAgZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzID0gbnVsbDtcbn1cblxuLyoqXG4gKiBAc2VlIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsXG4gKi9cblxuXG4vKipcbiAqIEV4ZWN1dGlvbiBvZiBhIFwiZGlyZWN0XCIgZGlzcGF0Y2ggLSB0aGVyZSBtdXN0IGJlIGF0IG1vc3Qgb25lIGRpc3BhdGNoXG4gKiBhY2N1bXVsYXRlZCBvbiB0aGUgZXZlbnQgb3IgaXQgaXMgY29uc2lkZXJlZCBhbiBlcnJvci4gSXQgZG9lc24ndCByZWFsbHkgbWFrZVxuICogc2Vuc2UgZm9yIGFuIGV2ZW50IHdpdGggbXVsdGlwbGUgZGlzcGF0Y2hlcyAoYnViYmxlZCkgdG8ga2VlcCB0cmFjayBvZiB0aGVcbiAqIHJldHVybiB2YWx1ZXMgYXQgZWFjaCBkaXNwYXRjaCBleGVjdXRpb24sIGJ1dCBpdCBkb2VzIHRlbmQgdG8gbWFrZSBzZW5zZSB3aGVuXG4gKiBkZWFsaW5nIHdpdGggXCJkaXJlY3RcIiBkaXNwYXRjaGVzLlxuICpcbiAqIEByZXR1cm4geyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgZXhlY3V0aW5nIHRoZSBzaW5nbGUgZGlzcGF0Y2guXG4gKi9cblxuXG4vKipcbiAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmZiBudW1iZXIgb2YgZGlzcGF0Y2hlcyBhY2N1bXVsYXRlZCBpcyBncmVhdGVyIHRoYW4gMC5cbiAqL1xuXG4vKipcbiAqIEFjY3VtdWxhdGVzIGl0ZW1zIHRoYXQgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQgaW50byB0aGUgZmlyc3Qgb25lLiBUaGlzXG4gKiBpcyB1c2VkIHRvIGNvbnNlcnZlIG1lbW9yeSBieSBhdm9pZGluZyBhcnJheSBhbGxvY2F0aW9ucywgYW5kIHRodXMgc2FjcmlmaWNlc1xuICogQVBJIGNsZWFubmVzcy4gU2luY2UgYGN1cnJlbnRgIGNhbiBiZSBudWxsIGJlZm9yZSBiZWluZyBwYXNzZWQgaW4gYW5kIG5vdFxuICogbnVsbCBhZnRlciB0aGlzIGZ1bmN0aW9uLCBtYWtlIHN1cmUgdG8gYXNzaWduIGl0IGJhY2sgdG8gYGN1cnJlbnRgOlxuICpcbiAqIGBhID0gYWNjdW11bGF0ZUludG8oYSwgYik7YFxuICpcbiAqIFRoaXMgQVBJIHNob3VsZCBiZSBzcGFyaW5nbHkgdXNlZC4gVHJ5IGBhY2N1bXVsYXRlYCBmb3Igc29tZXRoaW5nIGNsZWFuZXIuXG4gKlxuICogQHJldHVybiB7KnxhcnJheTwqPn0gQW4gYWNjdW11bGF0aW9uIG9mIGl0ZW1zLlxuICovXG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVJbnRvKGN1cnJlbnQsIG5leHQpIHtcbiAgIShuZXh0ICE9IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnYWNjdW11bGF0ZUludG8oLi4uKTogQWNjdW11bGF0ZWQgaXRlbXMgbXVzdCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuJykgOiB2b2lkIDA7XG5cbiAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBuZXh0O1xuICB9XG5cbiAgLy8gQm90aCBhcmUgbm90IGVtcHR5LiBXYXJuaW5nOiBOZXZlciBjYWxsIHguY29uY2F0KHkpIHdoZW4geW91IGFyZSBub3RcbiAgLy8gY2VydGFpbiB0aGF0IHggaXMgYW4gQXJyYXkgKHggY291bGQgYmUgYSBzdHJpbmcgd2l0aCBjb25jYXQgbWV0aG9kKS5cbiAgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudCkpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShuZXh0KSkge1xuICAgICAgY3VycmVudC5wdXNoLmFwcGx5KGN1cnJlbnQsIG5leHQpO1xuICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfVxuICAgIGN1cnJlbnQucHVzaChuZXh0KTtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KG5leHQpKSB7XG4gICAgLy8gQSBiaXQgdG9vIGRhbmdlcm91cyB0byBtdXRhdGUgYG5leHRgLlxuICAgIHJldHVybiBbY3VycmVudF0uY29uY2F0KG5leHQpO1xuICB9XG5cbiAgcmV0dXJuIFtjdXJyZW50LCBuZXh0XTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FycmF5fSBhcnIgYW4gXCJhY2N1bXVsYXRpb25cIiBvZiBpdGVtcyB3aGljaCBpcyBlaXRoZXIgYW4gQXJyYXkgb3JcbiAqIGEgc2luZ2xlIGl0ZW0uIFVzZWZ1bCB3aGVuIHBhaXJlZCB3aXRoIHRoZSBgYWNjdW11bGF0ZWAgbW9kdWxlLiBUaGlzIGlzIGFcbiAqIHNpbXBsZSB1dGlsaXR5IHRoYXQgYWxsb3dzIHVzIHRvIHJlYXNvbiBhYm91dCBhIGNvbGxlY3Rpb24gb2YgaXRlbXMsIGJ1dFxuICogaGFuZGxpbmcgdGhlIGNhc2Ugd2hlbiB0aGVyZSBpcyBleGFjdGx5IG9uZSBpdGVtIChhbmQgd2UgZG8gbm90IG5lZWQgdG9cbiAqIGFsbG9jYXRlIGFuIGFycmF5KS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIENhbGxiYWNrIGludm9rZWQgd2l0aCBlYWNoIGVsZW1lbnQgb3IgYSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIHs/fSBbc2NvcGVdIFNjb3BlIHVzZWQgYXMgYHRoaXNgIGluIGEgY2FsbGJhY2suXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hBY2N1bXVsYXRlZChhcnIsIGNiLCBzY29wZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgYXJyLmZvckVhY2goY2IsIHNjb3BlKTtcbiAgfSBlbHNlIGlmIChhcnIpIHtcbiAgICBjYi5jYWxsKHNjb3BlLCBhcnIpO1xuICB9XG59XG5cbi8qKlxuICogSW50ZXJuYWwgcXVldWUgb2YgZXZlbnRzIHRoYXQgaGF2ZSBhY2N1bXVsYXRlZCB0aGVpciBkaXNwYXRjaGVzIGFuZCBhcmVcbiAqIHdhaXRpbmcgdG8gaGF2ZSB0aGVpciBkaXNwYXRjaGVzIGV4ZWN1dGVkLlxuICovXG52YXIgZXZlbnRRdWV1ZSA9IG51bGw7XG5cbi8qKlxuICogRGlzcGF0Y2hlcyBhbiBldmVudCBhbmQgcmVsZWFzZXMgaXQgYmFjayBpbnRvIHRoZSBwb29sLCB1bmxlc3MgcGVyc2lzdGVudC5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IGV2ZW50IFN5bnRoZXRpYyBldmVudCB0byBiZSBkaXNwYXRjaGVkLlxuICogQHBhcmFtIHtib29sZWFufSBzaW11bGF0ZWQgSWYgdGhlIGV2ZW50IGlzIHNpbXVsYXRlZCAoY2hhbmdlcyBleG4gYmVoYXZpb3IpXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlID0gZnVuY3Rpb24gKGV2ZW50LCBzaW11bGF0ZWQpIHtcbiAgaWYgKGV2ZW50KSB7XG4gICAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGV2ZW50LCBzaW11bGF0ZWQpO1xuXG4gICAgaWYgKCFldmVudC5pc1BlcnNpc3RlbnQoKSkge1xuICAgICAgZXZlbnQuY29uc3RydWN0b3IucmVsZWFzZShldmVudCk7XG4gICAgfVxuICB9XG59O1xudmFyIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVNpbXVsYXRlZCA9IGZ1bmN0aW9uIChlKSB7XG4gIHJldHVybiBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UoZSwgdHJ1ZSk7XG59O1xudmFyIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVRvcExldmVsID0gZnVuY3Rpb24gKGUpIHtcbiAgcmV0dXJuIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZShlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiBpc0ludGVyYWN0aXZlKHRhZykge1xuICByZXR1cm4gdGFnID09PSAnYnV0dG9uJyB8fCB0YWcgPT09ICdpbnB1dCcgfHwgdGFnID09PSAnc2VsZWN0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYSc7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFByZXZlbnRNb3VzZUV2ZW50KG5hbWUsIHR5cGUsIHByb3BzKSB7XG4gIHN3aXRjaCAobmFtZSkge1xuICAgIGNhc2UgJ29uQ2xpY2snOlxuICAgIGNhc2UgJ29uQ2xpY2tDYXB0dXJlJzpcbiAgICBjYXNlICdvbkRvdWJsZUNsaWNrJzpcbiAgICBjYXNlICdvbkRvdWJsZUNsaWNrQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Nb3VzZURvd24nOlxuICAgIGNhc2UgJ29uTW91c2VEb3duQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Nb3VzZU1vdmUnOlxuICAgIGNhc2UgJ29uTW91c2VNb3ZlQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Nb3VzZVVwJzpcbiAgICBjYXNlICdvbk1vdXNlVXBDYXB0dXJlJzpcbiAgICAgIHJldHVybiAhIShwcm9wcy5kaXNhYmxlZCAmJiBpc0ludGVyYWN0aXZlKHR5cGUpKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyBhIHVuaWZpZWQgaW50ZXJmYWNlIGZvciBldmVudCBwbHVnaW5zIHRvIGJlIGluc3RhbGxlZCBhbmQgY29uZmlndXJlZC5cbiAqXG4gKiBFdmVudCBwbHVnaW5zIGNhbiBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgYGV4dHJhY3RFdmVudHNgIHtmdW5jdGlvbihzdHJpbmcsIERPTUV2ZW50VGFyZ2V0LCBzdHJpbmcsIG9iamVjdCk6ICp9XG4gKiAgICAgUmVxdWlyZWQuIFdoZW4gYSB0b3AtbGV2ZWwgZXZlbnQgaXMgZmlyZWQsIHRoaXMgbWV0aG9kIGlzIGV4cGVjdGVkIHRvXG4gKiAgICAgZXh0cmFjdCBzeW50aGV0aWMgZXZlbnRzIHRoYXQgd2lsbCBpbiB0dXJuIGJlIHF1ZXVlZCBhbmQgZGlzcGF0Y2hlZC5cbiAqXG4gKiAgIGBldmVudFR5cGVzYCB7b2JqZWN0fVxuICogICAgIE9wdGlvbmFsLCBwbHVnaW5zIHRoYXQgZmlyZSBldmVudHMgbXVzdCBwdWJsaXNoIGEgbWFwcGluZyBvZiByZWdpc3RyYXRpb25cbiAqICAgICBuYW1lcyB0aGF0IGFyZSB1c2VkIHRvIHJlZ2lzdGVyIGxpc3RlbmVycy4gVmFsdWVzIG9mIHRoaXMgbWFwcGluZyBtdXN0XG4gKiAgICAgYmUgb2JqZWN0cyB0aGF0IGNvbnRhaW4gYHJlZ2lzdHJhdGlvbk5hbWVgIG9yIGBwaGFzZWRSZWdpc3RyYXRpb25OYW1lc2AuXG4gKlxuICogICBgZXhlY3V0ZURpc3BhdGNoYCB7ZnVuY3Rpb24ob2JqZWN0LCBmdW5jdGlvbiwgc3RyaW5nKX1cbiAqICAgICBPcHRpb25hbCwgYWxsb3dzIHBsdWdpbnMgdG8gb3ZlcnJpZGUgaG93IGFuIGV2ZW50IGdldHMgZGlzcGF0Y2hlZC4gQnlcbiAqICAgICBkZWZhdWx0LCB0aGUgbGlzdGVuZXIgaXMgc2ltcGx5IGludm9rZWQuXG4gKlxuICogRWFjaCBwbHVnaW4gdGhhdCBpcyBpbmplY3RlZCBpbnRvIGBFdmVudHNQbHVnaW5IdWJgIGlzIGltbWVkaWF0ZWx5IG9wZXJhYmxlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuXG4vKipcbiAqIE1ldGhvZHMgZm9yIGluamVjdGluZyBkZXBlbmRlbmNpZXMuXG4gKi9cbnZhciBpbmplY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2FycmF5fSBJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXJcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjogaW5qZWN0RXZlbnRQbHVnaW5PcmRlcixcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGluamVjdGVkTmFtZXNUb1BsdWdpbnMgTWFwIGZyb20gbmFtZXMgdG8gcGx1Z2luIG1vZHVsZXMuXG4gICAqL1xuICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gaW5zdCBUaGUgaW5zdGFuY2UsIHdoaWNoIGlzIHRoZSBzb3VyY2Ugb2YgZXZlbnRzLlxuICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICogQHJldHVybiB7P2Z1bmN0aW9ufSBUaGUgc3RvcmVkIGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiBnZXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKSB7XG4gIHZhciBsaXN0ZW5lciA9IHZvaWQgMDtcblxuICAvLyBUT0RPOiBzaG91bGRQcmV2ZW50TW91c2VFdmVudCBpcyBET00tc3BlY2lmaWMgYW5kIGRlZmluaXRlbHkgc2hvdWxkIG5vdFxuICAvLyBsaXZlIGhlcmU7IG5lZWRzIHRvIGJlIG1vdmVkIHRvIGEgYmV0dGVyIHBsYWNlIHNvb25cbiAgdmFyIHN0YXRlTm9kZSA9IGluc3Quc3RhdGVOb2RlO1xuICBpZiAoIXN0YXRlTm9kZSkge1xuICAgIC8vIFdvcmsgaW4gcHJvZ3Jlc3MgKGV4OiBvbmxvYWQgZXZlbnRzIGluIGluY3JlbWVudGFsIG1vZGUpLlxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBwcm9wcyA9IGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUoc3RhdGVOb2RlKTtcbiAgaWYgKCFwcm9wcykge1xuICAgIC8vIFdvcmsgaW4gcHJvZ3Jlc3MuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgbGlzdGVuZXIgPSBwcm9wc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgaWYgKHNob3VsZFByZXZlbnRNb3VzZUV2ZW50KHJlZ2lzdHJhdGlvbk5hbWUsIGluc3QudHlwZSwgcHJvcHMpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgISghbGlzdGVuZXIgfHwgdHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIGAlc2AgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbiwgaW5zdGVhZCBnb3QgYSB2YWx1ZSBvZiBgJXNgIHR5cGUuJywgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGxpc3RlbmVyO1xufVxuXG4vKipcbiAqIEFsbG93cyByZWdpc3RlcmVkIHBsdWdpbnMgYW4gb3Bwb3J0dW5pdHkgdG8gZXh0cmFjdCBldmVudHMgZnJvbSB0b3AtbGV2ZWxcbiAqIG5hdGl2ZSBicm93c2VyIGV2ZW50cy5cbiAqXG4gKiBAcmV0dXJuIHsqfSBBbiBhY2N1bXVsYXRpb24gb2Ygc3ludGhldGljIGV2ZW50cy5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBleHRyYWN0RXZlbnRzKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBldmVudHMgPSBudWxsO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBOb3QgZXZlcnkgcGx1Z2luIGluIHRoZSBvcmRlcmluZyBtYXkgYmUgbG9hZGVkIGF0IHJ1bnRpbWUuXG4gICAgdmFyIHBvc3NpYmxlUGx1Z2luID0gcGx1Z2luc1tpXTtcbiAgICBpZiAocG9zc2libGVQbHVnaW4pIHtcbiAgICAgIHZhciBleHRyYWN0ZWRFdmVudHMgPSBwb3NzaWJsZVBsdWdpbi5leHRyYWN0RXZlbnRzKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgIGlmIChleHRyYWN0ZWRFdmVudHMpIHtcbiAgICAgICAgZXZlbnRzID0gYWNjdW11bGF0ZUludG8oZXZlbnRzLCBleHRyYWN0ZWRFdmVudHMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZXZlbnRzO1xufVxuXG5mdW5jdGlvbiBydW5FdmVudHNJbkJhdGNoKGV2ZW50cywgc2ltdWxhdGVkKSB7XG4gIGlmIChldmVudHMgIT09IG51bGwpIHtcbiAgICBldmVudFF1ZXVlID0gYWNjdW11bGF0ZUludG8oZXZlbnRRdWV1ZSwgZXZlbnRzKTtcbiAgfVxuXG4gIC8vIFNldCBgZXZlbnRRdWV1ZWAgdG8gbnVsbCBiZWZvcmUgcHJvY2Vzc2luZyBpdCBzbyB0aGF0IHdlIGNhbiB0ZWxsIGlmIG1vcmVcbiAgLy8gZXZlbnRzIGdldCBlbnF1ZXVlZCB3aGlsZSBwcm9jZXNzaW5nLlxuICB2YXIgcHJvY2Vzc2luZ0V2ZW50UXVldWUgPSBldmVudFF1ZXVlO1xuICBldmVudFF1ZXVlID0gbnVsbDtcblxuICBpZiAoIXByb2Nlc3NpbmdFdmVudFF1ZXVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbXVsYXRlZCkge1xuICAgIGZvckVhY2hBY2N1bXVsYXRlZChwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlU2ltdWxhdGVkKTtcbiAgfSBlbHNlIHtcbiAgICBmb3JFYWNoQWNjdW11bGF0ZWQocHJvY2Vzc2luZ0V2ZW50UXVldWUsIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVRvcExldmVsKTtcbiAgfVxuICAhIWV2ZW50UXVldWUgPyBpbnZhcmlhbnQoZmFsc2UsICdwcm9jZXNzRXZlbnRRdWV1ZSgpOiBBZGRpdGlvbmFsIGV2ZW50cyB3ZXJlIGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcgYW4gZXZlbnQgcXVldWUuIFN1cHBvcnQgZm9yIHRoaXMgaGFzIG5vdCB5ZXQgYmVlbiBpbXBsZW1lbnRlZC4nKSA6IHZvaWQgMDtcbiAgLy8gVGhpcyB3b3VsZCBiZSBhIGdvb2QgdGltZSB0byByZXRocm93IGlmIGFueSBvZiB0aGUgZXZlbnQgaGFuZGxlcnMgdGhyZXcuXG4gIHJldGhyb3dDYXVnaHRFcnJvcigpO1xufVxuXG5mdW5jdGlvbiBydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBldmVudHMgPSBleHRyYWN0RXZlbnRzKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgcnVuRXZlbnRzSW5CYXRjaChldmVudHMsIGZhbHNlKTtcbn1cblxudmFyIEZ1bmN0aW9uQ29tcG9uZW50ID0gMDtcbnZhciBDbGFzc0NvbXBvbmVudCA9IDE7XG52YXIgSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCA9IDI7IC8vIEJlZm9yZSB3ZSBrbm93IHdoZXRoZXIgaXQgaXMgZnVuY3Rpb24gb3IgY2xhc3NcbnZhciBIb3N0Um9vdCA9IDM7IC8vIFJvb3Qgb2YgYSBob3N0IHRyZWUuIENvdWxkIGJlIG5lc3RlZCBpbnNpZGUgYW5vdGhlciBub2RlLlxudmFyIEhvc3RQb3J0YWwgPSA0OyAvLyBBIHN1YnRyZWUuIENvdWxkIGJlIGFuIGVudHJ5IHBvaW50IHRvIGEgZGlmZmVyZW50IHJlbmRlcmVyLlxudmFyIEhvc3RDb21wb25lbnQgPSA1O1xudmFyIEhvc3RUZXh0ID0gNjtcbnZhciBGcmFnbWVudCA9IDc7XG52YXIgTW9kZSA9IDg7XG52YXIgQ29udGV4dENvbnN1bWVyID0gOTtcbnZhciBDb250ZXh0UHJvdmlkZXIgPSAxMDtcbnZhciBGb3J3YXJkUmVmID0gMTE7XG52YXIgUHJvZmlsZXIgPSAxMjtcbnZhciBTdXNwZW5zZUNvbXBvbmVudCA9IDEzO1xudmFyIE1lbW9Db21wb25lbnQgPSAxNDtcbnZhciBTaW1wbGVNZW1vQ29tcG9uZW50ID0gMTU7XG52YXIgTGF6eUNvbXBvbmVudCA9IDE2O1xudmFyIEluY29tcGxldGVDbGFzc0NvbXBvbmVudCA9IDE3O1xuXG52YXIgcmFuZG9tS2V5ID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG52YXIgaW50ZXJuYWxJbnN0YW5jZUtleSA9ICdfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSQnICsgcmFuZG9tS2V5O1xudmFyIGludGVybmFsRXZlbnRIYW5kbGVyc0tleSA9ICdfX3JlYWN0RXZlbnRIYW5kbGVycyQnICsgcmFuZG9tS2V5O1xuXG5mdW5jdGlvbiBwcmVjYWNoZUZpYmVyTm9kZShob3N0SW5zdCwgbm9kZSkge1xuICBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldID0gaG9zdEluc3Q7XG59XG5cbi8qKlxuICogR2l2ZW4gYSBET00gbm9kZSwgcmV0dXJuIHRoZSBjbG9zZXN0IFJlYWN0RE9NQ29tcG9uZW50IG9yXG4gKiBSZWFjdERPTVRleHRDb21wb25lbnQgaW5zdGFuY2UgYW5jZXN0b3IuXG4gKi9cbmZ1bmN0aW9uIGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKG5vZGUpIHtcbiAgaWYgKG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0pIHtcbiAgICByZXR1cm4gbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XTtcbiAgfVxuXG4gIHdoaWxlICghbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSkge1xuICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRvcCBvZiB0aGUgdHJlZS4gVGhpcyBub2RlIG11c3Qgbm90IGJlIHBhcnQgb2YgYSBSZWFjdCB0cmVlIChvciBpc1xuICAgICAgLy8gdW5tb3VudGVkLCBwb3RlbnRpYWxseSkuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5zdCA9IG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV07XG4gIGlmIChpbnN0LnRhZyA9PT0gSG9zdENvbXBvbmVudCB8fCBpbnN0LnRhZyA9PT0gSG9zdFRleHQpIHtcbiAgICAvLyBJbiBGaWJlciwgdGhpcyB3aWxsIGFsd2F5cyBiZSB0aGUgZGVlcGVzdCByb290LlxuICAgIHJldHVybiBpbnN0O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogR2l2ZW4gYSBET00gbm9kZSwgcmV0dXJuIHRoZSBSZWFjdERPTUNvbXBvbmVudCBvciBSZWFjdERPTVRleHRDb21wb25lbnRcbiAqIGluc3RhbmNlLCBvciBudWxsIGlmIHRoZSBub2RlIHdhcyBub3QgcmVuZGVyZWQgYnkgdGhpcyBSZWFjdC5cbiAqL1xuZnVuY3Rpb24gZ2V0SW5zdGFuY2VGcm9tTm9kZSQxKG5vZGUpIHtcbiAgdmFyIGluc3QgPSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICBpZiAoaW5zdCkge1xuICAgIGlmIChpbnN0LnRhZyA9PT0gSG9zdENvbXBvbmVudCB8fCBpbnN0LnRhZyA9PT0gSG9zdFRleHQpIHtcbiAgICAgIHJldHVybiBpbnN0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogR2l2ZW4gYSBSZWFjdERPTUNvbXBvbmVudCBvciBSZWFjdERPTVRleHRDb21wb25lbnQsIHJldHVybiB0aGUgY29ycmVzcG9uZGluZ1xuICogRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVGcm9tSW5zdGFuY2UkMShpbnN0KSB7XG4gIGlmIChpbnN0LnRhZyA9PT0gSG9zdENvbXBvbmVudCB8fCBpbnN0LnRhZyA9PT0gSG9zdFRleHQpIHtcbiAgICAvLyBJbiBGaWJlciB0aGlzLCBpcyBqdXN0IHRoZSBzdGF0ZSBub2RlIHJpZ2h0IG5vdy4gV2UgYXNzdW1lIGl0IHdpbGwgYmVcbiAgICAvLyBhIGhvc3QgY29tcG9uZW50IG9yIGhvc3QgdGV4dC5cbiAgICByZXR1cm4gaW5zdC5zdGF0ZU5vZGU7XG4gIH1cblxuICAvLyBXaXRob3V0IHRoaXMgZmlyc3QgaW52YXJpYW50LCBwYXNzaW5nIGEgbm9uLURPTS1jb21wb25lbnQgdHJpZ2dlcnMgdGhlIG5leHRcbiAgLy8gaW52YXJpYW50IGZvciBhIG1pc3NpbmcgcGFyZW50LCB3aGljaCBpcyBzdXBlciBjb25mdXNpbmcuXG4gIGludmFyaWFudChmYWxzZSwgJ2dldE5vZGVGcm9tSW5zdGFuY2U6IEludmFsaWQgYXJndW1lbnQuJyk7XG59XG5cbmZ1bmN0aW9uIGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUkMShub2RlKSB7XG4gIHJldHVybiBub2RlW2ludGVybmFsRXZlbnRIYW5kbGVyc0tleV0gfHwgbnVsbDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRmliZXJQcm9wcyhub2RlLCBwcm9wcykge1xuICBub2RlW2ludGVybmFsRXZlbnRIYW5kbGVyc0tleV0gPSBwcm9wcztcbn1cblxuZnVuY3Rpb24gZ2V0UGFyZW50KGluc3QpIHtcbiAgZG8ge1xuICAgIGluc3QgPSBpbnN0LnJldHVybjtcbiAgICAvLyBUT0RPOiBJZiB0aGlzIGlzIGEgSG9zdFJvb3Qgd2UgbWlnaHQgd2FudCB0byBiYWlsIG91dC5cbiAgICAvLyBUaGF0IGlzIGRlcGVuZGluZyBvbiBpZiB3ZSB3YW50IG5lc3RlZCBzdWJ0cmVlcyAobGF5ZXJzKSB0byBidWJibGVcbiAgICAvLyBldmVudHMgdG8gdGhlaXIgcGFyZW50LiBXZSBjb3VsZCBhbHNvIGdvIHRocm91Z2ggcGFyZW50Tm9kZSBvbiB0aGVcbiAgICAvLyBob3N0IG5vZGUgYnV0IHRoYXQgd291bGRuJ3Qgd29yayBmb3IgUmVhY3QgTmF0aXZlIGFuZCBkb2Vzbid0IGxldCB1c1xuICAgIC8vIGRvIHRoZSBwb3J0YWwgZmVhdHVyZS5cbiAgfSB3aGlsZSAoaW5zdCAmJiBpbnN0LnRhZyAhPT0gSG9zdENvbXBvbmVudCk7XG4gIGlmIChpbnN0KSB7XG4gICAgcmV0dXJuIGluc3Q7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsb3dlc3QgY29tbW9uIGFuY2VzdG9yIG9mIEEgYW5kIEIsIG9yIG51bGwgaWYgdGhleSBhcmUgaW5cbiAqIGRpZmZlcmVudCB0cmVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IoaW5zdEEsIGluc3RCKSB7XG4gIHZhciBkZXB0aEEgPSAwO1xuICBmb3IgKHZhciB0ZW1wQSA9IGluc3RBOyB0ZW1wQTsgdGVtcEEgPSBnZXRQYXJlbnQodGVtcEEpKSB7XG4gICAgZGVwdGhBKys7XG4gIH1cbiAgdmFyIGRlcHRoQiA9IDA7XG4gIGZvciAodmFyIHRlbXBCID0gaW5zdEI7IHRlbXBCOyB0ZW1wQiA9IGdldFBhcmVudCh0ZW1wQikpIHtcbiAgICBkZXB0aEIrKztcbiAgfVxuXG4gIC8vIElmIEEgaXMgZGVlcGVyLCBjcmF3bCB1cC5cbiAgd2hpbGUgKGRlcHRoQSAtIGRlcHRoQiA+IDApIHtcbiAgICBpbnN0QSA9IGdldFBhcmVudChpbnN0QSk7XG4gICAgZGVwdGhBLS07XG4gIH1cblxuICAvLyBJZiBCIGlzIGRlZXBlciwgY3Jhd2wgdXAuXG4gIHdoaWxlIChkZXB0aEIgLSBkZXB0aEEgPiAwKSB7XG4gICAgaW5zdEIgPSBnZXRQYXJlbnQoaW5zdEIpO1xuICAgIGRlcHRoQi0tO1xuICB9XG5cbiAgLy8gV2FsayBpbiBsb2Nrc3RlcCB1bnRpbCB3ZSBmaW5kIGEgbWF0Y2guXG4gIHZhciBkZXB0aCA9IGRlcHRoQTtcbiAgd2hpbGUgKGRlcHRoLS0pIHtcbiAgICBpZiAoaW5zdEEgPT09IGluc3RCIHx8IGluc3RBID09PSBpbnN0Qi5hbHRlcm5hdGUpIHtcbiAgICAgIHJldHVybiBpbnN0QTtcbiAgICB9XG4gICAgaW5zdEEgPSBnZXRQYXJlbnQoaW5zdEEpO1xuICAgIGluc3RCID0gZ2V0UGFyZW50KGluc3RCKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gaWYgQSBpcyBhbiBhbmNlc3RvciBvZiBCLlxuICovXG5cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHBhcmVudCBpbnN0YW5jZSBvZiB0aGUgcGFzc2VkLWluIGluc3RhbmNlLlxuICovXG5cblxuLyoqXG4gKiBTaW11bGF0ZXMgdGhlIHRyYXZlcnNhbCBvZiBhIHR3by1waGFzZSwgY2FwdHVyZS9idWJibGUgZXZlbnQgZGlzcGF0Y2guXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlVHdvUGhhc2UoaW5zdCwgZm4sIGFyZykge1xuICB2YXIgcGF0aCA9IFtdO1xuICB3aGlsZSAoaW5zdCkge1xuICAgIHBhdGgucHVzaChpbnN0KTtcbiAgICBpbnN0ID0gZ2V0UGFyZW50KGluc3QpO1xuICB9XG4gIHZhciBpID0gdm9pZCAwO1xuICBmb3IgKGkgPSBwYXRoLmxlbmd0aDsgaS0tID4gMDspIHtcbiAgICBmbihwYXRoW2ldLCAnY2FwdHVyZWQnLCBhcmcpO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgZm4ocGF0aFtpXSwgJ2J1YmJsZWQnLCBhcmcpO1xuICB9XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIHRoZSBJRCBoaWVyYXJjaHkgYW5kIGludm9rZXMgdGhlIHN1cHBsaWVkIGBjYmAgb24gYW55IElEcyB0aGF0XG4gKiBzaG91bGQgd291bGQgcmVjZWl2ZSBhIGBtb3VzZUVudGVyYCBvciBgbW91c2VMZWF2ZWAgZXZlbnQuXG4gKlxuICogRG9lcyBub3QgaW52b2tlIHRoZSBjYWxsYmFjayBvbiB0aGUgbmVhcmVzdCBjb21tb24gYW5jZXN0b3IgYmVjYXVzZSBub3RoaW5nXG4gKiBcImVudGVyZWRcIiBvciBcImxlZnRcIiB0aGF0IGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tLCB0bywgZm4sIGFyZ0Zyb20sIGFyZ1RvKSB7XG4gIHZhciBjb21tb24gPSBmcm9tICYmIHRvID8gZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IoZnJvbSwgdG8pIDogbnVsbDtcbiAgdmFyIHBhdGhGcm9tID0gW107XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKCFmcm9tKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKGZyb20gPT09IGNvbW1vbikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBhbHRlcm5hdGUgPSBmcm9tLmFsdGVybmF0ZTtcbiAgICBpZiAoYWx0ZXJuYXRlICE9PSBudWxsICYmIGFsdGVybmF0ZSA9PT0gY29tbW9uKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcGF0aEZyb20ucHVzaChmcm9tKTtcbiAgICBmcm9tID0gZ2V0UGFyZW50KGZyb20pO1xuICB9XG4gIHZhciBwYXRoVG8gPSBbXTtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAoIXRvKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKHRvID09PSBjb21tb24pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgX2FsdGVybmF0ZSA9IHRvLmFsdGVybmF0ZTtcbiAgICBpZiAoX2FsdGVybmF0ZSAhPT0gbnVsbCAmJiBfYWx0ZXJuYXRlID09PSBjb21tb24pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBwYXRoVG8ucHVzaCh0byk7XG4gICAgdG8gPSBnZXRQYXJlbnQodG8pO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aEZyb20ubGVuZ3RoOyBpKyspIHtcbiAgICBmbihwYXRoRnJvbVtpXSwgJ2J1YmJsZWQnLCBhcmdGcm9tKTtcbiAgfVxuICBmb3IgKHZhciBfaSA9IHBhdGhUby5sZW5ndGg7IF9pLS0gPiAwOykge1xuICAgIGZuKHBhdGhUb1tfaV0sICdjYXB0dXJlZCcsIGFyZ1RvKTtcbiAgfVxufVxuXG4vKipcbiAqIFNvbWUgZXZlbnQgdHlwZXMgaGF2ZSBhIG5vdGlvbiBvZiBkaWZmZXJlbnQgcmVnaXN0cmF0aW9uIG5hbWVzIGZvciBkaWZmZXJlbnRcbiAqIFwicGhhc2VzXCIgb2YgcHJvcGFnYXRpb24uIFRoaXMgZmluZHMgbGlzdGVuZXJzIGJ5IGEgZ2l2ZW4gcGhhc2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RlbmVyQXRQaGFzZShpbnN0LCBldmVudCwgcHJvcGFnYXRpb25QaGFzZSkge1xuICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3Byb3BhZ2F0aW9uUGhhc2VdO1xuICByZXR1cm4gZ2V0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSk7XG59XG5cbi8qKlxuICogQSBzbWFsbCBzZXQgb2YgcHJvcGFnYXRpb24gcGF0dGVybnMsIGVhY2ggb2Ygd2hpY2ggd2lsbCBhY2NlcHQgYSBzbWFsbCBhbW91bnRcbiAqIG9mIGluZm9ybWF0aW9uLCBhbmQgZ2VuZXJhdGUgYSBzZXQgb2YgXCJkaXNwYXRjaCByZWFkeSBldmVudCBvYmplY3RzXCIgLSB3aGljaFxuICogYXJlIHNldHMgb2YgZXZlbnRzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gYW5ub3RhdGVkIHdpdGggYSBzZXQgb2YgZGlzcGF0Y2hlZFxuICogbGlzdGVuZXIgZnVuY3Rpb25zL2lkcy4gVGhlIEFQSSBpcyBkZXNpZ25lZCB0aGlzIHdheSB0byBkaXNjb3VyYWdlIHRoZXNlXG4gKiBwcm9wYWdhdGlvbiBzdHJhdGVnaWVzIGZyb20gYWN0dWFsbHkgZXhlY3V0aW5nIHRoZSBkaXNwYXRjaGVzLCBzaW5jZSB3ZVxuICogYWx3YXlzIHdhbnQgdG8gY29sbGVjdCB0aGUgZW50aXJlIHNldCBvZiBkaXNwYXRjaGVzIGJlZm9yZSBleGVjdXRpbmcgZXZlbiBhXG4gKiBzaW5nbGUgb25lLlxuICovXG5cbi8qKlxuICogVGFncyBhIGBTeW50aGV0aWNFdmVudGAgd2l0aCBkaXNwYXRjaGVkIGxpc3RlbmVycy4gQ3JlYXRpbmcgdGhpcyBmdW5jdGlvblxuICogaGVyZSwgYWxsb3dzIHVzIHRvIG5vdCBoYXZlIHRvIGJpbmQgb3IgY3JlYXRlIGZ1bmN0aW9ucyBmb3IgZWFjaCBldmVudC5cbiAqIE11dGF0aW5nIHRoZSBldmVudCdzIG1lbWJlcnMgYWxsb3dzIHVzIHRvIG5vdCBoYXZlIHRvIGNyZWF0ZSBhIHdyYXBwaW5nXG4gKiBcImRpc3BhdGNoXCIgb2JqZWN0IHRoYXQgcGFpcnMgdGhlIGV2ZW50IHdpdGggdGhlIGxpc3RlbmVyLlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzKGluc3QsIHBoYXNlLCBldmVudCkge1xuICB7XG4gICAgIWluc3QgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdEaXNwYXRjaGluZyBpbnN0IG11c3Qgbm90IGJlIG51bGwnKSA6IHZvaWQgMDtcbiAgfVxuICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lckF0UGhhc2UoaW5zdCwgZXZlbnQsIHBoYXNlKTtcbiAgaWYgKGxpc3RlbmVyKSB7XG4gICAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLCBsaXN0ZW5lcik7XG4gICAgZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzLCBpbnN0KTtcbiAgfVxufVxuXG4vKipcbiAqIENvbGxlY3QgZGlzcGF0Y2hlcyAobXVzdCBiZSBlbnRpcmVseSBjb2xsZWN0ZWQgYmVmb3JlIGRpc3BhdGNoaW5nIC0gc2VlIHVuaXRcbiAqIHRlc3RzKS4gTGF6aWx5IGFsbG9jYXRlIHRoZSBhcnJheSB0byBjb25zZXJ2ZSBtZW1vcnkuICBXZSBtdXN0IGxvb3AgdGhyb3VnaFxuICogZWFjaCBldmVudCBhbmQgcGVyZm9ybSB0aGUgdHJhdmVyc2FsIGZvciBlYWNoIG9uZS4gV2UgY2Fubm90IHBlcmZvcm0gYVxuICogc2luZ2xlIHRyYXZlcnNhbCBmb3IgdGhlIGVudGlyZSBjb2xsZWN0aW9uIG9mIGV2ZW50cyBiZWNhdXNlIGVhY2ggZXZlbnQgbWF5XG4gKiBoYXZlIGEgZGlmZmVyZW50IHRhcmdldC5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZShldmVudCkge1xuICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICB0cmF2ZXJzZVR3b1BoYXNlKGV2ZW50Ll90YXJnZXRJbnN0LCBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzLCBldmVudCk7XG4gIH1cbn1cblxuLyoqXG4gKiBBY2N1bXVsYXRlcyB3aXRob3V0IHJlZ2FyZCB0byBkaXJlY3Rpb24sIGRvZXMgbm90IGxvb2sgZm9yIHBoYXNlZFxuICogcmVnaXN0cmF0aW9uIG5hbWVzLiBTYW1lIGFzIGBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZWAgYnV0IHdpdGhvdXRcbiAqIHJlcXVpcmluZyB0aGF0IHRoZSBgZGlzcGF0Y2hNYXJrZXJgIGJlIHRoZSBzYW1lIGFzIHRoZSBkaXNwYXRjaGVkIElELlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhpbnN0LCBpZ25vcmVkRGlyZWN0aW9uLCBldmVudCkge1xuICBpZiAoaW5zdCAmJiBldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPSBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lO1xuICAgIHZhciBsaXN0ZW5lciA9IGdldExpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLCBsaXN0ZW5lcik7XG4gICAgICBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMsIGluc3QpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY3VtdWxhdGVzIGRpc3BhdGNoZXMgb24gYW4gYFN5bnRoZXRpY0V2ZW50YCwgYnV0IG9ubHkgZm9yIHRoZVxuICogYGRpc3BhdGNoTWFya2VyYC5cbiAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlKGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgYWNjdW11bGF0ZURpc3BhdGNoZXMoZXZlbnQuX3RhcmdldEluc3QsIG51bGwsIGV2ZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50cykge1xuICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKTtcbn1cblxuXG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyhsZWF2ZSwgZW50ZXIsIGZyb20sIHRvKSB7XG4gIHRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tLCB0bywgYWNjdW11bGF0ZURpc3BhdGNoZXMsIGxlYXZlLCBlbnRlcik7XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzKGV2ZW50cykge1xuICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSk7XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vLyBEbyBub3QgdXNlcyB0aGUgYmVsb3cgdHdvIG1ldGhvZHMgZGlyZWN0bHkhXG4vLyBJbnN0ZWFkIHVzZSBjb25zdGFudHMgZXhwb3J0ZWQgZnJvbSBET01Ub3BMZXZlbEV2ZW50VHlwZXMgaW4gUmVhY3RET00uXG4vLyAoSXQgaXMgdGhlIG9ubHkgbW9kdWxlIHRoYXQgaXMgYWxsb3dlZCB0byBhY2Nlc3MgdGhlc2UgbWV0aG9kcy4pXG5cbmZ1bmN0aW9uIHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSh0b3BMZXZlbFR5cGUpIHtcbiAgcmV0dXJuIHRvcExldmVsVHlwZTtcbn1cblxuZnVuY3Rpb24gdW5zYWZlQ2FzdERPTVRvcExldmVsVHlwZVRvU3RyaW5nKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgbWFwcGluZyBvZiBzdGFuZGFyZCB2ZW5kb3IgcHJlZml4ZXMgdXNpbmcgdGhlIGRlZmluZWQgc3R5bGUgcHJvcGVydHkgYW5kIGV2ZW50IG5hbWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlUHJvcFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gbWFrZVByZWZpeE1hcChzdHlsZVByb3AsIGV2ZW50TmFtZSkge1xuICB2YXIgcHJlZml4ZXMgPSB7fTtcblxuICBwcmVmaXhlc1tzdHlsZVByb3AudG9Mb3dlckNhc2UoKV0gPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcHJlZml4ZXNbJ1dlYmtpdCcgKyBzdHlsZVByb3BdID0gJ3dlYmtpdCcgKyBldmVudE5hbWU7XG4gIHByZWZpeGVzWydNb3onICsgc3R5bGVQcm9wXSA9ICdtb3onICsgZXZlbnROYW1lO1xuXG4gIHJldHVybiBwcmVmaXhlcztcbn1cblxuLyoqXG4gKiBBIGxpc3Qgb2YgZXZlbnQgbmFtZXMgdG8gYSBjb25maWd1cmFibGUgbGlzdCBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cbnZhciB2ZW5kb3JQcmVmaXhlcyA9IHtcbiAgYW5pbWF0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdBbmltYXRpb24nLCAnQW5pbWF0aW9uRW5kJyksXG4gIGFuaW1hdGlvbml0ZXJhdGlvbjogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvbkl0ZXJhdGlvbicpLFxuICBhbmltYXRpb25zdGFydDogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvblN0YXJ0JyksXG4gIHRyYW5zaXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoJ1RyYW5zaXRpb24nLCAnVHJhbnNpdGlvbkVuZCcpXG59O1xuXG4vKipcbiAqIEV2ZW50IG5hbWVzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gZGV0ZWN0ZWQgYW5kIHByZWZpeGVkIChpZiBhcHBsaWNhYmxlKS5cbiAqL1xudmFyIHByZWZpeGVkRXZlbnROYW1lcyA9IHt9O1xuXG4vKipcbiAqIEVsZW1lbnQgdG8gY2hlY2sgZm9yIHByZWZpeGVzIG9uLlxuICovXG52YXIgc3R5bGUgPSB7fTtcblxuLyoqXG4gKiBCb290c3RyYXAgaWYgYSBET00gZXhpc3RzLlxuICovXG5pZiAoY2FuVXNlRE9NKSB7XG4gIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG5cbiAgLy8gT24gc29tZSBwbGF0Zm9ybXMsIGluIHBhcnRpY3VsYXIgc29tZSByZWxlYXNlcyBvZiBBbmRyb2lkIDQueCxcbiAgLy8gdGhlIHVuLXByZWZpeGVkIFwiYW5pbWF0aW9uXCIgYW5kIFwidHJhbnNpdGlvblwiIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgb24gdGhlXG4gIC8vIHN0eWxlIG9iamVjdCBidXQgdGhlIGV2ZW50cyB0aGF0IGZpcmUgd2lsbCBzdGlsbCBiZSBwcmVmaXhlZCwgc28gd2UgbmVlZFxuICAvLyB0byBjaGVjayBpZiB0aGUgdW4tcHJlZml4ZWQgZXZlbnRzIGFyZSB1c2FibGUsIGFuZCBpZiBub3QgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgbWFwLlxuICBpZiAoISgnQW5pbWF0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbjtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbjtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uO1xuICB9XG5cbiAgLy8gU2FtZSBhcyBhYm92ZVxuICBpZiAoISgnVHJhbnNpdGlvbkV2ZW50JyBpbiB3aW5kb3cpKSB7XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbjtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGRldGVybWluZSB0aGUgY29ycmVjdCB2ZW5kb3IgcHJlZml4ZWQgZXZlbnQgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShldmVudE5hbWUpIHtcbiAgaWYgKHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdKSB7XG4gICAgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICB9IGVsc2UgaWYgKCF2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdKSB7XG4gICAgcmV0dXJuIGV2ZW50TmFtZTtcbiAgfVxuXG4gIHZhciBwcmVmaXhNYXAgPSB2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdO1xuXG4gIGZvciAodmFyIHN0eWxlUHJvcCBpbiBwcmVmaXhNYXApIHtcbiAgICBpZiAocHJlZml4TWFwLmhhc093blByb3BlcnR5KHN0eWxlUHJvcCkgJiYgc3R5bGVQcm9wIGluIHN0eWxlKSB7XG4gICAgICByZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0gPSBwcmVmaXhNYXBbc3R5bGVQcm9wXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXZlbnROYW1lO1xufVxuXG4vKipcbiAqIFRvIGlkZW50aWZ5IHRvcCBsZXZlbCBldmVudHMgaW4gUmVhY3RET00sIHdlIHVzZSBjb25zdGFudHMgZGVmaW5lZCBieSB0aGlzXG4gKiBtb2R1bGUuIFRoaXMgaXMgdGhlIG9ubHkgbW9kdWxlIHRoYXQgdXNlcyB0aGUgdW5zYWZlKiBtZXRob2RzIHRvIGV4cHJlc3NcbiAqIHRoYXQgdGhlIGNvbnN0YW50cyBhY3R1YWxseSBjb3JyZXNwb25kIHRvIHRoZSBicm93c2VyIGV2ZW50IG5hbWVzLiBUaGlzIGxldHNcbiAqIHVzIHNhdmUgc29tZSBidW5kbGUgc2l6ZSBieSBhdm9pZGluZyBhIHRvcCBsZXZlbCB0eXBlIC0+IGV2ZW50IG5hbWUgbWFwLlxuICogVGhlIHJlc3Qgb2YgUmVhY3RET00gY29kZSBzaG91bGQgaW1wb3J0IHRvcCBsZXZlbCB0eXBlcyBmcm9tIHRoaXMgZmlsZS5cbiAqL1xudmFyIFRPUF9BQk9SVCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnYWJvcnQnKTtcbnZhciBUT1BfQU5JTUFUSU9OX0VORCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZShnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgnYW5pbWF0aW9uZW5kJykpO1xudmFyIFRPUF9BTklNQVRJT05fSVRFUkFUSU9OID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCdhbmltYXRpb25pdGVyYXRpb24nKSk7XG52YXIgVE9QX0FOSU1BVElPTl9TVEFSVCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZShnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgnYW5pbWF0aW9uc3RhcnQnKSk7XG52YXIgVE9QX0JMVVIgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2JsdXInKTtcbnZhciBUT1BfQ0FOX1BMQVkgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2NhbnBsYXknKTtcbnZhciBUT1BfQ0FOX1BMQVlfVEhST1VHSCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnY2FucGxheXRocm91Z2gnKTtcbnZhciBUT1BfQ0FOQ0VMID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdjYW5jZWwnKTtcbnZhciBUT1BfQ0hBTkdFID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdjaGFuZ2UnKTtcbnZhciBUT1BfQ0xJQ0sgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2NsaWNrJyk7XG52YXIgVE9QX0NMT1NFID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdjbG9zZScpO1xudmFyIFRPUF9DT01QT1NJVElPTl9FTkQgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2NvbXBvc2l0aW9uZW5kJyk7XG52YXIgVE9QX0NPTVBPU0lUSU9OX1NUQVJUID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdjb21wb3NpdGlvbnN0YXJ0Jyk7XG52YXIgVE9QX0NPTVBPU0lUSU9OX1VQREFURSA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnY29tcG9zaXRpb251cGRhdGUnKTtcbnZhciBUT1BfQ09OVEVYVF9NRU5VID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdjb250ZXh0bWVudScpO1xudmFyIFRPUF9DT1BZID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdjb3B5Jyk7XG52YXIgVE9QX0NVVCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnY3V0Jyk7XG52YXIgVE9QX0RPVUJMRV9DTElDSyA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnZGJsY2xpY2snKTtcbnZhciBUT1BfQVVYX0NMSUNLID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdhdXhjbGljaycpO1xudmFyIFRPUF9EUkFHID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdkcmFnJyk7XG52YXIgVE9QX0RSQUdfRU5EID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdkcmFnZW5kJyk7XG52YXIgVE9QX0RSQUdfRU5URVIgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2RyYWdlbnRlcicpO1xudmFyIFRPUF9EUkFHX0VYSVQgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2RyYWdleGl0Jyk7XG52YXIgVE9QX0RSQUdfTEVBVkUgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2RyYWdsZWF2ZScpO1xudmFyIFRPUF9EUkFHX09WRVIgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2RyYWdvdmVyJyk7XG52YXIgVE9QX0RSQUdfU1RBUlQgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2RyYWdzdGFydCcpO1xudmFyIFRPUF9EUk9QID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdkcm9wJyk7XG52YXIgVE9QX0RVUkFUSU9OX0NIQU5HRSA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnZHVyYXRpb25jaGFuZ2UnKTtcbnZhciBUT1BfRU1QVElFRCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnZW1wdGllZCcpO1xudmFyIFRPUF9FTkNSWVBURUQgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2VuY3J5cHRlZCcpO1xudmFyIFRPUF9FTkRFRCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnZW5kZWQnKTtcbnZhciBUT1BfRVJST1IgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2Vycm9yJyk7XG52YXIgVE9QX0ZPQ1VTID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdmb2N1cycpO1xudmFyIFRPUF9HT1RfUE9JTlRFUl9DQVBUVVJFID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdnb3Rwb2ludGVyY2FwdHVyZScpO1xudmFyIFRPUF9JTlBVVCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnaW5wdXQnKTtcbnZhciBUT1BfSU5WQUxJRCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnaW52YWxpZCcpO1xudmFyIFRPUF9LRVlfRE9XTiA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgna2V5ZG93bicpO1xudmFyIFRPUF9LRVlfUFJFU1MgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2tleXByZXNzJyk7XG52YXIgVE9QX0tFWV9VUCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgna2V5dXAnKTtcbnZhciBUT1BfTE9BRCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnbG9hZCcpO1xudmFyIFRPUF9MT0FEX1NUQVJUID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdsb2Fkc3RhcnQnKTtcbnZhciBUT1BfTE9BREVEX0RBVEEgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ2xvYWRlZGRhdGEnKTtcbnZhciBUT1BfTE9BREVEX01FVEFEQVRBID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdsb2FkZWRtZXRhZGF0YScpO1xudmFyIFRPUF9MT1NUX1BPSU5URVJfQ0FQVFVSRSA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnbG9zdHBvaW50ZXJjYXB0dXJlJyk7XG52YXIgVE9QX01PVVNFX0RPV04gPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ21vdXNlZG93bicpO1xudmFyIFRPUF9NT1VTRV9NT1ZFID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdtb3VzZW1vdmUnKTtcbnZhciBUT1BfTU9VU0VfT1VUID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdtb3VzZW91dCcpO1xudmFyIFRPUF9NT1VTRV9PVkVSID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdtb3VzZW92ZXInKTtcbnZhciBUT1BfTU9VU0VfVVAgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ21vdXNldXAnKTtcbnZhciBUT1BfUEFTVEUgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3Bhc3RlJyk7XG52YXIgVE9QX1BBVVNFID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdwYXVzZScpO1xudmFyIFRPUF9QTEFZID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdwbGF5Jyk7XG52YXIgVE9QX1BMQVlJTkcgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3BsYXlpbmcnKTtcbnZhciBUT1BfUE9JTlRFUl9DQU5DRUwgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3BvaW50ZXJjYW5jZWwnKTtcbnZhciBUT1BfUE9JTlRFUl9ET1dOID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdwb2ludGVyZG93bicpO1xuXG5cbnZhciBUT1BfUE9JTlRFUl9NT1ZFID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdwb2ludGVybW92ZScpO1xudmFyIFRPUF9QT0lOVEVSX09VVCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgncG9pbnRlcm91dCcpO1xudmFyIFRPUF9QT0lOVEVSX09WRVIgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3BvaW50ZXJvdmVyJyk7XG52YXIgVE9QX1BPSU5URVJfVVAgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3BvaW50ZXJ1cCcpO1xudmFyIFRPUF9QUk9HUkVTUyA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgncHJvZ3Jlc3MnKTtcbnZhciBUT1BfUkFURV9DSEFOR0UgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3JhdGVjaGFuZ2UnKTtcbnZhciBUT1BfUkVTRVQgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3Jlc2V0Jyk7XG52YXIgVE9QX1NDUk9MTCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnc2Nyb2xsJyk7XG52YXIgVE9QX1NFRUtFRCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnc2Vla2VkJyk7XG52YXIgVE9QX1NFRUtJTkcgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3NlZWtpbmcnKTtcbnZhciBUT1BfU0VMRUNUSU9OX0NIQU5HRSA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnc2VsZWN0aW9uY2hhbmdlJyk7XG52YXIgVE9QX1NUQUxMRUQgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3N0YWxsZWQnKTtcbnZhciBUT1BfU1VCTUlUID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCdzdWJtaXQnKTtcbnZhciBUT1BfU1VTUEVORCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgnc3VzcGVuZCcpO1xudmFyIFRPUF9URVhUX0lOUFVUID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCd0ZXh0SW5wdXQnKTtcbnZhciBUT1BfVElNRV9VUERBVEUgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3RpbWV1cGRhdGUnKTtcbnZhciBUT1BfVE9HR0xFID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCd0b2dnbGUnKTtcbnZhciBUT1BfVE9VQ0hfQ0FOQ0VMID0gdW5zYWZlQ2FzdFN0cmluZ1RvRE9NVG9wTGV2ZWxUeXBlKCd0b3VjaGNhbmNlbCcpO1xudmFyIFRPUF9UT1VDSF9FTkQgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3RvdWNoZW5kJyk7XG52YXIgVE9QX1RPVUNIX01PVkUgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3RvdWNobW92ZScpO1xudmFyIFRPUF9UT1VDSF9TVEFSVCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgndG91Y2hzdGFydCcpO1xudmFyIFRPUF9UUkFOU0lUSU9OX0VORCA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZShnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgndHJhbnNpdGlvbmVuZCcpKTtcbnZhciBUT1BfVk9MVU1FX0NIQU5HRSA9IHVuc2FmZUNhc3RTdHJpbmdUb0RPTVRvcExldmVsVHlwZSgndm9sdW1lY2hhbmdlJyk7XG52YXIgVE9QX1dBSVRJTkcgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3dhaXRpbmcnKTtcbnZhciBUT1BfV0hFRUwgPSB1bnNhZmVDYXN0U3RyaW5nVG9ET01Ub3BMZXZlbFR5cGUoJ3doZWVsJyk7XG5cbi8vIExpc3Qgb2YgZXZlbnRzIHRoYXQgbmVlZCB0byBiZSBpbmRpdmlkdWFsbHkgYXR0YWNoZWQgdG8gbWVkaWEgZWxlbWVudHMuXG4vLyBOb3RlIHRoYXQgZXZlbnRzIGluIHRoaXMgbGlzdCB3aWxsICpub3QqIGJlIGxpc3RlbmVkIHRvIGF0IHRoZSB0b3AgbGV2ZWxcbi8vIHVubGVzcyB0aGV5J3JlIGV4cGxpY2l0bHkgd2hpdGVsaXN0ZWQgaW4gYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5saXN0ZW5Ub2AuXG52YXIgbWVkaWFFdmVudFR5cGVzID0gW1RPUF9BQk9SVCwgVE9QX0NBTl9QTEFZLCBUT1BfQ0FOX1BMQVlfVEhST1VHSCwgVE9QX0RVUkFUSU9OX0NIQU5HRSwgVE9QX0VNUFRJRUQsIFRPUF9FTkNSWVBURUQsIFRPUF9FTkRFRCwgVE9QX0VSUk9SLCBUT1BfTE9BREVEX0RBVEEsIFRPUF9MT0FERURfTUVUQURBVEEsIFRPUF9MT0FEX1NUQVJULCBUT1BfUEFVU0UsIFRPUF9QTEFZLCBUT1BfUExBWUlORywgVE9QX1BST0dSRVNTLCBUT1BfUkFURV9DSEFOR0UsIFRPUF9TRUVLRUQsIFRPUF9TRUVLSU5HLCBUT1BfU1RBTExFRCwgVE9QX1NVU1BFTkQsIFRPUF9USU1FX1VQREFURSwgVE9QX1ZPTFVNRV9DSEFOR0UsIFRPUF9XQUlUSU5HXTtcblxuZnVuY3Rpb24gZ2V0UmF3RXZlbnROYW1lKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdW5zYWZlQ2FzdERPTVRvcExldmVsVHlwZVRvU3RyaW5nKHRvcExldmVsVHlwZSk7XG59XG5cbi8qKlxuICogVGhlc2UgdmFyaWFibGVzIHN0b3JlIGluZm9ybWF0aW9uIGFib3V0IHRleHQgY29udGVudCBvZiBhIHRhcmdldCBub2RlLFxuICogYWxsb3dpbmcgY29tcGFyaXNvbiBvZiBjb250ZW50IGJlZm9yZSBhbmQgYWZ0ZXIgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBJZGVudGlmeSB0aGUgbm9kZSB3aGVyZSBzZWxlY3Rpb24gY3VycmVudGx5IGJlZ2lucywgdGhlbiBvYnNlcnZlXG4gKiBib3RoIGl0cyB0ZXh0IGNvbnRlbnQgYW5kIGl0cyBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSBET00uIFNpbmNlIHRoZVxuICogYnJvd3NlciBtYXkgbmF0aXZlbHkgcmVwbGFjZSB0aGUgdGFyZ2V0IG5vZGUgZHVyaW5nIGNvbXBvc2l0aW9uLCB3ZSBjYW5cbiAqIHVzZSBpdHMgcG9zaXRpb24gdG8gZmluZCBpdHMgcmVwbGFjZW1lbnQuXG4gKlxuICpcbiAqL1xuXG52YXIgcm9vdCA9IG51bGw7XG52YXIgc3RhcnRUZXh0ID0gbnVsbDtcbnZhciBmYWxsYmFja1RleHQgPSBudWxsO1xuXG5mdW5jdGlvbiBpbml0aWFsaXplKG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJvb3QgPSBuYXRpdmVFdmVudFRhcmdldDtcbiAgc3RhcnRUZXh0ID0gZ2V0VGV4dCgpO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmVzZXQoKSB7XG4gIHJvb3QgPSBudWxsO1xuICBzdGFydFRleHQgPSBudWxsO1xuICBmYWxsYmFja1RleHQgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhKCkge1xuICBpZiAoZmFsbGJhY2tUZXh0KSB7XG4gICAgcmV0dXJuIGZhbGxiYWNrVGV4dDtcbiAgfVxuXG4gIHZhciBzdGFydCA9IHZvaWQgMDtcbiAgdmFyIHN0YXJ0VmFsdWUgPSBzdGFydFRleHQ7XG4gIHZhciBzdGFydExlbmd0aCA9IHN0YXJ0VmFsdWUubGVuZ3RoO1xuICB2YXIgZW5kID0gdm9pZCAwO1xuICB2YXIgZW5kVmFsdWUgPSBnZXRUZXh0KCk7XG4gIHZhciBlbmRMZW5ndGggPSBlbmRWYWx1ZS5sZW5ndGg7XG5cbiAgZm9yIChzdGFydCA9IDA7IHN0YXJ0IDwgc3RhcnRMZW5ndGg7IHN0YXJ0KyspIHtcbiAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydF0gIT09IGVuZFZhbHVlW3N0YXJ0XSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1pbkVuZCA9IHN0YXJ0TGVuZ3RoIC0gc3RhcnQ7XG4gIGZvciAoZW5kID0gMTsgZW5kIDw9IG1pbkVuZDsgZW5kKyspIHtcbiAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydExlbmd0aCAtIGVuZF0gIT09IGVuZFZhbHVlW2VuZExlbmd0aCAtIGVuZF0pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzbGljZVRhaWwgPSBlbmQgPiAxID8gMSAtIGVuZCA6IHVuZGVmaW5lZDtcbiAgZmFsbGJhY2tUZXh0ID0gZW5kVmFsdWUuc2xpY2Uoc3RhcnQsIHNsaWNlVGFpbCk7XG4gIHJldHVybiBmYWxsYmFja1RleHQ7XG59XG5cbmZ1bmN0aW9uIGdldFRleHQoKSB7XG4gIGlmICgndmFsdWUnIGluIHJvb3QpIHtcbiAgICByZXR1cm4gcm9vdC52YWx1ZTtcbiAgfVxuICByZXR1cm4gcm9vdC50ZXh0Q29udGVudDtcbn1cblxuLyogZXNsaW50IHZhbGlkLXR5cGVvZjogMCAqL1xuXG52YXIgRVZFTlRfUE9PTF9TSVpFID0gMTA7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBFdmVudEludGVyZmFjZSA9IHtcbiAgdHlwZTogbnVsbCxcbiAgdGFyZ2V0OiBudWxsLFxuICAvLyBjdXJyZW50VGFyZ2V0IGlzIHNldCB3aGVuIGRpc3BhdGNoaW5nOyBubyB1c2UgaW4gY29weWluZyBpdCBoZXJlXG4gIGN1cnJlbnRUYXJnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgZXZlbnRQaGFzZTogbnVsbCxcbiAgYnViYmxlczogbnVsbCxcbiAgY2FuY2VsYWJsZTogbnVsbCxcbiAgdGltZVN0YW1wOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gIH0sXG4gIGRlZmF1bHRQcmV2ZW50ZWQ6IG51bGwsXG4gIGlzVHJ1c3RlZDogbnVsbFxufTtcblxuZnVuY3Rpb24gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUoKSB7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBTeW50aGV0aWMgZXZlbnRzIGFyZSBkaXNwYXRjaGVkIGJ5IGV2ZW50IHBsdWdpbnMsIHR5cGljYWxseSBpbiByZXNwb25zZSB0byBhXG4gKiB0b3AtbGV2ZWwgZXZlbnQgZGVsZWdhdGlvbiBoYW5kbGVyLlxuICpcbiAqIFRoZXNlIHN5c3RlbXMgc2hvdWxkIGdlbmVyYWxseSB1c2UgcG9vbGluZyB0byByZWR1Y2UgdGhlIGZyZXF1ZW5jeSBvZiBnYXJiYWdlXG4gKiBjb2xsZWN0aW9uLiBUaGUgc3lzdGVtIHNob3VsZCBjaGVjayBgaXNQZXJzaXN0ZW50YCB0byBkZXRlcm1pbmUgd2hldGhlciB0aGVcbiAqIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBpbnRvIHRoZSBwb29sIGFmdGVyIGJlaW5nIGRpc3BhdGNoZWQuIFVzZXJzIHRoYXRcbiAqIG5lZWQgYSBwZXJzaXN0ZWQgZXZlbnQgc2hvdWxkIGludm9rZSBgcGVyc2lzdGAuXG4gKlxuICogU3ludGhldGljIGV2ZW50cyAoYW5kIHN1YmNsYXNzZXMpIGltcGxlbWVudCB0aGUgRE9NIExldmVsIDMgRXZlbnRzIEFQSSBieVxuICogbm9ybWFsaXppbmcgYnJvd3NlciBxdWlya3MuIFN1YmNsYXNzZXMgZG8gbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gaW1wbGVtZW50IGFcbiAqIERPTSBpbnRlcmZhY2U7IGN1c3RvbSBhcHBsaWNhdGlvbi1zcGVjaWZpYyBldmVudHMgY2FuIGFsc28gc3ViY2xhc3MgdGhpcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0geyp9IHRhcmdldEluc3QgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSBuYXRpdmVFdmVudFRhcmdldCBUYXJnZXQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRXZlbnQoZGlzcGF0Y2hDb25maWcsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICB7XG4gICAgLy8gdGhlc2UgaGF2ZSBhIGdldHRlci9zZXR0ZXIgZm9yIHdhcm5pbmdzXG4gICAgZGVsZXRlIHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgZGVsZXRlIHRoaXMucHJldmVudERlZmF1bHQ7XG4gICAgZGVsZXRlIHRoaXMuc3RvcFByb3BhZ2F0aW9uO1xuICAgIGRlbGV0ZSB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZDtcbiAgICBkZWxldGUgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZDtcbiAgfVxuXG4gIHRoaXMuZGlzcGF0Y2hDb25maWcgPSBkaXNwYXRjaENvbmZpZztcbiAgdGhpcy5fdGFyZ2V0SW5zdCA9IHRhcmdldEluc3Q7XG4gIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcblxuICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgIGlmICghSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHtcbiAgICAgIGRlbGV0ZSB0aGlzW3Byb3BOYW1lXTsgLy8gdGhpcyBoYXMgYSBnZXR0ZXIvc2V0dGVyIGZvciB3YXJuaW5nc1xuICAgIH1cbiAgICB2YXIgbm9ybWFsaXplID0gSW50ZXJmYWNlW3Byb3BOYW1lXTtcbiAgICBpZiAobm9ybWFsaXplKSB7XG4gICAgICB0aGlzW3Byb3BOYW1lXSA9IG5vcm1hbGl6ZShuYXRpdmVFdmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wTmFtZSA9PT0gJ3RhcmdldCcpIHtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBuYXRpdmVFdmVudFRhcmdldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNbcHJvcE5hbWVdID0gbmF0aXZlRXZlbnRbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWZhdWx0UHJldmVudGVkID0gbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCAhPSBudWxsID8gbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCA6IG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlID09PSBmYWxzZTtcbiAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb25UaGF0UmV0dXJuc0ZhbHNlO1xuICB9XG4gIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2U7XG4gIHJldHVybiB0aGlzO1xufVxuXG5fYXNzaWduKFN5bnRoZXRpY0V2ZW50LnByb3RvdHlwZSwge1xuICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV2ZW50LnJldHVyblZhbHVlICE9PSAndW5rbm93bicpIHtcbiAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWU7XG4gIH0sXG5cbiAgc3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXZlbnQuY2FuY2VsQnViYmxlICE9PSAndW5rbm93bicpIHtcbiAgICAgIC8vIFRoZSBDaGFuZ2VFdmVudFBsdWdpbiByZWdpc3RlcnMgYSBcInByb3BlcnR5Y2hhbmdlXCIgZXZlbnQgZm9yXG4gICAgICAvLyBJRS4gVGhpcyBldmVudCBkb2VzIG5vdCBzdXBwb3J0IGJ1YmJsaW5nIG9yIGNhbmNlbGxpbmcsIGFuZFxuICAgICAgLy8gYW55IHJlZmVyZW5jZXMgdG8gY2FuY2VsQnViYmxlIHRocm93IFwiTWVtYmVyIG5vdCBmb3VuZFwiLiAgQVxuICAgICAgLy8gdHlwZW9mIGNoZWNrIG9mIFwidW5rbm93blwiIGNpcmN1bXZlbnRzIHRoaXMgaXNzdWUgKGFuZCBpcyBhbHNvXG4gICAgICAvLyBJRSBzcGVjaWZpYykuXG4gICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogV2UgcmVsZWFzZSBhbGwgZGlzcGF0Y2hlZCBgU3ludGhldGljRXZlbnRgcyBhZnRlciBlYWNoIGV2ZW50IGxvb3AsIGFkZGluZ1xuICAgKiB0aGVtIGJhY2sgaW50byB0aGUgcG9vbC4gVGhpcyBhbGxvd3MgYSB3YXkgdG8gaG9sZCBvbnRvIGEgcmVmZXJlbmNlIHRoYXRcbiAgICogd29uJ3QgYmUgYWRkZWQgYmFjayBpbnRvIHRoZSBwb29sLlxuICAgKi9cbiAgcGVyc2lzdDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaXNQZXJzaXN0ZW50ID0gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBiYWNrIGludG8gdGhlIHBvb2wuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhpcyBzaG91bGQgbm90IGJlIHJlbGVhc2VkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBpc1BlcnNpc3RlbnQ6IGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgYGRlc3RydWN0b3JgIG9uIGVhY2ggaW5zdGFuY2UgaXQgcmVsZWFzZXMuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEludGVyZmFjZSA9IHRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgICAge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgcHJvcE5hbWUsIGdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24ocHJvcE5hbWUsIEludGVyZmFjZVtwcm9wTmFtZV0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5kaXNwYXRjaENvbmZpZyA9IG51bGw7XG4gICAgdGhpcy5fdGFyZ2V0SW5zdCA9IG51bGw7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IG51bGw7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2U7XG4gICAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZTtcbiAgICB0aGlzLl9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gICAgdGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBudWxsO1xuICAgIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbmF0aXZlRXZlbnQnLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKCduYXRpdmVFdmVudCcsIG51bGwpKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaXNEZWZhdWx0UHJldmVudGVkJywgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbignaXNEZWZhdWx0UHJldmVudGVkJywgZnVuY3Rpb25UaGF0UmV0dXJuc0ZhbHNlKSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2lzUHJvcGFnYXRpb25TdG9wcGVkJywgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbignaXNQcm9wYWdhdGlvblN0b3BwZWQnLCBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2UpKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncHJldmVudERlZmF1bHQnLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKCdwcmV2ZW50RGVmYXVsdCcsIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3N0b3BQcm9wYWdhdGlvbicsIGdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24oJ3N0b3BQcm9wYWdhdGlvbicsIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgfVxuICB9XG59KTtcblxuU3ludGhldGljRXZlbnQuSW50ZXJmYWNlID0gRXZlbnRJbnRlcmZhY2U7XG5cbi8qKlxuICogSGVscGVyIHRvIHJlZHVjZSBib2lsZXJwbGF0ZSB3aGVuIGNyZWF0aW5nIHN1YmNsYXNzZXMuXG4gKi9cblN5bnRoZXRpY0V2ZW50LmV4dGVuZCA9IGZ1bmN0aW9uIChJbnRlcmZhY2UpIHtcbiAgdmFyIFN1cGVyID0gdGhpcztcblxuICB2YXIgRSA9IGZ1bmN0aW9uICgpIHt9O1xuICBFLnByb3RvdHlwZSA9IFN1cGVyLnByb3RvdHlwZTtcbiAgdmFyIHByb3RvdHlwZSA9IG5ldyBFKCk7XG5cbiAgZnVuY3Rpb24gQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbiAgX2Fzc2lnbihwcm90b3R5cGUsIENsYXNzLnByb3RvdHlwZSk7XG4gIENsYXNzLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2xhc3M7XG5cbiAgQ2xhc3MuSW50ZXJmYWNlID0gX2Fzc2lnbih7fSwgU3VwZXIuSW50ZXJmYWNlLCBJbnRlcmZhY2UpO1xuICBDbGFzcy5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gIGFkZEV2ZW50UG9vbGluZ1RvKENsYXNzKTtcblxuICByZXR1cm4gQ2xhc3M7XG59O1xuXG5hZGRFdmVudFBvb2xpbmdUbyhTeW50aGV0aWNFdmVudCk7XG5cbi8qKlxuICogSGVscGVyIHRvIG51bGxpZnkgc3ludGhldGljRXZlbnQgaW5zdGFuY2UgcHJvcGVydGllcyB3aGVuIGRlc3RydWN0aW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BOYW1lXG4gKiBAcGFyYW0gez9vYmplY3R9IGdldFZhbFxuICogQHJldHVybiB7b2JqZWN0fSBkZWZpbmVQcm9wZXJ0eSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbihwcm9wTmFtZSwgZ2V0VmFsKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIGdldFZhbCA9PT0gJ2Z1bmN0aW9uJztcbiAgcmV0dXJuIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgc2V0OiBzZXQsXG4gICAgZ2V0OiBnZXRcbiAgfTtcblxuICBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgdmFyIGFjdGlvbiA9IGlzRnVuY3Rpb24gPyAnc2V0dGluZyB0aGUgbWV0aG9kJyA6ICdzZXR0aW5nIHRoZSBwcm9wZXJ0eSc7XG4gICAgd2FybihhY3Rpb24sICdUaGlzIGlzIGVmZmVjdGl2ZWx5IGEgbm8tb3AnKTtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0KCkge1xuICAgIHZhciBhY3Rpb24gPSBpc0Z1bmN0aW9uID8gJ2FjY2Vzc2luZyB0aGUgbWV0aG9kJyA6ICdhY2Nlc3NpbmcgdGhlIHByb3BlcnR5JztcbiAgICB2YXIgcmVzdWx0ID0gaXNGdW5jdGlvbiA/ICdUaGlzIGlzIGEgbm8tb3AgZnVuY3Rpb24nIDogJ1RoaXMgaXMgc2V0IHRvIG51bGwnO1xuICAgIHdhcm4oYWN0aW9uLCByZXN1bHQpO1xuICAgIHJldHVybiBnZXRWYWw7XG4gIH1cblxuICBmdW5jdGlvbiB3YXJuKGFjdGlvbiwgcmVzdWx0KSB7XG4gICAgdmFyIHdhcm5pbmdDb25kaXRpb24gPSBmYWxzZTtcbiAgICAhd2FybmluZ0NvbmRpdGlvbiA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgXCJUaGlzIHN5bnRoZXRpYyBldmVudCBpcyByZXVzZWQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuIElmIHlvdSdyZSBzZWVpbmcgdGhpcywgXCIgKyBcInlvdSdyZSAlcyBgJXNgIG9uIGEgcmVsZWFzZWQvbnVsbGlmaWVkIHN5bnRoZXRpYyBldmVudC4gJXMuIFwiICsgJ0lmIHlvdSBtdXN0IGtlZXAgdGhlIG9yaWdpbmFsIHN5bnRoZXRpYyBldmVudCBhcm91bmQsIHVzZSBldmVudC5wZXJzaXN0KCkuICcgKyAnU2VlIGh0dHBzOi8vZmIubWUvcmVhY3QtZXZlbnQtcG9vbGluZyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLCBhY3Rpb24sIHByb3BOYW1lLCByZXN1bHQpIDogdm9pZCAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFBvb2xlZEV2ZW50KGRpc3BhdGNoQ29uZmlnLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlSW5zdCkge1xuICB2YXIgRXZlbnRDb25zdHJ1Y3RvciA9IHRoaXM7XG4gIGlmIChFdmVudENvbnN0cnVjdG9yLmV2ZW50UG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBFdmVudENvbnN0cnVjdG9yLmV2ZW50UG9vbC5wb3AoKTtcbiAgICBFdmVudENvbnN0cnVjdG9yLmNhbGwoaW5zdGFuY2UsIGRpc3BhdGNoQ29uZmlnLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlSW5zdCk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG4gIHJldHVybiBuZXcgRXZlbnRDb25zdHJ1Y3RvcihkaXNwYXRjaENvbmZpZywgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUluc3QpO1xufVxuXG5mdW5jdGlvbiByZWxlYXNlUG9vbGVkRXZlbnQoZXZlbnQpIHtcbiAgdmFyIEV2ZW50Q29uc3RydWN0b3IgPSB0aGlzO1xuICAhKGV2ZW50IGluc3RhbmNlb2YgRXZlbnRDb25zdHJ1Y3RvcikgPyBpbnZhcmlhbnQoZmFsc2UsICdUcnlpbmcgdG8gcmVsZWFzZSBhbiBldmVudCBpbnN0YW5jZSBpbnRvIGEgcG9vbCBvZiBhIGRpZmZlcmVudCB0eXBlLicpIDogdm9pZCAwO1xuICBldmVudC5kZXN0cnVjdG9yKCk7XG4gIGlmIChFdmVudENvbnN0cnVjdG9yLmV2ZW50UG9vbC5sZW5ndGggPCBFVkVOVF9QT09MX1NJWkUpIHtcbiAgICBFdmVudENvbnN0cnVjdG9yLmV2ZW50UG9vbC5wdXNoKGV2ZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRFdmVudFBvb2xpbmdUbyhFdmVudENvbnN0cnVjdG9yKSB7XG4gIEV2ZW50Q29uc3RydWN0b3IuZXZlbnRQb29sID0gW107XG4gIEV2ZW50Q29uc3RydWN0b3IuZ2V0UG9vbGVkID0gZ2V0UG9vbGVkRXZlbnQ7XG4gIEV2ZW50Q29uc3RydWN0b3IucmVsZWFzZSA9IHJlbGVhc2VQb29sZWRFdmVudDtcbn1cblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWNvbXBvc2l0aW9uZXZlbnRzXG4gKi9cbnZhciBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50ID0gU3ludGhldGljRXZlbnQuZXh0ZW5kKHtcbiAgZGF0YTogbnVsbFxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDEzMTEwNVxuICogICAgICAvI2V2ZW50cy1pbnB1dGV2ZW50c1xuICovXG52YXIgU3ludGhldGljSW5wdXRFdmVudCA9IFN5bnRoZXRpY0V2ZW50LmV4dGVuZCh7XG4gIGRhdGE6IG51bGxcbn0pO1xuXG52YXIgRU5EX0tFWUNPREVTID0gWzksIDEzLCAyNywgMzJdOyAvLyBUYWIsIFJldHVybiwgRXNjLCBTcGFjZVxudmFyIFNUQVJUX0tFWUNPREUgPSAyMjk7XG5cbnZhciBjYW5Vc2VDb21wb3NpdGlvbkV2ZW50ID0gY2FuVXNlRE9NICYmICdDb21wb3NpdGlvbkV2ZW50JyBpbiB3aW5kb3c7XG5cbnZhciBkb2N1bWVudE1vZGUgPSBudWxsO1xuaWYgKGNhblVzZURPTSAmJiAnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkge1xuICBkb2N1bWVudE1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG59XG5cbi8vIFdlYmtpdCBvZmZlcnMgYSB2ZXJ5IHVzZWZ1bCBgdGV4dElucHV0YCBldmVudCB0aGF0IGNhbiBiZSB1c2VkIHRvXG4vLyBkaXJlY3RseSByZXByZXNlbnQgYGJlZm9yZUlucHV0YC4gVGhlIElFIGB0ZXh0aW5wdXRgIGV2ZW50IGlzIG5vdCBhc1xuLy8gdXNlZnVsLCBzbyB3ZSBkb24ndCB1c2UgaXQuXG52YXIgY2FuVXNlVGV4dElucHV0RXZlbnQgPSBjYW5Vc2VET00gJiYgJ1RleHRFdmVudCcgaW4gd2luZG93ICYmICFkb2N1bWVudE1vZGU7XG5cbi8vIEluIElFOSssIHdlIGhhdmUgYWNjZXNzIHRvIGNvbXBvc2l0aW9uIGV2ZW50cywgYnV0IHRoZSBkYXRhIHN1cHBsaWVkXG4vLyBieSB0aGUgbmF0aXZlIGNvbXBvc2l0aW9uZW5kIGV2ZW50IG1heSBiZSBpbmNvcnJlY3QuIEphcGFuZXNlIGlkZW9ncmFwaGljXG4vLyBzcGFjZXMsIGZvciBpbnN0YW5jZSAoXFx1MzAwMCkgYXJlIG5vdCByZWNvcmRlZCBjb3JyZWN0bHkuXG52YXIgdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPSBjYW5Vc2VET00gJiYgKCFjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IHx8IGRvY3VtZW50TW9kZSAmJiBkb2N1bWVudE1vZGUgPiA4ICYmIGRvY3VtZW50TW9kZSA8PSAxMSk7XG5cbnZhciBTUEFDRUJBUl9DT0RFID0gMzI7XG52YXIgU1BBQ0VCQVJfQ0hBUiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoU1BBQ0VCQVJfQ09ERSk7XG5cbi8vIEV2ZW50cyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSBuYW1lcy5cbnZhciBldmVudFR5cGVzID0ge1xuICBiZWZvcmVJbnB1dDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25CZWZvcmVJbnB1dCcsXG4gICAgICBjYXB0dXJlZDogJ29uQmVmb3JlSW5wdXRDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbVE9QX0NPTVBPU0lUSU9OX0VORCwgVE9QX0tFWV9QUkVTUywgVE9QX1RFWFRfSU5QVVQsIFRPUF9QQVNURV1cbiAgfSxcbiAgY29tcG9zaXRpb25FbmQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uQ29tcG9zaXRpb25FbmQnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZSdcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1RPUF9CTFVSLCBUT1BfQ09NUE9TSVRJT05fRU5ELCBUT1BfS0VZX0RPV04sIFRPUF9LRVlfUFJFU1MsIFRPUF9LRVlfVVAsIFRPUF9NT1VTRV9ET1dOXVxuICB9LFxuICBjb21wb3NpdGlvblN0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvbkNvbXBvc2l0aW9uU3RhcnQnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbVE9QX0JMVVIsIFRPUF9DT01QT1NJVElPTl9TVEFSVCwgVE9QX0tFWV9ET1dOLCBUT1BfS0VZX1BSRVNTLCBUT1BfS0VZX1VQLCBUT1BfTU9VU0VfRE9XTl1cbiAgfSxcbiAgY29tcG9zaXRpb25VcGRhdGU6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uQ29tcG9zaXRpb25VcGRhdGUnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZSdcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1RPUF9CTFVSLCBUT1BfQ09NUE9TSVRJT05fVVBEQVRFLCBUT1BfS0VZX0RPV04sIFRPUF9LRVlfUFJFU1MsIFRPUF9LRVlfVVAsIFRPUF9NT1VTRV9ET1dOXVxuICB9XG59O1xuXG4vLyBUcmFjayB3aGV0aGVyIHdlJ3ZlIGV2ZXIgaGFuZGxlZCBhIGtleXByZXNzIG9uIHRoZSBzcGFjZSBrZXkuXG52YXIgaGFzU3BhY2VLZXlwcmVzcyA9IGZhbHNlO1xuXG4vKipcbiAqIFJldHVybiB3aGV0aGVyIGEgbmF0aXZlIGtleXByZXNzIGV2ZW50IGlzIGFzc3VtZWQgdG8gYmUgYSBjb21tYW5kLlxuICogVGhpcyBpcyByZXF1aXJlZCBiZWNhdXNlIEZpcmVmb3ggZmlyZXMgYGtleXByZXNzYCBldmVudHMgZm9yIGtleSBjb21tYW5kc1xuICogKGN1dCwgY29weSwgc2VsZWN0LWFsbCwgZXRjLikgZXZlbiB0aG91Z2ggbm8gY2hhcmFjdGVyIGlzIGluc2VydGVkLlxuICovXG5mdW5jdGlvbiBpc0tleXByZXNzQ29tbWFuZChuYXRpdmVFdmVudCkge1xuICByZXR1cm4gKG5hdGl2ZUV2ZW50LmN0cmxLZXkgfHwgbmF0aXZlRXZlbnQuYWx0S2V5IHx8IG5hdGl2ZUV2ZW50Lm1ldGFLZXkpICYmXG4gIC8vIGN0cmxLZXkgJiYgYWx0S2V5IGlzIGVxdWl2YWxlbnQgdG8gQWx0R3IsIGFuZCBpcyBub3QgYSBjb21tYW5kLlxuICAhKG5hdGl2ZUV2ZW50LmN0cmxLZXkgJiYgbmF0aXZlRXZlbnQuYWx0S2V5KTtcbn1cblxuLyoqXG4gKiBUcmFuc2xhdGUgbmF0aXZlIHRvcCBsZXZlbCBldmVudHMgaW50byBldmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgVE9QX0NPTVBPU0lUSU9OX1NUQVJUOlxuICAgICAgcmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcbiAgICBjYXNlIFRPUF9DT01QT1NJVElPTl9FTkQ6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZDtcbiAgICBjYXNlIFRPUF9DT01QT1NJVElPTl9VUERBVEU6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblVwZGF0ZTtcbiAgfVxufVxuXG4vKipcbiAqIERvZXMgb3VyIGZhbGxiYWNrIGJlc3QtZ3Vlc3MgbW9kZWwgdGhpbmsgdGhpcyBldmVudCBzaWduaWZpZXMgdGhhdFxuICogY29tcG9zaXRpb24gaGFzIGJlZ3VuP1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uU3RhcnQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSBUT1BfS0VZX0RPV04gJiYgbmF0aXZlRXZlbnQua2V5Q29kZSA9PT0gU1RBUlRfS0VZQ09ERTtcbn1cblxuLyoqXG4gKiBEb2VzIG91ciBmYWxsYmFjayBtb2RlIHRoaW5rIHRoYXQgdGhpcyBldmVudCBpcyB0aGUgZW5kIG9mIGNvbXBvc2l0aW9uP1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICBjYXNlIFRPUF9LRVlfVVA6XG4gICAgICAvLyBDb21tYW5kIGtleXMgaW5zZXJ0IG9yIGNsZWFyIElNRSBpbnB1dC5cbiAgICAgIHJldHVybiBFTkRfS0VZQ09ERVMuaW5kZXhPZihuYXRpdmVFdmVudC5rZXlDb2RlKSAhPT0gLTE7XG4gICAgY2FzZSBUT1BfS0VZX0RPV046XG4gICAgICAvLyBFeHBlY3QgSU1FIGtleUNvZGUgb24gZWFjaCBrZXlkb3duLiBJZiB3ZSBnZXQgYW55IG90aGVyXG4gICAgICAvLyBjb2RlIHdlIG11c3QgaGF2ZSBleGl0ZWQgZWFybGllci5cbiAgICAgIHJldHVybiBuYXRpdmVFdmVudC5rZXlDb2RlICE9PSBTVEFSVF9LRVlDT0RFO1xuICAgIGNhc2UgVE9QX0tFWV9QUkVTUzpcbiAgICBjYXNlIFRPUF9NT1VTRV9ET1dOOlxuICAgIGNhc2UgVE9QX0JMVVI6XG4gICAgICAvLyBFdmVudHMgYXJlIG5vdCBwb3NzaWJsZSB3aXRob3V0IGNhbmNlbGxpbmcgSU1FLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEdvb2dsZSBJbnB1dCBUb29scyBwcm92aWRlcyBjb21wb3NpdGlvbiBkYXRhIHZpYSBhIEN1c3RvbUV2ZW50LFxuICogd2l0aCB0aGUgYGRhdGFgIHByb3BlcnR5IHBvcHVsYXRlZCBpbiB0aGUgYGRldGFpbGAgb2JqZWN0LiBJZiB0aGlzXG4gKiBpcyBhdmFpbGFibGUgb24gdGhlIGV2ZW50IG9iamVjdCwgdXNlIGl0LiBJZiBub3QsIHRoaXMgaXMgYSBwbGFpblxuICogY29tcG9zaXRpb24gZXZlbnQgYW5kIHdlIGhhdmUgbm90aGluZyBzcGVjaWFsIHRvIGV4dHJhY3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBkZXRhaWwgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gIGlmICh0eXBlb2YgZGV0YWlsID09PSAnb2JqZWN0JyAmJiAnZGF0YScgaW4gZGV0YWlsKSB7XG4gICAgcmV0dXJuIGRldGFpbC5kYXRhO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgY29tcG9zaXRpb24gZXZlbnQgd2FzIHRyaWdnZXJlZCBieSBLb3JlYW4gSU1FLlxuICogT3VyIGZhbGxiYWNrIG1vZGUgZG9lcyBub3Qgd29yayB3ZWxsIHdpdGggSUUncyBLb3JlYW4gSU1FLFxuICogc28ganVzdCB1c2UgbmF0aXZlIGNvbXBvc2l0aW9uIGV2ZW50cyB3aGVuIEtvcmVhbiBJTUUgaXMgdXNlZC5cbiAqIEFsdGhvdWdoIENvbXBvc2l0aW9uRXZlbnQubG9jYWxlIHByb3BlcnR5IGlzIGRlcHJlY2F0ZWQsXG4gKiBpdCBpcyBhdmFpbGFibGUgaW4gSUUsIHdoZXJlIG91ciBmYWxsYmFjayBtb2RlIGlzIGVuYWJsZWQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1VzaW5nS29yZWFuSU1FKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiBuYXRpdmVFdmVudC5sb2NhbGUgPT09ICdrbyc7XG59XG5cbi8vIFRyYWNrIHRoZSBjdXJyZW50IElNRSBjb21wb3NpdGlvbiBzdGF0dXMsIGlmIGFueS5cbnZhciBpc0NvbXBvc2luZyA9IGZhbHNlO1xuXG4vKipcbiAqIEByZXR1cm4gez9vYmplY3R9IEEgU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdENvbXBvc2l0aW9uRXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgdmFyIGV2ZW50VHlwZSA9IHZvaWQgMDtcbiAgdmFyIGZhbGxiYWNrRGF0YSA9IHZvaWQgMDtcblxuICBpZiAoY2FuVXNlQ29tcG9zaXRpb25FdmVudCkge1xuICAgIGV2ZW50VHlwZSA9IGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSk7XG4gIH0gZWxzZSBpZiAoIWlzQ29tcG9zaW5nKSB7XG4gICAgaWYgKGlzRmFsbGJhY2tDb21wb3NpdGlvblN0YXJ0KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgICBldmVudFR5cGUgPSBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQ7XG4gIH1cblxuICBpZiAoIWV2ZW50VHlwZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhICYmICFpc1VzaW5nS29yZWFuSU1FKG5hdGl2ZUV2ZW50KSkge1xuICAgIC8vIFRoZSBjdXJyZW50IGNvbXBvc2l0aW9uIGlzIHN0b3JlZCBzdGF0aWNhbGx5IGFuZCBtdXN0IG5vdCBiZVxuICAgIC8vIG92ZXJ3cml0dGVuIHdoaWxlIGNvbXBvc2l0aW9uIGNvbnRpbnVlcy5cbiAgICBpZiAoIWlzQ29tcG9zaW5nICYmIGV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0KSB7XG4gICAgICBpc0NvbXBvc2luZyA9IGluaXRpYWxpemUobmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kKSB7XG4gICAgICBpZiAoaXNDb21wb3NpbmcpIHtcbiAgICAgICAgZmFsbGJhY2tEYXRhID0gZ2V0RGF0YSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICBpZiAoZmFsbGJhY2tEYXRhKSB7XG4gICAgLy8gSW5qZWN0IGRhdGEgZ2VuZXJhdGVkIGZyb20gZmFsbGJhY2sgcGF0aCBpbnRvIHRoZSBzeW50aGV0aWMgZXZlbnQuXG4gICAgLy8gVGhpcyBtYXRjaGVzIHRoZSBwcm9wZXJ0eSBvZiBuYXRpdmUgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZS5cbiAgICBldmVudC5kYXRhID0gZmFsbGJhY2tEYXRhO1xuICB9IGVsc2Uge1xuICAgIHZhciBjdXN0b21EYXRhID0gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCk7XG4gICAgaWYgKGN1c3RvbURhdGEgIT09IG51bGwpIHtcbiAgICAgIGV2ZW50LmRhdGEgPSBjdXN0b21EYXRhO1xuICAgIH1cbiAgfVxuXG4gIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtUb3BMZXZlbFR5cGV9IHRvcExldmVsVHlwZSBOdW1iZXIgZnJvbSBgVG9wTGV2ZWxUeXBlYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBzdHJpbmcgY29ycmVzcG9uZGluZyB0byB0aGlzIGBiZWZvcmVJbnB1dGAgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgVE9QX0NPTVBPU0lUSU9OX0VORDpcbiAgICAgIHJldHVybiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBjYXNlIFRPUF9LRVlfUFJFU1M6XG4gICAgICAvKipcbiAgICAgICAqIElmIG5hdGl2ZSBgdGV4dElucHV0YCBldmVudHMgYXJlIGF2YWlsYWJsZSwgb3VyIGdvYWwgaXMgdG8gbWFrZVxuICAgICAgICogdXNlIG9mIHRoZW0uIEhvd2V2ZXIsIHRoZXJlIGlzIGEgc3BlY2lhbCBjYXNlOiB0aGUgc3BhY2ViYXIga2V5LlxuICAgICAgICogSW4gV2Via2l0LCBwcmV2ZW50aW5nIGRlZmF1bHQgb24gYSBzcGFjZWJhciBgdGV4dElucHV0YCBldmVudFxuICAgICAgICogY2FuY2VscyBjaGFyYWN0ZXIgaW5zZXJ0aW9uLCBidXQgaXQgKmFsc28qIGNhdXNlcyB0aGUgYnJvd3NlclxuICAgICAgICogdG8gZmFsbCBiYWNrIHRvIGl0cyBkZWZhdWx0IHNwYWNlYmFyIGJlaGF2aW9yIG9mIHNjcm9sbGluZyB0aGVcbiAgICAgICAqIHBhZ2UuXG4gICAgICAgKlxuICAgICAgICogVHJhY2tpbmcgYXQ6XG4gICAgICAgKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzU1MTAzXG4gICAgICAgKlxuICAgICAgICogVG8gYXZvaWQgdGhpcyBpc3N1ZSwgdXNlIHRoZSBrZXlwcmVzcyBldmVudCBhcyBpZiBubyBgdGV4dElucHV0YFxuICAgICAgICogZXZlbnQgaXMgYXZhaWxhYmxlLlxuICAgICAgICovXG4gICAgICB2YXIgd2hpY2ggPSBuYXRpdmVFdmVudC53aGljaDtcbiAgICAgIGlmICh3aGljaCAhPT0gU1BBQ0VCQVJfQ09ERSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaGFzU3BhY2VLZXlwcmVzcyA9IHRydWU7XG4gICAgICByZXR1cm4gU1BBQ0VCQVJfQ0hBUjtcblxuICAgIGNhc2UgVE9QX1RFWFRfSU5QVVQ6XG4gICAgICAvLyBSZWNvcmQgdGhlIGNoYXJhY3RlcnMgdG8gYmUgYWRkZWQgdG8gdGhlIERPTS5cbiAgICAgIHZhciBjaGFycyA9IG5hdGl2ZUV2ZW50LmRhdGE7XG5cbiAgICAgIC8vIElmIGl0J3MgYSBzcGFjZWJhciBjaGFyYWN0ZXIsIGFzc3VtZSB0aGF0IHdlIGhhdmUgYWxyZWFkeSBoYW5kbGVkXG4gICAgICAvLyBpdCBhdCB0aGUga2V5cHJlc3MgbGV2ZWwgYW5kIGJhaWwgaW1tZWRpYXRlbHkuIEFuZHJvaWQgQ2hyb21lXG4gICAgICAvLyBkb2Vzbid0IGdpdmUgdXMga2V5Y29kZXMsIHNvIHdlIG5lZWQgdG8gaWdub3JlIGl0LlxuICAgICAgaWYgKGNoYXJzID09PSBTUEFDRUJBUl9DSEFSICYmIGhhc1NwYWNlS2V5cHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjaGFycztcblxuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBGb3Igb3RoZXIgbmF0aXZlIGV2ZW50IHR5cGVzLCBkbyBub3RoaW5nLlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBGb3IgYnJvd3NlcnMgdGhhdCBkbyBub3QgcHJvdmlkZSB0aGUgYHRleHRJbnB1dGAgZXZlbnQsIGV4dHJhY3QgdGhlXG4gKiBhcHByb3ByaWF0ZSBzdHJpbmcgdG8gdXNlIGZvciBTeW50aGV0aWNJbnB1dEV2ZW50LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3BMZXZlbFR5cGUgTnVtYmVyIGZyb20gYFRvcExldmVsRXZlbnRUeXBlc2AuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgZmFsbGJhY2sgc3RyaW5nIGZvciB0aGlzIGBiZWZvcmVJbnB1dGAgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIC8vIElmIHdlIGFyZSBjdXJyZW50bHkgY29tcG9zaW5nIChJTUUpIGFuZCB1c2luZyBhIGZhbGxiYWNrIHRvIGRvIHNvLFxuICAvLyB0cnkgdG8gZXh0cmFjdCB0aGUgY29tcG9zZWQgY2hhcmFjdGVycyBmcm9tIHRoZSBmYWxsYmFjayBvYmplY3QuXG4gIC8vIElmIGNvbXBvc2l0aW9uIGV2ZW50IGlzIGF2YWlsYWJsZSwgd2UgZXh0cmFjdCBhIHN0cmluZyBvbmx5IGF0XG4gIC8vIGNvbXBvc2l0aW9uZXZlbnQsIG90aGVyd2lzZSBleHRyYWN0IGl0IGF0IGZhbGxiYWNrIGV2ZW50cy5cbiAgaWYgKGlzQ29tcG9zaW5nKSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gVE9QX0NPTVBPU0lUSU9OX0VORCB8fCAhY2FuVXNlQ29tcG9zaXRpb25FdmVudCAmJiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICAgIHZhciBjaGFycyA9IGdldERhdGEoKTtcbiAgICAgIHJlc2V0KCk7XG4gICAgICBpc0NvbXBvc2luZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGNoYXJzO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSBUT1BfUEFTVEU6XG4gICAgICAvLyBJZiBhIHBhc3RlIGV2ZW50IG9jY3VycyBhZnRlciBhIGtleXByZXNzLCB0aHJvdyBvdXQgdGhlIGlucHV0XG4gICAgICAvLyBjaGFycy4gUGFzdGUgZXZlbnRzIHNob3VsZCBub3QgbGVhZCB0byBCZWZvcmVJbnB1dCBldmVudHMuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIFRPUF9LRVlfUFJFU1M6XG4gICAgICAvKipcbiAgICAgICAqIEFzIG9mIHYyNywgRmlyZWZveCBtYXkgZmlyZSBrZXlwcmVzcyBldmVudHMgZXZlbiB3aGVuIG5vIGNoYXJhY3RlclxuICAgICAgICogd2lsbCBiZSBpbnNlcnRlZC4gQSBmZXcgcG9zc2liaWxpdGllczpcbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgYDBgLiBBcnJvdyBrZXlzLCBFc2Mga2V5LCBldGMuXG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgbm8gY2hhciBpcyBhdmFpbGFibGUuXG4gICAgICAgKiAgIEV4OiAnQWx0R3IgKyBkYCBpbiBQb2xpc2guIFRoZXJlIGlzIG5vIG1vZGlmaWVkIGNoYXJhY3RlciBmb3JcbiAgICAgICAqICAgdGhpcyBrZXkgY29tYmluYXRpb24gYW5kIG5vIGNoYXJhY3RlciBpcyBpbnNlcnRlZCBpbnRvIHRoZVxuICAgICAgICogICBkb2N1bWVudCwgYnV0IEZGIGZpcmVzIHRoZSBrZXlwcmVzcyBmb3IgY2hhciBjb2RlIGAxMDBgIGFueXdheS5cbiAgICAgICAqICAgTm8gYGlucHV0YCBldmVudCB3aWxsIG9jY3VyLlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyB0aGUgcHJlc3NlZCBrZXkgY29kZSwgYnV0IGEgY29tbWFuZCBjb21iaW5hdGlvbiBpc1xuICAgICAgICogICBiZWluZyB1c2VkLiBFeDogYENtZCtDYC4gTm8gY2hhcmFjdGVyIGlzIGluc2VydGVkLCBhbmQgbm9cbiAgICAgICAqICAgYGlucHV0YCBldmVudCB3aWxsIG9jY3VyLlxuICAgICAgICovXG4gICAgICBpZiAoIWlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSkge1xuICAgICAgICAvLyBJRSBmaXJlcyB0aGUgYGtleXByZXNzYCBldmVudCB3aGVuIGEgdXNlciB0eXBlcyBhbiBlbW9qaSB2aWFcbiAgICAgICAgLy8gVG91Y2gga2V5Ym9hcmQgb2YgV2luZG93cy4gIEluIHN1Y2ggYSBjYXNlLCB0aGUgYGNoYXJgIHByb3BlcnR5XG4gICAgICAgIC8vIGhvbGRzIGFuIGVtb2ppIGNoYXJhY3RlciBsaWtlIGBcXHVEODNEXFx1REUwQWAuICBCZWNhdXNlIGl0cyBsZW5ndGhcbiAgICAgICAgLy8gaXMgMiwgdGhlIHByb3BlcnR5IGB3aGljaGAgZG9lcyBub3QgcmVwcmVzZW50IGFuIGVtb2ppIGNvcnJlY3RseS5cbiAgICAgICAgLy8gSW4gc3VjaCBhIGNhc2UsIHdlIGRpcmVjdGx5IHJldHVybiB0aGUgYGNoYXJgIHByb3BlcnR5IGluc3RlYWQgb2ZcbiAgICAgICAgLy8gdXNpbmcgYHdoaWNoYC5cbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmNoYXIgJiYgbmF0aXZlRXZlbnQuY2hhci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcmV0dXJuIG5hdGl2ZUV2ZW50LmNoYXI7XG4gICAgICAgIH0gZWxzZSBpZiAobmF0aXZlRXZlbnQud2hpY2gpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShuYXRpdmVFdmVudC53aGljaCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgVE9QX0NPTVBPU0lUSU9OX0VORDpcbiAgICAgIHJldHVybiB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSAmJiAhaXNVc2luZ0tvcmVhbklNRShuYXRpdmVFdmVudCkgPyBudWxsIDogbmF0aXZlRXZlbnQuZGF0YTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBFeHRyYWN0IGEgU3ludGhldGljSW5wdXRFdmVudCBmb3IgYGJlZm9yZUlucHV0YCwgYmFzZWQgb24gZWl0aGVyIG5hdGl2ZVxuICogYHRleHRJbnB1dGAgb3IgZmFsbGJhY2sgYmVoYXZpb3IuXG4gKlxuICogQHJldHVybiB7P29iamVjdH0gQSBTeW50aGV0aWNJbnB1dEV2ZW50LlxuICovXG5mdW5jdGlvbiBleHRyYWN0QmVmb3JlSW5wdXRFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICB2YXIgY2hhcnMgPSB2b2lkIDA7XG5cbiAgaWYgKGNhblVzZVRleHRJbnB1dEV2ZW50KSB7XG4gICAgY2hhcnMgPSBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICB9IGVsc2Uge1xuICAgIGNoYXJzID0gZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpO1xuICB9XG5cbiAgLy8gSWYgbm8gY2hhcmFjdGVycyBhcmUgYmVpbmcgaW5zZXJ0ZWQsIG5vIEJlZm9yZUlucHV0IGV2ZW50IHNob3VsZFxuICAvLyBiZSBmaXJlZC5cbiAgaWYgKCFjaGFycykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGV2ZW50ID0gU3ludGhldGljSW5wdXRFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5iZWZvcmVJbnB1dCwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICBldmVudC5kYXRhID0gY2hhcnM7XG4gIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQ7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGBvbkJlZm9yZUlucHV0YCBldmVudCB0byBtYXRjaFxuICogaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAxMzExMDUvI2V2ZW50cy1pbnB1dGV2ZW50cy5cbiAqXG4gKiBUaGlzIGV2ZW50IHBsdWdpbiBpcyBiYXNlZCBvbiB0aGUgbmF0aXZlIGB0ZXh0SW5wdXRgIGV2ZW50XG4gKiBhdmFpbGFibGUgaW4gQ2hyb21lLCBTYWZhcmksIE9wZXJhLCBhbmQgSUUuIFRoaXMgZXZlbnQgZmlyZXMgYWZ0ZXJcbiAqIGBvbktleVByZXNzYCBhbmQgYG9uQ29tcG9zaXRpb25FbmRgLCBidXQgYmVmb3JlIGBvbklucHV0YC5cbiAqXG4gKiBgYmVmb3JlSW5wdXRgIGlzIHNwZWMnZCBidXQgbm90IGltcGxlbWVudGVkIGluIGFueSBicm93c2VycywgYW5kXG4gKiB0aGUgYGlucHV0YCBldmVudCBkb2VzIG5vdCBwcm92aWRlIGFueSB1c2VmdWwgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBoYXNcbiAqIGFjdHVhbGx5IGJlZW4gYWRkZWQsIGNvbnRyYXJ5IHRvIHRoZSBzcGVjLiBUaHVzLCBgdGV4dElucHV0YCBpcyB0aGUgYmVzdFxuICogYXZhaWxhYmxlIGV2ZW50IHRvIGlkZW50aWZ5IHRoZSBjaGFyYWN0ZXJzIHRoYXQgaGF2ZSBhY3R1YWxseSBiZWVuIGluc2VydGVkXG4gKiBpbnRvIHRoZSB0YXJnZXQgbm9kZS5cbiAqXG4gKiBUaGlzIHBsdWdpbiBpcyBhbHNvIHJlc3BvbnNpYmxlIGZvciBlbWl0dGluZyBgY29tcG9zaXRpb25gIGV2ZW50cywgdGh1c1xuICogYWxsb3dpbmcgdXMgdG8gc2hhcmUgY29tcG9zaXRpb24gZmFsbGJhY2sgY29kZSBmb3IgYm90aCBgYmVmb3JlSW5wdXRgIGFuZFxuICogYGNvbXBvc2l0aW9uYCBldmVudCB0eXBlcy5cbiAqL1xudmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW4gPSB7XG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGNvbXBvc2l0aW9uID0gZXh0cmFjdENvbXBvc2l0aW9uRXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gICAgdmFyIGJlZm9yZUlucHV0ID0gZXh0cmFjdEJlZm9yZUlucHV0RXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gICAgaWYgKGNvbXBvc2l0aW9uID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gYmVmb3JlSW5wdXQ7XG4gICAgfVxuXG4gICAgaWYgKGJlZm9yZUlucHV0ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gY29tcG9zaXRpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIFtjb21wb3NpdGlvbiwgYmVmb3JlSW5wdXRdO1xuICB9XG59O1xuXG4vLyBVc2UgdG8gcmVzdG9yZSBjb250cm9sbGVkIHN0YXRlIGFmdGVyIGEgY2hhbmdlIGV2ZW50IGhhcyBmaXJlZC5cblxudmFyIHJlc3RvcmVJbXBsID0gbnVsbDtcbnZhciByZXN0b3JlVGFyZ2V0ID0gbnVsbDtcbnZhciByZXN0b3JlUXVldWUgPSBudWxsO1xuXG5mdW5jdGlvbiByZXN0b3JlU3RhdGVPZlRhcmdldCh0YXJnZXQpIHtcbiAgLy8gV2UgcGVyZm9ybSB0aGlzIHRyYW5zbGF0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIGV2ZW50IGxvb3Agc28gdGhhdCB3ZVxuICAvLyBhbHdheXMgcmVjZWl2ZSB0aGUgY29ycmVjdCBmaWJlciBoZXJlXG4gIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW5zdGFuY2VGcm9tTm9kZSh0YXJnZXQpO1xuICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAvLyBVbm1vdW50ZWRcbiAgICByZXR1cm47XG4gIH1cbiAgISh0eXBlb2YgcmVzdG9yZUltcGwgPT09ICdmdW5jdGlvbicpID8gaW52YXJpYW50KGZhbHNlLCAnc2V0UmVzdG9yZUltcGxlbWVudGF0aW9uKCkgbmVlZHMgdG8gYmUgY2FsbGVkIHRvIGhhbmRsZSBhIHRhcmdldCBmb3IgY29udHJvbGxlZCBldmVudHMuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gIHZhciBwcm9wcyA9IGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUoaW50ZXJuYWxJbnN0YW5jZS5zdGF0ZU5vZGUpO1xuICByZXN0b3JlSW1wbChpbnRlcm5hbEluc3RhbmNlLnN0YXRlTm9kZSwgaW50ZXJuYWxJbnN0YW5jZS50eXBlLCBwcm9wcyk7XG59XG5cbmZ1bmN0aW9uIHNldFJlc3RvcmVJbXBsZW1lbnRhdGlvbihpbXBsKSB7XG4gIHJlc3RvcmVJbXBsID0gaW1wbDtcbn1cblxuZnVuY3Rpb24gZW5xdWV1ZVN0YXRlUmVzdG9yZSh0YXJnZXQpIHtcbiAgaWYgKHJlc3RvcmVUYXJnZXQpIHtcbiAgICBpZiAocmVzdG9yZVF1ZXVlKSB7XG4gICAgICByZXN0b3JlUXVldWUucHVzaCh0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN0b3JlUXVldWUgPSBbdGFyZ2V0XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVzdG9yZVRhcmdldCA9IHRhcmdldDtcbiAgfVxufVxuXG5mdW5jdGlvbiBuZWVkc1N0YXRlUmVzdG9yZSgpIHtcbiAgcmV0dXJuIHJlc3RvcmVUYXJnZXQgIT09IG51bGwgfHwgcmVzdG9yZVF1ZXVlICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiByZXN0b3JlU3RhdGVJZk5lZWRlZCgpIHtcbiAgaWYgKCFyZXN0b3JlVGFyZ2V0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciB0YXJnZXQgPSByZXN0b3JlVGFyZ2V0O1xuICB2YXIgcXVldWVkVGFyZ2V0cyA9IHJlc3RvcmVRdWV1ZTtcbiAgcmVzdG9yZVRhcmdldCA9IG51bGw7XG4gIHJlc3RvcmVRdWV1ZSA9IG51bGw7XG5cbiAgcmVzdG9yZVN0YXRlT2ZUYXJnZXQodGFyZ2V0KTtcbiAgaWYgKHF1ZXVlZFRhcmdldHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlZFRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3RvcmVTdGF0ZU9mVGFyZ2V0KHF1ZXVlZFRhcmdldHNbaV0pO1xuICAgIH1cbiAgfVxufVxuXG4vLyBVc2VkIGFzIGEgd2F5IHRvIGNhbGwgYmF0Y2hlZFVwZGF0ZXMgd2hlbiB3ZSBkb24ndCBoYXZlIGEgcmVmZXJlbmNlIHRvXG4vLyB0aGUgcmVuZGVyZXIuIFN1Y2ggYXMgd2hlbiB3ZSdyZSBkaXNwYXRjaGluZyBldmVudHMgb3IgaWYgdGhpcmQgcGFydHlcbi8vIGxpYnJhcmllcyBuZWVkIHRvIGNhbGwgYmF0Y2hlZFVwZGF0ZXMuIEV2ZW50dWFsbHksIHRoaXMgQVBJIHdpbGwgZ28gYXdheSB3aGVuXG4vLyBldmVyeXRoaW5nIGlzIGJhdGNoZWQgYnkgZGVmYXVsdC4gV2UnbGwgdGhlbiBoYXZlIGEgc2ltaWxhciBBUEkgdG8gb3B0LW91dCBvZlxuLy8gc2NoZWR1bGVkIHdvcmsgYW5kIGluc3RlYWQgZG8gc3luY2hyb25vdXMgd29yay5cblxuLy8gRGVmYXVsdHNcbnZhciBfYmF0Y2hlZFVwZGF0ZXNJbXBsID0gZnVuY3Rpb24gKGZuLCBib29ra2VlcGluZykge1xuICByZXR1cm4gZm4oYm9va2tlZXBpbmcpO1xufTtcbnZhciBfaW50ZXJhY3RpdmVVcGRhdGVzSW1wbCA9IGZ1bmN0aW9uIChmbiwgYSwgYikge1xuICByZXR1cm4gZm4oYSwgYik7XG59O1xudmFyIF9mbHVzaEludGVyYWN0aXZlVXBkYXRlc0ltcGwgPSBmdW5jdGlvbiAoKSB7fTtcblxudmFyIGlzQmF0Y2hpbmcgPSBmYWxzZTtcbmZ1bmN0aW9uIGJhdGNoZWRVcGRhdGVzKGZuLCBib29ra2VlcGluZykge1xuICBpZiAoaXNCYXRjaGluZykge1xuICAgIC8vIElmIHdlIGFyZSBjdXJyZW50bHkgaW5zaWRlIGFub3RoZXIgYmF0Y2gsIHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdFxuICAgIC8vIGZ1bGx5IGNvbXBsZXRlcyBiZWZvcmUgcmVzdG9yaW5nIHN0YXRlLlxuICAgIHJldHVybiBmbihib29ra2VlcGluZyk7XG4gIH1cbiAgaXNCYXRjaGluZyA9IHRydWU7XG4gIHRyeSB7XG4gICAgcmV0dXJuIF9iYXRjaGVkVXBkYXRlc0ltcGwoZm4sIGJvb2trZWVwaW5nKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBIZXJlIHdlIHdhaXQgdW50aWwgYWxsIHVwZGF0ZXMgaGF2ZSBwcm9wYWdhdGVkLCB3aGljaCBpcyBpbXBvcnRhbnRcbiAgICAvLyB3aGVuIHVzaW5nIGNvbnRyb2xsZWQgY29tcG9uZW50cyB3aXRoaW4gbGF5ZXJzOlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTY5OFxuICAgIC8vIFRoZW4gd2UgcmVzdG9yZSBzdGF0ZSBvZiBhbnkgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAgaXNCYXRjaGluZyA9IGZhbHNlO1xuICAgIHZhciBjb250cm9sbGVkQ29tcG9uZW50c0hhdmVQZW5kaW5nVXBkYXRlcyA9IG5lZWRzU3RhdGVSZXN0b3JlKCk7XG4gICAgaWYgKGNvbnRyb2xsZWRDb21wb25lbnRzSGF2ZVBlbmRpbmdVcGRhdGVzKSB7XG4gICAgICAvLyBJZiBhIGNvbnRyb2xsZWQgZXZlbnQgd2FzIGZpcmVkLCB3ZSBtYXkgbmVlZCB0byByZXN0b3JlIHRoZSBzdGF0ZSBvZlxuICAgICAgLy8gdGhlIERPTSBub2RlIGJhY2sgdG8gdGhlIGNvbnRyb2xsZWQgdmFsdWUuIFRoaXMgaXMgbmVjZXNzYXJ5IHdoZW4gUmVhY3RcbiAgICAgIC8vIGJhaWxzIG91dCBvZiB0aGUgdXBkYXRlIHdpdGhvdXQgdG91Y2hpbmcgdGhlIERPTS5cbiAgICAgIF9mbHVzaEludGVyYWN0aXZlVXBkYXRlc0ltcGwoKTtcbiAgICAgIHJlc3RvcmVTdGF0ZUlmTmVlZGVkKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGludGVyYWN0aXZlVXBkYXRlcyhmbiwgYSwgYikge1xuICByZXR1cm4gX2ludGVyYWN0aXZlVXBkYXRlc0ltcGwoZm4sIGEsIGIpO1xufVxuXG5cblxuZnVuY3Rpb24gc2V0QmF0Y2hpbmdJbXBsZW1lbnRhdGlvbihiYXRjaGVkVXBkYXRlc0ltcGwsIGludGVyYWN0aXZlVXBkYXRlc0ltcGwsIGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzSW1wbCkge1xuICBfYmF0Y2hlZFVwZGF0ZXNJbXBsID0gYmF0Y2hlZFVwZGF0ZXNJbXBsO1xuICBfaW50ZXJhY3RpdmVVcGRhdGVzSW1wbCA9IGludGVyYWN0aXZlVXBkYXRlc0ltcGw7XG4gIF9mbHVzaEludGVyYWN0aXZlVXBkYXRlc0ltcGwgPSBmbHVzaEludGVyYWN0aXZlVXBkYXRlc0ltcGw7XG59XG5cbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS90aGUtaW5wdXQtZWxlbWVudC5odG1sI2lucHV0LXR5cGUtYXR0ci1zdW1tYXJ5XG4gKi9cbnZhciBzdXBwb3J0ZWRJbnB1dFR5cGVzID0ge1xuICBjb2xvcjogdHJ1ZSxcbiAgZGF0ZTogdHJ1ZSxcbiAgZGF0ZXRpbWU6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWUsXG4gIGVtYWlsOiB0cnVlLFxuICBtb250aDogdHJ1ZSxcbiAgbnVtYmVyOiB0cnVlLFxuICBwYXNzd29yZDogdHJ1ZSxcbiAgcmFuZ2U6IHRydWUsXG4gIHNlYXJjaDogdHJ1ZSxcbiAgdGVsOiB0cnVlLFxuICB0ZXh0OiB0cnVlLFxuICB0aW1lOiB0cnVlLFxuICB1cmw6IHRydWUsXG4gIHdlZWs6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGlzVGV4dElucHV0RWxlbWVudChlbGVtKSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW0gJiYgZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnaW5wdXQnKSB7XG4gICAgcmV0dXJuICEhc3VwcG9ydGVkSW5wdXRUeXBlc1tlbGVtLnR5cGVdO1xuICB9XG5cbiAgaWYgKG5vZGVOYW1lID09PSAndGV4dGFyZWEnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogSFRNTCBub2RlVHlwZSB2YWx1ZXMgdGhhdCByZXByZXNlbnQgdGhlIHR5cGUgb2YgdGhlIG5vZGVcbiAqL1xuXG52YXIgRUxFTUVOVF9OT0RFID0gMTtcbnZhciBURVhUX05PREUgPSAzO1xudmFyIENPTU1FTlRfTk9ERSA9IDg7XG52YXIgRE9DVU1FTlRfTk9ERSA9IDk7XG52YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERSA9IDExO1xuXG4vKipcbiAqIEdldHMgdGhlIHRhcmdldCBub2RlIGZyb20gYSBuYXRpdmUgYnJvd3NlciBldmVudCBieSBhY2NvdW50aW5nIGZvclxuICogaW5jb25zaXN0ZW5jaWVzIGluIGJyb3dzZXIgRE9NIEFQSXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7RE9NRXZlbnRUYXJnZXR9IFRhcmdldCBub2RlLlxuICovXG5mdW5jdGlvbiBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCkge1xuICAvLyBGYWxsYmFjayB0byBuYXRpdmVFdmVudC5zcmNFbGVtZW50IGZvciBJRTlcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMjUwNlxuICB2YXIgdGFyZ2V0ID0gbmF0aXZlRXZlbnQudGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQgfHwgd2luZG93O1xuXG4gIC8vIE5vcm1hbGl6ZSBTVkcgPHVzZT4gZWxlbWVudCBldmVudHMgIzQ5NjNcbiAgaWYgKHRhcmdldC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCkge1xuICAgIHRhcmdldCA9IHRhcmdldC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudDtcbiAgfVxuXG4gIC8vIFNhZmFyaSBtYXkgZmlyZSBldmVudHMgb24gdGV4dCBub2RlcyAoTm9kZS5URVhUX05PREUgaXMgMykuXG4gIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG4gIHJldHVybiB0YXJnZXQubm9kZVR5cGUgPT09IFRFWFRfTk9ERSA/IHRhcmdldC5wYXJlbnROb2RlIDogdGFyZ2V0O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhbiBldmVudCBpcyBzdXBwb3J0ZWQgaW4gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGVudmlyb25tZW50LlxuICpcbiAqIE5PVEU6IFRoaXMgd2lsbCBub3Qgd29yayBjb3JyZWN0bHkgZm9yIG5vbi1nZW5lcmljIGV2ZW50cyBzdWNoIGFzIGBjaGFuZ2VgLFxuICogYHJlc2V0YCwgYGxvYWRgLCBgZXJyb3JgLCBhbmQgYHNlbGVjdGAuXG4gKlxuICogQm9ycm93cyBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lU3VmZml4IEV2ZW50IG5hbWUsIGUuZy4gXCJjbGlja1wiLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkLlxuICogQGludGVybmFsXG4gKiBAbGljZW5zZSBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiAqL1xuZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZChldmVudE5hbWVTdWZmaXgpIHtcbiAgaWYgKCFjYW5Vc2VET00pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgdmFyIGlzU3VwcG9ydGVkID0gZXZlbnROYW1lIGluIGRvY3VtZW50O1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG5cbmZ1bmN0aW9uIGlzQ2hlY2thYmxlKGVsZW0pIHtcbiAgdmFyIHR5cGUgPSBlbGVtLnR5cGU7XG4gIHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWU7XG4gIHJldHVybiBub2RlTmFtZSAmJiBub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnICYmICh0eXBlID09PSAnY2hlY2tib3gnIHx8IHR5cGUgPT09ICdyYWRpbycpO1xufVxuXG5mdW5jdGlvbiBnZXRUcmFja2VyKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuX3ZhbHVlVHJhY2tlcjtcbn1cblxuZnVuY3Rpb24gZGV0YWNoVHJhY2tlcihub2RlKSB7XG4gIG5vZGUuX3ZhbHVlVHJhY2tlciA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlRnJvbU5vZGUobm9kZSkge1xuICB2YXIgdmFsdWUgPSAnJztcbiAgaWYgKCFub2RlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgaWYgKGlzQ2hlY2thYmxlKG5vZGUpKSB7XG4gICAgdmFsdWUgPSBub2RlLmNoZWNrZWQgPyAndHJ1ZScgOiAnZmFsc2UnO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gbm9kZS52YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gdHJhY2tWYWx1ZU9uTm9kZShub2RlKSB7XG4gIHZhciB2YWx1ZUZpZWxkID0gaXNDaGVja2FibGUobm9kZSkgPyAnY2hlY2tlZCcgOiAndmFsdWUnO1xuICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iobm9kZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHZhbHVlRmllbGQpO1xuXG4gIHZhciBjdXJyZW50VmFsdWUgPSAnJyArIG5vZGVbdmFsdWVGaWVsZF07XG5cbiAgLy8gaWYgc29tZW9uZSBoYXMgYWxyZWFkeSBkZWZpbmVkIGEgdmFsdWUgb3IgU2FmYXJpLCB0aGVuIGJhaWxcbiAgLy8gYW5kIGRvbid0IHRyYWNrIHZhbHVlIHdpbGwgY2F1c2Ugb3ZlciByZXBvcnRpbmcgb2YgY2hhbmdlcyxcbiAgLy8gYnV0IGl0J3MgYmV0dGVyIHRoZW4gYSBoYXJkIGZhaWx1cmVcbiAgLy8gKG5lZWRlZCBmb3IgY2VydGFpbiB0ZXN0cyB0aGF0IHNweU9uIGlucHV0IHZhbHVlcyBhbmQgU2FmYXJpKVxuICBpZiAobm9kZS5oYXNPd25Qcm9wZXJ0eSh2YWx1ZUZpZWxkKSB8fCB0eXBlb2YgZGVzY3JpcHRvciA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGRlc2NyaXB0b3IuZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBkZXNjcmlwdG9yLnNldCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgZ2V0ID0gZGVzY3JpcHRvci5nZXQsXG4gICAgICBzZXQgPSBkZXNjcmlwdG9yLnNldDtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9kZSwgdmFsdWVGaWVsZCwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXQuY2FsbCh0aGlzKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSAnJyArIHZhbHVlO1xuICAgICAgc2V0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH1cbiAgfSk7XG4gIC8vIFdlIGNvdWxkJ3ZlIHBhc3NlZCB0aGlzIHRoZSBmaXJzdCB0aW1lXG4gIC8vIGJ1dCBpdCB0cmlnZ2VycyBhIGJ1ZyBpbiBJRTExIGFuZCBFZGdlIDE0LzE1LlxuICAvLyBDYWxsaW5nIGRlZmluZVByb3BlcnR5KCkgYWdhaW4gc2hvdWxkIGJlIGVxdWl2YWxlbnQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTE3NjhcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vZGUsIHZhbHVlRmllbGQsIHtcbiAgICBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGVcbiAgfSk7XG5cbiAgdmFyIHRyYWNrZXIgPSB7XG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBjdXJyZW50VmFsdWU7XG4gICAgfSxcbiAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSAnJyArIHZhbHVlO1xuICAgIH0sXG4gICAgc3RvcFRyYWNraW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBkZXRhY2hUcmFja2VyKG5vZGUpO1xuICAgICAgZGVsZXRlIG5vZGVbdmFsdWVGaWVsZF07XG4gICAgfVxuICB9O1xuICByZXR1cm4gdHJhY2tlcjtcbn1cblxuZnVuY3Rpb24gdHJhY2sobm9kZSkge1xuICBpZiAoZ2V0VHJhY2tlcihub2RlKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFRPRE86IE9uY2UgaXQncyBqdXN0IEZpYmVyIHdlIGNhbiBtb3ZlIHRoaXMgdG8gbm9kZS5fd3JhcHBlclN0YXRlXG4gIG5vZGUuX3ZhbHVlVHJhY2tlciA9IHRyYWNrVmFsdWVPbk5vZGUobm9kZSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKG5vZGUpIHtcbiAgaWYgKCFub2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHRyYWNrZXIgPSBnZXRUcmFja2VyKG5vZGUpO1xuICAvLyBpZiB0aGVyZSBpcyBubyB0cmFja2VyIGF0IHRoaXMgcG9pbnQgaXQncyB1bmxpa2VseVxuICAvLyB0aGF0IHRyeWluZyBhZ2FpbiB3aWxsIHN1Y2NlZWRcbiAgaWYgKCF0cmFja2VyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgbGFzdFZhbHVlID0gdHJhY2tlci5nZXRWYWx1ZSgpO1xuICB2YXIgbmV4dFZhbHVlID0gZ2V0VmFsdWVGcm9tTm9kZShub2RlKTtcbiAgaWYgKG5leHRWYWx1ZSAhPT0gbGFzdFZhbHVlKSB7XG4gICAgdHJhY2tlci5zZXRWYWx1ZShuZXh0VmFsdWUpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxudmFyIFJlYWN0U2hhcmVkSW50ZXJuYWxzID0gUmVhY3QuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG5cbnZhciBCRUZPUkVfU0xBU0hfUkUgPSAvXiguKilbXFxcXFxcL10vO1xuXG52YXIgZGVzY3JpYmVDb21wb25lbnRGcmFtZSA9IGZ1bmN0aW9uIChuYW1lLCBzb3VyY2UsIG93bmVyTmFtZSkge1xuICB2YXIgc291cmNlSW5mbyA9ICcnO1xuICBpZiAoc291cmNlKSB7XG4gICAgdmFyIHBhdGggPSBzb3VyY2UuZmlsZU5hbWU7XG4gICAgdmFyIGZpbGVOYW1lID0gcGF0aC5yZXBsYWNlKEJFRk9SRV9TTEFTSF9SRSwgJycpO1xuICAgIHtcbiAgICAgIC8vIEluIERFViwgaW5jbHVkZSBjb2RlIGZvciBhIGNvbW1vbiBzcGVjaWFsIGNhc2U6XG4gICAgICAvLyBwcmVmZXIgXCJmb2xkZXIvaW5kZXguanNcIiBpbnN0ZWFkIG9mIGp1c3QgXCJpbmRleC5qc1wiLlxuICAgICAgaWYgKC9eaW5kZXhcXC4vLnRlc3QoZmlsZU5hbWUpKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHBhdGgubWF0Y2goQkVGT1JFX1NMQVNIX1JFKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdmFyIHBhdGhCZWZvcmVTbGFzaCA9IG1hdGNoWzFdO1xuICAgICAgICAgIGlmIChwYXRoQmVmb3JlU2xhc2gpIHtcbiAgICAgICAgICAgIHZhciBmb2xkZXJOYW1lID0gcGF0aEJlZm9yZVNsYXNoLnJlcGxhY2UoQkVGT1JFX1NMQVNIX1JFLCAnJyk7XG4gICAgICAgICAgICBmaWxlTmFtZSA9IGZvbGRlck5hbWUgKyAnLycgKyBmaWxlTmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlSW5mbyA9ICcgKGF0ICcgKyBmaWxlTmFtZSArICc6JyArIHNvdXJjZS5saW5lTnVtYmVyICsgJyknO1xuICB9IGVsc2UgaWYgKG93bmVyTmFtZSkge1xuICAgIHNvdXJjZUluZm8gPSAnIChjcmVhdGVkIGJ5ICcgKyBvd25lck5hbWUgKyAnKSc7XG4gIH1cbiAgcmV0dXJuICdcXG4gICAgaW4gJyArIChuYW1lIHx8ICdVbmtub3duJykgKyBzb3VyY2VJbmZvO1xufTtcblxuLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50LWxpa2UgdHlwZXMuIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2xcbi8vIG5vciBwb2x5ZmlsbCwgdGhlbiBhIHBsYWluIG51bWJlciBpcyB1c2VkIGZvciBwZXJmb3JtYW5jZS5cbnZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG52YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wb3J0YWwnKSA6IDB4ZWFjYTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZnJhZ21lbnQnKSA6IDB4ZWFjYjtcbnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3RyaWN0X21vZGUnKSA6IDB4ZWFjYztcbnZhciBSRUFDVF9QUk9GSUxFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucHJvZmlsZXInKSA6IDB4ZWFkMjtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucHJvdmlkZXInKSA6IDB4ZWFjZDtcbnZhciBSRUFDVF9DT05URVhUX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5jb250ZXh0JykgOiAweGVhY2U7XG52YXIgUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5jb25jdXJyZW50X21vZGUnKSA6IDB4ZWFjZjtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKSA6IDB4ZWFkMDtcbnZhciBSRUFDVF9TVVNQRU5TRV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2UnKSA6IDB4ZWFkMTtcbnZhciBSRUFDVF9NRU1PX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5tZW1vJykgOiAweGVhZDM7XG52YXIgUkVBQ1RfTEFaWV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QubGF6eScpIDogMHhlYWQ0O1xuXG52YXIgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG52YXIgRkFVWF9JVEVSQVRPUl9TWU1CT0wgPSAnQEBpdGVyYXRvcic7XG5cbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobWF5YmVJdGVyYWJsZSA9PT0gbnVsbCB8fCB0eXBlb2YgbWF5YmVJdGVyYWJsZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgbWF5YmVJdGVyYXRvciA9IE1BWUJFX0lURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW01BWUJFX0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF07XG4gIGlmICh0eXBlb2YgbWF5YmVJdGVyYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBtYXliZUl0ZXJhdG9yO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgUGVuZGluZyA9IDA7XG52YXIgUmVzb2x2ZWQgPSAxO1xudmFyIFJlamVjdGVkID0gMjtcblxuZnVuY3Rpb24gcmVmaW5lUmVzb2x2ZWRMYXp5Q29tcG9uZW50KGxhenlDb21wb25lbnQpIHtcbiAgcmV0dXJuIGxhenlDb21wb25lbnQuX3N0YXR1cyA9PT0gUmVzb2x2ZWQgPyBsYXp5Q29tcG9uZW50Ll9yZXN1bHQgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRXcmFwcGVkTmFtZShvdXRlclR5cGUsIGlubmVyVHlwZSwgd3JhcHBlck5hbWUpIHtcbiAgdmFyIGZ1bmN0aW9uTmFtZSA9IGlubmVyVHlwZS5kaXNwbGF5TmFtZSB8fCBpbm5lclR5cGUubmFtZSB8fCAnJztcbiAgcmV0dXJuIG91dGVyVHlwZS5kaXNwbGF5TmFtZSB8fCAoZnVuY3Rpb25OYW1lICE9PSAnJyA/IHdyYXBwZXJOYW1lICsgJygnICsgZnVuY3Rpb25OYW1lICsgJyknIDogd3JhcHBlck5hbWUpO1xufVxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKHR5cGUpIHtcbiAgaWYgKHR5cGUgPT0gbnVsbCkge1xuICAgIC8vIEhvc3Qgcm9vdCwgdGV4dCBub2RlIG9yIGp1c3QgaW52YWxpZCB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHtcbiAgICBpZiAodHlwZW9mIHR5cGUudGFnID09PSAnbnVtYmVyJykge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnUmVjZWl2ZWQgYW4gdW5leHBlY3RlZCBvYmplY3QgaW4gZ2V0Q29tcG9uZW50TmFtZSgpLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IG51bGw7XG4gIH1cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU6XG4gICAgICByZXR1cm4gJ0NvbmN1cnJlbnRNb2RlJztcbiAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICByZXR1cm4gJ0ZyYWdtZW50JztcbiAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgcmV0dXJuICdQb3J0YWwnO1xuICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgIHJldHVybiAnUHJvZmlsZXInO1xuICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgIHJldHVybiAnU3RyaWN0TW9kZSc7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuICdTdXNwZW5zZSc7XG4gIH1cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0Jykge1xuICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgIHJldHVybiAnQ29udGV4dC5Db25zdW1lcic7XG4gICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgIHJldHVybiAnQ29udGV4dC5Qcm92aWRlcic7XG4gICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgIHJldHVybiBnZXRXcmFwcGVkTmFtZSh0eXBlLCB0eXBlLnJlbmRlciwgJ0ZvcndhcmRSZWYnKTtcbiAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZSh0eXBlLnR5cGUpO1xuICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgdGhlbmFibGUgPSB0eXBlO1xuICAgICAgICAgIHZhciByZXNvbHZlZFRoZW5hYmxlID0gcmVmaW5lUmVzb2x2ZWRMYXp5Q29tcG9uZW50KHRoZW5hYmxlKTtcbiAgICAgICAgICBpZiAocmVzb2x2ZWRUaGVuYWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWUocmVzb2x2ZWRUaGVuYWJsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWU7XG5cbmZ1bmN0aW9uIGRlc2NyaWJlRmliZXIoZmliZXIpIHtcbiAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICBjYXNlIEluZGV0ZXJtaW5hdGVDb21wb25lbnQ6XG4gICAgY2FzZSBMYXp5Q29tcG9uZW50OlxuICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgY2FzZSBNb2RlOlxuICAgICAgdmFyIG93bmVyID0gZmliZXIuX2RlYnVnT3duZXI7XG4gICAgICB2YXIgc291cmNlID0gZmliZXIuX2RlYnVnU291cmNlO1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGZpYmVyLnR5cGUpO1xuICAgICAgdmFyIG93bmVyTmFtZSA9IG51bGw7XG4gICAgICBpZiAob3duZXIpIHtcbiAgICAgICAgb3duZXJOYW1lID0gZ2V0Q29tcG9uZW50TmFtZShvd25lci50eXBlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZXNjcmliZUNvbXBvbmVudEZyYW1lKG5hbWUsIHNvdXJjZSwgb3duZXJOYW1lKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZCh3b3JrSW5Qcm9ncmVzcykge1xuICB2YXIgaW5mbyA9ICcnO1xuICB2YXIgbm9kZSA9IHdvcmtJblByb2dyZXNzO1xuICBkbyB7XG4gICAgaW5mbyArPSBkZXNjcmliZUZpYmVyKG5vZGUpO1xuICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgfSB3aGlsZSAobm9kZSk7XG4gIHJldHVybiBpbmZvO1xufVxuXG52YXIgY3VycmVudCA9IG51bGw7XG52YXIgcGhhc2UgPSBudWxsO1xuXG5mdW5jdGlvbiBnZXRDdXJyZW50RmliZXJPd25lck5hbWVJbkRldk9yTnVsbCgpIHtcbiAge1xuICAgIGlmIChjdXJyZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIG93bmVyID0gY3VycmVudC5fZGVidWdPd25lcjtcbiAgICBpZiAob3duZXIgIT09IG51bGwgJiYgdHlwZW9mIG93bmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWUob3duZXIudHlwZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50RmliZXJTdGFja0luRGV2KCkge1xuICB7XG4gICAgaWYgKGN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgLy8gU2FmZSBiZWNhdXNlIGlmIGN1cnJlbnQgZmliZXIgZXhpc3RzLCB3ZSBhcmUgcmVjb25jaWxpbmcsXG4gICAgLy8gYW5kIGl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgdGhlIHdvcmstaW4tcHJvZ3Jlc3MgdmVyc2lvbi5cbiAgICByZXR1cm4gZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKGN1cnJlbnQpO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gcmVzZXRDdXJyZW50RmliZXIoKSB7XG4gIHtcbiAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldEN1cnJlbnRTdGFjayA9IG51bGw7XG4gICAgY3VycmVudCA9IG51bGw7XG4gICAgcGhhc2UgPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldEN1cnJlbnRGaWJlcihmaWJlcikge1xuICB7XG4gICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRDdXJyZW50U3RhY2sgPSBnZXRDdXJyZW50RmliZXJTdGFja0luRGV2O1xuICAgIGN1cnJlbnQgPSBmaWJlcjtcbiAgICBwaGFzZSA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0Q3VycmVudFBoYXNlKGxpZmVDeWNsZVBoYXNlKSB7XG4gIHtcbiAgICBwaGFzZSA9IGxpZmVDeWNsZVBoYXNlO1xuICB9XG59XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gd2FybmluZ1dpdGhvdXRTdGFjayQxO1xuXG57XG4gIHdhcm5pbmcgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTtcbiAgICB2YXIgc3RhY2sgPSBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldFN0YWNrQWRkZW5kdW0oKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvd2FybmluZy1hbmQtaW52YXJpYW50LWFyZ3NcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgd2FybmluZ1dpdGhvdXRTdGFjayQxLmFwcGx5KHVuZGVmaW5lZCwgW2ZhbHNlLCBmb3JtYXQgKyAnJXMnXS5jb25jYXQoYXJncywgW3N0YWNrXSkpO1xuICB9O1xufVxuXG52YXIgd2FybmluZyQxID0gd2FybmluZztcblxuLy8gQSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4vLyBJdCBpcyBoYW5kbGVkIGJ5IFJlYWN0IHNlcGFyYXRlbHkgYW5kIHNob3VsZG4ndCBiZSB3cml0dGVuIHRvIHRoZSBET00uXG52YXIgUkVTRVJWRUQgPSAwO1xuXG4vLyBBIHNpbXBsZSBzdHJpbmcgYXR0cmlidXRlLlxuLy8gQXR0cmlidXRlcyB0aGF0IGFyZW4ndCBpbiB0aGUgd2hpdGVsaXN0IGFyZSBwcmVzdW1lZCB0byBoYXZlIHRoaXMgdHlwZS5cbnZhciBTVFJJTkcgPSAxO1xuXG4vLyBBIHN0cmluZyBhdHRyaWJ1dGUgdGhhdCBhY2NlcHRzIGJvb2xlYW5zIGluIFJlYWN0LiBJbiBIVE1MLCB0aGVzZSBhcmUgY2FsbGVkXG4vLyBcImVudW1lcmF0ZWRcIiBhdHRyaWJ1dGVzIHdpdGggXCJ0cnVlXCIgYW5kIFwiZmFsc2VcIiBhcyBwb3NzaWJsZSB2YWx1ZXMuXG4vLyBXaGVuIHRydWUsIGl0IHNob3VsZCBiZSBzZXQgdG8gYSBcInRydWVcIiBzdHJpbmcuXG4vLyBXaGVuIGZhbHNlLCBpdCBzaG91bGQgYmUgc2V0IHRvIGEgXCJmYWxzZVwiIHN0cmluZy5cbnZhciBCT09MRUFOSVNIX1NUUklORyA9IDI7XG5cbi8vIEEgcmVhbCBib29sZWFuIGF0dHJpYnV0ZS5cbi8vIFdoZW4gdHJ1ZSwgaXQgc2hvdWxkIGJlIHByZXNlbnQgKHNldCBlaXRoZXIgdG8gYW4gZW1wdHkgc3RyaW5nIG9yIGl0cyBuYW1lKS5cbi8vIFdoZW4gZmFsc2UsIGl0IHNob3VsZCBiZSBvbWl0dGVkLlxudmFyIEJPT0xFQU4gPSAzO1xuXG4vLyBBbiBhdHRyaWJ1dGUgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIGZsYWcgYXMgd2VsbCBhcyB3aXRoIGEgdmFsdWUuXG4vLyBXaGVuIHRydWUsIGl0IHNob3VsZCBiZSBwcmVzZW50IChzZXQgZWl0aGVyIHRvIGFuIGVtcHR5IHN0cmluZyBvciBpdHMgbmFtZSkuXG4vLyBXaGVuIGZhbHNlLCBpdCBzaG91bGQgYmUgb21pdHRlZC5cbi8vIEZvciBhbnkgb3RoZXIgdmFsdWUsIHNob3VsZCBiZSBwcmVzZW50IHdpdGggdGhhdCB2YWx1ZS5cbnZhciBPVkVSTE9BREVEX0JPT0xFQU4gPSA0O1xuXG4vLyBBbiBhdHRyaWJ1dGUgdGhhdCBtdXN0IGJlIG51bWVyaWMgb3IgcGFyc2UgYXMgYSBudW1lcmljLlxuLy8gV2hlbiBmYWxzeSwgaXQgc2hvdWxkIGJlIHJlbW92ZWQuXG52YXIgTlVNRVJJQyA9IDU7XG5cbi8vIEFuIGF0dHJpYnV0ZSB0aGF0IG11c3QgYmUgcG9zaXRpdmUgbnVtZXJpYyBvciBwYXJzZSBhcyBhIHBvc2l0aXZlIG51bWVyaWMuXG4vLyBXaGVuIGZhbHN5LCBpdCBzaG91bGQgYmUgcmVtb3ZlZC5cbnZhciBQT1NJVElWRV9OVU1FUklDID0gNjtcblxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xudmFyIEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIgPSAnOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRCc7XG4vKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cbnZhciBBVFRSSUJVVEVfTkFNRV9DSEFSID0gQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiArICdcXFxcLS4wLTlcXFxcdTAwQjdcXFxcdTAzMDAtXFxcXHUwMzZGXFxcXHUyMDNGLVxcXFx1MjA0MCc7XG5cblxudmFyIFJPT1RfQVRUUklCVVRFX05BTUUgPSAnZGF0YS1yZWFjdHJvb3QnO1xudmFyIFZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYID0gbmV3IFJlZ0V4cCgnXlsnICsgQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiArICddWycgKyBBVFRSSUJVVEVfTkFNRV9DSEFSICsgJ10qJCcpO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUgPSB7fTtcbnZhciB2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gaXNBdHRyaWJ1dGVOYW1lU2FmZShhdHRyaWJ1dGVOYW1lKSB7XG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSwgYXR0cmlidXRlTmFtZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlLCBhdHRyaWJ1dGVOYW1lKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVgudGVzdChhdHRyaWJ1dGVOYW1lKSkge1xuICAgIHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZVthdHRyaWJ1dGVOYW1lXSA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZVthdHRyaWJ1dGVOYW1lXSA9IHRydWU7XG4gIHtcbiAgICB3YXJuaW5nJDEoZmFsc2UsICdJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lOiBgJXNgJywgYXR0cmlidXRlTmFtZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzaG91bGRJZ25vcmVBdHRyaWJ1dGUobmFtZSwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICBpZiAocHJvcGVydHlJbmZvICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SW5mby50eXBlID09PSBSRVNFUlZFRDtcbiAgfVxuICBpZiAoaXNDdXN0b21Db21wb25lbnRUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKG5hbWUubGVuZ3RoID4gMiAmJiAobmFtZVswXSA9PT0gJ28nIHx8IG5hbWVbMF0gPT09ICdPJykgJiYgKG5hbWVbMV0gPT09ICduJyB8fCBuYW1lWzFdID09PSAnTicpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzaG91bGRSZW1vdmVBdHRyaWJ1dGVXaXRoV2FybmluZyhuYW1lLCB2YWx1ZSwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICBpZiAocHJvcGVydHlJbmZvICE9PSBudWxsICYmIHByb3BlcnR5SW5mby50eXBlID09PSBSRVNFUlZFRCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAvLyAkRmxvd0lzc3VlIHN5bWJvbCBpcyBwZXJmZWN0bHkgdmFsaWQgaGVyZVxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wZXJ0eUluZm8gIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gIXByb3BlcnR5SW5mby5hY2NlcHRzQm9vbGVhbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZWZpeCA9IG5hbWUudG9Mb3dlckNhc2UoKS5zbGljZSgwLCA1KTtcbiAgICAgICAgICByZXR1cm4gcHJlZml4ICE9PSAnZGF0YS0nICYmIHByZWZpeCAhPT0gJ2FyaWEtJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2hvdWxkUmVtb3ZlQXR0cmlidXRlKG5hbWUsIHZhbHVlLCBwcm9wZXJ0eUluZm8sIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHNob3VsZFJlbW92ZUF0dHJpYnV0ZVdpdGhXYXJuaW5nKG5hbWUsIHZhbHVlLCBwcm9wZXJ0eUluZm8sIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAocHJvcGVydHlJbmZvICE9PSBudWxsKSB7XG4gICAgc3dpdGNoIChwcm9wZXJ0eUluZm8udHlwZSkge1xuICAgICAgY2FzZSBCT09MRUFOOlxuICAgICAgICByZXR1cm4gIXZhbHVlO1xuICAgICAgY2FzZSBPVkVSTE9BREVEX0JPT0xFQU46XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gZmFsc2U7XG4gICAgICBjYXNlIE5VTUVSSUM6XG4gICAgICAgIHJldHVybiBpc05hTih2YWx1ZSk7XG4gICAgICBjYXNlIFBPU0lUSVZFX05VTUVSSUM6XG4gICAgICAgIHJldHVybiBpc05hTih2YWx1ZSkgfHwgdmFsdWUgPCAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFByb3BlcnR5SW5mbyhuYW1lKSB7XG4gIHJldHVybiBwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpID8gcHJvcGVydGllc1tuYW1lXSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCB0eXBlLCBtdXN0VXNlUHJvcGVydHksIGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZU5hbWVzcGFjZSkge1xuICB0aGlzLmFjY2VwdHNCb29sZWFucyA9IHR5cGUgPT09IEJPT0xFQU5JU0hfU1RSSU5HIHx8IHR5cGUgPT09IEJPT0xFQU4gfHwgdHlwZSA9PT0gT1ZFUkxPQURFRF9CT09MRUFOO1xuICB0aGlzLmF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lO1xuICB0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZSA9IGF0dHJpYnV0ZU5hbWVzcGFjZTtcbiAgdGhpcy5tdXN0VXNlUHJvcGVydHkgPSBtdXN0VXNlUHJvcGVydHk7XG4gIHRoaXMucHJvcGVydHlOYW1lID0gbmFtZTtcbiAgdGhpcy50eXBlID0gdHlwZTtcbn1cblxuLy8gV2hlbiBhZGRpbmcgYXR0cmlidXRlcyB0byB0aGlzIGxpc3QsIGJlIHN1cmUgdG8gYWxzbyBhZGQgdGhlbSB0b1xuLy8gdGhlIGBwb3NzaWJsZVN0YW5kYXJkTmFtZXNgIG1vZHVsZSB0byBlbnN1cmUgY2FzaW5nIGFuZCBpbmNvcnJlY3Rcbi8vIG5hbWUgd2FybmluZ3MuXG52YXIgcHJvcGVydGllcyA9IHt9O1xuXG4vLyBUaGVzZSBwcm9wcyBhcmUgcmVzZXJ2ZWQgYnkgUmVhY3QuIFRoZXkgc2hvdWxkbid0IGJlIHdyaXR0ZW4gdG8gdGhlIERPTS5cblsnY2hpbGRyZW4nLCAnZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwnLFxuLy8gVE9ETzogVGhpcyBwcmV2ZW50cyB0aGUgYXNzaWdubWVudCBvZiBkZWZhdWx0VmFsdWUgdG8gcmVndWxhclxuLy8gZWxlbWVudHMgKG5vdCBqdXN0IGlucHV0cykuIE5vdyB0aGF0IFJlYWN0RE9NSW5wdXQgYXNzaWducyB0byB0aGVcbi8vIGRlZmF1bHRWYWx1ZSBwcm9wZXJ0eSAtLSBkbyB3ZSBuZWVkIHRoaXM/XG4nZGVmYXVsdFZhbHVlJywgJ2RlZmF1bHRDaGVja2VkJywgJ2lubmVySFRNTCcsICdzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcnLCAnc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJywgJ3N0eWxlJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBSRVNFUlZFRCwgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwpO1xufSAvLyBhdHRyaWJ1dGVOYW1lc3BhY2Vcbik7XG5cbi8vIEEgZmV3IFJlYWN0IHN0cmluZyBhdHRyaWJ1dGVzIGhhdmUgYSBkaWZmZXJlbnQgbmFtZS5cbi8vIFRoaXMgaXMgYSBtYXBwaW5nIGZyb20gUmVhY3QgcHJvcCBuYW1lcyB0byB0aGUgYXR0cmlidXRlIG5hbWVzLlxuW1snYWNjZXB0Q2hhcnNldCcsICdhY2NlcHQtY2hhcnNldCddLCBbJ2NsYXNzTmFtZScsICdjbGFzcyddLCBbJ2h0bWxGb3InLCAnZm9yJ10sIFsnaHR0cEVxdWl2JywgJ2h0dHAtZXF1aXYnXV0uZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgbmFtZSA9IF9yZWZbMF0sXG4gICAgICBhdHRyaWJ1dGVOYW1lID0gX3JlZlsxXTtcblxuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBTVFJJTkcsIGZhbHNlLCAvLyBtdXN0VXNlUHJvcGVydHlcbiAgYXR0cmlidXRlTmFtZSwgLy8gYXR0cmlidXRlTmFtZVxuICBudWxsKTtcbn0gLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4pO1xuXG4vLyBUaGVzZSBhcmUgXCJlbnVtZXJhdGVkXCIgSFRNTCBhdHRyaWJ1dGVzIHRoYXQgYWNjZXB0IFwidHJ1ZVwiIGFuZCBcImZhbHNlXCIuXG4vLyBJbiBSZWFjdCwgd2UgbGV0IHVzZXJzIHBhc3MgYHRydWVgIGFuZCBgZmFsc2VgIGV2ZW4gdGhvdWdoIHRlY2huaWNhbGx5XG4vLyB0aGVzZSBhcmVuJ3QgYm9vbGVhbiBhdHRyaWJ1dGVzICh0aGV5IGFyZSBjb2VyY2VkIHRvIHN0cmluZ3MpLlxuWydjb250ZW50RWRpdGFibGUnLCAnZHJhZ2dhYmxlJywgJ3NwZWxsQ2hlY2snLCAndmFsdWUnXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIEJPT0xFQU5JU0hfU1RSSU5HLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUudG9Mb3dlckNhc2UoKSwgLy8gYXR0cmlidXRlTmFtZVxuICBudWxsKTtcbn0gLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4pO1xuXG4vLyBUaGVzZSBhcmUgXCJlbnVtZXJhdGVkXCIgU1ZHIGF0dHJpYnV0ZXMgdGhhdCBhY2NlcHQgXCJ0cnVlXCIgYW5kIFwiZmFsc2VcIi5cbi8vIEluIFJlYWN0LCB3ZSBsZXQgdXNlcnMgcGFzcyBgdHJ1ZWAgYW5kIGBmYWxzZWAgZXZlbiB0aG91Z2ggdGVjaG5pY2FsbHlcbi8vIHRoZXNlIGFyZW4ndCBib29sZWFuIGF0dHJpYnV0ZXMgKHRoZXkgYXJlIGNvZXJjZWQgdG8gc3RyaW5ncykuXG4vLyBTaW5jZSB0aGVzZSBhcmUgU1ZHIGF0dHJpYnV0ZXMsIHRoZWlyIGF0dHJpYnV0ZSBuYW1lcyBhcmUgY2FzZS1zZW5zaXRpdmUuXG5bJ2F1dG9SZXZlcnNlJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnZm9jdXNhYmxlJywgJ3ByZXNlcnZlQWxwaGEnXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIEJPT0xFQU5JU0hfU1RSSU5HLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUsIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCk7XG59IC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuKTtcblxuLy8gVGhlc2UgYXJlIEhUTUwgYm9vbGVhbiBhdHRyaWJ1dGVzLlxuWydhbGxvd0Z1bGxTY3JlZW4nLCAnYXN5bmMnLFxuLy8gTm90ZTogdGhlcmUgaXMgYSBzcGVjaWFsIGNhc2UgdGhhdCBwcmV2ZW50cyBpdCBmcm9tIGJlaW5nIHdyaXR0ZW4gdG8gdGhlIERPTVxuLy8gb24gdGhlIGNsaWVudCBzaWRlIGJlY2F1c2UgdGhlIGJyb3dzZXJzIGFyZSBpbmNvbnNpc3RlbnQuIEluc3RlYWQgd2UgY2FsbCBmb2N1cygpLlxuJ2F1dG9Gb2N1cycsICdhdXRvUGxheScsICdjb250cm9scycsICdkZWZhdWx0JywgJ2RlZmVyJywgJ2Rpc2FibGVkJywgJ2Zvcm1Ob1ZhbGlkYXRlJywgJ2hpZGRlbicsICdsb29wJywgJ25vTW9kdWxlJywgJ25vVmFsaWRhdGUnLCAnb3BlbicsICdwbGF5c0lubGluZScsICdyZWFkT25seScsICdyZXF1aXJlZCcsICdyZXZlcnNlZCcsICdzY29wZWQnLCAnc2VhbWxlc3MnLFxuLy8gTWljcm9kYXRhXG4naXRlbVNjb3BlJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBCT09MRUFOLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUudG9Mb3dlckNhc2UoKSwgLy8gYXR0cmlidXRlTmFtZVxuICBudWxsKTtcbn0gLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4pO1xuXG4vLyBUaGVzZSBhcmUgdGhlIGZldyBSZWFjdCBwcm9wcyB0aGF0IHdlIHNldCBhcyBET00gcHJvcGVydGllc1xuLy8gcmF0aGVyIHRoYW4gYXR0cmlidXRlcy4gVGhlc2UgYXJlIGFsbCBib29sZWFucy5cblsnY2hlY2tlZCcsXG4vLyBOb3RlOiBgb3B0aW9uLnNlbGVjdGVkYCBpcyBub3QgdXBkYXRlZCBpZiBgc2VsZWN0Lm11bHRpcGxlYCBpc1xuLy8gZGlzYWJsZWQgd2l0aCBgcmVtb3ZlQXR0cmlidXRlYC4gV2UgaGF2ZSBzcGVjaWFsIGxvZ2ljIGZvciBoYW5kbGluZyB0aGlzLlxuJ211bHRpcGxlJywgJ211dGVkJywgJ3NlbGVjdGVkJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBCT09MRUFOLCB0cnVlLCAvLyBtdXN0VXNlUHJvcGVydHlcbiAgbmFtZSwgLy8gYXR0cmlidXRlTmFtZVxuICBudWxsKTtcbn0gLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4pO1xuXG4vLyBUaGVzZSBhcmUgSFRNTCBhdHRyaWJ1dGVzIHRoYXQgYXJlIFwib3ZlcmxvYWRlZCBib29sZWFuc1wiOiB0aGV5IGJlaGF2ZSBsaWtlXG4vLyBib29sZWFucywgYnV0IGNhbiBhbHNvIGFjY2VwdCBhIHN0cmluZyB2YWx1ZS5cblsnY2FwdHVyZScsICdkb3dubG9hZCddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgT1ZFUkxPQURFRF9CT09MRUFOLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUsIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCk7XG59IC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuKTtcblxuLy8gVGhlc2UgYXJlIEhUTUwgYXR0cmlidXRlcyB0aGF0IG11c3QgYmUgcG9zaXRpdmUgbnVtYmVycy5cblsnY29scycsICdyb3dzJywgJ3NpemUnLCAnc3BhbiddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgUE9TSVRJVkVfTlVNRVJJQywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwpO1xufSAvLyBhdHRyaWJ1dGVOYW1lc3BhY2Vcbik7XG5cbi8vIFRoZXNlIGFyZSBIVE1MIGF0dHJpYnV0ZXMgdGhhdCBtdXN0IGJlIG51bWJlcnMuXG5bJ3Jvd1NwYW4nLCAnc3RhcnQnXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIE5VTUVSSUMsIGZhbHNlLCAvLyBtdXN0VXNlUHJvcGVydHlcbiAgbmFtZS50b0xvd2VyQ2FzZSgpLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwpO1xufSAvLyBhdHRyaWJ1dGVOYW1lc3BhY2Vcbik7XG5cbnZhciBDQU1FTElaRSA9IC9bXFwtXFw6XShbYS16XSkvZztcbnZhciBjYXBpdGFsaXplID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gIHJldHVybiB0b2tlblsxXS50b1VwcGVyQ2FzZSgpO1xufTtcblxuLy8gVGhpcyBpcyBhIGxpc3Qgb2YgYWxsIFNWRyBhdHRyaWJ1dGVzIHRoYXQgbmVlZCBzcGVjaWFsIGNhc2luZywgbmFtZXNwYWNpbmcsXG4vLyBvciBib29sZWFuIHZhbHVlIGFzc2lnbm1lbnQuIFJlZ3VsYXIgYXR0cmlidXRlcyB0aGF0IGp1c3QgYWNjZXB0IHN0cmluZ3Ncbi8vIGFuZCBoYXZlIHRoZSBzYW1lIG5hbWVzIGFyZSBvbWl0dGVkLCBqdXN0IGxpa2UgaW4gdGhlIEhUTUwgd2hpdGVsaXN0LlxuLy8gU29tZSBvZiB0aGVzZSBhdHRyaWJ1dGVzIGNhbiBiZSBoYXJkIHRvIGZpbmQuIFRoaXMgbGlzdCB3YXMgY3JlYXRlZCBieVxuLy8gc2NyYXBwaW5nIHRoZSBNRE4gZG9jdW1lbnRhdGlvbi5cblsnYWNjZW50LWhlaWdodCcsICdhbGlnbm1lbnQtYmFzZWxpbmUnLCAnYXJhYmljLWZvcm0nLCAnYmFzZWxpbmUtc2hpZnQnLCAnY2FwLWhlaWdodCcsICdjbGlwLXBhdGgnLCAnY2xpcC1ydWxlJywgJ2NvbG9yLWludGVycG9sYXRpb24nLCAnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywgJ2NvbG9yLXByb2ZpbGUnLCAnY29sb3ItcmVuZGVyaW5nJywgJ2RvbWluYW50LWJhc2VsaW5lJywgJ2VuYWJsZS1iYWNrZ3JvdW5kJywgJ2ZpbGwtb3BhY2l0eScsICdmaWxsLXJ1bGUnLCAnZmxvb2QtY29sb3InLCAnZmxvb2Qtb3BhY2l0eScsICdmb250LWZhbWlseScsICdmb250LXNpemUnLCAnZm9udC1zaXplLWFkanVzdCcsICdmb250LXN0cmV0Y2gnLCAnZm9udC1zdHlsZScsICdmb250LXZhcmlhbnQnLCAnZm9udC13ZWlnaHQnLCAnZ2x5cGgtbmFtZScsICdnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsJywgJ2dseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsJywgJ2hvcml6LWFkdi14JywgJ2hvcml6LW9yaWdpbi14JywgJ2ltYWdlLXJlbmRlcmluZycsICdsZXR0ZXItc3BhY2luZycsICdsaWdodGluZy1jb2xvcicsICdtYXJrZXItZW5kJywgJ21hcmtlci1taWQnLCAnbWFya2VyLXN0YXJ0JywgJ292ZXJsaW5lLXBvc2l0aW9uJywgJ292ZXJsaW5lLXRoaWNrbmVzcycsICdwYWludC1vcmRlcicsICdwYW5vc2UtMScsICdwb2ludGVyLWV2ZW50cycsICdyZW5kZXJpbmctaW50ZW50JywgJ3NoYXBlLXJlbmRlcmluZycsICdzdG9wLWNvbG9yJywgJ3N0b3Atb3BhY2l0eScsICdzdHJpa2V0aHJvdWdoLXBvc2l0aW9uJywgJ3N0cmlrZXRocm91Z2gtdGhpY2tuZXNzJywgJ3N0cm9rZS1kYXNoYXJyYXknLCAnc3Ryb2tlLWRhc2hvZmZzZXQnLCAnc3Ryb2tlLWxpbmVjYXAnLCAnc3Ryb2tlLWxpbmVqb2luJywgJ3N0cm9rZS1taXRlcmxpbWl0JywgJ3N0cm9rZS1vcGFjaXR5JywgJ3N0cm9rZS13aWR0aCcsICd0ZXh0LWFuY2hvcicsICd0ZXh0LWRlY29yYXRpb24nLCAndGV4dC1yZW5kZXJpbmcnLCAndW5kZXJsaW5lLXBvc2l0aW9uJywgJ3VuZGVybGluZS10aGlja25lc3MnLCAndW5pY29kZS1iaWRpJywgJ3VuaWNvZGUtcmFuZ2UnLCAndW5pdHMtcGVyLWVtJywgJ3YtYWxwaGFiZXRpYycsICd2LWhhbmdpbmcnLCAndi1pZGVvZ3JhcGhpYycsICd2LW1hdGhlbWF0aWNhbCcsICd2ZWN0b3ItZWZmZWN0JywgJ3ZlcnQtYWR2LXknLCAndmVydC1vcmlnaW4teCcsICd2ZXJ0LW9yaWdpbi15JywgJ3dvcmQtc3BhY2luZycsICd3cml0aW5nLW1vZGUnLCAneG1sbnM6eGxpbmsnLCAneC1oZWlnaHQnXS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lKSB7XG4gIHZhciBuYW1lID0gYXR0cmlidXRlTmFtZS5yZXBsYWNlKENBTUVMSVpFLCBjYXBpdGFsaXplKTtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgU1RSSU5HLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIGF0dHJpYnV0ZU5hbWUsIG51bGwpO1xufSAvLyBhdHRyaWJ1dGVOYW1lc3BhY2Vcbik7XG5cbi8vIFN0cmluZyBTVkcgYXR0cmlidXRlcyB3aXRoIHRoZSB4bGluayBuYW1lc3BhY2UuXG5bJ3hsaW5rOmFjdHVhdGUnLCAneGxpbms6YXJjcm9sZScsICd4bGluazpocmVmJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJ10uZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICB2YXIgbmFtZSA9IGF0dHJpYnV0ZU5hbWUucmVwbGFjZShDQU1FTElaRSwgY2FwaXRhbGl6ZSk7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBhdHRyaWJ1dGVOYW1lLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycpO1xufSk7XG5cbi8vIFN0cmluZyBTVkcgYXR0cmlidXRlcyB3aXRoIHRoZSB4bWwgbmFtZXNwYWNlLlxuWyd4bWw6YmFzZScsICd4bWw6bGFuZycsICd4bWw6c3BhY2UnXS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lKSB7XG4gIHZhciBuYW1lID0gYXR0cmlidXRlTmFtZS5yZXBsYWNlKENBTUVMSVpFLCBjYXBpdGFsaXplKTtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgU1RSSU5HLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIGF0dHJpYnV0ZU5hbWUsICdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnKTtcbn0pO1xuXG4vLyBTcGVjaWFsIGNhc2U6IHRoaXMgYXR0cmlidXRlIGV4aXN0cyBib3RoIGluIEhUTUwgYW5kIFNWRy5cbi8vIEl0cyBcInRhYmluZGV4XCIgYXR0cmlidXRlIG5hbWUgaXMgY2FzZS1zZW5zaXRpdmUgaW4gU1ZHIHNvIHdlIGNhbid0IGp1c3QgdXNlXG4vLyBpdHMgUmVhY3QgYHRhYkluZGV4YCBuYW1lLCBsaWtlIHdlIGRvIGZvciBhdHRyaWJ1dGVzIHRoYXQgZXhpc3Qgb25seSBpbiBIVE1MLlxucHJvcGVydGllcy50YWJJbmRleCA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQoJ3RhYkluZGV4JywgU1RSSU5HLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4ndGFiaW5kZXgnLCAvLyBhdHRyaWJ1dGVOYW1lXG5udWxsKTtcblxuLyoqXG4gKiBHZXQgdGhlIHZhbHVlIGZvciBhIHByb3BlcnR5IG9uIGEgbm9kZS4gT25seSB1c2VkIGluIERFViBmb3IgU1NSIHZhbGlkYXRpb24uXG4gKiBUaGUgXCJleHBlY3RlZFwiIGFyZ3VtZW50IGlzIHVzZWQgYXMgYSBoaW50IG9mIHdoYXQgdGhlIGV4cGVjdGVkIHZhbHVlIGlzLlxuICogU29tZSBwcm9wZXJ0aWVzIGhhdmUgbXVsdGlwbGUgZXF1aXZhbGVudCB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSwgZXhwZWN0ZWQsIHByb3BlcnR5SW5mbykge1xuICB7XG4gICAgaWYgKHByb3BlcnR5SW5mby5tdXN0VXNlUHJvcGVydHkpIHtcbiAgICAgIHZhciBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eUluZm8ucHJvcGVydHlOYW1lO1xuXG4gICAgICByZXR1cm4gbm9kZVtwcm9wZXJ0eU5hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lO1xuXG4gICAgICB2YXIgc3RyaW5nVmFsdWUgPSBudWxsO1xuXG4gICAgICBpZiAocHJvcGVydHlJbmZvLnR5cGUgPT09IE9WRVJMT0FERURfQk9PTEVBTikge1xuICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNob3VsZFJlbW92ZUF0dHJpYnV0ZShuYW1lLCBleHBlY3RlZCwgcHJvcGVydHlJbmZvLCBmYWxzZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZhbHVlID09PSAnJyArIGV4cGVjdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhwZWN0ZWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlQXR0cmlidXRlKG5hbWUsIGV4cGVjdGVkLCBwcm9wZXJ0eUluZm8sIGZhbHNlKSkge1xuICAgICAgICAgIC8vIFdlIGhhZCBhbiBhdHRyaWJ1dGUgYnV0IHNob3VsZG4ndCBoYXZlIGhhZCBvbmUsIHNvIHJlYWQgaXRcbiAgICAgICAgICAvLyBmb3IgdGhlIGVycm9yIG1lc3NhZ2UuXG4gICAgICAgICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wZXJ0eUluZm8udHlwZSA9PT0gQk9PTEVBTikge1xuICAgICAgICAgIC8vIElmIHRoaXMgd2FzIGEgYm9vbGVhbiwgaXQgZG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgdmFsdWUgaXNcbiAgICAgICAgICAvLyB0aGUgZmFjdCB0aGF0IHdlIGhhdmUgaXQgaXMgdGhlIHNhbWUgYXMgdGhlIGV4cGVjdGVkLlxuICAgICAgICAgIHJldHVybiBleHBlY3RlZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBFdmVuIGlmIHRoaXMgcHJvcGVydHkgdXNlcyBhIG5hbWVzcGFjZSB3ZSB1c2UgZ2V0QXR0cmlidXRlXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgYXNzdW1lIGl0cyBuYW1lc3BhY2VkIG5hbWUgaXMgdGhlIHNhbWUgYXMgb3VyIGNvbmZpZy5cbiAgICAgICAgLy8gVG8gdXNlIGdldEF0dHJpYnV0ZU5TIHdlIG5lZWQgdGhlIGxvY2FsIG5hbWUgd2hpY2ggd2UgZG9uJ3QgaGF2ZVxuICAgICAgICAvLyBpbiBvdXIgY29uZmlnIGF0bS5cbiAgICAgICAgc3RyaW5nVmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNob3VsZFJlbW92ZUF0dHJpYnV0ZShuYW1lLCBleHBlY3RlZCwgcHJvcGVydHlJbmZvLCBmYWxzZSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ1ZhbHVlID09PSBudWxsID8gZXhwZWN0ZWQgOiBzdHJpbmdWYWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nVmFsdWUgPT09ICcnICsgZXhwZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIGV4cGVjdGVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ1ZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgZm9yIGEgYXR0cmlidXRlIG9uIGEgbm9kZS4gT25seSB1c2VkIGluIERFViBmb3IgU1NSIHZhbGlkYXRpb24uXG4gKiBUaGUgdGhpcmQgYXJndW1lbnQgaXMgdXNlZCBhcyBhIGhpbnQgb2Ygd2hhdCB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMuIFNvbWVcbiAqIGF0dHJpYnV0ZXMgaGF2ZSBtdWx0aXBsZSBlcXVpdmFsZW50IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWVGb3JBdHRyaWJ1dGUobm9kZSwgbmFtZSwgZXhwZWN0ZWQpIHtcbiAge1xuICAgIGlmICghaXNBdHRyaWJ1dGVOYW1lU2FmZShuYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIW5vZGUuaGFzQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICByZXR1cm4gZXhwZWN0ZWQgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG51bGw7XG4gICAgfVxuICAgIHZhciB2YWx1ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIGlmICh2YWx1ZSA9PT0gJycgKyBleHBlY3RlZCkge1xuICAgICAgcmV0dXJuIGV4cGVjdGVkO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZSBmb3IgYSBwcm9wZXJ0eSBvbiBhIG5vZGUuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICovXG5mdW5jdGlvbiBzZXRWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUsIHZhbHVlLCBpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICB2YXIgcHJvcGVydHlJbmZvID0gZ2V0UHJvcGVydHlJbmZvKG5hbWUpO1xuICBpZiAoc2hvdWxkSWdub3JlQXR0cmlidXRlKG5hbWUsIHByb3BlcnR5SW5mbywgaXNDdXN0b21Db21wb25lbnRUYWcpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChzaG91bGRSZW1vdmVBdHRyaWJ1dGUobmFtZSwgdmFsdWUsIHByb3BlcnR5SW5mbywgaXNDdXN0b21Db21wb25lbnRUYWcpKSB7XG4gICAgdmFsdWUgPSBudWxsO1xuICB9XG4gIC8vIElmIHRoZSBwcm9wIGlzbid0IGluIHRoZSBzcGVjaWFsIGxpc3QsIHRyZWF0IGl0IGFzIGEgc2ltcGxlIGF0dHJpYnV0ZS5cbiAgaWYgKGlzQ3VzdG9tQ29tcG9uZW50VGFnIHx8IHByb3BlcnR5SW5mbyA9PT0gbnVsbCkge1xuICAgIGlmIChpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpKSB7XG4gICAgICB2YXIgX2F0dHJpYnV0ZU5hbWUgPSBuYW1lO1xuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKF9hdHRyaWJ1dGVOYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKF9hdHRyaWJ1dGVOYW1lLCAnJyArIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtdXN0VXNlUHJvcGVydHkgPSBwcm9wZXJ0eUluZm8ubXVzdFVzZVByb3BlcnR5O1xuXG4gIGlmIChtdXN0VXNlUHJvcGVydHkpIHtcbiAgICB2YXIgcHJvcGVydHlOYW1lID0gcHJvcGVydHlJbmZvLnByb3BlcnR5TmFtZTtcblxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgdmFyIHR5cGUgPSBwcm9wZXJ0eUluZm8udHlwZTtcblxuICAgICAgbm9kZVtwcm9wZXJ0eU5hbWVdID0gdHlwZSA9PT0gQk9PTEVBTiA/IGZhbHNlIDogJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbnRyYXJ5IHRvIGBzZXRBdHRyaWJ1dGVgLCBvYmplY3QgcHJvcGVydGllcyBhcmUgcHJvcGVybHlcbiAgICAgIC8vIGB0b1N0cmluZ2BlZCBieSBJRTgvOS5cbiAgICAgIG5vZGVbcHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgLy8gVGhlIHJlc3QgYXJlIHRyZWF0ZWQgYXMgYXR0cmlidXRlcyB3aXRoIHNwZWNpYWwgY2FzZXMuXG4gIHZhciBhdHRyaWJ1dGVOYW1lID0gcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWUsXG4gICAgICBhdHRyaWJ1dGVOYW1lc3BhY2UgPSBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZXNwYWNlO1xuXG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBfdHlwZSA9IHByb3BlcnR5SW5mby50eXBlO1xuXG4gICAgdmFyIGF0dHJpYnV0ZVZhbHVlID0gdm9pZCAwO1xuICAgIGlmIChfdHlwZSA9PT0gQk9PTEVBTiB8fCBfdHlwZSA9PT0gT1ZFUkxPQURFRF9CT09MRUFOICYmIHZhbHVlID09PSB0cnVlKSB7XG4gICAgICBhdHRyaWJ1dGVWYWx1ZSA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBgc2V0QXR0cmlidXRlYCB3aXRoIG9iamVjdHMgYmVjb21lcyBvbmx5IGBbb2JqZWN0XWAgaW4gSUU4LzksXG4gICAgICAvLyAoJycgKyB2YWx1ZSkgbWFrZXMgaXQgb3V0cHV0IHRoZSBjb3JyZWN0IHRvU3RyaW5nKCktdmFsdWUuXG4gICAgICBhdHRyaWJ1dGVWYWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgfVxuICAgIGlmIChhdHRyaWJ1dGVOYW1lc3BhY2UpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlTlMoYXR0cmlidXRlTmFtZXNwYWNlLCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gRmxvdyBkb2VzIG5vdCBhbGxvdyBzdHJpbmcgY29uY2F0ZW5hdGlvbiBvZiBtb3N0IG5vbi1zdHJpbmcgdHlwZXMuIFRvIHdvcmtcbi8vIGFyb3VuZCB0aGlzIGxpbWl0YXRpb24sIHdlIHVzZSBhbiBvcGFxdWUgdHlwZSB0aGF0IGNhbiBvbmx5IGJlIG9idGFpbmVkIGJ5XG4vLyBwYXNzaW5nIHRoZSB2YWx1ZSB0aHJvdWdoIGdldFRvU3RyaW5nVmFsdWUgZmlyc3QuXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gJycgKyB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkge1xuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIGZ1bmN0aW9uLCBzeW1ib2wgYXJlIGFzc2lnbmVkIGFzIGVtcHR5IHN0cmluZ3NcbiAgICAgIHJldHVybiAnJztcbiAgfVxufVxuXG52YXIgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQxID0gbnVsbDtcblxudmFyIFJlYWN0Q29udHJvbGxlZFZhbHVlUHJvcFR5cGVzID0ge1xuICBjaGVja1Byb3BUeXBlczogbnVsbFxufTtcblxue1xuICBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuXG4gIHZhciBoYXNSZWFkT25seVZhbHVlID0ge1xuICAgIGJ1dHRvbjogdHJ1ZSxcbiAgICBjaGVja2JveDogdHJ1ZSxcbiAgICBpbWFnZTogdHJ1ZSxcbiAgICBoaWRkZW46IHRydWUsXG4gICAgcmFkaW86IHRydWUsXG4gICAgcmVzZXQ6IHRydWUsXG4gICAgc3VibWl0OiB0cnVlXG4gIH07XG5cbiAgdmFyIHByb3BUeXBlcyA9IHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgICAgaWYgKGhhc1JlYWRPbmx5VmFsdWVbcHJvcHMudHlwZV0gfHwgcHJvcHMub25DaGFuZ2UgfHwgcHJvcHMucmVhZE9ubHkgfHwgcHJvcHMuZGlzYWJsZWQgfHwgcHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdZb3UgcHJvdmlkZWQgYSBgdmFsdWVgIHByb3AgdG8gYSBmb3JtIGZpZWxkIHdpdGhvdXQgYW4gJyArICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgKyAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdFZhbHVlYC4gT3RoZXJ3aXNlLCAnICsgJ3NldCBlaXRoZXIgYG9uQ2hhbmdlYCBvciBgcmVhZE9ubHlgLicpO1xuICAgIH0sXG4gICAgY2hlY2tlZDogZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgICAgaWYgKHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkIHx8IHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYGNoZWNrZWRgIHByb3AgdG8gYSBmb3JtIGZpZWxkIHdpdGhvdXQgYW4gJyArICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgKyAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdENoZWNrZWRgLiBPdGhlcndpc2UsICcgKyAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBQcm92aWRlIGEgbGlua2VkIGB2YWx1ZWAgYXR0cmlidXRlIGZvciBjb250cm9sbGVkIGZvcm1zLiBZb3Ugc2hvdWxkIG5vdCB1c2VcbiAgICogdGhpcyBvdXRzaWRlIG9mIHRoZSBSZWFjdERPTSBjb250cm9sbGVkIGZvcm0gY29tcG9uZW50cy5cbiAgICovXG4gIFJlYWN0Q29udHJvbGxlZFZhbHVlUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZnVuY3Rpb24gKHRhZ05hbWUsIHByb3BzKSB7XG4gICAgY2hlY2tQcm9wVHlwZXMocHJvcFR5cGVzLCBwcm9wcywgJ3Byb3AnLCB0YWdOYW1lLCBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEuZ2V0U3RhY2tBZGRlbmR1bSk7XG4gIH07XG59XG5cbnZhciBlbmFibGVVc2VyVGltaW5nQVBJID0gdHJ1ZTtcblxuLy8gSGVscHMgaWRlbnRpZnkgc2lkZSBlZmZlY3RzIGluIGJlZ2luLXBoYXNlIGxpZmVjeWNsZSBob29rcyBhbmQgc2V0U3RhdGUgcmVkdWNlcnM6XG52YXIgZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzID0gZmFsc2U7XG5cbi8vIEluIHNvbWUgY2FzZXMsIFN0cmljdE1vZGUgc2hvdWxkIGFsc28gZG91YmxlLXJlbmRlciBsaWZlY3ljbGVzLlxuLy8gVGhpcyBjYW4gYmUgY29uZnVzaW5nIGZvciB0ZXN0cyB0aG91Z2gsXG4vLyBBbmQgaXQgY2FuIGJlIGJhZCBmb3IgcGVyZm9ybWFuY2UgaW4gcHJvZHVjdGlvbi5cbi8vIFRoaXMgZmVhdHVyZSBmbGFnIGNhbiBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIGJlaGF2aW9yOlxudmFyIGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0c0ZvclN0cmljdE1vZGUgPSB0cnVlO1xuXG4vLyBUbyBwcmVzZXJ2ZSB0aGUgXCJQYXVzZSBvbiBjYXVnaHQgZXhjZXB0aW9uc1wiIGJlaGF2aW9yIG9mIHRoZSBkZWJ1Z2dlciwgd2Vcbi8vIHJlcGxheSB0aGUgYmVnaW4gcGhhc2Ugb2YgYSBmYWlsZWQgY29tcG9uZW50IGluc2lkZSBpbnZva2VHdWFyZGVkQ2FsbGJhY2suXG52YXIgcmVwbGF5RmFpbGVkVW5pdE9mV29ya1dpdGhJbnZva2VHdWFyZGVkQ2FsbGJhY2sgPSB0cnVlO1xuXG4vLyBXYXJuIGFib3V0IGRlcHJlY2F0ZWQsIGFzeW5jLXVuc2FmZSBsaWZlY3ljbGVzOyByZWxhdGVzIHRvIFJGQyAjNjpcbnZhciB3YXJuQWJvdXREZXByZWNhdGVkTGlmZWN5Y2xlcyA9IGZhbHNlO1xuXG4vLyBHYXRoZXIgYWR2YW5jZWQgdGltaW5nIG1ldHJpY3MgZm9yIFByb2ZpbGVyIHN1YnRyZWVzLlxudmFyIGVuYWJsZVByb2ZpbGVyVGltZXIgPSB0cnVlO1xuXG4vLyBUcmFjZSB3aGljaCBpbnRlcmFjdGlvbnMgdHJpZ2dlciBlYWNoIGNvbW1pdC5cbnZhciBlbmFibGVTY2hlZHVsZXJUcmFjaW5nID0gdHJ1ZTtcblxuLy8gT25seSB1c2VkIGluIHd3dyBidWlsZHMuXG5cblxuLy8gT25seSB1c2VkIGluIHd3dyBidWlsZHMuXG5cblxuLy8gUmVhY3QgRmlyZTogcHJldmVudCB0aGUgdmFsdWUgYW5kIGNoZWNrZWQgYXR0cmlidXRlcyBmcm9tIHN5bmNpbmdcbi8vIHdpdGggdGhlaXIgcmVsYXRlZCBET00gcHJvcGVydGllc1xudmFyIGRpc2FibGVJbnB1dEF0dHJpYnV0ZVN5bmNpbmcgPSBmYWxzZTtcblxuLy8gVE9ETzogZGlyZWN0IGltcG9ydHMgbGlrZSBzb21lLXBhY2thZ2Uvc3JjLyogYXJlIGJhZC4gRml4IG1lLlxudmFyIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IGZhbHNlO1xudmFyIGRpZFdhcm5DaGVja2VkRGVmYXVsdENoZWNrZWQgPSBmYWxzZTtcbnZhciBkaWRXYXJuQ29udHJvbGxlZFRvVW5jb250cm9sbGVkID0gZmFsc2U7XG52YXIgZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBpc0NvbnRyb2xsZWQocHJvcHMpIHtcbiAgdmFyIHVzZXNDaGVja2VkID0gcHJvcHMudHlwZSA9PT0gJ2NoZWNrYm94JyB8fCBwcm9wcy50eXBlID09PSAncmFkaW8nO1xuICByZXR1cm4gdXNlc0NoZWNrZWQgPyBwcm9wcy5jaGVja2VkICE9IG51bGwgOiBwcm9wcy52YWx1ZSAhPSBudWxsO1xufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYW4gPGlucHV0PiBob3N0IGNvbXBvbmVudCB0aGF0IGFsbG93cyBzZXR0aW5nIHRoZXNlIG9wdGlvbmFsXG4gKiBwcm9wczogYGNoZWNrZWRgLCBgdmFsdWVgLCBgZGVmYXVsdENoZWNrZWRgLCBhbmQgYGRlZmF1bHRWYWx1ZWAuXG4gKlxuICogSWYgYGNoZWNrZWRgIG9yIGB2YWx1ZWAgYXJlIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnNcbiAqIHRoYXQgYWZmZWN0IHRoZSBjaGVja2VkIHN0YXRlIG9yIHZhbHVlIHdpbGwgdHJpZ2dlciB1cGRhdGVzIHRvIHRoZSBlbGVtZW50LlxuICpcbiAqIElmIHRoZXkgYXJlIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBub3RcbiAqIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC4gSW5zdGVhZCwgdGhlIHByb3BzIG11c3QgY2hhbmdlIGluIG9yZGVyIGZvclxuICogdGhlIHJlbmRlcmVkIGVsZW1lbnQgdG8gYmUgdXBkYXRlZC5cbiAqXG4gKiBUaGUgcmVuZGVyZWQgZWxlbWVudCB3aWxsIGJlIGluaXRpYWxpemVkIGFzIHVuY2hlY2tlZCAob3IgYGRlZmF1bHRDaGVja2VkYClcbiAqIHdpdGggYW4gZW1wdHkgdmFsdWUgKG9yIGBkZWZhdWx0VmFsdWVgKS5cbiAqXG4gKiBTZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMi9XRC1odG1sNS0yMDEyMTAyNS90aGUtaW5wdXQtZWxlbWVudC5odG1sXG4gKi9cblxuZnVuY3Rpb24gZ2V0SG9zdFByb3BzKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAgdmFyIGNoZWNrZWQgPSBwcm9wcy5jaGVja2VkO1xuXG4gIHZhciBob3N0UHJvcHMgPSBfYXNzaWduKHt9LCBwcm9wcywge1xuICAgIGRlZmF1bHRDaGVja2VkOiB1bmRlZmluZWQsXG4gICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICBjaGVja2VkOiBjaGVja2VkICE9IG51bGwgPyBjaGVja2VkIDogbm9kZS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkXG4gIH0pO1xuXG4gIHJldHVybiBob3N0UHJvcHM7XG59XG5cbmZ1bmN0aW9uIGluaXRXcmFwcGVyU3RhdGUoZWxlbWVudCwgcHJvcHMpIHtcbiAge1xuICAgIFJlYWN0Q29udHJvbGxlZFZhbHVlUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCdpbnB1dCcsIHByb3BzKTtcblxuICAgIGlmIChwcm9wcy5jaGVja2VkICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdENoZWNrZWQgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FybkNoZWNrZWREZWZhdWx0Q2hlY2tlZCkge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnJXMgY29udGFpbnMgYW4gaW5wdXQgb2YgdHlwZSAlcyB3aXRoIGJvdGggY2hlY2tlZCBhbmQgZGVmYXVsdENoZWNrZWQgcHJvcHMuICcgKyAnSW5wdXQgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIGNoZWNrZWQgcHJvcCwgb3IgdGhlIGRlZmF1bHRDaGVja2VkIHByb3AsIGJ1dCBub3QgJyArICdib3RoKS4gRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgYW5kIHJlbW92ZSBvbmUgb2YgdGhlc2UgcHJvcHMuIE1vcmUgaW5mbzogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cycsIGdldEN1cnJlbnRGaWJlck93bmVyTmFtZUluRGV2T3JOdWxsKCkgfHwgJ0EgY29tcG9uZW50JywgcHJvcHMudHlwZSk7XG4gICAgICBkaWRXYXJuQ2hlY2tlZERlZmF1bHRDaGVja2VkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSkge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnJXMgY29udGFpbnMgYW4gaW5wdXQgb2YgdHlwZSAlcyB3aXRoIGJvdGggdmFsdWUgYW5kIGRlZmF1bHRWYWx1ZSBwcm9wcy4gJyArICdJbnB1dCBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGFuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnLCBnZXRDdXJyZW50RmliZXJPd25lck5hbWVJbkRldk9yTnVsbCgpIHx8ICdBIGNvbXBvbmVudCcsIHByb3BzLnR5cGUpO1xuICAgICAgZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIHZhciBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUgPT0gbnVsbCA/ICcnIDogcHJvcHMuZGVmYXVsdFZhbHVlO1xuXG4gIG5vZGUuX3dyYXBwZXJTdGF0ZSA9IHtcbiAgICBpbml0aWFsQ2hlY2tlZDogcHJvcHMuY2hlY2tlZCAhPSBudWxsID8gcHJvcHMuY2hlY2tlZCA6IHByb3BzLmRlZmF1bHRDaGVja2VkLFxuICAgIGluaXRpYWxWYWx1ZTogZ2V0VG9TdHJpbmdWYWx1ZShwcm9wcy52YWx1ZSAhPSBudWxsID8gcHJvcHMudmFsdWUgOiBkZWZhdWx0VmFsdWUpLFxuICAgIGNvbnRyb2xsZWQ6IGlzQ29udHJvbGxlZChwcm9wcylcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2hlY2tlZChlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIHZhciBjaGVja2VkID0gcHJvcHMuY2hlY2tlZDtcbiAgaWYgKGNoZWNrZWQgIT0gbnVsbCkge1xuICAgIHNldFZhbHVlRm9yUHJvcGVydHkobm9kZSwgJ2NoZWNrZWQnLCBjaGVja2VkLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlV3JhcHBlcihlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIHtcbiAgICB2YXIgX2NvbnRyb2xsZWQgPSBpc0NvbnRyb2xsZWQocHJvcHMpO1xuXG4gICAgaWYgKCFub2RlLl93cmFwcGVyU3RhdGUuY29udHJvbGxlZCAmJiBfY29udHJvbGxlZCAmJiAhZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCkge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgYW4gdW5jb250cm9sbGVkIGlucHV0IG9mIHR5cGUgJXMgdG8gYmUgY29udHJvbGxlZC4gJyArICdJbnB1dCBlbGVtZW50cyBzaG91bGQgbm90IHN3aXRjaCBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gJyArICdEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIGlucHV0ICcgKyAnZWxlbWVudCBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBjb21wb25lbnQuIE1vcmUgaW5mbzogaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnLCBwcm9wcy50eXBlKTtcbiAgICAgIGRpZFdhcm5VbmNvbnRyb2xsZWRUb0NvbnRyb2xsZWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAobm9kZS5fd3JhcHBlclN0YXRlLmNvbnRyb2xsZWQgJiYgIV9jb250cm9sbGVkICYmICFkaWRXYXJuQ29udHJvbGxlZFRvVW5jb250cm9sbGVkKSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyBhIGNvbnRyb2xsZWQgaW5wdXQgb2YgdHlwZSAlcyB0byBiZSB1bmNvbnRyb2xsZWQuICcgKyAnSW5wdXQgZWxlbWVudHMgc2hvdWxkIG5vdCBzd2l0Y2ggZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuICcgKyAnRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LiBNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgcHJvcHMudHlwZSk7XG4gICAgICBkaWRXYXJuQ29udHJvbGxlZFRvVW5jb250cm9sbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVDaGVja2VkKGVsZW1lbnQsIHByb3BzKTtcblxuICB2YXIgdmFsdWUgPSBnZXRUb1N0cmluZ1ZhbHVlKHByb3BzLnZhbHVlKTtcbiAgdmFyIHR5cGUgPSBwcm9wcy50eXBlO1xuXG4gIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICBpZiAodmFsdWUgPT09IDAgJiYgbm9kZS52YWx1ZSA9PT0gJycgfHxcbiAgICAgIC8vIFdlIGV4cGxpY2l0bHkgd2FudCB0byBjb2VyY2UgdG8gbnVtYmVyIGhlcmUgaWYgcG9zc2libGUuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIG5vZGUudmFsdWUgIT0gdmFsdWUpIHtcbiAgICAgICAgbm9kZS52YWx1ZSA9IHRvU3RyaW5nKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vZGUudmFsdWUgIT09IHRvU3RyaW5nKHZhbHVlKSkge1xuICAgICAgbm9kZS52YWx1ZSA9IHRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N1Ym1pdCcgfHwgdHlwZSA9PT0gJ3Jlc2V0Jykge1xuICAgIC8vIFN1Ym1pdC9yZXNldCBpbnB1dHMgbmVlZCB0aGUgYXR0cmlidXRlIHJlbW92ZWQgY29tcGxldGVseSB0byBhdm9pZFxuICAgIC8vIGJsYW5rLXRleHQgYnV0dG9ucy5cbiAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgndmFsdWUnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZGlzYWJsZUlucHV0QXR0cmlidXRlU3luY2luZykge1xuICAgIC8vIFdoZW4gbm90IHN5bmNpbmcgdGhlIHZhbHVlIGF0dHJpYnV0ZSwgUmVhY3Qgb25seSBhc3NpZ25zIGEgbmV3IHZhbHVlXG4gICAgLy8gd2hlbmV2ZXIgdGhlIGRlZmF1bHRWYWx1ZSBSZWFjdCBwcm9wIGhhcyBjaGFuZ2VkLiBXaGVuIG5vdCBwcmVzZW50LFxuICAgIC8vIFJlYWN0IGRvZXMgbm90aGluZ1xuICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdFZhbHVlJykpIHtcbiAgICAgIHNldERlZmF1bHRWYWx1ZShub2RlLCBwcm9wcy50eXBlLCBnZXRUb1N0cmluZ1ZhbHVlKHByb3BzLmRlZmF1bHRWYWx1ZSkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHN5bmNpbmcgdGhlIHZhbHVlIGF0dHJpYnV0ZSwgdGhlIHZhbHVlIGNvbWVzIGZyb20gYSBjYXNjYWRlIG9mXG4gICAgLy8gcHJvcGVydGllczpcbiAgICAvLyAgMS4gVGhlIHZhbHVlIFJlYWN0IHByb3BlcnR5XG4gICAgLy8gIDIuIFRoZSBkZWZhdWx0VmFsdWUgUmVhY3QgcHJvcGVydHlcbiAgICAvLyAgMy4gT3RoZXJ3aXNlIHRoZXJlIHNob3VsZCBiZSBubyBjaGFuZ2VcbiAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcbiAgICAgIHNldERlZmF1bHRWYWx1ZShub2RlLCBwcm9wcy50eXBlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdFZhbHVlJykpIHtcbiAgICAgIHNldERlZmF1bHRWYWx1ZShub2RlLCBwcm9wcy50eXBlLCBnZXRUb1N0cmluZ1ZhbHVlKHByb3BzLmRlZmF1bHRWYWx1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkaXNhYmxlSW5wdXRBdHRyaWJ1dGVTeW5jaW5nKSB7XG4gICAgLy8gV2hlbiBub3Qgc3luY2luZyB0aGUgY2hlY2tlZCBhdHRyaWJ1dGUsIHRoZSBhdHRyaWJ1dGUgaXMgZGlyZWN0bHlcbiAgICAvLyBjb250cm9sbGFibGUgZnJvbSB0aGUgZGVmYXVsdFZhbHVlIFJlYWN0IHByb3BlcnR5LiBJdCBuZWVkcyB0byBiZVxuICAgIC8vIHVwZGF0ZWQgYXMgbmV3IHByb3BzIGNvbWUgaW4uXG4gICAgaWYgKHByb3BzLmRlZmF1bHRDaGVja2VkID09IG51bGwpIHtcbiAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdjaGVja2VkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuZGVmYXVsdENoZWNrZWQgPSAhIXByb3BzLmRlZmF1bHRDaGVja2VkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHN5bmNpbmcgdGhlIGNoZWNrZWQgYXR0cmlidXRlLCBpdCBvbmx5IGNoYW5nZXMgd2hlbiBpdCBuZWVkc1xuICAgIC8vIHRvIGJlIHJlbW92ZWQsIHN1Y2ggYXMgdHJhbnNpdGlvbmluZyBmcm9tIGEgY2hlY2tib3ggaW50byBhIHRleHQgaW5wdXRcbiAgICBpZiAocHJvcHMuY2hlY2tlZCA9PSBudWxsICYmIHByb3BzLmRlZmF1bHRDaGVja2VkICE9IG51bGwpIHtcbiAgICAgIG5vZGUuZGVmYXVsdENoZWNrZWQgPSAhIXByb3BzLmRlZmF1bHRDaGVja2VkO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwb3N0TW91bnRXcmFwcGVyKGVsZW1lbnQsIHByb3BzLCBpc0h5ZHJhdGluZykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG5cbiAgLy8gRG8gbm90IGFzc2lnbiB2YWx1ZSBpZiBpdCBpcyBhbHJlYWR5IHNldC4gVGhpcyBwcmV2ZW50cyB1c2VyIHRleHQgaW5wdXRcbiAgLy8gZnJvbSBiZWluZyBsb3N0IGR1cmluZyBTU1IgaHlkcmF0aW9uLlxuICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgfHwgcHJvcHMuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHRWYWx1ZScpKSB7XG4gICAgdmFyIHR5cGUgPSBwcm9wcy50eXBlO1xuICAgIHZhciBpc0J1dHRvbiA9IHR5cGUgPT09ICdzdWJtaXQnIHx8IHR5cGUgPT09ICdyZXNldCc7XG5cbiAgICAvLyBBdm9pZCBzZXR0aW5nIHZhbHVlIGF0dHJpYnV0ZSBvbiBzdWJtaXQvcmVzZXQgaW5wdXRzIGFzIGl0IG92ZXJyaWRlcyB0aGVcbiAgICAvLyBkZWZhdWx0IHZhbHVlIHByb3ZpZGVkIGJ5IHRoZSBicm93c2VyLiBTZWU6ICMxMjg3MlxuICAgIGlmIChpc0J1dHRvbiAmJiAocHJvcHMudmFsdWUgPT09IHVuZGVmaW5lZCB8fCBwcm9wcy52YWx1ZSA9PT0gbnVsbCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgX2luaXRpYWxWYWx1ZSA9IHRvU3RyaW5nKG5vZGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpO1xuXG4gICAgLy8gRG8gbm90IGFzc2lnbiB2YWx1ZSBpZiBpdCBpcyBhbHJlYWR5IHNldC4gVGhpcyBwcmV2ZW50cyB1c2VyIHRleHQgaW5wdXRcbiAgICAvLyBmcm9tIGJlaW5nIGxvc3QgZHVyaW5nIFNTUiBoeWRyYXRpb24uXG4gICAgaWYgKCFpc0h5ZHJhdGluZykge1xuICAgICAgaWYgKGRpc2FibGVJbnB1dEF0dHJpYnV0ZVN5bmNpbmcpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gZ2V0VG9TdHJpbmdWYWx1ZShwcm9wcy52YWx1ZSk7XG5cbiAgICAgICAgLy8gV2hlbiBub3Qgc3luY2luZyB0aGUgdmFsdWUgYXR0cmlidXRlLCB0aGUgdmFsdWUgcHJvcGVydHkgcG9pbnRzXG4gICAgICAgIC8vIGRpcmVjdGx5IHRvIHRoZSBSZWFjdCBwcm9wLiBPbmx5IGFzc2lnbiBpdCBpZiBpdCBleGlzdHMuXG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gQWx3YXlzIGFzc2lnbiBvbiBidXR0b25zIHNvIHRoYXQgaXQgaXMgcG9zc2libGUgdG8gYXNzaWduIGFuXG4gICAgICAgICAgLy8gZW1wdHkgc3RyaW5nIHRvIGNsZWFyIGJ1dHRvbiB0ZXh0LlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCBkbyBub3QgcmUtYXNzaWduIHRoZSB2YWx1ZSBwcm9wZXJ0eSBpZiBpcyBlbXB0eS4gVGhpc1xuICAgICAgICAgIC8vIHBvdGVudGlhbGx5IGF2b2lkcyBhIERPTSB3cml0ZSBhbmQgcHJldmVudHMgRmlyZWZveCAofjYwLjAuMSkgZnJvbVxuICAgICAgICAgIC8vIHByZW1hdHVyZWx5IG1hcmtpbmcgcmVxdWlyZWQgaW5wdXRzIGFzIGludmFsaWQuIEVxdWFsaXR5IGlzIGNvbXBhcmVkXG4gICAgICAgICAgLy8gdG8gdGhlIGN1cnJlbnQgdmFsdWUgaW4gY2FzZSB0aGUgYnJvd3NlciBwcm92aWRlZCB2YWx1ZSBpcyBub3QgYW5cbiAgICAgICAgICAvLyBlbXB0eSBzdHJpbmcuXG4gICAgICAgICAgaWYgKGlzQnV0dG9uIHx8IHZhbHVlICE9PSBub2RlLnZhbHVlKSB7XG4gICAgICAgICAgICBub2RlLnZhbHVlID0gdG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2hlbiBzeW5jaW5nIHRoZSB2YWx1ZSBhdHRyaWJ1dGUsIHRoZSB2YWx1ZSBwcm9wZXJ0eSBzaG91bGQgdXNlXG4gICAgICAgIC8vIHRoZSB3cmFwcGVyU3RhdGUuX2luaXRpYWxWYWx1ZSBwcm9wZXJ0eS4gVGhpcyB1c2VzOlxuICAgICAgICAvL1xuICAgICAgICAvLyAgIDEuIFRoZSB2YWx1ZSBSZWFjdCBwcm9wZXJ0eSB3aGVuIHByZXNlbnRcbiAgICAgICAgLy8gICAyLiBUaGUgZGVmYXVsdFZhbHVlIFJlYWN0IHByb3BlcnR5IHdoZW4gcHJlc2VudFxuICAgICAgICAvLyAgIDMuIEFuIGVtcHR5IHN0cmluZ1xuICAgICAgICBpZiAoX2luaXRpYWxWYWx1ZSAhPT0gbm9kZS52YWx1ZSkge1xuICAgICAgICAgIG5vZGUudmFsdWUgPSBfaW5pdGlhbFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVJbnB1dEF0dHJpYnV0ZVN5bmNpbmcpIHtcbiAgICAgIC8vIFdoZW4gbm90IHN5bmNpbmcgdGhlIHZhbHVlIGF0dHJpYnV0ZSwgYXNzaWduIHRoZSB2YWx1ZSBhdHRyaWJ1dGVcbiAgICAgIC8vIGRpcmVjdGx5IGZyb20gdGhlIGRlZmF1bHRWYWx1ZSBSZWFjdCBwcm9wZXJ0eSAod2hlbiBwcmVzZW50KVxuICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IGdldFRvU3RyaW5nVmFsdWUocHJvcHMuZGVmYXVsdFZhbHVlKTtcbiAgICAgIGlmIChkZWZhdWx0VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBub2RlLmRlZmF1bHRWYWx1ZSA9IHRvU3RyaW5nKGRlZmF1bHRWYWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgdGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBzeW5jaHJvbml6ZWQgdG8gdGhlIHByb3BlcnR5LFxuICAgICAgLy8gc28gd2UgYXNzaWduIGRlZmF1bHRWYWx1ZSB0byB0aGUgc2FtZSB0aGluZyBhcyB0aGUgdmFsdWUgcHJvcGVydHlcbiAgICAgIC8vIGFzc2lnbm1lbnQgc3RlcCBhYm92ZS5cbiAgICAgIG5vZGUuZGVmYXVsdFZhbHVlID0gX2luaXRpYWxWYWx1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBOb3JtYWxseSwgd2UnZCBqdXN0IGRvIGBub2RlLmNoZWNrZWQgPSBub2RlLmNoZWNrZWRgIHVwb24gaW5pdGlhbCBtb3VudCwgbGVzcyB0aGlzIGJ1Z1xuICAvLyB0aGlzIGlzIG5lZWRlZCB0byB3b3JrIGFyb3VuZCBhIGNocm9tZSBidWcgd2hlcmUgc2V0dGluZyBkZWZhdWx0Q2hlY2tlZFxuICAvLyB3aWxsIHNvbWV0aW1lcyBpbmZsdWVuY2UgdGhlIHZhbHVlIG9mIGNoZWNrZWQgKGV2ZW4gYWZ0ZXIgZGV0YWNobWVudCkuXG4gIC8vIFJlZmVyZW5jZTogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NjA4NDE2XG4gIC8vIFdlIG5lZWQgdG8gdGVtcG9yYXJpbHkgdW5zZXQgbmFtZSB0byBhdm9pZCBkaXNydXB0aW5nIHJhZGlvIGJ1dHRvbiBncm91cHMuXG4gIHZhciBuYW1lID0gbm9kZS5uYW1lO1xuICBpZiAobmFtZSAhPT0gJycpIHtcbiAgICBub2RlLm5hbWUgPSAnJztcbiAgfVxuXG4gIGlmIChkaXNhYmxlSW5wdXRBdHRyaWJ1dGVTeW5jaW5nKSB7XG4gICAgLy8gV2hlbiBub3Qgc3luY2luZyB0aGUgY2hlY2tlZCBhdHRyaWJ1dGUsIHRoZSBjaGVja2VkIHByb3BlcnR5XG4gICAgLy8gbmV2ZXIgZ2V0cyBhc3NpZ25lZC4gSXQgbXVzdCBiZSBtYW51YWxseSBzZXQuIFdlIGRvbid0IHdhbnRcbiAgICAvLyB0byBkbyB0aGlzIHdoZW4gaHlkcmF0aW5nIHNvIHRoYXQgZXhpc3RpbmcgdXNlciBpbnB1dCBpc24ndFxuICAgIC8vIG1vZGlmaWVkXG4gICAgaWYgKCFpc0h5ZHJhdGluZykge1xuICAgICAgdXBkYXRlQ2hlY2tlZChlbGVtZW50LCBwcm9wcyk7XG4gICAgfVxuXG4gICAgLy8gT25seSBhc3NpZ24gdGhlIGNoZWNrZWQgYXR0cmlidXRlIGlmIGl0IGlzIGRlZmluZWQuIFRoaXMgc2F2ZXNcbiAgICAvLyBhIERPTSB3cml0ZSB3aGVuIGNvbnRyb2xsaW5nIHRoZSBjaGVja2VkIGF0dHJpYnV0ZSBpc24ndCBuZWVkZWRcbiAgICAvLyAodGV4dCBpbnB1dHMsIHN1Ym1pdC9yZXNldClcbiAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHRDaGVja2VkJykpIHtcbiAgICAgIG5vZGUuZGVmYXVsdENoZWNrZWQgPSAhbm9kZS5kZWZhdWx0Q2hlY2tlZDtcbiAgICAgIG5vZGUuZGVmYXVsdENoZWNrZWQgPSAhIXByb3BzLmRlZmF1bHRDaGVja2VkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHN5bmNpbmcgdGhlIGNoZWNrZWQgYXR0cmlidXRlLCBib3RoIHRoZSBjaGVja2VkIHByb3BlcnR5IGFuZFxuICAgIC8vIGF0dHJpYnV0ZSBhcmUgYXNzaWduZWQgYXQgdGhlIHNhbWUgdGltZSB1c2luZyBkZWZhdWx0Q2hlY2tlZC4gVGhpcyB1c2VzOlxuICAgIC8vXG4gICAgLy8gICAxLiBUaGUgY2hlY2tlZCBSZWFjdCBwcm9wZXJ0eSB3aGVuIHByZXNlbnRcbiAgICAvLyAgIDIuIFRoZSBkZWZhdWx0Q2hlY2tlZCBSZWFjdCBwcm9wZXJ0eSB3aGVuIHByZXNlbnRcbiAgICAvLyAgIDMuIE90aGVyd2lzZSwgZmFsc2VcbiAgICBub2RlLmRlZmF1bHRDaGVja2VkID0gIW5vZGUuZGVmYXVsdENoZWNrZWQ7XG4gICAgbm9kZS5kZWZhdWx0Q2hlY2tlZCA9ICEhbm9kZS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1xuICB9XG5cbiAgaWYgKG5hbWUgIT09ICcnKSB7XG4gICAgbm9kZS5uYW1lID0gbmFtZTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN0b3JlQ29udHJvbGxlZFN0YXRlKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAgdXBkYXRlV3JhcHBlcihub2RlLCBwcm9wcyk7XG4gIHVwZGF0ZU5hbWVkQ291c2lucyhub2RlLCBwcm9wcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU5hbWVkQ291c2lucyhyb290Tm9kZSwgcHJvcHMpIHtcbiAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lO1xuICBpZiAocHJvcHMudHlwZSA9PT0gJ3JhZGlvJyAmJiBuYW1lICE9IG51bGwpIHtcbiAgICB2YXIgcXVlcnlSb290ID0gcm9vdE5vZGU7XG5cbiAgICB3aGlsZSAocXVlcnlSb290LnBhcmVudE5vZGUpIHtcbiAgICAgIHF1ZXJ5Um9vdCA9IHF1ZXJ5Um9vdC5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIC8vIElmIGByb290Tm9kZS5mb3JtYCB3YXMgbm9uLW51bGwsIHRoZW4gd2UgY291bGQgdHJ5IGBmb3JtLmVsZW1lbnRzYCxcbiAgICAvLyBidXQgdGhhdCBzb21ldGltZXMgYmVoYXZlcyBzdHJhbmdlbHkgaW4gSUU4LiBXZSBjb3VsZCBhbHNvIHRyeSB1c2luZ1xuICAgIC8vIGBmb3JtLmdldEVsZW1lbnRzQnlOYW1lYCwgYnV0IHRoYXQgd2lsbCBvbmx5IHJldHVybiBkaXJlY3QgY2hpbGRyZW5cbiAgICAvLyBhbmQgd29uJ3QgaW5jbHVkZSBpbnB1dHMgdGhhdCB1c2UgdGhlIEhUTUw1IGBmb3JtPWAgYXR0cmlidXRlLiBTaW5jZVxuICAgIC8vIHRoZSBpbnB1dCBtaWdodCBub3QgZXZlbiBiZSBpbiBhIGZvcm0uIEl0IG1pZ2h0IG5vdCBldmVuIGJlIGluIHRoZVxuICAgIC8vIGRvY3VtZW50LiBMZXQncyBqdXN0IHVzZSB0aGUgbG9jYWwgYHF1ZXJ5U2VsZWN0b3JBbGxgIHRvIGVuc3VyZSB3ZSBkb24ndFxuICAgIC8vIG1pc3MgYW55dGhpbmcuXG4gICAgdmFyIGdyb3VwID0gcXVlcnlSb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W25hbWU9JyArIEpTT04uc3RyaW5naWZ5KCcnICsgbmFtZSkgKyAnXVt0eXBlPVwicmFkaW9cIl0nKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBvdGhlck5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChvdGhlck5vZGUgPT09IHJvb3ROb2RlIHx8IG90aGVyTm9kZS5mb3JtICE9PSByb290Tm9kZS5mb3JtKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGlmIHJhZGlvIGJ1dHRvbnMgcmVuZGVyZWQgYnkgZGlmZmVyZW50IGNvcGllcyBvZiBSZWFjdFxuICAgICAgLy8gYW5kIHRoZSBzYW1lIG5hbWUgYXJlIHJlbmRlcmVkIGludG8gdGhlIHNhbWUgZm9ybSAoc2FtZSBhcyAjMTkzOSkuXG4gICAgICAvLyBUaGF0J3MgcHJvYmFibHkgb2theTsgd2UgZG9uJ3Qgc3VwcG9ydCBpdCBqdXN0IGFzIHdlIGRvbid0IHN1cHBvcnRcbiAgICAgIC8vIG1peGluZyBSZWFjdCByYWRpbyBidXR0b25zIHdpdGggbm9uLVJlYWN0IG9uZXMuXG4gICAgICB2YXIgb3RoZXJQcm9wcyA9IGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUkMShvdGhlck5vZGUpO1xuICAgICAgIW90aGVyUHJvcHMgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdERPTUlucHV0OiBNaXhpbmcgUmVhY3QgYW5kIG5vbi1SZWFjdCByYWRpbyBpbnB1dHMgd2l0aCB0aGUgc2FtZSBgbmFtZWAgaXMgbm90IHN1cHBvcnRlZC4nKSA6IHZvaWQgMDtcblxuICAgICAgLy8gV2UgbmVlZCB1cGRhdGUgdGhlIHRyYWNrZWQgdmFsdWUgb24gdGhlIG5hbWVkIGNvdXNpbiBzaW5jZSB0aGUgdmFsdWVcbiAgICAgIC8vIHdhcyBjaGFuZ2VkIGJ1dCB0aGUgaW5wdXQgc2F3IG5vIGV2ZW50IG9yIHZhbHVlIHNldFxuICAgICAgdXBkYXRlVmFsdWVJZkNoYW5nZWQob3RoZXJOb2RlKTtcblxuICAgICAgLy8gSWYgdGhpcyBpcyBhIGNvbnRyb2xsZWQgcmFkaW8gYnV0dG9uIGdyb3VwLCBmb3JjaW5nIHRoZSBpbnB1dCB0aGF0XG4gICAgICAvLyB3YXMgcHJldmlvdXNseSBjaGVja2VkIHRvIHVwZGF0ZSB3aWxsIGNhdXNlIGl0IHRvIGJlIGNvbWUgcmUtY2hlY2tlZFxuICAgICAgLy8gYXMgYXBwcm9wcmlhdGUuXG4gICAgICB1cGRhdGVXcmFwcGVyKG90aGVyTm9kZSwgb3RoZXJQcm9wcyk7XG4gICAgfVxuICB9XG59XG5cbi8vIEluIENocm9tZSwgYXNzaWduaW5nIGRlZmF1bHRWYWx1ZSB0byBjZXJ0YWluIGlucHV0IHR5cGVzIHRyaWdnZXJzIGlucHV0IHZhbGlkYXRpb24uXG4vLyBGb3IgbnVtYmVyIGlucHV0cywgdGhlIGRpc3BsYXkgdmFsdWUgbG9zZXMgdHJhaWxpbmcgZGVjaW1hbCBwb2ludHMuIEZvciBlbWFpbCBpbnB1dHMsXG4vLyBDaHJvbWUgcmFpc2VzIFwiVGhlIHNwZWNpZmllZCB2YWx1ZSA8eD4gaXMgbm90IGEgdmFsaWQgZW1haWwgYWRkcmVzc1wiLlxuLy9cbi8vIEhlcmUgd2UgY2hlY2sgdG8gc2VlIGlmIHRoZSBkZWZhdWx0VmFsdWUgaGFzIGFjdHVhbGx5IGNoYW5nZWQsIGF2b2lkaW5nIHRoZXNlIHByb2JsZW1zXG4vLyB3aGVuIHRoZSB1c2VyIGlzIGlucHV0dGluZyB0ZXh0XG4vL1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MjUzXG5mdW5jdGlvbiBzZXREZWZhdWx0VmFsdWUobm9kZSwgdHlwZSwgdmFsdWUpIHtcbiAgaWYgKFxuICAvLyBGb2N1c2VkIG51bWJlciBpbnB1dHMgc3luY2hyb25pemUgb24gYmx1ci4gU2VlIENoYW5nZUV2ZW50UGx1Z2luLmpzXG4gIHR5cGUgIT09ICdudW1iZXInIHx8IG5vZGUub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBub2RlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIG5vZGUuZGVmYXVsdFZhbHVlID0gdG9TdHJpbmcobm9kZS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSk7XG4gICAgfSBlbHNlIGlmIChub2RlLmRlZmF1bHRWYWx1ZSAhPT0gdG9TdHJpbmcodmFsdWUpKSB7XG4gICAgICBub2RlLmRlZmF1bHRWYWx1ZSA9IHRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGV2ZW50VHlwZXMkMSA9IHtcbiAgY2hhbmdlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvbkNoYW5nZScsXG4gICAgICBjYXB0dXJlZDogJ29uQ2hhbmdlQ2FwdHVyZSdcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1RPUF9CTFVSLCBUT1BfQ0hBTkdFLCBUT1BfQ0xJQ0ssIFRPUF9GT0NVUywgVE9QX0lOUFVULCBUT1BfS0VZX0RPV04sIFRPUF9LRVlfVVAsIFRPUF9TRUxFQ1RJT05fQ0hBTkdFXVxuICB9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoaW5zdCwgbmF0aXZlRXZlbnQsIHRhcmdldCkge1xuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcyQxLmNoYW5nZSwgaW5zdCwgbmF0aXZlRXZlbnQsIHRhcmdldCk7XG4gIGV2ZW50LnR5cGUgPSAnY2hhbmdlJztcbiAgLy8gRmxhZyB0aGlzIGV2ZW50IGxvb3AgYXMgbmVlZGluZyBzdGF0ZSByZXN0b3JlLlxuICBlbnF1ZXVlU3RhdGVSZXN0b3JlKHRhcmdldCk7XG4gIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICByZXR1cm4gZXZlbnQ7XG59XG4vKipcbiAqIEZvciBJRSBzaGltc1xuICovXG52YXIgYWN0aXZlRWxlbWVudCA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xuXG4vKipcbiAqIFNFQ1RJT046IGhhbmRsZSBgY2hhbmdlYCBldmVudFxuICovXG5mdW5jdGlvbiBzaG91bGRVc2VDaGFuZ2VFdmVudChlbGVtKSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gbm9kZU5hbWUgPT09ICdzZWxlY3QnIHx8IG5vZGVOYW1lID09PSAnaW5wdXQnICYmIGVsZW0udHlwZSA9PT0gJ2ZpbGUnO1xufVxuXG5mdW5jdGlvbiBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBldmVudCA9IGNyZWF0ZUFuZEFjY3VtdWxhdGVDaGFuZ2VFdmVudChhY3RpdmVFbGVtZW50SW5zdCwgbmF0aXZlRXZlbnQsIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSk7XG5cbiAgLy8gSWYgY2hhbmdlIGFuZCBwcm9wZXJ0eWNoYW5nZSBidWJibGVkLCB3ZSdkIGp1c3QgYmluZCB0byBpdCBsaWtlIGFsbCB0aGVcbiAgLy8gb3RoZXIgZXZlbnRzIGFuZCBoYXZlIGl0IGdvIHRocm91Z2ggUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLiBTaW5jZSBpdFxuICAvLyBkb2Vzbid0LCB3ZSBtYW51YWxseSBsaXN0ZW4gZm9yIHRoZSBldmVudHMgYW5kIHNvIHdlIGhhdmUgdG8gZW5xdWV1ZSBhbmRcbiAgLy8gcHJvY2VzcyB0aGUgYWJzdHJhY3QgZXZlbnQgbWFudWFsbHkuXG4gIC8vXG4gIC8vIEJhdGNoaW5nIGlzIG5lY2Vzc2FyeSBoZXJlIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IGFsbCBldmVudCBoYW5kbGVycyBydW5cbiAgLy8gYmVmb3JlIHRoZSBuZXh0IHJlcmVuZGVyIChpbmNsdWRpbmcgZXZlbnQgaGFuZGxlcnMgYXR0YWNoZWQgdG8gYW5jZXN0b3JcbiAgLy8gZWxlbWVudHMgaW5zdGVhZCBvZiBkaXJlY3RseSBvbiB0aGUgaW5wdXQpLiBXaXRob3V0IHRoaXMsIGNvbnRyb2xsZWRcbiAgLy8gY29tcG9uZW50cyBkb24ndCB3b3JrIHByb3Blcmx5IGluIGNvbmp1bmN0aW9uIHdpdGggZXZlbnQgYnViYmxpbmcgYmVjYXVzZVxuICAvLyB0aGUgY29tcG9uZW50IGlzIHJlcmVuZGVyZWQgYW5kIHRoZSB2YWx1ZSByZXZlcnRlZCBiZWZvcmUgYWxsIHRoZSBldmVudFxuICAvLyBoYW5kbGVycyBjYW4gcnVuLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MDguXG4gIGJhdGNoZWRVcGRhdGVzKHJ1bkV2ZW50SW5CYXRjaCwgZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBydW5FdmVudEluQmF0Y2goZXZlbnQpIHtcbiAgcnVuRXZlbnRzSW5CYXRjaChldmVudCwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCkge1xuICB2YXIgdGFyZ2V0Tm9kZSA9IGdldE5vZGVGcm9tSW5zdGFuY2UkMSh0YXJnZXRJbnN0KTtcbiAgaWYgKHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKHRhcmdldE5vZGUpKSB7XG4gICAgcmV0dXJuIHRhcmdldEluc3Q7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSBUT1BfQ0hBTkdFKSB7XG4gICAgcmV0dXJuIHRhcmdldEluc3Q7XG4gIH1cbn1cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGlucHV0YCBldmVudFxuICovXG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gZmFsc2U7XG5pZiAoY2FuVXNlRE9NKSB7XG4gIC8vIElFOSBjbGFpbXMgdG8gc3VwcG9ydCB0aGUgaW5wdXQgZXZlbnQgYnV0IGZhaWxzIHRvIHRyaWdnZXIgaXQgd2hlblxuICAvLyBkZWxldGluZyB0ZXh0LCBzbyB3ZSBpZ25vcmUgaXRzIGlucHV0IGV2ZW50cy5cbiAgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gaXNFdmVudFN1cHBvcnRlZCgnaW5wdXQnKSAmJiAoIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA5KTtcbn1cblxuLyoqXG4gKiAoRm9yIElFIDw9OSkgU3RhcnRzIHRyYWNraW5nIHByb3BlcnR5Y2hhbmdlIGV2ZW50cyBvbiB0aGUgcGFzc2VkLWluIGVsZW1lbnRcbiAqIGFuZCBvdmVycmlkZSB0aGUgdmFsdWUgcHJvcGVydHkgc28gdGhhdCB3ZSBjYW4gZGlzdGluZ3Vpc2ggdXNlciBldmVudHMgZnJvbVxuICogdmFsdWUgY2hhbmdlcyBpbiBKUy5cbiAqL1xuZnVuY3Rpb24gc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SW5zdCA9IHRhcmdldEluc3Q7XG4gIGFjdGl2ZUVsZW1lbnQuYXR0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSk7XG59XG5cbi8qKlxuICogKEZvciBJRSA8PTkpIFJlbW92ZXMgdGhlIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSBjdXJyZW50bHktdHJhY2tlZCBlbGVtZW50LFxuICogaWYgYW55IGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xufVxuXG4vKipcbiAqIChGb3IgSUUgPD05KSBIYW5kbGVzIGEgcHJvcGVydHljaGFuZ2UgZXZlbnQsIHNlbmRpbmcgYSBgY2hhbmdlYCBldmVudCBpZlxuICogdGhlIHZhbHVlIG9mIHRoZSBhY3RpdmUgZWxlbWVudCBoYXMgY2hhbmdlZC5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlUHJvcGVydHlDaGFuZ2UobmF0aXZlRXZlbnQpIHtcbiAgaWYgKG5hdGl2ZUV2ZW50LnByb3BlcnR5TmFtZSAhPT0gJ3ZhbHVlJykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKGFjdGl2ZUVsZW1lbnRJbnN0KSkge1xuICAgIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbCh0b3BMZXZlbFR5cGUsIHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSBUT1BfRk9DVVMpIHtcbiAgICAvLyBJbiBJRTksIHByb3BlcnR5Y2hhbmdlIGZpcmVzIGZvciBtb3N0IGlucHV0IGV2ZW50cyBidXQgaXMgYnVnZ3kgYW5kXG4gICAgLy8gZG9lc24ndCBmaXJlIHdoZW4gdGV4dCBpcyBkZWxldGVkLCBidXQgY29udmVuaWVudGx5LCBzZWxlY3Rpb25jaGFuZ2VcbiAgICAvLyBhcHBlYXJzIHRvIGZpcmUgaW4gYWxsIG9mIHRoZSByZW1haW5pbmcgY2FzZXMgc28gd2UgY2F0Y2ggdGhvc2UgYW5kXG4gICAgLy8gZm9yd2FyZCB0aGUgZXZlbnQgaWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkXG4gICAgLy8gSW4gZWl0aGVyIGNhc2UsIHdlIGRvbid0IHdhbnQgdG8gY2FsbCB0aGUgZXZlbnQgaGFuZGxlciBpZiB0aGUgdmFsdWVcbiAgICAvLyBpcyBjaGFuZ2VkIGZyb20gSlMgc28gd2UgcmVkZWZpbmUgYSBzZXR0ZXIgZm9yIGAudmFsdWVgIHRoYXQgdXBkYXRlc1xuICAgIC8vIG91ciBhY3RpdmVFbGVtZW50VmFsdWUgdmFyaWFibGUsIGFsbG93aW5nIHVzIHRvIGlnbm9yZSB0aG9zZSBjaGFuZ2VzXG4gICAgLy9cbiAgICAvLyBzdG9wV2F0Y2hpbmcoKSBzaG91bGQgYmUgYSBub29wIGhlcmUgYnV0IHdlIGNhbGwgaXQganVzdCBpbiBjYXNlIHdlXG4gICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gICAgc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRhcmdldCwgdGFyZ2V0SW5zdCk7XG4gIH0gZWxzZSBpZiAodG9wTGV2ZWxUeXBlID09PSBUT1BfQkxVUikge1xuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gIH1cbn1cblxuLy8gRm9yIElFOCBhbmQgSUU5LlxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRQb2x5ZmlsbCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gVE9QX1NFTEVDVElPTl9DSEFOR0UgfHwgdG9wTGV2ZWxUeXBlID09PSBUT1BfS0VZX1VQIHx8IHRvcExldmVsVHlwZSA9PT0gVE9QX0tFWV9ET1dOKSB7XG4gICAgLy8gT24gdGhlIHNlbGVjdGlvbmNoYW5nZSBldmVudCwgdGhlIHRhcmdldCBpcyBqdXN0IGRvY3VtZW50IHdoaWNoIGlzbid0XG4gICAgLy8gaGVscGZ1bCBmb3IgdXMgc28ganVzdCBjaGVjayBhY3RpdmVFbGVtZW50IGluc3RlYWQuXG4gICAgLy9cbiAgICAvLyA5OSUgb2YgdGhlIHRpbWUsIGtleWRvd24gYW5kIGtleXVwIGFyZW4ndCBuZWNlc3NhcnkuIElFOCBmYWlscyB0byBmaXJlXG4gICAgLy8gcHJvcGVydHljaGFuZ2Ugb24gdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFmdGVyIHNldHRpbmcgYHZhbHVlYCBmcm9tIGFcbiAgICAvLyBzY3JpcHQgYW5kIGZpcmVzIG9ubHkga2V5ZG93biwga2V5cHJlc3MsIGtleXVwLiBDYXRjaGluZyBrZXl1cCB1c3VhbGx5XG4gICAgLy8gZ2V0cyBpdCBhbmQgY2F0Y2hpbmcga2V5ZG93biBsZXRzIHVzIGZpcmUgYW4gZXZlbnQgZm9yIHRoZSBmaXJzdFxuICAgIC8vIGtleXN0cm9rZSBpZiB1c2VyIGRvZXMgYSBrZXkgcmVwZWF0IChpdCdsbCBiZSBhIGxpdHRsZSBkZWxheWVkOiByaWdodFxuICAgIC8vIGJlZm9yZSB0aGUgc2Vjb25kIGtleXN0cm9rZSkuIE90aGVyIGlucHV0IG1ldGhvZHMgKGUuZy4sIHBhc3RlKSBzZWVtIHRvXG4gICAgLy8gZmlyZSBzZWxlY3Rpb25jaGFuZ2Ugbm9ybWFsbHkuXG4gICAgcmV0dXJuIGdldEluc3RJZlZhbHVlQ2hhbmdlZChhY3RpdmVFbGVtZW50SW5zdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGNsaWNrYCBldmVudFxuICovXG5mdW5jdGlvbiBzaG91bGRVc2VDbGlja0V2ZW50KGVsZW0pIHtcbiAgLy8gVXNlIHRoZSBgY2xpY2tgIGV2ZW50IHRvIGRldGVjdCBjaGFuZ2VzIHRvIGNoZWNrYm94IGFuZCByYWRpbyBpbnB1dHMuXG4gIC8vIFRoaXMgYXBwcm9hY2ggd29ya3MgYWNyb3NzIGFsbCBicm93c2Vycywgd2hlcmVhcyBgY2hhbmdlYCBkb2VzIG5vdCBmaXJlXG4gIC8vIHVudGlsIGBibHVyYCBpbiBJRTguXG4gIHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWU7XG4gIHJldHVybiBub2RlTmFtZSAmJiBub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnICYmIChlbGVtLnR5cGUgPT09ICdjaGVja2JveCcgfHwgZWxlbS50eXBlID09PSAncmFkaW8nKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0KSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09IFRPUF9DTElDSykge1xuICAgIHJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0T3JDaGFuZ2VFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gVE9QX0lOUFVUIHx8IHRvcExldmVsVHlwZSA9PT0gVE9QX0NIQU5HRSkge1xuICAgIHJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlQ29udHJvbGxlZElucHV0Qmx1cihub2RlKSB7XG4gIHZhciBzdGF0ZSA9IG5vZGUuX3dyYXBwZXJTdGF0ZTtcblxuICBpZiAoIXN0YXRlIHx8ICFzdGF0ZS5jb250cm9sbGVkIHx8IG5vZGUudHlwZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWRpc2FibGVJbnB1dEF0dHJpYnV0ZVN5bmNpbmcpIHtcbiAgICAvLyBJZiBjb250cm9sbGVkLCBhc3NpZ24gdGhlIHZhbHVlIGF0dHJpYnV0ZSB0byB0aGUgY3VycmVudCB2YWx1ZSBvbiBibHVyXG4gICAgc2V0RGVmYXVsdFZhbHVlKG5vZGUsICdudW1iZXInLCBub2RlLnZhbHVlKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgcGx1Z2luIGNyZWF0ZXMgYW4gYG9uQ2hhbmdlYCBldmVudCB0aGF0IG5vcm1hbGl6ZXMgY2hhbmdlIGV2ZW50c1xuICogYWNyb3NzIGZvcm0gZWxlbWVudHMuIFRoaXMgZXZlbnQgZmlyZXMgYXQgYSB0aW1lIHdoZW4gaXQncyBwb3NzaWJsZSB0b1xuICogY2hhbmdlIHRoZSBlbGVtZW50J3MgdmFsdWUgd2l0aG91dCBzZWVpbmcgYSBmbGlja2VyLlxuICpcbiAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG4gKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG4gKiAtIHRleHRhcmVhXG4gKiAtIHNlbGVjdFxuICovXG52YXIgQ2hhbmdlRXZlbnRQbHVnaW4gPSB7XG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMkMSxcblxuICBfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOiBpc0lucHV0RXZlbnRTdXBwb3J0ZWQsXG5cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIHRhcmdldE5vZGUgPSB0YXJnZXRJbnN0ID8gZ2V0Tm9kZUZyb21JbnN0YW5jZSQxKHRhcmdldEluc3QpIDogd2luZG93O1xuXG4gICAgdmFyIGdldFRhcmdldEluc3RGdW5jID0gdm9pZCAwLFxuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSB2b2lkIDA7XG4gICAgaWYgKHNob3VsZFVzZUNoYW5nZUV2ZW50KHRhcmdldE5vZGUpKSB7XG4gICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudDtcbiAgICB9IGVsc2UgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0YXJnZXROb2RlKSkge1xuICAgICAgaWYgKGlzSW5wdXRFdmVudFN1cHBvcnRlZCkge1xuICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGw7XG4gICAgICAgIGhhbmRsZUV2ZW50RnVuYyA9IGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNob3VsZFVzZUNsaWNrRXZlbnQodGFyZ2V0Tm9kZSkpIHtcbiAgICAgIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGdldFRhcmdldEluc3RGdW5jKSB7XG4gICAgICB2YXIgaW5zdCA9IGdldFRhcmdldEluc3RGdW5jKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCk7XG4gICAgICBpZiAoaW5zdCkge1xuICAgICAgICB2YXIgZXZlbnQgPSBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoaW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChoYW5kbGVFdmVudEZ1bmMpIHtcbiAgICAgIGhhbmRsZUV2ZW50RnVuYyh0b3BMZXZlbFR5cGUsIHRhcmdldE5vZGUsIHRhcmdldEluc3QpO1xuICAgIH1cblxuICAgIC8vIFdoZW4gYmx1cnJpbmcsIHNldCB0aGUgdmFsdWUgYXR0cmlidXRlIGZvciBudW1iZXIgaW5wdXRzXG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gVE9QX0JMVVIpIHtcbiAgICAgIGhhbmRsZUNvbnRyb2xsZWRJbnB1dEJsdXIodGFyZ2V0Tm9kZSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIE1vZHVsZSB0aGF0IGlzIGluamVjdGFibGUgaW50byBgRXZlbnRQbHVnaW5IdWJgLCB0aGF0IHNwZWNpZmllcyBhXG4gKiBkZXRlcm1pbmlzdGljIG9yZGVyaW5nIG9mIGBFdmVudFBsdWdpbmBzLiBBIGNvbnZlbmllbnQgd2F5IHRvIHJlYXNvbiBhYm91dFxuICogcGx1Z2lucywgd2l0aG91dCBoYXZpbmcgdG8gcGFja2FnZSBldmVyeSBvbmUgb2YgdGhlbS4gVGhpcyBpcyBiZXR0ZXIgdGhhblxuICogaGF2aW5nIHBsdWdpbnMgYmUgb3JkZXJlZCBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IHRoZXkgYXJlIGluamVjdGVkIGJlY2F1c2VcbiAqIHRoYXQgb3JkZXJpbmcgd291bGQgYmUgaW5mbHVlbmNlZCBieSB0aGUgcGFja2FnaW5nIG9yZGVyLlxuICogYFJlc3BvbmRlckV2ZW50UGx1Z2luYCBtdXN0IG9jY3VyIGJlZm9yZSBgU2ltcGxlRXZlbnRQbHVnaW5gIHNvIHRoYXRcbiAqIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBldmVudHMgaXMgY29udmVuaWVudCBpbiBgU2ltcGxlRXZlbnRQbHVnaW5gIGhhbmRsZXJzLlxuICovXG52YXIgRE9NRXZlbnRQbHVnaW5PcmRlciA9IFsnUmVzcG9uZGVyRXZlbnRQbHVnaW4nLCAnU2ltcGxlRXZlbnRQbHVnaW4nLCAnRW50ZXJMZWF2ZUV2ZW50UGx1Z2luJywgJ0NoYW5nZUV2ZW50UGx1Z2luJywgJ1NlbGVjdEV2ZW50UGx1Z2luJywgJ0JlZm9yZUlucHV0RXZlbnRQbHVnaW4nXTtcblxudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSBTeW50aGV0aWNFdmVudC5leHRlbmQoe1xuICB2aWV3OiBudWxsLFxuICBkZXRhaWw6IG51bGxcbn0pO1xuXG52YXIgbW9kaWZpZXJLZXlUb1Byb3AgPSB7XG4gIEFsdDogJ2FsdEtleScsXG4gIENvbnRyb2w6ICdjdHJsS2V5JyxcbiAgTWV0YTogJ21ldGFLZXknLFxuICBTaGlmdDogJ3NoaWZ0S2V5J1xufTtcblxuLy8gSUU4IGRvZXMgbm90IGltcGxlbWVudCBnZXRNb2RpZmllclN0YXRlIHNvIHdlIHNpbXBseSBtYXAgaXQgdG8gdGhlIG9ubHlcbi8vIG1vZGlmaWVyIGtleXMgZXhwb3NlZCBieSB0aGUgZXZlbnQgaXRzZWxmLCBkb2VzIG5vdCBzdXBwb3J0IExvY2sta2V5cy5cbi8vIEN1cnJlbnRseSwgYWxsIG1ham9yIGJyb3dzZXJzIGV4Y2VwdCBDaHJvbWUgc2VlbXMgdG8gc3VwcG9ydCBMb2NrLWtleXMuXG4vKipcbiAqIFRyYW5zbGF0aW9uIGZyb20gbW9kaWZpZXIga2V5IHRvIHRoZSBhc3NvY2lhdGVkIHByb3BlcnR5IGluIHRoZSBldmVudC5cbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNrZXlzLU1vZGlmaWVyc1xuICovXG5cbmZ1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIoa2V5QXJnKSB7XG4gIHZhciBzeW50aGV0aWNFdmVudCA9IHRoaXM7XG4gIHZhciBuYXRpdmVFdmVudCA9IHN5bnRoZXRpY0V2ZW50Lm5hdGl2ZUV2ZW50O1xuICBpZiAobmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSkge1xuICAgIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZyk7XG4gIH1cbiAgdmFyIGtleVByb3AgPSBtb2RpZmllcktleVRvUHJvcFtrZXlBcmddO1xuICByZXR1cm4ga2V5UHJvcCA/ICEhbmF0aXZlRXZlbnRba2V5UHJvcF0gOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRNb2RpZmllclN0YXRlKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xufVxuXG52YXIgcHJldmlvdXNTY3JlZW5YID0gMDtcbnZhciBwcmV2aW91c1NjcmVlblkgPSAwO1xuLy8gVXNlIGZsYWdzIHRvIHNpZ25hbCBtb3ZlbWVudFgvWSBoYXMgYWxyZWFkeSBiZWVuIHNldFxudmFyIGlzTW92ZW1lbnRYU2V0ID0gZmFsc2U7XG52YXIgaXNNb3ZlbWVudFlTZXQgPSBmYWxzZTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIE1vdXNlRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IFN5bnRoZXRpY1VJRXZlbnQuZXh0ZW5kKHtcbiAgc2NyZWVuWDogbnVsbCxcbiAgc2NyZWVuWTogbnVsbCxcbiAgY2xpZW50WDogbnVsbCxcbiAgY2xpZW50WTogbnVsbCxcbiAgcGFnZVg6IG51bGwsXG4gIHBhZ2VZOiBudWxsLFxuICBjdHJsS2V5OiBudWxsLFxuICBzaGlmdEtleTogbnVsbCxcbiAgYWx0S2V5OiBudWxsLFxuICBtZXRhS2V5OiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gIGJ1dHRvbjogbnVsbCxcbiAgYnV0dG9uczogbnVsbCxcbiAgcmVsYXRlZFRhcmdldDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgKGV2ZW50LmZyb21FbGVtZW50ID09PSBldmVudC5zcmNFbGVtZW50ID8gZXZlbnQudG9FbGVtZW50IDogZXZlbnQuZnJvbUVsZW1lbnQpO1xuICB9LFxuICBtb3ZlbWVudFg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmICgnbW92ZW1lbnRYJyBpbiBldmVudCkge1xuICAgICAgcmV0dXJuIGV2ZW50Lm1vdmVtZW50WDtcbiAgICB9XG5cbiAgICB2YXIgc2NyZWVuWCA9IHByZXZpb3VzU2NyZWVuWDtcbiAgICBwcmV2aW91c1NjcmVlblggPSBldmVudC5zY3JlZW5YO1xuXG4gICAgaWYgKCFpc01vdmVtZW50WFNldCkge1xuICAgICAgaXNNb3ZlbWVudFhTZXQgPSB0cnVlO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV2ZW50LnR5cGUgPT09ICdtb3VzZW1vdmUnID8gZXZlbnQuc2NyZWVuWCAtIHNjcmVlblggOiAwO1xuICB9LFxuICBtb3ZlbWVudFk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmICgnbW92ZW1lbnRZJyBpbiBldmVudCkge1xuICAgICAgcmV0dXJuIGV2ZW50Lm1vdmVtZW50WTtcbiAgICB9XG5cbiAgICB2YXIgc2NyZWVuWSA9IHByZXZpb3VzU2NyZWVuWTtcbiAgICBwcmV2aW91c1NjcmVlblkgPSBldmVudC5zY3JlZW5ZO1xuXG4gICAgaWYgKCFpc01vdmVtZW50WVNldCkge1xuICAgICAgaXNNb3ZlbWVudFlTZXQgPSB0cnVlO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV2ZW50LnR5cGUgPT09ICdtb3VzZW1vdmUnID8gZXZlbnQuc2NyZWVuWSAtIHNjcmVlblkgOiAwO1xuICB9XG59KTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFBvaW50ZXJFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9wb2ludGVyZXZlbnRzL1xuICovXG52YXIgU3ludGhldGljUG9pbnRlckV2ZW50ID0gU3ludGhldGljTW91c2VFdmVudC5leHRlbmQoe1xuICBwb2ludGVySWQ6IG51bGwsXG4gIHdpZHRoOiBudWxsLFxuICBoZWlnaHQ6IG51bGwsXG4gIHByZXNzdXJlOiBudWxsLFxuICB0YW5nZW50aWFsUHJlc3N1cmU6IG51bGwsXG4gIHRpbHRYOiBudWxsLFxuICB0aWx0WTogbnVsbCxcbiAgdHdpc3Q6IG51bGwsXG4gIHBvaW50ZXJUeXBlOiBudWxsLFxuICBpc1ByaW1hcnk6IG51bGxcbn0pO1xuXG52YXIgZXZlbnRUeXBlcyQyID0ge1xuICBtb3VzZUVudGVyOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uTW91c2VFbnRlcicsXG4gICAgZGVwZW5kZW5jaWVzOiBbVE9QX01PVVNFX09VVCwgVE9QX01PVVNFX09WRVJdXG4gIH0sXG4gIG1vdXNlTGVhdmU6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiAnb25Nb3VzZUxlYXZlJyxcbiAgICBkZXBlbmRlbmNpZXM6IFtUT1BfTU9VU0VfT1VULCBUT1BfTU9VU0VfT1ZFUl1cbiAgfSxcbiAgcG9pbnRlckVudGVyOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uUG9pbnRlckVudGVyJyxcbiAgICBkZXBlbmRlbmNpZXM6IFtUT1BfUE9JTlRFUl9PVVQsIFRPUF9QT0lOVEVSX09WRVJdXG4gIH0sXG4gIHBvaW50ZXJMZWF2ZToge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvblBvaW50ZXJMZWF2ZScsXG4gICAgZGVwZW5kZW5jaWVzOiBbVE9QX1BPSU5URVJfT1VULCBUT1BfUE9JTlRFUl9PVkVSXVxuICB9XG59O1xuXG52YXIgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luID0ge1xuICBldmVudFR5cGVzOiBldmVudFR5cGVzJDIsXG5cbiAgLyoqXG4gICAqIEZvciBhbG1vc3QgZXZlcnkgaW50ZXJhY3Rpb24gd2UgY2FyZSBhYm91dCwgdGhlcmUgd2lsbCBiZSBib3RoIGEgdG9wLWxldmVsXG4gICAqIGBtb3VzZW92ZXJgIGFuZCBgbW91c2VvdXRgIGV2ZW50IHRoYXQgb2NjdXJzLiBPbmx5IHVzZSBgbW91c2VvdXRgIHNvIHRoYXRcbiAgICogd2UgZG8gbm90IGV4dHJhY3QgZHVwbGljYXRlIGV2ZW50cy4gSG93ZXZlciwgbW92aW5nIHRoZSBtb3VzZSBpbnRvIHRoZVxuICAgKiBicm93c2VyIGZyb20gb3V0c2lkZSB3aWxsIG5vdCBmaXJlIGEgYG1vdXNlb3V0YCBldmVudC4gSW4gdGhpcyBjYXNlLCB3ZSB1c2VcbiAgICogdGhlIGBtb3VzZW92ZXJgIHRvcC1sZXZlbCBldmVudC5cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIHZhciBpc092ZXJFdmVudCA9IHRvcExldmVsVHlwZSA9PT0gVE9QX01PVVNFX09WRVIgfHwgdG9wTGV2ZWxUeXBlID09PSBUT1BfUE9JTlRFUl9PVkVSO1xuICAgIHZhciBpc091dEV2ZW50ID0gdG9wTGV2ZWxUeXBlID09PSBUT1BfTU9VU0VfT1VUIHx8IHRvcExldmVsVHlwZSA9PT0gVE9QX1BPSU5URVJfT1VUO1xuXG4gICAgaWYgKGlzT3ZlckV2ZW50ICYmIChuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LmZyb21FbGVtZW50KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFpc091dEV2ZW50ICYmICFpc092ZXJFdmVudCkge1xuICAgICAgLy8gTXVzdCBub3QgYmUgYSBtb3VzZSBvciBwb2ludGVyIGluIG9yIG91dCAtIGlnbm9yaW5nLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHdpbiA9IHZvaWQgMDtcbiAgICBpZiAobmF0aXZlRXZlbnRUYXJnZXQud2luZG93ID09PSBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgICAgLy8gYG5hdGl2ZUV2ZW50VGFyZ2V0YCBpcyBwcm9iYWJseSBhIHdpbmRvdyBvYmplY3QuXG4gICAgICB3aW4gPSBuYXRpdmVFdmVudFRhcmdldDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVE9ETzogRmlndXJlIG91dCB3aHkgYG93bmVyRG9jdW1lbnRgIGlzIHNvbWV0aW1lcyB1bmRlZmluZWQgaW4gSUU4LlxuICAgICAgdmFyIGRvYyA9IG5hdGl2ZUV2ZW50VGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gICAgICBpZiAoZG9jKSB7XG4gICAgICAgIHdpbiA9IGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luID0gd2luZG93O1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBmcm9tID0gdm9pZCAwO1xuICAgIHZhciB0byA9IHZvaWQgMDtcbiAgICBpZiAoaXNPdXRFdmVudCkge1xuICAgICAgZnJvbSA9IHRhcmdldEluc3Q7XG4gICAgICB2YXIgcmVsYXRlZCA9IG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQudG9FbGVtZW50O1xuICAgICAgdG8gPSByZWxhdGVkID8gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVsYXRlZCkgOiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBNb3ZpbmcgdG8gYSBub2RlIGZyb20gb3V0c2lkZSB0aGUgd2luZG93LlxuICAgICAgZnJvbSA9IG51bGw7XG4gICAgICB0byA9IHRhcmdldEluc3Q7XG4gICAgfVxuXG4gICAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgICAvLyBOb3RoaW5nIHBlcnRhaW5zIHRvIG91ciBtYW5hZ2VkIGNvbXBvbmVudHMuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgZXZlbnRJbnRlcmZhY2UgPSB2b2lkIDAsXG4gICAgICAgIGxlYXZlRXZlbnRUeXBlID0gdm9pZCAwLFxuICAgICAgICBlbnRlckV2ZW50VHlwZSA9IHZvaWQgMCxcbiAgICAgICAgZXZlbnRUeXBlUHJlZml4ID0gdm9pZCAwO1xuXG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gVE9QX01PVVNFX09VVCB8fCB0b3BMZXZlbFR5cGUgPT09IFRPUF9NT1VTRV9PVkVSKSB7XG4gICAgICBldmVudEludGVyZmFjZSA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4gICAgICBsZWF2ZUV2ZW50VHlwZSA9IGV2ZW50VHlwZXMkMi5tb3VzZUxlYXZlO1xuICAgICAgZW50ZXJFdmVudFR5cGUgPSBldmVudFR5cGVzJDIubW91c2VFbnRlcjtcbiAgICAgIGV2ZW50VHlwZVByZWZpeCA9ICdtb3VzZSc7XG4gICAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09IFRPUF9QT0lOVEVSX09VVCB8fCB0b3BMZXZlbFR5cGUgPT09IFRPUF9QT0lOVEVSX09WRVIpIHtcbiAgICAgIGV2ZW50SW50ZXJmYWNlID0gU3ludGhldGljUG9pbnRlckV2ZW50O1xuICAgICAgbGVhdmVFdmVudFR5cGUgPSBldmVudFR5cGVzJDIucG9pbnRlckxlYXZlO1xuICAgICAgZW50ZXJFdmVudFR5cGUgPSBldmVudFR5cGVzJDIucG9pbnRlckVudGVyO1xuICAgICAgZXZlbnRUeXBlUHJlZml4ID0gJ3BvaW50ZXInO1xuICAgIH1cblxuICAgIHZhciBmcm9tTm9kZSA9IGZyb20gPT0gbnVsbCA/IHdpbiA6IGdldE5vZGVGcm9tSW5zdGFuY2UkMShmcm9tKTtcbiAgICB2YXIgdG9Ob2RlID0gdG8gPT0gbnVsbCA/IHdpbiA6IGdldE5vZGVGcm9tSW5zdGFuY2UkMSh0byk7XG5cbiAgICB2YXIgbGVhdmUgPSBldmVudEludGVyZmFjZS5nZXRQb29sZWQobGVhdmVFdmVudFR5cGUsIGZyb20sIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgbGVhdmUudHlwZSA9IGV2ZW50VHlwZVByZWZpeCArICdsZWF2ZSc7XG4gICAgbGVhdmUudGFyZ2V0ID0gZnJvbU5vZGU7XG4gICAgbGVhdmUucmVsYXRlZFRhcmdldCA9IHRvTm9kZTtcblxuICAgIHZhciBlbnRlciA9IGV2ZW50SW50ZXJmYWNlLmdldFBvb2xlZChlbnRlckV2ZW50VHlwZSwgdG8sIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgZW50ZXIudHlwZSA9IGV2ZW50VHlwZVByZWZpeCArICdlbnRlcic7XG4gICAgZW50ZXIudGFyZ2V0ID0gdG9Ob2RlO1xuICAgIGVudGVyLnJlbGF0ZWRUYXJnZXQgPSBmcm9tTm9kZTtcblxuICAgIGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyhsZWF2ZSwgZW50ZXIsIGZyb20sIHRvKTtcblxuICAgIHJldHVybiBbbGVhdmUsIGVudGVyXTtcbiAgfVxufTtcblxuLyplc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cblxudmFyIGhhc093blByb3BlcnR5JDEgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIC8vIEFkZGVkIHRoZSBub256ZXJvIHkgY2hlY2sgdG8gbWFrZSBGbG93IGhhcHB5LCBidXQgaXQgaXMgcmVkdW5kYW50XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkkMS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIGBSZWFjdEluc3RhbmNlTWFwYCBtYWludGFpbnMgYSBtYXBwaW5nIGZyb20gYSBwdWJsaWMgZmFjaW5nIHN0YXRlZnVsXG4gKiBpbnN0YW5jZSAoa2V5KSBhbmQgdGhlIGludGVybmFsIHJlcHJlc2VudGF0aW9uICh2YWx1ZSkuIFRoaXMgYWxsb3dzIHB1YmxpY1xuICogbWV0aG9kcyB0byBhY2NlcHQgdGhlIHVzZXIgZmFjaW5nIGluc3RhbmNlIGFzIGFuIGFyZ3VtZW50IGFuZCBtYXAgdGhlbSBiYWNrXG4gKiB0byBpbnRlcm5hbCBtZXRob2RzLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIG1vZHVsZSBpcyBjdXJyZW50bHkgc2hhcmVkIGFuZCBhc3N1bWVkIHRvIGJlIHN0YXRlbGVzcy5cbiAqIElmIHRoaXMgYmVjb21lcyBhbiBhY3R1YWwgTWFwLCB0aGF0IHdpbGwgYnJlYWsuXG4gKi9cblxuLyoqXG4gKiBUaGlzIEFQSSBzaG91bGQgYmUgY2FsbGVkIGBkZWxldGVgIGJ1dCB3ZSdkIGhhdmUgdG8gbWFrZSBzdXJlIHRvIGFsd2F5c1xuICogdHJhbnNmb3JtIHRoZXNlIHRvIHN0cmluZ3MgZm9yIElFIHN1cHBvcnQuIFdoZW4gdGhpcyB0cmFuc2Zvcm0gaXMgZnVsbHlcbiAqIHN1cHBvcnRlZCB3ZSBjYW4gcmVuYW1lIGl0LlxuICovXG5cblxuZnVuY3Rpb24gZ2V0KGtleSkge1xuICByZXR1cm4ga2V5Ll9yZWFjdEludGVybmFsRmliZXI7XG59XG5cbmZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgcmV0dXJuIGtleS5fcmVhY3RJbnRlcm5hbEZpYmVyICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gIGtleS5fcmVhY3RJbnRlcm5hbEZpYmVyID0gdmFsdWU7XG59XG5cbi8vIERvbid0IGNoYW5nZSB0aGVzZSB0d28gdmFsdWVzLiBUaGV5J3JlIHVzZWQgYnkgUmVhY3QgRGV2IFRvb2xzLlxudmFyIE5vRWZmZWN0ID0gLyogICAgICAgICAgICAgICovMDtcbnZhciBQZXJmb3JtZWRXb3JrID0gLyogICAgICAgICAqLzE7XG5cbi8vIFlvdSBjYW4gY2hhbmdlIHRoZSByZXN0IChhbmQgYWRkIG1vcmUpLlxudmFyIFBsYWNlbWVudCA9IC8qICAgICAgICAgICAgICovMjtcbnZhciBVcGRhdGUgPSAvKiAgICAgICAgICAgICAgICAqLzQ7XG52YXIgUGxhY2VtZW50QW5kVXBkYXRlID0gLyogICAgKi82O1xudmFyIERlbGV0aW9uID0gLyogICAgICAgICAgICAgICovODtcbnZhciBDb250ZW50UmVzZXQgPSAvKiAgICAgICAgICAqLzE2O1xudmFyIENhbGxiYWNrID0gLyogICAgICAgICAgICAgICovMzI7XG52YXIgRGlkQ2FwdHVyZSA9IC8qICAgICAgICAgICAgKi82NDtcbnZhciBSZWYgPSAvKiAgICAgICAgICAgICAgICAgICAqLzEyODtcbnZhciBTbmFwc2hvdCA9IC8qICAgICAgICAgICAgICAqLzI1NjtcblxuLy8gVXBkYXRlICYgQ2FsbGJhY2sgJiBSZWYgJiBTbmFwc2hvdFxudmFyIExpZmVjeWNsZUVmZmVjdE1hc2sgPSAvKiAgICovNDIwO1xuXG4vLyBVbmlvbiBvZiBhbGwgaG9zdCBlZmZlY3RzXG52YXIgSG9zdEVmZmVjdE1hc2sgPSAvKiAgICAgICAgKi81MTE7XG5cbnZhciBJbmNvbXBsZXRlID0gLyogICAgICAgICAgICAqLzUxMjtcbnZhciBTaG91bGRDYXB0dXJlID0gLyogICAgICAgICAqLzEwMjQ7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciQxID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXI7XG5cbnZhciBNT1VOVElORyA9IDE7XG52YXIgTU9VTlRFRCA9IDI7XG52YXIgVU5NT1VOVEVEID0gMztcblxuZnVuY3Rpb24gaXNGaWJlck1vdW50ZWRJbXBsKGZpYmVyKSB7XG4gIHZhciBub2RlID0gZmliZXI7XG4gIGlmICghZmliZXIuYWx0ZXJuYXRlKSB7XG4gICAgLy8gSWYgdGhlcmUgaXMgbm8gYWx0ZXJuYXRlLCB0aGlzIG1pZ2h0IGJlIGEgbmV3IHRyZWUgdGhhdCBpc24ndCBpbnNlcnRlZFxuICAgIC8vIHlldC4gSWYgaXQgaXMsIHRoZW4gaXQgd2lsbCBoYXZlIGEgcGVuZGluZyBpbnNlcnRpb24gZWZmZWN0IG9uIGl0LlxuICAgIGlmICgobm9kZS5lZmZlY3RUYWcgJiBQbGFjZW1lbnQpICE9PSBOb0VmZmVjdCkge1xuICAgICAgcmV0dXJuIE1PVU5USU5HO1xuICAgIH1cbiAgICB3aGlsZSAobm9kZS5yZXR1cm4pIHtcbiAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgIGlmICgobm9kZS5lZmZlY3RUYWcgJiBQbGFjZW1lbnQpICE9PSBOb0VmZmVjdCkge1xuICAgICAgICByZXR1cm4gTU9VTlRJTkc7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHdoaWxlIChub2RlLnJldHVybikge1xuICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAobm9kZS50YWcgPT09IEhvc3RSb290KSB7XG4gICAgLy8gVE9ETzogQ2hlY2sgaWYgdGhpcyB3YXMgYSBuZXN0ZWQgSG9zdFJvb3Qgd2hlbiB1c2VkIHdpdGhcbiAgICAvLyByZW5kZXJDb250YWluZXJJbnRvU3VidHJlZS5cbiAgICByZXR1cm4gTU9VTlRFRDtcbiAgfVxuICAvLyBJZiB3ZSBkaWRuJ3QgaGl0IHRoZSByb290LCB0aGF0IG1lYW5zIHRoYXQgd2UncmUgaW4gYW4gZGlzY29ubmVjdGVkIHRyZWVcbiAgLy8gdGhhdCBoYXMgYmVlbiB1bm1vdW50ZWQuXG4gIHJldHVybiBVTk1PVU5URUQ7XG59XG5cbmZ1bmN0aW9uIGlzRmliZXJNb3VudGVkKGZpYmVyKSB7XG4gIHJldHVybiBpc0ZpYmVyTW91bnRlZEltcGwoZmliZXIpID09PSBNT1VOVEVEO1xufVxuXG5mdW5jdGlvbiBpc01vdW50ZWQoY29tcG9uZW50KSB7XG4gIHtcbiAgICB2YXIgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lciQxLmN1cnJlbnQ7XG4gICAgaWYgKG93bmVyICE9PSBudWxsICYmIG93bmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQpIHtcbiAgICAgIHZhciBvd25lckZpYmVyID0gb3duZXI7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBvd25lckZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICFpbnN0YW5jZS5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcyBpcyBhY2Nlc3NpbmcgaXNNb3VudGVkIGluc2lkZSBpdHMgcmVuZGVyKCkgZnVuY3Rpb24uICcgKyAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICsgJ25ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzICcgKyAncmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgJyArICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLCBnZXRDb21wb25lbnROYW1lKG93bmVyRmliZXIudHlwZSkgfHwgJ0EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICBpbnN0YW5jZS5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaWJlciA9IGdldChjb21wb25lbnQpO1xuICBpZiAoIWZpYmVyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpYmVyTW91bnRlZEltcGwoZmliZXIpID09PSBNT1VOVEVEO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRJc01vdW50ZWQoZmliZXIpIHtcbiAgIShpc0ZpYmVyTW91bnRlZEltcGwoZmliZXIpID09PSBNT1VOVEVEKSA/IGludmFyaWFudChmYWxzZSwgJ1VuYWJsZSB0byBmaW5kIG5vZGUgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4nKSA6IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgoZmliZXIpIHtcbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgaWYgKCFhbHRlcm5hdGUpIHtcbiAgICAvLyBJZiB0aGVyZSBpcyBubyBhbHRlcm5hdGUsIHRoZW4gd2Ugb25seSBuZWVkIHRvIGNoZWNrIGlmIGl0IGlzIG1vdW50ZWQuXG4gICAgdmFyIHN0YXRlID0gaXNGaWJlck1vdW50ZWRJbXBsKGZpYmVyKTtcbiAgICAhKHN0YXRlICE9PSBVTk1PVU5URUQpID8gaW52YXJpYW50KGZhbHNlLCAnVW5hYmxlIHRvIGZpbmQgbm9kZSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LicpIDogdm9pZCAwO1xuICAgIGlmIChzdGF0ZSA9PT0gTU9VTlRJTkcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZmliZXI7XG4gIH1cbiAgLy8gSWYgd2UgaGF2ZSB0d28gcG9zc2libGUgYnJhbmNoZXMsIHdlJ2xsIHdhbGsgYmFja3dhcmRzIHVwIHRvIHRoZSByb290XG4gIC8vIHRvIHNlZSB3aGF0IHBhdGggdGhlIHJvb3QgcG9pbnRzIHRvLiBPbiB0aGUgd2F5IHdlIG1heSBoaXQgb25lIG9mIHRoZVxuICAvLyBzcGVjaWFsIGNhc2VzIGFuZCB3ZSdsbCBkZWFsIHdpdGggdGhlbS5cbiAgdmFyIGEgPSBmaWJlcjtcbiAgdmFyIGIgPSBhbHRlcm5hdGU7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgdmFyIHBhcmVudEEgPSBhLnJldHVybjtcbiAgICB2YXIgcGFyZW50QiA9IHBhcmVudEEgPyBwYXJlbnRBLmFsdGVybmF0ZSA6IG51bGw7XG4gICAgaWYgKCFwYXJlbnRBIHx8ICFwYXJlbnRCKSB7XG4gICAgICAvLyBXZSdyZSBhdCB0aGUgcm9vdC5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIElmIGJvdGggY29waWVzIG9mIHRoZSBwYXJlbnQgZmliZXIgcG9pbnQgdG8gdGhlIHNhbWUgY2hpbGQsIHdlIGNhblxuICAgIC8vIGFzc3VtZSB0aGF0IHRoZSBjaGlsZCBpcyBjdXJyZW50LiBUaGlzIGhhcHBlbnMgd2hlbiB3ZSBiYWlsb3V0IG9uIGxvd1xuICAgIC8vIHByaW9yaXR5OiB0aGUgYmFpbGVkIG91dCBmaWJlcidzIGNoaWxkIHJldXNlcyB0aGUgY3VycmVudCBjaGlsZC5cbiAgICBpZiAocGFyZW50QS5jaGlsZCA9PT0gcGFyZW50Qi5jaGlsZCkge1xuICAgICAgdmFyIGNoaWxkID0gcGFyZW50QS5jaGlsZDtcbiAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQgPT09IGEpIHtcbiAgICAgICAgICAvLyBXZSd2ZSBkZXRlcm1pbmVkIHRoYXQgQSBpcyB0aGUgY3VycmVudCBicmFuY2guXG4gICAgICAgICAgYXNzZXJ0SXNNb3VudGVkKHBhcmVudEEpO1xuICAgICAgICAgIHJldHVybiBmaWJlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGQgPT09IGIpIHtcbiAgICAgICAgICAvLyBXZSd2ZSBkZXRlcm1pbmVkIHRoYXQgQiBpcyB0aGUgY3VycmVudCBicmFuY2guXG4gICAgICAgICAgYXNzZXJ0SXNNb3VudGVkKHBhcmVudEEpO1xuICAgICAgICAgIHJldHVybiBhbHRlcm5hdGU7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQgPSBjaGlsZC5zaWJsaW5nO1xuICAgICAgfVxuICAgICAgLy8gV2Ugc2hvdWxkIG5ldmVyIGhhdmUgYW4gYWx0ZXJuYXRlIGZvciBhbnkgbW91bnRpbmcgbm9kZS4gU28gdGhlIG9ubHlcbiAgICAgIC8vIHdheSB0aGlzIGNvdWxkIHBvc3NpYmx5IGhhcHBlbiBpcyBpZiB0aGlzIHdhcyB1bm1vdW50ZWQsIGlmIGF0IGFsbC5cbiAgICAgIGludmFyaWFudChmYWxzZSwgJ1VuYWJsZSB0byBmaW5kIG5vZGUgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4nKTtcbiAgICB9XG5cbiAgICBpZiAoYS5yZXR1cm4gIT09IGIucmV0dXJuKSB7XG4gICAgICAvLyBUaGUgcmV0dXJuIHBvaW50ZXIgb2YgQSBhbmQgdGhlIHJldHVybiBwb2ludGVyIG9mIEIgcG9pbnQgdG8gZGlmZmVyZW50XG4gICAgICAvLyBmaWJlcnMuIFdlIGFzc3VtZSB0aGF0IHJldHVybiBwb2ludGVycyBuZXZlciBjcmlzcy1jcm9zcywgc28gQSBtdXN0XG4gICAgICAvLyBiZWxvbmcgdG8gdGhlIGNoaWxkIHNldCBvZiBBLnJldHVybiwgYW5kIEIgbXVzdCBiZWxvbmcgdG8gdGhlIGNoaWxkXG4gICAgICAvLyBzZXQgb2YgQi5yZXR1cm4uXG4gICAgICBhID0gcGFyZW50QTtcbiAgICAgIGIgPSBwYXJlbnRCO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgcmV0dXJuIHBvaW50ZXJzIHBvaW50IHRvIHRoZSBzYW1lIGZpYmVyLiBXZSdsbCBoYXZlIHRvIHVzZSB0aGVcbiAgICAgIC8vIGRlZmF1bHQsIHNsb3cgcGF0aDogc2NhbiB0aGUgY2hpbGQgc2V0cyBvZiBlYWNoIHBhcmVudCBhbHRlcm5hdGUgdG8gc2VlXG4gICAgICAvLyB3aGljaCBjaGlsZCBiZWxvbmdzIHRvIHdoaWNoIHNldC5cbiAgICAgIC8vXG4gICAgICAvLyBTZWFyY2ggcGFyZW50IEEncyBjaGlsZCBzZXRcbiAgICAgIHZhciBkaWRGaW5kQ2hpbGQgPSBmYWxzZTtcbiAgICAgIHZhciBfY2hpbGQgPSBwYXJlbnRBLmNoaWxkO1xuICAgICAgd2hpbGUgKF9jaGlsZCkge1xuICAgICAgICBpZiAoX2NoaWxkID09PSBhKSB7XG4gICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcbiAgICAgICAgICBhID0gcGFyZW50QTtcbiAgICAgICAgICBiID0gcGFyZW50QjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoX2NoaWxkID09PSBiKSB7XG4gICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcbiAgICAgICAgICBiID0gcGFyZW50QTtcbiAgICAgICAgICBhID0gcGFyZW50QjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBfY2hpbGQgPSBfY2hpbGQuc2libGluZztcbiAgICAgIH1cbiAgICAgIGlmICghZGlkRmluZENoaWxkKSB7XG4gICAgICAgIC8vIFNlYXJjaCBwYXJlbnQgQidzIGNoaWxkIHNldFxuICAgICAgICBfY2hpbGQgPSBwYXJlbnRCLmNoaWxkO1xuICAgICAgICB3aGlsZSAoX2NoaWxkKSB7XG4gICAgICAgICAgaWYgKF9jaGlsZCA9PT0gYSkge1xuICAgICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcbiAgICAgICAgICAgIGEgPSBwYXJlbnRCO1xuICAgICAgICAgICAgYiA9IHBhcmVudEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF9jaGlsZCA9PT0gYikge1xuICAgICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcbiAgICAgICAgICAgIGIgPSBwYXJlbnRCO1xuICAgICAgICAgICAgYSA9IHBhcmVudEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgX2NoaWxkID0gX2NoaWxkLnNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgIWRpZEZpbmRDaGlsZCA/IGludmFyaWFudChmYWxzZSwgJ0NoaWxkIHdhcyBub3QgZm91bmQgaW4gZWl0aGVyIHBhcmVudCBzZXQuIFRoaXMgaW5kaWNhdGVzIGEgYnVnIGluIFJlYWN0IHJlbGF0ZWQgdG8gdGhlIHJldHVybiBwb2ludGVyLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAhKGEuYWx0ZXJuYXRlID09PSBiKSA/IGludmFyaWFudChmYWxzZSwgJ1JldHVybiBmaWJlcnMgc2hvdWxkIGFsd2F5cyBiZSBlYWNoIG90aGVyc1xcJyBhbHRlcm5hdGVzLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICB9XG4gIC8vIElmIHRoZSByb290IGlzIG5vdCBhIGhvc3QgY29udGFpbmVyLCB3ZSdyZSBpbiBhIGRpc2Nvbm5lY3RlZCB0cmVlLiBJLmUuXG4gIC8vIHVubW91bnRlZC5cbiAgIShhLnRhZyA9PT0gSG9zdFJvb3QpID8gaW52YXJpYW50KGZhbHNlLCAnVW5hYmxlIHRvIGZpbmQgbm9kZSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LicpIDogdm9pZCAwO1xuICBpZiAoYS5zdGF0ZU5vZGUuY3VycmVudCA9PT0gYSkge1xuICAgIC8vIFdlJ3ZlIGRldGVybWluZWQgdGhhdCBBIGlzIHRoZSBjdXJyZW50IGJyYW5jaC5cbiAgICByZXR1cm4gZmliZXI7XG4gIH1cbiAgLy8gT3RoZXJ3aXNlIEIgaGFzIHRvIGJlIGN1cnJlbnQgYnJhbmNoLlxuICByZXR1cm4gYWx0ZXJuYXRlO1xufVxuXG5mdW5jdGlvbiBmaW5kQ3VycmVudEhvc3RGaWJlcihwYXJlbnQpIHtcbiAgdmFyIGN1cnJlbnRQYXJlbnQgPSBmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aChwYXJlbnQpO1xuICBpZiAoIWN1cnJlbnRQYXJlbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIE5leHQgd2UnbGwgZHJpbGwgZG93biB0aGlzIGNvbXBvbmVudCB0byBmaW5kIHRoZSBmaXJzdCBIb3N0Q29tcG9uZW50L1RleHQuXG4gIHZhciBub2RlID0gY3VycmVudFBhcmVudDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgbm9kZS50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGQpIHtcbiAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChub2RlID09PSBjdXJyZW50UGFyZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgd2hpbGUgKCFub2RlLnNpYmxpbmcpIHtcbiAgICAgIGlmICghbm9kZS5yZXR1cm4gfHwgbm9kZS5yZXR1cm4gPT09IGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfVxuICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICB9XG4gIC8vIEZsb3cgbmVlZHMgdGhlIHJldHVybiBudWxsIGhlcmUsIGJ1dCBFU0xpbnQgY29tcGxhaW5zIGFib3V0IGl0LlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5yZWFjaGFibGVcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGZpbmRDdXJyZW50SG9zdEZpYmVyV2l0aE5vUG9ydGFscyhwYXJlbnQpIHtcbiAgdmFyIGN1cnJlbnRQYXJlbnQgPSBmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aChwYXJlbnQpO1xuICBpZiAoIWN1cnJlbnRQYXJlbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIE5leHQgd2UnbGwgZHJpbGwgZG93biB0aGlzIGNvbXBvbmVudCB0byBmaW5kIHRoZSBmaXJzdCBIb3N0Q29tcG9uZW50L1RleHQuXG4gIHZhciBub2RlID0gY3VycmVudFBhcmVudDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgbm9kZS50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGQgJiYgbm9kZS50YWcgIT09IEhvc3RQb3J0YWwpIHtcbiAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChub2RlID09PSBjdXJyZW50UGFyZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgd2hpbGUgKCFub2RlLnNpYmxpbmcpIHtcbiAgICAgIGlmICghbm9kZS5yZXR1cm4gfHwgbm9kZS5yZXR1cm4gPT09IGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfVxuICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICB9XG4gIC8vIEZsb3cgbmVlZHMgdGhlIHJldHVybiBudWxsIGhlcmUsIGJ1dCBFU0xpbnQgY29tcGxhaW5zIGFib3V0IGl0LlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5yZWFjaGFibGVcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGFkZEV2ZW50QnViYmxlTGlzdGVuZXIoZWxlbWVudCwgZXZlbnRUeXBlLCBsaXN0ZW5lcikge1xuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBhZGRFdmVudENhcHR1cmVMaXN0ZW5lcihlbGVtZW50LCBldmVudFR5cGUsIGxpc3RlbmVyKSB7XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbn1cblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtYW5pbWF0aW9ucy8jQW5pbWF0aW9uRXZlbnQtaW50ZXJmYWNlXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9BbmltYXRpb25FdmVudFxuICovXG52YXIgU3ludGhldGljQW5pbWF0aW9uRXZlbnQgPSBTeW50aGV0aWNFdmVudC5leHRlbmQoe1xuICBhbmltYXRpb25OYW1lOiBudWxsLFxuICBlbGFwc2VkVGltZTogbnVsbCxcbiAgcHNldWRvRWxlbWVudDogbnVsbFxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9jbGlwYm9hcmQtYXBpcy9cbiAqL1xudmFyIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50ID0gU3ludGhldGljRXZlbnQuZXh0ZW5kKHtcbiAgY2xpcGJvYXJkRGF0YTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdjbGlwYm9hcmREYXRhJyBpbiBldmVudCA/IGV2ZW50LmNsaXBib2FyZERhdGEgOiB3aW5kb3cuY2xpcGJvYXJkRGF0YTtcbiAgfVxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBGb2N1c0V2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIFN5bnRoZXRpY0ZvY3VzRXZlbnQgPSBTeW50aGV0aWNVSUV2ZW50LmV4dGVuZCh7XG4gIHJlbGF0ZWRUYXJnZXQ6IG51bGxcbn0pO1xuXG4vKipcbiAqIGBjaGFyQ29kZWAgcmVwcmVzZW50cyB0aGUgYWN0dWFsIFwiY2hhcmFjdGVyIGNvZGVcIiBhbmQgaXMgc2FmZSB0byB1c2Ugd2l0aFxuICogYFN0cmluZy5mcm9tQ2hhckNvZGVgLiBBcyBzdWNoLCBvbmx5IGtleXMgdGhhdCBjb3JyZXNwb25kIHRvIHByaW50YWJsZVxuICogY2hhcmFjdGVycyBwcm9kdWNlIGEgdmFsaWQgYGNoYXJDb2RlYCwgdGhlIG9ubHkgZXhjZXB0aW9uIHRvIHRoaXMgaXMgRW50ZXIuXG4gKiBUaGUgVGFiLWtleSBpcyBjb25zaWRlcmVkIG5vbi1wcmludGFibGUgYW5kIGRvZXMgbm90IGhhdmUgYSBgY2hhckNvZGVgLFxuICogcHJlc3VtYWJseSBiZWNhdXNlIGl0IGRvZXMgbm90IHByb2R1Y2UgYSB0YWItY2hhcmFjdGVyIGluIGJyb3dzZXJzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge251bWJlcn0gTm9ybWFsaXplZCBgY2hhckNvZGVgIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBjaGFyQ29kZSA9IHZvaWQgMDtcbiAgdmFyIGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuXG4gIGlmICgnY2hhckNvZGUnIGluIG5hdGl2ZUV2ZW50KSB7XG4gICAgY2hhckNvZGUgPSBuYXRpdmVFdmVudC5jaGFyQ29kZTtcblxuICAgIC8vIEZGIGRvZXMgbm90IHNldCBgY2hhckNvZGVgIGZvciB0aGUgRW50ZXIta2V5LCBjaGVjayBhZ2FpbnN0IGBrZXlDb2RlYC5cbiAgICBpZiAoY2hhckNvZGUgPT09IDAgJiYga2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIGNoYXJDb2RlID0gMTM7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgYGNoYXJDb2RlYCwgYnV0IGBrZXlDb2RlYCBoYXMgdGhlIGNvcnJlY3QgdmFsdWUuXG4gICAgY2hhckNvZGUgPSBrZXlDb2RlO1xuICB9XG5cbiAgLy8gSUUgYW5kIEVkZ2UgKG9uIFdpbmRvd3MpIGFuZCBDaHJvbWUgLyBTYWZhcmkgKG9uIFdpbmRvd3MgYW5kIExpbnV4KVxuICAvLyByZXBvcnQgRW50ZXIgYXMgY2hhckNvZGUgMTAgd2hlbiBjdHJsIGlzIHByZXNzZWQuXG4gIGlmIChjaGFyQ29kZSA9PT0gMTApIHtcbiAgICBjaGFyQ29kZSA9IDEzO1xuICB9XG5cbiAgLy8gU29tZSBub24tcHJpbnRhYmxlIGtleXMgYXJlIHJlcG9ydGVkIGluIGBjaGFyQ29kZWAvYGtleUNvZGVgLCBkaXNjYXJkIHRoZW0uXG4gIC8vIE11c3Qgbm90IGRpc2NhcmQgdGhlIChub24tKXByaW50YWJsZSBFbnRlci1rZXkuXG4gIGlmIChjaGFyQ29kZSA+PSAzMiB8fCBjaGFyQ29kZSA9PT0gMTMpIHtcbiAgICByZXR1cm4gY2hhckNvZGU7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemF0aW9uIG9mIGRlcHJlY2F0ZWQgSFRNTDUgYGtleWAgdmFsdWVzXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50I0tleV9uYW1lc1xuICovXG52YXIgbm9ybWFsaXplS2V5ID0ge1xuICBFc2M6ICdFc2NhcGUnLFxuICBTcGFjZWJhcjogJyAnLFxuICBMZWZ0OiAnQXJyb3dMZWZ0JyxcbiAgVXA6ICdBcnJvd1VwJyxcbiAgUmlnaHQ6ICdBcnJvd1JpZ2h0JyxcbiAgRG93bjogJ0Fycm93RG93bicsXG4gIERlbDogJ0RlbGV0ZScsXG4gIFdpbjogJ09TJyxcbiAgTWVudTogJ0NvbnRleHRNZW51JyxcbiAgQXBwczogJ0NvbnRleHRNZW51JyxcbiAgU2Nyb2xsOiAnU2Nyb2xsTG9jaycsXG4gIE1velByaW50YWJsZUtleTogJ1VuaWRlbnRpZmllZCdcbn07XG5cbi8qKlxuICogVHJhbnNsYXRpb24gZnJvbSBsZWdhY3kgYGtleUNvZGVgIHRvIEhUTUw1IGBrZXlgXG4gKiBPbmx5IHNwZWNpYWwga2V5cyBzdXBwb3J0ZWQsIGFsbCBvdGhlcnMgZGVwZW5kIG9uIGtleWJvYXJkIGxheW91dCBvciBicm93c2VyXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50I0tleV9uYW1lc1xuICovXG52YXIgdHJhbnNsYXRlVG9LZXkgPSB7XG4gICc4JzogJ0JhY2tzcGFjZScsXG4gICc5JzogJ1RhYicsXG4gICcxMic6ICdDbGVhcicsXG4gICcxMyc6ICdFbnRlcicsXG4gICcxNic6ICdTaGlmdCcsXG4gICcxNyc6ICdDb250cm9sJyxcbiAgJzE4JzogJ0FsdCcsXG4gICcxOSc6ICdQYXVzZScsXG4gICcyMCc6ICdDYXBzTG9jaycsXG4gICcyNyc6ICdFc2NhcGUnLFxuICAnMzInOiAnICcsXG4gICczMyc6ICdQYWdlVXAnLFxuICAnMzQnOiAnUGFnZURvd24nLFxuICAnMzUnOiAnRW5kJyxcbiAgJzM2JzogJ0hvbWUnLFxuICAnMzcnOiAnQXJyb3dMZWZ0JyxcbiAgJzM4JzogJ0Fycm93VXAnLFxuICAnMzknOiAnQXJyb3dSaWdodCcsXG4gICc0MCc6ICdBcnJvd0Rvd24nLFxuICAnNDUnOiAnSW5zZXJ0JyxcbiAgJzQ2JzogJ0RlbGV0ZScsXG4gICcxMTInOiAnRjEnLFxuICAnMTEzJzogJ0YyJyxcbiAgJzExNCc6ICdGMycsXG4gICcxMTUnOiAnRjQnLFxuICAnMTE2JzogJ0Y1JyxcbiAgJzExNyc6ICdGNicsXG4gICcxMTgnOiAnRjcnLFxuICAnMTE5JzogJ0Y4JyxcbiAgJzEyMCc6ICdGOScsXG4gICcxMjEnOiAnRjEwJyxcbiAgJzEyMic6ICdGMTEnLFxuICAnMTIzJzogJ0YxMicsXG4gICcxNDQnOiAnTnVtTG9jaycsXG4gICcxNDUnOiAnU2Nyb2xsTG9jaycsXG4gICcyMjQnOiAnTWV0YSdcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIGBrZXlgIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRFdmVudEtleShuYXRpdmVFdmVudCkge1xuICBpZiAobmF0aXZlRXZlbnQua2V5KSB7XG4gICAgLy8gTm9ybWFsaXplIGluY29uc2lzdGVudCB2YWx1ZXMgcmVwb3J0ZWQgYnkgYnJvd3NlcnMgZHVlIHRvXG4gICAgLy8gaW1wbGVtZW50YXRpb25zIG9mIGEgd29ya2luZyBkcmFmdCBzcGVjaWZpY2F0aW9uLlxuXG4gICAgLy8gRmlyZUZveCBpbXBsZW1lbnRzIGBrZXlgIGJ1dCByZXR1cm5zIGBNb3pQcmludGFibGVLZXlgIGZvciBhbGxcbiAgICAvLyBwcmludGFibGUgY2hhcmFjdGVycyAobm9ybWFsaXplZCB0byBgVW5pZGVudGlmaWVkYCksIGlnbm9yZSBpdC5cbiAgICB2YXIga2V5ID0gbm9ybWFsaXplS2V5W25hdGl2ZUV2ZW50LmtleV0gfHwgbmF0aXZlRXZlbnQua2V5O1xuICAgIGlmIChrZXkgIT09ICdVbmlkZW50aWZpZWQnKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIC8vIEJyb3dzZXIgZG9lcyBub3QgaW1wbGVtZW50IGBrZXlgLCBwb2x5ZmlsbCBhcyBtdWNoIG9mIGl0IGFzIHdlIGNhbi5cbiAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICB2YXIgY2hhckNvZGUgPSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KTtcblxuICAgIC8vIFRoZSBlbnRlci1rZXkgaXMgdGVjaG5pY2FsbHkgYm90aCBwcmludGFibGUgYW5kIG5vbi1wcmludGFibGUgYW5kIGNhblxuICAgIC8vIHRodXMgYmUgY2FwdHVyZWQgYnkgYGtleXByZXNzYCwgbm8gb3RoZXIgbm9uLXByaW50YWJsZSBrZXkgc2hvdWxkLlxuICAgIHJldHVybiBjaGFyQ29kZSA9PT0gMTMgPyAnRW50ZXInIDogU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gIH1cbiAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBuYXRpdmVFdmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgLy8gV2hpbGUgdXNlciBrZXlib2FyZCBsYXlvdXQgZGV0ZXJtaW5lcyB0aGUgYWN0dWFsIG1lYW5pbmcgb2YgZWFjaFxuICAgIC8vIGBrZXlDb2RlYCB2YWx1ZSwgYWxtb3N0IGFsbCBmdW5jdGlvbiBrZXlzIGhhdmUgYSB1bml2ZXJzYWwgdmFsdWUuXG4gICAgcmV0dXJuIHRyYW5zbGF0ZVRvS2V5W25hdGl2ZUV2ZW50LmtleUNvZGVdIHx8ICdVbmlkZW50aWZpZWQnO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBAaW50ZXJmYWNlIEtleWJvYXJkRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IFN5bnRoZXRpY1VJRXZlbnQuZXh0ZW5kKHtcbiAga2V5OiBnZXRFdmVudEtleSxcbiAgbG9jYXRpb246IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIHJlcGVhdDogbnVsbCxcbiAgbG9jYWxlOiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gIC8vIExlZ2FjeSBJbnRlcmZhY2VcbiAgY2hhckNvZGU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGBjaGFyQ29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleVByZXNzIGV2ZW50IGFuZCByZXByZXNlbnRzIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHRoZSBhY3R1YWwgcHJpbnRhYmxlIGNoYXJhY3Rlci5cblxuICAgIC8vIEtleVByZXNzIGlzIGRlcHJlY2F0ZWQsIGJ1dCBpdHMgcmVwbGFjZW1lbnQgaXMgbm90IHlldCBmaW5hbCBhbmQgbm90XG4gICAgLy8gaW1wbGVtZW50ZWQgaW4gYW55IG1ham9yIGJyb3dzZXIuIE9ubHkgS2V5UHJlc3MgaGFzIGNoYXJDb2RlLlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LFxuICBrZXlDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBga2V5Q29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleURvd24vVXAgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gcGh5c2ljYWwga2V5Ym9hcmQga2V5LlxuXG4gICAgLy8gVGhlIGFjdHVhbCBtZWFuaW5nIG9mIHRoZSB2YWx1ZSBkZXBlbmRzIG9uIHRoZSB1c2Vycycga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gd2hpY2ggY2Fubm90IGJlIGRldGVjdGVkLiBBc3N1bWluZyB0aGF0IGl0IGlzIGEgVVMga2V5Ym9hcmQgbGF5b3V0XG4gICAgLy8gcHJvdmlkZXMgYSBzdXJwcmlzaW5nbHkgYWNjdXJhdGUgbWFwcGluZyBmb3IgVVMgYW5kIEV1cm9wZWFuIHVzZXJzLlxuICAgIC8vIER1ZSB0byB0aGlzLCBpdCBpcyBsZWZ0IHRvIHRoZSB1c2VyIHRvIGltcGxlbWVudCBhdCB0aGlzIHRpbWUuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIHdoaWNoOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBgd2hpY2hgIGlzIGFuIGFsaWFzIGZvciBlaXRoZXIgYGtleUNvZGVgIG9yIGBjaGFyQ29kZWAgZGVwZW5kaW5nIG9uIHRoZVxuICAgIC8vIHR5cGUgb2YgdGhlIGV2ZW50LlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG59KTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIERyYWdFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBTeW50aGV0aWNEcmFnRXZlbnQgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmV4dGVuZCh7XG4gIGRhdGFUcmFuc2ZlcjogbnVsbFxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBUb3VjaEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL3RvdWNoLWV2ZW50cy9cbiAqL1xudmFyIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSBTeW50aGV0aWNVSUV2ZW50LmV4dGVuZCh7XG4gIHRvdWNoZXM6IG51bGwsXG4gIHRhcmdldFRvdWNoZXM6IG51bGwsXG4gIGNoYW5nZWRUb3VjaGVzOiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGVcbn0pO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAwOS9XRC1jc3MzLXRyYW5zaXRpb25zLTIwMDkwMzIwLyN0cmFuc2l0aW9uLWV2ZW50cy1cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1RyYW5zaXRpb25FdmVudFxuICovXG52YXIgU3ludGhldGljVHJhbnNpdGlvbkV2ZW50ID0gU3ludGhldGljRXZlbnQuZXh0ZW5kKHtcbiAgcHJvcGVydHlOYW1lOiBudWxsLFxuICBlbGFwc2VkVGltZTogbnVsbCxcbiAgcHNldWRvRWxlbWVudDogbnVsbFxufSk7XG5cbi8qKlxuICogQGludGVyZmFjZSBXaGVlbEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIFN5bnRoZXRpY1doZWVsRXZlbnQgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmV4dGVuZCh7XG4gIGRlbHRhWDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdkZWx0YVgnIGluIGV2ZW50ID8gZXZlbnQuZGVsdGFYIDogLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFYYCBmb3IgV2Via2l0IGFuZCBub3JtYWxpemUgKHJpZ2h0IGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YVgnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFYIDogMDtcbiAgfSxcbiAgZGVsdGFZOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ2RlbHRhWScgaW4gZXZlbnQgPyBldmVudC5kZWx0YVkgOiAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVlgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgJ3doZWVsRGVsdGFZJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhWSA6IC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhYCBmb3IgSUU8OSBhbmQgbm9ybWFsaXplIChkb3duIGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YScgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YSA6IDA7XG4gIH0sXG5cbiAgZGVsdGFaOiBudWxsLFxuXG4gIC8vIEJyb3dzZXJzIHdpdGhvdXQgXCJkZWx0YU1vZGVcIiBpcyByZXBvcnRpbmcgaW4gcmF3IHdoZWVsIGRlbHRhIHdoZXJlIG9uZVxuICAvLyBub3RjaCBvbiB0aGUgc2Nyb2xsIGlzIGFsd2F5cyArLy0gMTIwLCByb3VnaGx5IGVxdWl2YWxlbnQgdG8gcGl4ZWxzLlxuICAvLyBBIGdvb2QgYXBwcm94aW1hdGlvbiBvZiBET01fREVMVEFfTElORSAoMSkgaXMgNSUgb2Ygdmlld3BvcnQgc2l6ZSBvclxuICAvLyB+NDAgcGl4ZWxzLCBmb3IgRE9NX0RFTFRBX1NDUkVFTiAoMikgaXQgaXMgODcuNSUgb2Ygdmlld3BvcnQgc2l6ZS5cbiAgZGVsdGFNb2RlOiBudWxsXG59KTtcblxuLyoqXG4gKiBUdXJuc1xuICogWydhYm9ydCcsIC4uLl1cbiAqIGludG9cbiAqIGV2ZW50VHlwZXMgPSB7XG4gKiAgICdhYm9ydCc6IHtcbiAqICAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICogICAgICAgYnViYmxlZDogJ29uQWJvcnQnLFxuICogICAgICAgY2FwdHVyZWQ6ICdvbkFib3J0Q2FwdHVyZScsXG4gKiAgICAgfSxcbiAqICAgICBkZXBlbmRlbmNpZXM6IFtUT1BfQUJPUlRdLFxuICogICB9LFxuICogICAuLi5cbiAqIH07XG4gKiB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWcgPSBuZXcgTWFwKFtcbiAqICAgW1RPUF9BQk9SVCwgeyBzYW1lQ29uZmlnIH1dLFxuICogXSk7XG4gKi9cblxudmFyIGludGVyYWN0aXZlRXZlbnRUeXBlTmFtZXMgPSBbW1RPUF9CTFVSLCAnYmx1ciddLCBbVE9QX0NBTkNFTCwgJ2NhbmNlbCddLCBbVE9QX0NMSUNLLCAnY2xpY2snXSwgW1RPUF9DTE9TRSwgJ2Nsb3NlJ10sIFtUT1BfQ09OVEVYVF9NRU5VLCAnY29udGV4dE1lbnUnXSwgW1RPUF9DT1BZLCAnY29weSddLCBbVE9QX0NVVCwgJ2N1dCddLCBbVE9QX0FVWF9DTElDSywgJ2F1eENsaWNrJ10sIFtUT1BfRE9VQkxFX0NMSUNLLCAnZG91YmxlQ2xpY2snXSwgW1RPUF9EUkFHX0VORCwgJ2RyYWdFbmQnXSwgW1RPUF9EUkFHX1NUQVJULCAnZHJhZ1N0YXJ0J10sIFtUT1BfRFJPUCwgJ2Ryb3AnXSwgW1RPUF9GT0NVUywgJ2ZvY3VzJ10sIFtUT1BfSU5QVVQsICdpbnB1dCddLCBbVE9QX0lOVkFMSUQsICdpbnZhbGlkJ10sIFtUT1BfS0VZX0RPV04sICdrZXlEb3duJ10sIFtUT1BfS0VZX1BSRVNTLCAna2V5UHJlc3MnXSwgW1RPUF9LRVlfVVAsICdrZXlVcCddLCBbVE9QX01PVVNFX0RPV04sICdtb3VzZURvd24nXSwgW1RPUF9NT1VTRV9VUCwgJ21vdXNlVXAnXSwgW1RPUF9QQVNURSwgJ3Bhc3RlJ10sIFtUT1BfUEFVU0UsICdwYXVzZSddLCBbVE9QX1BMQVksICdwbGF5J10sIFtUT1BfUE9JTlRFUl9DQU5DRUwsICdwb2ludGVyQ2FuY2VsJ10sIFtUT1BfUE9JTlRFUl9ET1dOLCAncG9pbnRlckRvd24nXSwgW1RPUF9QT0lOVEVSX1VQLCAncG9pbnRlclVwJ10sIFtUT1BfUkFURV9DSEFOR0UsICdyYXRlQ2hhbmdlJ10sIFtUT1BfUkVTRVQsICdyZXNldCddLCBbVE9QX1NFRUtFRCwgJ3NlZWtlZCddLCBbVE9QX1NVQk1JVCwgJ3N1Ym1pdCddLCBbVE9QX1RPVUNIX0NBTkNFTCwgJ3RvdWNoQ2FuY2VsJ10sIFtUT1BfVE9VQ0hfRU5ELCAndG91Y2hFbmQnXSwgW1RPUF9UT1VDSF9TVEFSVCwgJ3RvdWNoU3RhcnQnXSwgW1RPUF9WT0xVTUVfQ0hBTkdFLCAndm9sdW1lQ2hhbmdlJ11dO1xudmFyIG5vbkludGVyYWN0aXZlRXZlbnRUeXBlTmFtZXMgPSBbW1RPUF9BQk9SVCwgJ2Fib3J0J10sIFtUT1BfQU5JTUFUSU9OX0VORCwgJ2FuaW1hdGlvbkVuZCddLCBbVE9QX0FOSU1BVElPTl9JVEVSQVRJT04sICdhbmltYXRpb25JdGVyYXRpb24nXSwgW1RPUF9BTklNQVRJT05fU1RBUlQsICdhbmltYXRpb25TdGFydCddLCBbVE9QX0NBTl9QTEFZLCAnY2FuUGxheSddLCBbVE9QX0NBTl9QTEFZX1RIUk9VR0gsICdjYW5QbGF5VGhyb3VnaCddLCBbVE9QX0RSQUcsICdkcmFnJ10sIFtUT1BfRFJBR19FTlRFUiwgJ2RyYWdFbnRlciddLCBbVE9QX0RSQUdfRVhJVCwgJ2RyYWdFeGl0J10sIFtUT1BfRFJBR19MRUFWRSwgJ2RyYWdMZWF2ZSddLCBbVE9QX0RSQUdfT1ZFUiwgJ2RyYWdPdmVyJ10sIFtUT1BfRFVSQVRJT05fQ0hBTkdFLCAnZHVyYXRpb25DaGFuZ2UnXSwgW1RPUF9FTVBUSUVELCAnZW1wdGllZCddLCBbVE9QX0VOQ1JZUFRFRCwgJ2VuY3J5cHRlZCddLCBbVE9QX0VOREVELCAnZW5kZWQnXSwgW1RPUF9FUlJPUiwgJ2Vycm9yJ10sIFtUT1BfR09UX1BPSU5URVJfQ0FQVFVSRSwgJ2dvdFBvaW50ZXJDYXB0dXJlJ10sIFtUT1BfTE9BRCwgJ2xvYWQnXSwgW1RPUF9MT0FERURfREFUQSwgJ2xvYWRlZERhdGEnXSwgW1RPUF9MT0FERURfTUVUQURBVEEsICdsb2FkZWRNZXRhZGF0YSddLCBbVE9QX0xPQURfU1RBUlQsICdsb2FkU3RhcnQnXSwgW1RPUF9MT1NUX1BPSU5URVJfQ0FQVFVSRSwgJ2xvc3RQb2ludGVyQ2FwdHVyZSddLCBbVE9QX01PVVNFX01PVkUsICdtb3VzZU1vdmUnXSwgW1RPUF9NT1VTRV9PVVQsICdtb3VzZU91dCddLCBbVE9QX01PVVNFX09WRVIsICdtb3VzZU92ZXInXSwgW1RPUF9QTEFZSU5HLCAncGxheWluZyddLCBbVE9QX1BPSU5URVJfTU9WRSwgJ3BvaW50ZXJNb3ZlJ10sIFtUT1BfUE9JTlRFUl9PVVQsICdwb2ludGVyT3V0J10sIFtUT1BfUE9JTlRFUl9PVkVSLCAncG9pbnRlck92ZXInXSwgW1RPUF9QUk9HUkVTUywgJ3Byb2dyZXNzJ10sIFtUT1BfU0NST0xMLCAnc2Nyb2xsJ10sIFtUT1BfU0VFS0lORywgJ3NlZWtpbmcnXSwgW1RPUF9TVEFMTEVELCAnc3RhbGxlZCddLCBbVE9QX1NVU1BFTkQsICdzdXNwZW5kJ10sIFtUT1BfVElNRV9VUERBVEUsICd0aW1lVXBkYXRlJ10sIFtUT1BfVE9HR0xFLCAndG9nZ2xlJ10sIFtUT1BfVE9VQ0hfTU9WRSwgJ3RvdWNoTW92ZSddLCBbVE9QX1RSQU5TSVRJT05fRU5ELCAndHJhbnNpdGlvbkVuZCddLCBbVE9QX1dBSVRJTkcsICd3YWl0aW5nJ10sIFtUT1BfV0hFRUwsICd3aGVlbCddXTtcblxudmFyIGV2ZW50VHlwZXMkNCA9IHt9O1xudmFyIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRFdmVudFR5cGVOYW1lVG9Db25maWcoX3JlZiwgaXNJbnRlcmFjdGl2ZSkge1xuICB2YXIgdG9wRXZlbnQgPSBfcmVmWzBdLFxuICAgICAgZXZlbnQgPSBfcmVmWzFdO1xuXG4gIHZhciBjYXBpdGFsaXplZEV2ZW50ID0gZXZlbnRbMF0udG9VcHBlckNhc2UoKSArIGV2ZW50LnNsaWNlKDEpO1xuICB2YXIgb25FdmVudCA9ICdvbicgKyBjYXBpdGFsaXplZEV2ZW50O1xuXG4gIHZhciB0eXBlID0ge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBvbkV2ZW50LFxuICAgICAgY2FwdHVyZWQ6IG9uRXZlbnQgKyAnQ2FwdHVyZSdcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW3RvcEV2ZW50XSxcbiAgICBpc0ludGVyYWN0aXZlOiBpc0ludGVyYWN0aXZlXG4gIH07XG4gIGV2ZW50VHlwZXMkNFtldmVudF0gPSB0eXBlO1xuICB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wRXZlbnRdID0gdHlwZTtcbn1cblxuaW50ZXJhY3RpdmVFdmVudFR5cGVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudFR1cGxlKSB7XG4gIGFkZEV2ZW50VHlwZU5hbWVUb0NvbmZpZyhldmVudFR1cGxlLCB0cnVlKTtcbn0pO1xubm9uSW50ZXJhY3RpdmVFdmVudFR5cGVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudFR1cGxlKSB7XG4gIGFkZEV2ZW50VHlwZU5hbWVUb0NvbmZpZyhldmVudFR1cGxlLCBmYWxzZSk7XG59KTtcblxuLy8gT25seSB1c2VkIGluIERFViBmb3IgZXhoYXVzdGl2ZW5lc3MgdmFsaWRhdGlvbi5cbnZhciBrbm93bkhUTUxUb3BMZXZlbFR5cGVzID0gW1RPUF9BQk9SVCwgVE9QX0NBTkNFTCwgVE9QX0NBTl9QTEFZLCBUT1BfQ0FOX1BMQVlfVEhST1VHSCwgVE9QX0NMT1NFLCBUT1BfRFVSQVRJT05fQ0hBTkdFLCBUT1BfRU1QVElFRCwgVE9QX0VOQ1JZUFRFRCwgVE9QX0VOREVELCBUT1BfRVJST1IsIFRPUF9JTlBVVCwgVE9QX0lOVkFMSUQsIFRPUF9MT0FELCBUT1BfTE9BREVEX0RBVEEsIFRPUF9MT0FERURfTUVUQURBVEEsIFRPUF9MT0FEX1NUQVJULCBUT1BfUEFVU0UsIFRPUF9QTEFZLCBUT1BfUExBWUlORywgVE9QX1BST0dSRVNTLCBUT1BfUkFURV9DSEFOR0UsIFRPUF9SRVNFVCwgVE9QX1NFRUtFRCwgVE9QX1NFRUtJTkcsIFRPUF9TVEFMTEVELCBUT1BfU1VCTUlULCBUT1BfU1VTUEVORCwgVE9QX1RJTUVfVVBEQVRFLCBUT1BfVE9HR0xFLCBUT1BfVk9MVU1FX0NIQU5HRSwgVE9QX1dBSVRJTkddO1xuXG52YXIgU2ltcGxlRXZlbnRQbHVnaW4gPSB7XG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMkNCxcblxuICBpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6IGZ1bmN0aW9uICh0b3BMZXZlbFR5cGUpIHtcbiAgICB2YXIgY29uZmlnID0gdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnW3RvcExldmVsVHlwZV07XG4gICAgcmV0dXJuIGNvbmZpZyAhPT0gdW5kZWZpbmVkICYmIGNvbmZpZy5pc0ludGVyYWN0aXZlID09PSB0cnVlO1xuICB9LFxuXG5cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGRpc3BhdGNoQ29uZmlnID0gdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnW3RvcExldmVsVHlwZV07XG4gICAgaWYgKCFkaXNwYXRjaENvbmZpZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBFdmVudENvbnN0cnVjdG9yID0gdm9pZCAwO1xuICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICBjYXNlIFRPUF9LRVlfUFJFU1M6XG4gICAgICAgIC8vIEZpcmVmb3ggY3JlYXRlcyBhIGtleXByZXNzIGV2ZW50IGZvciBmdW5jdGlvbiBrZXlzIHRvby4gVGhpcyByZW1vdmVzXG4gICAgICAgIC8vIHRoZSB1bndhbnRlZCBrZXlwcmVzcyBldmVudHMuIEVudGVyIGlzIGhvd2V2ZXIgYm90aCBwcmludGFibGUgYW5kXG4gICAgICAgIC8vIG5vbi1wcmludGFibGUuIE9uZSB3b3VsZCBleHBlY3QgVGFiIHRvIGJlIGFzIHdlbGwgKGJ1dCBpdCBpc24ndCkuXG4gICAgICAgIGlmIChnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRPUF9LRVlfRE9XTjpcbiAgICAgIGNhc2UgVE9QX0tFWV9VUDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfQkxVUjpcbiAgICAgIGNhc2UgVE9QX0ZPQ1VTOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRPUF9DTElDSzpcbiAgICAgICAgLy8gRmlyZWZveCBjcmVhdGVzIGEgY2xpY2sgZXZlbnQgb24gcmlnaHQgbW91c2UgY2xpY2tzLiBUaGlzIHJlbW92ZXMgdGhlXG4gICAgICAgIC8vIHVud2FudGVkIGNsaWNrIGV2ZW50cy5cbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmJ1dHRvbiA9PT0gMikge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRPUF9BVVhfQ0xJQ0s6XG4gICAgICBjYXNlIFRPUF9ET1VCTEVfQ0xJQ0s6XG4gICAgICBjYXNlIFRPUF9NT1VTRV9ET1dOOlxuICAgICAgY2FzZSBUT1BfTU9VU0VfTU9WRTpcbiAgICAgIGNhc2UgVE9QX01PVVNFX1VQOlxuICAgICAgLy8gVE9ETzogRGlzYWJsZWQgZWxlbWVudHMgc2hvdWxkIG5vdCByZXNwb25kIHRvIG1vdXNlIGV2ZW50c1xuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBUT1BfTU9VU0VfT1VUOlxuICAgICAgY2FzZSBUT1BfTU9VU0VfT1ZFUjpcbiAgICAgIGNhc2UgVE9QX0NPTlRFWFRfTUVOVTpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfRFJBRzpcbiAgICAgIGNhc2UgVE9QX0RSQUdfRU5EOlxuICAgICAgY2FzZSBUT1BfRFJBR19FTlRFUjpcbiAgICAgIGNhc2UgVE9QX0RSQUdfRVhJVDpcbiAgICAgIGNhc2UgVE9QX0RSQUdfTEVBVkU6XG4gICAgICBjYXNlIFRPUF9EUkFHX09WRVI6XG4gICAgICBjYXNlIFRPUF9EUkFHX1NUQVJUOlxuICAgICAgY2FzZSBUT1BfRFJPUDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRPUF9UT1VDSF9DQU5DRUw6XG4gICAgICBjYXNlIFRPUF9UT1VDSF9FTkQ6XG4gICAgICBjYXNlIFRPUF9UT1VDSF9NT1ZFOlxuICAgICAgY2FzZSBUT1BfVE9VQ0hfU1RBUlQ6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVE9QX0FOSU1BVElPTl9FTkQ6XG4gICAgICBjYXNlIFRPUF9BTklNQVRJT05fSVRFUkFUSU9OOlxuICAgICAgY2FzZSBUT1BfQU5JTUFUSU9OX1NUQVJUOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQW5pbWF0aW9uRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfVFJBTlNJVElPTl9FTkQ6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfU0NST0xMOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVUlFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRPUF9XSEVFTDpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfQ09QWTpcbiAgICAgIGNhc2UgVE9QX0NVVDpcbiAgICAgIGNhc2UgVE9QX1BBU1RFOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfR09UX1BPSU5URVJfQ0FQVFVSRTpcbiAgICAgIGNhc2UgVE9QX0xPU1RfUE9JTlRFUl9DQVBUVVJFOlxuICAgICAgY2FzZSBUT1BfUE9JTlRFUl9DQU5DRUw6XG4gICAgICBjYXNlIFRPUF9QT0lOVEVSX0RPV046XG4gICAgICBjYXNlIFRPUF9QT0lOVEVSX01PVkU6XG4gICAgICBjYXNlIFRPUF9QT0lOVEVSX09VVDpcbiAgICAgIGNhc2UgVE9QX1BPSU5URVJfT1ZFUjpcbiAgICAgIGNhc2UgVE9QX1BPSU5URVJfVVA6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNQb2ludGVyRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChrbm93bkhUTUxUb3BMZXZlbFR5cGVzLmluZGV4T2YodG9wTGV2ZWxUeXBlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ1NpbXBsZUV2ZW50UGx1Z2luOiBVbmhhbmRsZWQgZXZlbnQgdHlwZSwgYCVzYC4gVGhpcyB3YXJuaW5nICcgKyAnaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJywgdG9wTGV2ZWxUeXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSFRNTCBFdmVudHNcbiAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmRleC5odG1sI2V2ZW50cy0wXG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBldmVudCA9IEV2ZW50Q29uc3RydWN0b3IuZ2V0UG9vbGVkKGRpc3BhdGNoQ29uZmlnLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfVxufTtcblxudmFyIGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZSA9IFNpbXBsZUV2ZW50UGx1Z2luLmlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTtcblxuXG52YXIgQ0FMTEJBQ0tfQk9PS0tFRVBJTkdfUE9PTF9TSVpFID0gMTA7XG52YXIgY2FsbGJhY2tCb29ra2VlcGluZ1Bvb2wgPSBbXTtcblxuLyoqXG4gKiBGaW5kIHRoZSBkZWVwZXN0IFJlYWN0IGNvbXBvbmVudCBjb21wbGV0ZWx5IGNvbnRhaW5pbmcgdGhlIHJvb3Qgb2YgdGhlXG4gKiBwYXNzZWQtaW4gaW5zdGFuY2UgKGZvciB1c2Ugd2hlbiBlbnRpcmUgUmVhY3QgdHJlZXMgYXJlIG5lc3RlZCB3aXRoaW4gZWFjaFxuICogb3RoZXIpLiBJZiBSZWFjdCB0cmVlcyBhcmUgbm90IG5lc3RlZCwgcmV0dXJucyBudWxsLlxuICovXG5mdW5jdGlvbiBmaW5kUm9vdENvbnRhaW5lck5vZGUoaW5zdCkge1xuICAvLyBUT0RPOiBJdCBtYXkgYmUgYSBnb29kIGlkZWEgdG8gY2FjaGUgdGhpcyB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IERPTVxuICAvLyB0cmF2ZXJzYWwsIGJ1dCBjYWNoaW5nIGlzIGRpZmZpY3VsdCB0byBkbyBjb3JyZWN0bHkgd2l0aG91dCB1c2luZyBhXG4gIC8vIG11dGF0aW9uIG9ic2VydmVyIHRvIGxpc3RlbiBmb3IgYWxsIERPTSBjaGFuZ2VzLlxuICB3aGlsZSAoaW5zdC5yZXR1cm4pIHtcbiAgICBpbnN0ID0gaW5zdC5yZXR1cm47XG4gIH1cbiAgaWYgKGluc3QudGFnICE9PSBIb3N0Um9vdCkge1xuICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiB3ZSdyZSBpbiBhIGRldGFjaGVkIHRyZWUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGluc3Quc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG59XG5cbi8vIFVzZWQgdG8gc3RvcmUgYW5jZXN0b3IgaGllcmFyY2h5IGluIHRvcCBsZXZlbCBjYWxsYmFja1xuZnVuY3Rpb24gZ2V0VG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQsIHRhcmdldEluc3QpIHtcbiAgaWYgKGNhbGxiYWNrQm9va2tlZXBpbmdQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IGNhbGxiYWNrQm9va2tlZXBpbmdQb29sLnBvcCgpO1xuICAgIGluc3RhbmNlLnRvcExldmVsVHlwZSA9IHRvcExldmVsVHlwZTtcbiAgICBpbnN0YW5jZS5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICAgIGluc3RhbmNlLnRhcmdldEluc3QgPSB0YXJnZXRJbnN0O1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHRvcExldmVsVHlwZTogdG9wTGV2ZWxUeXBlLFxuICAgIG5hdGl2ZUV2ZW50OiBuYXRpdmVFdmVudCxcbiAgICB0YXJnZXRJbnN0OiB0YXJnZXRJbnN0LFxuICAgIGFuY2VzdG9yczogW11cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVsZWFzZVRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZyhpbnN0YW5jZSkge1xuICBpbnN0YW5jZS50b3BMZXZlbFR5cGUgPSBudWxsO1xuICBpbnN0YW5jZS5uYXRpdmVFdmVudCA9IG51bGw7XG4gIGluc3RhbmNlLnRhcmdldEluc3QgPSBudWxsO1xuICBpbnN0YW5jZS5hbmNlc3RvcnMubGVuZ3RoID0gMDtcbiAgaWYgKGNhbGxiYWNrQm9va2tlZXBpbmdQb29sLmxlbmd0aCA8IENBTExCQUNLX0JPT0tLRUVQSU5HX1BPT0xfU0laRSkge1xuICAgIGNhbGxiYWNrQm9va2tlZXBpbmdQb29sLnB1c2goaW5zdGFuY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVRvcExldmVsKGJvb2tLZWVwaW5nKSB7XG4gIHZhciB0YXJnZXRJbnN0ID0gYm9va0tlZXBpbmcudGFyZ2V0SW5zdDtcblxuICAvLyBMb29wIHRocm91Z2ggdGhlIGhpZXJhcmNoeSwgaW4gY2FzZSB0aGVyZSdzIGFueSBuZXN0ZWQgY29tcG9uZW50cy5cbiAgLy8gSXQncyBpbXBvcnRhbnQgdGhhdCB3ZSBidWlsZCB0aGUgYXJyYXkgb2YgYW5jZXN0b3JzIGJlZm9yZSBjYWxsaW5nIGFueVxuICAvLyBldmVudCBoYW5kbGVycywgYmVjYXVzZSBldmVudCBoYW5kbGVycyBjYW4gbW9kaWZ5IHRoZSBET00sIGxlYWRpbmcgdG9cbiAgLy8gaW5jb25zaXN0ZW5jaWVzIHdpdGggUmVhY3RNb3VudCdzIG5vZGUgY2FjaGUuIFNlZSAjMTEwNS5cbiAgdmFyIGFuY2VzdG9yID0gdGFyZ2V0SW5zdDtcbiAgZG8ge1xuICAgIGlmICghYW5jZXN0b3IpIHtcbiAgICAgIGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5wdXNoKGFuY2VzdG9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgcm9vdCA9IGZpbmRSb290Q29udGFpbmVyTm9kZShhbmNlc3Rvcik7XG4gICAgaWYgKCFyb290KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgYm9va0tlZXBpbmcuYW5jZXN0b3JzLnB1c2goYW5jZXN0b3IpO1xuICAgIGFuY2VzdG9yID0gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocm9vdCk7XG4gIH0gd2hpbGUgKGFuY2VzdG9yKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5sZW5ndGg7IGkrKykge1xuICAgIHRhcmdldEluc3QgPSBib29rS2VlcGluZy5hbmNlc3RvcnNbaV07XG4gICAgcnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaChib29rS2VlcGluZy50b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50LCBnZXRFdmVudFRhcmdldChib29rS2VlcGluZy5uYXRpdmVFdmVudCkpO1xuICB9XG59XG5cbi8vIFRPRE86IGNhbiB3ZSBzdG9wIGV4cG9ydGluZyB0aGVzZT9cbnZhciBfZW5hYmxlZCA9IHRydWU7XG5cbmZ1bmN0aW9uIHNldEVuYWJsZWQoZW5hYmxlZCkge1xuICBfZW5hYmxlZCA9ICEhZW5hYmxlZDtcbn1cblxuZnVuY3Rpb24gaXNFbmFibGVkKCkge1xuICByZXR1cm4gX2VuYWJsZWQ7XG59XG5cbi8qKlxuICogVHJhcHMgdG9wLWxldmVsIGV2ZW50cyBieSB1c2luZyBldmVudCBidWJibGluZy5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdG9wTGV2ZWxUeXBlIE51bWJlciBmcm9tIGBUb3BMZXZlbEV2ZW50VHlwZXNgLlxuICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnQgRWxlbWVudCBvbiB3aGljaCB0byBhdHRhY2ggbGlzdGVuZXIuXG4gKiBAcmV0dXJuIHs/b2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBhIHJlbW92ZSBmdW5jdGlvbiB3aGljaCB3aWxsIGZvcmNlZnVsbHlcbiAqICAgICAgICAgICAgICAgICAgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiB0cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZSwgZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgZGlzcGF0Y2ggPSBpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUodG9wTGV2ZWxUeXBlKSA/IGRpc3BhdGNoSW50ZXJhY3RpdmVFdmVudCA6IGRpc3BhdGNoRXZlbnQ7XG5cbiAgYWRkRXZlbnRCdWJibGVMaXN0ZW5lcihlbGVtZW50LCBnZXRSYXdFdmVudE5hbWUodG9wTGV2ZWxUeXBlKSxcbiAgLy8gQ2hlY2sgaWYgaW50ZXJhY3RpdmUgYW5kIHdyYXAgaW4gaW50ZXJhY3RpdmVVcGRhdGVzXG4gIGRpc3BhdGNoLmJpbmQobnVsbCwgdG9wTGV2ZWxUeXBlKSk7XG59XG5cbi8qKlxuICogVHJhcHMgYSB0b3AtbGV2ZWwgZXZlbnQgYnkgdXNpbmcgZXZlbnQgY2FwdHVyaW5nLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3BMZXZlbFR5cGUgTnVtYmVyIGZyb20gYFRvcExldmVsRXZlbnRUeXBlc2AuXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudCBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAqIEByZXR1cm4gez9vYmplY3R9IEFuIG9iamVjdCB3aXRoIGEgcmVtb3ZlIGZ1bmN0aW9uIHdoaWNoIHdpbGwgZm9yY2VmdWxseVxuICogICAgICAgICAgICAgICAgICByZW1vdmUgdGhlIGxpc3RlbmVyLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIHRyYXBDYXB0dXJlZEV2ZW50KHRvcExldmVsVHlwZSwgZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgZGlzcGF0Y2ggPSBpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUodG9wTGV2ZWxUeXBlKSA/IGRpc3BhdGNoSW50ZXJhY3RpdmVFdmVudCA6IGRpc3BhdGNoRXZlbnQ7XG5cbiAgYWRkRXZlbnRDYXB0dXJlTGlzdGVuZXIoZWxlbWVudCwgZ2V0UmF3RXZlbnROYW1lKHRvcExldmVsVHlwZSksXG4gIC8vIENoZWNrIGlmIGludGVyYWN0aXZlIGFuZCB3cmFwIGluIGludGVyYWN0aXZlVXBkYXRlc1xuICBkaXNwYXRjaC5iaW5kKG51bGwsIHRvcExldmVsVHlwZSkpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEludGVyYWN0aXZlRXZlbnQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBpbnRlcmFjdGl2ZVVwZGF0ZXMoZGlzcGF0Y2hFdmVudCwgdG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBpZiAoIV9lbmFibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG5hdGl2ZUV2ZW50VGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpO1xuICB2YXIgdGFyZ2V0SW5zdCA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgaWYgKHRhcmdldEluc3QgIT09IG51bGwgJiYgdHlwZW9mIHRhcmdldEluc3QudGFnID09PSAnbnVtYmVyJyAmJiAhaXNGaWJlck1vdW50ZWQodGFyZ2V0SW5zdCkpIHtcbiAgICAvLyBJZiB3ZSBnZXQgYW4gZXZlbnQgKGV4OiBpbWcgb25sb2FkKSBiZWZvcmUgY29tbWl0dGluZyB0aGF0XG4gICAgLy8gY29tcG9uZW50J3MgbW91bnQsIGlnbm9yZSBpdCBmb3Igbm93ICh0aGF0IGlzLCB0cmVhdCBpdCBhcyBpZiBpdCB3YXMgYW5cbiAgICAvLyBldmVudCBvbiBhIG5vbi1SZWFjdCB0cmVlKS4gV2UgbWlnaHQgYWxzbyBjb25zaWRlciBxdWV1ZWluZyBldmVudHMgYW5kXG4gICAgLy8gZGlzcGF0Y2hpbmcgdGhlbSBhZnRlciB0aGUgbW91bnQuXG4gICAgdGFyZ2V0SW5zdCA9IG51bGw7XG4gIH1cblxuICB2YXIgYm9va0tlZXBpbmcgPSBnZXRUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCwgdGFyZ2V0SW5zdCk7XG5cbiAgdHJ5IHtcbiAgICAvLyBFdmVudCBxdWV1ZSBiZWluZyBwcm9jZXNzZWQgaW4gdGhlIHNhbWUgY3ljbGUgYWxsb3dzXG4gICAgLy8gYHByZXZlbnREZWZhdWx0YC5cbiAgICBiYXRjaGVkVXBkYXRlcyhoYW5kbGVUb3BMZXZlbCwgYm9va0tlZXBpbmcpO1xuICB9IGZpbmFsbHkge1xuICAgIHJlbGVhc2VUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcoYm9va0tlZXBpbmcpO1xuICB9XG59XG5cbi8qKlxuICogU3VtbWFyeSBvZiBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBldmVudCBoYW5kbGluZzpcbiAqXG4gKiAgLSBUb3AtbGV2ZWwgZGVsZWdhdGlvbiBpcyB1c2VkIHRvIHRyYXAgbW9zdCBuYXRpdmUgYnJvd3NlciBldmVudHMuIFRoaXNcbiAqICAgIG1heSBvbmx5IG9jY3VyIGluIHRoZSBtYWluIHRocmVhZCBhbmQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mXG4gKiAgICBSZWFjdERPTUV2ZW50TGlzdGVuZXIsIHdoaWNoIGlzIGluamVjdGVkIGFuZCBjYW4gdGhlcmVmb3JlIHN1cHBvcnRcbiAqICAgIHBsdWdnYWJsZSBldmVudCBzb3VyY2VzLiBUaGlzIGlzIHRoZSBvbmx5IHdvcmsgdGhhdCBvY2N1cnMgaW4gdGhlIG1haW5cbiAqICAgIHRocmVhZC5cbiAqXG4gKiAgLSBXZSBub3JtYWxpemUgYW5kIGRlLWR1cGxpY2F0ZSBldmVudHMgdG8gYWNjb3VudCBmb3IgYnJvd3NlciBxdWlya3MuIFRoaXNcbiAqICAgIG1heSBiZSBkb25lIGluIHRoZSB3b3JrZXIgdGhyZWFkLlxuICpcbiAqICAtIEZvcndhcmQgdGhlc2UgbmF0aXZlIGV2ZW50cyAod2l0aCB0aGUgYXNzb2NpYXRlZCB0b3AtbGV2ZWwgdHlwZSB1c2VkIHRvXG4gKiAgICB0cmFwIGl0KSB0byBgRXZlbnRQbHVnaW5IdWJgLCB3aGljaCBpbiB0dXJuIHdpbGwgYXNrIHBsdWdpbnMgaWYgdGhleSB3YW50XG4gKiAgICB0byBleHRyYWN0IGFueSBzeW50aGV0aWMgZXZlbnRzLlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHdpbGwgdGhlbiBwcm9jZXNzIGVhY2ggZXZlbnQgYnkgYW5ub3RhdGluZyB0aGVtIHdpdGhcbiAqICAgIFwiZGlzcGF0Y2hlc1wiLCBhIHNlcXVlbmNlIG9mIGxpc3RlbmVycyBhbmQgSURzIHRoYXQgY2FyZSBhYm91dCB0aGF0IGV2ZW50LlxuICpcbiAqICAtIFRoZSBgRXZlbnRQbHVnaW5IdWJgIHRoZW4gZGlzcGF0Y2hlcyB0aGUgZXZlbnRzLlxuICpcbiAqIE92ZXJ2aWV3IG9mIFJlYWN0IGFuZCB0aGUgZXZlbnQgc3lzdGVtOlxuICpcbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgICAgRE9NICAgICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqICAgICAgIHwgICAgICAgICAgIC5cbiAqICAgICAgIHYgICAgICAgICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC5cbiAqIHwgUmVhY3RFdmVudCB8ICAgIC5cbiAqIHwgIExpc3RlbmVyICB8ICAgIC5cbiAqICstLS0tLS0tLS0tLS0rICAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgICstLS0tLS0tLSt8U2ltcGxlRXZlbnR8XG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgfCAgICAgICAgIHxQbHVnaW4gICAgIHxcbiAqICstLS0tLXwtLS0tLS0rICAgIC4gICAgICAgICAgICAgICB2ICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58RXZlbnRQbHVnaW5IdWJ8ICAgICAgICAgICAgICAgICAgICB8ICAgIEV2ZW50ICAgfFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8IFByb3BhZ2F0b3JzfFxuICogfCBSZWFjdEV2ZW50IHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICB8VGFwRXZlbnQgICB8ICB8LS0tLS0tLS0tLS0tfFxuICogfCAgRW1pdHRlciAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8PC0tLSt8UGx1Z2luICAgICB8ICB8b3RoZXIgcGx1Z2lufFxuICogfCAgICAgICAgICAgIHwgICAgLiAgICB8ICAgICAgICAgICAgICB8ICAgICArLS0tLS0tLS0tLS0rICB8ICB1dGlsaXRpZXMgfFxuICogfCAgICAgKy0tLS0tLS0tLS0tLi0tLT58ICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogfCAgICAgfCAgICAgIHwgICAgLiAgICArLS0tLS0tLS0tLS0tLS0rXG4gKiArLS0tLS18LS0tLS0tKyAgICAuICAgICAgICAgICAgICAgIF4gICAgICAgICstLS0tLS0tLS0tLStcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICAgfCAgICAgICAgfEVudGVyL0xlYXZlfFxuICogICAgICAgKyAgICAgICAgICAgLiAgICAgICAgICAgICAgICArLS0tLS0tLSt8UGx1Z2luICAgICB8XG4gKiArLS0tLS0tLS0tLS0tLSsgICAuICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLStcbiAqIHwgYXBwbGljYXRpb24gfCAgIC5cbiAqIHwtLS0tLS0tLS0tLS0tfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqIHwgICAgICAgICAgICAgfCAgIC5cbiAqICstLS0tLS0tLS0tLS0tKyAgIC5cbiAqICAgICAgICAgICAgICAgICAgIC5cbiAqICAgIFJlYWN0IENvcmUgICAgIC4gIEdlbmVyYWwgUHVycG9zZSBFdmVudCBQbHVnaW4gU3lzdGVtXG4gKi9cblxudmFyIGFscmVhZHlMaXN0ZW5pbmdUbyA9IHt9O1xudmFyIHJlYWN0VG9wTGlzdGVuZXJzQ291bnRlciA9IDA7XG5cbi8qKlxuICogVG8gZW5zdXJlIG5vIGNvbmZsaWN0cyB3aXRoIG90aGVyIHBvdGVudGlhbCBSZWFjdCBpbnN0YW5jZXMgb24gdGhlIHBhZ2VcbiAqL1xudmFyIHRvcExpc3RlbmVyc0lES2V5ID0gJ19yZWFjdExpc3RlbmVyc0lEJyArICgnJyArIE1hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuXG5mdW5jdGlvbiBnZXRMaXN0ZW5pbmdGb3JEb2N1bWVudChtb3VudEF0KSB7XG4gIC8vIEluIElFOCwgYG1vdW50QXRgIGlzIGEgaG9zdCBvYmplY3QgYW5kIGRvZXNuJ3QgaGF2ZSBgaGFzT3duUHJvcGVydHlgXG4gIC8vIGRpcmVjdGx5LlxuICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3VudEF0LCB0b3BMaXN0ZW5lcnNJREtleSkpIHtcbiAgICBtb3VudEF0W3RvcExpc3RlbmVyc0lES2V5XSA9IHJlYWN0VG9wTGlzdGVuZXJzQ291bnRlcisrO1xuICAgIGFscmVhZHlMaXN0ZW5pbmdUb1ttb3VudEF0W3RvcExpc3RlbmVyc0lES2V5XV0gPSB7fTtcbiAgfVxuICByZXR1cm4gYWxyZWFkeUxpc3RlbmluZ1RvW21vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldXTtcbn1cblxuLyoqXG4gKiBXZSBsaXN0ZW4gZm9yIGJ1YmJsZWQgdG91Y2ggZXZlbnRzIG9uIHRoZSBkb2N1bWVudCBvYmplY3QuXG4gKlxuICogRmlyZWZveCB2OC4wMSAoYW5kIHBvc3NpYmx5IG90aGVycykgZXhoaWJpdGVkIHN0cmFuZ2UgYmVoYXZpb3Igd2hlblxuICogbW91bnRpbmcgYG9ubW91c2Vtb3ZlYCBldmVudHMgYXQgc29tZSBub2RlIHRoYXQgd2FzIG5vdCB0aGUgZG9jdW1lbnRcbiAqIGVsZW1lbnQuIFRoZSBzeW1wdG9tcyB3ZXJlIHRoYXQgaWYgeW91ciBtb3VzZSBpcyBub3QgbW92aW5nIG92ZXIgc29tZXRoaW5nXG4gKiBjb250YWluZWQgd2l0aGluIHRoYXQgbW91bnQgcG9pbnQgKGZvciBleGFtcGxlIG9uIHRoZSBiYWNrZ3JvdW5kKSB0aGVcbiAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgZm9yIGBvbm1vdXNlbW92ZWAgd29uJ3QgYmUgY2FsbGVkLiBIb3dldmVyLCBpZiB5b3VcbiAqIHJlZ2lzdGVyIHRoZSBgbW91c2Vtb3ZlYCBvbiB0aGUgZG9jdW1lbnQgb2JqZWN0LCB0aGVuIGl0IHdpbGwgb2YgY291cnNlXG4gKiBjYXRjaCBhbGwgYG1vdXNlbW92ZWBzLiBUaGlzIGFsb25nIHdpdGggaU9TIHF1aXJrcywganVzdGlmaWVzIHJlc3RyaWN0aW5nXG4gKiB0b3AtbGV2ZWwgbGlzdGVuZXJzIHRvIHRoZSBkb2N1bWVudCBvYmplY3Qgb25seSwgYXQgbGVhc3QgZm9yIHRoZXNlXG4gKiBtb3ZlbWVudCB0eXBlcyBvZiBldmVudHMgYW5kIHBvc3NpYmx5IGFsbCBldmVudHMuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxMC8wOS9jbGlja19ldmVudF9kZWwuaHRtbFxuICpcbiAqIEFsc28sIGBrZXl1cGAvYGtleXByZXNzYC9ga2V5ZG93bmAgZG8gbm90IGJ1YmJsZSB0byB0aGUgd2luZG93IG9uIElFLCBidXRcbiAqIHRoZXkgYnViYmxlIHRvIGRvY3VtZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBtb3VudEF0IENvbnRhaW5lciB3aGVyZSB0byBtb3VudCB0aGUgbGlzdGVuZXJcbiAqL1xuZnVuY3Rpb24gbGlzdGVuVG8ocmVnaXN0cmF0aW9uTmFtZSwgbW91bnRBdCkge1xuICB2YXIgaXNMaXN0ZW5pbmcgPSBnZXRMaXN0ZW5pbmdGb3JEb2N1bWVudChtb3VudEF0KTtcbiAgdmFyIGRlcGVuZGVuY2llcyA9IHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVwZW5kZW5jeSA9IGRlcGVuZGVuY2llc1tpXTtcbiAgICBpZiAoIShpc0xpc3RlbmluZy5oYXNPd25Qcm9wZXJ0eShkZXBlbmRlbmN5KSAmJiBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSkpIHtcbiAgICAgIHN3aXRjaCAoZGVwZW5kZW5jeSkge1xuICAgICAgICBjYXNlIFRPUF9TQ1JPTEw6XG4gICAgICAgICAgdHJhcENhcHR1cmVkRXZlbnQoVE9QX1NDUk9MTCwgbW91bnRBdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVE9QX0ZPQ1VTOlxuICAgICAgICBjYXNlIFRPUF9CTFVSOlxuICAgICAgICAgIHRyYXBDYXB0dXJlZEV2ZW50KFRPUF9GT0NVUywgbW91bnRBdCk7XG4gICAgICAgICAgdHJhcENhcHR1cmVkRXZlbnQoVE9QX0JMVVIsIG1vdW50QXQpO1xuICAgICAgICAgIC8vIFdlIHNldCB0aGUgZmxhZyBmb3IgYSBzaW5nbGUgZGVwZW5kZW5jeSBsYXRlciBpbiB0aGlzIGZ1bmN0aW9uLFxuICAgICAgICAgIC8vIGJ1dCB0aGlzIGVuc3VyZXMgd2UgbWFyayBib3RoIGFzIGF0dGFjaGVkIHJhdGhlciB0aGFuIGp1c3Qgb25lLlxuICAgICAgICAgIGlzTGlzdGVuaW5nW1RPUF9CTFVSXSA9IHRydWU7XG4gICAgICAgICAgaXNMaXN0ZW5pbmdbVE9QX0ZPQ1VTXSA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgVE9QX0NBTkNFTDpcbiAgICAgICAgY2FzZSBUT1BfQ0xPU0U6XG4gICAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoZ2V0UmF3RXZlbnROYW1lKGRlcGVuZGVuY3kpKSkge1xuICAgICAgICAgICAgdHJhcENhcHR1cmVkRXZlbnQoZGVwZW5kZW5jeSwgbW91bnRBdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFRPUF9JTlZBTElEOlxuICAgICAgICBjYXNlIFRPUF9TVUJNSVQ6XG4gICAgICAgIGNhc2UgVE9QX1JFU0VUOlxuICAgICAgICAgIC8vIFdlIGxpc3RlbiB0byB0aGVtIG9uIHRoZSB0YXJnZXQgRE9NIGVsZW1lbnRzLlxuICAgICAgICAgIC8vIFNvbWUgb2YgdGhlbSBidWJibGUgc28gd2UgZG9uJ3Qgd2FudCB0aGVtIHRvIGZpcmUgdHdpY2UuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gQnkgZGVmYXVsdCwgbGlzdGVuIG9uIHRoZSB0b3AgbGV2ZWwgdG8gYWxsIG5vbi1tZWRpYSBldmVudHMuXG4gICAgICAgICAgLy8gTWVkaWEgZXZlbnRzIGRvbid0IGJ1YmJsZSBzbyBhZGRpbmcgdGhlIGxpc3RlbmVyIHdvdWxkbid0IGRvIGFueXRoaW5nLlxuICAgICAgICAgIHZhciBpc01lZGlhRXZlbnQgPSBtZWRpYUV2ZW50VHlwZXMuaW5kZXhPZihkZXBlbmRlbmN5KSAhPT0gLTE7XG4gICAgICAgICAgaWYgKCFpc01lZGlhRXZlbnQpIHtcbiAgICAgICAgICAgIHRyYXBCdWJibGVkRXZlbnQoZGVwZW5kZW5jeSwgbW91bnRBdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaXNMaXN0ZW5pbmdbZGVwZW5kZW5jeV0gPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc0xpc3RlbmluZ1RvQWxsRGVwZW5kZW5jaWVzKHJlZ2lzdHJhdGlvbk5hbWUsIG1vdW50QXQpIHtcbiAgdmFyIGlzTGlzdGVuaW5nID0gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCk7XG4gIHZhciBkZXBlbmRlbmNpZXMgPSByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXBlbmRlbmN5ID0gZGVwZW5kZW5jaWVzW2ldO1xuICAgIGlmICghKGlzTGlzdGVuaW5nLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpICYmIGlzTGlzdGVuaW5nW2RlcGVuZGVuY3ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIHtcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG4vKipcbiAqIEdpdmVuIGFueSBub2RlIHJldHVybiB0aGUgZmlyc3QgbGVhZiBub2RlIHdpdGhvdXQgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtET01FbGVtZW50fERPTVRleHROb2RlfVxuICovXG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIHdoaWxlIChub2RlICYmIG5vZGUuZmlyc3RDaGlsZCkge1xuICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogR2V0IHRoZSBuZXh0IHNpYmxpbmcgd2l0aGluIGEgY29udGFpbmVyLiBUaGlzIHdpbGwgd2FsayB1cCB0aGVcbiAqIERPTSBpZiBhIG5vZGUncyBzaWJsaW5ncyBoYXZlIGJlZW4gZXhoYXVzdGVkLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7P0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldFNpYmxpbmdOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG5vZGVzIHdoaWNoIGNvbnRhaW4gY2hhcmFjdGVycyBhdCBvZmZzZXQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSByb290XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KHJvb3QsIG9mZnNldCkge1xuICB2YXIgbm9kZSA9IGdldExlYWZOb2RlKHJvb3QpO1xuICB2YXIgbm9kZVN0YXJ0ID0gMDtcbiAgdmFyIG5vZGVFbmQgPSAwO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IFRFWFRfTk9ERSkge1xuICAgICAgbm9kZUVuZCA9IG5vZGVTdGFydCArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuXG4gICAgICBpZiAobm9kZVN0YXJ0IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgLSBub2RlU3RhcnRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgbm9kZVN0YXJ0ID0gbm9kZUVuZDtcbiAgICB9XG5cbiAgICBub2RlID0gZ2V0TGVhZk5vZGUoZ2V0U2libGluZ05vZGUobm9kZSkpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBvdXRlck5vZGVcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE9mZnNldHMob3V0ZXJOb2RlKSB7XG4gIHZhciBvd25lckRvY3VtZW50ID0gb3V0ZXJOb2RlLm93bmVyRG9jdW1lbnQ7XG5cbiAgdmFyIHdpbiA9IG93bmVyRG9jdW1lbnQgJiYgb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gIHZhciBzZWxlY3Rpb24gPSB3aW4uZ2V0U2VsZWN0aW9uICYmIHdpbi5nZXRTZWxlY3Rpb24oKTtcblxuICBpZiAoIXNlbGVjdGlvbiB8fCBzZWxlY3Rpb24ucmFuZ2VDb3VudCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGFuY2hvck5vZGUgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgICBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlLFxuICAgICAgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG5cbiAgLy8gSW4gRmlyZWZveCwgYW5jaG9yTm9kZSBhbmQgZm9jdXNOb2RlIGNhbiBiZSBcImFub255bW91cyBkaXZzXCIsIGUuZy4gdGhlXG4gIC8vIHVwL2Rvd24gYnV0dG9ucyBvbiBhbiA8aW5wdXQgdHlwZT1cIm51bWJlclwiPi4gQW5vbnltb3VzIGRpdnMgZG8gbm90IHNlZW0gdG9cbiAgLy8gZXhwb3NlIHByb3BlcnRpZXMsIHRyaWdnZXJpbmcgYSBcIlBlcm1pc3Npb24gZGVuaWVkIGVycm9yXCIgaWYgYW55IG9mIGl0c1xuICAvLyBwcm9wZXJ0aWVzIGFyZSBhY2Nlc3NlZC4gVGhlIG9ubHkgc2VlbWluZ2x5IHBvc3NpYmxlIHdheSB0byBhdm9pZCBlcnJvcmluZ1xuICAvLyBpcyB0byBhY2Nlc3MgYSBwcm9wZXJ0eSB0aGF0IHR5cGljYWxseSB3b3JrcyBmb3Igbm9uLWFub255bW91cyBkaXZzIGFuZFxuICAvLyBjYXRjaCBhbnkgZXJyb3IgdGhhdCBtYXkgb3RoZXJ3aXNlIGFyaXNlLiBTZWVcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjA4NDI3XG5cbiAgdHJ5IHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbiAgICBhbmNob3JOb2RlLm5vZGVUeXBlO1xuICAgIGZvY3VzTm9kZS5ub2RlVHlwZTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZ2V0TW9kZXJuT2Zmc2V0c0Zyb21Qb2ludHMob3V0ZXJOb2RlLCBhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQsIGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpO1xufVxuXG4vKipcbiAqIFJldHVybnMge3N0YXJ0LCBlbmR9IHdoZXJlIGBzdGFydGAgaXMgdGhlIGNoYXJhY3Rlci9jb2RlcG9pbnQgaW5kZXggb2ZcbiAqIChhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQpIHdpdGhpbiB0aGUgdGV4dENvbnRlbnQgb2YgYG91dGVyTm9kZWAsIGFuZFxuICogYGVuZGAgaXMgdGhlIGluZGV4IG9mIChmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KS5cbiAqXG4gKiBSZXR1cm5zIG51bGwgaWYgeW91IHBhc3MgaW4gZ2FyYmFnZSBpbnB1dCBidXQgd2Ugc2hvdWxkIHByb2JhYmx5IGp1c3QgY3Jhc2guXG4gKlxuICogRXhwb3J0ZWQgb25seSBmb3IgdGVzdGluZy5cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kZXJuT2Zmc2V0c0Zyb21Qb2ludHMob3V0ZXJOb2RlLCBhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQsIGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpIHtcbiAgdmFyIGxlbmd0aCA9IDA7XG4gIHZhciBzdGFydCA9IC0xO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBpbmRleFdpdGhpbkFuY2hvciA9IDA7XG4gIHZhciBpbmRleFdpdGhpbkZvY3VzID0gMDtcbiAgdmFyIG5vZGUgPSBvdXRlck5vZGU7XG4gIHZhciBwYXJlbnROb2RlID0gbnVsbDtcblxuICBvdXRlcjogd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgbmV4dCA9IG51bGw7XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKG5vZGUgPT09IGFuY2hvck5vZGUgJiYgKGFuY2hvck9mZnNldCA9PT0gMCB8fCBub2RlLm5vZGVUeXBlID09PSBURVhUX05PREUpKSB7XG4gICAgICAgIHN0YXJ0ID0gbGVuZ3RoICsgYW5jaG9yT2Zmc2V0O1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUgPT09IGZvY3VzTm9kZSAmJiAoZm9jdXNPZmZzZXQgPT09IDAgfHwgbm9kZS5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFKSkge1xuICAgICAgICBlbmQgPSBsZW5ndGggKyBmb2N1c09mZnNldDtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IFRFWFRfTk9ERSkge1xuICAgICAgICBsZW5ndGggKz0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBpZiAoKG5leHQgPSBub2RlLmZpcnN0Q2hpbGQpID09PSBudWxsKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gTW92aW5nIGZyb20gYG5vZGVgIHRvIGl0cyBmaXJzdCBjaGlsZCBgbmV4dGAuXG4gICAgICBwYXJlbnROb2RlID0gbm9kZTtcbiAgICAgIG5vZGUgPSBuZXh0O1xuICAgIH1cblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAobm9kZSA9PT0gb3V0ZXJOb2RlKSB7XG4gICAgICAgIC8vIElmIGBvdXRlck5vZGVgIGhhcyBjaGlsZHJlbiwgdGhpcyBpcyBhbHdheXMgdGhlIHNlY29uZCB0aW1lIHZpc2l0aW5nXG4gICAgICAgIC8vIGl0LiBJZiBpdCBoYXMgbm8gY2hpbGRyZW4sIHRoaXMgaXMgc3RpbGwgdGhlIGZpcnN0IGxvb3AsIGFuZCB0aGUgb25seVxuICAgICAgICAvLyB2YWxpZCBzZWxlY3Rpb24gaXMgYW5jaG9yTm9kZSBhbmQgZm9jdXNOb2RlIGJvdGggZXF1YWwgdG8gdGhpcyBub2RlXG4gICAgICAgIC8vIGFuZCBib3RoIG9mZnNldHMgMCwgaW4gd2hpY2ggY2FzZSB3ZSB3aWxsIGhhdmUgaGFuZGxlZCBhYm92ZS5cbiAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICB9XG4gICAgICBpZiAocGFyZW50Tm9kZSA9PT0gYW5jaG9yTm9kZSAmJiArK2luZGV4V2l0aGluQW5jaG9yID09PSBhbmNob3JPZmZzZXQpIHtcbiAgICAgICAgc3RhcnQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAocGFyZW50Tm9kZSA9PT0gZm9jdXNOb2RlICYmICsraW5kZXhXaXRoaW5Gb2N1cyA9PT0gZm9jdXNPZmZzZXQpIHtcbiAgICAgICAgZW5kID0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKChuZXh0ID0gbm9kZS5uZXh0U2libGluZykgIT09IG51bGwpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBub2RlID0gcGFyZW50Tm9kZTtcbiAgICAgIHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgLy8gTW92aW5nIGZyb20gYG5vZGVgIHRvIGl0cyBuZXh0IHNpYmxpbmcgYG5leHRgLlxuICAgIG5vZGUgPSBuZXh0O1xuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSAtMSB8fCBlbmQgPT09IC0xKSB7XG4gICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLiAoV291bGQgaGFwcGVuIGlmIHRoZSBhbmNob3IvZm9jdXMgbm9kZXMgYXJlbid0XG4gICAgLy8gYWN0dWFsbHkgaW5zaWRlIHRoZSBwYXNzZWQtaW4gbm9kZS4pXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBlbmQ6IGVuZFxuICB9O1xufVxuXG4vKipcbiAqIEluIG1vZGVybiBub24tSUUgYnJvd3NlcnMsIHdlIGNhbiBzdXBwb3J0IGJvdGggZm9yd2FyZCBhbmQgYmFja3dhcmRcbiAqIHNlbGVjdGlvbnMuXG4gKlxuICogTm90ZTogSUUxMCsgc3VwcG9ydHMgdGhlIFNlbGVjdGlvbiBvYmplY3QsIGJ1dCBpdCBkb2VzIG5vdCBzdXBwb3J0XG4gKiB0aGUgYGV4dGVuZGAgbWV0aG9kLCB3aGljaCBtZWFucyB0aGF0IGV2ZW4gaW4gbW9kZXJuIElFLCBpdCdzIG5vdCBwb3NzaWJsZVxuICogdG8gcHJvZ3JhbW1hdGljYWxseSBjcmVhdGUgYSBiYWNrd2FyZCBzZWxlY3Rpb24uIFRodXMsIGZvciBhbGwgSUVcbiAqIHZlcnNpb25zLCB3ZSB1c2UgdGhlIG9sZCBJRSBBUEkgdG8gY3JlYXRlIG91ciBzZWxlY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAqL1xuZnVuY3Rpb24gc2V0T2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIHZhciBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG4gIHZhciB3aW4gPSBkb2MgJiYgZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgdmFyIHNlbGVjdGlvbiA9IHdpbi5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGxlbmd0aCA9IG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuICB2YXIgc3RhcnQgPSBNYXRoLm1pbihvZmZzZXRzLnN0YXJ0LCBsZW5ndGgpO1xuICB2YXIgZW5kID0gb2Zmc2V0cy5lbmQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogTWF0aC5taW4ob2Zmc2V0cy5lbmQsIGxlbmd0aCk7XG5cbiAgLy8gSUUgMTEgdXNlcyBtb2Rlcm4gc2VsZWN0aW9uLCBidXQgZG9lc24ndCBzdXBwb3J0IHRoZSBleHRlbmQgbWV0aG9kLlxuICAvLyBGbGlwIGJhY2t3YXJkIHNlbGVjdGlvbnMsIHNvIHdlIGNhbiBzZXQgd2l0aCBhIHNpbmdsZSByYW5nZS5cbiAgaWYgKCFzZWxlY3Rpb24uZXh0ZW5kICYmIHN0YXJ0ID4gZW5kKSB7XG4gICAgdmFyIHRlbXAgPSBlbmQ7XG4gICAgZW5kID0gc3RhcnQ7XG4gICAgc3RhcnQgPSB0ZW1wO1xuICB9XG5cbiAgdmFyIHN0YXJ0TWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBzdGFydCk7XG4gIHZhciBlbmRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KG5vZGUsIGVuZCk7XG5cbiAgaWYgKHN0YXJ0TWFya2VyICYmIGVuZE1hcmtlcikge1xuICAgIGlmIChzZWxlY3Rpb24ucmFuZ2VDb3VudCA9PT0gMSAmJiBzZWxlY3Rpb24uYW5jaG9yTm9kZSA9PT0gc3RhcnRNYXJrZXIubm9kZSAmJiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0ID09PSBzdGFydE1hcmtlci5vZmZzZXQgJiYgc2VsZWN0aW9uLmZvY3VzTm9kZSA9PT0gZW5kTWFya2VyLm5vZGUgJiYgc2VsZWN0aW9uLmZvY3VzT2Zmc2V0ID09PSBlbmRNYXJrZXIub2Zmc2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciByYW5nZSA9IGRvYy5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0TWFya2VyLm5vZGUsIHN0YXJ0TWFya2VyLm9mZnNldCk7XG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgc2VsZWN0aW9uLmV4dGVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlLnNldEVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1RleHROb2RlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFO1xufVxuXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkRvY3VtZW50KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5vd25lckRvY3VtZW50ICYmIGNvbnRhaW5zTm9kZShub2RlLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBub2RlKTtcbn1cblxuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudERlZXAoKSB7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG4gIHZhciBlbGVtZW50ID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuICB3aGlsZSAoZWxlbWVudCBpbnN0YW5jZW9mIHdpbi5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgIC8vIEFjY2Vzc2luZyB0aGUgY29udGVudERvY3VtZW50IG9mIGEgSFRNTElmcmFtZUVsZW1lbnQgY2FuIGNhdXNlIHRoZSBicm93c2VyXG4gICAgLy8gdG8gdGhyb3csIGUuZy4gaWYgaXQgaGFzIGEgY3Jvc3Mtb3JpZ2luIHNyYyBhdHRyaWJ1dGVcbiAgICB0cnkge1xuICAgICAgd2luID0gZWxlbWVudC5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuICAgIGVsZW1lbnQgPSBnZXRBY3RpdmVFbGVtZW50KHdpbi5kb2N1bWVudCk7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbi8qKlxuICogQFJlYWN0SW5wdXRTZWxlY3Rpb246IFJlYWN0IGlucHV0IHNlbGVjdGlvbiBtb2R1bGUuIEJhc2VkIG9uIFNlbGVjdGlvbi5qcyxcbiAqIGJ1dCBtb2RpZmllZCB0byBiZSBzdWl0YWJsZSBmb3IgcmVhY3QgYW5kIGhhcyBhIGNvdXBsZSBvZiBidWcgZml4ZXMgKGRvZXNuJ3RcbiAqIGFzc3VtZSBidXR0b25zIGhhdmUgcmFuZ2Ugc2VsZWN0aW9ucyBhbGxvd2VkKS5cbiAqIElucHV0IHNlbGVjdGlvbiBtb2R1bGUgZm9yIFJlYWN0LlxuICovXG5cbi8qKlxuICogQGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllczogd2UgZ2V0IHRoZSBlbGVtZW50IHR5cGVzIHRoYXQgc3VwcG9ydCBzZWxlY3Rpb25cbiAqIGZyb20gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jZG8tbm90LWFwcGx5LCBsb29raW5nIGF0IGBzZWxlY3Rpb25TdGFydGBcbiAqIGFuZCBgc2VsZWN0aW9uRW5kYCByb3dzLlxuICovXG5mdW5jdGlvbiBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gbm9kZU5hbWUgJiYgKG5vZGVOYW1lID09PSAnaW5wdXQnICYmIChlbGVtLnR5cGUgPT09ICd0ZXh0JyB8fCBlbGVtLnR5cGUgPT09ICdzZWFyY2gnIHx8IGVsZW0udHlwZSA9PT0gJ3RlbCcgfHwgZWxlbS50eXBlID09PSAndXJsJyB8fCBlbGVtLnR5cGUgPT09ICdwYXNzd29yZCcpIHx8IG5vZGVOYW1lID09PSAndGV4dGFyZWEnIHx8IGVsZW0uY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpO1xufVxuXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb25JbmZvcm1hdGlvbigpIHtcbiAgdmFyIGZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudERlZXAoKTtcbiAgcmV0dXJuIHtcbiAgICBmb2N1c2VkRWxlbTogZm9jdXNlZEVsZW0sXG4gICAgc2VsZWN0aW9uUmFuZ2U6IGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhmb2N1c2VkRWxlbSkgPyBnZXRTZWxlY3Rpb24kMShmb2N1c2VkRWxlbSkgOiBudWxsXG4gIH07XG59XG5cbi8qKlxuICogQHJlc3RvcmVTZWxlY3Rpb246IElmIGFueSBzZWxlY3Rpb24gaW5mb3JtYXRpb24gd2FzIHBvdGVudGlhbGx5IGxvc3QsXG4gKiByZXN0b3JlIGl0LiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHBlcmZvcm1pbmcgb3BlcmF0aW9ucyB0aGF0IGNvdWxkIHJlbW92ZSBkb21cbiAqIG5vZGVzIGFuZCBwbGFjZSB0aGVtIGJhY2sgaW4sIHJlc3VsdGluZyBpbiBmb2N1cyBiZWluZyBsb3N0LlxuICovXG5mdW5jdGlvbiByZXN0b3JlU2VsZWN0aW9uKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24pIHtcbiAgdmFyIGN1ckZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudERlZXAoKTtcbiAgdmFyIHByaW9yRm9jdXNlZEVsZW0gPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmZvY3VzZWRFbGVtO1xuICB2YXIgcHJpb3JTZWxlY3Rpb25SYW5nZSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2VsZWN0aW9uUmFuZ2U7XG4gIGlmIChjdXJGb2N1c2VkRWxlbSAhPT0gcHJpb3JGb2N1c2VkRWxlbSAmJiBpc0luRG9jdW1lbnQocHJpb3JGb2N1c2VkRWxlbSkpIHtcbiAgICBpZiAocHJpb3JTZWxlY3Rpb25SYW5nZSAhPT0gbnVsbCAmJiBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMocHJpb3JGb2N1c2VkRWxlbSkpIHtcbiAgICAgIHNldFNlbGVjdGlvbihwcmlvckZvY3VzZWRFbGVtLCBwcmlvclNlbGVjdGlvblJhbmdlKTtcbiAgICB9XG5cbiAgICAvLyBGb2N1c2luZyBhIG5vZGUgY2FuIGNoYW5nZSB0aGUgc2Nyb2xsIHBvc2l0aW9uLCB3aGljaCBpcyB1bmRlc2lyYWJsZVxuICAgIHZhciBhbmNlc3RvcnMgPSBbXTtcbiAgICB2YXIgYW5jZXN0b3IgPSBwcmlvckZvY3VzZWRFbGVtO1xuICAgIHdoaWxlIChhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudE5vZGUpIHtcbiAgICAgIGlmIChhbmNlc3Rvci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIGFuY2VzdG9ycy5wdXNoKHtcbiAgICAgICAgICBlbGVtZW50OiBhbmNlc3RvcixcbiAgICAgICAgICBsZWZ0OiBhbmNlc3Rvci5zY3JvbGxMZWZ0LFxuICAgICAgICAgIHRvcDogYW5jZXN0b3Iuc2Nyb2xsVG9wXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcHJpb3JGb2N1c2VkRWxlbS5mb2N1cyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJpb3JGb2N1c2VkRWxlbS5mb2N1cygpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5jZXN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaW5mbyA9IGFuY2VzdG9yc1tpXTtcbiAgICAgIGluZm8uZWxlbWVudC5zY3JvbGxMZWZ0ID0gaW5mby5sZWZ0O1xuICAgICAgaW5mby5lbGVtZW50LnNjcm9sbFRvcCA9IGluZm8udG9wO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBnZXRTZWxlY3Rpb246IEdldHMgdGhlIHNlbGVjdGlvbiBib3VuZHMgb2YgYSBmb2N1c2VkIHRleHRhcmVhLCBpbnB1dCBvclxuICogY29udGVudEVkaXRhYmxlIG5vZGUuXG4gKiAtQGlucHV0OiBMb29rIHVwIHNlbGVjdGlvbiBib3VuZHMgb2YgdGhpcyBpbnB1dFxuICogLUByZXR1cm4ge3N0YXJ0OiBzZWxlY3Rpb25TdGFydCwgZW5kOiBzZWxlY3Rpb25FbmR9XG4gKi9cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbiQxKGlucHV0KSB7XG4gIHZhciBzZWxlY3Rpb24gPSB2b2lkIDA7XG5cbiAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gaW5wdXQpIHtcbiAgICAvLyBNb2Rlcm4gYnJvd3NlciB3aXRoIGlucHV0IG9yIHRleHRhcmVhLlxuICAgIHNlbGVjdGlvbiA9IHtcbiAgICAgIHN0YXJ0OiBpbnB1dC5zZWxlY3Rpb25TdGFydCxcbiAgICAgIGVuZDogaW5wdXQuc2VsZWN0aW9uRW5kXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDb250ZW50IGVkaXRhYmxlIG9yIG9sZCBJRSB0ZXh0YXJlYS5cbiAgICBzZWxlY3Rpb24gPSBnZXRPZmZzZXRzKGlucHV0KTtcbiAgfVxuXG4gIHJldHVybiBzZWxlY3Rpb24gfHwgeyBzdGFydDogMCwgZW5kOiAwIH07XG59XG5cbi8qKlxuICogQHNldFNlbGVjdGlvbjogU2V0cyB0aGUgc2VsZWN0aW9uIGJvdW5kcyBvZiBhIHRleHRhcmVhIG9yIGlucHV0IGFuZCBmb2N1c2VzXG4gKiB0aGUgaW5wdXQuXG4gKiAtQGlucHV0ICAgICBTZXQgc2VsZWN0aW9uIGJvdW5kcyBvZiB0aGlzIGlucHV0IG9yIHRleHRhcmVhXG4gKiAtQG9mZnNldHMgICBPYmplY3Qgb2Ygc2FtZSBmb3JtIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSBnZXQqXG4gKi9cbmZ1bmN0aW9uIHNldFNlbGVjdGlvbihpbnB1dCwgb2Zmc2V0cykge1xuICB2YXIgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0LFxuICAgICAgZW5kID0gb2Zmc2V0cy5lbmQ7XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gc3RhcnQ7XG4gIH1cblxuICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgIGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gc3RhcnQ7XG4gICAgaW5wdXQuc2VsZWN0aW9uRW5kID0gTWF0aC5taW4oZW5kLCBpbnB1dC52YWx1ZS5sZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIHNldE9mZnNldHMoaW5wdXQsIG9mZnNldHMpO1xuICB9XG59XG5cbnZhciBza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQgPSBjYW5Vc2VET00gJiYgJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDw9IDExO1xuXG52YXIgZXZlbnRUeXBlcyQzID0ge1xuICBzZWxlY3Q6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uU2VsZWN0JyxcbiAgICAgIGNhcHR1cmVkOiAnb25TZWxlY3RDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbVE9QX0JMVVIsIFRPUF9DT05URVhUX01FTlUsIFRPUF9EUkFHX0VORCwgVE9QX0ZPQ1VTLCBUT1BfS0VZX0RPV04sIFRPUF9LRVlfVVAsIFRPUF9NT1VTRV9ET1dOLCBUT1BfTU9VU0VfVVAsIFRPUF9TRUxFQ1RJT05fQ0hBTkdFXVxuICB9XG59O1xuXG52YXIgYWN0aXZlRWxlbWVudCQxID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50SW5zdCQxID0gbnVsbDtcbnZhciBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbnZhciBtb3VzZURvd24gPSBmYWxzZTtcblxuLyoqXG4gKiBHZXQgYW4gb2JqZWN0IHdoaWNoIGlzIGEgdW5pcXVlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjdXJyZW50IHNlbGVjdGlvbi5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgbm90IGJlIGNvbnNpc3RlbnQgYWNyb3NzIG5vZGVzIG9yIGJyb3dzZXJzLCBidXRcbiAqIHR3byBpZGVudGljYWwgc2VsZWN0aW9ucyBvbiB0aGUgc2FtZSBub2RlIHdpbGwgcmV0dXJuIGlkZW50aWNhbCBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb24obm9kZSkge1xuICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBub2RlICYmIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhub2RlKSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogbm9kZS5zZWxlY3Rpb25TdGFydCxcbiAgICAgIGVuZDogbm9kZS5zZWxlY3Rpb25FbmRcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHZhciB3aW4gPSBub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgICB2YXIgc2VsZWN0aW9uID0gd2luLmdldFNlbGVjdGlvbigpO1xuICAgIHJldHVybiB7XG4gICAgICBhbmNob3JOb2RlOiBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgIGFuY2hvck9mZnNldDogc2VsZWN0aW9uLmFuY2hvck9mZnNldCxcbiAgICAgIGZvY3VzTm9kZTogc2VsZWN0aW9uLmZvY3VzTm9kZSxcbiAgICAgIGZvY3VzT2Zmc2V0OiBzZWxlY3Rpb24uZm9jdXNPZmZzZXRcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogR2V0IGRvY3VtZW50IGFzc29jaWF0ZWQgd2l0aCB0aGUgZXZlbnQgdGFyZ2V0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFRhcmdldFxuICogQHJldHVybiB7RG9jdW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0RG9jdW1lbnQoZXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIGV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gZXZlbnRUYXJnZXQgPyBldmVudFRhcmdldC5kb2N1bWVudCA6IGV2ZW50VGFyZ2V0Lm5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFID8gZXZlbnRUYXJnZXQgOiBldmVudFRhcmdldC5vd25lckRvY3VtZW50O1xufVxuXG4vKipcbiAqIFBvbGwgc2VsZWN0aW9uIHRvIHNlZSB3aGV0aGVyIGl0J3MgY2hhbmdlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFRhcmdldFxuICogQHJldHVybiB7P1N5bnRoZXRpY0V2ZW50fVxuICovXG5mdW5jdGlvbiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgLy8gRW5zdXJlIHdlIGhhdmUgdGhlIHJpZ2h0IGVsZW1lbnQsIGFuZCB0aGF0IHRoZSB1c2VyIGlzIG5vdCBkcmFnZ2luZyBhXG4gIC8vIHNlbGVjdGlvbiAodGhpcyBtYXRjaGVzIG5hdGl2ZSBgc2VsZWN0YCBldmVudCBiZWhhdmlvcikuIEluIEhUTUw1LCBzZWxlY3RcbiAgLy8gZmlyZXMgb25seSBvbiBpbnB1dCBhbmQgdGV4dGFyZWEgdGh1cyBpZiB0aGVyZSdzIG5vIGZvY3VzZWQgZWxlbWVudCB3ZVxuICAvLyB3b24ndCBkaXNwYXRjaC5cbiAgdmFyIGRvYyA9IGdldEV2ZW50VGFyZ2V0RG9jdW1lbnQobmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gIGlmIChtb3VzZURvd24gfHwgYWN0aXZlRWxlbWVudCQxID09IG51bGwgfHwgYWN0aXZlRWxlbWVudCQxICE9PSBnZXRBY3RpdmVFbGVtZW50KGRvYykpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIE9ubHkgZmlyZSB3aGVuIHNlbGVjdGlvbiBoYXMgYWN0dWFsbHkgY2hhbmdlZC5cbiAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb24oYWN0aXZlRWxlbWVudCQxKTtcbiAgaWYgKCFsYXN0U2VsZWN0aW9uIHx8ICFzaGFsbG93RXF1YWwobGFzdFNlbGVjdGlvbiwgY3VycmVudFNlbGVjdGlvbikpIHtcbiAgICBsYXN0U2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbjtcblxuICAgIHZhciBzeW50aGV0aWNFdmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChldmVudFR5cGVzJDMuc2VsZWN0LCBhY3RpdmVFbGVtZW50SW5zdCQxLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gICAgc3ludGhldGljRXZlbnQudHlwZSA9ICdzZWxlY3QnO1xuICAgIHN5bnRoZXRpY0V2ZW50LnRhcmdldCA9IGFjdGl2ZUVsZW1lbnQkMTtcblxuICAgIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoc3ludGhldGljRXZlbnQpO1xuXG4gICAgcmV0dXJuIHN5bnRoZXRpY0V2ZW50O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogVGhpcyBwbHVnaW4gY3JlYXRlcyBhbiBgb25TZWxlY3RgIGV2ZW50IHRoYXQgbm9ybWFsaXplcyBzZWxlY3QgZXZlbnRzXG4gKiBhY3Jvc3MgZm9ybSBlbGVtZW50cy5cbiAqXG4gKiBTdXBwb3J0ZWQgZWxlbWVudHMgYXJlOlxuICogLSBpbnB1dCAoc2VlIGBpc1RleHRJbnB1dEVsZW1lbnRgKVxuICogLSB0ZXh0YXJlYVxuICogLSBjb250ZW50RWRpdGFibGVcbiAqXG4gKiBUaGlzIGRpZmZlcnMgZnJvbSBuYXRpdmUgYnJvd3NlciBpbXBsZW1lbnRhdGlvbnMgaW4gdGhlIGZvbGxvd2luZyB3YXlzOlxuICogLSBGaXJlcyBvbiBjb250ZW50RWRpdGFibGUgZmllbGRzIGFzIHdlbGwgYXMgaW5wdXRzLlxuICogLSBGaXJlcyBmb3IgY29sbGFwc2VkIHNlbGVjdGlvbi5cbiAqIC0gRmlyZXMgYWZ0ZXIgdXNlciBpbnB1dC5cbiAqL1xudmFyIFNlbGVjdEV2ZW50UGx1Z2luID0ge1xuICBldmVudFR5cGVzOiBldmVudFR5cGVzJDMsXG5cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGRvYyA9IGdldEV2ZW50VGFyZ2V0RG9jdW1lbnQobmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIC8vIFRyYWNrIHdoZXRoZXIgYWxsIGxpc3RlbmVycyBleGlzdHMgZm9yIHRoaXMgcGx1Z2luLiBJZiBub25lIGV4aXN0LCB3ZSBkb1xuICAgIC8vIG5vdCBleHRyYWN0IGV2ZW50cy4gU2VlICMzNjM5LlxuICAgIGlmICghZG9jIHx8ICFpc0xpc3RlbmluZ1RvQWxsRGVwZW5kZW5jaWVzKCdvblNlbGVjdCcsIGRvYykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXROb2RlID0gdGFyZ2V0SW5zdCA/IGdldE5vZGVGcm9tSW5zdGFuY2UkMSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcblxuICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICAvLyBUcmFjayB0aGUgaW5wdXQgbm9kZSB0aGF0IGhhcyBmb2N1cy5cbiAgICAgIGNhc2UgVE9QX0ZPQ1VTOlxuICAgICAgICBpZiAoaXNUZXh0SW5wdXRFbGVtZW50KHRhcmdldE5vZGUpIHx8IHRhcmdldE5vZGUuY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpIHtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50JDEgPSB0YXJnZXROb2RlO1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSB0YXJnZXRJbnN0O1xuICAgICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBUT1BfQkxVUjpcbiAgICAgICAgYWN0aXZlRWxlbWVudCQxID0gbnVsbDtcbiAgICAgICAgYWN0aXZlRWxlbWVudEluc3QkMSA9IG51bGw7XG4gICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIERvbid0IGZpcmUgdGhlIGV2ZW50IHdoaWxlIHRoZSB1c2VyIGlzIGRyYWdnaW5nLiBUaGlzIG1hdGNoZXMgdGhlXG4gICAgICAvLyBzZW1hbnRpY3Mgb2YgdGhlIG5hdGl2ZSBzZWxlY3QgZXZlbnQuXG4gICAgICBjYXNlIFRPUF9NT1VTRV9ET1dOOlxuICAgICAgICBtb3VzZURvd24gPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgVE9QX0NPTlRFWFRfTUVOVTpcbiAgICAgIGNhc2UgVE9QX01PVVNFX1VQOlxuICAgICAgY2FzZSBUT1BfRFJBR19FTkQ6XG4gICAgICAgIG1vdXNlRG93biA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgIC8vIENocm9tZSBhbmQgSUUgZmlyZSBub24tc3RhbmRhcmQgZXZlbnQgd2hlbiBzZWxlY3Rpb24gaXMgY2hhbmdlZCAoYW5kXG4gICAgICAvLyBzb21ldGltZXMgd2hlbiBpdCBoYXNuJ3QpLiBJRSdzIGV2ZW50IGZpcmVzIG91dCBvZiBvcmRlciB3aXRoIHJlc3BlY3RcbiAgICAgIC8vIHRvIGtleSBhbmQgaW5wdXQgZXZlbnRzIG9uIGRlbGV0aW9uLCBzbyB3ZSBkaXNjYXJkIGl0LlxuICAgICAgLy9cbiAgICAgIC8vIEZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IHNlbGVjdGlvbmNoYW5nZSwgc28gY2hlY2sgc2VsZWN0aW9uIHN0YXR1c1xuICAgICAgLy8gYWZ0ZXIgZWFjaCBrZXkgZW50cnkuIFRoZSBzZWxlY3Rpb24gY2hhbmdlcyBhZnRlciBrZXlkb3duIGFuZCBiZWZvcmVcbiAgICAgIC8vIGtleXVwLCBidXQgd2UgY2hlY2sgb24ga2V5ZG93biBhcyB3ZWxsIGluIHRoZSBjYXNlIG9mIGhvbGRpbmcgZG93biBhXG4gICAgICAvLyBrZXksIHdoZW4gbXVsdGlwbGUga2V5ZG93biBldmVudHMgYXJlIGZpcmVkIGJ1dCBvbmx5IG9uZSBrZXl1cCBpcy5cbiAgICAgIC8vIFRoaXMgaXMgYWxzbyBvdXIgYXBwcm9hY2ggZm9yIElFIGhhbmRsaW5nLCBmb3IgdGhlIHJlYXNvbiBhYm92ZS5cbiAgICAgIGNhc2UgVE9QX1NFTEVDVElPTl9DSEFOR0U6XG4gICAgICAgIGlmIChza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSBUT1BfS0VZX0RPV046XG4gICAgICBjYXNlIFRPUF9LRVlfVVA6XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEluamVjdCBtb2R1bGVzIGZvciByZXNvbHZpbmcgRE9NIGhpZXJhcmNoeSBhbmQgcGx1Z2luIG9yZGVyaW5nLlxuICovXG5pbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihET01FdmVudFBsdWdpbk9yZGVyKTtcbnNldENvbXBvbmVudFRyZWUoZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSQxLCBnZXRJbnN0YW5jZUZyb21Ob2RlJDEsIGdldE5vZGVGcm9tSW5zdGFuY2UkMSk7XG5cbi8qKlxuICogU29tZSBpbXBvcnRhbnQgZXZlbnQgcGx1Z2lucyBpbmNsdWRlZCBieSBkZWZhdWx0ICh3aXRob3V0IGhhdmluZyB0byByZXF1aXJlXG4gKiB0aGVtKS5cbiAqL1xuaW5qZWN0aW9uLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7XG4gIFNpbXBsZUV2ZW50UGx1Z2luOiBTaW1wbGVFdmVudFBsdWdpbixcbiAgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOiBFbnRlckxlYXZlRXZlbnRQbHVnaW4sXG4gIENoYW5nZUV2ZW50UGx1Z2luOiBDaGFuZ2VFdmVudFBsdWdpbixcbiAgU2VsZWN0RXZlbnRQbHVnaW46IFNlbGVjdEV2ZW50UGx1Z2luLFxuICBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXG59KTtcblxudmFyIGRpZFdhcm5TZWxlY3RlZFNldE9uT3B0aW9uID0gZmFsc2U7XG52YXIgZGlkV2FybkludmFsaWRDaGlsZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBmbGF0dGVuQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgdmFyIGNvbnRlbnQgPSAnJztcblxuICAvLyBGbGF0dGVuIGNoaWxkcmVuLiBXZSdsbCB3YXJuIGlmIHRoZXkgYXJlIGludmFsaWRcbiAgLy8gZHVyaW5nIHZhbGlkYXRlUHJvcHMoKSB3aGljaCBydW5zIGZvciBoeWRyYXRpb24gdG9vLlxuICAvLyBOb3RlIHRoYXQgdGhpcyB3b3VsZCB0aHJvdyBvbiBub24tZWxlbWVudCBvYmplY3RzLlxuICAvLyBFbGVtZW50cyBhcmUgc3RyaW5naWZpZWQgKHdoaWNoIGlzIG5vcm1hbGx5IGlycmVsZXZhbnRcbiAgLy8gYnV0IG1hdHRlcnMgZm9yIDxmYnQ+KS5cbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29udGVudCArPSBjaGlsZDtcbiAgICAvLyBOb3RlOiB3ZSBkb24ndCB3YXJuIGFib3V0IGludmFsaWQgY2hpbGRyZW4gaGVyZS5cbiAgICAvLyBJbnN0ZWFkLCB0aGlzIGlzIGRvbmUgc2VwYXJhdGVseSBiZWxvdyBzbyB0aGF0XG4gICAgLy8gaXQgaGFwcGVucyBkdXJpbmcgdGhlIGh5ZHJhdGlvbiBjb2RlcGF0aCB0b28uXG4gIH0pO1xuXG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYW4gPG9wdGlvbj4gaG9zdCBjb21wb25lbnQgdGhhdCB3YXJucyB3aGVuIGBzZWxlY3RlZGAgaXMgc2V0LlxuICovXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcHMoZWxlbWVudCwgcHJvcHMpIHtcbiAge1xuICAgIC8vIFRoaXMgbWlycm9ycyB0aGUgY29kZXBhdGggYWJvdmUsIGJ1dCBydW5zIGZvciBoeWRyYXRpb24gdG9vLlxuICAgIC8vIFdhcm4gYWJvdXQgaW52YWxpZCBjaGlsZHJlbiBoZXJlIHNvIHRoYXQgY2xpZW50IGFuZCBoeWRyYXRpb24gYXJlIGNvbnNpc3RlbnQuXG4gICAgLy8gVE9ETzogdGhpcyBzZWVtcyBsaWtlIGl0IGNvdWxkIGNhdXNlIGEgREVWLW9ubHkgdGhyb3cgZm9yIGh5ZHJhdGlvblxuICAgIC8vIGlmIGNoaWxkcmVuIGNvbnRhaW5zIGEgbm9uLWVsZW1lbnQgb2JqZWN0LiBXZSBzaG91bGQgdHJ5IHRvIGF2b2lkIHRoYXQuXG4gICAgaWYgKHR5cGVvZiBwcm9wcy5jaGlsZHJlbiA9PT0gJ29iamVjdCcgJiYgcHJvcHMuY2hpbGRyZW4gIT09IG51bGwpIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2gocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgY2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2hpbGQudHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkaWRXYXJuSW52YWxpZENoaWxkKSB7XG4gICAgICAgICAgZGlkV2FybkludmFsaWRDaGlsZCA9IHRydWU7XG4gICAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnT25seSBzdHJpbmdzIGFuZCBudW1iZXJzIGFyZSBzdXBwb3J0ZWQgYXMgPG9wdGlvbj4gY2hpbGRyZW4uJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFJlbW92ZSBzdXBwb3J0IGZvciBgc2VsZWN0ZWRgIGluIDxvcHRpb24+LlxuICAgIGlmIChwcm9wcy5zZWxlY3RlZCAhPSBudWxsICYmICFkaWRXYXJuU2VsZWN0ZWRTZXRPbk9wdGlvbikge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIG9uIDxzZWxlY3Q+IGluc3RlYWQgb2YgJyArICdzZXR0aW5nIGBzZWxlY3RlZGAgb24gPG9wdGlvbj4uJyk7XG4gICAgICBkaWRXYXJuU2VsZWN0ZWRTZXRPbk9wdGlvbiA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBvc3RNb3VudFdyYXBwZXIkMShlbGVtZW50LCBwcm9wcykge1xuICAvLyB2YWx1ZT1cIlwiIHNob3VsZCBtYWtlIGEgdmFsdWUgYXR0cmlidXRlICgjNjIxOSlcbiAgaWYgKHByb3BzLnZhbHVlICE9IG51bGwpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgndmFsdWUnLCB0b1N0cmluZyhnZXRUb1N0cmluZ1ZhbHVlKHByb3BzLnZhbHVlKSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEhvc3RQcm9wcyQxKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBob3N0UHJvcHMgPSBfYXNzaWduKHsgY2hpbGRyZW46IHVuZGVmaW5lZCB9LCBwcm9wcyk7XG4gIHZhciBjb250ZW50ID0gZmxhdHRlbkNoaWxkcmVuKHByb3BzLmNoaWxkcmVuKTtcblxuICBpZiAoY29udGVudCkge1xuICAgIGhvc3RQcm9wcy5jaGlsZHJlbiA9IGNvbnRlbnQ7XG4gIH1cblxuICByZXR1cm4gaG9zdFByb3BzO1xufVxuXG4vLyBUT0RPOiBkaXJlY3QgaW1wb3J0cyBsaWtlIHNvbWUtcGFja2FnZS9zcmMvKiBhcmUgYmFkLiBGaXggbWUuXG52YXIgZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlJDEgPSB2b2lkIDA7XG5cbntcbiAgZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlJDEgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkge1xuICB2YXIgb3duZXJOYW1lID0gZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lSW5EZXZPck51bGwoKTtcbiAgaWYgKG93bmVyTmFtZSkge1xuICAgIHJldHVybiAnXFxuXFxuQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBvd25lck5hbWUgKyAnYC4nO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxudmFyIHZhbHVlUHJvcE5hbWVzID0gWyd2YWx1ZScsICdkZWZhdWx0VmFsdWUnXTtcblxuLyoqXG4gKiBWYWxpZGF0aW9uIGZ1bmN0aW9uIGZvciBgdmFsdWVgIGFuZCBgZGVmYXVsdFZhbHVlYC5cbiAqL1xuZnVuY3Rpb24gY2hlY2tTZWxlY3RQcm9wVHlwZXMocHJvcHMpIHtcbiAgUmVhY3RDb250cm9sbGVkVmFsdWVQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoJ3NlbGVjdCcsIHByb3BzKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlUHJvcE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByb3BOYW1lID0gdmFsdWVQcm9wTmFtZXNbaV07XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHByb3BzW3Byb3BOYW1lXSk7XG4gICAgaWYgKHByb3BzLm11bHRpcGxlICYmICFpc0FycmF5KSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdUaGUgYCVzYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYW4gYXJyYXkgaWYgJyArICdgbXVsdGlwbGVgIGlzIHRydWUuJXMnLCBwcm9wTmFtZSwgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkpO1xuICAgIH0gZWxzZSBpZiAoIXByb3BzLm11bHRpcGxlICYmIGlzQXJyYXkpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1RoZSBgJXNgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhIHNjYWxhciAnICsgJ3ZhbHVlIGlmIGBtdWx0aXBsZWAgaXMgZmFsc2UuJXMnLCBwcm9wTmFtZSwgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zKG5vZGUsIG11bHRpcGxlLCBwcm9wVmFsdWUsIHNldERlZmF1bHRTZWxlY3RlZCkge1xuICB2YXIgb3B0aW9ucyA9IG5vZGUub3B0aW9ucztcblxuICBpZiAobXVsdGlwbGUpIHtcbiAgICB2YXIgc2VsZWN0ZWRWYWx1ZXMgPSBwcm9wVmFsdWU7XG4gICAgdmFyIHNlbGVjdGVkVmFsdWUgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGVjdGVkVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBQcmVmaXggdG8gYXZvaWQgY2hhb3Mgd2l0aCBzcGVjaWFsIGtleXMuXG4gICAgICBzZWxlY3RlZFZhbHVlWyckJyArIHNlbGVjdGVkVmFsdWVzW2ldXSA9IHRydWU7XG4gICAgfVxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBvcHRpb25zLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIHNlbGVjdGVkID0gc2VsZWN0ZWRWYWx1ZS5oYXNPd25Qcm9wZXJ0eSgnJCcgKyBvcHRpb25zW19pXS52YWx1ZSk7XG4gICAgICBpZiAob3B0aW9uc1tfaV0uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbnNbX2ldLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgICBpZiAoc2VsZWN0ZWQgJiYgc2V0RGVmYXVsdFNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbnNbX2ldLmRlZmF1bHRTZWxlY3RlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIERvIG5vdCBzZXQgYHNlbGVjdC52YWx1ZWAgYXMgZXhhY3QgYmVoYXZpb3IgaXNuJ3QgY29uc2lzdGVudCBhY3Jvc3MgYWxsXG4gICAgLy8gYnJvd3NlcnMgZm9yIGFsbCBjYXNlcy5cbiAgICB2YXIgX3NlbGVjdGVkVmFsdWUgPSB0b1N0cmluZyhnZXRUb1N0cmluZ1ZhbHVlKHByb3BWYWx1ZSkpO1xuICAgIHZhciBkZWZhdWx0U2VsZWN0ZWQgPSBudWxsO1xuICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IG9wdGlvbnMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgaWYgKG9wdGlvbnNbX2kyXS52YWx1ZSA9PT0gX3NlbGVjdGVkVmFsdWUpIHtcbiAgICAgICAgb3B0aW9uc1tfaTJdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHNldERlZmF1bHRTZWxlY3RlZCkge1xuICAgICAgICAgIG9wdGlvbnNbX2kyXS5kZWZhdWx0U2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZhdWx0U2VsZWN0ZWQgPT09IG51bGwgJiYgIW9wdGlvbnNbX2kyXS5kaXNhYmxlZCkge1xuICAgICAgICBkZWZhdWx0U2VsZWN0ZWQgPSBvcHRpb25zW19pMl07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkZWZhdWx0U2VsZWN0ZWQgIT09IG51bGwpIHtcbiAgICAgIGRlZmF1bHRTZWxlY3RlZC5zZWxlY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIDxzZWxlY3Q+IGhvc3QgY29tcG9uZW50IHRoYXQgYWxsb3dzIG9wdGlvbmFsbHkgc2V0dGluZyB0aGVcbiAqIHByb3BzIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLiBJZiBgbXVsdGlwbGVgIGlzIGZhbHNlLCB0aGUgcHJvcCBtdXN0IGJlIGFcbiAqIHN0cmluZ2FibGUuIElmIGBtdWx0aXBsZWAgaXMgdHJ1ZSwgdGhlIHByb3AgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdhYmxlcy5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBjaGFuZ2UgdGhlXG4gKiBzZWxlY3RlZCBvcHRpb24gd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gKlxuICogSWYgaXQgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgb3B0aW9ucyB3aWxsIG5vdFxuICogdXBkYXRlIGluIHJlc3BvbnNlIHRvIHVzZXIgYWN0aW9ucy4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBvcHRpb25zIHRvIHVwZGF0ZS5cbiAqXG4gKiBJZiBgZGVmYXVsdFZhbHVlYCBpcyBwcm92aWRlZCwgYW55IG9wdGlvbnMgd2l0aCB0aGUgc3VwcGxpZWQgdmFsdWVzIHdpbGwgYmVcbiAqIHNlbGVjdGVkLlxuICovXG5cbmZ1bmN0aW9uIGdldEhvc3RQcm9wcyQyKGVsZW1lbnQsIHByb3BzKSB7XG4gIHJldHVybiBfYXNzaWduKHt9LCBwcm9wcywge1xuICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGluaXRXcmFwcGVyU3RhdGUkMShlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIHtcbiAgICBjaGVja1NlbGVjdFByb3BUeXBlcyhwcm9wcyk7XG4gIH1cblxuICBub2RlLl93cmFwcGVyU3RhdGUgPSB7XG4gICAgd2FzTXVsdGlwbGU6ICEhcHJvcHMubXVsdGlwbGVcbiAgfTtcblxuICB7XG4gICAgaWYgKHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSQxKSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdTZWxlY3QgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIHZhbHVlIHByb3AsIG9yIHRoZSBkZWZhdWx0VmFsdWUgcHJvcCwgYnV0IG5vdCAnICsgJ2JvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIHNlbGVjdCAnICsgJ2VsZW1lbnQgYW5kIHJlbW92ZSBvbmUgb2YgdGhlc2UgcHJvcHMuIE1vcmUgaW5mbzogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cycpO1xuICAgICAgZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlJDEgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwb3N0TW91bnRXcmFwcGVyJDIoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICBub2RlLm11bHRpcGxlID0gISFwcm9wcy5tdWx0aXBsZTtcbiAgdmFyIHZhbHVlID0gcHJvcHMudmFsdWU7XG4gIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgdXBkYXRlT3B0aW9ucyhub2RlLCAhIXByb3BzLm11bHRpcGxlLCB2YWx1ZSwgZmFsc2UpO1xuICB9IGVsc2UgaWYgKHByb3BzLmRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgdXBkYXRlT3B0aW9ucyhub2RlLCAhIXByb3BzLm11bHRpcGxlLCBwcm9wcy5kZWZhdWx0VmFsdWUsIHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBvc3RVcGRhdGVXcmFwcGVyKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAgdmFyIHdhc011bHRpcGxlID0gbm9kZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO1xuICBub2RlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUgPSAhIXByb3BzLm11bHRpcGxlO1xuXG4gIHZhciB2YWx1ZSA9IHByb3BzLnZhbHVlO1xuICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgIHVwZGF0ZU9wdGlvbnMobm9kZSwgISFwcm9wcy5tdWx0aXBsZSwgdmFsdWUsIGZhbHNlKTtcbiAgfSBlbHNlIGlmICh3YXNNdWx0aXBsZSAhPT0gISFwcm9wcy5tdWx0aXBsZSkge1xuICAgIC8vIEZvciBzaW1wbGljaXR5LCByZWFwcGx5IGBkZWZhdWx0VmFsdWVgIGlmIGBtdWx0aXBsZWAgaXMgdG9nZ2xlZC5cbiAgICBpZiAocHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgIHVwZGF0ZU9wdGlvbnMobm9kZSwgISFwcm9wcy5tdWx0aXBsZSwgcHJvcHMuZGVmYXVsdFZhbHVlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmV2ZXJ0IHRoZSBzZWxlY3QgYmFjayB0byBpdHMgZGVmYXVsdCB1bnNlbGVjdGVkIHN0YXRlLlxuICAgICAgdXBkYXRlT3B0aW9ucyhub2RlLCAhIXByb3BzLm11bHRpcGxlLCBwcm9wcy5tdWx0aXBsZSA/IFtdIDogJycsIGZhbHNlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSQyKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAgdmFyIHZhbHVlID0gcHJvcHMudmFsdWU7XG5cbiAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICB1cGRhdGVPcHRpb25zKG5vZGUsICEhcHJvcHMubXVsdGlwbGUsIHZhbHVlLCBmYWxzZSk7XG4gIH1cbn1cblxudmFyIGRpZFdhcm5WYWxEZWZhdWx0VmFsID0gZmFsc2U7XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIDx0ZXh0YXJlYT4gaG9zdCBjb21wb25lbnQgdGhhdCBhbGxvd3Mgc2V0dGluZyBgdmFsdWVgLCBhbmRcbiAqIGBkZWZhdWx0VmFsdWVgLiBUaGlzIGRpZmZlcnMgZnJvbSB0aGUgdHJhZGl0aW9uYWwgRE9NIEFQSSBiZWNhdXNlIHZhbHVlIGlzXG4gKiB1c3VhbGx5IHNldCBhcyBQQ0RBVEEgY2hpbGRyZW4uXG4gKlxuICogSWYgYHZhbHVlYCBpcyBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zIHRoYXQgYWZmZWN0IHRoZVxuICogdmFsdWUgd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuXG4gKlxuICogSWYgYHZhbHVlYCBpcyBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGxcbiAqIG5vdCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuIEluc3RlYWQsIHRoZSBgdmFsdWVgIHByb3AgbXVzdCBjaGFuZ2UgaW5cbiAqIG9yZGVyIGZvciB0aGUgcmVuZGVyZWQgZWxlbWVudCB0byBiZSB1cGRhdGVkLlxuICpcbiAqIFRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgYmUgaW5pdGlhbGl6ZWQgd2l0aCBhbiBlbXB0eSB2YWx1ZSwgdGhlIHByb3BcbiAqIGBkZWZhdWx0VmFsdWVgIGlmIHNwZWNpZmllZCwgb3IgdGhlIGNoaWxkcmVuIGNvbnRlbnQgKGRlcHJlY2F0ZWQpLlxuICovXG5cbmZ1bmN0aW9uIGdldEhvc3RQcm9wcyQzKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAgIShwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ2BkYW5nZXJvdXNseVNldElubmVySFRNTGAgZG9lcyBub3QgbWFrZSBzZW5zZSBvbiA8dGV4dGFyZWE+LicpIDogdm9pZCAwO1xuXG4gIC8vIEFsd2F5cyBzZXQgY2hpbGRyZW4gdG8gdGhlIHNhbWUgdGhpbmcuIEluIElFOSwgdGhlIHNlbGVjdGlvbiByYW5nZSB3aWxsXG4gIC8vIGdldCByZXNldCBpZiBgdGV4dENvbnRlbnRgIGlzIG11dGF0ZWQuICBXZSBjb3VsZCBhZGQgYSBjaGVjayBpbiBzZXRUZXh0Q29udGVudFxuICAvLyB0byBvbmx5IHNldCB0aGUgdmFsdWUgaWYvd2hlbiB0aGUgdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBub2RlIHZhbHVlICh3aGljaCB3b3VsZFxuICAvLyBjb21wbGV0ZWx5IHNvbHZlIHRoaXMgSUU5IGJ1ZyksIGJ1dCBTZWJhc3RpYW4rU29waGllIHNlZW1lZCB0byBsaWtlIHRoaXNcbiAgLy8gc29sdXRpb24uIFRoZSB2YWx1ZSBjYW4gYmUgYSBib29sZWFuIG9yIG9iamVjdCBzbyB0aGF0J3Mgd2h5IGl0J3MgZm9yY2VkXG4gIC8vIHRvIGJlIGEgc3RyaW5nLlxuICB2YXIgaG9zdFByb3BzID0gX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgIGRlZmF1bHRWYWx1ZTogdW5kZWZpbmVkLFxuICAgIGNoaWxkcmVuOiB0b1N0cmluZyhub2RlLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlKVxuICB9KTtcblxuICByZXR1cm4gaG9zdFByb3BzO1xufVxuXG5mdW5jdGlvbiBpbml0V3JhcHBlclN0YXRlJDIoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICB7XG4gICAgUmVhY3RDb250cm9sbGVkVmFsdWVQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoJ3RleHRhcmVhJywgcHJvcHMpO1xuICAgIGlmIChwcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsRGVmYXVsdFZhbCkge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnJXMgY29udGFpbnMgYSB0ZXh0YXJlYSB3aXRoIGJvdGggdmFsdWUgYW5kIGRlZmF1bHRWYWx1ZSBwcm9wcy4gJyArICdUZXh0YXJlYSBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgdGV4dGFyZWEgJyArICdhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lSW5EZXZPck51bGwoKSB8fCAnQSBjb21wb25lbnQnKTtcbiAgICAgIGRpZFdhcm5WYWxEZWZhdWx0VmFsID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbFZhbHVlID0gcHJvcHMudmFsdWU7XG5cbiAgLy8gT25seSBib3RoZXIgZmV0Y2hpbmcgZGVmYXVsdCB2YWx1ZSBpZiB3ZSdyZSBnb2luZyB0byB1c2UgaXRcbiAgaWYgKGluaXRpYWxWYWx1ZSA9PSBudWxsKSB7XG4gICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICAvLyBUT0RPICh5dW5nc3RlcnMpOiBSZW1vdmUgc3VwcG9ydCBmb3IgY2hpbGRyZW4gY29udGVudCBpbiA8dGV4dGFyZWE+LlxuICAgIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICB7XG4gICAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1VzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3IgYHZhbHVlYCBwcm9wcyBpbnN0ZWFkIG9mIHNldHRpbmcgJyArICdjaGlsZHJlbiBvbiA8dGV4dGFyZWE+LicpO1xuICAgICAgfVxuICAgICAgIShkZWZhdWx0VmFsdWUgPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdJZiB5b3Ugc3VwcGx5IGBkZWZhdWx0VmFsdWVgIG9uIGEgPHRleHRhcmVhPiwgZG8gbm90IHBhc3MgY2hpbGRyZW4uJykgOiB2b2lkIDA7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgIShjaGlsZHJlbi5sZW5ndGggPD0gMSkgPyBpbnZhcmlhbnQoZmFsc2UsICc8dGV4dGFyZWE+IGNhbiBvbmx5IGhhdmUgYXQgbW9zdCBvbmUgY2hpbGQuJykgOiB2b2lkIDA7XG4gICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW5bMF07XG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHRWYWx1ZSA9IGNoaWxkcmVuO1xuICAgIH1cbiAgICBpZiAoZGVmYXVsdFZhbHVlID09IG51bGwpIHtcbiAgICAgIGRlZmF1bHRWYWx1ZSA9ICcnO1xuICAgIH1cbiAgICBpbml0aWFsVmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gIH1cblxuICBub2RlLl93cmFwcGVyU3RhdGUgPSB7XG4gICAgaW5pdGlhbFZhbHVlOiBnZXRUb1N0cmluZ1ZhbHVlKGluaXRpYWxWYWx1ZSlcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlV3JhcHBlciQxKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAgdmFyIHZhbHVlID0gZ2V0VG9TdHJpbmdWYWx1ZShwcm9wcy52YWx1ZSk7XG4gIHZhciBkZWZhdWx0VmFsdWUgPSBnZXRUb1N0cmluZ1ZhbHVlKHByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgLy8gQ2FzdCBgdmFsdWVgIHRvIGEgc3RyaW5nIHRvIGVuc3VyZSB0aGUgdmFsdWUgaXMgc2V0IGNvcnJlY3RseS4gV2hpbGVcbiAgICAvLyBicm93c2VycyB0eXBpY2FsbHkgZG8gdGhpcyBhcyBuZWNlc3NhcnksIGpzZG9tIGRvZXNuJ3QuXG4gICAgdmFyIG5ld1ZhbHVlID0gdG9TdHJpbmcodmFsdWUpO1xuICAgIC8vIFRvIGF2b2lkIHNpZGUgZWZmZWN0cyAoc3VjaCBhcyBsb3NpbmcgdGV4dCBzZWxlY3Rpb24pLCBvbmx5IHNldCB2YWx1ZSBpZiBjaGFuZ2VkXG4gICAgaWYgKG5ld1ZhbHVlICE9PSBub2RlLnZhbHVlKSB7XG4gICAgICBub2RlLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kZWZhdWx0VmFsdWUgPT0gbnVsbCAmJiBub2RlLmRlZmF1bHRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgIG5vZGUuZGVmYXVsdFZhbHVlID0gbmV3VmFsdWU7XG4gICAgfVxuICB9XG4gIGlmIChkZWZhdWx0VmFsdWUgIT0gbnVsbCkge1xuICAgIG5vZGUuZGVmYXVsdFZhbHVlID0gdG9TdHJpbmcoZGVmYXVsdFZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb3N0TW91bnRXcmFwcGVyJDMoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICAvLyBUaGlzIGlzIGluIHBvc3RNb3VudCBiZWNhdXNlIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSBET00gbm9kZSwgd2hpY2ggaXMgbm90XG4gIC8vIGF2YWlsYWJsZSB1bnRpbCBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBtb3VudGVkLlxuICB2YXIgdGV4dENvbnRlbnQgPSBub2RlLnRleHRDb250ZW50O1xuXG4gIC8vIE9ubHkgc2V0IG5vZGUudmFsdWUgaWYgdGV4dENvbnRlbnQgaXMgZXF1YWwgdG8gdGhlIGV4cGVjdGVkXG4gIC8vIGluaXRpYWwgdmFsdWUuIEluIElFMTAvSUUxMSB0aGVyZSBpcyBhIGJ1ZyB3aGVyZSB0aGUgcGxhY2Vob2xkZXIgYXR0cmlidXRlXG4gIC8vIHdpbGwgcG9wdWxhdGUgdGV4dENvbnRlbnQgYXMgd2VsbC5cbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvMTAxNTI1L1xuICBpZiAodGV4dENvbnRlbnQgPT09IG5vZGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpIHtcbiAgICBub2RlLnZhbHVlID0gdGV4dENvbnRlbnQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSQzKGVsZW1lbnQsIHByb3BzKSB7XG4gIC8vIERPTSBjb21wb25lbnQgaXMgc3RpbGwgbW91bnRlZDsgdXBkYXRlXG4gIHVwZGF0ZVdyYXBwZXIkMShlbGVtZW50LCBwcm9wcyk7XG59XG5cbnZhciBIVE1MX05BTUVTUEFDRSQxID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnO1xudmFyIE1BVEhfTkFNRVNQQUNFID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnO1xudmFyIFNWR19OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuXG52YXIgTmFtZXNwYWNlcyA9IHtcbiAgaHRtbDogSFRNTF9OQU1FU1BBQ0UkMSxcbiAgbWF0aG1sOiBNQVRIX05BTUVTUEFDRSxcbiAgc3ZnOiBTVkdfTkFNRVNQQUNFXG59O1xuXG4vLyBBc3N1bWVzIHRoZXJlIGlzIG5vIHBhcmVudCBuYW1lc3BhY2UuXG5mdW5jdGlvbiBnZXRJbnRyaW5zaWNOYW1lc3BhY2UodHlwZSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdzdmcnOlxuICAgICAgcmV0dXJuIFNWR19OQU1FU1BBQ0U7XG4gICAgY2FzZSAnbWF0aCc6XG4gICAgICByZXR1cm4gTUFUSF9OQU1FU1BBQ0U7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBIVE1MX05BTUVTUEFDRSQxO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldENoaWxkTmFtZXNwYWNlKHBhcmVudE5hbWVzcGFjZSwgdHlwZSkge1xuICBpZiAocGFyZW50TmFtZXNwYWNlID09IG51bGwgfHwgcGFyZW50TmFtZXNwYWNlID09PSBIVE1MX05BTUVTUEFDRSQxKSB7XG4gICAgLy8gTm8gKG9yIGRlZmF1bHQpIHBhcmVudCBuYW1lc3BhY2U6IHBvdGVudGlhbCBlbnRyeSBwb2ludC5cbiAgICByZXR1cm4gZ2V0SW50cmluc2ljTmFtZXNwYWNlKHR5cGUpO1xuICB9XG4gIGlmIChwYXJlbnROYW1lc3BhY2UgPT09IFNWR19OQU1FU1BBQ0UgJiYgdHlwZSA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgLy8gV2UncmUgbGVhdmluZyBTVkcuXG4gICAgcmV0dXJuIEhUTUxfTkFNRVNQQUNFJDE7XG4gIH1cbiAgLy8gQnkgZGVmYXVsdCwgcGFzcyBuYW1lc3BhY2UgYmVsb3cuXG4gIHJldHVybiBwYXJlbnROYW1lc3BhY2U7XG59XG5cbi8qIGdsb2JhbHMgTVNBcHAgKi9cblxuLyoqXG4gKiBDcmVhdGUgYSBmdW5jdGlvbiB3aGljaCBoYXMgJ3Vuc2FmZScgcHJpdmlsZWdlcyAocmVxdWlyZWQgYnkgd2luZG93czggYXBwcylcbiAqL1xudmFyIGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24gPSBmdW5jdGlvbiAoZnVuYykge1xuICBpZiAodHlwZW9mIE1TQXBwICE9PSAndW5kZWZpbmVkJyAmJiBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnMCwgYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZnVuYyhhcmcwLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cbn07XG5cbi8vIFNWRyB0ZW1wIGNvbnRhaW5lciBmb3IgSUUgbGFja2luZyBpbm5lckhUTUxcbnZhciByZXVzYWJsZVNWR0NvbnRhaW5lciA9IHZvaWQgMDtcblxuLyoqXG4gKiBTZXQgdGhlIGlubmVySFRNTCBwcm9wZXJ0eSBvZiBhIG5vZGVcbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIHNldElubmVySFRNTCA9IGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24gKG5vZGUsIGh0bWwpIHtcbiAgLy8gSUUgZG9lcyBub3QgaGF2ZSBpbm5lckhUTUwgZm9yIFNWRyBub2Rlcywgc28gaW5zdGVhZCB3ZSBpbmplY3QgdGhlXG4gIC8vIG5ldyBtYXJrdXAgaW4gYSB0ZW1wIG5vZGUgYW5kIHRoZW4gbW92ZSB0aGUgY2hpbGQgbm9kZXMgYWNyb3NzIGludG9cbiAgLy8gdGhlIHRhcmdldCBub2RlXG5cbiAgaWYgKG5vZGUubmFtZXNwYWNlVVJJID09PSBOYW1lc3BhY2VzLnN2ZyAmJiAhKCdpbm5lckhUTUwnIGluIG5vZGUpKSB7XG4gICAgcmV1c2FibGVTVkdDb250YWluZXIgPSByZXVzYWJsZVNWR0NvbnRhaW5lciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICByZXVzYWJsZVNWR0NvbnRhaW5lci5pbm5lckhUTUwgPSAnPHN2Zz4nICsgaHRtbCArICc8L3N2Zz4nO1xuICAgIHZhciBzdmdOb2RlID0gcmV1c2FibGVTVkdDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICB3aGlsZSAobm9kZS5maXJzdENoaWxkKSB7XG4gICAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHdoaWxlIChzdmdOb2RlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoc3ZnTm9kZS5maXJzdENoaWxkKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xuICB9XG59KTtcblxuLyoqXG4gKiBTZXQgdGhlIHRleHRDb250ZW50IHByb3BlcnR5IG9mIGEgbm9kZS4gRm9yIHRleHQgdXBkYXRlcywgaXQncyBmYXN0ZXJcbiAqIHRvIHNldCB0aGUgYG5vZGVWYWx1ZWAgb2YgdGhlIFRleHQgbm9kZSBkaXJlY3RseSBpbnN0ZWFkIG9mIHVzaW5nXG4gKiBgLnRleHRDb250ZW50YCB3aGljaCB3aWxsIHJlbW92ZSB0aGUgZXhpc3Rpbmcgbm9kZSBhbmQgY3JlYXRlIGEgbmV3IG9uZS5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIHNldFRleHRDb250ZW50ID0gZnVuY3Rpb24gKG5vZGUsIHRleHQpIHtcbiAgaWYgKHRleHQpIHtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblxuICAgIGlmIChmaXJzdENoaWxkICYmIGZpcnN0Q2hpbGQgPT09IG5vZGUubGFzdENoaWxkICYmIGZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IFRFWFRfTk9ERSkge1xuICAgICAgZmlyc3RDaGlsZC5ub2RlVmFsdWUgPSB0ZXh0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn07XG5cbi8qKlxuICogQ1NTIHByb3BlcnRpZXMgd2hpY2ggYWNjZXB0IG51bWJlcnMgYnV0IGFyZSBub3QgaW4gdW5pdHMgb2YgXCJweFwiLlxuICovXG52YXIgaXNVbml0bGVzc051bWJlciA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IHRydWUsXG4gIGJvcmRlckltYWdlT3V0c2V0OiB0cnVlLFxuICBib3JkZXJJbWFnZVNsaWNlOiB0cnVlLFxuICBib3JkZXJJbWFnZVdpZHRoOiB0cnVlLFxuICBib3hGbGV4OiB0cnVlLFxuICBib3hGbGV4R3JvdXA6IHRydWUsXG4gIGJveE9yZGluYWxHcm91cDogdHJ1ZSxcbiAgY29sdW1uQ291bnQ6IHRydWUsXG4gIGNvbHVtbnM6IHRydWUsXG4gIGZsZXg6IHRydWUsXG4gIGZsZXhHcm93OiB0cnVlLFxuICBmbGV4UG9zaXRpdmU6IHRydWUsXG4gIGZsZXhTaHJpbms6IHRydWUsXG4gIGZsZXhOZWdhdGl2ZTogdHJ1ZSxcbiAgZmxleE9yZGVyOiB0cnVlLFxuICBncmlkQXJlYTogdHJ1ZSxcbiAgZ3JpZFJvdzogdHJ1ZSxcbiAgZ3JpZFJvd0VuZDogdHJ1ZSxcbiAgZ3JpZFJvd1NwYW46IHRydWUsXG4gIGdyaWRSb3dTdGFydDogdHJ1ZSxcbiAgZ3JpZENvbHVtbjogdHJ1ZSxcbiAgZ3JpZENvbHVtbkVuZDogdHJ1ZSxcbiAgZ3JpZENvbHVtblNwYW46IHRydWUsXG4gIGdyaWRDb2x1bW5TdGFydDogdHJ1ZSxcbiAgZm9udFdlaWdodDogdHJ1ZSxcbiAgbGluZUNsYW1wOiB0cnVlLFxuICBsaW5lSGVpZ2h0OiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBvcmRlcjogdHJ1ZSxcbiAgb3JwaGFuczogdHJ1ZSxcbiAgdGFiU2l6ZTogdHJ1ZSxcbiAgd2lkb3dzOiB0cnVlLFxuICB6SW5kZXg6IHRydWUsXG4gIHpvb206IHRydWUsXG5cbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogdHJ1ZSxcbiAgZmxvb2RPcGFjaXR5OiB0cnVlLFxuICBzdG9wT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaGFycmF5OiB0cnVlLFxuICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICBzdHJva2VNaXRlcmxpbWl0OiB0cnVlLFxuICBzdHJva2VPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VXaWR0aDogdHJ1ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IHZlbmRvci1zcGVjaWZpYyBwcmVmaXgsIGVnOiBXZWJraXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgc3R5bGUgbmFtZSwgZWc6IHRyYW5zaXRpb25EdXJhdGlvblxuICogQHJldHVybiB7c3RyaW5nfSBzdHlsZSBuYW1lIHByZWZpeGVkIHdpdGggYHByZWZpeGAsIHByb3Blcmx5IGNhbWVsQ2FzZWQsIGVnOlxuICogV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHByZWZpeEtleShwcmVmaXgsIGtleSkge1xuICByZXR1cm4gcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHN0eWxlIG5hbWVzIHRoYXQgbWF5IGNvbWUgcGFzc2VkIGluIHByZWZpeGVkIGJ5IGFkZGluZyBwZXJtdXRhdGlvbnNcbiAqIG9mIHZlbmRvciBwcmVmaXhlcy5cbiAqL1xudmFyIHByZWZpeGVzID0gWydXZWJraXQnLCAnbXMnLCAnTW96JywgJ08nXTtcblxuLy8gVXNpbmcgT2JqZWN0LmtleXMgaGVyZSwgb3IgZWxzZSB0aGUgdmFuaWxsYSBmb3ItaW4gbG9vcCBtYWtlcyBJRTggZ28gaW50byBhblxuLy8gaW5maW5pdGUgbG9vcCwgYmVjYXVzZSBpdCBpdGVyYXRlcyBvdmVyIHRoZSBuZXdseSBhZGRlZCBwcm9wcyB0b28uXG5PYmplY3Qua2V5cyhpc1VuaXRsZXNzTnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHByZWZpeGVzLmZvckVhY2goZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGlzVW5pdGxlc3NOdW1iZXJbcHJlZml4S2V5KHByZWZpeCwgcHJvcCldID0gaXNVbml0bGVzc051bWJlcltwcm9wXTtcbiAgfSk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgdmFsdWUgaW50byB0aGUgcHJvcGVyIGNzcyB3cml0YWJsZSB2YWx1ZS4gVGhlIHN0eWxlIG5hbWUgYG5hbWVgXG4gKiBzaG91bGQgYmUgbG9naWNhbCAobm8gaHlwaGVucyksIGFzIHNwZWNpZmllZFxuICogaW4gYENTU1Byb3BlcnR5LmlzVW5pdGxlc3NOdW1iZXJgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIENTUyBwcm9wZXJ0eSBuYW1lIHN1Y2ggYXMgYHRvcE1hcmdpbmAuXG4gKiBAcGFyYW0geyp9IHZhbHVlIENTUyBwcm9wZXJ0eSB2YWx1ZSBzdWNoIGFzIGAxMHB4YC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBzdHlsZSB2YWx1ZSB3aXRoIGRpbWVuc2lvbnMgYXBwbGllZC5cbiAqL1xuZnVuY3Rpb24gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShuYW1lLCB2YWx1ZSwgaXNDdXN0b21Qcm9wZXJ0eSkge1xuICAvLyBOb3RlIHRoYXQgd2UndmUgcmVtb3ZlZCBlc2NhcGVUZXh0Rm9yQnJvd3NlcigpIGNhbGxzIGhlcmUgc2luY2UgdGhlXG4gIC8vIHdob2xlIHN0cmluZyB3aWxsIGJlIGVzY2FwZWQgd2hlbiB0aGUgYXR0cmlidXRlIGlzIGluamVjdGVkIGludG9cbiAgLy8gdGhlIG1hcmt1cC4gSWYgeW91IHByb3ZpZGUgdW5zYWZlIHVzZXIgZGF0YSBoZXJlIHRoZXkgY2FuIGluamVjdFxuICAvLyBhcmJpdHJhcnkgQ1NTIHdoaWNoIG1heSBiZSBwcm9ibGVtYXRpYyAoSSBjb3VsZG4ndCByZXBybyB0aGlzKTpcbiAgLy8gaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9YU1NfRmlsdGVyX0V2YXNpb25fQ2hlYXRfU2hlZXRcbiAgLy8gaHR0cDovL3d3dy50aGVzcGFubmVyLmNvLnVrLzIwMDcvMTEvMjYvdWx0aW1hdGUteHNzLWNzcy1pbmplY3Rpb24vXG4gIC8vIFRoaXMgaXMgbm90IGFuIFhTUyBob2xlIGJ1dCBpbnN0ZWFkIGEgcG90ZW50aWFsIENTUyBpbmplY3Rpb24gaXNzdWVcbiAgLy8gd2hpY2ggaGFzIGxlYWQgdG8gYSBncmVhdGVyIGRpc2N1c3Npb24gYWJvdXQgaG93IHdlJ3JlIGdvaW5nIHRvXG4gIC8vIHRydXN0IFVSTHMgbW92aW5nIGZvcndhcmQuIFNlZSAjMjExNTkwMVxuXG4gIHZhciBpc0VtcHR5ID0gdmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fCB2YWx1ZSA9PT0gJyc7XG4gIGlmIChpc0VtcHR5KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKCFpc0N1c3RvbVByb3BlcnR5ICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IDAgJiYgIShpc1VuaXRsZXNzTnVtYmVyLmhhc093blByb3BlcnR5KG5hbWUpICYmIGlzVW5pdGxlc3NOdW1iZXJbbmFtZV0pKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JzsgLy8gUHJlc3VtZXMgaW1wbGljaXQgJ3B4JyBzdWZmaXggZm9yIHVuaXRsZXNzIG51bWJlcnNcbiAgfVxuXG4gIHJldHVybiAoJycgKyB2YWx1ZSkudHJpbSgpO1xufVxuXG52YXIgdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdNb3pUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tb3otdHJhbnNpdGlvblwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdtc1RyYW5zaXRpb24nKVxuICogICA8IFwiLW1zLXRyYW5zaXRpb25cIlxuICpcbiAqIEFzIE1vZGVybml6ciBzdWdnZXN0cyAoaHR0cDovL21vZGVybml6ci5jb20vZG9jcy8jcHJlZml4ZWQpLCBhbiBgbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGAtbXMtYC5cbiAqL1xuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLCAnLSQxJykudG9Mb3dlckNhc2UoKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxudmFyIHdhcm5WYWxpZFN0eWxlID0gZnVuY3Rpb24gKCkge307XG5cbntcbiAgLy8gJ21zVHJhbnNmb3JtJyBpcyBjb3JyZWN0LCBidXQgdGhlIG90aGVyIHByZWZpeGVzIHNob3VsZCBiZSBjYXBpdGFsaXplZFxuICB2YXIgYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuID0gL14oPzp3ZWJraXR8bW96fG8pW0EtWl0vO1xuICB2YXIgbXNQYXR0ZXJuJDEgPSAvXi1tcy0vO1xuICB2YXIgaHlwaGVuUGF0dGVybiA9IC8tKC4pL2c7XG5cbiAgLy8gc3R5bGUgdmFsdWVzIHNob3VsZG4ndCBjb250YWluIGEgc2VtaWNvbG9uXG4gIHZhciBiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4gPSAvO1xccyokLztcblxuICB2YXIgd2FybmVkU3R5bGVOYW1lcyA9IHt9O1xuICB2YXIgd2FybmVkU3R5bGVWYWx1ZXMgPSB7fTtcbiAgdmFyIHdhcm5lZEZvck5hTlZhbHVlID0gZmFsc2U7XG4gIHZhciB3YXJuZWRGb3JJbmZpbml0eVZhbHVlID0gZmFsc2U7XG5cbiAgdmFyIGNhbWVsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShoeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoXywgY2hhcmFjdGVyKSB7XG4gICAgICByZXR1cm4gY2hhcmFjdGVyLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgd2FybmluZyQxKGZhbHNlLCAnVW5zdXBwb3J0ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8nLCBuYW1lLFxuICAgIC8vIEFzIEFuZGkgU21pdGggc3VnZ2VzdHNcbiAgICAvLyAoaHR0cDovL3d3dy5hbmRpc21pdGguY29tL2Jsb2cvMjAxMi8wMi9tb2Rlcm5penItcHJlZml4ZWQvKSwgYW4gYC1tc2AgcHJlZml4XG4gICAgLy8gaXMgY29udmVydGVkIHRvIGxvd2VyY2FzZSBgbXNgLlxuICAgIGNhbWVsaXplKG5hbWUucmVwbGFjZShtc1BhdHRlcm4kMSwgJ21zLScpKSk7XG4gIH07XG5cbiAgdmFyIHdhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKHdhcm5lZFN0eWxlTmFtZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0gPSB0cnVlO1xuICAgIHdhcm5pbmckMShmYWxzZSwgJ1Vuc3VwcG9ydGVkIHZlbmRvci1wcmVmaXhlZCBzdHlsZSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPycsIG5hbWUsIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpKTtcbiAgfTtcblxuICB2YXIgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHdhcm5lZFN0eWxlVmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSAmJiB3YXJuZWRTdHlsZVZhbHVlc1t2YWx1ZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZVZhbHVlc1t2YWx1ZV0gPSB0cnVlO1xuICAgIHdhcm5pbmckMShmYWxzZSwgXCJTdHlsZSBwcm9wZXJ0eSB2YWx1ZXMgc2hvdWxkbid0IGNvbnRhaW4gYSBzZW1pY29sb24uIFwiICsgJ1RyeSBcIiVzOiAlc1wiIGluc3RlYWQuJywgbmFtZSwgdmFsdWUucmVwbGFjZShiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4sICcnKSk7XG4gIH07XG5cbiAgdmFyIHdhcm5TdHlsZVZhbHVlSXNOYU4gPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAod2FybmVkRm9yTmFOVmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRGb3JOYU5WYWx1ZSA9IHRydWU7XG4gICAgd2FybmluZyQxKGZhbHNlLCAnYE5hTmAgaXMgYW4gaW52YWxpZCB2YWx1ZSBmb3IgdGhlIGAlc2AgY3NzIHN0eWxlIHByb3BlcnR5LicsIG5hbWUpO1xuICB9O1xuXG4gIHZhciB3YXJuU3R5bGVWYWx1ZUlzSW5maW5pdHkgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAod2FybmVkRm9ySW5maW5pdHlWYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhcm5lZEZvckluZmluaXR5VmFsdWUgPSB0cnVlO1xuICAgIHdhcm5pbmckMShmYWxzZSwgJ2BJbmZpbml0eWAgaXMgYW4gaW52YWxpZCB2YWx1ZSBmb3IgdGhlIGAlc2AgY3NzIHN0eWxlIHByb3BlcnR5LicsIG5hbWUpO1xuICB9O1xuXG4gIHdhcm5WYWxpZFN0eWxlID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKG5hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lKG5hbWUpO1xuICAgIH0gZWxzZSBpZiAoYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuLnRlc3QobmFtZSkpIHtcbiAgICAgIHdhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZShuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybi50ZXN0KHZhbHVlKSkge1xuICAgICAgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uKG5hbWUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKGlzTmFOKHZhbHVlKSkge1xuICAgICAgICB3YXJuU3R5bGVWYWx1ZUlzTmFOKG5hbWUsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRmluaXRlKHZhbHVlKSkge1xuICAgICAgICB3YXJuU3R5bGVWYWx1ZUlzSW5maW5pdHkobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxudmFyIHdhcm5WYWxpZFN0eWxlJDEgPSB3YXJuVmFsaWRTdHlsZTtcblxuLyoqXG4gKiBPcGVyYXRpb25zIGZvciBkZWFsaW5nIHdpdGggQ1NTIHByb3BlcnRpZXMuXG4gKi9cblxuLyoqXG4gKiBUaGlzIGNyZWF0ZXMgYSBzdHJpbmcgdGhhdCBpcyBleHBlY3RlZCB0byBiZSBlcXVpdmFsZW50IHRvIHRoZSBzdHlsZVxuICogYXR0cmlidXRlIGdlbmVyYXRlZCBieSBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIEl0IGJ5LXBhc3NlcyB3YXJuaW5ncyBhbmRcbiAqIHNlY3VyaXR5IGNoZWNrcyBzbyBpdCdzIG5vdCBzYWZlIHRvIHVzZSB0aGlzIHZhbHVlIGZvciBhbnl0aGluZyBvdGhlciB0aGFuXG4gKiBjb21wYXJpc29uLiBJdCBpcyBvbmx5IHVzZWQgaW4gREVWIGZvciBTU1IgdmFsaWRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGFuZ2Vyb3VzU3RyaW5nRm9yU3R5bGVzKHN0eWxlcykge1xuICB7XG4gICAgdmFyIHNlcmlhbGl6ZWQgPSAnJztcbiAgICB2YXIgZGVsaW1pdGVyID0gJyc7XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBzdHlsZVZhbHVlID0gc3R5bGVzW3N0eWxlTmFtZV07XG4gICAgICBpZiAoc3R5bGVWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBpc0N1c3RvbVByb3BlcnR5ID0gc3R5bGVOYW1lLmluZGV4T2YoJy0tJykgPT09IDA7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gZGVsaW1pdGVyICsgaHlwaGVuYXRlU3R5bGVOYW1lKHN0eWxlTmFtZSkgKyAnOic7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlVmFsdWUsIGlzQ3VzdG9tUHJvcGVydHkpO1xuXG4gICAgICAgIGRlbGltaXRlciA9ICc7JztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWQgfHwgbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIGZvciBtdWx0aXBsZSBzdHlsZXMgb24gYSBub2RlLiAgSWYgYSB2YWx1ZSBpcyBzcGVjaWZpZWQgYXNcbiAqICcnIChlbXB0eSBzdHJpbmcpLCB0aGUgY29ycmVzcG9uZGluZyBzdHlsZSBwcm9wZXJ0eSB3aWxsIGJlIHVuc2V0LlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtvYmplY3R9IHN0eWxlc1xuICovXG5mdW5jdGlvbiBzZXRWYWx1ZUZvclN0eWxlcyhub2RlLCBzdHlsZXMpIHtcbiAgdmFyIHN0eWxlID0gbm9kZS5zdHlsZTtcbiAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IHN0eWxlTmFtZS5pbmRleE9mKCctLScpID09PSAwO1xuICAgIHtcbiAgICAgIGlmICghaXNDdXN0b21Qcm9wZXJ0eSkge1xuICAgICAgICB3YXJuVmFsaWRTdHlsZSQxKHN0eWxlTmFtZSwgc3R5bGVzW3N0eWxlTmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgc3R5bGVWYWx1ZSA9IGRhbmdlcm91c1N0eWxlVmFsdWUoc3R5bGVOYW1lLCBzdHlsZXNbc3R5bGVOYW1lXSwgaXNDdXN0b21Qcm9wZXJ0eSk7XG4gICAgaWYgKHN0eWxlTmFtZSA9PT0gJ2Zsb2F0Jykge1xuICAgICAgc3R5bGVOYW1lID0gJ2Nzc0Zsb2F0JztcbiAgICB9XG4gICAgaWYgKGlzQ3VzdG9tUHJvcGVydHkpIHtcbiAgICAgIHN0eWxlLnNldFByb3BlcnR5KHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlW3N0eWxlTmFtZV0gPSBzdHlsZVZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG4vLyBGb3IgSFRNTCwgY2VydGFpbiB0YWdzIHNob3VsZCBvbWl0IHRoZWlyIGNsb3NlIHRhZy4gV2Uga2VlcCBhIHdoaXRlbGlzdCBmb3Jcbi8vIHRob3NlIHNwZWNpYWwtY2FzZSB0YWdzLlxuXG52YXIgb21pdHRlZENsb3NlVGFncyA9IHtcbiAgYXJlYTogdHJ1ZSxcbiAgYmFzZTogdHJ1ZSxcbiAgYnI6IHRydWUsXG4gIGNvbDogdHJ1ZSxcbiAgZW1iZWQ6IHRydWUsXG4gIGhyOiB0cnVlLFxuICBpbWc6IHRydWUsXG4gIGlucHV0OiB0cnVlLFxuICBrZXlnZW46IHRydWUsXG4gIGxpbms6IHRydWUsXG4gIG1ldGE6IHRydWUsXG4gIHBhcmFtOiB0cnVlLFxuICBzb3VyY2U6IHRydWUsXG4gIHRyYWNrOiB0cnVlLFxuICB3YnI6IHRydWVcbiAgLy8gTk9URTogbWVudWl0ZW0ncyBjbG9zZSB0YWcgc2hvdWxkIGJlIG9taXR0ZWQsIGJ1dCB0aGF0IGNhdXNlcyBwcm9ibGVtcy5cbn07XG5cbi8vIEZvciBIVE1MLCBjZXJ0YWluIHRhZ3MgY2Fubm90IGhhdmUgY2hpbGRyZW4uIFRoaXMgaGFzIHRoZSBzYW1lIHB1cnBvc2UgYXNcbi8vIGBvbWl0dGVkQ2xvc2VUYWdzYCBleGNlcHQgdGhhdCBgbWVudWl0ZW1gIHNob3VsZCBzdGlsbCBoYXZlIGl0cyBjbG9zaW5nIHRhZy5cblxudmFyIHZvaWRFbGVtZW50VGFncyA9IF9hc3NpZ24oe1xuICBtZW51aXRlbTogdHJ1ZVxufSwgb21pdHRlZENsb3NlVGFncyk7XG5cbi8vIFRPRE86IFdlIGNhbiByZW1vdmUgdGhpcyBpZiB3ZSBhZGQgaW52YXJpYW50V2l0aFN0YWNrKClcbi8vIG9yIGFkZCBzdGFjayBieSBkZWZhdWx0IHRvIGludmFyaWFudHMgd2hlcmUgcG9zc2libGUuXG52YXIgSFRNTCQxID0gJ19faHRtbCc7XG5cbnZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDIgPSBudWxsO1xue1xuICBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDIgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRWYWxpZFByb3BzKHRhZywgcHJvcHMpIHtcbiAgaWYgKCFwcm9wcykge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBOb3RlIHRoZSB1c2Ugb2YgYD09YCB3aGljaCBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkLlxuICBpZiAodm9pZEVsZW1lbnRUYWdzW3RhZ10pIHtcbiAgICAhKHByb3BzLmNoaWxkcmVuID09IG51bGwgJiYgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICclcyBpcyBhIHZvaWQgZWxlbWVudCB0YWcgYW5kIG11c3QgbmVpdGhlciBoYXZlIGBjaGlsZHJlbmAgbm9yIHVzZSBgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLiVzJywgdGFnLCBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDIuZ2V0U3RhY2tBZGRlbmR1bSgpKSA6IHZvaWQgMDtcbiAgfVxuICBpZiAocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIT0gbnVsbCkge1xuICAgICEocHJvcHMuY2hpbGRyZW4gPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW4gb25seSBzZXQgb25lIG9mIGBjaGlsZHJlbmAgb3IgYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nKSA6IHZvaWQgMDtcbiAgICAhKHR5cGVvZiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PT0gJ29iamVjdCcgJiYgSFRNTCQxIGluIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSA/IGludmFyaWFudChmYWxzZSwgJ2Bwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAgbXVzdCBiZSBpbiB0aGUgZm9ybSBge19faHRtbDogLi4ufWAuIFBsZWFzZSB2aXNpdCBodHRwczovL2ZiLm1lL3JlYWN0LWludmFyaWFudC1kYW5nZXJvdXNseS1zZXQtaW5uZXItaHRtbCBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKSA6IHZvaWQgMDtcbiAgfVxuICB7XG4gICAgIShwcm9wcy5zdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgfHwgIXByb3BzLmNvbnRlbnRFZGl0YWJsZSB8fCBwcm9wcy5jaGlsZHJlbiA9PSBudWxsKSA/IHdhcm5pbmckMShmYWxzZSwgJ0EgY29tcG9uZW50IGlzIGBjb250ZW50RWRpdGFibGVgIGFuZCBjb250YWlucyBgY2hpbGRyZW5gIG1hbmFnZWQgYnkgJyArICdSZWFjdC4gSXQgaXMgbm93IHlvdXIgcmVzcG9uc2liaWxpdHkgdG8gZ3VhcmFudGVlIHRoYXQgbm9uZSBvZiAnICsgJ3Rob3NlIG5vZGVzIGFyZSB1bmV4cGVjdGVkbHkgbW9kaWZpZWQgb3IgZHVwbGljYXRlZC4gVGhpcyBpcyAnICsgJ3Byb2JhYmx5IG5vdCBpbnRlbnRpb25hbC4nKSA6IHZvaWQgMDtcbiAgfVxuICAhKHByb3BzLnN0eWxlID09IG51bGwgfHwgdHlwZW9mIHByb3BzLnN0eWxlID09PSAnb2JqZWN0JykgPyBpbnZhcmlhbnQoZmFsc2UsICdUaGUgYHN0eWxlYCBwcm9wIGV4cGVjdHMgYSBtYXBwaW5nIGZyb20gc3R5bGUgcHJvcGVydGllcyB0byB2YWx1ZXMsIG5vdCBhIHN0cmluZy4gRm9yIGV4YW1wbGUsIHN0eWxlPXt7bWFyZ2luUmlnaHQ6IHNwYWNpbmcgKyBcXCdlbVxcJ319IHdoZW4gdXNpbmcgSlNYLiVzJywgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQyLmdldFN0YWNrQWRkZW5kdW0oKSkgOiB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIGlzQ3VzdG9tQ29tcG9uZW50KHRhZ05hbWUsIHByb3BzKSB7XG4gIGlmICh0YWdOYW1lLmluZGV4T2YoJy0nKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gdHlwZW9mIHByb3BzLmlzID09PSAnc3RyaW5nJztcbiAgfVxuICBzd2l0Y2ggKHRhZ05hbWUpIHtcbiAgICAvLyBUaGVzZSBhcmUgcmVzZXJ2ZWQgU1ZHIGFuZCBNYXRoTUwgZWxlbWVudHMuXG4gICAgLy8gV2UgZG9uJ3QgbWluZCB0aGlzIHdoaXRlbGlzdCB0b28gbXVjaCBiZWNhdXNlIHdlIGV4cGVjdCBpdCB0byBuZXZlciBncm93LlxuICAgIC8vIFRoZSBhbHRlcm5hdGl2ZSBpcyB0byB0cmFjayB0aGUgbmFtZXNwYWNlIGluIGEgZmV3IHBsYWNlcyB3aGljaCBpcyBjb252b2x1dGVkLlxuICAgIC8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJjb21wb25lbnRzL3NwZWMvY3VzdG9tLyNjdXN0b20tZWxlbWVudHMtY29yZS1jb25jZXB0c1xuICAgIGNhc2UgJ2Fubm90YXRpb24teG1sJzpcbiAgICBjYXNlICdjb2xvci1wcm9maWxlJzpcbiAgICBjYXNlICdmb250LWZhY2UnOlxuICAgIGNhc2UgJ2ZvbnQtZmFjZS1zcmMnOlxuICAgIGNhc2UgJ2ZvbnQtZmFjZS11cmknOlxuICAgIGNhc2UgJ2ZvbnQtZmFjZS1mb3JtYXQnOlxuICAgIGNhc2UgJ2ZvbnQtZmFjZS1uYW1lJzpcbiAgICBjYXNlICdtaXNzaW5nLWdseXBoJzpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuLy8gV2hlbiBhZGRpbmcgYXR0cmlidXRlcyB0byB0aGUgSFRNTCBvciBTVkcgd2hpdGVsaXN0LCBiZSBzdXJlIHRvXG4vLyBhbHNvIGFkZCB0aGVtIHRvIHRoaXMgbW9kdWxlIHRvIGVuc3VyZSBjYXNpbmcgYW5kIGluY29ycmVjdCBuYW1lXG4vLyB3YXJuaW5ncy5cbnZhciBwb3NzaWJsZVN0YW5kYXJkTmFtZXMgPSB7XG4gIC8vIEhUTUxcbiAgYWNjZXB0OiAnYWNjZXB0JyxcbiAgYWNjZXB0Y2hhcnNldDogJ2FjY2VwdENoYXJzZXQnLFxuICAnYWNjZXB0LWNoYXJzZXQnOiAnYWNjZXB0Q2hhcnNldCcsXG4gIGFjY2Vzc2tleTogJ2FjY2Vzc0tleScsXG4gIGFjdGlvbjogJ2FjdGlvbicsXG4gIGFsbG93ZnVsbHNjcmVlbjogJ2FsbG93RnVsbFNjcmVlbicsXG4gIGFsdDogJ2FsdCcsXG4gIGFzOiAnYXMnLFxuICBhc3luYzogJ2FzeW5jJyxcbiAgYXV0b2NhcGl0YWxpemU6ICdhdXRvQ2FwaXRhbGl6ZScsXG4gIGF1dG9jb21wbGV0ZTogJ2F1dG9Db21wbGV0ZScsXG4gIGF1dG9jb3JyZWN0OiAnYXV0b0NvcnJlY3QnLFxuICBhdXRvZm9jdXM6ICdhdXRvRm9jdXMnLFxuICBhdXRvcGxheTogJ2F1dG9QbGF5JyxcbiAgYXV0b3NhdmU6ICdhdXRvU2F2ZScsXG4gIGNhcHR1cmU6ICdjYXB0dXJlJyxcbiAgY2VsbHBhZGRpbmc6ICdjZWxsUGFkZGluZycsXG4gIGNlbGxzcGFjaW5nOiAnY2VsbFNwYWNpbmcnLFxuICBjaGFsbGVuZ2U6ICdjaGFsbGVuZ2UnLFxuICBjaGFyc2V0OiAnY2hhclNldCcsXG4gIGNoZWNrZWQ6ICdjaGVja2VkJyxcbiAgY2hpbGRyZW46ICdjaGlsZHJlbicsXG4gIGNpdGU6ICdjaXRlJyxcbiAgY2xhc3M6ICdjbGFzc05hbWUnLFxuICBjbGFzc2lkOiAnY2xhc3NJRCcsXG4gIGNsYXNzbmFtZTogJ2NsYXNzTmFtZScsXG4gIGNvbHM6ICdjb2xzJyxcbiAgY29sc3BhbjogJ2NvbFNwYW4nLFxuICBjb250ZW50OiAnY29udGVudCcsXG4gIGNvbnRlbnRlZGl0YWJsZTogJ2NvbnRlbnRFZGl0YWJsZScsXG4gIGNvbnRleHRtZW51OiAnY29udGV4dE1lbnUnLFxuICBjb250cm9sczogJ2NvbnRyb2xzJyxcbiAgY29udHJvbHNsaXN0OiAnY29udHJvbHNMaXN0JyxcbiAgY29vcmRzOiAnY29vcmRzJyxcbiAgY3Jvc3NvcmlnaW46ICdjcm9zc09yaWdpbicsXG4gIGRhbmdlcm91c2x5c2V0aW5uZXJodG1sOiAnZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwnLFxuICBkYXRhOiAnZGF0YScsXG4gIGRhdGV0aW1lOiAnZGF0ZVRpbWUnLFxuICBkZWZhdWx0OiAnZGVmYXVsdCcsXG4gIGRlZmF1bHRjaGVja2VkOiAnZGVmYXVsdENoZWNrZWQnLFxuICBkZWZhdWx0dmFsdWU6ICdkZWZhdWx0VmFsdWUnLFxuICBkZWZlcjogJ2RlZmVyJyxcbiAgZGlyOiAnZGlyJyxcbiAgZGlzYWJsZWQ6ICdkaXNhYmxlZCcsXG4gIGRvd25sb2FkOiAnZG93bmxvYWQnLFxuICBkcmFnZ2FibGU6ICdkcmFnZ2FibGUnLFxuICBlbmN0eXBlOiAnZW5jVHlwZScsXG4gIGZvcjogJ2h0bWxGb3InLFxuICBmb3JtOiAnZm9ybScsXG4gIGZvcm1tZXRob2Q6ICdmb3JtTWV0aG9kJyxcbiAgZm9ybWFjdGlvbjogJ2Zvcm1BY3Rpb24nLFxuICBmb3JtZW5jdHlwZTogJ2Zvcm1FbmNUeXBlJyxcbiAgZm9ybW5vdmFsaWRhdGU6ICdmb3JtTm9WYWxpZGF0ZScsXG4gIGZvcm10YXJnZXQ6ICdmb3JtVGFyZ2V0JyxcbiAgZnJhbWVib3JkZXI6ICdmcmFtZUJvcmRlcicsXG4gIGhlYWRlcnM6ICdoZWFkZXJzJyxcbiAgaGVpZ2h0OiAnaGVpZ2h0JyxcbiAgaGlkZGVuOiAnaGlkZGVuJyxcbiAgaGlnaDogJ2hpZ2gnLFxuICBocmVmOiAnaHJlZicsXG4gIGhyZWZsYW5nOiAnaHJlZkxhbmcnLFxuICBodG1sZm9yOiAnaHRtbEZvcicsXG4gIGh0dHBlcXVpdjogJ2h0dHBFcXVpdicsXG4gICdodHRwLWVxdWl2JzogJ2h0dHBFcXVpdicsXG4gIGljb246ICdpY29uJyxcbiAgaWQ6ICdpZCcsXG4gIGlubmVyaHRtbDogJ2lubmVySFRNTCcsXG4gIGlucHV0bW9kZTogJ2lucHV0TW9kZScsXG4gIGludGVncml0eTogJ2ludGVncml0eScsXG4gIGlzOiAnaXMnLFxuICBpdGVtaWQ6ICdpdGVtSUQnLFxuICBpdGVtcHJvcDogJ2l0ZW1Qcm9wJyxcbiAgaXRlbXJlZjogJ2l0ZW1SZWYnLFxuICBpdGVtc2NvcGU6ICdpdGVtU2NvcGUnLFxuICBpdGVtdHlwZTogJ2l0ZW1UeXBlJyxcbiAga2V5cGFyYW1zOiAna2V5UGFyYW1zJyxcbiAga2V5dHlwZTogJ2tleVR5cGUnLFxuICBraW5kOiAna2luZCcsXG4gIGxhYmVsOiAnbGFiZWwnLFxuICBsYW5nOiAnbGFuZycsXG4gIGxpc3Q6ICdsaXN0JyxcbiAgbG9vcDogJ2xvb3AnLFxuICBsb3c6ICdsb3cnLFxuICBtYW5pZmVzdDogJ21hbmlmZXN0JyxcbiAgbWFyZ2lud2lkdGg6ICdtYXJnaW5XaWR0aCcsXG4gIG1hcmdpbmhlaWdodDogJ21hcmdpbkhlaWdodCcsXG4gIG1heDogJ21heCcsXG4gIG1heGxlbmd0aDogJ21heExlbmd0aCcsXG4gIG1lZGlhOiAnbWVkaWEnLFxuICBtZWRpYWdyb3VwOiAnbWVkaWFHcm91cCcsXG4gIG1ldGhvZDogJ21ldGhvZCcsXG4gIG1pbjogJ21pbicsXG4gIG1pbmxlbmd0aDogJ21pbkxlbmd0aCcsXG4gIG11bHRpcGxlOiAnbXVsdGlwbGUnLFxuICBtdXRlZDogJ211dGVkJyxcbiAgbmFtZTogJ25hbWUnLFxuICBub21vZHVsZTogJ25vTW9kdWxlJyxcbiAgbm9uY2U6ICdub25jZScsXG4gIG5vdmFsaWRhdGU6ICdub1ZhbGlkYXRlJyxcbiAgb3BlbjogJ29wZW4nLFxuICBvcHRpbXVtOiAnb3B0aW11bScsXG4gIHBhdHRlcm46ICdwYXR0ZXJuJyxcbiAgcGxhY2Vob2xkZXI6ICdwbGFjZWhvbGRlcicsXG4gIHBsYXlzaW5saW5lOiAncGxheXNJbmxpbmUnLFxuICBwb3N0ZXI6ICdwb3N0ZXInLFxuICBwcmVsb2FkOiAncHJlbG9hZCcsXG4gIHByb2ZpbGU6ICdwcm9maWxlJyxcbiAgcmFkaW9ncm91cDogJ3JhZGlvR3JvdXAnLFxuICByZWFkb25seTogJ3JlYWRPbmx5JyxcbiAgcmVmZXJyZXJwb2xpY3k6ICdyZWZlcnJlclBvbGljeScsXG4gIHJlbDogJ3JlbCcsXG4gIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxuICByZXZlcnNlZDogJ3JldmVyc2VkJyxcbiAgcm9sZTogJ3JvbGUnLFxuICByb3dzOiAncm93cycsXG4gIHJvd3NwYW46ICdyb3dTcGFuJyxcbiAgc2FuZGJveDogJ3NhbmRib3gnLFxuICBzY29wZTogJ3Njb3BlJyxcbiAgc2NvcGVkOiAnc2NvcGVkJyxcbiAgc2Nyb2xsaW5nOiAnc2Nyb2xsaW5nJyxcbiAgc2VhbWxlc3M6ICdzZWFtbGVzcycsXG4gIHNlbGVjdGVkOiAnc2VsZWN0ZWQnLFxuICBzaGFwZTogJ3NoYXBlJyxcbiAgc2l6ZTogJ3NpemUnLFxuICBzaXplczogJ3NpemVzJyxcbiAgc3BhbjogJ3NwYW4nLFxuICBzcGVsbGNoZWNrOiAnc3BlbGxDaGVjaycsXG4gIHNyYzogJ3NyYycsXG4gIHNyY2RvYzogJ3NyY0RvYycsXG4gIHNyY2xhbmc6ICdzcmNMYW5nJyxcbiAgc3Jjc2V0OiAnc3JjU2V0JyxcbiAgc3RhcnQ6ICdzdGFydCcsXG4gIHN0ZXA6ICdzdGVwJyxcbiAgc3R5bGU6ICdzdHlsZScsXG4gIHN1bW1hcnk6ICdzdW1tYXJ5JyxcbiAgdGFiaW5kZXg6ICd0YWJJbmRleCcsXG4gIHRhcmdldDogJ3RhcmdldCcsXG4gIHRpdGxlOiAndGl0bGUnLFxuICB0eXBlOiAndHlwZScsXG4gIHVzZW1hcDogJ3VzZU1hcCcsXG4gIHZhbHVlOiAndmFsdWUnLFxuICB3aWR0aDogJ3dpZHRoJyxcbiAgd21vZGU6ICd3bW9kZScsXG4gIHdyYXA6ICd3cmFwJyxcblxuICAvLyBTVkdcbiAgYWJvdXQ6ICdhYm91dCcsXG4gIGFjY2VudGhlaWdodDogJ2FjY2VudEhlaWdodCcsXG4gICdhY2NlbnQtaGVpZ2h0JzogJ2FjY2VudEhlaWdodCcsXG4gIGFjY3VtdWxhdGU6ICdhY2N1bXVsYXRlJyxcbiAgYWRkaXRpdmU6ICdhZGRpdGl2ZScsXG4gIGFsaWdubWVudGJhc2VsaW5lOiAnYWxpZ25tZW50QmFzZWxpbmUnLFxuICAnYWxpZ25tZW50LWJhc2VsaW5lJzogJ2FsaWdubWVudEJhc2VsaW5lJyxcbiAgYWxsb3dyZW9yZGVyOiAnYWxsb3dSZW9yZGVyJyxcbiAgYWxwaGFiZXRpYzogJ2FscGhhYmV0aWMnLFxuICBhbXBsaXR1ZGU6ICdhbXBsaXR1ZGUnLFxuICBhcmFiaWNmb3JtOiAnYXJhYmljRm9ybScsXG4gICdhcmFiaWMtZm9ybSc6ICdhcmFiaWNGb3JtJyxcbiAgYXNjZW50OiAnYXNjZW50JyxcbiAgYXR0cmlidXRlbmFtZTogJ2F0dHJpYnV0ZU5hbWUnLFxuICBhdHRyaWJ1dGV0eXBlOiAnYXR0cmlidXRlVHlwZScsXG4gIGF1dG9yZXZlcnNlOiAnYXV0b1JldmVyc2UnLFxuICBhemltdXRoOiAnYXppbXV0aCcsXG4gIGJhc2VmcmVxdWVuY3k6ICdiYXNlRnJlcXVlbmN5JyxcbiAgYmFzZWxpbmVzaGlmdDogJ2Jhc2VsaW5lU2hpZnQnLFxuICAnYmFzZWxpbmUtc2hpZnQnOiAnYmFzZWxpbmVTaGlmdCcsXG4gIGJhc2Vwcm9maWxlOiAnYmFzZVByb2ZpbGUnLFxuICBiYm94OiAnYmJveCcsXG4gIGJlZ2luOiAnYmVnaW4nLFxuICBiaWFzOiAnYmlhcycsXG4gIGJ5OiAnYnknLFxuICBjYWxjbW9kZTogJ2NhbGNNb2RlJyxcbiAgY2FwaGVpZ2h0OiAnY2FwSGVpZ2h0JyxcbiAgJ2NhcC1oZWlnaHQnOiAnY2FwSGVpZ2h0JyxcbiAgY2xpcDogJ2NsaXAnLFxuICBjbGlwcGF0aDogJ2NsaXBQYXRoJyxcbiAgJ2NsaXAtcGF0aCc6ICdjbGlwUGF0aCcsXG4gIGNsaXBwYXRodW5pdHM6ICdjbGlwUGF0aFVuaXRzJyxcbiAgY2xpcHJ1bGU6ICdjbGlwUnVsZScsXG4gICdjbGlwLXJ1bGUnOiAnY2xpcFJ1bGUnLFxuICBjb2xvcjogJ2NvbG9yJyxcbiAgY29sb3JpbnRlcnBvbGF0aW9uOiAnY29sb3JJbnRlcnBvbGF0aW9uJyxcbiAgJ2NvbG9yLWludGVycG9sYXRpb24nOiAnY29sb3JJbnRlcnBvbGF0aW9uJyxcbiAgY29sb3JpbnRlcnBvbGF0aW9uZmlsdGVyczogJ2NvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnMnLFxuICAnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJzogJ2NvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnMnLFxuICBjb2xvcnByb2ZpbGU6ICdjb2xvclByb2ZpbGUnLFxuICAnY29sb3ItcHJvZmlsZSc6ICdjb2xvclByb2ZpbGUnLFxuICBjb2xvcnJlbmRlcmluZzogJ2NvbG9yUmVuZGVyaW5nJyxcbiAgJ2NvbG9yLXJlbmRlcmluZyc6ICdjb2xvclJlbmRlcmluZycsXG4gIGNvbnRlbnRzY3JpcHR0eXBlOiAnY29udGVudFNjcmlwdFR5cGUnLFxuICBjb250ZW50c3R5bGV0eXBlOiAnY29udGVudFN0eWxlVHlwZScsXG4gIGN1cnNvcjogJ2N1cnNvcicsXG4gIGN4OiAnY3gnLFxuICBjeTogJ2N5JyxcbiAgZDogJ2QnLFxuICBkYXRhdHlwZTogJ2RhdGF0eXBlJyxcbiAgZGVjZWxlcmF0ZTogJ2RlY2VsZXJhdGUnLFxuICBkZXNjZW50OiAnZGVzY2VudCcsXG4gIGRpZmZ1c2Vjb25zdGFudDogJ2RpZmZ1c2VDb25zdGFudCcsXG4gIGRpcmVjdGlvbjogJ2RpcmVjdGlvbicsXG4gIGRpc3BsYXk6ICdkaXNwbGF5JyxcbiAgZGl2aXNvcjogJ2Rpdmlzb3InLFxuICBkb21pbmFudGJhc2VsaW5lOiAnZG9taW5hbnRCYXNlbGluZScsXG4gICdkb21pbmFudC1iYXNlbGluZSc6ICdkb21pbmFudEJhc2VsaW5lJyxcbiAgZHVyOiAnZHVyJyxcbiAgZHg6ICdkeCcsXG4gIGR5OiAnZHknLFxuICBlZGdlbW9kZTogJ2VkZ2VNb2RlJyxcbiAgZWxldmF0aW9uOiAnZWxldmF0aW9uJyxcbiAgZW5hYmxlYmFja2dyb3VuZDogJ2VuYWJsZUJhY2tncm91bmQnLFxuICAnZW5hYmxlLWJhY2tncm91bmQnOiAnZW5hYmxlQmFja2dyb3VuZCcsXG4gIGVuZDogJ2VuZCcsXG4gIGV4cG9uZW50OiAnZXhwb25lbnQnLFxuICBleHRlcm5hbHJlc291cmNlc3JlcXVpcmVkOiAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsXG4gIGZpbGw6ICdmaWxsJyxcbiAgZmlsbG9wYWNpdHk6ICdmaWxsT3BhY2l0eScsXG4gICdmaWxsLW9wYWNpdHknOiAnZmlsbE9wYWNpdHknLFxuICBmaWxscnVsZTogJ2ZpbGxSdWxlJyxcbiAgJ2ZpbGwtcnVsZSc6ICdmaWxsUnVsZScsXG4gIGZpbHRlcjogJ2ZpbHRlcicsXG4gIGZpbHRlcnJlczogJ2ZpbHRlclJlcycsXG4gIGZpbHRlcnVuaXRzOiAnZmlsdGVyVW5pdHMnLFxuICBmbG9vZG9wYWNpdHk6ICdmbG9vZE9wYWNpdHknLFxuICAnZmxvb2Qtb3BhY2l0eSc6ICdmbG9vZE9wYWNpdHknLFxuICBmbG9vZGNvbG9yOiAnZmxvb2RDb2xvcicsXG4gICdmbG9vZC1jb2xvcic6ICdmbG9vZENvbG9yJyxcbiAgZm9jdXNhYmxlOiAnZm9jdXNhYmxlJyxcbiAgZm9udGZhbWlseTogJ2ZvbnRGYW1pbHknLFxuICAnZm9udC1mYW1pbHknOiAnZm9udEZhbWlseScsXG4gIGZvbnRzaXplOiAnZm9udFNpemUnLFxuICAnZm9udC1zaXplJzogJ2ZvbnRTaXplJyxcbiAgZm9udHNpemVhZGp1c3Q6ICdmb250U2l6ZUFkanVzdCcsXG4gICdmb250LXNpemUtYWRqdXN0JzogJ2ZvbnRTaXplQWRqdXN0JyxcbiAgZm9udHN0cmV0Y2g6ICdmb250U3RyZXRjaCcsXG4gICdmb250LXN0cmV0Y2gnOiAnZm9udFN0cmV0Y2gnLFxuICBmb250c3R5bGU6ICdmb250U3R5bGUnLFxuICAnZm9udC1zdHlsZSc6ICdmb250U3R5bGUnLFxuICBmb250dmFyaWFudDogJ2ZvbnRWYXJpYW50JyxcbiAgJ2ZvbnQtdmFyaWFudCc6ICdmb250VmFyaWFudCcsXG4gIGZvbnR3ZWlnaHQ6ICdmb250V2VpZ2h0JyxcbiAgJ2ZvbnQtd2VpZ2h0JzogJ2ZvbnRXZWlnaHQnLFxuICBmb3JtYXQ6ICdmb3JtYXQnLFxuICBmcm9tOiAnZnJvbScsXG4gIGZ4OiAnZngnLFxuICBmeTogJ2Z5JyxcbiAgZzE6ICdnMScsXG4gIGcyOiAnZzInLFxuICBnbHlwaG5hbWU6ICdnbHlwaE5hbWUnLFxuICAnZ2x5cGgtbmFtZSc6ICdnbHlwaE5hbWUnLFxuICBnbHlwaG9yaWVudGF0aW9uaG9yaXpvbnRhbDogJ2dseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsJyxcbiAgJ2dseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwnOiAnZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWwnLFxuICBnbHlwaG9yaWVudGF0aW9udmVydGljYWw6ICdnbHlwaE9yaWVudGF0aW9uVmVydGljYWwnLFxuICAnZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwnOiAnZ2x5cGhPcmllbnRhdGlvblZlcnRpY2FsJyxcbiAgZ2x5cGhyZWY6ICdnbHlwaFJlZicsXG4gIGdyYWRpZW50dHJhbnNmb3JtOiAnZ3JhZGllbnRUcmFuc2Zvcm0nLFxuICBncmFkaWVudHVuaXRzOiAnZ3JhZGllbnRVbml0cycsXG4gIGhhbmdpbmc6ICdoYW5naW5nJyxcbiAgaG9yaXphZHZ4OiAnaG9yaXpBZHZYJyxcbiAgJ2hvcml6LWFkdi14JzogJ2hvcml6QWR2WCcsXG4gIGhvcml6b3JpZ2lueDogJ2hvcml6T3JpZ2luWCcsXG4gICdob3Jpei1vcmlnaW4teCc6ICdob3Jpek9yaWdpblgnLFxuICBpZGVvZ3JhcGhpYzogJ2lkZW9ncmFwaGljJyxcbiAgaW1hZ2VyZW5kZXJpbmc6ICdpbWFnZVJlbmRlcmluZycsXG4gICdpbWFnZS1yZW5kZXJpbmcnOiAnaW1hZ2VSZW5kZXJpbmcnLFxuICBpbjI6ICdpbjInLFxuICBpbjogJ2luJyxcbiAgaW5saXN0OiAnaW5saXN0JyxcbiAgaW50ZXJjZXB0OiAnaW50ZXJjZXB0JyxcbiAgazE6ICdrMScsXG4gIGsyOiAnazInLFxuICBrMzogJ2szJyxcbiAgazQ6ICdrNCcsXG4gIGs6ICdrJyxcbiAga2VybmVsbWF0cml4OiAna2VybmVsTWF0cml4JyxcbiAga2VybmVsdW5pdGxlbmd0aDogJ2tlcm5lbFVuaXRMZW5ndGgnLFxuICBrZXJuaW5nOiAna2VybmluZycsXG4gIGtleXBvaW50czogJ2tleVBvaW50cycsXG4gIGtleXNwbGluZXM6ICdrZXlTcGxpbmVzJyxcbiAga2V5dGltZXM6ICdrZXlUaW1lcycsXG4gIGxlbmd0aGFkanVzdDogJ2xlbmd0aEFkanVzdCcsXG4gIGxldHRlcnNwYWNpbmc6ICdsZXR0ZXJTcGFjaW5nJyxcbiAgJ2xldHRlci1zcGFjaW5nJzogJ2xldHRlclNwYWNpbmcnLFxuICBsaWdodGluZ2NvbG9yOiAnbGlnaHRpbmdDb2xvcicsXG4gICdsaWdodGluZy1jb2xvcic6ICdsaWdodGluZ0NvbG9yJyxcbiAgbGltaXRpbmdjb25lYW5nbGU6ICdsaW1pdGluZ0NvbmVBbmdsZScsXG4gIGxvY2FsOiAnbG9jYWwnLFxuICBtYXJrZXJlbmQ6ICdtYXJrZXJFbmQnLFxuICAnbWFya2VyLWVuZCc6ICdtYXJrZXJFbmQnLFxuICBtYXJrZXJoZWlnaHQ6ICdtYXJrZXJIZWlnaHQnLFxuICBtYXJrZXJtaWQ6ICdtYXJrZXJNaWQnLFxuICAnbWFya2VyLW1pZCc6ICdtYXJrZXJNaWQnLFxuICBtYXJrZXJzdGFydDogJ21hcmtlclN0YXJ0JyxcbiAgJ21hcmtlci1zdGFydCc6ICdtYXJrZXJTdGFydCcsXG4gIG1hcmtlcnVuaXRzOiAnbWFya2VyVW5pdHMnLFxuICBtYXJrZXJ3aWR0aDogJ21hcmtlcldpZHRoJyxcbiAgbWFzazogJ21hc2snLFxuICBtYXNrY29udGVudHVuaXRzOiAnbWFza0NvbnRlbnRVbml0cycsXG4gIG1hc2t1bml0czogJ21hc2tVbml0cycsXG4gIG1hdGhlbWF0aWNhbDogJ21hdGhlbWF0aWNhbCcsXG4gIG1vZGU6ICdtb2RlJyxcbiAgbnVtb2N0YXZlczogJ251bU9jdGF2ZXMnLFxuICBvZmZzZXQ6ICdvZmZzZXQnLFxuICBvcGFjaXR5OiAnb3BhY2l0eScsXG4gIG9wZXJhdG9yOiAnb3BlcmF0b3InLFxuICBvcmRlcjogJ29yZGVyJyxcbiAgb3JpZW50OiAnb3JpZW50JyxcbiAgb3JpZW50YXRpb246ICdvcmllbnRhdGlvbicsXG4gIG9yaWdpbjogJ29yaWdpbicsXG4gIG92ZXJmbG93OiAnb3ZlcmZsb3cnLFxuICBvdmVybGluZXBvc2l0aW9uOiAnb3ZlcmxpbmVQb3NpdGlvbicsXG4gICdvdmVybGluZS1wb3NpdGlvbic6ICdvdmVybGluZVBvc2l0aW9uJyxcbiAgb3ZlcmxpbmV0aGlja25lc3M6ICdvdmVybGluZVRoaWNrbmVzcycsXG4gICdvdmVybGluZS10aGlja25lc3MnOiAnb3ZlcmxpbmVUaGlja25lc3MnLFxuICBwYWludG9yZGVyOiAncGFpbnRPcmRlcicsXG4gICdwYWludC1vcmRlcic6ICdwYWludE9yZGVyJyxcbiAgcGFub3NlMTogJ3Bhbm9zZTEnLFxuICAncGFub3NlLTEnOiAncGFub3NlMScsXG4gIHBhdGhsZW5ndGg6ICdwYXRoTGVuZ3RoJyxcbiAgcGF0dGVybmNvbnRlbnR1bml0czogJ3BhdHRlcm5Db250ZW50VW5pdHMnLFxuICBwYXR0ZXJudHJhbnNmb3JtOiAncGF0dGVyblRyYW5zZm9ybScsXG4gIHBhdHRlcm51bml0czogJ3BhdHRlcm5Vbml0cycsXG4gIHBvaW50ZXJldmVudHM6ICdwb2ludGVyRXZlbnRzJyxcbiAgJ3BvaW50ZXItZXZlbnRzJzogJ3BvaW50ZXJFdmVudHMnLFxuICBwb2ludHM6ICdwb2ludHMnLFxuICBwb2ludHNhdHg6ICdwb2ludHNBdFgnLFxuICBwb2ludHNhdHk6ICdwb2ludHNBdFknLFxuICBwb2ludHNhdHo6ICdwb2ludHNBdFonLFxuICBwcmVmaXg6ICdwcmVmaXgnLFxuICBwcmVzZXJ2ZWFscGhhOiAncHJlc2VydmVBbHBoYScsXG4gIHByZXNlcnZlYXNwZWN0cmF0aW86ICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJyxcbiAgcHJpbWl0aXZldW5pdHM6ICdwcmltaXRpdmVVbml0cycsXG4gIHByb3BlcnR5OiAncHJvcGVydHknLFxuICByOiAncicsXG4gIHJhZGl1czogJ3JhZGl1cycsXG4gIHJlZng6ICdyZWZYJyxcbiAgcmVmeTogJ3JlZlknLFxuICByZW5kZXJpbmdpbnRlbnQ6ICdyZW5kZXJpbmdJbnRlbnQnLFxuICAncmVuZGVyaW5nLWludGVudCc6ICdyZW5kZXJpbmdJbnRlbnQnLFxuICByZXBlYXRjb3VudDogJ3JlcGVhdENvdW50JyxcbiAgcmVwZWF0ZHVyOiAncmVwZWF0RHVyJyxcbiAgcmVxdWlyZWRleHRlbnNpb25zOiAncmVxdWlyZWRFeHRlbnNpb25zJyxcbiAgcmVxdWlyZWRmZWF0dXJlczogJ3JlcXVpcmVkRmVhdHVyZXMnLFxuICByZXNvdXJjZTogJ3Jlc291cmNlJyxcbiAgcmVzdGFydDogJ3Jlc3RhcnQnLFxuICByZXN1bHQ6ICdyZXN1bHQnLFxuICByZXN1bHRzOiAncmVzdWx0cycsXG4gIHJvdGF0ZTogJ3JvdGF0ZScsXG4gIHJ4OiAncngnLFxuICByeTogJ3J5JyxcbiAgc2NhbGU6ICdzY2FsZScsXG4gIHNlY3VyaXR5OiAnc2VjdXJpdHknLFxuICBzZWVkOiAnc2VlZCcsXG4gIHNoYXBlcmVuZGVyaW5nOiAnc2hhcGVSZW5kZXJpbmcnLFxuICAnc2hhcGUtcmVuZGVyaW5nJzogJ3NoYXBlUmVuZGVyaW5nJyxcbiAgc2xvcGU6ICdzbG9wZScsXG4gIHNwYWNpbmc6ICdzcGFjaW5nJyxcbiAgc3BlY3VsYXJjb25zdGFudDogJ3NwZWN1bGFyQ29uc3RhbnQnLFxuICBzcGVjdWxhcmV4cG9uZW50OiAnc3BlY3VsYXJFeHBvbmVudCcsXG4gIHNwZWVkOiAnc3BlZWQnLFxuICBzcHJlYWRtZXRob2Q6ICdzcHJlYWRNZXRob2QnLFxuICBzdGFydG9mZnNldDogJ3N0YXJ0T2Zmc2V0JyxcbiAgc3RkZGV2aWF0aW9uOiAnc3RkRGV2aWF0aW9uJyxcbiAgc3RlbWg6ICdzdGVtaCcsXG4gIHN0ZW12OiAnc3RlbXYnLFxuICBzdGl0Y2h0aWxlczogJ3N0aXRjaFRpbGVzJyxcbiAgc3RvcGNvbG9yOiAnc3RvcENvbG9yJyxcbiAgJ3N0b3AtY29sb3InOiAnc3RvcENvbG9yJyxcbiAgc3RvcG9wYWNpdHk6ICdzdG9wT3BhY2l0eScsXG4gICdzdG9wLW9wYWNpdHknOiAnc3RvcE9wYWNpdHknLFxuICBzdHJpa2V0aHJvdWdocG9zaXRpb246ICdzdHJpa2V0aHJvdWdoUG9zaXRpb24nLFxuICAnc3RyaWtldGhyb3VnaC1wb3NpdGlvbic6ICdzdHJpa2V0aHJvdWdoUG9zaXRpb24nLFxuICBzdHJpa2V0aHJvdWdodGhpY2tuZXNzOiAnc3RyaWtldGhyb3VnaFRoaWNrbmVzcycsXG4gICdzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyc6ICdzdHJpa2V0aHJvdWdoVGhpY2tuZXNzJyxcbiAgc3RyaW5nOiAnc3RyaW5nJyxcbiAgc3Ryb2tlOiAnc3Ryb2tlJyxcbiAgc3Ryb2tlZGFzaGFycmF5OiAnc3Ryb2tlRGFzaGFycmF5JyxcbiAgJ3N0cm9rZS1kYXNoYXJyYXknOiAnc3Ryb2tlRGFzaGFycmF5JyxcbiAgc3Ryb2tlZGFzaG9mZnNldDogJ3N0cm9rZURhc2hvZmZzZXQnLFxuICAnc3Ryb2tlLWRhc2hvZmZzZXQnOiAnc3Ryb2tlRGFzaG9mZnNldCcsXG4gIHN0cm9rZWxpbmVjYXA6ICdzdHJva2VMaW5lY2FwJyxcbiAgJ3N0cm9rZS1saW5lY2FwJzogJ3N0cm9rZUxpbmVjYXAnLFxuICBzdHJva2VsaW5lam9pbjogJ3N0cm9rZUxpbmVqb2luJyxcbiAgJ3N0cm9rZS1saW5lam9pbic6ICdzdHJva2VMaW5lam9pbicsXG4gIHN0cm9rZW1pdGVybGltaXQ6ICdzdHJva2VNaXRlcmxpbWl0JyxcbiAgJ3N0cm9rZS1taXRlcmxpbWl0JzogJ3N0cm9rZU1pdGVybGltaXQnLFxuICBzdHJva2V3aWR0aDogJ3N0cm9rZVdpZHRoJyxcbiAgJ3N0cm9rZS13aWR0aCc6ICdzdHJva2VXaWR0aCcsXG4gIHN0cm9rZW9wYWNpdHk6ICdzdHJva2VPcGFjaXR5JyxcbiAgJ3N0cm9rZS1vcGFjaXR5JzogJ3N0cm9rZU9wYWNpdHknLFxuICBzdXBwcmVzc2NvbnRlbnRlZGl0YWJsZXdhcm5pbmc6ICdzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcnLFxuICBzdXBwcmVzc2h5ZHJhdGlvbndhcm5pbmc6ICdzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcnLFxuICBzdXJmYWNlc2NhbGU6ICdzdXJmYWNlU2NhbGUnLFxuICBzeXN0ZW1sYW5ndWFnZTogJ3N5c3RlbUxhbmd1YWdlJyxcbiAgdGFibGV2YWx1ZXM6ICd0YWJsZVZhbHVlcycsXG4gIHRhcmdldHg6ICd0YXJnZXRYJyxcbiAgdGFyZ2V0eTogJ3RhcmdldFknLFxuICB0ZXh0YW5jaG9yOiAndGV4dEFuY2hvcicsXG4gICd0ZXh0LWFuY2hvcic6ICd0ZXh0QW5jaG9yJyxcbiAgdGV4dGRlY29yYXRpb246ICd0ZXh0RGVjb3JhdGlvbicsXG4gICd0ZXh0LWRlY29yYXRpb24nOiAndGV4dERlY29yYXRpb24nLFxuICB0ZXh0bGVuZ3RoOiAndGV4dExlbmd0aCcsXG4gIHRleHRyZW5kZXJpbmc6ICd0ZXh0UmVuZGVyaW5nJyxcbiAgJ3RleHQtcmVuZGVyaW5nJzogJ3RleHRSZW5kZXJpbmcnLFxuICB0bzogJ3RvJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNmb3JtJyxcbiAgdHlwZW9mOiAndHlwZW9mJyxcbiAgdTE6ICd1MScsXG4gIHUyOiAndTInLFxuICB1bmRlcmxpbmVwb3NpdGlvbjogJ3VuZGVybGluZVBvc2l0aW9uJyxcbiAgJ3VuZGVybGluZS1wb3NpdGlvbic6ICd1bmRlcmxpbmVQb3NpdGlvbicsXG4gIHVuZGVybGluZXRoaWNrbmVzczogJ3VuZGVybGluZVRoaWNrbmVzcycsXG4gICd1bmRlcmxpbmUtdGhpY2tuZXNzJzogJ3VuZGVybGluZVRoaWNrbmVzcycsXG4gIHVuaWNvZGU6ICd1bmljb2RlJyxcbiAgdW5pY29kZWJpZGk6ICd1bmljb2RlQmlkaScsXG4gICd1bmljb2RlLWJpZGknOiAndW5pY29kZUJpZGknLFxuICB1bmljb2RlcmFuZ2U6ICd1bmljb2RlUmFuZ2UnLFxuICAndW5pY29kZS1yYW5nZSc6ICd1bmljb2RlUmFuZ2UnLFxuICB1bml0c3BlcmVtOiAndW5pdHNQZXJFbScsXG4gICd1bml0cy1wZXItZW0nOiAndW5pdHNQZXJFbScsXG4gIHVuc2VsZWN0YWJsZTogJ3Vuc2VsZWN0YWJsZScsXG4gIHZhbHBoYWJldGljOiAndkFscGhhYmV0aWMnLFxuICAndi1hbHBoYWJldGljJzogJ3ZBbHBoYWJldGljJyxcbiAgdmFsdWVzOiAndmFsdWVzJyxcbiAgdmVjdG9yZWZmZWN0OiAndmVjdG9yRWZmZWN0JyxcbiAgJ3ZlY3Rvci1lZmZlY3QnOiAndmVjdG9yRWZmZWN0JyxcbiAgdmVyc2lvbjogJ3ZlcnNpb24nLFxuICB2ZXJ0YWR2eTogJ3ZlcnRBZHZZJyxcbiAgJ3ZlcnQtYWR2LXknOiAndmVydEFkdlknLFxuICB2ZXJ0b3JpZ2lueDogJ3ZlcnRPcmlnaW5YJyxcbiAgJ3ZlcnQtb3JpZ2luLXgnOiAndmVydE9yaWdpblgnLFxuICB2ZXJ0b3JpZ2lueTogJ3ZlcnRPcmlnaW5ZJyxcbiAgJ3ZlcnQtb3JpZ2luLXknOiAndmVydE9yaWdpblknLFxuICB2aGFuZ2luZzogJ3ZIYW5naW5nJyxcbiAgJ3YtaGFuZ2luZyc6ICd2SGFuZ2luZycsXG4gIHZpZGVvZ3JhcGhpYzogJ3ZJZGVvZ3JhcGhpYycsXG4gICd2LWlkZW9ncmFwaGljJzogJ3ZJZGVvZ3JhcGhpYycsXG4gIHZpZXdib3g6ICd2aWV3Qm94JyxcbiAgdmlld3RhcmdldDogJ3ZpZXdUYXJnZXQnLFxuICB2aXNpYmlsaXR5OiAndmlzaWJpbGl0eScsXG4gIHZtYXRoZW1hdGljYWw6ICd2TWF0aGVtYXRpY2FsJyxcbiAgJ3YtbWF0aGVtYXRpY2FsJzogJ3ZNYXRoZW1hdGljYWwnLFxuICB2b2NhYjogJ3ZvY2FiJyxcbiAgd2lkdGhzOiAnd2lkdGhzJyxcbiAgd29yZHNwYWNpbmc6ICd3b3JkU3BhY2luZycsXG4gICd3b3JkLXNwYWNpbmcnOiAnd29yZFNwYWNpbmcnLFxuICB3cml0aW5nbW9kZTogJ3dyaXRpbmdNb2RlJyxcbiAgJ3dyaXRpbmctbW9kZSc6ICd3cml0aW5nTW9kZScsXG4gIHgxOiAneDEnLFxuICB4MjogJ3gyJyxcbiAgeDogJ3gnLFxuICB4Y2hhbm5lbHNlbGVjdG9yOiAneENoYW5uZWxTZWxlY3RvcicsXG4gIHhoZWlnaHQ6ICd4SGVpZ2h0JyxcbiAgJ3gtaGVpZ2h0JzogJ3hIZWlnaHQnLFxuICB4bGlua2FjdHVhdGU6ICd4bGlua0FjdHVhdGUnLFxuICAneGxpbms6YWN0dWF0ZSc6ICd4bGlua0FjdHVhdGUnLFxuICB4bGlua2FyY3JvbGU6ICd4bGlua0FyY3JvbGUnLFxuICAneGxpbms6YXJjcm9sZSc6ICd4bGlua0FyY3JvbGUnLFxuICB4bGlua2hyZWY6ICd4bGlua0hyZWYnLFxuICAneGxpbms6aHJlZic6ICd4bGlua0hyZWYnLFxuICB4bGlua3JvbGU6ICd4bGlua1JvbGUnLFxuICAneGxpbms6cm9sZSc6ICd4bGlua1JvbGUnLFxuICB4bGlua3Nob3c6ICd4bGlua1Nob3cnLFxuICAneGxpbms6c2hvdyc6ICd4bGlua1Nob3cnLFxuICB4bGlua3RpdGxlOiAneGxpbmtUaXRsZScsXG4gICd4bGluazp0aXRsZSc6ICd4bGlua1RpdGxlJyxcbiAgeGxpbmt0eXBlOiAneGxpbmtUeXBlJyxcbiAgJ3hsaW5rOnR5cGUnOiAneGxpbmtUeXBlJyxcbiAgeG1sYmFzZTogJ3htbEJhc2UnLFxuICAneG1sOmJhc2UnOiAneG1sQmFzZScsXG4gIHhtbGxhbmc6ICd4bWxMYW5nJyxcbiAgJ3htbDpsYW5nJzogJ3htbExhbmcnLFxuICB4bWxuczogJ3htbG5zJyxcbiAgJ3htbDpzcGFjZSc6ICd4bWxTcGFjZScsXG4gIHhtbG5zeGxpbms6ICd4bWxuc1hsaW5rJyxcbiAgJ3htbG5zOnhsaW5rJzogJ3htbG5zWGxpbmsnLFxuICB4bWxzcGFjZTogJ3htbFNwYWNlJyxcbiAgeTE6ICd5MScsXG4gIHkyOiAneTInLFxuICB5OiAneScsXG4gIHljaGFubmVsc2VsZWN0b3I6ICd5Q2hhbm5lbFNlbGVjdG9yJyxcbiAgejogJ3onLFxuICB6b29tYW5kcGFuOiAnem9vbUFuZFBhbidcbn07XG5cbnZhciBhcmlhUHJvcGVydGllcyA9IHtcbiAgJ2FyaWEtY3VycmVudCc6IDAsIC8vIHN0YXRlXG4gICdhcmlhLWRldGFpbHMnOiAwLFxuICAnYXJpYS1kaXNhYmxlZCc6IDAsIC8vIHN0YXRlXG4gICdhcmlhLWhpZGRlbic6IDAsIC8vIHN0YXRlXG4gICdhcmlhLWludmFsaWQnOiAwLCAvLyBzdGF0ZVxuICAnYXJpYS1rZXlzaG9ydGN1dHMnOiAwLFxuICAnYXJpYS1sYWJlbCc6IDAsXG4gICdhcmlhLXJvbGVkZXNjcmlwdGlvbic6IDAsXG4gIC8vIFdpZGdldCBBdHRyaWJ1dGVzXG4gICdhcmlhLWF1dG9jb21wbGV0ZSc6IDAsXG4gICdhcmlhLWNoZWNrZWQnOiAwLFxuICAnYXJpYS1leHBhbmRlZCc6IDAsXG4gICdhcmlhLWhhc3BvcHVwJzogMCxcbiAgJ2FyaWEtbGV2ZWwnOiAwLFxuICAnYXJpYS1tb2RhbCc6IDAsXG4gICdhcmlhLW11bHRpbGluZSc6IDAsXG4gICdhcmlhLW11bHRpc2VsZWN0YWJsZSc6IDAsXG4gICdhcmlhLW9yaWVudGF0aW9uJzogMCxcbiAgJ2FyaWEtcGxhY2Vob2xkZXInOiAwLFxuICAnYXJpYS1wcmVzc2VkJzogMCxcbiAgJ2FyaWEtcmVhZG9ubHknOiAwLFxuICAnYXJpYS1yZXF1aXJlZCc6IDAsXG4gICdhcmlhLXNlbGVjdGVkJzogMCxcbiAgJ2FyaWEtc29ydCc6IDAsXG4gICdhcmlhLXZhbHVlbWF4JzogMCxcbiAgJ2FyaWEtdmFsdWVtaW4nOiAwLFxuICAnYXJpYS12YWx1ZW5vdyc6IDAsXG4gICdhcmlhLXZhbHVldGV4dCc6IDAsXG4gIC8vIExpdmUgUmVnaW9uIEF0dHJpYnV0ZXNcbiAgJ2FyaWEtYXRvbWljJzogMCxcbiAgJ2FyaWEtYnVzeSc6IDAsXG4gICdhcmlhLWxpdmUnOiAwLFxuICAnYXJpYS1yZWxldmFudCc6IDAsXG4gIC8vIERyYWctYW5kLURyb3AgQXR0cmlidXRlc1xuICAnYXJpYS1kcm9wZWZmZWN0JzogMCxcbiAgJ2FyaWEtZ3JhYmJlZCc6IDAsXG4gIC8vIFJlbGF0aW9uc2hpcCBBdHRyaWJ1dGVzXG4gICdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnOiAwLFxuICAnYXJpYS1jb2xjb3VudCc6IDAsXG4gICdhcmlhLWNvbGluZGV4JzogMCxcbiAgJ2FyaWEtY29sc3Bhbic6IDAsXG4gICdhcmlhLWNvbnRyb2xzJzogMCxcbiAgJ2FyaWEtZGVzY3JpYmVkYnknOiAwLFxuICAnYXJpYS1lcnJvcm1lc3NhZ2UnOiAwLFxuICAnYXJpYS1mbG93dG8nOiAwLFxuICAnYXJpYS1sYWJlbGxlZGJ5JzogMCxcbiAgJ2FyaWEtb3ducyc6IDAsXG4gICdhcmlhLXBvc2luc2V0JzogMCxcbiAgJ2FyaWEtcm93Y291bnQnOiAwLFxuICAnYXJpYS1yb3dpbmRleCc6IDAsXG4gICdhcmlhLXJvd3NwYW4nOiAwLFxuICAnYXJpYS1zZXRzaXplJzogMFxufTtcblxudmFyIHdhcm5lZFByb3BlcnRpZXMgPSB7fTtcbnZhciByQVJJQSA9IG5ldyBSZWdFeHAoJ14oYXJpYSktWycgKyBBVFRSSUJVVEVfTkFNRV9DSEFSICsgJ10qJCcpO1xudmFyIHJBUklBQ2FtZWwgPSBuZXcgUmVnRXhwKCdeKGFyaWEpW0EtWl1bJyArIEFUVFJJQlVURV9OQU1FX0NIQVIgKyAnXSokJyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSQyID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0eSh0YWdOYW1lLCBuYW1lKSB7XG4gIGlmIChoYXNPd25Qcm9wZXJ0eSQyLmNhbGwod2FybmVkUHJvcGVydGllcywgbmFtZSkgJiYgd2FybmVkUHJvcGVydGllc1tuYW1lXSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHJBUklBQ2FtZWwudGVzdChuYW1lKSkge1xuICAgIHZhciBhcmlhTmFtZSA9ICdhcmlhLScgKyBuYW1lLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIGNvcnJlY3ROYW1lID0gYXJpYVByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoYXJpYU5hbWUpID8gYXJpYU5hbWUgOiBudWxsO1xuXG4gICAgLy8gSWYgdGhpcyBpcyBhbiBhcmlhLSogYXR0cmlidXRlLCBidXQgaXMgbm90IGxpc3RlZCBpbiB0aGUga25vd24gRE9NXG4gICAgLy8gRE9NIHByb3BlcnRpZXMsIHRoZW4gaXQgaXMgYW4gaW52YWxpZCBhcmlhLSogYXR0cmlidXRlLlxuICAgIGlmIChjb3JyZWN0TmFtZSA9PSBudWxsKSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdJbnZhbGlkIEFSSUEgYXR0cmlidXRlIGAlc2AuIEFSSUEgYXR0cmlidXRlcyBmb2xsb3cgdGhlIHBhdHRlcm4gYXJpYS0qIGFuZCBtdXN0IGJlIGxvd2VyY2FzZS4nLCBuYW1lKTtcbiAgICAgIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIGFyaWEtKiBhdHRyaWJ1dGVzIHNob3VsZCBiZSBsb3dlcmNhc2U7IHN1Z2dlc3QgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uLlxuICAgIGlmIChuYW1lICE9PSBjb3JyZWN0TmFtZSkge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnSW52YWxpZCBBUklBIGF0dHJpYnV0ZSBgJXNgLiBEaWQgeW91IG1lYW4gYCVzYD8nLCBuYW1lLCBjb3JyZWN0TmFtZSk7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChyQVJJQS50ZXN0KG5hbWUpKSB7XG4gICAgdmFyIGxvd2VyQ2FzZWROYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBzdGFuZGFyZE5hbWUgPSBhcmlhUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VkTmFtZSkgPyBsb3dlckNhc2VkTmFtZSA6IG51bGw7XG5cbiAgICAvLyBJZiB0aGlzIGlzIGFuIGFyaWEtKiBhdHRyaWJ1dGUsIGJ1dCBpcyBub3QgbGlzdGVkIGluIHRoZSBrbm93biBET01cbiAgICAvLyBET00gcHJvcGVydGllcywgdGhlbiBpdCBpcyBhbiBpbnZhbGlkIGFyaWEtKiBhdHRyaWJ1dGUuXG4gICAgaWYgKHN0YW5kYXJkTmFtZSA9PSBudWxsKSB7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gYXJpYS0qIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGxvd2VyY2FzZTsgc3VnZ2VzdCB0aGUgbG93ZXJjYXNlIHZlcnNpb24uXG4gICAgaWYgKG5hbWUgIT09IHN0YW5kYXJkTmFtZSkge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnVW5rbm93biBBUklBIGF0dHJpYnV0ZSBgJXNgLiBEaWQgeW91IG1lYW4gYCVzYD8nLCBuYW1lLCBzdGFuZGFyZE5hbWUpO1xuICAgICAgd2FybmVkUHJvcGVydGllc1tuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gd2FybkludmFsaWRBUklBUHJvcHModHlwZSwgcHJvcHMpIHtcbiAgdmFyIGludmFsaWRQcm9wcyA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHZhciBpc1ZhbGlkID0gdmFsaWRhdGVQcm9wZXJ0eSh0eXBlLCBrZXkpO1xuICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgaW52YWxpZFByb3BzLnB1c2goa2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgdW5rbm93blByb3BTdHJpbmcgPSBpbnZhbGlkUHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgcmV0dXJuICdgJyArIHByb3AgKyAnYCc7XG4gIH0pLmpvaW4oJywgJyk7XG5cbiAgaWYgKGludmFsaWRQcm9wcy5sZW5ndGggPT09IDEpIHtcbiAgICB3YXJuaW5nJDEoZmFsc2UsICdJbnZhbGlkIGFyaWEgcHJvcCAlcyBvbiA8JXM+IHRhZy4gJyArICdGb3IgZGV0YWlscywgc2VlIGh0dHBzOi8vZmIubWUvaW52YWxpZC1hcmlhLXByb3AnLCB1bmtub3duUHJvcFN0cmluZywgdHlwZSk7XG4gIH0gZWxzZSBpZiAoaW52YWxpZFByb3BzLmxlbmd0aCA+IDEpIHtcbiAgICB3YXJuaW5nJDEoZmFsc2UsICdJbnZhbGlkIGFyaWEgcHJvcHMgJXMgb24gPCVzPiB0YWcuICcgKyAnRm9yIGRldGFpbHMsIHNlZSBodHRwczovL2ZiLm1lL2ludmFsaWQtYXJpYS1wcm9wJywgdW5rbm93blByb3BTdHJpbmcsIHR5cGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydGllcyh0eXBlLCBwcm9wcykge1xuICBpZiAoaXNDdXN0b21Db21wb25lbnQodHlwZSwgcHJvcHMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdhcm5JbnZhbGlkQVJJQVByb3BzKHR5cGUsIHByb3BzKTtcbn1cblxudmFyIGRpZFdhcm5WYWx1ZU51bGwgPSBmYWxzZTtcblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0aWVzJDEodHlwZSwgcHJvcHMpIHtcbiAgaWYgKHR5cGUgIT09ICdpbnB1dCcgJiYgdHlwZSAhPT0gJ3RleHRhcmVhJyAmJiB0eXBlICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwcm9wcyAhPSBudWxsICYmIHByb3BzLnZhbHVlID09PSBudWxsICYmICFkaWRXYXJuVmFsdWVOdWxsKSB7XG4gICAgZGlkV2FyblZhbHVlTnVsbCA9IHRydWU7XG4gICAgaWYgKHR5cGUgPT09ICdzZWxlY3QnICYmIHByb3BzLm11bHRpcGxlKSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdgdmFsdWVgIHByb3Agb24gYCVzYCBzaG91bGQgbm90IGJlIG51bGwuICcgKyAnQ29uc2lkZXIgdXNpbmcgYW4gZW1wdHkgYXJyYXkgd2hlbiBgbXVsdGlwbGVgIGlzIHNldCB0byBgdHJ1ZWAgJyArICd0byBjbGVhciB0aGUgY29tcG9uZW50IG9yIGB1bmRlZmluZWRgIGZvciB1bmNvbnRyb2xsZWQgY29tcG9uZW50cy4nLCB0eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnYHZhbHVlYCBwcm9wIG9uIGAlc2Agc2hvdWxkIG5vdCBiZSBudWxsLiAnICsgJ0NvbnNpZGVyIHVzaW5nIGFuIGVtcHR5IHN0cmluZyB0byBjbGVhciB0aGUgY29tcG9uZW50IG9yIGB1bmRlZmluZWRgICcgKyAnZm9yIHVuY29udHJvbGxlZCBjb21wb25lbnRzLicsIHR5cGUpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdmFsaWRhdGVQcm9wZXJ0eSQxID0gZnVuY3Rpb24gKCkge307XG5cbntcbiAgdmFyIHdhcm5lZFByb3BlcnRpZXMkMSA9IHt9O1xuICB2YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIEVWRU5UX05BTUVfUkVHRVggPSAvXm9uLi87XG4gIHZhciBJTlZBTElEX0VWRU5UX05BTUVfUkVHRVggPSAvXm9uW15BLVpdLztcbiAgdmFyIHJBUklBJDEgPSBuZXcgUmVnRXhwKCdeKGFyaWEpLVsnICsgQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKTtcbiAgdmFyIHJBUklBQ2FtZWwkMSA9IG5ldyBSZWdFeHAoJ14oYXJpYSlbQS1aXVsnICsgQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKTtcblxuICB2YWxpZGF0ZVByb3BlcnR5JDEgPSBmdW5jdGlvbiAodGFnTmFtZSwgbmFtZSwgdmFsdWUsIGNhblVzZUV2ZW50U3lzdGVtKSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKHdhcm5lZFByb3BlcnRpZXMkMSwgbmFtZSkgJiYgd2FybmVkUHJvcGVydGllcyQxW25hbWVdKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGxvd2VyQ2FzZWROYW1lID09PSAnb25mb2N1c2luJyB8fCBsb3dlckNhc2VkTmFtZSA9PT0gJ29uZm9jdXNvdXQnKSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdSZWFjdCB1c2VzIG9uRm9jdXMgYW5kIG9uQmx1ciBpbnN0ZWFkIG9mIG9uRm9jdXNJbiBhbmQgb25Gb2N1c091dC4gJyArICdBbGwgUmVhY3QgZXZlbnRzIGFyZSBub3JtYWxpemVkIHRvIGJ1YmJsZSwgc28gb25Gb2N1c0luIGFuZCBvbkZvY3VzT3V0ICcgKyAnYXJlIG5vdCBuZWVkZWQvc3VwcG9ydGVkIGJ5IFJlYWN0LicpO1xuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIFdlIGNhbid0IHJlbHkgb24gdGhlIGV2ZW50IHN5c3RlbSBiZWluZyBpbmplY3RlZCBvbiB0aGUgc2VydmVyLlxuICAgIGlmIChjYW5Vc2VFdmVudFN5c3RlbSkge1xuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPSBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZWROYW1lKSA/IHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXNbbG93ZXJDYXNlZE5hbWVdIDogbnVsbDtcbiAgICAgIGlmIChyZWdpc3RyYXRpb25OYW1lICE9IG51bGwpIHtcbiAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnSW52YWxpZCBldmVudCBoYW5kbGVyIHByb3BlcnR5IGAlc2AuIERpZCB5b3UgbWVhbiBgJXNgPycsIG5hbWUsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChFVkVOVF9OQU1FX1JFR0VYLnRlc3QobmFtZSkpIHtcbiAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnVW5rbm93biBldmVudCBoYW5kbGVyIHByb3BlcnR5IGAlc2AuIEl0IHdpbGwgYmUgaWdub3JlZC4nLCBuYW1lKTtcbiAgICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChFVkVOVF9OQU1FX1JFR0VYLnRlc3QobmFtZSkpIHtcbiAgICAgIC8vIElmIG5vIGV2ZW50IHBsdWdpbnMgaGF2ZSBiZWVuIGluamVjdGVkLCB3ZSBhcmUgaW4gYSBzZXJ2ZXIgZW52aXJvbm1lbnQuXG4gICAgICAvLyBTbyB3ZSBjYW4ndCB0ZWxsIGlmIHRoZSBldmVudCBuYW1lIGlzIGNvcnJlY3QgZm9yIHN1cmUsIGJ1dCB3ZSBjYW4gZmlsdGVyXG4gICAgICAvLyBvdXQga25vd24gYmFkIG9uZXMgbGlrZSBgb25jbGlja2AuIFdlIGNhbid0IHN1Z2dlc3QgYSBzcGVjaWZpYyByZXBsYWNlbWVudCB0aG91Z2guXG4gICAgICBpZiAoSU5WQUxJRF9FVkVOVF9OQU1FX1JFR0VYLnRlc3QobmFtZSkpIHtcbiAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnSW52YWxpZCBldmVudCBoYW5kbGVyIHByb3BlcnR5IGAlc2AuICcgKyAnUmVhY3QgZXZlbnRzIHVzZSB0aGUgY2FtZWxDYXNlIG5hbWluZyBjb252ZW50aW9uLCBmb3IgZXhhbXBsZSBgb25DbGlja2AuJywgbmFtZSk7XG4gICAgICB9XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gTGV0IHRoZSBBUklBIGF0dHJpYnV0ZSBob29rIHZhbGlkYXRlIEFSSUEgYXR0cmlidXRlc1xuICAgIGlmIChyQVJJQSQxLnRlc3QobmFtZSkgfHwgckFSSUFDYW1lbCQxLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChsb3dlckNhc2VkTmFtZSA9PT0gJ2lubmVyaHRtbCcpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJ0RpcmVjdGx5IHNldHRpbmcgcHJvcGVydHkgYGlubmVySFRNTGAgaXMgbm90IHBlcm1pdHRlZC4gJyArICdGb3IgbW9yZSBpbmZvcm1hdGlvbiwgbG9va3VwIGRvY3VtZW50YXRpb24gb24gYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nKTtcbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAobG93ZXJDYXNlZE5hbWUgPT09ICdhcmlhJykge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnVGhlIGBhcmlhYCBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgZm9yIGZ1dHVyZSB1c2UgaW4gUmVhY3QuICcgKyAnUGFzcyBpbmRpdmlkdWFsIGBhcmlhLWAgYXR0cmlidXRlcyBpbnN0ZWFkLicpO1xuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChsb3dlckNhc2VkTmFtZSA9PT0gJ2lzJyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1JlY2VpdmVkIGEgYCVzYCBmb3IgYSBzdHJpbmcgYXR0cmlidXRlIGBpc2AuIElmIHRoaXMgaXMgZXhwZWN0ZWQsIGNhc3QgJyArICd0aGUgdmFsdWUgdG8gYSBzdHJpbmcuJywgdHlwZW9mIHZhbHVlKTtcbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWx1ZSkpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1JlY2VpdmVkIE5hTiBmb3IgdGhlIGAlc2AgYXR0cmlidXRlLiBJZiB0aGlzIGlzIGV4cGVjdGVkLCBjYXN0ICcgKyAndGhlIHZhbHVlIHRvIGEgc3RyaW5nLicsIG5hbWUpO1xuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBwcm9wZXJ0eUluZm8gPSBnZXRQcm9wZXJ0eUluZm8obmFtZSk7XG4gICAgdmFyIGlzUmVzZXJ2ZWQgPSBwcm9wZXJ0eUluZm8gIT09IG51bGwgJiYgcHJvcGVydHlJbmZvLnR5cGUgPT09IFJFU0VSVkVEO1xuXG4gICAgLy8gS25vd24gYXR0cmlidXRlcyBzaG91bGQgbWF0Y2ggdGhlIGNhc2luZyBzcGVjaWZpZWQgaW4gdGhlIHByb3BlcnR5IGNvbmZpZy5cbiAgICBpZiAocG9zc2libGVTdGFuZGFyZE5hbWVzLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZWROYW1lKSkge1xuICAgICAgdmFyIHN0YW5kYXJkTmFtZSA9IHBvc3NpYmxlU3RhbmRhcmROYW1lc1tsb3dlckNhc2VkTmFtZV07XG4gICAgICBpZiAoc3RhbmRhcmROYW1lICE9PSBuYW1lKSB7XG4gICAgICAgIHdhcm5pbmckMShmYWxzZSwgJ0ludmFsaWQgRE9NIHByb3BlcnR5IGAlc2AuIERpZCB5b3UgbWVhbiBgJXNgPycsIG5hbWUsIHN0YW5kYXJkTmFtZSk7XG4gICAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQgJiYgbmFtZSAhPT0gbG93ZXJDYXNlZE5hbWUpIHtcbiAgICAgIC8vIFVua25vd24gYXR0cmlidXRlcyBzaG91bGQgaGF2ZSBsb3dlcmNhc2UgY2FzaW5nIHNpbmNlIHRoYXQncyBob3cgdGhleVxuICAgICAgLy8gd2lsbCBiZSBjYXNlZCBhbnl3YXkgd2l0aCBzZXJ2ZXIgcmVuZGVyaW5nLlxuICAgICAgd2FybmluZyQxKGZhbHNlLCAnUmVhY3QgZG9lcyBub3QgcmVjb2duaXplIHRoZSBgJXNgIHByb3Agb24gYSBET00gZWxlbWVudC4gSWYgeW91ICcgKyAnaW50ZW50aW9uYWxseSB3YW50IGl0IHRvIGFwcGVhciBpbiB0aGUgRE9NIGFzIGEgY3VzdG9tICcgKyAnYXR0cmlidXRlLCBzcGVsbCBpdCBhcyBsb3dlcmNhc2UgYCVzYCBpbnN0ZWFkLiAnICsgJ0lmIHlvdSBhY2NpZGVudGFsbHkgcGFzc2VkIGl0IGZyb20gYSBwYXJlbnQgY29tcG9uZW50LCByZW1vdmUgJyArICdpdCBmcm9tIHRoZSBET00gZWxlbWVudC4nLCBuYW1lLCBsb3dlckNhc2VkTmFtZSk7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nICYmIHNob3VsZFJlbW92ZUF0dHJpYnV0ZVdpdGhXYXJuaW5nKG5hbWUsIHZhbHVlLCBwcm9wZXJ0eUluZm8sIGZhbHNlKSkge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHdhcm5pbmckMShmYWxzZSwgJ1JlY2VpdmVkIGAlc2AgZm9yIGEgbm9uLWJvb2xlYW4gYXR0cmlidXRlIGAlc2AuXFxuXFxuJyArICdJZiB5b3Ugd2FudCB0byB3cml0ZSBpdCB0byB0aGUgRE9NLCBwYXNzIGEgc3RyaW5nIGluc3RlYWQ6ICcgKyAnJXM9XCIlc1wiIG9yICVzPXt2YWx1ZS50b1N0cmluZygpfS4nLCB2YWx1ZSwgbmFtZSwgbmFtZSwgdmFsdWUsIG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnUmVjZWl2ZWQgYCVzYCBmb3IgYSBub24tYm9vbGVhbiBhdHRyaWJ1dGUgYCVzYC5cXG5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIHdyaXRlIGl0IHRvIHRoZSBET00sIHBhc3MgYSBzdHJpbmcgaW5zdGVhZDogJyArICclcz1cIiVzXCIgb3IgJXM9e3ZhbHVlLnRvU3RyaW5nKCl9LlxcblxcbicgKyAnSWYgeW91IHVzZWQgdG8gY29uZGl0aW9uYWxseSBvbWl0IGl0IHdpdGggJXM9e2NvbmRpdGlvbiAmJiB2YWx1ZX0sICcgKyAncGFzcyAlcz17Y29uZGl0aW9uID8gdmFsdWUgOiB1bmRlZmluZWR9IGluc3RlYWQuJywgdmFsdWUsIG5hbWUsIG5hbWUsIHZhbHVlLCBuYW1lLCBuYW1lLCBuYW1lKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBOb3cgdGhhdCB3ZSd2ZSB2YWxpZGF0ZWQgY2FzaW5nLCBkbyBub3QgdmFsaWRhdGVcbiAgICAvLyBkYXRhIHR5cGVzIGZvciByZXNlcnZlZCBwcm9wc1xuICAgIGlmIChpc1Jlc2VydmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBXYXJuIHdoZW4gYSBrbm93biBhdHRyaWJ1dGUgaXMgYSBiYWQgdHlwZVxuICAgIGlmIChzaG91bGRSZW1vdmVBdHRyaWJ1dGVXaXRoV2FybmluZyhuYW1lLCB2YWx1ZSwgcHJvcGVydHlJbmZvLCBmYWxzZSkpIHtcbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gV2FybiB3aGVuIHBhc3NpbmcgdGhlIHN0cmluZ3MgJ2ZhbHNlJyBvciAndHJ1ZScgaW50byBhIGJvb2xlYW4gcHJvcFxuICAgIGlmICgodmFsdWUgPT09ICdmYWxzZScgfHwgdmFsdWUgPT09ICd0cnVlJykgJiYgcHJvcGVydHlJbmZvICE9PSBudWxsICYmIHByb3BlcnR5SW5mby50eXBlID09PSBCT09MRUFOKSB7XG4gICAgICB3YXJuaW5nJDEoZmFsc2UsICdSZWNlaXZlZCB0aGUgc3RyaW5nIGAlc2AgZm9yIHRoZSBib29sZWFuIGF0dHJpYnV0ZSBgJXNgLiAnICsgJyVzICcgKyAnRGlkIHlvdSBtZWFuICVzPXslc30/JywgdmFsdWUsIG5hbWUsIHZhbHVlID09PSAnZmFsc2UnID8gJ1RoZSBicm93c2VyIHdpbGwgaW50ZXJwcmV0IGl0IGFzIGEgdHJ1dGh5IHZhbHVlLicgOiAnQWx0aG91Z2ggdGhpcyB3b3JrcywgaXQgd2lsbCBub3Qgd29yayBhcyBleHBlY3RlZCBpZiB5b3UgcGFzcyB0aGUgc3RyaW5nIFwiZmFsc2VcIi4nLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59XG5cbnZhciB3YXJuVW5rbm93blByb3BlcnRpZXMgPSBmdW5jdGlvbiAodHlwZSwgcHJvcHMsIGNhblVzZUV2ZW50U3lzdGVtKSB7XG4gIHZhciB1bmtub3duUHJvcHMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgdmFyIGlzVmFsaWQgPSB2YWxpZGF0ZVByb3BlcnR5JDEodHlwZSwga2V5LCBwcm9wc1trZXldLCBjYW5Vc2VFdmVudFN5c3RlbSk7XG4gICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICB1bmtub3duUHJvcHMucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciB1bmtub3duUHJvcFN0cmluZyA9IHVua25vd25Qcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICByZXR1cm4gJ2AnICsgcHJvcCArICdgJztcbiAgfSkuam9pbignLCAnKTtcbiAgaWYgKHVua25vd25Qcm9wcy5sZW5ndGggPT09IDEpIHtcbiAgICB3YXJuaW5nJDEoZmFsc2UsICdJbnZhbGlkIHZhbHVlIGZvciBwcm9wICVzIG9uIDwlcz4gdGFnLiBFaXRoZXIgcmVtb3ZlIGl0IGZyb20gdGhlIGVsZW1lbnQsICcgKyAnb3IgcGFzcyBhIHN0cmluZyBvciBudW1iZXIgdmFsdWUgdG8ga2VlcCBpdCBpbiB0aGUgRE9NLiAnICsgJ0ZvciBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1hdHRyaWJ1dGUtYmVoYXZpb3InLCB1bmtub3duUHJvcFN0cmluZywgdHlwZSk7XG4gIH0gZWxzZSBpZiAodW5rbm93blByb3BzLmxlbmd0aCA+IDEpIHtcbiAgICB3YXJuaW5nJDEoZmFsc2UsICdJbnZhbGlkIHZhbHVlcyBmb3IgcHJvcHMgJXMgb24gPCVzPiB0YWcuIEVpdGhlciByZW1vdmUgdGhlbSBmcm9tIHRoZSBlbGVtZW50LCAnICsgJ29yIHBhc3MgYSBzdHJpbmcgb3IgbnVtYmVyIHZhbHVlIHRvIGtlZXAgdGhlbSBpbiB0aGUgRE9NLiAnICsgJ0ZvciBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1hdHRyaWJ1dGUtYmVoYXZpb3InLCB1bmtub3duUHJvcFN0cmluZywgdHlwZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydGllcyQyKHR5cGUsIHByb3BzLCBjYW5Vc2VFdmVudFN5c3RlbSkge1xuICBpZiAoaXNDdXN0b21Db21wb25lbnQodHlwZSwgcHJvcHMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdhcm5Vbmtub3duUHJvcGVydGllcyh0eXBlLCBwcm9wcywgY2FuVXNlRXZlbnRTeXN0ZW0pO1xufVxuXG4vLyBUT0RPOiBkaXJlY3QgaW1wb3J0cyBsaWtlIHNvbWUtcGFja2FnZS9zcmMvKiBhcmUgYmFkLiBGaXggbWUuXG52YXIgZGlkV2FybkludmFsaWRIeWRyYXRpb24gPSBmYWxzZTtcbnZhciBkaWRXYXJuU2hhZHlET00gPSBmYWxzZTtcblxudmFyIERBTkdFUk9VU0xZX1NFVF9JTk5FUl9IVE1MID0gJ2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MJztcbnZhciBTVVBQUkVTU19DT05URU5UX0VESVRBQkxFX1dBUk5JTkcgPSAnc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nJztcbnZhciBTVVBQUkVTU19IWURSQVRJT05fV0FSTklORyQxID0gJ3N1cHByZXNzSHlkcmF0aW9uV2FybmluZyc7XG52YXIgQVVUT0ZPQ1VTID0gJ2F1dG9Gb2N1cyc7XG52YXIgQ0hJTERSRU4gPSAnY2hpbGRyZW4nO1xudmFyIFNUWUxFJDEgPSAnc3R5bGUnO1xudmFyIEhUTUwgPSAnX19odG1sJztcblxudmFyIEhUTUxfTkFNRVNQQUNFID0gTmFtZXNwYWNlcy5odG1sO1xuXG5cbnZhciB3YXJuZWRVbmtub3duVGFncyA9IHZvaWQgMDtcbnZhciBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgPSB2b2lkIDA7XG5cbnZhciB2YWxpZGF0ZVByb3BlcnRpZXNJbkRldmVsb3BtZW50ID0gdm9pZCAwO1xudmFyIHdhcm5Gb3JUZXh0RGlmZmVyZW5jZSA9IHZvaWQgMDtcbnZhciB3YXJuRm9yUHJvcERpZmZlcmVuY2UgPSB2b2lkIDA7XG52YXIgd2FybkZvckV4dHJhQXR0cmlidXRlcyA9IHZvaWQgMDtcbnZhciB3YXJuRm9ySW52YWxpZEV2ZW50TGlzdGVuZXIgPSB2b2lkIDA7XG52YXIgY2FuRGlmZlN0eWxlRm9ySHlkcmF0aW9uV2FybmluZyA9IHZvaWQgMDtcblxudmFyIG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZSA9IHZvaWQgMDtcbnZhciBub3JtYWxpemVIVE1MID0gdm9pZCAwO1xuXG57XG4gIHdhcm5lZFVua25vd25UYWdzID0ge1xuICAgIC8vIENocm9tZSBpcyB0aGUgb25seSBtYWpvciBicm93c2VyIG5vdCBzaGlwcGluZyA8dGltZT4uIEJ1dCBhcyBvZiBKdWx5XG4gICAgLy8gMjAxNyBpdCBpbnRlbmRzIHRvIHNoaXAgaXQgZHVlIHRvIHdpZGVzcHJlYWQgdXNhZ2UuIFdlIGludGVudGlvbmFsbHlcbiAgICAvLyAqZG9uJ3QqIHdhcm4gZm9yIDx0aW1lPiBldmVuIGlmIGl0J3MgdW5yZWNvZ25pemVkIGJ5IENocm9tZSBiZWNhdXNlXG4gICAgLy8gaXQgc29vbiB3aWxsIGJlLCBhbmQgbWFueSBhcHBzIGhhdmUgYmVlbiB1c2luZyBpdCBhbnl3YXkuXG4gICAgdGltZTogdHJ1ZSxcbiAgICAvLyBUaGVyZSBhcmUgd29ya2luZyBwb2x5ZmlsbHMgZm9yIDxkaWFsb2c+LiBMZXQgcGVvcGxlIHVzZSBpdC5cbiAgICBkaWFsb2c6IHRydWUsXG4gICAgLy8gRWxlY3Ryb24gc2hpcHMgYSBjdXN0b20gPHdlYnZpZXc+IHRhZyB0byBkaXNwbGF5IGV4dGVybmFsIHdlYiBjb250ZW50IGluXG4gICAgLy8gYW4gaXNvbGF0ZWQgZnJhbWUgYW5kIHByb2Nlc3MuXG4gICAgLy8gVGhpcyB0YWcgaXMgbm90IHByZXNlbnQgaW4gbm9uIEVsZWN0cm9uIGVudmlyb25tZW50cyBzdWNoIGFzIEpTRG9tIHdoaWNoXG4gICAgLy8gaXMgb2Z0ZW4gdXNlZCBmb3IgdGVzdGluZyBwdXJwb3Nlcy5cbiAgICAvLyBAc2VlIGh0dHBzOi8vZWxlY3Ryb25qcy5vcmcvZG9jcy9hcGkvd2Vidmlldy10YWdcbiAgICB3ZWJ2aWV3OiB0cnVlXG4gIH07XG5cbiAgdmFsaWRhdGVQcm9wZXJ0aWVzSW5EZXZlbG9wbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBwcm9wcykge1xuICAgIHZhbGlkYXRlUHJvcGVydGllcyh0eXBlLCBwcm9wcyk7XG4gICAgdmFsaWRhdGVQcm9wZXJ0aWVzJDEodHlwZSwgcHJvcHMpO1xuICAgIHZhbGlkYXRlUHJvcGVydGllcyQyKHR5cGUsIHByb3BzLCAvKiBjYW5Vc2VFdmVudFN5c3RlbSAqL3RydWUpO1xuICB9O1xuXG4gIC8vIElFIDExIHBhcnNlcyAmIG5vcm1hbGl6ZXMgdGhlIHN0eWxlIGF0dHJpYnV0ZSBhcyBvcHBvc2VkIHRvIG90aGVyXG4gIC8vIGJyb3dzZXJzLiBJdCBhZGRzIHNwYWNlcyBhbmQgc29ydHMgdGhlIHByb3BlcnRpZXMgaW4gc29tZVxuICAvLyBub24tYWxwaGFiZXRpY2FsIG9yZGVyLiBIYW5kbGluZyB0aGF0IHdvdWxkIHJlcXVpcmUgc29ydGluZyBDU1NcbiAgLy8gcHJvcGVydGllcyBpbiB0aGUgY2xpZW50ICYgc2VydmVyIHZlcnNpb25zIG9yIGFwcGx5aW5nXG4gIC8vIGBleHBlY3RlZFN0eWxlYCB0byBhIHRlbXBvcmFyeSBET00gbm9kZSB0byByZWFkIGl0cyBgc3R5bGVgIGF0dHJpYnV0ZVxuICAvLyBub3JtYWxpemVkLiBTaW5jZSBpdCBvbmx5IGFmZmVjdHMgSUUsIHdlJ3JlIHNraXBwaW5nIHN0eWxlIHdhcm5pbmdzXG4gIC8vIGluIHRoYXQgYnJvd3NlciBjb21wbGV0ZWx5IGluIGZhdm9yIG9mIGRvaW5nIGFsbCB0aGF0IHdvcmsuXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzExODA3XG4gIGNhbkRpZmZTdHlsZUZvckh5ZHJhdGlvbldhcm5pbmcgPSBjYW5Vc2VET00gJiYgIWRvY3VtZW50LmRvY3VtZW50TW9kZTtcblxuICAvLyBIVE1MIHBhcnNpbmcgbm9ybWFsaXplcyBDUiBhbmQgQ1JMRiB0byBMRi5cbiAgLy8gSXQgYWxzbyBjYW4gdHVybiBcXHUwMDAwIGludG8gXFx1RkZGRCBpbnNpZGUgYXR0cmlidXRlcy5cbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1L3NpbmdsZS1wYWdlLmh0bWwjcHJlcHJvY2Vzc2luZy10aGUtaW5wdXQtc3RyZWFtXG4gIC8vIElmIHdlIGhhdmUgYSBtaXNtYXRjaCwgaXQgbWlnaHQgYmUgY2F1c2VkIGJ5IHRoYXQuXG4gIC8vIFdlIHdpbGwgc3RpbGwgcGF0Y2ggdXAgaW4gdGhpcyBjYXNlIGJ1dCBub3QgZmlyZSB0aGUgd2FybmluZy5cbiAgdmFyIE5PUk1BTElaRV9ORVdMSU5FU19SRUdFWCA9IC9cXHJcXG4/L2c7XG4gIHZhciBOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVggPSAvXFx1MDAwMHxcXHVGRkZEL2c7XG5cbiAgbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlID0gZnVuY3Rpb24gKG1hcmt1cCkge1xuICAgIHZhciBtYXJrdXBTdHJpbmcgPSB0eXBlb2YgbWFya3VwID09PSAnc3RyaW5nJyA/IG1hcmt1cCA6ICcnICsgbWFya3VwO1xuICAgIHJldHVybiBtYXJrdXBTdHJpbmcucmVwbGFjZShOT1JNQUxJWkVfTkVXTElORVNfUkVHRVgsICdcXG4nKS5yZXBsYWNlKE5PUk1BTElaRV9OVUxMX0FORF9SRVBMQUNFTUVOVF9SRUdFWCwgJycpO1xuICB9O1xuXG4gIHdhcm5Gb3JUZXh0RGlmZmVyZW5jZSA9IGZ1bmN0aW9uIChzZXJ2ZXJUZXh0LCBjbGllbnRUZXh0KSB7XG4gICAgaWYgKGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBub3JtYWxpemVkQ2xpZW50VGV4dCA9IG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZShjbGllbnRUZXh0KTtcbiAgICB2YXIgbm9ybWFsaXplZFNlcnZlclRleHQgPSBub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUoc2VydmVyVGV4dCk7XG4gICAgaWYgKG5vcm1hbGl6ZWRTZXJ2ZXJUZXh0ID09PSBub3JtYWxpemVkQ2xpZW50VGV4dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbiA9IHRydWU7XG4gICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnVGV4dCBjb250ZW50IGRpZCBub3QgbWF0Y2guIFNlcnZlcjogXCIlc1wiIENsaWVudDogXCIlc1wiJywgbm9ybWFsaXplZFNlcnZlclRleHQsIG5vcm1hbGl6ZWRDbGllbnRUZXh0KTtcbiAgfTtcblxuICB3YXJuRm9yUHJvcERpZmZlcmVuY2UgPSBmdW5jdGlvbiAocHJvcE5hbWUsIHNlcnZlclZhbHVlLCBjbGllbnRWYWx1ZSkge1xuICAgIGlmIChkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbm9ybWFsaXplZENsaWVudFZhbHVlID0gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKGNsaWVudFZhbHVlKTtcbiAgICB2YXIgbm9ybWFsaXplZFNlcnZlclZhbHVlID0gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKHNlcnZlclZhbHVlKTtcbiAgICBpZiAobm9ybWFsaXplZFNlcnZlclZhbHVlID09PSBub3JtYWxpemVkQ2xpZW50VmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlkV2FybkludmFsaWRIeWRyYXRpb24gPSB0cnVlO1xuICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ1Byb3AgYCVzYCBkaWQgbm90IG1hdGNoLiBTZXJ2ZXI6ICVzIENsaWVudDogJXMnLCBwcm9wTmFtZSwgSlNPTi5zdHJpbmdpZnkobm9ybWFsaXplZFNlcnZlclZhbHVlKSwgSlNPTi5zdHJpbmdpZnkobm9ybWFsaXplZENsaWVudFZhbHVlKSk7XG4gIH07XG5cbiAgd2FybkZvckV4dHJhQXR0cmlidXRlcyA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lcykge1xuICAgIGlmIChkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbiA9IHRydWU7XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgYXR0cmlidXRlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgbmFtZXMucHVzaChuYW1lKTtcbiAgICB9KTtcbiAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdFeHRyYSBhdHRyaWJ1dGVzIGZyb20gdGhlIHNlcnZlcjogJXMnLCBuYW1lcyk7XG4gIH07XG5cbiAgd2FybkZvckludmFsaWRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKSB7XG4gICAgaWYgKGxpc3RlbmVyID09PSBmYWxzZSkge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnRXhwZWN0ZWQgYCVzYCBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLCBpbnN0ZWFkIGdvdCBgZmFsc2VgLlxcblxcbicgKyAnSWYgeW91IHVzZWQgdG8gY29uZGl0aW9uYWxseSBvbWl0IGl0IHdpdGggJXM9e2NvbmRpdGlvbiAmJiB2YWx1ZX0sICcgKyAncGFzcyAlcz17Y29uZGl0aW9uID8gdmFsdWUgOiB1bmRlZmluZWR9IGluc3RlYWQuJywgcmVnaXN0cmF0aW9uTmFtZSwgcmVnaXN0cmF0aW9uTmFtZSwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJ0V4cGVjdGVkIGAlc2AgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbiwgaW5zdGVhZCBnb3QgYSB2YWx1ZSBvZiBgJXNgIHR5cGUuJywgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUGFyc2UgdGhlIEhUTUwgYW5kIHJlYWQgaXQgYmFjayB0byBub3JtYWxpemUgdGhlIEhUTUwgc3RyaW5nIHNvIHRoYXQgaXRcbiAgLy8gY2FuIGJlIHVzZWQgZm9yIGNvbXBhcmlzb24uXG4gIG5vcm1hbGl6ZUhUTUwgPSBmdW5jdGlvbiAocGFyZW50LCBodG1sKSB7XG4gICAgLy8gV2UgY291bGQgaGF2ZSBjcmVhdGVkIGEgc2VwYXJhdGUgZG9jdW1lbnQgaGVyZSB0byBhdm9pZFxuICAgIC8vIHJlLWluaXRpYWxpemluZyBjdXN0b20gZWxlbWVudHMgaWYgdGhleSBleGlzdC4gQnV0IHRoaXMgYnJlYWtzXG4gICAgLy8gaG93IDxub3NjcmlwdD4gaXMgYmVpbmcgaGFuZGxlZC4gU28gd2UgdXNlIHRoZSBzYW1lIGRvY3VtZW50LlxuICAgIC8vIFNlZSB0aGUgZGlzY3Vzc2lvbiBpbiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8xMTE1Ny5cbiAgICB2YXIgdGVzdEVsZW1lbnQgPSBwYXJlbnQubmFtZXNwYWNlVVJJID09PSBIVE1MX05BTUVTUEFDRSA/IHBhcmVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQocGFyZW50LnRhZ05hbWUpIDogcGFyZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHBhcmVudC5uYW1lc3BhY2VVUkksIHBhcmVudC50YWdOYW1lKTtcbiAgICB0ZXN0RWxlbWVudC5pbm5lckhUTUwgPSBodG1sO1xuICAgIHJldHVybiB0ZXN0RWxlbWVudC5pbm5lckhUTUw7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVuc3VyZUxpc3RlbmluZ1RvKHJvb3RDb250YWluZXJFbGVtZW50LCByZWdpc3RyYXRpb25OYW1lKSB7XG4gIHZhciBpc0RvY3VtZW50T3JGcmFnbWVudCA9IHJvb3RDb250YWluZXJFbGVtZW50Lm5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFIHx8IHJvb3RDb250YWluZXJFbGVtZW50Lm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFO1xuICB2YXIgZG9jID0gaXNEb2N1bWVudE9yRnJhZ21lbnQgPyByb290Q29udGFpbmVyRWxlbWVudCA6IHJvb3RDb250YWluZXJFbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIGxpc3RlblRvKHJlZ2lzdHJhdGlvbk5hbWUsIGRvYyk7XG59XG5cbmZ1bmN0aW9uIGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihyb290Q29udGFpbmVyRWxlbWVudCkge1xuICByZXR1cm4gcm9vdENvbnRhaW5lckVsZW1lbnQubm9kZVR5cGUgPT09IERPQ1VNRU5UX05PREUgPyByb290Q29udGFpbmVyRWxlbWVudCA6IHJvb3RDb250YWluZXJFbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiB0cmFwQ2xpY2tPbk5vbkludGVyYWN0aXZlRWxlbWVudChub2RlKSB7XG4gIC8vIE1vYmlsZSBTYWZhcmkgZG9lcyBub3QgZmlyZSBwcm9wZXJseSBidWJibGUgY2xpY2sgZXZlbnRzIG9uXG4gIC8vIG5vbi1pbnRlcmFjdGl2ZSBlbGVtZW50cywgd2hpY2ggbWVhbnMgZGVsZWdhdGVkIGNsaWNrIGxpc3RlbmVycyBkbyBub3RcbiAgLy8gZmlyZS4gVGhlIHdvcmthcm91bmQgZm9yIHRoaXMgYnVnIGludm9sdmVzIGF0dGFjaGluZyBhbiBlbXB0eSBjbGlja1xuICAvLyBsaXN0ZW5lciBvbiB0aGUgdGFyZ2V0IG5vZGUuXG4gIC8vIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDEwLzA5L2NsaWNrX2V2ZW50X2RlbC5odG1sXG4gIC8vIEp1c3Qgc2V0IGl0IHVzaW5nIHRoZSBvbmNsaWNrIHByb3BlcnR5IHNvIHRoYXQgd2UgZG9uJ3QgaGF2ZSB0byBtYW5hZ2UgYW55XG4gIC8vIGJvb2trZWVwaW5nIGZvciBpdC4gTm90IHN1cmUgaWYgd2UgbmVlZCB0byBjbGVhciBpdCB3aGVuIHRoZSBsaXN0ZW5lciBpc1xuICAvLyByZW1vdmVkLlxuICAvLyBUT0RPOiBPbmx5IGRvIHRoaXMgZm9yIHRoZSByZWxldmFudCBTYWZhcmlzIG1heWJlP1xuICBub2RlLm9uY2xpY2sgPSBub29wO1xufVxuXG5mdW5jdGlvbiBzZXRJbml0aWFsRE9NUHJvcGVydGllcyh0YWcsIGRvbUVsZW1lbnQsIHJvb3RDb250YWluZXJFbGVtZW50LCBuZXh0UHJvcHMsIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gIGZvciAodmFyIHByb3BLZXkgaW4gbmV4dFByb3BzKSB7XG4gICAgaWYgKCFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgbmV4dFByb3AgPSBuZXh0UHJvcHNbcHJvcEtleV07XG4gICAgaWYgKHByb3BLZXkgPT09IFNUWUxFJDEpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKG5leHRQcm9wKSB7XG4gICAgICAgICAgLy8gRnJlZXplIHRoZSBuZXh0IHN0eWxlIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBhc3N1bWUgaXQgd29uJ3QgYmVcbiAgICAgICAgICAvLyBtdXRhdGVkLiBXZSBoYXZlIGFscmVhZHkgd2FybmVkIGZvciB0aGlzIGluIHRoZSBwYXN0LlxuICAgICAgICAgIE9iamVjdC5mcmVlemUobmV4dFByb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBSZWxpZXMgb24gYHVwZGF0ZVN0eWxlc0J5SURgIG5vdCBtdXRhdGluZyBgc3R5bGVVcGRhdGVzYC5cbiAgICAgIHNldFZhbHVlRm9yU3R5bGVzKGRvbUVsZW1lbnQsIG5leHRQcm9wKTtcbiAgICB9IGVsc2UgaWYgKHByb3BLZXkgPT09IERBTkdFUk9VU0xZX1NFVF9JTk5FUl9IVE1MKSB7XG4gICAgICB2YXIgbmV4dEh0bWwgPSBuZXh0UHJvcCA/IG5leHRQcm9wW0hUTUxdIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKG5leHRIdG1sICE9IG51bGwpIHtcbiAgICAgICAgc2V0SW5uZXJIVE1MKGRvbUVsZW1lbnQsIG5leHRIdG1sKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3BLZXkgPT09IENISUxEUkVOKSB7XG4gICAgICBpZiAodHlwZW9mIG5leHRQcm9wID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBBdm9pZCBzZXR0aW5nIGluaXRpYWwgdGV4dENvbnRlbnQgd2hlbiB0aGUgdGV4dCBpcyBlbXB0eS4gSW4gSUUxMSBzZXR0aW5nXG4gICAgICAgIC8vIHRleHRDb250ZW50IG9uIGEgPHRleHRhcmVhPiB3aWxsIGNhdXNlIHRoZSBwbGFjZWhvbGRlciB0byBub3RcbiAgICAgICAgLy8gc2hvdyB3aXRoaW4gdGhlIDx0ZXh0YXJlYT4gdW50aWwgaXQgaGFzIGJlZW4gZm9jdXNlZCBhbmQgYmx1cnJlZCBhZ2Fpbi5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy82NzMxI2lzc3VlY29tbWVudC0yNTQ4NzQ1NTNcbiAgICAgICAgdmFyIGNhblNldFRleHRDb250ZW50ID0gdGFnICE9PSAndGV4dGFyZWEnIHx8IG5leHRQcm9wICE9PSAnJztcbiAgICAgICAgaWYgKGNhblNldFRleHRDb250ZW50KSB7XG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgbmV4dFByb3ApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBuZXh0UHJvcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgJycgKyBuZXh0UHJvcCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBTVVBQUkVTU19DT05URU5UX0VESVRBQkxFX1dBUk5JTkcgfHwgcHJvcEtleSA9PT0gU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkckMSkge1xuICAgICAgLy8gTm9vcFxuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gQVVUT0ZPQ1VTKSB7XG4gICAgICAvLyBXZSBwb2x5ZmlsbCBpdCBzZXBhcmF0ZWx5IG9uIHRoZSBjbGllbnQgZHVyaW5nIGNvbW1pdC5cbiAgICAgIC8vIFdlIGNvdWxkIGhhdmUgZXhjbHVkZWQgaXQgaW4gdGhlIHByb3BlcnR5IGxpc3QgaW5zdGVhZCBvZlxuICAgICAgLy8gYWRkaW5nIGEgc3BlY2lhbCBjYXNlIGhlcmUsIGJ1dCB0aGVuIGl0IHdvdWxkbid0IGJlIGVtaXR0ZWRcbiAgICAgIC8vIG9uIHNlcnZlciByZW5kZXJpbmcgKGJ1dCB3ZSAqZG8qIHdhbnQgdG8gZW1pdCBpdCBpbiBTU1IpLlxuICAgIH0gZWxzZSBpZiAocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgIGlmIChuZXh0UHJvcCAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0cnVlICYmIHR5cGVvZiBuZXh0UHJvcCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHdhcm5Gb3JJbnZhbGlkRXZlbnRMaXN0ZW5lcihwcm9wS2V5LCBuZXh0UHJvcCk7XG4gICAgICAgIH1cbiAgICAgICAgZW5zdXJlTGlzdGVuaW5nVG8ocm9vdENvbnRhaW5lckVsZW1lbnQsIHByb3BLZXkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV4dFByb3AgIT0gbnVsbCkge1xuICAgICAgc2V0VmFsdWVGb3JQcm9wZXJ0eShkb21FbGVtZW50LCBwcm9wS2V5LCBuZXh0UHJvcCwgaXNDdXN0b21Db21wb25lbnRUYWcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVET01Qcm9wZXJ0aWVzKGRvbUVsZW1lbnQsIHVwZGF0ZVBheWxvYWQsIHdhc0N1c3RvbUNvbXBvbmVudFRhZywgaXNDdXN0b21Db21wb25lbnRUYWcpIHtcbiAgLy8gVE9ETzogSGFuZGxlIHdhc0N1c3RvbUNvbXBvbmVudFRhZ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHVwZGF0ZVBheWxvYWQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgcHJvcEtleSA9IHVwZGF0ZVBheWxvYWRbaV07XG4gICAgdmFyIHByb3BWYWx1ZSA9IHVwZGF0ZVBheWxvYWRbaSArIDFdO1xuICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSQxKSB7XG4gICAgICBzZXRWYWx1ZUZvclN0eWxlcyhkb21FbGVtZW50LCBwcm9wVmFsdWUpO1xuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gREFOR0VST1VTTFlfU0VUX0lOTkVSX0hUTUwpIHtcbiAgICAgIHNldElubmVySFRNTChkb21FbGVtZW50LCBwcm9wVmFsdWUpO1xuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gQ0hJTERSRU4pIHtcbiAgICAgIHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIHByb3BWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFZhbHVlRm9yUHJvcGVydHkoZG9tRWxlbWVudCwgcHJvcEtleSwgcHJvcFZhbHVlLCBpc0N1c3RvbUNvbXBvbmVudFRhZyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodHlwZSwgcHJvcHMsIHJvb3RDb250YWluZXJFbGVtZW50LCBwYXJlbnROYW1lc3BhY2UpIHtcbiAgdmFyIGlzQ3VzdG9tQ29tcG9uZW50VGFnID0gdm9pZCAwO1xuXG4gIC8vIFdlIGNyZWF0ZSB0YWdzIGluIHRoZSBuYW1lc3BhY2Ugb2YgdGhlaXIgcGFyZW50IGNvbnRhaW5lciwgZXhjZXB0IEhUTUxcbiAgLy8gdGFncyBnZXQgbm8gbmFtZXNwYWNlLlxuICB2YXIgb3duZXJEb2N1bWVudCA9IGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihyb290Q29udGFpbmVyRWxlbWVudCk7XG4gIHZhciBkb21FbGVtZW50ID0gdm9pZCAwO1xuICB2YXIgbmFtZXNwYWNlVVJJID0gcGFyZW50TmFtZXNwYWNlO1xuICBpZiAobmFtZXNwYWNlVVJJID09PSBIVE1MX05BTUVTUEFDRSkge1xuICAgIG5hbWVzcGFjZVVSSSA9IGdldEludHJpbnNpY05hbWVzcGFjZSh0eXBlKTtcbiAgfVxuICBpZiAobmFtZXNwYWNlVVJJID09PSBIVE1MX05BTUVTUEFDRSkge1xuICAgIHtcbiAgICAgIGlzQ3VzdG9tQ29tcG9uZW50VGFnID0gaXNDdXN0b21Db21wb25lbnQodHlwZSwgcHJvcHMpO1xuICAgICAgLy8gU2hvdWxkIHRoaXMgY2hlY2sgYmUgZ2F0ZWQgYnkgcGFyZW50IG5hbWVzcGFjZT8gTm90IHN1cmUgd2Ugd2FudCB0b1xuICAgICAgLy8gYWxsb3cgPFNWRz4gb3IgPG1BVEg+LlxuICAgICAgIShpc0N1c3RvbUNvbXBvbmVudFRhZyB8fCB0eXBlID09PSB0eXBlLnRvTG93ZXJDYXNlKCkpID8gd2FybmluZyQxKGZhbHNlLCAnPCVzIC8+IGlzIHVzaW5nIGluY29ycmVjdCBjYXNpbmcuICcgKyAnVXNlIFBhc2NhbENhc2UgZm9yIFJlYWN0IGNvbXBvbmVudHMsICcgKyAnb3IgbG93ZXJjYXNlIGZvciBIVE1MIGVsZW1lbnRzLicsIHR5cGUpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSAnc2NyaXB0Jykge1xuICAgICAgLy8gQ3JlYXRlIHRoZSBzY3JpcHQgdmlhIC5pbm5lckhUTUwgc28gaXRzIFwicGFyc2VyLWluc2VydGVkXCIgZmxhZyBpc1xuICAgICAgLy8gc2V0IHRvIHRydWUgYW5kIGl0IGRvZXMgbm90IGV4ZWN1dGVcbiAgICAgIHZhciBkaXYgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZGl2LmlubmVySFRNTCA9ICc8c2NyaXB0PjwnICsgJy9zY3JpcHQ+JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgLy8gVGhpcyBpcyBndWFyYW50ZWVkIHRvIHlpZWxkIGEgc2NyaXB0IGVsZW1lbnQuXG4gICAgICB2YXIgZmlyc3RDaGlsZCA9IGRpdi5maXJzdENoaWxkO1xuICAgICAgZG9tRWxlbWVudCA9IGRpdi5yZW1vdmVDaGlsZChmaXJzdENoaWxkKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9wcy5pcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vICRGbG93SXNzdWUgYGNyZWF0ZUVsZW1lbnRgIHNob3VsZCBiZSB1cGRhdGVkIGZvciBXZWIgQ29tcG9uZW50c1xuICAgICAgZG9tRWxlbWVudCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlLCB7IGlzOiBwcm9wcy5pcyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2VwYXJhdGUgZWxzZSBicmFuY2ggaW5zdGVhZCBvZiB1c2luZyBgcHJvcHMuaXMgfHwgdW5kZWZpbmVkYCBhYm92ZSBiZWNhdXNlIG9mIGEgRmlyZWZveCBidWcuXG4gICAgICAvLyBTZWUgZGlzY3Vzc2lvbiBpbiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC82ODk2XG4gICAgICAvLyBhbmQgZGlzY3Vzc2lvbiBpbiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMjc2MjQwXG4gICAgICBkb21FbGVtZW50ID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICAgICAgLy8gTm9ybWFsbHkgYXR0cmlidXRlcyBhcmUgYXNzaWduZWQgaW4gYHNldEluaXRpYWxET01Qcm9wZXJ0aWVzYCwgaG93ZXZlciB0aGUgYG11bHRpcGxlYFxuICAgICAgLy8gYXR0cmlidXRlIG9uIGBzZWxlY3RgcyBuZWVkcyB0byBiZSBhZGRlZCBiZWZvcmUgYG9wdGlvbmBzIGFyZSBpbnNlcnRlZC4gVGhpcyBwcmV2ZW50c1xuICAgICAgLy8gYSBidWcgd2hlcmUgdGhlIGBzZWxlY3RgIGRvZXMgbm90IHNjcm9sbCB0byB0aGUgY29ycmVjdCBvcHRpb24gYmVjYXVzZSBzaW5ndWxhclxuICAgICAgLy8gYHNlbGVjdGAgZWxlbWVudHMgYXV0b21hdGljYWxseSBwaWNrIHRoZSBmaXJzdCBpdGVtLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTMyMjJcbiAgICAgIGlmICh0eXBlID09PSAnc2VsZWN0JyAmJiBwcm9wcy5tdWx0aXBsZSkge1xuICAgICAgICB2YXIgbm9kZSA9IGRvbUVsZW1lbnQ7XG4gICAgICAgIG5vZGUubXVsdGlwbGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkb21FbGVtZW50ID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLCB0eXBlKTtcbiAgfVxuXG4gIHtcbiAgICBpZiAobmFtZXNwYWNlVVJJID09PSBIVE1MX05BTUVTUEFDRSkge1xuICAgICAgaWYgKCFpc0N1c3RvbUNvbXBvbmVudFRhZyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZG9tRWxlbWVudCkgPT09ICdbb2JqZWN0IEhUTUxVbmtub3duRWxlbWVudF0nICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwod2FybmVkVW5rbm93blRhZ3MsIHR5cGUpKSB7XG4gICAgICAgIHdhcm5lZFVua25vd25UYWdzW3R5cGVdID0gdHJ1ZTtcbiAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnVGhlIHRhZyA8JXM+IGlzIHVucmVjb2duaXplZCBpbiB0aGlzIGJyb3dzZXIuICcgKyAnSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIFJlYWN0IGNvbXBvbmVudCwgc3RhcnQgaXRzIG5hbWUgd2l0aCAnICsgJ2FuIHVwcGVyY2FzZSBsZXR0ZXIuJywgdHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRvbUVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlKHRleHQsIHJvb3RDb250YWluZXJFbGVtZW50KSB7XG4gIHJldHVybiBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIocm9vdENvbnRhaW5lckVsZW1lbnQpLmNyZWF0ZVRleHROb2RlKHRleHQpO1xufVxuXG5mdW5jdGlvbiBzZXRJbml0aWFsUHJvcGVydGllcyhkb21FbGVtZW50LCB0YWcsIHJhd1Byb3BzLCByb290Q29udGFpbmVyRWxlbWVudCkge1xuICB2YXIgaXNDdXN0b21Db21wb25lbnRUYWcgPSBpc0N1c3RvbUNvbXBvbmVudCh0YWcsIHJhd1Byb3BzKTtcbiAge1xuICAgIHZhbGlkYXRlUHJvcGVydGllc0luRGV2ZWxvcG1lbnQodGFnLCByYXdQcm9wcyk7XG4gICAgaWYgKGlzQ3VzdG9tQ29tcG9uZW50VGFnICYmICFkaWRXYXJuU2hhZHlET00gJiYgZG9tRWxlbWVudC5zaGFkeVJvb3QpIHtcbiAgICAgIHdhcm5pbmckMShmYWxzZSwgJyVzIGlzIHVzaW5nIHNoYWR5IERPTS4gVXNpbmcgc2hhZHkgRE9NIHdpdGggUmVhY3QgY2FuICcgKyAnY2F1c2UgdGhpbmdzIHRvIGJyZWFrIHN1YnRseS4nLCBnZXRDdXJyZW50RmliZXJPd25lck5hbWVJbkRldk9yTnVsbCgpIHx8ICdBIGNvbXBvbmVudCcpO1xuICAgICAgZGlkV2FyblNoYWR5RE9NID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBUT0RPOiBNYWtlIHN1cmUgdGhhdCB3ZSBjaGVjayBpc01vdW50ZWQgYmVmb3JlIGZpcmluZyBhbnkgb2YgdGhlc2UgZXZlbnRzLlxuICB2YXIgcHJvcHMgPSB2b2lkIDA7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSAnaWZyYW1lJzpcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfTE9BRCwgZG9tRWxlbWVudCk7XG4gICAgICBwcm9wcyA9IHJhd1Byb3BzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndmlkZW8nOlxuICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgIC8vIENyZWF0ZSBsaXN0ZW5lciBmb3IgZWFjaCBtZWRpYSBldmVudFxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWRpYUV2ZW50VHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdHJhcEJ1YmJsZWRFdmVudChtZWRpYUV2ZW50VHlwZXNbaV0sIGRvbUVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSByYXdQcm9wcztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NvdXJjZSc6XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KFRPUF9FUlJPUiwgZG9tRWxlbWVudCk7XG4gICAgICBwcm9wcyA9IHJhd1Byb3BzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaW1nJzpcbiAgICBjYXNlICdpbWFnZSc6XG4gICAgY2FzZSAnbGluayc6XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KFRPUF9FUlJPUiwgZG9tRWxlbWVudCk7XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KFRPUF9MT0FELCBkb21FbGVtZW50KTtcbiAgICAgIHByb3BzID0gcmF3UHJvcHM7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdmb3JtJzpcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoVE9QX1JFU0VULCBkb21FbGVtZW50KTtcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQoVE9QX1NVQk1JVCwgZG9tRWxlbWVudCk7XG4gICAgICBwcm9wcyA9IHJhd1Byb3BzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZGV0YWlscyc6XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KFRPUF9UT0dHTEUsIGRvbUVsZW1lbnQpO1xuICAgICAgcHJvcHMgPSByYXdQcm9wcztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgIGluaXRXcmFwcGVyU3RhdGUoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgcHJvcHMgPSBnZXRIb3N0UHJvcHMoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfSU5WQUxJRCwgZG9tRWxlbWVudCk7XG4gICAgICAvLyBGb3IgY29udHJvbGxlZCBjb21wb25lbnRzIHdlIGFsd2F5cyBuZWVkIHRvIGVuc3VyZSB3ZSdyZSBsaXN0ZW5pbmdcbiAgICAgIC8vIHRvIG9uQ2hhbmdlLiBFdmVuIGlmIHRoZXJlIGlzIG5vIGxpc3RlbmVyLlxuICAgICAgZW5zdXJlTGlzdGVuaW5nVG8ocm9vdENvbnRhaW5lckVsZW1lbnQsICdvbkNoYW5nZScpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgIHZhbGlkYXRlUHJvcHMoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgcHJvcHMgPSBnZXRIb3N0UHJvcHMkMShkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgaW5pdFdyYXBwZXJTdGF0ZSQxKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHByb3BzID0gZ2V0SG9zdFByb3BzJDIoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfSU5WQUxJRCwgZG9tRWxlbWVudCk7XG4gICAgICAvLyBGb3IgY29udHJvbGxlZCBjb21wb25lbnRzIHdlIGFsd2F5cyBuZWVkIHRvIGVuc3VyZSB3ZSdyZSBsaXN0ZW5pbmdcbiAgICAgIC8vIHRvIG9uQ2hhbmdlLiBFdmVuIGlmIHRoZXJlIGlzIG5vIGxpc3RlbmVyLlxuICAgICAgZW5zdXJlTGlzdGVuaW5nVG8ocm9vdENvbnRhaW5lckVsZW1lbnQsICdvbkNoYW5nZScpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgaW5pdFdyYXBwZXJTdGF0ZSQyKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHByb3BzID0gZ2V0SG9zdFByb3BzJDMoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfSU5WQUxJRCwgZG9tRWxlbWVudCk7XG4gICAgICAvLyBGb3IgY29udHJvbGxlZCBjb21wb25lbnRzIHdlIGFsd2F5cyBuZWVkIHRvIGVuc3VyZSB3ZSdyZSBsaXN0ZW5pbmdcbiAgICAgIC8vIHRvIG9uQ2hhbmdlLiBFdmVuIGlmIHRoZXJlIGlzIG5vIGxpc3RlbmVyLlxuICAgICAgZW5zdXJlTGlzdGVuaW5nVG8ocm9vdENvbnRhaW5lckVsZW1lbnQsICdvbkNoYW5nZScpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHByb3BzID0gcmF3UHJvcHM7XG4gIH1cblxuICBhc3NlcnRWYWxpZFByb3BzKHRhZywgcHJvcHMpO1xuXG4gIHNldEluaXRpYWxET01Qcm9wZXJ0aWVzKHRhZywgZG9tRWxlbWVudCwgcm9vdENvbnRhaW5lckVsZW1lbnQsIHByb3BzLCBpc0N1c3RvbUNvbXBvbmVudFRhZyk7XG5cbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICAvLyBUT0RPOiBNYWtlIHN1cmUgd2UgY2hlY2sgaWYgdGhpcyBpcyBzdGlsbCB1bm1vdW50ZWQgb3IgZG8gYW55IGNsZWFuXG4gICAgICAvLyB1cCBuZWNlc3Nhcnkgc2luY2Ugd2UgbmV2ZXIgc3RvcCB0cmFja2luZyBhbnltb3JlLlxuICAgICAgdHJhY2soZG9tRWxlbWVudCk7XG4gICAgICBwb3N0TW91bnRXcmFwcGVyKGRvbUVsZW1lbnQsIHJhd1Byb3BzLCBmYWxzZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAvLyBUT0RPOiBNYWtlIHN1cmUgd2UgY2hlY2sgaWYgdGhpcyBpcyBzdGlsbCB1bm1vdW50ZWQgb3IgZG8gYW55IGNsZWFuXG4gICAgICAvLyB1cCBuZWNlc3Nhcnkgc2luY2Ugd2UgbmV2ZXIgc3RvcCB0cmFja2luZyBhbnltb3JlLlxuICAgICAgdHJhY2soZG9tRWxlbWVudCk7XG4gICAgICBwb3N0TW91bnRXcmFwcGVyJDMoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgIHBvc3RNb3VudFdyYXBwZXIkMShkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgcG9zdE1vdW50V3JhcHBlciQyKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAodHlwZW9mIHByb3BzLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBjYXN0IG1heSBub3QgYmUgc291bmQgZm9yIFNWRywgTWF0aE1MIG9yIGN1c3RvbSBlbGVtZW50cy5cbiAgICAgICAgdHJhcENsaWNrT25Ob25JbnRlcmFjdGl2ZUVsZW1lbnQoZG9tRWxlbWVudCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxufVxuXG4vLyBDYWxjdWxhdGUgdGhlIGRpZmYgYmV0d2VlbiB0aGUgdHdvIG9iamVjdHMuXG5mdW5jdGlvbiBkaWZmUHJvcGVydGllcyhkb21FbGVtZW50LCB0YWcsIGxhc3RSYXdQcm9wcywgbmV4dFJhd1Byb3BzLCByb290Q29udGFpbmVyRWxlbWVudCkge1xuICB7XG4gICAgdmFsaWRhdGVQcm9wZXJ0aWVzSW5EZXZlbG9wbWVudCh0YWcsIG5leHRSYXdQcm9wcyk7XG4gIH1cblxuICB2YXIgdXBkYXRlUGF5bG9hZCA9IG51bGw7XG5cbiAgdmFyIGxhc3RQcm9wcyA9IHZvaWQgMDtcbiAgdmFyIG5leHRQcm9wcyA9IHZvaWQgMDtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICBsYXN0UHJvcHMgPSBnZXRIb3N0UHJvcHMoZG9tRWxlbWVudCwgbGFzdFJhd1Byb3BzKTtcbiAgICAgIG5leHRQcm9wcyA9IGdldEhvc3RQcm9wcyhkb21FbGVtZW50LCBuZXh0UmF3UHJvcHMpO1xuICAgICAgdXBkYXRlUGF5bG9hZCA9IFtdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgIGxhc3RQcm9wcyA9IGdldEhvc3RQcm9wcyQxKGRvbUVsZW1lbnQsIGxhc3RSYXdQcm9wcyk7XG4gICAgICBuZXh0UHJvcHMgPSBnZXRIb3N0UHJvcHMkMShkb21FbGVtZW50LCBuZXh0UmF3UHJvcHMpO1xuICAgICAgdXBkYXRlUGF5bG9hZCA9IFtdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGxhc3RQcm9wcyA9IGdldEhvc3RQcm9wcyQyKGRvbUVsZW1lbnQsIGxhc3RSYXdQcm9wcyk7XG4gICAgICBuZXh0UHJvcHMgPSBnZXRIb3N0UHJvcHMkMihkb21FbGVtZW50LCBuZXh0UmF3UHJvcHMpO1xuICAgICAgdXBkYXRlUGF5bG9hZCA9IFtdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgbGFzdFByb3BzID0gZ2V0SG9zdFByb3BzJDMoZG9tRWxlbWVudCwgbGFzdFJhd1Byb3BzKTtcbiAgICAgIG5leHRQcm9wcyA9IGdldEhvc3RQcm9wcyQzKGRvbUVsZW1lbnQsIG5leHRSYXdQcm9wcyk7XG4gICAgICB1cGRhdGVQYXlsb2FkID0gW107XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbGFzdFByb3BzID0gbGFzdFJhd1Byb3BzO1xuICAgICAgbmV4dFByb3BzID0gbmV4dFJhd1Byb3BzO1xuICAgICAgaWYgKHR5cGVvZiBsYXN0UHJvcHMub25DbGljayAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgbmV4dFByb3BzLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBjYXN0IG1heSBub3QgYmUgc291bmQgZm9yIFNWRywgTWF0aE1MIG9yIGN1c3RvbSBlbGVtZW50cy5cbiAgICAgICAgdHJhcENsaWNrT25Ob25JbnRlcmFjdGl2ZUVsZW1lbnQoZG9tRWxlbWVudCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGFzc2VydFZhbGlkUHJvcHModGFnLCBuZXh0UHJvcHMpO1xuXG4gIHZhciBwcm9wS2V5ID0gdm9pZCAwO1xuICB2YXIgc3R5bGVOYW1lID0gdm9pZCAwO1xuICB2YXIgc3R5bGVVcGRhdGVzID0gbnVsbDtcbiAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgIWxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fCBsYXN0UHJvcHNbcHJvcEtleV0gPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSQxKSB7XG4gICAgICB2YXIgbGFzdFN0eWxlID0gbGFzdFByb3BzW3Byb3BLZXldO1xuICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbGFzdFN0eWxlKSB7XG4gICAgICAgIGlmIChsYXN0U3R5bGUuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICAgIGlmICghc3R5bGVVcGRhdGVzKSB7XG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gREFOR0VST1VTTFlfU0VUX0lOTkVSX0hUTUwgfHwgcHJvcEtleSA9PT0gQ0hJTERSRU4pIHtcbiAgICAgIC8vIE5vb3AuIFRoaXMgaXMgaGFuZGxlZCBieSB0aGUgY2xlYXIgdGV4dCBtZWNoYW5pc20uXG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBTVVBQUkVTU19DT05URU5UX0VESVRBQkxFX1dBUk5JTkcgfHwgcHJvcEtleSA9PT0gU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkckMSkge1xuICAgICAgLy8gTm9vcFxuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gQVVUT0ZPQ1VTKSB7XG4gICAgICAvLyBOb29wLiBJdCBkb2Vzbid0IHdvcmsgb24gdXBkYXRlcyBhbnl3YXkuXG4gICAgfSBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lTW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgLy8gVGhpcyBpcyBhIHNwZWNpYWwgY2FzZS4gSWYgYW55IGxpc3RlbmVyIHVwZGF0ZXMgd2UgbmVlZCB0byBlbnN1cmVcbiAgICAgIC8vIHRoYXQgdGhlIFwiY3VycmVudFwiIGZpYmVyIHBvaW50ZXIgZ2V0cyB1cGRhdGVkIHNvIHdlIG5lZWQgYSBjb21taXRcbiAgICAgIC8vIHRvIHVwZGF0ZSB0aGlzIGVsZW1lbnQuXG4gICAgICBpZiAoIXVwZGF0ZVBheWxvYWQpIHtcbiAgICAgICAgdXBkYXRlUGF5bG9hZCA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGb3IgYWxsIG90aGVyIGRlbGV0ZWQgcHJvcGVydGllcyB3ZSBhZGQgaXQgdG8gdGhlIHF1ZXVlLiBXZSB1c2VcbiAgICAgIC8vIHRoZSB3aGl0ZWxpc3QgaW4gdGhlIGNvbW1pdCBwaGFzZSBpbnN0ZWFkLlxuICAgICAgKHVwZGF0ZVBheWxvYWQgPSB1cGRhdGVQYXlsb2FkIHx8IFtdKS5wdXNoKHByb3BLZXksIG51bGwpO1xuICAgIH1cbiAgfVxuICBmb3IgKHByb3BLZXkgaW4gbmV4dFByb3BzKSB7XG4gICAgdmFyIG5leHRQcm9wID0gbmV4dFByb3BzW3Byb3BLZXldO1xuICAgIHZhciBsYXN0UHJvcCA9IGxhc3RQcm9wcyAhPSBudWxsID8gbGFzdFByb3BzW3Byb3BLZXldIDogdW5kZWZpbmVkO1xuICAgIGlmICghbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8IG5leHRQcm9wID09PSBsYXN0UHJvcCB8fCBuZXh0UHJvcCA9PSBudWxsICYmIGxhc3RQcm9wID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUkMSkge1xuICAgICAge1xuICAgICAgICBpZiAobmV4dFByb3ApIHtcbiAgICAgICAgICAvLyBGcmVlemUgdGhlIG5leHQgc3R5bGUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGFzc3VtZSBpdCB3b24ndCBiZVxuICAgICAgICAgIC8vIG11dGF0ZWQuIFdlIGhhdmUgYWxyZWFkeSB3YXJuZWQgZm9yIHRoaXMgaW4gdGhlIHBhc3QuXG4gICAgICAgICAgT2JqZWN0LmZyZWV6ZShuZXh0UHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsYXN0UHJvcCkge1xuICAgICAgICAvLyBVbnNldCBzdHlsZXMgb24gYGxhc3RQcm9wYCBidXQgbm90IG9uIGBuZXh0UHJvcGAuXG4gICAgICAgIGZvciAoc3R5bGVOYW1lIGluIGxhc3RQcm9wKSB7XG4gICAgICAgICAgaWYgKGxhc3RQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiYgKCFuZXh0UHJvcCB8fCAhbmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkpIHtcbiAgICAgICAgICAgIGlmICghc3R5bGVVcGRhdGVzKSB7XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlIHN0eWxlcyB0aGF0IGNoYW5nZWQgc2luY2UgYGxhc3RQcm9wYC5cbiAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbmV4dFByb3ApIHtcbiAgICAgICAgICBpZiAobmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSAmJiBsYXN0UHJvcFtzdHlsZU5hbWVdICE9PSBuZXh0UHJvcFtzdHlsZU5hbWVdKSB7XG4gICAgICAgICAgICBpZiAoIXN0eWxlVXBkYXRlcykge1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gbmV4dFByb3Bbc3R5bGVOYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJlbGllcyBvbiBgdXBkYXRlU3R5bGVzQnlJRGAgbm90IG11dGF0aW5nIGBzdHlsZVVwZGF0ZXNgLlxuICAgICAgICBpZiAoIXN0eWxlVXBkYXRlcykge1xuICAgICAgICAgIGlmICghdXBkYXRlUGF5bG9hZCkge1xuICAgICAgICAgICAgdXBkYXRlUGF5bG9hZCA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1cGRhdGVQYXlsb2FkLnB1c2gocHJvcEtleSwgc3R5bGVVcGRhdGVzKTtcbiAgICAgICAgfVxuICAgICAgICBzdHlsZVVwZGF0ZXMgPSBuZXh0UHJvcDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3BLZXkgPT09IERBTkdFUk9VU0xZX1NFVF9JTk5FUl9IVE1MKSB7XG4gICAgICB2YXIgbmV4dEh0bWwgPSBuZXh0UHJvcCA/IG5leHRQcm9wW0hUTUxdIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIGxhc3RIdG1sID0gbGFzdFByb3AgPyBsYXN0UHJvcFtIVE1MXSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChuZXh0SHRtbCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChsYXN0SHRtbCAhPT0gbmV4dEh0bWwpIHtcbiAgICAgICAgICAodXBkYXRlUGF5bG9hZCA9IHVwZGF0ZVBheWxvYWQgfHwgW10pLnB1c2gocHJvcEtleSwgJycgKyBuZXh0SHRtbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IEl0IG1pZ2h0IGJlIHRvbyBsYXRlIHRvIGNsZWFyIHRoaXMgaWYgd2UgaGF2ZSBjaGlsZHJlblxuICAgICAgICAvLyBpbnNlcnRlZCBhbHJlYWR5LlxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gQ0hJTERSRU4pIHtcbiAgICAgIGlmIChsYXN0UHJvcCAhPT0gbmV4dFByb3AgJiYgKHR5cGVvZiBuZXh0UHJvcCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5leHRQcm9wID09PSAnbnVtYmVyJykpIHtcbiAgICAgICAgKHVwZGF0ZVBheWxvYWQgPSB1cGRhdGVQYXlsb2FkIHx8IFtdKS5wdXNoKHByb3BLZXksICcnICsgbmV4dFByb3ApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gU1VQUFJFU1NfQ09OVEVOVF9FRElUQUJMRV9XQVJOSU5HIHx8IHByb3BLZXkgPT09IFNVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HJDEpIHtcbiAgICAgIC8vIE5vb3BcbiAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICBpZiAobmV4dFByb3AgIT0gbnVsbCkge1xuICAgICAgICAvLyBXZSBlYWdlcmx5IGxpc3RlbiB0byB0aGlzIGV2ZW4gdGhvdWdoIHdlIGhhdmVuJ3QgY29tbWl0dGVkIHlldC5cbiAgICAgICAgaWYgKHRydWUgJiYgdHlwZW9mIG5leHRQcm9wICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgd2FybkZvckludmFsaWRFdmVudExpc3RlbmVyKHByb3BLZXksIG5leHRQcm9wKTtcbiAgICAgICAgfVxuICAgICAgICBlbnN1cmVMaXN0ZW5pbmdUbyhyb290Q29udGFpbmVyRWxlbWVudCwgcHJvcEtleSk7XG4gICAgICB9XG4gICAgICBpZiAoIXVwZGF0ZVBheWxvYWQgJiYgbGFzdFByb3AgIT09IG5leHRQcm9wKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSBzcGVjaWFsIGNhc2UuIElmIGFueSBsaXN0ZW5lciB1cGRhdGVzIHdlIG5lZWQgdG8gZW5zdXJlXG4gICAgICAgIC8vIHRoYXQgdGhlIFwiY3VycmVudFwiIHByb3BzIHBvaW50ZXIgZ2V0cyB1cGRhdGVkIHNvIHdlIG5lZWQgYSBjb21taXRcbiAgICAgICAgLy8gdG8gdXBkYXRlIHRoaXMgZWxlbWVudC5cbiAgICAgICAgdXBkYXRlUGF5bG9hZCA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGb3IgYW55IG90aGVyIHByb3BlcnR5IHdlIGFsd2F5cyBhZGQgaXQgdG8gdGhlIHF1ZXVlIGFuZCB0aGVuIHdlXG4gICAgICAvLyBmaWx0ZXIgaXQgb3V0IHVzaW5nIHRoZSB3aGl0ZWxpc3QgZHVyaW5nIHRoZSBjb21taXQuXG4gICAgICAodXBkYXRlUGF5bG9hZCA9IHVwZGF0ZVBheWxvYWQgfHwgW10pLnB1c2gocHJvcEtleSwgbmV4dFByb3ApO1xuICAgIH1cbiAgfVxuICBpZiAoc3R5bGVVcGRhdGVzKSB7XG4gICAgKHVwZGF0ZVBheWxvYWQgPSB1cGRhdGVQYXlsb2FkIHx8IFtdKS5wdXNoKFNUWUxFJDEsIHN0eWxlVXBkYXRlcyk7XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZVBheWxvYWQ7XG59XG5cbi8vIEFwcGx5IHRoZSBkaWZmLlxuZnVuY3Rpb24gdXBkYXRlUHJvcGVydGllcyhkb21FbGVtZW50LCB1cGRhdGVQYXlsb2FkLCB0YWcsIGxhc3RSYXdQcm9wcywgbmV4dFJhd1Byb3BzKSB7XG4gIC8vIFVwZGF0ZSBjaGVja2VkICpiZWZvcmUqIG5hbWUuXG4gIC8vIEluIHRoZSBtaWRkbGUgb2YgYW4gdXBkYXRlLCBpdCBpcyBwb3NzaWJsZSB0byBoYXZlIG11bHRpcGxlIGNoZWNrZWQuXG4gIC8vIFdoZW4gYSBjaGVja2VkIHJhZGlvIHRyaWVzIHRvIGNoYW5nZSBuYW1lLCBicm93c2VyIG1ha2VzIGFub3RoZXIgcmFkaW8ncyBjaGVja2VkIGZhbHNlLlxuICBpZiAodGFnID09PSAnaW5wdXQnICYmIG5leHRSYXdQcm9wcy50eXBlID09PSAncmFkaW8nICYmIG5leHRSYXdQcm9wcy5uYW1lICE9IG51bGwpIHtcbiAgICB1cGRhdGVDaGVja2VkKGRvbUVsZW1lbnQsIG5leHRSYXdQcm9wcyk7XG4gIH1cblxuICB2YXIgd2FzQ3VzdG9tQ29tcG9uZW50VGFnID0gaXNDdXN0b21Db21wb25lbnQodGFnLCBsYXN0UmF3UHJvcHMpO1xuICB2YXIgaXNDdXN0b21Db21wb25lbnRUYWcgPSBpc0N1c3RvbUNvbXBvbmVudCh0YWcsIG5leHRSYXdQcm9wcyk7XG4gIC8vIEFwcGx5IHRoZSBkaWZmLlxuICB1cGRhdGVET01Qcm9wZXJ0aWVzKGRvbUVsZW1lbnQsIHVwZGF0ZVBheWxvYWQsIHdhc0N1c3RvbUNvbXBvbmVudFRhZywgaXNDdXN0b21Db21wb25lbnRUYWcpO1xuXG4gIC8vIFRPRE86IEVuc3VyZSB0aGF0IGFuIHVwZGF0ZSBnZXRzIHNjaGVkdWxlZCBpZiBhbnkgb2YgdGhlIHNwZWNpYWwgcHJvcHNcbiAgLy8gY2hhbmdlZC5cbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICAvLyBVcGRhdGUgdGhlIHdyYXBwZXIgYXJvdW5kIGlucHV0cyAqYWZ0ZXIqIHVwZGF0aW5nIHByb3BzLiBUaGlzIGhhcyB0b1xuICAgICAgLy8gaGFwcGVuIGFmdGVyIGB1cGRhdGVET01Qcm9wZXJ0aWVzYC4gT3RoZXJ3aXNlIEhUTUw1IGlucHV0IHZhbGlkYXRpb25zXG4gICAgICAvLyByYWlzZSB3YXJuaW5ncyBhbmQgcHJldmVudCB0aGUgbmV3IHZhbHVlIGZyb20gYmVpbmcgYXNzaWduZWQuXG4gICAgICB1cGRhdGVXcmFwcGVyKGRvbUVsZW1lbnQsIG5leHRSYXdQcm9wcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICB1cGRhdGVXcmFwcGVyJDEoZG9tRWxlbWVudCwgbmV4dFJhd1Byb3BzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAvLyA8c2VsZWN0PiB2YWx1ZSB1cGRhdGUgbmVlZHMgdG8gb2NjdXIgYWZ0ZXIgPG9wdGlvbj4gY2hpbGRyZW5cbiAgICAgIC8vIHJlY29uY2lsaWF0aW9uXG4gICAgICBwb3N0VXBkYXRlV3JhcHBlcihkb21FbGVtZW50LCBuZXh0UmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUocHJvcE5hbWUpIHtcbiAge1xuICAgIHZhciBsb3dlckNhc2VkTmFtZSA9IHByb3BOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKCFwb3NzaWJsZVN0YW5kYXJkTmFtZXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHBvc3NpYmxlU3RhbmRhcmROYW1lc1tsb3dlckNhc2VkTmFtZV0gfHwgbnVsbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZGlmZkh5ZHJhdGVkUHJvcGVydGllcyhkb21FbGVtZW50LCB0YWcsIHJhd1Byb3BzLCBwYXJlbnROYW1lc3BhY2UsIHJvb3RDb250YWluZXJFbGVtZW50KSB7XG4gIHZhciBpc0N1c3RvbUNvbXBvbmVudFRhZyA9IHZvaWQgMDtcbiAgdmFyIGV4dHJhQXR0cmlidXRlTmFtZXMgPSB2b2lkIDA7XG5cbiAge1xuICAgIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyA9IHJhd1Byb3BzW1NVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HJDFdID09PSB0cnVlO1xuICAgIGlzQ3VzdG9tQ29tcG9uZW50VGFnID0gaXNDdXN0b21Db21wb25lbnQodGFnLCByYXdQcm9wcyk7XG4gICAgdmFsaWRhdGVQcm9wZXJ0aWVzSW5EZXZlbG9wbWVudCh0YWcsIHJhd1Byb3BzKTtcbiAgICBpZiAoaXNDdXN0b21Db21wb25lbnRUYWcgJiYgIWRpZFdhcm5TaGFkeURPTSAmJiBkb21FbGVtZW50LnNoYWR5Um9vdCkge1xuICAgICAgd2FybmluZyQxKGZhbHNlLCAnJXMgaXMgdXNpbmcgc2hhZHkgRE9NLiBVc2luZyBzaGFkeSBET00gd2l0aCBSZWFjdCBjYW4gJyArICdjYXVzZSB0aGluZ3MgdG8gYnJlYWsgc3VidGx5LicsIGdldEN1cnJlbnRGaWJlck93bmVyTmFtZUluRGV2T3JOdWxsKCkgfHwgJ0EgY29tcG9uZW50Jyk7XG4gICAgICBkaWRXYXJuU2hhZHlET00gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE86IE1ha2Ugc3VyZSB0aGF0IHdlIGNoZWNrIGlzTW91bnRlZCBiZWZvcmUgZmlyaW5nIGFueSBvZiB0aGVzZSBldmVudHMuXG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSAnaWZyYW1lJzpcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfTE9BRCwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd2aWRlbyc6XG4gICAgY2FzZSAnYXVkaW8nOlxuICAgICAgLy8gQ3JlYXRlIGxpc3RlbmVyIGZvciBlYWNoIG1lZGlhIGV2ZW50XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lZGlhRXZlbnRUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0cmFwQnViYmxlZEV2ZW50KG1lZGlhRXZlbnRUeXBlc1tpXSwgZG9tRWxlbWVudCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzb3VyY2UnOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfRVJST1IsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaW1nJzpcbiAgICBjYXNlICdpbWFnZSc6XG4gICAgY2FzZSAnbGluayc6XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KFRPUF9FUlJPUiwgZG9tRWxlbWVudCk7XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KFRPUF9MT0FELCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfUkVTRVQsIGRvbUVsZW1lbnQpO1xuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfU1VCTUlULCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2RldGFpbHMnOlxuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfVE9HR0xFLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgIGluaXRXcmFwcGVyU3RhdGUoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfSU5WQUxJRCwgZG9tRWxlbWVudCk7XG4gICAgICAvLyBGb3IgY29udHJvbGxlZCBjb21wb25lbnRzIHdlIGFsd2F5cyBuZWVkIHRvIGVuc3VyZSB3ZSdyZSBsaXN0ZW5pbmdcbiAgICAgIC8vIHRvIG9uQ2hhbmdlLiBFdmVuIGlmIHRoZXJlIGlzIG5vIGxpc3RlbmVyLlxuICAgICAgZW5zdXJlTGlzdGVuaW5nVG8ocm9vdENvbnRhaW5lckVsZW1lbnQsICdvbkNoYW5nZScpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgIHZhbGlkYXRlUHJvcHMoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGluaXRXcmFwcGVyU3RhdGUkMShkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICB0cmFwQnViYmxlZEV2ZW50KFRPUF9JTlZBTElELCBkb21FbGVtZW50KTtcbiAgICAgIC8vIEZvciBjb250cm9sbGVkIGNvbXBvbmVudHMgd2UgYWx3YXlzIG5lZWQgdG8gZW5zdXJlIHdlJ3JlIGxpc3RlbmluZ1xuICAgICAgLy8gdG8gb25DaGFuZ2UuIEV2ZW4gaWYgdGhlcmUgaXMgbm8gbGlzdGVuZXIuXG4gICAgICBlbnN1cmVMaXN0ZW5pbmdUbyhyb290Q29udGFpbmVyRWxlbWVudCwgJ29uQ2hhbmdlJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICBpbml0V3JhcHBlclN0YXRlJDIoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgdHJhcEJ1YmJsZWRFdmVudChUT1BfSU5WQUxJRCwgZG9tRWxlbWVudCk7XG4gICAgICAvLyBGb3IgY29udHJvbGxlZCBjb21wb25lbnRzIHdlIGFsd2F5cyBuZWVkIHRvIGVuc3VyZSB3ZSdyZSBsaXN0ZW5pbmdcbiAgICAgIC8vIHRvIG9uQ2hhbmdlLiBFdmVuIGlmIHRoZXJlIGlzIG5vIGxpc3RlbmVyLlxuICAgICAgZW5zdXJlTGlzdGVuaW5nVG8ocm9vdENvbnRhaW5lckVsZW1lbnQsICdvbkNoYW5nZScpO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICBhc3NlcnRWYWxpZFByb3BzKHRhZywgcmF3UHJvcHMpO1xuXG4gIHtcbiAgICBleHRyYUF0dHJpYnV0ZU5hbWVzID0gbmV3IFNldCgpO1xuICAgIHZhciBhdHRyaWJ1dGVzID0gZG9tRWxlbWVudC5hdHRyaWJ1dGVzO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIG5hbWUgPSBhdHRyaWJ1dGVzW19pXS5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgLy8gQnVpbHQtaW4gU1NSIGF0dHJpYnV0ZSBpcyB3aGl0ZWxpc3RlZFxuICAgICAgICBjYXNlICdkYXRhLXJlYWN0cm9vdCc6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIENvbnRyb2xsZWQgYXR0cmlidXRlcyBhcmUgbm90IHZhbGlkYXRlZFxuICAgICAgICAvLyBUT0RPOiBPbmx5IGlnbm9yZSB0aGVtIG9uIGNvbnRyb2xsZWQgdGFncy5cbiAgICAgICAgY2FzZSAndmFsdWUnOlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjaGVja2VkJzpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc2VsZWN0ZWQnOlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vIEludGVudGlvbmFsbHkgdXNlIHRoZSBvcmlnaW5hbCBuYW1lLlxuICAgICAgICAgIC8vIFNlZSBkaXNjdXNzaW9uIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzEwNjc2LlxuICAgICAgICAgIGV4dHJhQXR0cmlidXRlTmFtZXMuYWRkKGF0dHJpYnV0ZXNbX2ldLm5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciB1cGRhdGVQYXlsb2FkID0gbnVsbDtcbiAgZm9yICh2YXIgcHJvcEtleSBpbiByYXdQcm9wcykge1xuICAgIGlmICghcmF3UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgbmV4dFByb3AgPSByYXdQcm9wc1twcm9wS2V5XTtcbiAgICBpZiAocHJvcEtleSA9PT0gQ0hJTERSRU4pIHtcbiAgICAgIC8vIEZvciB0ZXh0IGNvbnRlbnQgY2hpbGRyZW4gd2UgY29tcGFyZSBhZ2FpbnN0IHRleHRDb250ZW50LiBUaGlzXG4gICAgICAvLyBtaWdodCBtYXRjaCBhZGRpdGlvbmFsIEhUTUwgdGhhdCBpcyBoaWRkZW4gd2hlbiB3ZSByZWFkIGl0IHVzaW5nXG4gICAgICAvLyB0ZXh0Q29udGVudC4gRS5nLiBcImZvb1wiIHdpbGwgbWF0Y2ggXCJmPHNwYW4+b288L3NwYW4+XCIgYnV0IHRoYXQgc3RpbGxcbiAgICAgIC8vIHNhdGlzZmllcyBvdXIgcmVxdWlyZW1lbnQuIE91ciByZXF1aXJlbWVudCBpcyBub3QgdG8gcHJvZHVjZSBwZXJmZWN0XG4gICAgICAvLyBIVE1MIGFuZCBhdHRyaWJ1dGVzLiBJZGVhbGx5IHdlIHNob3VsZCBwcmVzZXJ2ZSBzdHJ1Y3R1cmUgYnV0IGl0J3NcbiAgICAgIC8vIG9rIG5vdCB0byBpZiB0aGUgdmlzaWJsZSBjb250ZW50IGlzIHN0aWxsIGVub3VnaCB0byBpbmRpY2F0ZSB3aGF0XG4gICAgICAvLyBldmVuIGxpc3RlbmVycyB0aGVzZSBub2RlcyBtaWdodCBiZSB3aXJlZCB1cCB0by5cbiAgICAgIC8vIFRPRE86IFdhcm4gaWYgdGhlcmUgaXMgbW9yZSB0aGFuIGEgc2luZ2xlIHRleHROb2RlIGFzIGEgY2hpbGQuXG4gICAgICAvLyBUT0RPOiBTaG91bGQgd2UgdXNlIGRvbUVsZW1lbnQuZmlyc3RDaGlsZC5ub2RlVmFsdWUgdG8gY29tcGFyZT9cbiAgICAgIGlmICh0eXBlb2YgbmV4dFByb3AgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChkb21FbGVtZW50LnRleHRDb250ZW50ICE9PSBuZXh0UHJvcCkge1xuICAgICAgICAgIGlmICh0cnVlICYmICFzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcpIHtcbiAgICAgICAgICAgIHdhcm5Gb3JUZXh0RGlmZmVyZW5jZShkb21FbGVtZW50LnRleHRDb250ZW50LCBuZXh0UHJvcCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVwZGF0ZVBheWxvYWQgPSBbQ0hJTERSRU4sIG5leHRQcm9wXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmV4dFByb3AgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChkb21FbGVtZW50LnRleHRDb250ZW50ICE9PSAnJyArIG5leHRQcm9wKSB7XG4gICAgICAgICAgaWYgKHRydWUgJiYgIXN1cHByZXNzSHlkcmF0aW9uV2FybmluZykge1xuICAgICAgICAgICAgd2FybkZvclRleHREaWZmZXJlbmNlKGRvbUVsZW1lbnQudGV4dENvbnRlbnQsIG5leHRQcm9wKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBkYXRlUGF5bG9hZCA9IFtDSElMRFJFTiwgJycgKyBuZXh0UHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICBpZiAobmV4dFByb3AgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHJ1ZSAmJiB0eXBlb2YgbmV4dFByb3AgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB3YXJuRm9ySW52YWxpZEV2ZW50TGlzdGVuZXIocHJvcEtleSwgbmV4dFByb3ApO1xuICAgICAgICB9XG4gICAgICAgIGVuc3VyZUxpc3RlbmluZ1RvKHJvb3RDb250YWluZXJFbGVtZW50LCBwcm9wS2V5KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRydWUgJiZcbiAgICAvLyBDb252aW5jZSBGbG93IHdlJ3ZlIGNhbGN1bGF0ZWQgaXQgKGl0J3MgREVWLW9ubHkgaW4gdGhpcyBtZXRob2QuKVxuICAgIHR5cGVvZiBpc0N1c3RvbUNvbXBvbmVudFRhZyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAvLyBWYWxpZGF0ZSB0aGF0IHRoZSBwcm9wZXJ0aWVzIGNvcnJlc3BvbmQgdG8gdGhlaXIgZXhwZWN0ZWQgdmFsdWVzLlxuICAgICAgdmFyIHNlcnZlclZhbHVlID0gdm9pZCAwO1xuICAgICAgdmFyIHByb3BlcnR5SW5mbyA9IGdldFByb3BlcnR5SW5mbyhwcm9wS2V5KTtcbiAgICAgIGlmIChzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcpIHtcbiAgICAgICAgLy8gRG9uJ3QgYm90aGVyIGNvbXBhcmluZy4gV2UncmUgaWdub3JpbmcgYWxsIHRoZXNlIHdhcm5pbmdzLlxuICAgICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBTVVBQUkVTU19DT05URU5UX0VESVRBQkxFX1dBUk5JTkcgfHwgcHJvcEtleSA9PT0gU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkckMSB8fFxuICAgICAgLy8gQ29udHJvbGxlZCBhdHRyaWJ1dGVzIGFyZSBub3QgdmFsaWRhdGVkXG4gICAgICAvLyBUT0RPOiBPbmx5IGlnbm9yZSB0aGVtIG9uIGNvbnRyb2xsZWQgdGFncy5cbiAgICAgIHByb3BLZXkgPT09ICd2YWx1ZScgfHwgcHJvcEtleSA9PT0gJ2NoZWNrZWQnIHx8IHByb3BLZXkgPT09ICdzZWxlY3RlZCcpIHtcbiAgICAgICAgLy8gTm9vcFxuICAgICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBEQU5HRVJPVVNMWV9TRVRfSU5ORVJfSFRNTCkge1xuICAgICAgICB2YXIgc2VydmVySFRNTCA9IGRvbUVsZW1lbnQuaW5uZXJIVE1MO1xuICAgICAgICB2YXIgbmV4dEh0bWwgPSBuZXh0UHJvcCA/IG5leHRQcm9wW0hUTUxdIDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgZXhwZWN0ZWRIVE1MID0gbm9ybWFsaXplSFRNTChkb21FbGVtZW50LCBuZXh0SHRtbCAhPSBudWxsID8gbmV4dEh0bWwgOiAnJyk7XG4gICAgICAgIGlmIChleHBlY3RlZEhUTUwgIT09IHNlcnZlckhUTUwpIHtcbiAgICAgICAgICB3YXJuRm9yUHJvcERpZmZlcmVuY2UocHJvcEtleSwgc2VydmVySFRNTCwgZXhwZWN0ZWRIVE1MKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBTVFlMRSQxKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWUgLSBTaG91bGQgYmUgaW5mZXJyZWQgYXMgbm90IHVuZGVmaW5lZC5cbiAgICAgICAgZXh0cmFBdHRyaWJ1dGVOYW1lcy5kZWxldGUocHJvcEtleSk7XG5cbiAgICAgICAgaWYgKGNhbkRpZmZTdHlsZUZvckh5ZHJhdGlvbldhcm5pbmcpIHtcbiAgICAgICAgICB2YXIgZXhwZWN0ZWRTdHlsZSA9IGNyZWF0ZURhbmdlcm91c1N0cmluZ0ZvclN0eWxlcyhuZXh0UHJvcCk7XG4gICAgICAgICAgc2VydmVyVmFsdWUgPSBkb21FbGVtZW50LmdldEF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICBpZiAoZXhwZWN0ZWRTdHlsZSAhPT0gc2VydmVyVmFsdWUpIHtcbiAgICAgICAgICAgIHdhcm5Gb3JQcm9wRGlmZmVyZW5jZShwcm9wS2V5LCBzZXJ2ZXJWYWx1ZSwgZXhwZWN0ZWRTdHlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWUgLSBTaG91bGQgYmUgaW5mZXJyZWQgYXMgbm90IHVuZGVmaW5lZC5cbiAgICAgICAgZXh0cmFBdHRyaWJ1dGVOYW1lcy5kZWxldGUocHJvcEtleS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgc2VydmVyVmFsdWUgPSBnZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBwcm9wS2V5LCBuZXh0UHJvcCk7XG5cbiAgICAgICAgaWYgKG5leHRQcm9wICE9PSBzZXJ2ZXJWYWx1ZSkge1xuICAgICAgICAgIHdhcm5Gb3JQcm9wRGlmZmVyZW5jZShwcm9wS2V5LCBzZXJ2ZXJWYWx1ZSwgbmV4dFByb3ApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFzaG91bGRJZ25vcmVBdHRyaWJ1dGUocHJvcEtleSwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykgJiYgIXNob3VsZFJlbW92ZUF0dHJpYnV0ZShwcm9wS2V5LCBuZXh0UHJvcCwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykpIHtcbiAgICAgICAgdmFyIGlzTWlzbWF0Y2hEdWVUb0JhZENhc2luZyA9IGZhbHNlO1xuICAgICAgICBpZiAocHJvcGVydHlJbmZvICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gJEZsb3dGaXhNZSAtIFNob3VsZCBiZSBpbmZlcnJlZCBhcyBub3QgdW5kZWZpbmVkLlxuICAgICAgICAgIGV4dHJhQXR0cmlidXRlTmFtZXMuZGVsZXRlKHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgICBzZXJ2ZXJWYWx1ZSA9IGdldFZhbHVlRm9yUHJvcGVydHkoZG9tRWxlbWVudCwgcHJvcEtleSwgbmV4dFByb3AsIHByb3BlcnR5SW5mbyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG93bk5hbWVzcGFjZSA9IHBhcmVudE5hbWVzcGFjZTtcbiAgICAgICAgICBpZiAob3duTmFtZXNwYWNlID09PSBIVE1MX05BTUVTUEFDRSkge1xuICAgICAgICAgICAgb3duTmFtZXNwYWNlID0gZ2V0SW50cmluc2ljTmFtZXNwYWNlKHRhZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvd25OYW1lc3BhY2UgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lIC0gU2hvdWxkIGJlIGluZmVycmVkIGFzIG5vdCB1bmRlZmluZWQuXG4gICAgICAgICAgICBleHRyYUF0dHJpYnV0ZU5hbWVzLmRlbGV0ZShwcm9wS2V5LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgc3RhbmRhcmROYW1lID0gZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUocHJvcEtleSk7XG4gICAgICAgICAgICBpZiAoc3RhbmRhcmROYW1lICE9PSBudWxsICYmIHN0YW5kYXJkTmFtZSAhPT0gcHJvcEtleSkge1xuICAgICAgICAgICAgICAvLyBJZiBhbiBTVkcgcHJvcCBpcyBzdXBwbGllZCB3aXRoIGJhZCBjYXNpbmcsIGl0IHdpbGxcbiAgICAgICAgICAgICAgLy8gYmUgc3VjY2Vzc2Z1bGx5IHBhcnNlZCBmcm9tIEhUTUwsIGJ1dCB3aWxsIHByb2R1Y2UgYSBtaXNtYXRjaFxuICAgICAgICAgICAgICAvLyAoYW5kIHdvdWxkIGJlIGluY29ycmVjdGx5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQpLlxuICAgICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSBhbHJlYWR5IHdhcm4gYWJvdXQgYmFkIGNhc2luZyBlbHNld2hlcmUuXG4gICAgICAgICAgICAgIC8vIFNvIHdlJ2xsIHNraXAgdGhlIG1pc2xlYWRpbmcgZXh0cmEgbWlzbWF0Y2ggd2FybmluZyBpbiB0aGlzIGNhc2UuXG4gICAgICAgICAgICAgIGlzTWlzbWF0Y2hEdWVUb0JhZENhc2luZyA9IHRydWU7XG4gICAgICAgICAgICAgIC8vICRGbG93Rml4TWUgLSBTaG91bGQgYmUgaW5mZXJyZWQgYXMgbm90IHVuZGVmaW5lZC5cbiAgICAgICAgICAgICAgZXh0cmFBdHRyaWJ1dGVOYW1lcy5kZWxldGUoc3RhbmRhcmROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICRGbG93Rml4TWUgLSBTaG91bGQgYmUgaW5mZXJyZWQgYXMgbm90IHVuZGVmaW5lZC5cbiAgICAgICAgICAgIGV4dHJhQXR0cmlidXRlTmFtZXMuZGVsZXRlKHByb3BLZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZXJ2ZXJWYWx1ZSA9IGdldFZhbHVlRm9yQXR0cmlidXRlKGRvbUVsZW1lbnQsIHByb3BLZXksIG5leHRQcm9wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0UHJvcCAhPT0gc2VydmVyVmFsdWUgJiYgIWlzTWlzbWF0Y2hEdWVUb0JhZENhc2luZykge1xuICAgICAgICAgIHdhcm5Gb3JQcm9wRGlmZmVyZW5jZShwcm9wS2V5LCBzZXJ2ZXJWYWx1ZSwgbmV4dFByb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAge1xuICAgIC8vICRGbG93Rml4TWUgLSBTaG91bGQgYmUgaW5mZXJyZWQgYXMgbm90IHVuZGVmaW5lZC5cbiAgICBpZiAoZXh0cmFBdHRyaWJ1dGVOYW1lcy5zaXplID4gMCAmJiAhc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lIC0gU2hvdWxkIGJlIGluZmVycmVkIGFzIG5vdCB1bmRlZmluZWQuXG4gICAgICB3YXJuRm9yRXh0cmFBdHRyaWJ1dGVzKGV4dHJhQXR0cmlidXRlTmFtZXMpO1xuICAgIH1cbiAgfVxuXG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSAnaW5wdXQnOlxuICAgICAgLy8gVE9ETzogTWFrZSBzdXJlIHdlIGNoZWNrIGlmIHRoaXMgaXMgc3RpbGwgdW5tb3VudGVkIG9yIGRvIGFueSBjbGVhblxuICAgICAgLy8gdXAgbmVjZXNzYXJ5IHNpbmNlIHdlIG5ldmVyIHN0b3AgdHJhY2tpbmcgYW55bW9yZS5cbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcG9zdE1vdW50V3JhcHBlcihkb21FbGVtZW50LCByYXdQcm9wcywgdHJ1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAvLyBUT0RPOiBNYWtlIHN1cmUgd2UgY2hlY2sgaWYgdGhpcyBpcyBzdGlsbCB1bm1vdW50ZWQgb3IgZG8gYW55IGNsZWFuXG4gICAgICAvLyB1cCBuZWNlc3Nhcnkgc2luY2Ugd2UgbmV2ZXIgc3RvcCB0cmFja2luZyBhbnltb3JlLlxuICAgICAgdHJhY2soZG9tRWxlbWVudCk7XG4gICAgICBwb3N0TW91bnRXcmFwcGVyJDMoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICBjYXNlICdvcHRpb24nOlxuICAgICAgLy8gRm9yIGlucHV0IGFuZCB0ZXh0YXJlYSB3ZSBjdXJyZW50IGFsd2F5cyBzZXQgdGhlIHZhbHVlIHByb3BlcnR5IGF0XG4gICAgICAvLyBwb3N0IG1vdW50IHRvIGZvcmNlIGl0IHRvIGRpdmVyZ2UgZnJvbSBhdHRyaWJ1dGVzLiBIb3dldmVyLCBmb3JcbiAgICAgIC8vIG9wdGlvbiBhbmQgc2VsZWN0IHdlIGRvbid0IHF1aXRlIGRvIHRoZSBzYW1lIHRoaW5nIGFuZCBzZWxlY3RcbiAgICAgIC8vIGlzIG5vdCByZXNpbGllbnQgdG8gdGhlIERPTSBzdGF0ZSBjaGFuZ2luZyBzbyB3ZSBkb24ndCBkbyB0aGF0IGhlcmUuXG4gICAgICAvLyBUT0RPOiBDb25zaWRlciBub3QgZG9pbmcgdGhpcyBmb3IgaW5wdXQgYW5kIHRleHRhcmVhLlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmICh0eXBlb2YgcmF3UHJvcHMub25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBUT0RPOiBUaGlzIGNhc3QgbWF5IG5vdCBiZSBzb3VuZCBmb3IgU1ZHLCBNYXRoTUwgb3IgY3VzdG9tIGVsZW1lbnRzLlxuICAgICAgICB0cmFwQ2xpY2tPbk5vbkludGVyYWN0aXZlRWxlbWVudChkb21FbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIHVwZGF0ZVBheWxvYWQ7XG59XG5cbmZ1bmN0aW9uIGRpZmZIeWRyYXRlZFRleHQodGV4dE5vZGUsIHRleHQpIHtcbiAgdmFyIGlzRGlmZmVyZW50ID0gdGV4dE5vZGUubm9kZVZhbHVlICE9PSB0ZXh0O1xuICByZXR1cm4gaXNEaWZmZXJlbnQ7XG59XG5cbmZ1bmN0aW9uIHdhcm5Gb3JVbm1hdGNoZWRUZXh0KHRleHROb2RlLCB0ZXh0KSB7XG4gIHtcbiAgICB3YXJuRm9yVGV4dERpZmZlcmVuY2UodGV4dE5vZGUubm9kZVZhbHVlLCB0ZXh0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50KHBhcmVudE5vZGUsIGNoaWxkKSB7XG4gIHtcbiAgICBpZiAoZGlkV2FybkludmFsaWRIeWRyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlkV2FybkludmFsaWRIeWRyYXRpb24gPSB0cnVlO1xuICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0RpZCBub3QgZXhwZWN0IHNlcnZlciBIVE1MIHRvIGNvbnRhaW4gYSA8JXM+IGluIDwlcz4uJywgY2hpbGQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwgcGFyZW50Tm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0KHBhcmVudE5vZGUsIGNoaWxkKSB7XG4gIHtcbiAgICBpZiAoZGlkV2FybkludmFsaWRIeWRyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlkV2FybkludmFsaWRIeWRyYXRpb24gPSB0cnVlO1xuICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0RpZCBub3QgZXhwZWN0IHNlcnZlciBIVE1MIHRvIGNvbnRhaW4gdGhlIHRleHQgbm9kZSBcIiVzXCIgaW4gPCVzPi4nLCBjaGlsZC5ub2RlVmFsdWUsIHBhcmVudE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50KHBhcmVudE5vZGUsIHRhZywgcHJvcHMpIHtcbiAge1xuICAgIGlmIChkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbiA9IHRydWU7XG4gICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnRXhwZWN0ZWQgc2VydmVyIEhUTUwgdG8gY29udGFpbiBhIG1hdGNoaW5nIDwlcz4gaW4gPCVzPi4nLCB0YWcsIHBhcmVudE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0KHBhcmVudE5vZGUsIHRleHQpIHtcbiAge1xuICAgIGlmICh0ZXh0ID09PSAnJykge1xuICAgICAgLy8gV2UgZXhwZWN0IHRvIGluc2VydCBlbXB0eSB0ZXh0IG5vZGVzIHNpbmNlIHRoZXkncmUgbm90IHJlcHJlc2VudGVkIGluXG4gICAgICAvLyB0aGUgSFRNTC5cbiAgICAgIC8vIFRPRE86IFJlbW92ZSB0aGlzIHNwZWNpYWwgY2FzZSBpZiB3ZSBjYW4ganVzdCBhdm9pZCBpbnNlcnRpbmcgZW1wdHlcbiAgICAgIC8vIHRleHQgbm9kZXMuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbiA9IHRydWU7XG4gICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnRXhwZWN0ZWQgc2VydmVyIEhUTUwgdG8gY29udGFpbiBhIG1hdGNoaW5nIHRleHQgbm9kZSBmb3IgXCIlc1wiIGluIDwlcz4uJywgdGV4dCwgcGFyZW50Tm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN0b3JlQ29udHJvbGxlZFN0YXRlJDEoZG9tRWxlbWVudCwgdGFnLCBwcm9wcykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgIHJlc3RvcmVDb250cm9sbGVkU3RhdGUoZG9tRWxlbWVudCwgcHJvcHMpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgIHJlc3RvcmVDb250cm9sbGVkU3RhdGUkMyhkb21FbGVtZW50LCBwcm9wcyk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIHJlc3RvcmVDb250cm9sbGVkU3RhdGUkMihkb21FbGVtZW50LCBwcm9wcyk7XG4gICAgICByZXR1cm47XG4gIH1cbn1cblxuLy8gVE9ETzogZGlyZWN0IGltcG9ydHMgbGlrZSBzb21lLXBhY2thZ2Uvc3JjLyogYXJlIGJhZC4gRml4IG1lLlxudmFyIHZhbGlkYXRlRE9NTmVzdGluZyA9IGZ1bmN0aW9uICgpIHt9O1xudmFyIHVwZGF0ZWRBbmNlc3RvckluZm8gPSBmdW5jdGlvbiAoKSB7fTtcblxue1xuICAvLyBUaGlzIHZhbGlkYXRpb24gY29kZSB3YXMgd3JpdHRlbiBiYXNlZCBvbiB0aGUgSFRNTDUgcGFyc2luZyBzcGVjOlxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNoYXMtYW4tZWxlbWVudC1pbi1zY29wZVxuICAvL1xuICAvLyBOb3RlOiB0aGlzIGRvZXMgbm90IGNhdGNoIGFsbCBpbnZhbGlkIG5lc3RpbmcsIG5vciBkb2VzIGl0IHRyeSB0byAoYXMgaXQnc1xuICAvLyBub3QgY2xlYXIgd2hhdCBwcmFjdGljYWwgYmVuZWZpdCBkb2luZyBzbyBwcm92aWRlcyk7IGluc3RlYWQsIHdlIHdhcm4gb25seVxuICAvLyBmb3IgY2FzZXMgd2hlcmUgdGhlIHBhcnNlciB3aWxsIGdpdmUgYSBwYXJzZSB0cmVlIGRpZmZlcmluZyBmcm9tIHdoYXQgUmVhY3RcbiAgLy8gaW50ZW5kZWQuIEZvciBleGFtcGxlLCA8Yj48ZGl2PjwvZGl2PjwvYj4gaXMgaW52YWxpZCBidXQgd2UgZG9uJ3Qgd2FyblxuICAvLyBiZWNhdXNlIGl0IHN0aWxsIHBhcnNlcyBjb3JyZWN0bHk7IHdlIGRvIHdhcm4gZm9yIG90aGVyIGNhc2VzIGxpa2UgbmVzdGVkXG4gIC8vIDxwPiB0YWdzIHdoZXJlIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNlY29uZCBlbGVtZW50IGltcGxpY2l0bHkgY2xvc2VzIHRoZVxuICAvLyBmaXJzdCwgY2F1c2luZyBhIGNvbmZ1c2luZyBtZXNzLlxuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3NwZWNpYWxcbiAgdmFyIHNwZWNpYWxUYWdzID0gWydhZGRyZXNzJywgJ2FwcGxldCcsICdhcmVhJywgJ2FydGljbGUnLCAnYXNpZGUnLCAnYmFzZScsICdiYXNlZm9udCcsICdiZ3NvdW5kJywgJ2Jsb2NrcXVvdGUnLCAnYm9keScsICdicicsICdidXR0b24nLCAnY2FwdGlvbicsICdjZW50ZXInLCAnY29sJywgJ2NvbGdyb3VwJywgJ2RkJywgJ2RldGFpbHMnLCAnZGlyJywgJ2RpdicsICdkbCcsICdkdCcsICdlbWJlZCcsICdmaWVsZHNldCcsICdmaWdjYXB0aW9uJywgJ2ZpZ3VyZScsICdmb290ZXInLCAnZm9ybScsICdmcmFtZScsICdmcmFtZXNldCcsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkJywgJ2hlYWRlcicsICdoZ3JvdXAnLCAnaHInLCAnaHRtbCcsICdpZnJhbWUnLCAnaW1nJywgJ2lucHV0JywgJ2lzaW5kZXgnLCAnbGknLCAnbGluaycsICdsaXN0aW5nJywgJ21haW4nLCAnbWFycXVlZScsICdtZW51JywgJ21lbnVpdGVtJywgJ21ldGEnLCAnbmF2JywgJ25vZW1iZWQnLCAnbm9mcmFtZXMnLCAnbm9zY3JpcHQnLCAnb2JqZWN0JywgJ29sJywgJ3AnLCAncGFyYW0nLCAncGxhaW50ZXh0JywgJ3ByZScsICdzY3JpcHQnLCAnc2VjdGlvbicsICdzZWxlY3QnLCAnc291cmNlJywgJ3N0eWxlJywgJ3N1bW1hcnknLCAndGFibGUnLCAndGJvZHknLCAndGQnLCAndGVtcGxhdGUnLCAndGV4dGFyZWEnLCAndGZvb3QnLCAndGgnLCAndGhlYWQnLCAndGl0bGUnLCAndHInLCAndHJhY2snLCAndWwnLCAnd2JyJywgJ3htcCddO1xuXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2hhcy1hbi1lbGVtZW50LWluLXNjb3BlXG4gIHZhciBpblNjb3BlVGFncyA9IFsnYXBwbGV0JywgJ2NhcHRpb24nLCAnaHRtbCcsICd0YWJsZScsICd0ZCcsICd0aCcsICdtYXJxdWVlJywgJ29iamVjdCcsICd0ZW1wbGF0ZScsXG5cbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaHRtbC1pbnRlZ3JhdGlvbi1wb2ludFxuICAvLyBUT0RPOiBEaXN0aW5ndWlzaCBieSBuYW1lc3BhY2UgaGVyZSAtLSBmb3IgPHRpdGxlPiwgaW5jbHVkaW5nIGl0IGhlcmVcbiAgLy8gZXJycyBvbiB0aGUgc2lkZSBvZiBmZXdlciB3YXJuaW5nc1xuICAnZm9yZWlnbk9iamVjdCcsICdkZXNjJywgJ3RpdGxlJ107XG5cbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaGFzLWFuLWVsZW1lbnQtaW4tYnV0dG9uLXNjb3BlXG4gIHZhciBidXR0b25TY29wZVRhZ3MgPSBpblNjb3BlVGFncy5jb25jYXQoWydidXR0b24nXSk7XG5cbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjZ2VuZXJhdGUtaW1wbGllZC1lbmQtdGFnc1xuICB2YXIgaW1wbGllZEVuZFRhZ3MgPSBbJ2RkJywgJ2R0JywgJ2xpJywgJ29wdGlvbicsICdvcHRncm91cCcsICdwJywgJ3JwJywgJ3J0J107XG5cbiAgdmFyIGVtcHR5QW5jZXN0b3JJbmZvID0ge1xuICAgIGN1cnJlbnQ6IG51bGwsXG5cbiAgICBmb3JtVGFnOiBudWxsLFxuICAgIGFUYWdJblNjb3BlOiBudWxsLFxuICAgIGJ1dHRvblRhZ0luU2NvcGU6IG51bGwsXG4gICAgbm9iclRhZ0luU2NvcGU6IG51bGwsXG4gICAgcFRhZ0luQnV0dG9uU2NvcGU6IG51bGwsXG5cbiAgICBsaXN0SXRlbVRhZ0F1dG9jbG9zaW5nOiBudWxsLFxuICAgIGRsSXRlbVRhZ0F1dG9jbG9zaW5nOiBudWxsXG4gIH07XG5cbiAgdXBkYXRlZEFuY2VzdG9ySW5mbyA9IGZ1bmN0aW9uIChvbGRJbmZvLCB0YWcpIHtcbiAgICB2YXIgYW5jZXN0b3JJbmZvID0gX2Fzc2lnbih7fSwgb2xkSW5mbyB8fCBlbXB0eUFuY2VzdG9ySW5mbyk7XG4gICAgdmFyIGluZm8gPSB7IHRhZzogdGFnIH07XG5cbiAgICBpZiAoaW5TY29wZVRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSkge1xuICAgICAgYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlID0gbnVsbDtcbiAgICAgIGFuY2VzdG9ySW5mby5idXR0b25UYWdJblNjb3BlID0gbnVsbDtcbiAgICAgIGFuY2VzdG9ySW5mby5ub2JyVGFnSW5TY29wZSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChidXR0b25TY29wZVRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSkge1xuICAgICAgYW5jZXN0b3JJbmZvLnBUYWdJbkJ1dHRvblNjb3BlID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZWUgcnVsZXMgZm9yICdsaScsICdkZCcsICdkdCcgc3RhcnQgdGFncyBpblxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmJvZHlcbiAgICBpZiAoc3BlY2lhbFRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSAmJiB0YWcgIT09ICdhZGRyZXNzJyAmJiB0YWcgIT09ICdkaXYnICYmIHRhZyAhPT0gJ3AnKSB7XG4gICAgICBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZyA9IG51bGw7XG4gICAgICBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3NpbmcgPSBudWxsO1xuICAgIH1cblxuICAgIGFuY2VzdG9ySW5mby5jdXJyZW50ID0gaW5mbztcblxuICAgIGlmICh0YWcgPT09ICdmb3JtJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmZvcm1UYWcgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAnYScpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5hVGFnSW5TY29wZSA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdidXR0b24nKSB7XG4gICAgICBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZSA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdub2JyJykge1xuICAgICAgYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ3AnKSB7XG4gICAgICBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGUgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAnbGknKSB7XG4gICAgICBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZyA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdkZCcgfHwgdGFnID09PSAnZHQnKSB7XG4gICAgICBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3NpbmcgPSBpbmZvO1xuICAgIH1cblxuICAgIHJldHVybiBhbmNlc3RvckluZm87XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlclxuICAgKi9cbiAgdmFyIGlzVGFnVmFsaWRXaXRoUGFyZW50ID0gZnVuY3Rpb24gKHRhZywgcGFyZW50VGFnKSB7XG4gICAgLy8gRmlyc3QsIGxldCdzIGNoZWNrIGlmIHdlJ3JlIGluIGFuIHVudXN1YWwgcGFyc2luZyBtb2RlLi4uXG4gICAgc3dpdGNoIChwYXJlbnRUYWcpIHtcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnNlbGVjdFxuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ29wdGlvbicgfHwgdGFnID09PSAnb3B0Z3JvdXAnIHx8IHRhZyA9PT0gJyN0ZXh0JztcbiAgICAgIGNhc2UgJ29wdGdyb3VwJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ29wdGlvbicgfHwgdGFnID09PSAnI3RleHQnO1xuICAgICAgLy8gU3RyaWN0bHkgc3BlYWtpbmcsIHNlZWluZyBhbiA8b3B0aW9uPiBkb2Vzbid0IG1lYW4gd2UncmUgaW4gYSA8c2VsZWN0PlxuICAgICAgLy8gYnV0XG4gICAgICBjYXNlICdvcHRpb24nOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnI3RleHQnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludGRcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmNhcHRpb25cbiAgICAgIC8vIE5vIHNwZWNpYWwgYmVoYXZpb3Igc2luY2UgdGhlc2UgcnVsZXMgZmFsbCBiYWNrIHRvIFwiaW4gYm9keVwiIG1vZGUgZm9yXG4gICAgICAvLyBhbGwgZXhjZXB0IHNwZWNpYWwgdGFibGUgbm9kZXMgd2hpY2ggY2F1c2UgYmFkIHBhcnNpbmcgYmVoYXZpb3IgYW55d2F5LlxuXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50clxuICAgICAgY2FzZSAndHInOlxuICAgICAgICByZXR1cm4gdGFnID09PSAndGgnIHx8IHRhZyA9PT0gJ3RkJyB8fCB0YWcgPT09ICdzdHlsZScgfHwgdGFnID09PSAnc2NyaXB0JyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50Ym9keVxuICAgICAgY2FzZSAndGJvZHknOlxuICAgICAgY2FzZSAndGhlYWQnOlxuICAgICAgY2FzZSAndGZvb3QnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAndHInIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmNvbGdyb3VwXG4gICAgICBjYXNlICdjb2xncm91cCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdjb2wnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnRhYmxlXG4gICAgICBjYXNlICd0YWJsZSc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdjYXB0aW9uJyB8fCB0YWcgPT09ICdjb2xncm91cCcgfHwgdGFnID09PSAndGJvZHknIHx8IHRhZyA9PT0gJ3Rmb290JyB8fCB0YWcgPT09ICd0aGVhZCcgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluaGVhZFxuICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdiYXNlJyB8fCB0YWcgPT09ICdiYXNlZm9udCcgfHwgdGFnID09PSAnYmdzb3VuZCcgfHwgdGFnID09PSAnbGluaycgfHwgdGFnID09PSAnbWV0YScgfHwgdGFnID09PSAndGl0bGUnIHx8IHRhZyA9PT0gJ25vc2NyaXB0JyB8fCB0YWcgPT09ICdub2ZyYW1lcycgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2VtYW50aWNzLmh0bWwjdGhlLWh0bWwtZWxlbWVudFxuICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdoZWFkJyB8fCB0YWcgPT09ICdib2R5JztcbiAgICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdodG1sJztcbiAgICB9XG5cbiAgICAvLyBQcm9iYWJseSBpbiB0aGUgXCJpbiBib2R5XCIgcGFyc2luZyBtb2RlLCBzbyB3ZSBvdXRsYXcgb25seSB0YWcgY29tYm9zXG4gICAgLy8gd2hlcmUgdGhlIHBhcnNpbmcgcnVsZXMgY2F1c2UgaW1wbGljaXQgb3BlbnMgb3IgY2xvc2VzIHRvIGJlIGFkZGVkLlxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmJvZHlcbiAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgY2FzZSAnaDEnOlxuICAgICAgY2FzZSAnaDInOlxuICAgICAgY2FzZSAnaDMnOlxuICAgICAgY2FzZSAnaDQnOlxuICAgICAgY2FzZSAnaDUnOlxuICAgICAgY2FzZSAnaDYnOlxuICAgICAgICByZXR1cm4gcGFyZW50VGFnICE9PSAnaDEnICYmIHBhcmVudFRhZyAhPT0gJ2gyJyAmJiBwYXJlbnRUYWcgIT09ICdoMycgJiYgcGFyZW50VGFnICE9PSAnaDQnICYmIHBhcmVudFRhZyAhPT0gJ2g1JyAmJiBwYXJlbnRUYWcgIT09ICdoNic7XG5cbiAgICAgIGNhc2UgJ3JwJzpcbiAgICAgIGNhc2UgJ3J0JzpcbiAgICAgICAgcmV0dXJuIGltcGxpZWRFbmRUYWdzLmluZGV4T2YocGFyZW50VGFnKSA9PT0gLTE7XG5cbiAgICAgIGNhc2UgJ2JvZHknOlxuICAgICAgY2FzZSAnY2FwdGlvbic6XG4gICAgICBjYXNlICdjb2wnOlxuICAgICAgY2FzZSAnY29sZ3JvdXAnOlxuICAgICAgY2FzZSAnZnJhbWUnOlxuICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICBjYXNlICdodG1sJzpcbiAgICAgIGNhc2UgJ3Rib2R5JzpcbiAgICAgIGNhc2UgJ3RkJzpcbiAgICAgIGNhc2UgJ3Rmb290JzpcbiAgICAgIGNhc2UgJ3RoJzpcbiAgICAgIGNhc2UgJ3RoZWFkJzpcbiAgICAgIGNhc2UgJ3RyJzpcbiAgICAgICAgLy8gVGhlc2UgdGFncyBhcmUgb25seSB2YWxpZCB3aXRoIGEgZmV3IHBhcmVudHMgdGhhdCBoYXZlIHNwZWNpYWwgY2hpbGRcbiAgICAgICAgLy8gcGFyc2luZyBydWxlcyAtLSBpZiB3ZSdyZSBkb3duIGhlcmUsIHRoZW4gbm9uZSBvZiB0aG9zZSBtYXRjaGVkIGFuZFxuICAgICAgICAvLyBzbyB3ZSBhbGxvdyBpdCBvbmx5IGlmIHdlIGRvbid0IGtub3cgd2hhdCB0aGUgcGFyZW50IGlzLCBhcyBhbGwgb3RoZXJcbiAgICAgICAgLy8gY2FzZXMgYXJlIGludmFsaWQuXG4gICAgICAgIHJldHVybiBwYXJlbnRUYWcgPT0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyXG4gICAqL1xuICB2YXIgZmluZEludmFsaWRBbmNlc3RvckZvclRhZyA9IGZ1bmN0aW9uICh0YWcsIGFuY2VzdG9ySW5mbykge1xuICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICBjYXNlICdhZGRyZXNzJzpcbiAgICAgIGNhc2UgJ2FydGljbGUnOlxuICAgICAgY2FzZSAnYXNpZGUnOlxuICAgICAgY2FzZSAnYmxvY2txdW90ZSc6XG4gICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgY2FzZSAnZGV0YWlscyc6XG4gICAgICBjYXNlICdkaWFsb2cnOlxuICAgICAgY2FzZSAnZGlyJzpcbiAgICAgIGNhc2UgJ2Rpdic6XG4gICAgICBjYXNlICdkbCc6XG4gICAgICBjYXNlICdmaWVsZHNldCc6XG4gICAgICBjYXNlICdmaWdjYXB0aW9uJzpcbiAgICAgIGNhc2UgJ2ZpZ3VyZSc6XG4gICAgICBjYXNlICdmb290ZXInOlxuICAgICAgY2FzZSAnaGVhZGVyJzpcbiAgICAgIGNhc2UgJ2hncm91cCc6XG4gICAgICBjYXNlICdtYWluJzpcbiAgICAgIGNhc2UgJ21lbnUnOlxuICAgICAgY2FzZSAnbmF2JzpcbiAgICAgIGNhc2UgJ29sJzpcbiAgICAgIGNhc2UgJ3AnOlxuICAgICAgY2FzZSAnc2VjdGlvbic6XG4gICAgICBjYXNlICdzdW1tYXJ5JzpcbiAgICAgIGNhc2UgJ3VsJzpcbiAgICAgIGNhc2UgJ3ByZSc6XG4gICAgICBjYXNlICdsaXN0aW5nJzpcbiAgICAgIGNhc2UgJ3RhYmxlJzpcbiAgICAgIGNhc2UgJ2hyJzpcbiAgICAgIGNhc2UgJ3htcCc6XG4gICAgICBjYXNlICdoMSc6XG4gICAgICBjYXNlICdoMic6XG4gICAgICBjYXNlICdoMyc6XG4gICAgICBjYXNlICdoNCc6XG4gICAgICBjYXNlICdoNSc6XG4gICAgICBjYXNlICdoNic6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGU7XG5cbiAgICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmZvcm1UYWcgfHwgYW5jZXN0b3JJbmZvLnBUYWdJbkJ1dHRvblNjb3BlO1xuXG4gICAgICBjYXNlICdsaSc6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZztcblxuICAgICAgY2FzZSAnZGQnOlxuICAgICAgY2FzZSAnZHQnOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmRsSXRlbVRhZ0F1dG9jbG9zaW5nO1xuXG4gICAgICBjYXNlICdidXR0b24nOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmJ1dHRvblRhZ0luU2NvcGU7XG5cbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAvLyBTcGVjIHNheXMgc29tZXRoaW5nIGFib3V0IHN0b3JpbmcgYSBsaXN0IG9mIG1hcmtlcnMsIGJ1dCBpdCBzb3VuZHNcbiAgICAgICAgLy8gZXF1aXZhbGVudCB0byB0aGlzIGNoZWNrLlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlO1xuXG4gICAgICBjYXNlICdub2JyJzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5ub2JyVGFnSW5TY29wZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB2YXIgZGlkV2FybiA9IHt9O1xuXG4gIHZhbGlkYXRlRE9NTmVzdGluZyA9IGZ1bmN0aW9uIChjaGlsZFRhZywgY2hpbGRUZXh0LCBhbmNlc3RvckluZm8pIHtcbiAgICBhbmNlc3RvckluZm8gPSBhbmNlc3RvckluZm8gfHwgZW1wdHlBbmNlc3RvckluZm87XG4gICAgdmFyIHBhcmVudEluZm8gPSBhbmNlc3RvckluZm8uY3VycmVudDtcbiAgICB2YXIgcGFyZW50VGFnID0gcGFyZW50SW5mbyAmJiBwYXJlbnRJbmZvLnRhZztcblxuICAgIGlmIChjaGlsZFRleHQgIT0gbnVsbCkge1xuICAgICAgIShjaGlsZFRhZyA9PSBudWxsKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ3ZhbGlkYXRlRE9NTmVzdGluZzogd2hlbiBjaGlsZFRleHQgaXMgcGFzc2VkLCBjaGlsZFRhZyBzaG91bGQgYmUgbnVsbCcpIDogdm9pZCAwO1xuICAgICAgY2hpbGRUYWcgPSAnI3RleHQnO1xuICAgIH1cblxuICAgIHZhciBpbnZhbGlkUGFyZW50ID0gaXNUYWdWYWxpZFdpdGhQYXJlbnQoY2hpbGRUYWcsIHBhcmVudFRhZykgPyBudWxsIDogcGFyZW50SW5mbztcbiAgICB2YXIgaW52YWxpZEFuY2VzdG9yID0gaW52YWxpZFBhcmVudCA/IG51bGwgOiBmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnKGNoaWxkVGFnLCBhbmNlc3RvckluZm8pO1xuICAgIHZhciBpbnZhbGlkUGFyZW50T3JBbmNlc3RvciA9IGludmFsaWRQYXJlbnQgfHwgaW52YWxpZEFuY2VzdG9yO1xuICAgIGlmICghaW52YWxpZFBhcmVudE9yQW5jZXN0b3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYW5jZXN0b3JUYWcgPSBpbnZhbGlkUGFyZW50T3JBbmNlc3Rvci50YWc7XG4gICAgdmFyIGFkZGVuZHVtID0gZ2V0Q3VycmVudEZpYmVyU3RhY2tJbkRldigpO1xuXG4gICAgdmFyIHdhcm5LZXkgPSAhIWludmFsaWRQYXJlbnQgKyAnfCcgKyBjaGlsZFRhZyArICd8JyArIGFuY2VzdG9yVGFnICsgJ3wnICsgYWRkZW5kdW07XG4gICAgaWYgKGRpZFdhcm5bd2FybktleV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlkV2Fyblt3YXJuS2V5XSA9IHRydWU7XG5cbiAgICB2YXIgdGFnRGlzcGxheU5hbWUgPSBjaGlsZFRhZztcbiAgICB2YXIgd2hpdGVzcGFjZUluZm8gPSAnJztcbiAgICBpZiAoY2hpbGRUYWcgPT09ICcjdGV4dCcpIHtcbiAgICAgIGlmICgvXFxTLy50ZXN0KGNoaWxkVGV4dCkpIHtcbiAgICAgICAgdGFnRGlzcGxheU5hbWUgPSAnVGV4dCBub2Rlcyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YWdEaXNwbGF5TmFtZSA9ICdXaGl0ZXNwYWNlIHRleHQgbm9kZXMnO1xuICAgICAgICB3aGl0ZXNwYWNlSW5mbyA9IFwiIE1ha2Ugc3VyZSB5b3UgZG9uJ3QgaGF2ZSBhbnkgZXh0cmEgd2hpdGVzcGFjZSBiZXR3ZWVuIHRhZ3Mgb24gXCIgKyAnZWFjaCBsaW5lIG9mIHlvdXIgc291cmNlIGNvZGUuJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnRGlzcGxheU5hbWUgPSAnPCcgKyBjaGlsZFRhZyArICc+JztcbiAgICB9XG5cbiAgICBpZiAoaW52YWxpZFBhcmVudCkge1xuICAgICAgdmFyIGluZm8gPSAnJztcbiAgICAgIGlmIChhbmNlc3RvclRhZyA9PT0gJ3RhYmxlJyAmJiBjaGlsZFRhZyA9PT0gJ3RyJykge1xuICAgICAgICBpbmZvICs9ICcgQWRkIGEgPHRib2R5PiB0byB5b3VyIGNvZGUgdG8gbWF0Y2ggdGhlIERPTSB0cmVlIGdlbmVyYXRlZCBieSAnICsgJ3RoZSBicm93c2VyLic7XG4gICAgICB9XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICd2YWxpZGF0ZURPTU5lc3RpbmcoLi4uKTogJXMgY2Fubm90IGFwcGVhciBhcyBhIGNoaWxkIG9mIDwlcz4uJXMlcyVzJywgdGFnRGlzcGxheU5hbWUsIGFuY2VzdG9yVGFnLCB3aGl0ZXNwYWNlSW5mbywgaW5mbywgYWRkZW5kdW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICd2YWxpZGF0ZURPTU5lc3RpbmcoLi4uKTogJXMgY2Fubm90IGFwcGVhciBhcyBhIGRlc2NlbmRhbnQgb2YgJyArICc8JXM+LiVzJywgdGFnRGlzcGxheU5hbWUsIGFuY2VzdG9yVGFnLCBhZGRlbmR1bSk7XG4gICAgfVxuICB9O1xufVxuXG4vLyBSZW5kZXJlcnMgdGhhdCBkb24ndCBzdXBwb3J0IHBlcnNpc3RlbmNlXG4vLyBjYW4gcmUtZXhwb3J0IGV2ZXJ5dGhpbmcgZnJvbSB0aGlzIG1vZHVsZS5cblxuZnVuY3Rpb24gc2hpbSgpIHtcbiAgaW52YXJpYW50KGZhbHNlLCAnVGhlIGN1cnJlbnQgcmVuZGVyZXIgZG9lcyBub3Qgc3VwcG9ydCBwZXJzaXN0ZW5jZS4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbn1cblxuLy8gUGVyc2lzdGVuY2UgKHdoZW4gdW5zdXBwb3J0ZWQpXG52YXIgc3VwcG9ydHNQZXJzaXN0ZW5jZSA9IGZhbHNlO1xudmFyIGNsb25lSW5zdGFuY2UgPSBzaGltO1xudmFyIGNyZWF0ZUNvbnRhaW5lckNoaWxkU2V0ID0gc2hpbTtcbnZhciBhcHBlbmRDaGlsZFRvQ29udGFpbmVyQ2hpbGRTZXQgPSBzaGltO1xudmFyIGZpbmFsaXplQ29udGFpbmVyQ2hpbGRyZW4gPSBzaGltO1xudmFyIHJlcGxhY2VDb250YWluZXJDaGlsZHJlbiA9IHNoaW07XG52YXIgY2xvbmVIaWRkZW5JbnN0YW5jZSA9IHNoaW07XG52YXIgY2xvbmVVbmhpZGRlbkluc3RhbmNlID0gc2hpbTtcbnZhciBjcmVhdGVIaWRkZW5UZXh0SW5zdGFuY2UgPSBzaGltO1xuXG52YXIgU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkcgPSB2b2lkIDA7XG57XG4gIFNVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HID0gJ3N1cHByZXNzSHlkcmF0aW9uV2FybmluZyc7XG59XG5cbnZhciBTVFlMRSA9ICdzdHlsZSc7XG5cbnZhciBldmVudHNFbmFibGVkID0gbnVsbDtcbnZhciBzZWxlY3Rpb25JbmZvcm1hdGlvbiA9IG51bGw7XG5cbmZ1bmN0aW9uIHNob3VsZEF1dG9Gb2N1c0hvc3RDb21wb25lbnQodHlwZSwgcHJvcHMpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnYnV0dG9uJzpcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICByZXR1cm4gISFwcm9wcy5hdXRvRm9jdXM7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRSb290SG9zdENvbnRleHQocm9vdENvbnRhaW5lckluc3RhbmNlKSB7XG4gIHZhciB0eXBlID0gdm9pZCAwO1xuICB2YXIgbmFtZXNwYWNlID0gdm9pZCAwO1xuICB2YXIgbm9kZVR5cGUgPSByb290Q29udGFpbmVySW5zdGFuY2Uubm9kZVR5cGU7XG4gIHN3aXRjaCAobm9kZVR5cGUpIHtcbiAgICBjYXNlIERPQ1VNRU5UX05PREU6XG4gICAgY2FzZSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFOlxuICAgICAge1xuICAgICAgICB0eXBlID0gbm9kZVR5cGUgPT09IERPQ1VNRU5UX05PREUgPyAnI2RvY3VtZW50JyA6ICcjZnJhZ21lbnQnO1xuICAgICAgICB2YXIgcm9vdCA9IHJvb3RDb250YWluZXJJbnN0YW5jZS5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIG5hbWVzcGFjZSA9IHJvb3QgPyByb290Lm5hbWVzcGFjZVVSSSA6IGdldENoaWxkTmFtZXNwYWNlKG51bGwsICcnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IG5vZGVUeXBlID09PSBDT01NRU5UX05PREUgPyByb290Q29udGFpbmVySW5zdGFuY2UucGFyZW50Tm9kZSA6IHJvb3RDb250YWluZXJJbnN0YW5jZTtcbiAgICAgICAgdmFyIG93bk5hbWVzcGFjZSA9IGNvbnRhaW5lci5uYW1lc3BhY2VVUkkgfHwgbnVsbDtcbiAgICAgICAgdHlwZSA9IGNvbnRhaW5lci50YWdOYW1lO1xuICAgICAgICBuYW1lc3BhY2UgPSBnZXRDaGlsZE5hbWVzcGFjZShvd25OYW1lc3BhY2UsIHR5cGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgfVxuICB7XG4gICAgdmFyIHZhbGlkYXRlZFRhZyA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgX2FuY2VzdG9ySW5mbyA9IHVwZGF0ZWRBbmNlc3RvckluZm8obnVsbCwgdmFsaWRhdGVkVGFnKTtcbiAgICByZXR1cm4geyBuYW1lc3BhY2U6IG5hbWVzcGFjZSwgYW5jZXN0b3JJbmZvOiBfYW5jZXN0b3JJbmZvIH07XG4gIH1cbiAgcmV0dXJuIG5hbWVzcGFjZTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2hpbGRIb3N0Q29udGV4dChwYXJlbnRIb3N0Q29udGV4dCwgdHlwZSwgcm9vdENvbnRhaW5lckluc3RhbmNlKSB7XG4gIHtcbiAgICB2YXIgcGFyZW50SG9zdENvbnRleHREZXYgPSBwYXJlbnRIb3N0Q29udGV4dDtcbiAgICB2YXIgX25hbWVzcGFjZSA9IGdldENoaWxkTmFtZXNwYWNlKHBhcmVudEhvc3RDb250ZXh0RGV2Lm5hbWVzcGFjZSwgdHlwZSk7XG4gICAgdmFyIF9hbmNlc3RvckluZm8yID0gdXBkYXRlZEFuY2VzdG9ySW5mbyhwYXJlbnRIb3N0Q29udGV4dERldi5hbmNlc3RvckluZm8sIHR5cGUpO1xuICAgIHJldHVybiB7IG5hbWVzcGFjZTogX25hbWVzcGFjZSwgYW5jZXN0b3JJbmZvOiBfYW5jZXN0b3JJbmZvMiB9O1xuICB9XG4gIHZhciBwYXJlbnROYW1lc3BhY2UgPSBwYXJlbnRIb3N0Q29udGV4dDtcbiAgcmV0dXJuIGdldENoaWxkTmFtZXNwYWNlKHBhcmVudE5hbWVzcGFjZSwgdHlwZSk7XG59XG5cbmZ1bmN0aW9uIGdldFB1YmxpY0luc3RhbmNlKGluc3RhbmNlKSB7XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuZnVuY3Rpb24gcHJlcGFyZUZvckNvbW1pdChjb250YWluZXJJbmZvKSB7XG4gIGV2ZW50c0VuYWJsZWQgPSBpc0VuYWJsZWQoKTtcbiAgc2VsZWN0aW9uSW5mb3JtYXRpb24gPSBnZXRTZWxlY3Rpb25JbmZvcm1hdGlvbigpO1xuICBzZXRFbmFibGVkKGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gcmVzZXRBZnRlckNvbW1pdChjb250YWluZXJJbmZvKSB7XG4gIHJlc3RvcmVTZWxlY3Rpb24oc2VsZWN0aW9uSW5mb3JtYXRpb24pO1xuICBzZWxlY3Rpb25JbmZvcm1hdGlvbiA9IG51bGw7XG4gIHNldEVuYWJsZWQoZXZlbnRzRW5hYmxlZCk7XG4gIGV2ZW50c0VuYWJsZWQgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZSh0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCwgaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSkge1xuICB2YXIgcGFyZW50TmFtZXNwYWNlID0gdm9pZCAwO1xuICB7XG4gICAgLy8gVE9ETzogdGFrZSBuYW1lc3BhY2UgaW50byBhY2NvdW50IHdoZW4gdmFsaWRhdGluZy5cbiAgICB2YXIgaG9zdENvbnRleHREZXYgPSBob3N0Q29udGV4dDtcbiAgICB2YWxpZGF0ZURPTU5lc3RpbmcodHlwZSwgbnVsbCwgaG9zdENvbnRleHREZXYuYW5jZXN0b3JJbmZvKTtcbiAgICBpZiAodHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gPT09ICdudW1iZXInKSB7XG4gICAgICB2YXIgc3RyaW5nID0gJycgKyBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBvd25BbmNlc3RvckluZm8gPSB1cGRhdGVkQW5jZXN0b3JJbmZvKGhvc3RDb250ZXh0RGV2LmFuY2VzdG9ySW5mbywgdHlwZSk7XG4gICAgICB2YWxpZGF0ZURPTU5lc3RpbmcobnVsbCwgc3RyaW5nLCBvd25BbmNlc3RvckluZm8pO1xuICAgIH1cbiAgICBwYXJlbnROYW1lc3BhY2UgPSBob3N0Q29udGV4dERldi5uYW1lc3BhY2U7XG4gIH1cbiAgdmFyIGRvbUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KHR5cGUsIHByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIHBhcmVudE5hbWVzcGFjZSk7XG4gIHByZWNhY2hlRmliZXJOb2RlKGludGVybmFsSW5zdGFuY2VIYW5kbGUsIGRvbUVsZW1lbnQpO1xuICB1cGRhdGVGaWJlclByb3BzKGRvbUVsZW1lbnQsIHByb3BzKTtcbiAgcmV0dXJuIGRvbUVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZEluaXRpYWxDaGlsZChwYXJlbnRJbnN0YW5jZSwgY2hpbGQpIHtcbiAgcGFyZW50SW5zdGFuY2UuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbihkb21FbGVtZW50LCB0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCkge1xuICBzZXRJbml0aWFsUHJvcGVydGllcyhkb21FbGVtZW50LCB0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKTtcbiAgcmV0dXJuIHNob3VsZEF1dG9Gb2N1c0hvc3RDb21wb25lbnQodHlwZSwgcHJvcHMpO1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlVXBkYXRlKGRvbUVsZW1lbnQsIHR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCkge1xuICB7XG4gICAgdmFyIGhvc3RDb250ZXh0RGV2ID0gaG9zdENvbnRleHQ7XG4gICAgaWYgKHR5cGVvZiBuZXdQcm9wcy5jaGlsZHJlbiAhPT0gdHlwZW9mIG9sZFByb3BzLmNoaWxkcmVuICYmICh0eXBlb2YgbmV3UHJvcHMuY2hpbGRyZW4gPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBuZXdQcm9wcy5jaGlsZHJlbiA9PT0gJ251bWJlcicpKSB7XG4gICAgICB2YXIgc3RyaW5nID0gJycgKyBuZXdQcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBvd25BbmNlc3RvckluZm8gPSB1cGRhdGVkQW5jZXN0b3JJbmZvKGhvc3RDb250ZXh0RGV2LmFuY2VzdG9ySW5mbywgdHlwZSk7XG4gICAgICB2YWxpZGF0ZURPTU5lc3RpbmcobnVsbCwgc3RyaW5nLCBvd25BbmNlc3RvckluZm8pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGlmZlByb3BlcnRpZXMoZG9tRWxlbWVudCwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRTZXRUZXh0Q29udGVudCh0eXBlLCBwcm9wcykge1xuICByZXR1cm4gdHlwZSA9PT0gJ3RleHRhcmVhJyB8fCB0eXBlID09PSAnb3B0aW9uJyB8fCB0eXBlID09PSAnbm9zY3JpcHQnIHx8IHR5cGVvZiBwcm9wcy5jaGlsZHJlbiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT09ICdvYmplY3QnICYmIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICE9PSBudWxsICYmIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbCAhPSBudWxsO1xufVxuXG5mdW5jdGlvbiBzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlKHR5cGUsIHByb3BzKSB7XG4gIHJldHVybiAhIXByb3BzLmhpZGRlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dEluc3RhbmNlKHRleHQsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgaG9zdENvbnRleHQsIGludGVybmFsSW5zdGFuY2VIYW5kbGUpIHtcbiAge1xuICAgIHZhciBob3N0Q29udGV4dERldiA9IGhvc3RDb250ZXh0O1xuICAgIHZhbGlkYXRlRE9NTmVzdGluZyhudWxsLCB0ZXh0LCBob3N0Q29udGV4dERldi5hbmNlc3RvckluZm8pO1xuICB9XG4gIHZhciB0ZXh0Tm9kZSA9IGNyZWF0ZVRleHROb2RlKHRleHQsIHJvb3RDb250YWluZXJJbnN0YW5jZSk7XG4gIHByZWNhY2hlRmliZXJOb2RlKGludGVybmFsSW5zdGFuY2VIYW5kbGUsIHRleHROb2RlKTtcbiAgcmV0dXJuIHRleHROb2RlO1xufVxuXG52YXIgaXNQcmltYXJ5UmVuZGVyZXIgPSB0cnVlO1xudmFyIHNjaGVkdWxlVGltZW91dCA9IHNldFRpbWVvdXQ7XG52YXIgY2FuY2VsVGltZW91dCA9IGNsZWFyVGltZW91dDtcbnZhciBub1RpbWVvdXQgPSAtMTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gICAgIE11dGF0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBzdXBwb3J0c011dGF0aW9uID0gdHJ1ZTtcblxuZnVuY3Rpb24gY29tbWl0TW91bnQoZG9tRWxlbWVudCwgdHlwZSwgbmV3UHJvcHMsIGludGVybmFsSW5zdGFuY2VIYW5kbGUpIHtcbiAgLy8gRGVzcGl0ZSB0aGUgbmFtaW5nIHRoYXQgbWlnaHQgaW1wbHkgb3RoZXJ3aXNlLCB0aGlzIG1ldGhvZCBvbmx5XG4gIC8vIGZpcmVzIGlmIHRoZXJlIGlzIGFuIGBVcGRhdGVgIGVmZmVjdCBzY2hlZHVsZWQgZHVyaW5nIG1vdW50aW5nLlxuICAvLyBUaGlzIGhhcHBlbnMgaWYgYGZpbmFsaXplSW5pdGlhbENoaWxkcmVuYCByZXR1cm5zIGB0cnVlYCAod2hpY2ggaXRcbiAgLy8gZG9lcyB0byBpbXBsZW1lbnQgdGhlIGBhdXRvRm9jdXNgIGF0dHJpYnV0ZSBvbiB0aGUgY2xpZW50KS4gQnV0XG4gIC8vIHRoZXJlIGFyZSBhbHNvIG90aGVyIGNhc2VzIHdoZW4gdGhpcyBtaWdodCBoYXBwZW4gKHN1Y2ggYXMgcGF0Y2hpbmdcbiAgLy8gdXAgdGV4dCBjb250ZW50IGR1cmluZyBoeWRyYXRpb24gbWlzbWF0Y2gpLiBTbyB3ZSdsbCBjaGVjayB0aGlzIGFnYWluLlxuICBpZiAoc2hvdWxkQXV0b0ZvY3VzSG9zdENvbXBvbmVudCh0eXBlLCBuZXdQcm9wcykpIHtcbiAgICBkb21FbGVtZW50LmZvY3VzKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0VXBkYXRlKGRvbUVsZW1lbnQsIHVwZGF0ZVBheWxvYWQsIHR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcywgaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSkge1xuICAvLyBVcGRhdGUgdGhlIHByb3BzIGhhbmRsZSBzbyB0aGF0IHdlIGtub3cgd2hpY2ggcHJvcHMgYXJlIHRoZSBvbmVzIHdpdGhcbiAgLy8gd2l0aCBjdXJyZW50IGV2ZW50IGhhbmRsZXJzLlxuICB1cGRhdGVGaWJlclByb3BzKGRvbUVsZW1lbnQsIG5ld1Byb3BzKTtcbiAgLy8gQXBwbHkgdGhlIGRpZmYgdG8gdGhlIERPTSBub2RlLlxuICB1cGRhdGVQcm9wZXJ0aWVzKGRvbUVsZW1lbnQsIHVwZGF0ZVBheWxvYWQsIHR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcyk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCkge1xuICBzZXRUZXh0Q29udGVudChkb21FbGVtZW50LCAnJyk7XG59XG5cbmZ1bmN0aW9uIGNvbW1pdFRleHRVcGRhdGUodGV4dEluc3RhbmNlLCBvbGRUZXh0LCBuZXdUZXh0KSB7XG4gIHRleHRJbnN0YW5jZS5ub2RlVmFsdWUgPSBuZXdUZXh0O1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZChwYXJlbnRJbnN0YW5jZSwgY2hpbGQpIHtcbiAgcGFyZW50SW5zdGFuY2UuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZFRvQ29udGFpbmVyKGNvbnRhaW5lciwgY2hpbGQpIHtcbiAgdmFyIHBhcmVudE5vZGUgPSB2b2lkIDA7XG4gIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IENPTU1FTlRfTk9ERSkge1xuICAgIHBhcmVudE5vZGUgPSBjb250YWluZXIucGFyZW50Tm9kZTtcbiAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShjaGlsZCwgY29udGFpbmVyKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnROb2RlID0gY29udGFpbmVyO1xuICAgIHBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICB9XG4gIC8vIFRoaXMgY29udGFpbmVyIG1pZ2h0IGJlIHVzZWQgZm9yIGEgcG9ydGFsLlxuICAvLyBJZiBzb21ldGhpbmcgaW5zaWRlIGEgcG9ydGFsIGlzIGNsaWNrZWQsIHRoYXQgY2xpY2sgc2hvdWxkIGJ1YmJsZVxuICAvLyB0aHJvdWdoIHRoZSBSZWFjdCB0cmVlLiBIb3dldmVyLCBvbiBNb2JpbGUgU2FmYXJpIHRoZSBjbGljayB3b3VsZFxuICAvLyBuZXZlciBidWJibGUgdGhyb3VnaCB0aGUgKkRPTSogdHJlZSB1bmxlc3MgYW4gYW5jZXN0b3Igd2l0aCBvbmNsaWNrXG4gIC8vIGV2ZW50IGV4aXN0cy4gU28gd2Ugd291bGRuJ3Qgc2VlIGl0IGFuZCBkaXNwYXRjaCBpdC5cbiAgLy8gVGhpcyBpcyB3aHkgd2UgZW5zdXJlIHRoYXQgbm9uIFJlYWN0IHJvb3QgY29udGFpbmVycyBoYXZlIGlubGluZSBvbmNsaWNrXG4gIC8vIGRlZmluZWQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTE5MThcbiAgdmFyIHJlYWN0Um9vdENvbnRhaW5lciA9IGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyO1xuICBpZiAoKHJlYWN0Um9vdENvbnRhaW5lciA9PT0gbnVsbCB8fCByZWFjdFJvb3RDb250YWluZXIgPT09IHVuZGVmaW5lZCkgJiYgcGFyZW50Tm9kZS5vbmNsaWNrID09PSBudWxsKSB7XG4gICAgLy8gVE9ETzogVGhpcyBjYXN0IG1heSBub3QgYmUgc291bmQgZm9yIFNWRywgTWF0aE1MIG9yIGN1c3RvbSBlbGVtZW50cy5cbiAgICB0cmFwQ2xpY2tPbk5vbkludGVyYWN0aXZlRWxlbWVudChwYXJlbnROb2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUocGFyZW50SW5zdGFuY2UsIGNoaWxkLCBiZWZvcmVDaGlsZCkge1xuICBwYXJlbnRJbnN0YW5jZS5pbnNlcnRCZWZvcmUoY2hpbGQsIGJlZm9yZUNoaWxkKTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0SW5Db250YWluZXJCZWZvcmUoY29udGFpbmVyLCBjaGlsZCwgYmVmb3JlQ2hpbGQpIHtcbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFKSB7XG4gICAgY29udGFpbmVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkLCBiZWZvcmVDaGlsZCk7XG4gIH0gZWxzZSB7XG4gICAgY29udGFpbmVyLmluc2VydEJlZm9yZShjaGlsZCwgYmVmb3JlQ2hpbGQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkKHBhcmVudEluc3RhbmNlLCBjaGlsZCkge1xuICBwYXJlbnRJbnN0YW5jZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcihjb250YWluZXIsIGNoaWxkKSB7XG4gIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IENPTU1FTlRfTk9ERSkge1xuICAgIGNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgfSBlbHNlIHtcbiAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhpZGVJbnN0YW5jZShpbnN0YW5jZSkge1xuICAvLyBUT0RPOiBEb2VzIHRoaXMgd29yayBmb3IgYWxsIGVsZW1lbnQgdHlwZXM/IFdoYXQgYWJvdXQgTWF0aE1MPyBTaG91bGQgd2VcbiAgLy8gcGFzcyBob3N0IGNvbnRleHQgdG8gdGhpcyBtZXRob2Q/XG4gIGluc3RhbmNlID0gaW5zdGFuY2U7XG4gIGluc3RhbmNlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG59XG5cbmZ1bmN0aW9uIGhpZGVUZXh0SW5zdGFuY2UodGV4dEluc3RhbmNlKSB7XG4gIHRleHRJbnN0YW5jZS5ub2RlVmFsdWUgPSAnJztcbn1cblxuZnVuY3Rpb24gdW5oaWRlSW5zdGFuY2UoaW5zdGFuY2UsIHByb3BzKSB7XG4gIGluc3RhbmNlID0gaW5zdGFuY2U7XG4gIHZhciBzdHlsZVByb3AgPSBwcm9wc1tTVFlMRV07XG4gIHZhciBkaXNwbGF5ID0gc3R5bGVQcm9wICE9PSB1bmRlZmluZWQgJiYgc3R5bGVQcm9wICE9PSBudWxsICYmIHN0eWxlUHJvcC5oYXNPd25Qcm9wZXJ0eSgnZGlzcGxheScpID8gc3R5bGVQcm9wLmRpc3BsYXkgOiBudWxsO1xuICAvLyAkRmxvd0ZpeE1lIFNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eSB0byBudWxsIGlzIHRoZSB2YWxpZCB3YXkgdG8gcmVzZXQgaXQuXG4gIGluc3RhbmNlLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiB1bmhpZGVUZXh0SW5zdGFuY2UodGV4dEluc3RhbmNlLCB0ZXh0KSB7XG4gIHRleHRJbnN0YW5jZS5ub2RlVmFsdWUgPSB0ZXh0O1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAgICAgSHlkcmF0aW9uXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBzdXBwb3J0c0h5ZHJhdGlvbiA9IHRydWU7XG5cbmZ1bmN0aW9uIGNhbkh5ZHJhdGVJbnN0YW5jZShpbnN0YW5jZSwgdHlwZSwgcHJvcHMpIHtcbiAgaWYgKGluc3RhbmNlLm5vZGVUeXBlICE9PSBFTEVNRU5UX05PREUgfHwgdHlwZS50b0xvd2VyQ2FzZSgpICE9PSBpbnN0YW5jZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8gVGhpcyBoYXMgbm93IGJlZW4gcmVmaW5lZCB0byBhbiBlbGVtZW50IG5vZGUuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuZnVuY3Rpb24gY2FuSHlkcmF0ZVRleHRJbnN0YW5jZShpbnN0YW5jZSwgdGV4dCkge1xuICBpZiAodGV4dCA9PT0gJycgfHwgaW5zdGFuY2Uubm9kZVR5cGUgIT09IFRFWFRfTk9ERSkge1xuICAgIC8vIEVtcHR5IHN0cmluZ3MgYXJlIG5vdCBwYXJzZWQgYnkgSFRNTCBzbyB0aGVyZSB3b24ndCBiZSBhIGNvcnJlY3QgbWF0Y2ggaGVyZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBUaGlzIGhhcyBub3cgYmVlbiByZWZpbmVkIHRvIGEgdGV4dCBub2RlLlxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbmZ1bmN0aW9uIGdldE5leHRIeWRyYXRhYmxlU2libGluZyhpbnN0YW5jZSkge1xuICB2YXIgbm9kZSA9IGluc3RhbmNlLm5leHRTaWJsaW5nO1xuICAvLyBTa2lwIG5vbi1oeWRyYXRhYmxlIG5vZGVzLlxuICB3aGlsZSAobm9kZSAmJiBub2RlLm5vZGVUeXBlICE9PSBFTEVNRU5UX05PREUgJiYgbm9kZS5ub2RlVHlwZSAhPT0gVEVYVF9OT0RFKSB7XG4gICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkKHBhcmVudEluc3RhbmNlKSB7XG4gIHZhciBuZXh0ID0gcGFyZW50SW5zdGFuY2UuZmlyc3RDaGlsZDtcbiAgLy8gU2tpcCBub24taHlkcmF0YWJsZSBub2Rlcy5cbiAgd2hpbGUgKG5leHQgJiYgbmV4dC5ub2RlVHlwZSAhPT0gRUxFTUVOVF9OT0RFICYmIG5leHQubm9kZVR5cGUgIT09IFRFWFRfTk9ERSkge1xuICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xuICB9XG4gIHJldHVybiBuZXh0O1xufVxuXG5mdW5jdGlvbiBoeWRyYXRlSW5zdGFuY2UoaW5zdGFuY2UsIHR5cGUsIHByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGhvc3RDb250ZXh0LCBpbnRlcm5hbEluc3RhbmNlSGFuZGxlKSB7XG4gIHByZWNhY2hlRmliZXJOb2RlKGludGVybmFsSW5zdGFuY2VIYW5kbGUsIGluc3RhbmNlKTtcbiAgLy8gVE9ETzogUG9zc2libHkgZGVmZXIgdGhpcyB1bnRpbCB0aGUgY29tbWl0IHBoYXNlIHdoZXJlIGFsbCB0aGUgZXZlbnRzXG4gIC8vIGdldCBhdHRhY2hlZC5cbiAgdXBkYXRlRmliZXJQcm9wcyhpbnN0YW5jZSwgcHJvcHMpO1xuICB2YXIgcGFyZW50TmFtZXNwYWNlID0gdm9pZCAwO1xuICB7XG4gICAgdmFyIGhvc3RDb250ZXh0RGV2ID0gaG9zdENvbnRleHQ7XG4gICAgcGFyZW50TmFtZXNwYWNlID0gaG9zdENvbnRleHREZXYubmFtZXNwYWNlO1xuICB9XG4gIHJldHVybiBkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzKGluc3RhbmNlLCB0eXBlLCBwcm9wcywgcGFyZW50TmFtZXNwYWNlLCByb290Q29udGFpbmVySW5zdGFuY2UpO1xufVxuXG5mdW5jdGlvbiBoeWRyYXRlVGV4dEluc3RhbmNlKHRleHRJbnN0YW5jZSwgdGV4dCwgaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSkge1xuICBwcmVjYWNoZUZpYmVyTm9kZShpbnRlcm5hbEluc3RhbmNlSGFuZGxlLCB0ZXh0SW5zdGFuY2UpO1xuICByZXR1cm4gZGlmZkh5ZHJhdGVkVGV4dCh0ZXh0SW5zdGFuY2UsIHRleHQpO1xufVxuXG5mdW5jdGlvbiBkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlKHBhcmVudENvbnRhaW5lciwgdGV4dEluc3RhbmNlLCB0ZXh0KSB7XG4gIHtcbiAgICB3YXJuRm9yVW5tYXRjaGVkVGV4dCh0ZXh0SW5zdGFuY2UsIHRleHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2UocGFyZW50VHlwZSwgcGFyZW50UHJvcHMsIHBhcmVudEluc3RhbmNlLCB0ZXh0SW5zdGFuY2UsIHRleHQpIHtcbiAgaWYgKHRydWUgJiYgcGFyZW50UHJvcHNbU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkddICE9PSB0cnVlKSB7XG4gICAgd2FybkZvclVubWF0Y2hlZFRleHQodGV4dEluc3RhbmNlLCB0ZXh0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2UocGFyZW50Q29udGFpbmVyLCBpbnN0YW5jZSkge1xuICB7XG4gICAgaWYgKGluc3RhbmNlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgIHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQocGFyZW50Q29udGFpbmVyLCBpbnN0YW5jZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQocGFyZW50Q29udGFpbmVyLCBpbnN0YW5jZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRpZE5vdEh5ZHJhdGVJbnN0YW5jZShwYXJlbnRUeXBlLCBwYXJlbnRQcm9wcywgcGFyZW50SW5zdGFuY2UsIGluc3RhbmNlKSB7XG4gIGlmICh0cnVlICYmIHBhcmVudFByb3BzW1NVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HXSAhPT0gdHJ1ZSkge1xuICAgIGlmIChpbnN0YW5jZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICB3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50KHBhcmVudEluc3RhbmNlLCBpbnN0YW5jZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQocGFyZW50SW5zdGFuY2UsIGluc3RhbmNlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZShwYXJlbnRDb250YWluZXIsIHR5cGUsIHByb3BzKSB7XG4gIHtcbiAgICB3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQocGFyZW50Q29udGFpbmVyLCB0eXBlLCBwcm9wcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2UocGFyZW50Q29udGFpbmVyLCB0ZXh0KSB7XG4gIHtcbiAgICB3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQocGFyZW50Q29udGFpbmVyLCB0ZXh0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlKHBhcmVudFR5cGUsIHBhcmVudFByb3BzLCBwYXJlbnRJbnN0YW5jZSwgdHlwZSwgcHJvcHMpIHtcbiAgaWYgKHRydWUgJiYgcGFyZW50UHJvcHNbU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkddICE9PSB0cnVlKSB7XG4gICAgd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50KHBhcmVudEluc3RhbmNlLCB0eXBlLCBwcm9wcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UocGFyZW50VHlwZSwgcGFyZW50UHJvcHMsIHBhcmVudEluc3RhbmNlLCB0ZXh0KSB7XG4gIGlmICh0cnVlICYmIHBhcmVudFByb3BzW1NVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HXSAhPT0gdHJ1ZSkge1xuICAgIHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dChwYXJlbnRJbnN0YW5jZSwgdGV4dCk7XG4gIH1cbn1cblxuLy8gUHJlZml4IG1lYXN1cmVtZW50cyBzbyB0aGF0IGl0J3MgcG9zc2libGUgdG8gZmlsdGVyIHRoZW0uXG4vLyBMb25nZXIgcHJlZml4ZXMgYXJlIGhhcmQgdG8gcmVhZCBpbiBEZXZUb29scy5cbnZhciByZWFjdEVtb2ppID0gJ1xcdTI2OUInO1xudmFyIHdhcm5pbmdFbW9qaSA9ICdcXHUyNkQ0JztcbnZhciBzdXBwb3J0c1VzZXJUaW1pbmcgPSB0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5tYXJrID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5jbGVhck1hcmtzID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5tZWFzdXJlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5jbGVhck1lYXN1cmVzID09PSAnZnVuY3Rpb24nO1xuXG4vLyBLZWVwIHRyYWNrIG9mIGN1cnJlbnQgZmliZXIgc28gdGhhdCB3ZSBrbm93IHRoZSBwYXRoIHRvIHVud2luZCBvbiBwYXVzZS5cbi8vIFRPRE86IHRoaXMgbG9va3MgdGhlIHNhbWUgYXMgbmV4dFVuaXRPZldvcmsgaW4gc2NoZWR1bGVyLiBDYW4gd2UgdW5pZnkgdGhlbT9cbnZhciBjdXJyZW50RmliZXIgPSBudWxsO1xuLy8gSWYgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiB1c2VyIGNvZGUsIHdoaWNoIGZpYmVyIGFuZCBtZXRob2QgaXMgaXQ/XG4vLyBSZXVzaW5nIGBjdXJyZW50RmliZXJgIHdvdWxkIGJlIGNvbmZ1c2luZyBmb3IgdGhpcyBiZWNhdXNlIHVzZXIgY29kZSBmaWJlclxuLy8gY2FuIGNoYW5nZSBkdXJpbmcgY29tbWl0IHBoYXNlIHRvbywgYnV0IHdlIGRvbid0IG5lZWQgdG8gdW53aW5kIGl0IChzaW5jZVxuLy8gbGlmZWN5Y2xlcyBpbiB0aGUgY29tbWl0IHBoYXNlIGRvbid0IHJlc2VtYmxlIGEgdHJlZSkuXG52YXIgY3VycmVudFBoYXNlID0gbnVsbDtcbnZhciBjdXJyZW50UGhhc2VGaWJlciA9IG51bGw7XG4vLyBEaWQgbGlmZWN5Y2xlIGhvb2sgc2NoZWR1bGUgYW4gdXBkYXRlPyBUaGlzIGlzIG9mdGVuIGEgcGVyZm9ybWFuY2UgcHJvYmxlbSxcbi8vIHNvIHdlIHdpbGwga2VlcCB0cmFjayBvZiBpdCwgYW5kIGluY2x1ZGUgaXQgaW4gdGhlIHJlcG9ydC5cbi8vIFRyYWNrIGNvbW1pdHMgY2F1c2VkIGJ5IGNhc2NhZGluZyB1cGRhdGVzLlxudmFyIGlzQ29tbWl0dGluZyA9IGZhbHNlO1xudmFyIGhhc1NjaGVkdWxlZFVwZGF0ZUluQ3VycmVudENvbW1pdCA9IGZhbHNlO1xudmFyIGhhc1NjaGVkdWxlZFVwZGF0ZUluQ3VycmVudFBoYXNlID0gZmFsc2U7XG52YXIgY29tbWl0Q291bnRJbkN1cnJlbnRXb3JrTG9vcCA9IDA7XG52YXIgZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQgPSAwO1xudmFyIGlzV2FpdGluZ0ZvckNhbGxiYWNrID0gZmFsc2U7XG4vLyBEdXJpbmcgY29tbWl0cywgd2Ugb25seSBzaG93IGEgbWVhc3VyZW1lbnQgb25jZSBwZXIgbWV0aG9kIG5hbWVcbi8vIHRvIGF2b2lkIHN0cmV0Y2ggdGhlIGNvbW1pdCBwaGFzZSB3aXRoIG1lYXN1cmVtZW50IG92ZXJoZWFkLlxudmFyIGxhYmVsc0luQ3VycmVudENvbW1pdCA9IG5ldyBTZXQoKTtcblxudmFyIGZvcm1hdE1hcmtOYW1lID0gZnVuY3Rpb24gKG1hcmtOYW1lKSB7XG4gIHJldHVybiByZWFjdEVtb2ppICsgJyAnICsgbWFya05hbWU7XG59O1xuXG52YXIgZm9ybWF0TGFiZWwgPSBmdW5jdGlvbiAobGFiZWwsIHdhcm5pbmcpIHtcbiAgdmFyIHByZWZpeCA9IHdhcm5pbmcgPyB3YXJuaW5nRW1vamkgKyAnICcgOiByZWFjdEVtb2ppICsgJyAnO1xuICB2YXIgc3VmZml4ID0gd2FybmluZyA/ICcgV2FybmluZzogJyArIHdhcm5pbmcgOiAnJztcbiAgcmV0dXJuICcnICsgcHJlZml4ICsgbGFiZWwgKyBzdWZmaXg7XG59O1xuXG52YXIgYmVnaW5NYXJrID0gZnVuY3Rpb24gKG1hcmtOYW1lKSB7XG4gIHBlcmZvcm1hbmNlLm1hcmsoZm9ybWF0TWFya05hbWUobWFya05hbWUpKTtcbn07XG5cbnZhciBjbGVhck1hcmsgPSBmdW5jdGlvbiAobWFya05hbWUpIHtcbiAgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyhmb3JtYXRNYXJrTmFtZShtYXJrTmFtZSkpO1xufTtcblxudmFyIGVuZE1hcmsgPSBmdW5jdGlvbiAobGFiZWwsIG1hcmtOYW1lLCB3YXJuaW5nKSB7XG4gIHZhciBmb3JtYXR0ZWRNYXJrTmFtZSA9IGZvcm1hdE1hcmtOYW1lKG1hcmtOYW1lKTtcbiAgdmFyIGZvcm1hdHRlZExhYmVsID0gZm9ybWF0TGFiZWwobGFiZWwsIHdhcm5pbmcpO1xuICB0cnkge1xuICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoZm9ybWF0dGVkTGFiZWwsIGZvcm1hdHRlZE1hcmtOYW1lKTtcbiAgfSBjYXRjaCAoZXJyKSB7fVxuICAvLyBJZiBwcmV2aW91cyBtYXJrIHdhcyBtaXNzaW5nIGZvciBzb21lIHJlYXNvbiwgdGhpcyB3aWxsIHRocm93LlxuICAvLyBUaGlzIGNvdWxkIG9ubHkgaGFwcGVuIGlmIFJlYWN0IGNyYXNoZWQgaW4gYW4gdW5leHBlY3RlZCBwbGFjZSBlYXJsaWVyLlxuICAvLyBEb24ndCBwaWxlIG9uIHdpdGggbW9yZSBlcnJvcnMuXG5cbiAgLy8gQ2xlYXIgbWFya3MgaW1tZWRpYXRlbHkgdG8gYXZvaWQgZ3Jvd2luZyBidWZmZXIuXG4gIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MoZm9ybWF0dGVkTWFya05hbWUpO1xuICBwZXJmb3JtYW5jZS5jbGVhck1lYXN1cmVzKGZvcm1hdHRlZExhYmVsKTtcbn07XG5cbnZhciBnZXRGaWJlck1hcmtOYW1lID0gZnVuY3Rpb24gKGxhYmVsLCBkZWJ1Z0lEKSB7XG4gIHJldHVybiBsYWJlbCArICcgKCMnICsgZGVidWdJRCArICcpJztcbn07XG5cbnZhciBnZXRGaWJlckxhYmVsID0gZnVuY3Rpb24gKGNvbXBvbmVudE5hbWUsIGlzTW91bnRlZCwgcGhhc2UpIHtcbiAgaWYgKHBoYXNlID09PSBudWxsKSB7XG4gICAgLy8gVGhlc2UgYXJlIGNvbXBvc2l0ZSBjb21wb25lbnQgdG90YWwgdGltZSBtZWFzdXJlbWVudHMuXG4gICAgcmV0dXJuIGNvbXBvbmVudE5hbWUgKyAnIFsnICsgKGlzTW91bnRlZCA/ICd1cGRhdGUnIDogJ21vdW50JykgKyAnXSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ29tcG9zaXRlIGNvbXBvbmVudCBtZXRob2RzLlxuICAgIHJldHVybiBjb21wb25lbnROYW1lICsgJy4nICsgcGhhc2U7XG4gIH1cbn07XG5cbnZhciBiZWdpbkZpYmVyTWFyayA9IGZ1bmN0aW9uIChmaWJlciwgcGhhc2UpIHtcbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKGZpYmVyLnR5cGUpIHx8ICdVbmtub3duJztcbiAgdmFyIGRlYnVnSUQgPSBmaWJlci5fZGVidWdJRDtcbiAgdmFyIGlzTW91bnRlZCA9IGZpYmVyLmFsdGVybmF0ZSAhPT0gbnVsbDtcbiAgdmFyIGxhYmVsID0gZ2V0RmliZXJMYWJlbChjb21wb25lbnROYW1lLCBpc01vdW50ZWQsIHBoYXNlKTtcblxuICBpZiAoaXNDb21taXR0aW5nICYmIGxhYmVsc0luQ3VycmVudENvbW1pdC5oYXMobGFiZWwpKSB7XG4gICAgLy8gRHVyaW5nIHRoZSBjb21taXQgcGhhc2UsIHdlIGRvbid0IHNob3cgZHVwbGljYXRlIGxhYmVscyBiZWNhdXNlXG4gICAgLy8gdGhlcmUgaXMgYSBmaXhlZCBvdmVyaGVhZCBmb3IgZXZlcnkgbWVhc3VyZW1lbnQsIGFuZCB3ZSBkb24ndFxuICAgIC8vIHdhbnQgdG8gc3RyZXRjaCB0aGUgY29tbWl0IHBoYXNlIGJleW9uZCBuZWNlc3NhcnkuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxhYmVsc0luQ3VycmVudENvbW1pdC5hZGQobGFiZWwpO1xuXG4gIHZhciBtYXJrTmFtZSA9IGdldEZpYmVyTWFya05hbWUobGFiZWwsIGRlYnVnSUQpO1xuICBiZWdpbk1hcmsobWFya05hbWUpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnZhciBjbGVhckZpYmVyTWFyayA9IGZ1bmN0aW9uIChmaWJlciwgcGhhc2UpIHtcbiAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKGZpYmVyLnR5cGUpIHx8ICdVbmtub3duJztcbiAgdmFyIGRlYnVnSUQgPSBmaWJlci5fZGVidWdJRDtcbiAgdmFyIGlzTW91bnRlZCA9IGZpYmVyLmFsdGVybmF0ZSAhPT0gbnVsbDtcbiAgdmFyIGxhYmVsID0gZ2V0RmliZXJMYWJlbChjb21wb25lbnROYW1lLCBpc01vdW50ZWQsIHBoYXNlKTtcbiAgdmFyIG1hcmtOYW1lID0gZ2V0RmliZXJNYXJrTmFtZShsYWJlbCwgZGVidWdJRCk7XG4gIGNsZWFyTWFyayhtYXJrTmFtZSk7XG59O1xuXG52YXIgZW5kRmliZXJNYXJrID0gZnVuY3Rpb24gKGZpYmVyLCBwaGFzZSwgd2FybmluZykge1xuICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoZmliZXIudHlwZSkgfHwgJ1Vua25vd24nO1xuICB2YXIgZGVidWdJRCA9IGZpYmVyLl9kZWJ1Z0lEO1xuICB2YXIgaXNNb3VudGVkID0gZmliZXIuYWx0ZXJuYXRlICE9PSBudWxsO1xuICB2YXIgbGFiZWwgPSBnZXRGaWJlckxhYmVsKGNvbXBvbmVudE5hbWUsIGlzTW91bnRlZCwgcGhhc2UpO1xuICB2YXIgbWFya05hbWUgPSBnZXRGaWJlck1hcmtOYW1lKGxhYmVsLCBkZWJ1Z0lEKTtcbiAgZW5kTWFyayhsYWJlbCwgbWFya05hbWUsIHdhcm5pbmcpO1xufTtcblxudmFyIHNob3VsZElnbm9yZUZpYmVyID0gZnVuY3Rpb24gKGZpYmVyKSB7XG4gIC8vIEhvc3QgY29tcG9uZW50cyBzaG91bGQgYmUgc2tpcHBlZCBpbiB0aGUgdGltZWxpbmUuXG4gIC8vIFdlIGNvdWxkIGNoZWNrIHR5cGVvZiBmaWJlci50eXBlLCBidXQgZG9lcyB0aGlzIHdvcmsgd2l0aCBSTj9cbiAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICBjYXNlIEhvc3RSb290OlxuICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICBjYXNlIEhvc3RUZXh0OlxuICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICBjYXNlIEZyYWdtZW50OlxuICAgIGNhc2UgQ29udGV4dFByb3ZpZGVyOlxuICAgIGNhc2UgQ29udGV4dENvbnN1bWVyOlxuICAgIGNhc2UgTW9kZTpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBjbGVhclBlbmRpbmdQaGFzZU1lYXN1cmVtZW50ID0gZnVuY3Rpb24gKCkge1xuICBpZiAoY3VycmVudFBoYXNlICE9PSBudWxsICYmIGN1cnJlbnRQaGFzZUZpYmVyICE9PSBudWxsKSB7XG4gICAgY2xlYXJGaWJlck1hcmsoY3VycmVudFBoYXNlRmliZXIsIGN1cnJlbnRQaGFzZSk7XG4gIH1cbiAgY3VycmVudFBoYXNlRmliZXIgPSBudWxsO1xuICBjdXJyZW50UGhhc2UgPSBudWxsO1xuICBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRQaGFzZSA9IGZhbHNlO1xufTtcblxudmFyIHBhdXNlVGltZXJzID0gZnVuY3Rpb24gKCkge1xuICAvLyBTdG9wcyBhbGwgY3VycmVudGx5IGFjdGl2ZSBtZWFzdXJlbWVudHMgc28gdGhhdCB0aGV5IGNhbiBiZSByZXN1bWVkXG4gIC8vIGlmIHdlIGNvbnRpbnVlIGluIGEgbGF0ZXIgZGVmZXJyZWQgbG9vcCBmcm9tIHRoZSBzYW1lIHVuaXQgb2Ygd29yay5cbiAgdmFyIGZpYmVyID0gY3VycmVudEZpYmVyO1xuICB3aGlsZSAoZmliZXIpIHtcbiAgICBpZiAoZmliZXIuX2RlYnVnSXNDdXJyZW50bHlUaW1pbmcpIHtcbiAgICAgIGVuZEZpYmVyTWFyayhmaWJlciwgbnVsbCwgbnVsbCk7XG4gICAgfVxuICAgIGZpYmVyID0gZmliZXIucmV0dXJuO1xuICB9XG59O1xuXG52YXIgcmVzdW1lVGltZXJzUmVjdXJzaXZlbHkgPSBmdW5jdGlvbiAoZmliZXIpIHtcbiAgaWYgKGZpYmVyLnJldHVybiAhPT0gbnVsbCkge1xuICAgIHJlc3VtZVRpbWVyc1JlY3Vyc2l2ZWx5KGZpYmVyLnJldHVybik7XG4gIH1cbiAgaWYgKGZpYmVyLl9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nKSB7XG4gICAgYmVnaW5GaWJlck1hcmsoZmliZXIsIG51bGwpO1xuICB9XG59O1xuXG52YXIgcmVzdW1lVGltZXJzID0gZnVuY3Rpb24gKCkge1xuICAvLyBSZXN1bWVzIGFsbCBtZWFzdXJlbWVudHMgdGhhdCB3ZXJlIGFjdGl2ZSBkdXJpbmcgdGhlIGxhc3QgZGVmZXJyZWQgbG9vcC5cbiAgaWYgKGN1cnJlbnRGaWJlciAhPT0gbnVsbCkge1xuICAgIHJlc3VtZVRpbWVyc1JlY3Vyc2l2ZWx5KGN1cnJlbnRGaWJlcik7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlY29yZEVmZmVjdCgpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBlZmZlY3RDb3VudEluQ3VycmVudENvbW1pdCsrO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFNjaGVkdWxlVXBkYXRlKCkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmIChpc0NvbW1pdHRpbmcpIHtcbiAgICAgIGhhc1NjaGVkdWxlZFVwZGF0ZUluQ3VycmVudENvbW1pdCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChjdXJyZW50UGhhc2UgIT09IG51bGwgJiYgY3VycmVudFBoYXNlICE9PSAnY29tcG9uZW50V2lsbE1vdW50JyAmJiBjdXJyZW50UGhhc2UgIT09ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJykge1xuICAgICAgaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50UGhhc2UgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydFJlcXVlc3RDYWxsYmFja1RpbWVyKCkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmIChzdXBwb3J0c1VzZXJUaW1pbmcgJiYgIWlzV2FpdGluZ0ZvckNhbGxiYWNrKSB7XG4gICAgICBpc1dhaXRpbmdGb3JDYWxsYmFjayA9IHRydWU7XG4gICAgICBiZWdpbk1hcmsoJyhXYWl0aW5nIGZvciBhc3luYyBjYWxsYmFjay4uLiknKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcFJlcXVlc3RDYWxsYmFja1RpbWVyKGRpZEV4cGlyZSwgZXhwaXJhdGlvblRpbWUpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICBpc1dhaXRpbmdGb3JDYWxsYmFjayA9IGZhbHNlO1xuICAgICAgdmFyIHdhcm5pbmcgPSBkaWRFeHBpcmUgPyAnUmVhY3Qgd2FzIGJsb2NrZWQgYnkgbWFpbiB0aHJlYWQnIDogbnVsbDtcbiAgICAgIGVuZE1hcmsoJyhXYWl0aW5nIGZvciBhc3luYyBjYWxsYmFjay4uLiB3aWxsIGZvcmNlIGZsdXNoIGluICcgKyBleHBpcmF0aW9uVGltZSArICcgbXMpJywgJyhXYWl0aW5nIGZvciBhc3luYyBjYWxsYmFjay4uLiknLCB3YXJuaW5nKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhcnRXb3JrVGltZXIoZmliZXIpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZyB8fCBzaG91bGRJZ25vcmVGaWJlcihmaWJlcikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgd2UgcGF1c2UsIHRoaXMgaXMgdGhlIGZpYmVyIHRvIHVud2luZCBmcm9tLlxuICAgIGN1cnJlbnRGaWJlciA9IGZpYmVyO1xuICAgIGlmICghYmVnaW5GaWJlck1hcmsoZmliZXIsIG51bGwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZpYmVyLl9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW5jZWxXb3JrVGltZXIoZmliZXIpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZyB8fCBzaG91bGRJZ25vcmVGaWJlcihmaWJlcikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gUmVtZW1iZXIgd2Ugc2hvdWxkbid0IGNvbXBsZXRlIG1lYXN1cmVtZW50IGZvciB0aGlzIGZpYmVyLlxuICAgIC8vIE90aGVyd2lzZSBmbGFtZWNoYXJ0IHdpbGwgYmUgZGVlcCBldmVuIGZvciBzbWFsbCB1cGRhdGVzLlxuICAgIGZpYmVyLl9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nID0gZmFsc2U7XG4gICAgY2xlYXJGaWJlck1hcmsoZmliZXIsIG51bGwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0b3BXb3JrVGltZXIoZmliZXIpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZyB8fCBzaG91bGRJZ25vcmVGaWJlcihmaWJlcikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgd2UgcGF1c2UsIGl0cyBwYXJlbnQgaXMgdGhlIGZpYmVyIHRvIHVud2luZCBmcm9tLlxuICAgIGN1cnJlbnRGaWJlciA9IGZpYmVyLnJldHVybjtcbiAgICBpZiAoIWZpYmVyLl9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZpYmVyLl9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nID0gZmFsc2U7XG4gICAgZW5kRmliZXJNYXJrKGZpYmVyLCBudWxsLCBudWxsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdG9wRmFpbGVkV29ya1RpbWVyKGZpYmVyKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcgfHwgc2hvdWxkSWdub3JlRmliZXIoZmliZXIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIHdlIHBhdXNlLCBpdHMgcGFyZW50IGlzIHRoZSBmaWJlciB0byB1bndpbmQgZnJvbS5cbiAgICBjdXJyZW50RmliZXIgPSBmaWJlci5yZXR1cm47XG4gICAgaWYgKCFmaWJlci5fZGVidWdJc0N1cnJlbnRseVRpbWluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmaWJlci5fZGVidWdJc0N1cnJlbnRseVRpbWluZyA9IGZhbHNlO1xuICAgIHZhciB3YXJuaW5nID0gZmliZXIudGFnID09PSBTdXNwZW5zZUNvbXBvbmVudCA/ICdSZW5kZXJpbmcgd2FzIHN1c3BlbmRlZCcgOiAnQW4gZXJyb3Igd2FzIHRocm93biBpbnNpZGUgdGhpcyBlcnJvciBib3VuZGFyeSc7XG4gICAgZW5kRmliZXJNYXJrKGZpYmVyLCBudWxsLCB3YXJuaW5nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydFBoYXNlVGltZXIoZmliZXIsIHBoYXNlKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2xlYXJQZW5kaW5nUGhhc2VNZWFzdXJlbWVudCgpO1xuICAgIGlmICghYmVnaW5GaWJlck1hcmsoZmliZXIsIHBoYXNlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdXJyZW50UGhhc2VGaWJlciA9IGZpYmVyO1xuICAgIGN1cnJlbnRQaGFzZSA9IHBoYXNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0b3BQaGFzZVRpbWVyKCkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjdXJyZW50UGhhc2UgIT09IG51bGwgJiYgY3VycmVudFBoYXNlRmliZXIgIT09IG51bGwpIHtcbiAgICAgIHZhciB3YXJuaW5nID0gaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50UGhhc2UgPyAnU2NoZWR1bGVkIGEgY2FzY2FkaW5nIHVwZGF0ZScgOiBudWxsO1xuICAgICAgZW5kRmliZXJNYXJrKGN1cnJlbnRQaGFzZUZpYmVyLCBjdXJyZW50UGhhc2UsIHdhcm5pbmcpO1xuICAgIH1cbiAgICBjdXJyZW50UGhhc2UgPSBudWxsO1xuICAgIGN1cnJlbnRQaGFzZUZpYmVyID0gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydFdvcmtMb29wVGltZXIobmV4dFVuaXRPZldvcmspIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBjdXJyZW50RmliZXIgPSBuZXh0VW5pdE9mV29yaztcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb21taXRDb3VudEluQ3VycmVudFdvcmtMb29wID0gMDtcbiAgICAvLyBUaGlzIGlzIHRvcCBsZXZlbCBjYWxsLlxuICAgIC8vIEFueSBvdGhlciBtZWFzdXJlbWVudHMgYXJlIHBlcmZvcm1lZCB3aXRoaW4uXG4gICAgYmVnaW5NYXJrKCcoUmVhY3QgVHJlZSBSZWNvbmNpbGlhdGlvbiknKTtcbiAgICAvLyBSZXN1bWUgYW55IG1lYXN1cmVtZW50cyB0aGF0IHdlcmUgaW4gcHJvZ3Jlc3MgZHVyaW5nIHRoZSBsYXN0IGxvb3AuXG4gICAgcmVzdW1lVGltZXJzKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcFdvcmtMb29wVGltZXIoaW50ZXJydXB0ZWRCeSwgZGlkQ29tcGxldGVSb290KSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHdhcm5pbmcgPSBudWxsO1xuICAgIGlmIChpbnRlcnJ1cHRlZEJ5ICE9PSBudWxsKSB7XG4gICAgICBpZiAoaW50ZXJydXB0ZWRCeS50YWcgPT09IEhvc3RSb290KSB7XG4gICAgICAgIHdhcm5pbmcgPSAnQSB0b3AtbGV2ZWwgdXBkYXRlIGludGVycnVwdGVkIHRoZSBwcmV2aW91cyByZW5kZXInO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKGludGVycnVwdGVkQnkudHlwZSkgfHwgJ1Vua25vd24nO1xuICAgICAgICB3YXJuaW5nID0gJ0FuIHVwZGF0ZSB0byAnICsgY29tcG9uZW50TmFtZSArICcgaW50ZXJydXB0ZWQgdGhlIHByZXZpb3VzIHJlbmRlcic7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb21taXRDb3VudEluQ3VycmVudFdvcmtMb29wID4gMSkge1xuICAgICAgd2FybmluZyA9ICdUaGVyZSB3ZXJlIGNhc2NhZGluZyB1cGRhdGVzJztcbiAgICB9XG4gICAgY29tbWl0Q291bnRJbkN1cnJlbnRXb3JrTG9vcCA9IDA7XG4gICAgdmFyIGxhYmVsID0gZGlkQ29tcGxldGVSb290ID8gJyhSZWFjdCBUcmVlIFJlY29uY2lsaWF0aW9uOiBDb21wbGV0ZWQgUm9vdCknIDogJyhSZWFjdCBUcmVlIFJlY29uY2lsaWF0aW9uOiBZaWVsZGVkKSc7XG4gICAgLy8gUGF1c2UgYW55IG1lYXN1cmVtZW50cyB1bnRpbCB0aGUgbmV4dCBsb29wLlxuICAgIHBhdXNlVGltZXJzKCk7XG4gICAgZW5kTWFyayhsYWJlbCwgJyhSZWFjdCBUcmVlIFJlY29uY2lsaWF0aW9uKScsIHdhcm5pbmcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0Q29tbWl0VGltZXIoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaXNDb21taXR0aW5nID0gdHJ1ZTtcbiAgICBoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRDb21taXQgPSBmYWxzZTtcbiAgICBsYWJlbHNJbkN1cnJlbnRDb21taXQuY2xlYXIoKTtcbiAgICBiZWdpbk1hcmsoJyhDb21taXR0aW5nIENoYW5nZXMpJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcENvbW1pdFRpbWVyKCkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHdhcm5pbmcgPSBudWxsO1xuICAgIGlmIChoYXNTY2hlZHVsZWRVcGRhdGVJbkN1cnJlbnRDb21taXQpIHtcbiAgICAgIHdhcm5pbmcgPSAnTGlmZWN5Y2xlIGhvb2sgc2NoZWR1bGVkIGEgY2FzY2FkaW5nIHVwZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChjb21taXRDb3VudEluQ3VycmVudFdvcmtMb29wID4gMCkge1xuICAgICAgd2FybmluZyA9ICdDYXVzZWQgYnkgYSBjYXNjYWRpbmcgdXBkYXRlIGluIGVhcmxpZXIgY29tbWl0JztcbiAgICB9XG4gICAgaGFzU2NoZWR1bGVkVXBkYXRlSW5DdXJyZW50Q29tbWl0ID0gZmFsc2U7XG4gICAgY29tbWl0Q291bnRJbkN1cnJlbnRXb3JrTG9vcCsrO1xuICAgIGlzQ29tbWl0dGluZyA9IGZhbHNlO1xuICAgIGxhYmVsc0luQ3VycmVudENvbW1pdC5jbGVhcigpO1xuXG4gICAgZW5kTWFyaygnKENvbW1pdHRpbmcgQ2hhbmdlcyknLCAnKENvbW1pdHRpbmcgQ2hhbmdlcyknLCB3YXJuaW5nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydENvbW1pdFNuYXBzaG90RWZmZWN0c1RpbWVyKCkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0ID0gMDtcbiAgICBiZWdpbk1hcmsoJyhDb21taXR0aW5nIFNuYXBzaG90IEVmZmVjdHMpJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcENvbW1pdFNuYXBzaG90RWZmZWN0c1RpbWVyKCkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBjb3VudCA9IGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0O1xuICAgIGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0ID0gMDtcbiAgICBlbmRNYXJrKCcoQ29tbWl0dGluZyBTbmFwc2hvdCBFZmZlY3RzOiAnICsgY291bnQgKyAnIFRvdGFsKScsICcoQ29tbWl0dGluZyBTbmFwc2hvdCBFZmZlY3RzKScsIG51bGwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0Q29tbWl0SG9zdEVmZmVjdHNUaW1lcigpIHtcbiAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICBpZiAoIXN1cHBvcnRzVXNlclRpbWluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlZmZlY3RDb3VudEluQ3VycmVudENvbW1pdCA9IDA7XG4gICAgYmVnaW5NYXJrKCcoQ29tbWl0dGluZyBIb3N0IEVmZmVjdHMpJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RvcENvbW1pdEhvc3RFZmZlY3RzVGltZXIoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGNvdW50ID0gZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQ7XG4gICAgZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQgPSAwO1xuICAgIGVuZE1hcmsoJyhDb21taXR0aW5nIEhvc3QgRWZmZWN0czogJyArIGNvdW50ICsgJyBUb3RhbCknLCAnKENvbW1pdHRpbmcgSG9zdCBFZmZlY3RzKScsIG51bGwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0Q29tbWl0TGlmZUN5Y2xlc1RpbWVyKCkge1xuICBpZiAoZW5hYmxlVXNlclRpbWluZ0FQSSkge1xuICAgIGlmICghc3VwcG9ydHNVc2VyVGltaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVmZmVjdENvdW50SW5DdXJyZW50Q29tbWl0ID0gMDtcbiAgICBiZWdpbk1hcmsoJyhDYWxsaW5nIExpZmVjeWNsZSBNZXRob2RzKScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0b3BDb21taXRMaWZlQ3ljbGVzVGltZXIoKSB7XG4gIGlmIChlbmFibGVVc2VyVGltaW5nQVBJKSB7XG4gICAgaWYgKCFzdXBwb3J0c1VzZXJUaW1pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGNvdW50ID0gZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQ7XG4gICAgZWZmZWN0Q291bnRJbkN1cnJlbnRDb21taXQgPSAwO1xuICAgIGVuZE1hcmsoJyhDYWxsaW5nIExpZmVjeWNsZSBNZXRob2RzOiAnICsgY291bnQgKyAnIFRvdGFsKScsICcoQ2FsbGluZyBMaWZlY3ljbGUgTWV0aG9kcyknLCBudWxsKTtcbiAgfVxufVxuXG52YXIgdmFsdWVTdGFjayA9IFtdO1xuXG52YXIgZmliZXJTdGFjayA9IHZvaWQgMDtcblxue1xuICBmaWJlclN0YWNrID0gW107XG59XG5cbnZhciBpbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjcmVhdGVDdXJzb3IoZGVmYXVsdFZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgY3VycmVudDogZGVmYXVsdFZhbHVlXG4gIH07XG59XG5cbmZ1bmN0aW9uIHBvcChjdXJzb3IsIGZpYmVyKSB7XG4gIGlmIChpbmRleCA8IDApIHtcbiAgICB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdVbmV4cGVjdGVkIHBvcC4nKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAge1xuICAgIGlmIChmaWJlciAhPT0gZmliZXJTdGFja1tpbmRleF0pIHtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ1VuZXhwZWN0ZWQgRmliZXIgcG9wcGVkLicpO1xuICAgIH1cbiAgfVxuXG4gIGN1cnNvci5jdXJyZW50ID0gdmFsdWVTdGFja1tpbmRleF07XG5cbiAgdmFsdWVTdGFja1tpbmRleF0gPSBudWxsO1xuXG4gIHtcbiAgICBmaWJlclN0YWNrW2luZGV4XSA9IG51bGw7XG4gIH1cblxuICBpbmRleC0tO1xufVxuXG5mdW5jdGlvbiBwdXNoKGN1cnNvciwgdmFsdWUsIGZpYmVyKSB7XG4gIGluZGV4Kys7XG5cbiAgdmFsdWVTdGFja1tpbmRleF0gPSBjdXJzb3IuY3VycmVudDtcblxuICB7XG4gICAgZmliZXJTdGFja1tpbmRleF0gPSBmaWJlcjtcbiAgfVxuXG4gIGN1cnNvci5jdXJyZW50ID0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNoZWNrVGhhdFN0YWNrSXNFbXB0eSgpIHtcbiAge1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0V4cGVjdGVkIGFuIGVtcHR5IHN0YWNrLiBTb21ldGhpbmcgd2FzIG5vdCByZXNldCBwcm9wZXJseS4nKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2KCkge1xuICB7XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YWx1ZVN0YWNrLmxlbmd0aCA9IDA7XG4gICAgZmliZXJTdGFjay5sZW5ndGggPSAwO1xuICB9XG59XG5cbnZhciB3YXJuZWRBYm91dE1pc3NpbmdHZXRDaGlsZENvbnRleHQgPSB2b2lkIDA7XG5cbntcbiAgd2FybmVkQWJvdXRNaXNzaW5nR2V0Q2hpbGRDb250ZXh0ID0ge307XG59XG5cbnZhciBlbXB0eUNvbnRleHRPYmplY3QgPSB7fTtcbntcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eUNvbnRleHRPYmplY3QpO1xufVxuXG4vLyBBIGN1cnNvciB0byB0aGUgY3VycmVudCBtZXJnZWQgY29udGV4dCBvYmplY3Qgb24gdGhlIHN0YWNrLlxudmFyIGNvbnRleHRTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihlbXB0eUNvbnRleHRPYmplY3QpO1xuLy8gQSBjdXJzb3IgdG8gYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgY29udGV4dCBoYXMgY2hhbmdlZC5cbnZhciBkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKGZhbHNlKTtcbi8vIEtlZXAgdHJhY2sgb2YgdGhlIHByZXZpb3VzIGNvbnRleHQgb2JqZWN0IHRoYXQgd2FzIG9uIHRoZSBzdGFjay5cbi8vIFdlIHVzZSB0aGlzIHRvIGdldCBhY2Nlc3MgdG8gdGhlIHBhcmVudCBjb250ZXh0IGFmdGVyIHdlIGhhdmUgYWxyZWFkeVxuLy8gcHVzaGVkIHRoZSBuZXh0IGNvbnRleHQgcHJvdmlkZXIsIGFuZCBub3cgbmVlZCB0byBtZXJnZSB0aGVpciBjb250ZXh0cy5cbnZhciBwcmV2aW91c0NvbnRleHQgPSBlbXB0eUNvbnRleHRPYmplY3Q7XG5cbmZ1bmN0aW9uIGdldFVubWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBkaWRQdXNoT3duQ29udGV4dElmUHJvdmlkZXIpIHtcbiAgaWYgKGRpZFB1c2hPd25Db250ZXh0SWZQcm92aWRlciAmJiBpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgLy8gSWYgdGhlIGZpYmVyIGlzIGEgY29udGV4dCBwcm92aWRlciBpdHNlbGYsIHdoZW4gd2UgcmVhZCBpdHMgY29udGV4dFxuICAgIC8vIHdlIG1heSBoYXZlIGFscmVhZHkgcHVzaGVkIGl0cyBvd24gY2hpbGQgY29udGV4dCBvbiB0aGUgc3RhY2suIEEgY29udGV4dFxuICAgIC8vIHByb3ZpZGVyIHNob3VsZCBub3QgXCJzZWVcIiBpdHMgb3duIGNoaWxkIGNvbnRleHQuIFRoZXJlZm9yZSB3ZSByZWFkIHRoZVxuICAgIC8vIHByZXZpb3VzIChwYXJlbnQpIGNvbnRleHQgaW5zdGVhZCBmb3IgYSBjb250ZXh0IHByb3ZpZGVyLlxuICAgIHJldHVybiBwcmV2aW91c0NvbnRleHQ7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50O1xufVxuXG5mdW5jdGlvbiBjYWNoZUNvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCwgbWFza2VkQ29udGV4dCkge1xuICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gIGluc3RhbmNlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQgPSB1bm1hc2tlZENvbnRleHQ7XG4gIGluc3RhbmNlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0ID0gbWFza2VkQ29udGV4dDtcbn1cblxuZnVuY3Rpb24gZ2V0TWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0KSB7XG4gIHZhciB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgdmFyIGNvbnRleHRUeXBlcyA9IHR5cGUuY29udGV4dFR5cGVzO1xuICBpZiAoIWNvbnRleHRUeXBlcykge1xuICAgIHJldHVybiBlbXB0eUNvbnRleHRPYmplY3Q7XG4gIH1cblxuICAvLyBBdm9pZCByZWNyZWF0aW5nIG1hc2tlZCBjb250ZXh0IHVubGVzcyB1bm1hc2tlZCBjb250ZXh0IGhhcyBjaGFuZ2VkLlxuICAvLyBGYWlsaW5nIHRvIGRvIHRoaXMgd2lsbCByZXN1bHQgaW4gdW5uZWNlc3NhcnkgY2FsbHMgdG8gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcy5cbiAgLy8gVGhpcyBtYXkgdHJpZ2dlciBpbmZpbml0ZSBsb29wcyBpZiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIGNhbGxzIHNldFN0YXRlLlxuICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0ID09PSB1bm1hc2tlZENvbnRleHQpIHtcbiAgICByZXR1cm4gaW5zdGFuY2UuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7XG4gIH1cblxuICB2YXIgY29udGV4dCA9IHt9O1xuICBmb3IgKHZhciBrZXkgaW4gY29udGV4dFR5cGVzKSB7XG4gICAgY29udGV4dFtrZXldID0gdW5tYXNrZWRDb250ZXh0W2tleV07XG4gIH1cblxuICB7XG4gICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKHR5cGUpIHx8ICdVbmtub3duJztcbiAgICBjaGVja1Byb3BUeXBlcyhjb250ZXh0VHlwZXMsIGNvbnRleHQsICdjb250ZXh0JywgbmFtZSwgZ2V0Q3VycmVudEZpYmVyU3RhY2tJbkRldik7XG4gIH1cblxuICAvLyBDYWNoZSB1bm1hc2tlZCBjb250ZXh0IHNvIHdlIGNhbiBhdm9pZCByZWNyZWF0aW5nIG1hc2tlZCBjb250ZXh0IHVubGVzcyBuZWNlc3NhcnkuXG4gIC8vIENvbnRleHQgaXMgY3JlYXRlZCBiZWZvcmUgdGhlIGNsYXNzIGNvbXBvbmVudCBpcyBpbnN0YW50aWF0ZWQgc28gY2hlY2sgZm9yIGluc3RhbmNlLlxuICBpZiAoaW5zdGFuY2UpIHtcbiAgICBjYWNoZUNvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCwgY29udGV4dCk7XG4gIH1cblxuICByZXR1cm4gY29udGV4dDtcbn1cblxuZnVuY3Rpb24gaGFzQ29udGV4dENoYW5nZWQoKSB7XG4gIHJldHVybiBkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLmN1cnJlbnQ7XG59XG5cbmZ1bmN0aW9uIGlzQ29udGV4dFByb3ZpZGVyKHR5cGUpIHtcbiAgdmFyIGNoaWxkQ29udGV4dFR5cGVzID0gdHlwZS5jaGlsZENvbnRleHRUeXBlcztcbiAgcmV0dXJuIGNoaWxkQ29udGV4dFR5cGVzICE9PSBudWxsICYmIGNoaWxkQ29udGV4dFR5cGVzICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHBvcENvbnRleHQoZmliZXIpIHtcbiAgcG9wKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIGZpYmVyKTtcbiAgcG9wKGNvbnRleHRTdGFja0N1cnNvciwgZmliZXIpO1xufVxuXG5mdW5jdGlvbiBwb3BUb3BMZXZlbENvbnRleHRPYmplY3QoZmliZXIpIHtcbiAgcG9wKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIGZpYmVyKTtcbiAgcG9wKGNvbnRleHRTdGFja0N1cnNvciwgZmliZXIpO1xufVxuXG5mdW5jdGlvbiBwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0KGZpYmVyLCBjb250ZXh0LCBkaWRDaGFuZ2UpIHtcbiAgIShjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudCA9PT0gZW1wdHlDb250ZXh0T2JqZWN0KSA/IGludmFyaWFudChmYWxzZSwgJ1VuZXhwZWN0ZWQgY29udGV4dCBmb3VuZCBvbiBzdGFjay4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcblxuICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgY29udGV4dCwgZmliZXIpO1xuICBwdXNoKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIGRpZENoYW5nZSwgZmliZXIpO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzQ2hpbGRDb250ZXh0KGZpYmVyLCB0eXBlLCBwYXJlbnRDb250ZXh0KSB7XG4gIHZhciBpbnN0YW5jZSA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgdmFyIGNoaWxkQ29udGV4dFR5cGVzID0gdHlwZS5jaGlsZENvbnRleHRUeXBlcztcblxuICAvLyBUT0RPIChidmF1Z2huKSBSZXBsYWNlIHRoaXMgYmVoYXZpb3Igd2l0aCBhbiBpbnZhcmlhbnQoKSBpbiB0aGUgZnV0dXJlLlxuICAvLyBJdCBoYXMgb25seSBiZWVuIGFkZGVkIGluIEZpYmVyIHRvIG1hdGNoIHRoZSAodW5pbnRlbnRpb25hbCkgYmVoYXZpb3IgaW4gU3RhY2suXG4gIGlmICh0eXBlb2YgaW5zdGFuY2UuZ2V0Q2hpbGRDb250ZXh0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKHR5cGUpIHx8ICdVbmtub3duJztcblxuICAgICAgaWYgKCF3YXJuZWRBYm91dE1pc3NpbmdHZXRDaGlsZENvbnRleHRbY29tcG9uZW50TmFtZV0pIHtcbiAgICAgICAgd2FybmVkQWJvdXRNaXNzaW5nR2V0Q2hpbGRDb250ZXh0W2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMuY2hpbGRDb250ZXh0VHlwZXMgaXMgc3BlY2lmaWVkIGJ1dCB0aGVyZSBpcyBubyBnZXRDaGlsZENvbnRleHQoKSBtZXRob2QgJyArICdvbiB0aGUgaW5zdGFuY2UuIFlvdSBjYW4gZWl0aGVyIGRlZmluZSBnZXRDaGlsZENvbnRleHQoKSBvbiAlcyBvciByZW1vdmUgJyArICdjaGlsZENvbnRleHRUeXBlcyBmcm9tIGl0LicsIGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudE5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFyZW50Q29udGV4dDtcbiAgfVxuXG4gIHZhciBjaGlsZENvbnRleHQgPSB2b2lkIDA7XG4gIHtcbiAgICBzZXRDdXJyZW50UGhhc2UoJ2dldENoaWxkQ29udGV4dCcpO1xuICB9XG4gIHN0YXJ0UGhhc2VUaW1lcihmaWJlciwgJ2dldENoaWxkQ29udGV4dCcpO1xuICBjaGlsZENvbnRleHQgPSBpbnN0YW5jZS5nZXRDaGlsZENvbnRleHQoKTtcbiAgc3RvcFBoYXNlVGltZXIoKTtcbiAge1xuICAgIHNldEN1cnJlbnRQaGFzZShudWxsKTtcbiAgfVxuICBmb3IgKHZhciBjb250ZXh0S2V5IGluIGNoaWxkQ29udGV4dCkge1xuICAgICEoY29udGV4dEtleSBpbiBjaGlsZENvbnRleHRUeXBlcykgPyBpbnZhcmlhbnQoZmFsc2UsICclcy5nZXRDaGlsZENvbnRleHQoKToga2V5IFwiJXNcIiBpcyBub3QgZGVmaW5lZCBpbiBjaGlsZENvbnRleHRUeXBlcy4nLCBnZXRDb21wb25lbnROYW1lKHR5cGUpIHx8ICdVbmtub3duJywgY29udGV4dEtleSkgOiB2b2lkIDA7XG4gIH1cbiAge1xuICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZSh0eXBlKSB8fCAnVW5rbm93bic7XG4gICAgY2hlY2tQcm9wVHlwZXMoY2hpbGRDb250ZXh0VHlwZXMsIGNoaWxkQ29udGV4dCwgJ2NoaWxkIGNvbnRleHQnLCBuYW1lLFxuICAgIC8vIEluIHByYWN0aWNlLCB0aGVyZSBpcyBvbmUgY2FzZSBpbiB3aGljaCB3ZSB3b24ndCBnZXQgYSBzdGFjay4gSXQncyB3aGVuXG4gICAgLy8gc29tZWJvZHkgY2FsbHMgdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoKSBhbmQgd2UgcHJvY2Vzc1xuICAgIC8vIGNvbnRleHQgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudCBpbnN0YW5jZS4gVGhlIHN0YWNrIHdpbGwgYmUgbWlzc2luZ1xuICAgIC8vIGJlY2F1c2UgaXQncyBvdXRzaWRlIG9mIHRoZSByZWNvbmNpbGlhdGlvbiwgYW5kIHNvIHRoZSBwb2ludGVyIGhhcyBub3RcbiAgICAvLyBiZWVuIHNldC4gVGhpcyBpcyByYXJlIGFuZCBkb2Vzbid0IG1hdHRlci4gV2UnbGwgYWxzbyByZW1vdmUgdGhhdCBBUEkuXG4gICAgZ2V0Q3VycmVudEZpYmVyU3RhY2tJbkRldik7XG4gIH1cblxuICByZXR1cm4gX2Fzc2lnbih7fSwgcGFyZW50Q29udGV4dCwgY2hpbGRDb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gcHVzaENvbnRleHRQcm92aWRlcih3b3JrSW5Qcm9ncmVzcykge1xuICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gIC8vIFdlIHB1c2ggdGhlIGNvbnRleHQgYXMgZWFybHkgYXMgcG9zc2libGUgdG8gZW5zdXJlIHN0YWNrIGludGVncml0eS5cbiAgLy8gSWYgdGhlIGluc3RhbmNlIGRvZXMgbm90IGV4aXN0IHlldCwgd2Ugd2lsbCBwdXNoIG51bGwgYXQgZmlyc3QsXG4gIC8vIGFuZCByZXBsYWNlIGl0IG9uIHRoZSBzdGFjayBsYXRlciB3aGVuIGludmFsaWRhdGluZyB0aGUgY29udGV4dC5cbiAgdmFyIG1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQgfHwgZW1wdHlDb250ZXh0T2JqZWN0O1xuXG4gIC8vIFJlbWVtYmVyIHRoZSBwYXJlbnQgY29udGV4dCBzbyB3ZSBjYW4gbWVyZ2Ugd2l0aCBpdCBsYXRlci5cbiAgLy8gSW5oZXJpdCB0aGUgcGFyZW50J3MgZGlkLXBlcmZvcm0td29yayB2YWx1ZSB0byBhdm9pZCBpbmFkdmVydGVudGx5IGJsb2NraW5nIHVwZGF0ZXMuXG4gIHByZXZpb3VzQ29udGV4dCA9IGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50O1xuICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgbWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQsIHdvcmtJblByb2dyZXNzKTtcbiAgcHVzaChkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLCBkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLmN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgdHlwZSwgZGlkQ2hhbmdlKSB7XG4gIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgIWluc3RhbmNlID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgdG8gaGF2ZSBhbiBpbnN0YW5jZSBieSB0aGlzIHBvaW50LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuXG4gIGlmIChkaWRDaGFuZ2UpIHtcbiAgICAvLyBNZXJnZSBwYXJlbnQgYW5kIG93biBjb250ZXh0LlxuICAgIC8vIFNraXAgdGhpcyBpZiB3ZSdyZSBub3QgdXBkYXRpbmcgZHVlIHRvIHNDVS5cbiAgICAvLyBUaGlzIGF2b2lkcyB1bm5lY2Vzc2FyaWx5IHJlY29tcHV0aW5nIG1lbW9pemVkIHZhbHVlcy5cbiAgICB2YXIgbWVyZ2VkQ29udGV4dCA9IHByb2Nlc3NDaGlsZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHR5cGUsIHByZXZpb3VzQ29udGV4dCk7XG4gICAgaW5zdGFuY2UuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQgPSBtZXJnZWRDb250ZXh0O1xuXG4gICAgLy8gUmVwbGFjZSB0aGUgb2xkIChvciBlbXB0eSkgY29udGV4dCB3aXRoIHRoZSBuZXcgb25lLlxuICAgIC8vIEl0IGlzIGltcG9ydGFudCB0byB1bndpbmQgdGhlIGNvbnRleHQgaW4gdGhlIHJldmVyc2Ugb3JkZXIuXG4gICAgcG9wKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIHdvcmtJblByb2dyZXNzKTtcbiAgICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgLy8gTm93IHB1c2ggdGhlIG5ldyBjb250ZXh0IGFuZCBtYXJrIHRoYXQgaXQgaGFzIGNoYW5nZWQuXG4gICAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIG1lcmdlZENvbnRleHQsIHdvcmtJblByb2dyZXNzKTtcbiAgICBwdXNoKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIGRpZENoYW5nZSwgd29ya0luUHJvZ3Jlc3MpO1xuICB9IGVsc2Uge1xuICAgIHBvcChkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgcHVzaChkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLCBkaWRDaGFuZ2UsIHdvcmtJblByb2dyZXNzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dChmaWJlcikge1xuICAvLyBDdXJyZW50bHkgdGhpcyBpcyBvbmx5IHVzZWQgd2l0aCByZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjsgbm90IHN1cmUgaWYgaXRcbiAgLy8gbWFrZXMgc2Vuc2UgZWxzZXdoZXJlXG4gICEoaXNGaWJlck1vdW50ZWQoZmliZXIpICYmIGZpYmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQpID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgc3VidHJlZSBwYXJlbnQgdG8gYmUgYSBtb3VudGVkIGNsYXNzIGNvbXBvbmVudC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcblxuICB2YXIgbm9kZSA9IGZpYmVyO1xuICBkbyB7XG4gICAgc3dpdGNoIChub2RlLnRhZykge1xuICAgICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgICAgcmV0dXJuIG5vZGUuc3RhdGVOb2RlLmNvbnRleHQ7XG4gICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIENvbXBvbmVudCA9IG5vZGUudHlwZTtcbiAgICAgICAgICBpZiAoaXNDb250ZXh0UHJvdmlkZXIoQ29tcG9uZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gIH0gd2hpbGUgKG5vZGUgIT09IG51bGwpO1xuICBpbnZhcmlhbnQoZmFsc2UsICdGb3VuZCB1bmV4cGVjdGVkIGRldGFjaGVkIHN1YnRyZWUgcGFyZW50LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xufVxuXG52YXIgb25Db21taXRGaWJlclJvb3QgPSBudWxsO1xudmFyIG9uQ29tbWl0RmliZXJVbm1vdW50ID0gbnVsbDtcbnZhciBoYXNMb2dnZWRFcnJvciA9IGZhbHNlO1xuXG5mdW5jdGlvbiBjYXRjaEVycm9ycyhmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm4oYXJnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmICh0cnVlICYmICFoYXNMb2dnZWRFcnJvcikge1xuICAgICAgICBoYXNMb2dnZWRFcnJvciA9IHRydWU7XG4gICAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ1JlYWN0IERldlRvb2xzIGVuY291bnRlcmVkIGFuIGVycm9yOiAlcycsIGVycik7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG52YXIgaXNEZXZUb29sc1ByZXNlbnQgPSB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICE9PSAndW5kZWZpbmVkJztcblxuZnVuY3Rpb24gaW5qZWN0SW50ZXJuYWxzKGludGVybmFscykge1xuICBpZiAodHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBObyBEZXZUb29sc1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaG9vayA9IF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcbiAgaWYgKGhvb2suaXNEaXNhYmxlZCkge1xuICAgIC8vIFRoaXMgaXNuJ3QgYSByZWFsIHByb3BlcnR5IG9uIHRoZSBob29rLCBidXQgaXQgY2FuIGJlIHNldCB0byBvcHQgb3V0XG4gICAgLy8gb2YgRGV2VG9vbHMgaW50ZWdyYXRpb24gYW5kIGFzc29jaWF0ZWQgd2FybmluZ3MgYW5kIGxvZ3MuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zODc3XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCFob29rLnN1cHBvcnRzRmliZXIpIHtcbiAgICB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdUaGUgaW5zdGFsbGVkIHZlcnNpb24gb2YgUmVhY3QgRGV2VG9vbHMgaXMgdG9vIG9sZCBhbmQgd2lsbCBub3Qgd29yayAnICsgJ3dpdGggdGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBSZWFjdC4gUGxlYXNlIHVwZGF0ZSBSZWFjdCBEZXZUb29scy4gJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWRldnRvb2xzJyk7XG4gICAgfVxuICAgIC8vIERldlRvb2xzIGV4aXN0cywgZXZlbiB0aG91Z2ggaXQgZG9lc24ndCBzdXBwb3J0IEZpYmVyLlxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHRyeSB7XG4gICAgdmFyIHJlbmRlcmVySUQgPSBob29rLmluamVjdChpbnRlcm5hbHMpO1xuICAgIC8vIFdlIGhhdmUgc3VjY2Vzc2Z1bGx5IGluamVjdGVkLCBzbyBub3cgaXQgaXMgc2FmZSB0byBzZXQgdXAgaG9va3MuXG4gICAgb25Db21taXRGaWJlclJvb3QgPSBjYXRjaEVycm9ycyhmdW5jdGlvbiAocm9vdCkge1xuICAgICAgcmV0dXJuIGhvb2sub25Db21taXRGaWJlclJvb3QocmVuZGVyZXJJRCwgcm9vdCk7XG4gICAgfSk7XG4gICAgb25Db21taXRGaWJlclVubW91bnQgPSBjYXRjaEVycm9ycyhmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgIHJldHVybiBob29rLm9uQ29tbWl0RmliZXJVbm1vdW50KHJlbmRlcmVySUQsIGZpYmVyKTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gQ2F0Y2ggYWxsIGVycm9ycyBiZWNhdXNlIGl0IGlzIHVuc2FmZSB0byB0aHJvdyBkdXJpbmcgaW5pdGlhbGl6YXRpb24uXG4gICAge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnUmVhY3QgRGV2VG9vbHMgZW5jb3VudGVyZWQgYW4gZXJyb3I6ICVzLicsIGVycik7XG4gICAgfVxuICB9XG4gIC8vIERldlRvb2xzIGV4aXN0c1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21taXRSb290KHJvb3QpIHtcbiAgaWYgKHR5cGVvZiBvbkNvbW1pdEZpYmVyUm9vdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9uQ29tbWl0RmliZXJSb290KHJvb3QpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uQ29tbWl0VW5tb3VudChmaWJlcikge1xuICBpZiAodHlwZW9mIG9uQ29tbWl0RmliZXJVbm1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb25Db21taXRGaWJlclVubW91bnQoZmliZXIpO1xuICB9XG59XG5cbi8vIE1heCAzMSBiaXQgaW50ZWdlci4gVGhlIG1heCBpbnRlZ2VyIHNpemUgaW4gVjggZm9yIDMyLWJpdCBzeXN0ZW1zLlxuLy8gTWF0aC5wb3coMiwgMzApIC0gMVxuLy8gMGIxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTFcbnZhciBtYXhTaWduZWQzMUJpdEludCA9IDEwNzM3NDE4MjM7XG5cbnZhciBOb1dvcmsgPSAwO1xudmFyIFN5bmMgPSAxO1xudmFyIE5ldmVyID0gbWF4U2lnbmVkMzFCaXRJbnQ7XG5cbnZhciBVTklUX1NJWkUgPSAxMDtcbnZhciBNQUdJQ19OVU1CRVJfT0ZGU0VUID0gMjtcblxuLy8gMSB1bml0IG9mIGV4cGlyYXRpb24gdGltZSByZXByZXNlbnRzIDEwbXMuXG5mdW5jdGlvbiBtc1RvRXhwaXJhdGlvblRpbWUobXMpIHtcbiAgLy8gQWx3YXlzIGFkZCBhbiBvZmZzZXQgc28gdGhhdCB3ZSBkb24ndCBjbGFzaCB3aXRoIHRoZSBtYWdpYyBudW1iZXIgZm9yIE5vV29yay5cbiAgcmV0dXJuIChtcyAvIFVOSVRfU0laRSB8IDApICsgTUFHSUNfTlVNQkVSX09GRlNFVDtcbn1cblxuZnVuY3Rpb24gZXhwaXJhdGlvblRpbWVUb01zKGV4cGlyYXRpb25UaW1lKSB7XG4gIHJldHVybiAoZXhwaXJhdGlvblRpbWUgLSBNQUdJQ19OVU1CRVJfT0ZGU0VUKSAqIFVOSVRfU0laRTtcbn1cblxuZnVuY3Rpb24gY2VpbGluZyhudW0sIHByZWNpc2lvbikge1xuICByZXR1cm4gKChudW0gLyBwcmVjaXNpb24gfCAwKSArIDEpICogcHJlY2lzaW9uO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlRXhwaXJhdGlvbkJ1Y2tldChjdXJyZW50VGltZSwgZXhwaXJhdGlvbkluTXMsIGJ1Y2tldFNpemVNcykge1xuICByZXR1cm4gTUFHSUNfTlVNQkVSX09GRlNFVCArIGNlaWxpbmcoY3VycmVudFRpbWUgLSBNQUdJQ19OVU1CRVJfT0ZGU0VUICsgZXhwaXJhdGlvbkluTXMgLyBVTklUX1NJWkUsIGJ1Y2tldFNpemVNcyAvIFVOSVRfU0laRSk7XG59XG5cbnZhciBMT1dfUFJJT1JJVFlfRVhQSVJBVElPTiA9IDUwMDA7XG52YXIgTE9XX1BSSU9SSVRZX0JBVENIX1NJWkUgPSAyNTA7XG5cbmZ1bmN0aW9uIGNvbXB1dGVBc3luY0V4cGlyYXRpb24oY3VycmVudFRpbWUpIHtcbiAgcmV0dXJuIGNvbXB1dGVFeHBpcmF0aW9uQnVja2V0KGN1cnJlbnRUaW1lLCBMT1dfUFJJT1JJVFlfRVhQSVJBVElPTiwgTE9XX1BSSU9SSVRZX0JBVENIX1NJWkUpO1xufVxuXG4vLyBXZSBpbnRlbnRpb25hbGx5IHNldCBhIGhpZ2hlciBleHBpcmF0aW9uIHRpbWUgZm9yIGludGVyYWN0aXZlIHVwZGF0ZXMgaW5cbi8vIGRldiB0aGFuIGluIHByb2R1Y3Rpb24uXG4vL1xuLy8gSWYgdGhlIG1haW4gdGhyZWFkIGlzIGJlaW5nIGJsb2NrZWQgc28gbG9uZyB0aGF0IHlvdSBoaXQgdGhlIGV4cGlyYXRpb24sXG4vLyBpdCdzIGEgcHJvYmxlbSB0aGF0IGNvdWxkIGJlIHNvbHZlZCB3aXRoIGJldHRlciBzY2hlZHVsaW5nLlxuLy9cbi8vIFBlb3BsZSB3aWxsIGJlIG1vcmUgbGlrZWx5IHRvIG5vdGljZSB0aGlzIGFuZCBmaXggaXQgd2l0aCB0aGUgbG9uZ1xuLy8gZXhwaXJhdGlvbiB0aW1lIGluIGRldmVsb3BtZW50LlxuLy9cbi8vIEluIHByb2R1Y3Rpb24gd2Ugb3B0IGZvciBiZXR0ZXIgVVggYXQgdGhlIHJpc2sgb2YgbWFza2luZyBzY2hlZHVsaW5nXG4vLyBwcm9ibGVtcywgYnkgZXhwaXJpbmcgZmFzdC5cbnZhciBISUdIX1BSSU9SSVRZX0VYUElSQVRJT04gPSA1MDA7XG52YXIgSElHSF9QUklPUklUWV9CQVRDSF9TSVpFID0gMTAwO1xuXG5mdW5jdGlvbiBjb21wdXRlSW50ZXJhY3RpdmVFeHBpcmF0aW9uKGN1cnJlbnRUaW1lKSB7XG4gIHJldHVybiBjb21wdXRlRXhwaXJhdGlvbkJ1Y2tldChjdXJyZW50VGltZSwgSElHSF9QUklPUklUWV9FWFBJUkFUSU9OLCBISUdIX1BSSU9SSVRZX0JBVENIX1NJWkUpO1xufVxuXG52YXIgTm9Db250ZXh0ID0gMDtcbnZhciBDb25jdXJyZW50TW9kZSA9IDE7XG52YXIgU3RyaWN0TW9kZSA9IDI7XG52YXIgUHJvZmlsZU1vZGUgPSA0O1xuXG52YXIgaGFzQmFkTWFwUG9seWZpbGwgPSB2b2lkIDA7XG5cbntcbiAgaGFzQmFkTWFwUG9seWZpbGwgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgbm9uRXh0ZW5zaWJsZU9iamVjdCA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSk7XG4gICAgdmFyIHRlc3RNYXAgPSBuZXcgTWFwKFtbbm9uRXh0ZW5zaWJsZU9iamVjdCwgbnVsbF1dKTtcbiAgICB2YXIgdGVzdFNldCA9IG5ldyBTZXQoW25vbkV4dGVuc2libGVPYmplY3RdKTtcbiAgICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSBmb3IgUm9sbHVwIHRvIG5vdCBjb25zaWRlciB0aGVzZSB1bnVzZWQuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvaXNzdWVzLzE3NzFcbiAgICAvLyBUT0RPOiB3ZSBjYW4gcmVtb3ZlIHRoZXNlIGlmIFJvbGx1cCBmaXhlcyB0aGUgYnVnLlxuICAgIHRlc3RNYXAuc2V0KDAsIDApO1xuICAgIHRlc3RTZXQuYWRkKDApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gVE9ETzogQ29uc2lkZXIgd2FybmluZyBhYm91dCBiYWQgcG9seWZpbGxzXG4gICAgaGFzQmFkTWFwUG9seWZpbGwgPSB0cnVlO1xuICB9XG59XG5cbi8vIEEgRmliZXIgaXMgd29yayBvbiBhIENvbXBvbmVudCB0aGF0IG5lZWRzIHRvIGJlIGRvbmUgb3Igd2FzIGRvbmUuIFRoZXJlIGNhblxuLy8gYmUgbW9yZSB0aGFuIG9uZSBwZXIgY29tcG9uZW50LlxuXG5cbnZhciBkZWJ1Z0NvdW50ZXIgPSB2b2lkIDA7XG5cbntcbiAgZGVidWdDb3VudGVyID0gMTtcbn1cblxuZnVuY3Rpb24gRmliZXJOb2RlKHRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpIHtcbiAgLy8gSW5zdGFuY2VcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMua2V5ID0ga2V5O1xuICB0aGlzLmVsZW1lbnRUeXBlID0gbnVsbDtcbiAgdGhpcy50eXBlID0gbnVsbDtcbiAgdGhpcy5zdGF0ZU5vZGUgPSBudWxsO1xuXG4gIC8vIEZpYmVyXG4gIHRoaXMucmV0dXJuID0gbnVsbDtcbiAgdGhpcy5jaGlsZCA9IG51bGw7XG4gIHRoaXMuc2libGluZyA9IG51bGw7XG4gIHRoaXMuaW5kZXggPSAwO1xuXG4gIHRoaXMucmVmID0gbnVsbDtcblxuICB0aGlzLnBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcztcbiAgdGhpcy5tZW1vaXplZFByb3BzID0gbnVsbDtcbiAgdGhpcy51cGRhdGVRdWV1ZSA9IG51bGw7XG4gIHRoaXMubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIHRoaXMuZmlyc3RDb250ZXh0RGVwZW5kZW5jeSA9IG51bGw7XG5cbiAgdGhpcy5tb2RlID0gbW9kZTtcblxuICAvLyBFZmZlY3RzXG4gIHRoaXMuZWZmZWN0VGFnID0gTm9FZmZlY3Q7XG4gIHRoaXMubmV4dEVmZmVjdCA9IG51bGw7XG5cbiAgdGhpcy5maXJzdEVmZmVjdCA9IG51bGw7XG4gIHRoaXMubGFzdEVmZmVjdCA9IG51bGw7XG5cbiAgdGhpcy5leHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgdGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xuXG4gIHRoaXMuYWx0ZXJuYXRlID0gbnVsbDtcblxuICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgIHRoaXMuYWN0dWFsRHVyYXRpb24gPSAwO1xuICAgIHRoaXMuYWN0dWFsU3RhcnRUaW1lID0gLTE7XG4gICAgdGhpcy5zZWxmQmFzZUR1cmF0aW9uID0gMDtcbiAgICB0aGlzLnRyZWVCYXNlRHVyYXRpb24gPSAwO1xuICB9XG5cbiAge1xuICAgIHRoaXMuX2RlYnVnSUQgPSBkZWJ1Z0NvdW50ZXIrKztcbiAgICB0aGlzLl9kZWJ1Z1NvdXJjZSA9IG51bGw7XG4gICAgdGhpcy5fZGVidWdPd25lciA9IG51bGw7XG4gICAgdGhpcy5fZGVidWdJc0N1cnJlbnRseVRpbWluZyA9IGZhbHNlO1xuICAgIGlmICghaGFzQmFkTWFwUG9seWZpbGwgJiYgdHlwZW9mIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHRoaXMpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIGlzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIHJhdGhlciB0aGFuIGEgUE9KTyBjb25zdHJ1Y3Rvciwgc3RpbGxcbi8vIHBsZWFzZSBlbnN1cmUgd2UgZG8gdGhlIGZvbGxvd2luZzpcbi8vIDEpIE5vYm9keSBzaG91bGQgYWRkIGFueSBpbnN0YW5jZSBtZXRob2RzIG9uIHRoaXMuIEluc3RhbmNlIG1ldGhvZHMgY2FuIGJlXG4vLyAgICBtb3JlIGRpZmZpY3VsdCB0byBwcmVkaWN0IHdoZW4gdGhleSBnZXQgb3B0aW1pemVkIGFuZCB0aGV5IGFyZSBhbG1vc3Rcbi8vICAgIG5ldmVyIGlubGluZWQgcHJvcGVybHkgaW4gc3RhdGljIGNvbXBpbGVycy5cbi8vIDIpIE5vYm9keSBzaG91bGQgcmVseSBvbiBgaW5zdGFuY2VvZiBGaWJlcmAgZm9yIHR5cGUgdGVzdGluZy4gV2Ugc2hvdWxkXG4vLyAgICBhbHdheXMga25vdyB3aGVuIGl0IGlzIGEgZmliZXIuXG4vLyAzKSBXZSBtaWdodCB3YW50IHRvIGV4cGVyaW1lbnQgd2l0aCB1c2luZyBudW1lcmljIGtleXMgc2luY2UgdGhleSBhcmUgZWFzaWVyXG4vLyAgICB0byBvcHRpbWl6ZSBpbiBhIG5vbi1KSVQgZW52aXJvbm1lbnQuXG4vLyA0KSBXZSBjYW4gZWFzaWx5IGdvIGZyb20gYSBjb25zdHJ1Y3RvciB0byBhIGNyZWF0ZUZpYmVyIG9iamVjdCBsaXRlcmFsIGlmIHRoYXRcbi8vICAgIGlzIGZhc3Rlci5cbi8vIDUpIEl0IHNob3VsZCBiZSBlYXN5IHRvIHBvcnQgdGhpcyB0byBhIEMgc3RydWN0IGFuZCBrZWVwIGEgQyBpbXBsZW1lbnRhdGlvblxuLy8gICAgY29tcGF0aWJsZS5cbnZhciBjcmVhdGVGaWJlciA9IGZ1bmN0aW9uICh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSB7XG4gIC8vICRGbG93Rml4TWU6IHRoZSBzaGFwZXMgYXJlIGV4YWN0IGhlcmUgYnV0IEZsb3cgZG9lc24ndCBsaWtlIGNvbnN0cnVjdG9yc1xuICByZXR1cm4gbmV3IEZpYmVyTm9kZSh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKTtcbn07XG5cbmZ1bmN0aW9uIHNob3VsZENvbnN0cnVjdChDb21wb25lbnQpIHtcbiAgdmFyIHByb3RvdHlwZSA9IENvbXBvbmVudC5wcm90b3R5cGU7XG4gIHJldHVybiAhIShwcm90b3R5cGUgJiYgcHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpO1xufVxuXG5mdW5jdGlvbiBpc1NpbXBsZUZ1bmN0aW9uQ29tcG9uZW50KHR5cGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nICYmICFzaG91bGRDb25zdHJ1Y3QodHlwZSkgJiYgdHlwZS5kZWZhdWx0UHJvcHMgPT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUxhenlDb21wb25lbnRUYWcoQ29tcG9uZW50KSB7XG4gIGlmICh0eXBlb2YgQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHNob3VsZENvbnN0cnVjdChDb21wb25lbnQpID8gQ2xhc3NDb21wb25lbnQgOiBGdW5jdGlvbkNvbXBvbmVudDtcbiAgfSBlbHNlIGlmIChDb21wb25lbnQgIT09IHVuZGVmaW5lZCAmJiBDb21wb25lbnQgIT09IG51bGwpIHtcbiAgICB2YXIgJCR0eXBlb2YgPSBDb21wb25lbnQuJCR0eXBlb2Y7XG4gICAgaWYgKCQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFKSB7XG4gICAgICByZXR1cm4gRm9yd2FyZFJlZjtcbiAgICB9XG4gICAgaWYgKCQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUpIHtcbiAgICAgIHJldHVybiBNZW1vQ29tcG9uZW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gSW5kZXRlcm1pbmF0ZUNvbXBvbmVudDtcbn1cblxuLy8gVGhpcyBpcyB1c2VkIHRvIGNyZWF0ZSBhbiBhbHRlcm5hdGUgZmliZXIgdG8gZG8gd29yayBvbi5cbmZ1bmN0aW9uIGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnQsIHBlbmRpbmdQcm9wcywgZXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIHdvcmtJblByb2dyZXNzID0gY3VycmVudC5hbHRlcm5hdGU7XG4gIGlmICh3b3JrSW5Qcm9ncmVzcyA9PT0gbnVsbCkge1xuICAgIC8vIFdlIHVzZSBhIGRvdWJsZSBidWZmZXJpbmcgcG9vbGluZyB0ZWNobmlxdWUgYmVjYXVzZSB3ZSBrbm93IHRoYXQgd2UnbGxcbiAgICAvLyBvbmx5IGV2ZXIgbmVlZCBhdCBtb3N0IHR3byB2ZXJzaW9ucyBvZiBhIHRyZWUuIFdlIHBvb2wgdGhlIFwib3RoZXJcIiB1bnVzZWRcbiAgICAvLyBub2RlIHRoYXQgd2UncmUgZnJlZSB0byByZXVzZS4gVGhpcyBpcyBsYXppbHkgY3JlYXRlZCB0byBhdm9pZCBhbGxvY2F0aW5nXG4gICAgLy8gZXh0cmEgb2JqZWN0cyBmb3IgdGhpbmdzIHRoYXQgYXJlIG5ldmVyIHVwZGF0ZWQuIEl0IGFsc28gYWxsb3cgdXMgdG9cbiAgICAvLyByZWNsYWltIHRoZSBleHRyYSBtZW1vcnkgaWYgbmVlZGVkLlxuICAgIHdvcmtJblByb2dyZXNzID0gY3JlYXRlRmliZXIoY3VycmVudC50YWcsIHBlbmRpbmdQcm9wcywgY3VycmVudC5rZXksIGN1cnJlbnQubW9kZSk7XG4gICAgd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUgPSBjdXJyZW50LmVsZW1lbnRUeXBlO1xuICAgIHdvcmtJblByb2dyZXNzLnR5cGUgPSBjdXJyZW50LnR5cGU7XG4gICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudC5zdGF0ZU5vZGU7XG5cbiAgICB7XG4gICAgICAvLyBERVYtb25seSBmaWVsZHNcbiAgICAgIHdvcmtJblByb2dyZXNzLl9kZWJ1Z0lEID0gY3VycmVudC5fZGVidWdJRDtcbiAgICAgIHdvcmtJblByb2dyZXNzLl9kZWJ1Z1NvdXJjZSA9IGN1cnJlbnQuX2RlYnVnU291cmNlO1xuICAgICAgd29ya0luUHJvZ3Jlc3MuX2RlYnVnT3duZXIgPSBjdXJyZW50Ll9kZWJ1Z093bmVyO1xuICAgIH1cblxuICAgIHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IGN1cnJlbnQ7XG4gICAgY3VycmVudC5hbHRlcm5hdGUgPSB3b3JrSW5Qcm9ncmVzcztcbiAgfSBlbHNlIHtcbiAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHM7XG5cbiAgICAvLyBXZSBhbHJlYWR5IGhhdmUgYW4gYWx0ZXJuYXRlLlxuICAgIC8vIFJlc2V0IHRoZSBlZmZlY3QgdGFnLlxuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyA9IE5vRWZmZWN0O1xuXG4gICAgLy8gVGhlIGVmZmVjdCBsaXN0IGlzIG5vIGxvbmdlciB2YWxpZC5cbiAgICB3b3JrSW5Qcm9ncmVzcy5uZXh0RWZmZWN0ID0gbnVsbDtcbiAgICB3b3JrSW5Qcm9ncmVzcy5maXJzdEVmZmVjdCA9IG51bGw7XG4gICAgd29ya0luUHJvZ3Jlc3MubGFzdEVmZmVjdCA9IG51bGw7XG5cbiAgICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgICAgLy8gV2UgaW50ZW50aW9uYWxseSByZXNldCwgcmF0aGVyIHRoYW4gY29weSwgYWN0dWFsRHVyYXRpb24gJiBhY3R1YWxTdGFydFRpbWUuXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIHRpbWUgZnJvbSBlbmRsZXNzbHkgYWNjdW11bGF0aW5nIGluIG5ldyBjb21taXRzLlxuICAgICAgLy8gVGhpcyBoYXMgdGhlIGRvd25zaWRlIG9mIHJlc2V0dGluZyB2YWx1ZXMgZm9yIGRpZmZlcmVudCBwcmlvcml0eSByZW5kZXJzLFxuICAgICAgLy8gQnV0IHdvcmtzIGZvciB5aWVsZGluZyAodGhlIGNvbW1vbiBjYXNlKSBhbmQgc2hvdWxkIHN1cHBvcnQgcmVzdW1pbmcuXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5hY3R1YWxEdXJhdGlvbiA9IDA7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5hY3R1YWxTdGFydFRpbWUgPSAtMTtcbiAgICB9XG4gIH1cblxuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZEV4cGlyYXRpb25UaW1lID0gY3VycmVudC5jaGlsZEV4cGlyYXRpb25UaW1lO1xuICB3b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZSA9IGN1cnJlbnQuZXhwaXJhdGlvblRpbWU7XG5cbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50LmNoaWxkO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gY3VycmVudC5tZW1vaXplZFByb3BzO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gIHdvcmtJblByb2dyZXNzLmZpcnN0Q29udGV4dERlcGVuZGVuY3kgPSBjdXJyZW50LmZpcnN0Q29udGV4dERlcGVuZGVuY3k7XG5cbiAgLy8gVGhlc2Ugd2lsbCBiZSBvdmVycmlkZGVuIGR1cmluZyB0aGUgcGFyZW50J3MgcmVjb25jaWxpYXRpb25cbiAgd29ya0luUHJvZ3Jlc3Muc2libGluZyA9IGN1cnJlbnQuc2libGluZztcbiAgd29ya0luUHJvZ3Jlc3MuaW5kZXggPSBjdXJyZW50LmluZGV4O1xuICB3b3JrSW5Qcm9ncmVzcy5yZWYgPSBjdXJyZW50LnJlZjtcblxuICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgIHdvcmtJblByb2dyZXNzLnNlbGZCYXNlRHVyYXRpb24gPSBjdXJyZW50LnNlbGZCYXNlRHVyYXRpb247XG4gICAgd29ya0luUHJvZ3Jlc3MudHJlZUJhc2VEdXJhdGlvbiA9IGN1cnJlbnQudHJlZUJhc2VEdXJhdGlvbjtcbiAgfVxuXG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbn1cblxuZnVuY3Rpb24gY3JlYXRlSG9zdFJvb3RGaWJlcihpc0NvbmN1cnJlbnQpIHtcbiAgdmFyIG1vZGUgPSBpc0NvbmN1cnJlbnQgPyBDb25jdXJyZW50TW9kZSB8IFN0cmljdE1vZGUgOiBOb0NvbnRleHQ7XG5cbiAgaWYgKGVuYWJsZVByb2ZpbGVyVGltZXIgJiYgaXNEZXZUb29sc1ByZXNlbnQpIHtcbiAgICAvLyBBbHdheXMgY29sbGVjdCBwcm9maWxlIHRpbWluZ3Mgd2hlbiBEZXZUb29scyBhcmUgcHJlc2VudC5cbiAgICAvLyBUaGlzIGVuYWJsZXMgRGV2VG9vbHMgdG8gc3RhcnQgY2FwdHVyaW5nIHRpbWluZyBhdCBhbnkgcG9pbnTigJNcbiAgICAvLyBXaXRob3V0IHNvbWUgbm9kZXMgaW4gdGhlIHRyZWUgaGF2aW5nIGVtcHR5IGJhc2UgdGltZXMuXG4gICAgbW9kZSB8PSBQcm9maWxlTW9kZTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVGaWJlcihIb3N0Um9vdCwgbnVsbCwgbnVsbCwgbW9kZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyh0eXBlLCAvLyBSZWFjdCRFbGVtZW50VHlwZVxua2V5LCBwZW5kaW5nUHJvcHMsIG93bmVyLCBtb2RlLCBleHBpcmF0aW9uVGltZSkge1xuICB2YXIgZmliZXIgPSB2b2lkIDA7XG5cbiAgdmFyIGZpYmVyVGFnID0gSW5kZXRlcm1pbmF0ZUNvbXBvbmVudDtcbiAgLy8gVGhlIHJlc29sdmVkIHR5cGUgaXMgc2V0IGlmIHdlIGtub3cgd2hhdCB0aGUgZmluYWwgdHlwZSB3aWxsIGJlLiBJLmUuIGl0J3Mgbm90IGxhenkuXG4gIHZhciByZXNvbHZlZFR5cGUgPSB0eXBlO1xuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoc2hvdWxkQ29uc3RydWN0KHR5cGUpKSB7XG4gICAgICBmaWJlclRhZyA9IENsYXNzQ29tcG9uZW50O1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBmaWJlclRhZyA9IEhvc3RDb21wb25lbnQ7XG4gIH0gZWxzZSB7XG4gICAgZ2V0VGFnOiBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KHBlbmRpbmdQcm9wcy5jaGlsZHJlbiwgbW9kZSwgZXhwaXJhdGlvblRpbWUsIGtleSk7XG4gICAgICBjYXNlIFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFOlxuICAgICAgICByZXR1cm4gY3JlYXRlRmliZXJGcm9tTW9kZShwZW5kaW5nUHJvcHMsIG1vZGUgfCBDb25jdXJyZW50TW9kZSB8IFN0cmljdE1vZGUsIGV4cGlyYXRpb25UaW1lLCBrZXkpO1xuICAgICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgICByZXR1cm4gY3JlYXRlRmliZXJGcm9tTW9kZShwZW5kaW5nUHJvcHMsIG1vZGUgfCBTdHJpY3RNb2RlLCBleHBpcmF0aW9uVGltZSwga2V5KTtcbiAgICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbVByb2ZpbGVyKHBlbmRpbmdQcm9wcywgbW9kZSwgZXhwaXJhdGlvblRpbWUsIGtleSk7XG4gICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgIHJldHVybiBjcmVhdGVGaWJlckZyb21TdXNwZW5zZShwZW5kaW5nUHJvcHMsIG1vZGUsIGV4cGlyYXRpb25UaW1lLCBrZXkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpcbiAgICAgICAgICAgICAgICBmaWJlclRhZyA9IENvbnRleHRQcm92aWRlcjtcbiAgICAgICAgICAgICAgICBicmVhayBnZXRUYWc7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBjb25zdW1lclxuICAgICAgICAgICAgICAgIGZpYmVyVGFnID0gQ29udGV4dENvbnN1bWVyO1xuICAgICAgICAgICAgICAgIGJyZWFrIGdldFRhZztcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICAgIGZpYmVyVGFnID0gRm9yd2FyZFJlZjtcbiAgICAgICAgICAgICAgICBicmVhayBnZXRUYWc7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICAgICAgICAgIGZpYmVyVGFnID0gTWVtb0NvbXBvbmVudDtcbiAgICAgICAgICAgICAgICBicmVhayBnZXRUYWc7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgICAgICAgIGZpYmVyVGFnID0gTGF6eUNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICByZXNvbHZlZFR5cGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrIGdldFRhZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZm8gPSAnJztcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmIE9iamVjdC5rZXlzKHR5cGUpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICBpbmZvICs9ICcgWW91IGxpa2VseSBmb3Jnb3QgdG8gZXhwb3J0IHlvdXIgY29tcG9uZW50IGZyb20gdGhlIGZpbGUgJyArIFwiaXQncyBkZWZpbmVkIGluLCBvciB5b3UgbWlnaHQgaGF2ZSBtaXhlZCB1cCBkZWZhdWx0IGFuZCBcIiArICduYW1lZCBpbXBvcnRzLic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb3duZXJOYW1lID0gb3duZXIgPyBnZXRDb21wb25lbnROYW1lKG93bmVyLnR5cGUpIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChvd25lck5hbWUpIHtcbiAgICAgICAgICAgICAgaW5mbyArPSAnXFxuXFxuQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBvd25lck5hbWUgKyAnYC4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdFbGVtZW50IHR5cGUgaXMgaW52YWxpZDogZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciBidWlsdC1pbiBjb21wb25lbnRzKSBvciBhIGNsYXNzL2Z1bmN0aW9uIChmb3IgY29tcG9zaXRlIGNvbXBvbmVudHMpIGJ1dCBnb3Q6ICVzLiVzJywgdHlwZSA9PSBudWxsID8gdHlwZSA6IHR5cGVvZiB0eXBlLCBpbmZvKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZpYmVyID0gY3JlYXRlRmliZXIoZmliZXJUYWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKTtcbiAgZmliZXIuZWxlbWVudFR5cGUgPSB0eXBlO1xuICBmaWJlci50eXBlID0gcmVzb2x2ZWRUeXBlO1xuICBmaWJlci5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuXG4gIHJldHVybiBmaWJlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tRWxlbWVudChlbGVtZW50LCBtb2RlLCBleHBpcmF0aW9uVGltZSkge1xuICB2YXIgb3duZXIgPSBudWxsO1xuICB7XG4gICAgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgfVxuICB2YXIgdHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgdmFyIGtleSA9IGVsZW1lbnQua2V5O1xuICB2YXIgcGVuZGluZ1Byb3BzID0gZWxlbWVudC5wcm9wcztcbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKHR5cGUsIGtleSwgcGVuZGluZ1Byb3BzLCBvd25lciwgbW9kZSwgZXhwaXJhdGlvblRpbWUpO1xuICB7XG4gICAgZmliZXIuX2RlYnVnU291cmNlID0gZWxlbWVudC5fc291cmNlO1xuICAgIGZpYmVyLl9kZWJ1Z093bmVyID0gZWxlbWVudC5fb3duZXI7XG4gIH1cbiAgcmV0dXJuIGZpYmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21GcmFnbWVudChlbGVtZW50cywgbW9kZSwgZXhwaXJhdGlvblRpbWUsIGtleSkge1xuICB2YXIgZmliZXIgPSBjcmVhdGVGaWJlcihGcmFnbWVudCwgZWxlbWVudHMsIGtleSwgbW9kZSk7XG4gIGZpYmVyLmV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gIHJldHVybiBmaWJlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tUHJvZmlsZXIocGVuZGluZ1Byb3BzLCBtb2RlLCBleHBpcmF0aW9uVGltZSwga2V5KSB7XG4gIHtcbiAgICBpZiAodHlwZW9mIHBlbmRpbmdQcm9wcy5pZCAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIHBlbmRpbmdQcm9wcy5vblJlbmRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnUHJvZmlsZXIgbXVzdCBzcGVjaWZ5IGFuIFwiaWRcIiBzdHJpbmcgYW5kIFwib25SZW5kZXJcIiBmdW5jdGlvbiBhcyBwcm9wcycpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVyKFByb2ZpbGVyLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSB8IFByb2ZpbGVNb2RlKTtcbiAgLy8gVE9ETzogVGhlIFByb2ZpbGVyIGZpYmVyIHNob3VsZG4ndCBoYXZlIGEgdHlwZS4gSXQgaGFzIGEgdGFnLlxuICBmaWJlci5lbGVtZW50VHlwZSA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG4gIGZpYmVyLnR5cGUgPSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xuICBmaWJlci5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuXG4gIHJldHVybiBmaWJlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tTW9kZShwZW5kaW5nUHJvcHMsIG1vZGUsIGV4cGlyYXRpb25UaW1lLCBrZXkpIHtcbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXIoTW9kZSwgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpO1xuXG4gIC8vIFRPRE86IFRoZSBNb2RlIGZpYmVyIHNob3VsZG4ndCBoYXZlIGEgdHlwZS4gSXQgaGFzIGEgdGFnLlxuICB2YXIgdHlwZSA9IChtb2RlICYgQ29uY3VycmVudE1vZGUpID09PSBOb0NvbnRleHQgPyBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIDogUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU7XG4gIGZpYmVyLmVsZW1lbnRUeXBlID0gdHlwZTtcbiAgZmliZXIudHlwZSA9IHR5cGU7XG5cbiAgZmliZXIuZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgcmV0dXJuIGZpYmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21TdXNwZW5zZShwZW5kaW5nUHJvcHMsIG1vZGUsIGV4cGlyYXRpb25UaW1lLCBrZXkpIHtcbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXIoU3VzcGVuc2VDb21wb25lbnQsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKTtcblxuICAvLyBUT0RPOiBUaGUgU3VzcGVuc2VDb21wb25lbnQgZmliZXIgc2hvdWxkbid0IGhhdmUgYSB0eXBlLiBJdCBoYXMgYSB0YWcuXG4gIHZhciB0eXBlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcbiAgZmliZXIuZWxlbWVudFR5cGUgPSB0eXBlO1xuICBmaWJlci50eXBlID0gdHlwZTtcblxuICBmaWJlci5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICByZXR1cm4gZmliZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVRleHQoY29udGVudCwgbW9kZSwgZXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXIoSG9zdFRleHQsIGNvbnRlbnQsIG51bGwsIG1vZGUpO1xuICBmaWJlci5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICByZXR1cm4gZmliZXI7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbUhvc3RJbnN0YW5jZUZvckRlbGV0aW9uKCkge1xuICB2YXIgZmliZXIgPSBjcmVhdGVGaWJlcihIb3N0Q29tcG9uZW50LCBudWxsLCBudWxsLCBOb0NvbnRleHQpO1xuICAvLyBUT0RPOiBUaGVzZSBzaG91bGQgbm90IG5lZWQgYSB0eXBlLlxuICBmaWJlci5lbGVtZW50VHlwZSA9ICdERUxFVEVEJztcbiAgZmliZXIudHlwZSA9ICdERUxFVEVEJztcbiAgcmV0dXJuIGZpYmVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21Qb3J0YWwocG9ydGFsLCBtb2RlLCBleHBpcmF0aW9uVGltZSkge1xuICB2YXIgcGVuZGluZ1Byb3BzID0gcG9ydGFsLmNoaWxkcmVuICE9PSBudWxsID8gcG9ydGFsLmNoaWxkcmVuIDogW107XG4gIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVyKEhvc3RQb3J0YWwsIHBlbmRpbmdQcm9wcywgcG9ydGFsLmtleSwgbW9kZSk7XG4gIGZpYmVyLmV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gIGZpYmVyLnN0YXRlTm9kZSA9IHtcbiAgICBjb250YWluZXJJbmZvOiBwb3J0YWwuY29udGFpbmVySW5mbyxcbiAgICBwZW5kaW5nQ2hpbGRyZW46IG51bGwsIC8vIFVzZWQgYnkgcGVyc2lzdGVudCB1cGRhdGVzXG4gICAgaW1wbGVtZW50YXRpb246IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICB9O1xuICByZXR1cm4gZmliZXI7XG59XG5cbi8vIFVzZWQgZm9yIHN0YXNoaW5nIFdJUCBwcm9wZXJ0aWVzIHRvIHJlcGxheSBmYWlsZWQgd29yayBpbiBERVYuXG5mdW5jdGlvbiBhc3NpZ25GaWJlclByb3BlcnRpZXNJbkRFVih0YXJnZXQsIHNvdXJjZSkge1xuICBpZiAodGFyZ2V0ID09PSBudWxsKSB7XG4gICAgLy8gVGhpcyBGaWJlcidzIGluaXRpYWwgcHJvcGVydGllcyB3aWxsIGFsd2F5cyBiZSBvdmVyd3JpdHRlbi5cbiAgICAvLyBXZSBvbmx5IHVzZSBhIEZpYmVyIHRvIGVuc3VyZSB0aGUgc2FtZSBoaWRkZW4gY2xhc3Mgc28gREVWIGlzbid0IHNsb3cuXG4gICAgdGFyZ2V0ID0gY3JlYXRlRmliZXIoSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCwgbnVsbCwgbnVsbCwgTm9Db250ZXh0KTtcbiAgfVxuXG4gIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSB3cml0dGVuIGFzIGEgbGlzdCBvZiBhbGwgcHJvcGVydGllcy5cbiAgLy8gV2UgdHJpZWQgdG8gdXNlIE9iamVjdC5hc3NpZ24oKSBpbnN0ZWFkIGJ1dCB0aGlzIGlzIGNhbGxlZCBpblxuICAvLyB0aGUgaG90dGVzdCBwYXRoLCBhbmQgT2JqZWN0LmFzc2lnbigpIHdhcyB0b28gc2xvdzpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMjUwMlxuICAvLyBUaGlzIGNvZGUgaXMgREVWLW9ubHkgc28gc2l6ZSBpcyBub3QgYSBjb25jZXJuLlxuXG4gIHRhcmdldC50YWcgPSBzb3VyY2UudGFnO1xuICB0YXJnZXQua2V5ID0gc291cmNlLmtleTtcbiAgdGFyZ2V0LmVsZW1lbnRUeXBlID0gc291cmNlLmVsZW1lbnRUeXBlO1xuICB0YXJnZXQudHlwZSA9IHNvdXJjZS50eXBlO1xuICB0YXJnZXQuc3RhdGVOb2RlID0gc291cmNlLnN0YXRlTm9kZTtcbiAgdGFyZ2V0LnJldHVybiA9IHNvdXJjZS5yZXR1cm47XG4gIHRhcmdldC5jaGlsZCA9IHNvdXJjZS5jaGlsZDtcbiAgdGFyZ2V0LnNpYmxpbmcgPSBzb3VyY2Uuc2libGluZztcbiAgdGFyZ2V0LmluZGV4ID0gc291cmNlLmluZGV4O1xuICB0YXJnZXQucmVmID0gc291cmNlLnJlZjtcbiAgdGFyZ2V0LnBlbmRpbmdQcm9wcyA9IHNvdXJjZS5wZW5kaW5nUHJvcHM7XG4gIHRhcmdldC5tZW1vaXplZFByb3BzID0gc291cmNlLm1lbW9pemVkUHJvcHM7XG4gIHRhcmdldC51cGRhdGVRdWV1ZSA9IHNvdXJjZS51cGRhdGVRdWV1ZTtcbiAgdGFyZ2V0Lm1lbW9pemVkU3RhdGUgPSBzb3VyY2UubWVtb2l6ZWRTdGF0ZTtcbiAgdGFyZ2V0LmZpcnN0Q29udGV4dERlcGVuZGVuY3kgPSBzb3VyY2UuZmlyc3RDb250ZXh0RGVwZW5kZW5jeTtcbiAgdGFyZ2V0Lm1vZGUgPSBzb3VyY2UubW9kZTtcbiAgdGFyZ2V0LmVmZmVjdFRhZyA9IHNvdXJjZS5lZmZlY3RUYWc7XG4gIHRhcmdldC5uZXh0RWZmZWN0ID0gc291cmNlLm5leHRFZmZlY3Q7XG4gIHRhcmdldC5maXJzdEVmZmVjdCA9IHNvdXJjZS5maXJzdEVmZmVjdDtcbiAgdGFyZ2V0Lmxhc3RFZmZlY3QgPSBzb3VyY2UubGFzdEVmZmVjdDtcbiAgdGFyZ2V0LmV4cGlyYXRpb25UaW1lID0gc291cmNlLmV4cGlyYXRpb25UaW1lO1xuICB0YXJnZXQuY2hpbGRFeHBpcmF0aW9uVGltZSA9IHNvdXJjZS5jaGlsZEV4cGlyYXRpb25UaW1lO1xuICB0YXJnZXQuYWx0ZXJuYXRlID0gc291cmNlLmFsdGVybmF0ZTtcbiAgaWYgKGVuYWJsZVByb2ZpbGVyVGltZXIpIHtcbiAgICB0YXJnZXQuYWN0dWFsRHVyYXRpb24gPSBzb3VyY2UuYWN0dWFsRHVyYXRpb247XG4gICAgdGFyZ2V0LmFjdHVhbFN0YXJ0VGltZSA9IHNvdXJjZS5hY3R1YWxTdGFydFRpbWU7XG4gICAgdGFyZ2V0LnNlbGZCYXNlRHVyYXRpb24gPSBzb3VyY2Uuc2VsZkJhc2VEdXJhdGlvbjtcbiAgICB0YXJnZXQudHJlZUJhc2VEdXJhdGlvbiA9IHNvdXJjZS50cmVlQmFzZUR1cmF0aW9uO1xuICB9XG4gIHRhcmdldC5fZGVidWdJRCA9IHNvdXJjZS5fZGVidWdJRDtcbiAgdGFyZ2V0Ll9kZWJ1Z1NvdXJjZSA9IHNvdXJjZS5fZGVidWdTb3VyY2U7XG4gIHRhcmdldC5fZGVidWdPd25lciA9IHNvdXJjZS5fZGVidWdPd25lcjtcbiAgdGFyZ2V0Ll9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nID0gc291cmNlLl9kZWJ1Z0lzQ3VycmVudGx5VGltaW5nO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vLyBUT0RPOiBUaGlzIHNob3VsZCBiZSBsaWZ0ZWQgaW50byB0aGUgcmVuZGVyZXIuXG5cblxuLy8gVGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzIGFyZSBvbmx5IHVzZWQgYnkgaW50ZXJhY3Rpb24gdHJhY2luZyBidWlsZHMuXG4vLyBUaGV5IGVuYWJsZSBpbnRlcmFjdGlvbnMgdG8gYmUgYXNzb2NpYXRlZCB3aXRoIHRoZWlyIGFzeW5jIHdvcmssXG4vLyBBbmQgZXhwb3NlIGludGVyYWN0aW9uIG1ldGFkYXRhIHRvIHRoZSBSZWFjdCBEZXZUb29scyBQcm9maWxlciBwbHVnaW4uXG4vLyBOb3RlIHRoYXQgdGhlc2UgYXR0cmlidXRlcyBhcmUgb25seSBkZWZpbmVkIHdoZW4gdGhlIGVuYWJsZVNjaGVkdWxlclRyYWNpbmcgZmxhZyBpcyBlbmFibGVkLlxuXG5cbi8vIEV4cG9ydGVkIEZpYmVyUm9vdCB0eXBlIGluY2x1ZGVzIGFsbCBwcm9wZXJ0aWVzLFxuLy8gVG8gYXZvaWQgcmVxdWlyaW5nIHBvdGVudGlhbGx5IGVycm9yLXByb25lIDphbnkgY2FzdHMgdGhyb3VnaG91dCB0aGUgcHJvamVjdC5cbi8vIFByb2ZpbGluZyBwcm9wZXJ0aWVzIGFyZSBvbmx5IHNhZmUgdG8gYWNjZXNzIGluIHByb2ZpbGluZyBidWlsZHMgKHdoZW4gZW5hYmxlU2NoZWR1bGVyVHJhY2luZyBpcyB0cnVlKS5cbi8vIFRoZSB0eXBlcyBhcmUgZGVmaW5lZCBzZXBhcmF0ZWx5IHdpdGhpbiB0aGlzIGZpbGUgdG8gZW5zdXJlIHRoZXkgc3RheSBpbiBzeW5jLlxuLy8gKFdlIGRvbid0IGhhdmUgdG8gdXNlIGFuIGlubGluZSA6YW55IGNhc3Qgd2hlbiBlbmFibGVTY2hlZHVsZXJUcmFjaW5nIGlzIGRpc2FibGVkLilcblxuXG5mdW5jdGlvbiBjcmVhdGVGaWJlclJvb3QoY29udGFpbmVySW5mbywgaXNDb25jdXJyZW50LCBoeWRyYXRlKSB7XG4gIC8vIEN5Y2xpYyBjb25zdHJ1Y3Rpb24uIFRoaXMgY2hlYXRzIHRoZSB0eXBlIHN5c3RlbSByaWdodCBub3cgYmVjYXVzZVxuICAvLyBzdGF0ZU5vZGUgaXMgYW55LlxuICB2YXIgdW5pbml0aWFsaXplZEZpYmVyID0gY3JlYXRlSG9zdFJvb3RGaWJlcihpc0NvbmN1cnJlbnQpO1xuXG4gIHZhciByb290ID0gdm9pZCAwO1xuICBpZiAoZW5hYmxlU2NoZWR1bGVyVHJhY2luZykge1xuICAgIHJvb3QgPSB7XG4gICAgICBjdXJyZW50OiB1bmluaXRpYWxpemVkRmliZXIsXG4gICAgICBjb250YWluZXJJbmZvOiBjb250YWluZXJJbmZvLFxuICAgICAgcGVuZGluZ0NoaWxkcmVuOiBudWxsLFxuXG4gICAgICBlYXJsaWVzdFBlbmRpbmdUaW1lOiBOb1dvcmssXG4gICAgICBsYXRlc3RQZW5kaW5nVGltZTogTm9Xb3JrLFxuICAgICAgZWFybGllc3RTdXNwZW5kZWRUaW1lOiBOb1dvcmssXG4gICAgICBsYXRlc3RTdXNwZW5kZWRUaW1lOiBOb1dvcmssXG4gICAgICBsYXRlc3RQaW5nZWRUaW1lOiBOb1dvcmssXG5cbiAgICAgIGRpZEVycm9yOiBmYWxzZSxcblxuICAgICAgcGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOiBOb1dvcmssXG4gICAgICBmaW5pc2hlZFdvcms6IG51bGwsXG4gICAgICB0aW1lb3V0SGFuZGxlOiBub1RpbWVvdXQsXG4gICAgICBjb250ZXh0OiBudWxsLFxuICAgICAgcGVuZGluZ0NvbnRleHQ6IG51bGwsXG4gICAgICBoeWRyYXRlOiBoeWRyYXRlLFxuICAgICAgbmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT246IE5vV29yayxcbiAgICAgIGV4cGlyYXRpb25UaW1lOiBOb1dvcmssXG4gICAgICBmaXJzdEJhdGNoOiBudWxsLFxuICAgICAgbmV4dFNjaGVkdWxlZFJvb3Q6IG51bGwsXG5cbiAgICAgIGludGVyYWN0aW9uVGhyZWFkSUQ6IHRyYWNpbmcudW5zdGFibGVfZ2V0VGhyZWFkSUQoKSxcbiAgICAgIG1lbW9pemVkSW50ZXJhY3Rpb25zOiBuZXcgU2V0KCksXG4gICAgICBwZW5kaW5nSW50ZXJhY3Rpb25NYXA6IG5ldyBNYXAoKVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcm9vdCA9IHtcbiAgICAgIGN1cnJlbnQ6IHVuaW5pdGlhbGl6ZWRGaWJlcixcbiAgICAgIGNvbnRhaW5lckluZm86IGNvbnRhaW5lckluZm8sXG4gICAgICBwZW5kaW5nQ2hpbGRyZW46IG51bGwsXG5cbiAgICAgIGVhcmxpZXN0UGVuZGluZ1RpbWU6IE5vV29yayxcbiAgICAgIGxhdGVzdFBlbmRpbmdUaW1lOiBOb1dvcmssXG4gICAgICBlYXJsaWVzdFN1c3BlbmRlZFRpbWU6IE5vV29yayxcbiAgICAgIGxhdGVzdFN1c3BlbmRlZFRpbWU6IE5vV29yayxcbiAgICAgIGxhdGVzdFBpbmdlZFRpbWU6IE5vV29yayxcblxuICAgICAgZGlkRXJyb3I6IGZhbHNlLFxuXG4gICAgICBwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6IE5vV29yayxcbiAgICAgIGZpbmlzaGVkV29yazogbnVsbCxcbiAgICAgIHRpbWVvdXRIYW5kbGU6IG5vVGltZW91dCxcbiAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICBwZW5kaW5nQ29udGV4dDogbnVsbCxcbiAgICAgIGh5ZHJhdGU6IGh5ZHJhdGUsXG4gICAgICBuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjogTm9Xb3JrLFxuICAgICAgZXhwaXJhdGlvblRpbWU6IE5vV29yayxcbiAgICAgIGZpcnN0QmF0Y2g6IG51bGwsXG4gICAgICBuZXh0U2NoZWR1bGVkUm9vdDogbnVsbFxuICAgIH07XG4gIH1cblxuICB1bmluaXRpYWxpemVkRmliZXIuc3RhdGVOb2RlID0gcm9vdDtcblxuICAvLyBUaGUgcmVhc29uIGZvciB0aGUgd2F5IHRoZSBGbG93IHR5cGVzIGFyZSBzdHJ1Y3R1cmVkIGluIHRoaXMgZmlsZSxcbiAgLy8gSXMgdG8gYXZvaWQgbmVlZGluZyA6YW55IGNhc3RzIGV2ZXJ5d2hlcmUgaW50ZXJhY3Rpb24gdHJhY2luZyBmaWVsZHMgYXJlIHVzZWQuXG4gIC8vIFVuZm9ydHVuYXRlbHkgdGhhdCByZXF1aXJlcyBhbiA6YW55IGNhc3QgZm9yIG5vbi1pbnRlcmFjdGlvbiB0cmFjaW5nIGNhcGFibGUgYnVpbGRzLlxuICAvLyAkRmxvd0ZpeE1lIFJlbW92ZSB0aGlzIDphbnkgY2FzdCBhbmQgcmVwbGFjZSBpdCB3aXRoIHNvbWV0aGluZyBiZXR0ZXIuXG4gIHJldHVybiByb290O1xufVxuXG4vKipcbiAqIEZvcmtlZCBmcm9tIGZianMvd2FybmluZzpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mYmpzL2Jsb2IvZTY2YmEyMGFkNWJlNDMzZWI1NDQyM2YyYjA5N2Q4MjkzMjRkOWRlNi9wYWNrYWdlcy9mYmpzL3NyYy9fX2ZvcmtzX18vd2FybmluZy5qc1xuICpcbiAqIE9ubHkgY2hhbmdlIGlzIHdlIHVzZSBjb25zb2xlLndhcm4gaW5zdGVhZCBvZiBjb25zb2xlLmVycm9yLFxuICogYW5kIGRvIG5vdGhpbmcgd2hlbiAnY29uc29sZScgaXMgbm90IHN1cHBvcnRlZC5cbiAqIFRoaXMgcmVhbGx5IHNpbXBsaWZpZXMgdGhlIGNvZGUuXG4gKiAtLS1cbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgbG93UHJpb3JpdHlXYXJuaW5nID0gZnVuY3Rpb24gKCkge307XG5cbntcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG5cbiAgbG93UHJpb3JpdHlXYXJuaW5nID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bsb3dQcmlvcml0eVdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDIgPyBfbGVuMiAtIDIgOiAwKSwgX2tleTIgPSAyOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHByaW50V2FybmluZy5hcHBseSh1bmRlZmluZWQsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG52YXIgbG93UHJpb3JpdHlXYXJuaW5nJDEgPSBsb3dQcmlvcml0eVdhcm5pbmc7XG5cbnZhciBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncyA9IHtcbiAgZGlzY2FyZFBlbmRpbmdXYXJuaW5nczogZnVuY3Rpb24gKCkge30sXG4gIGZsdXNoUGVuZGluZ0RlcHJlY2F0aW9uV2FybmluZ3M6IGZ1bmN0aW9uICgpIHt9LFxuICBmbHVzaFBlbmRpbmdVbnNhZmVMaWZlY3ljbGVXYXJuaW5nczogZnVuY3Rpb24gKCkge30sXG4gIHJlY29yZERlcHJlY2F0aW9uV2FybmluZ3M6IGZ1bmN0aW9uIChmaWJlciwgaW5zdGFuY2UpIHt9LFxuICByZWNvcmRVbnNhZmVMaWZlY3ljbGVXYXJuaW5nczogZnVuY3Rpb24gKGZpYmVyLCBpbnN0YW5jZSkge30sXG4gIHJlY29yZExlZ2FjeUNvbnRleHRXYXJuaW5nOiBmdW5jdGlvbiAoZmliZXIsIGluc3RhbmNlKSB7fSxcbiAgZmx1c2hMZWdhY3lDb250ZXh0V2FybmluZzogZnVuY3Rpb24gKCkge31cbn07XG5cbntcbiAgdmFyIExJRkVDWUNMRV9TVUdHRVNUSU9OUyA9IHtcbiAgICBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiAnc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcycsXG4gICAgVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGU6ICdjb21wb25lbnREaWRVcGRhdGUnXG4gIH07XG5cbiAgdmFyIHBlbmRpbmdDb21wb25lbnRXaWxsTW91bnRXYXJuaW5ncyA9IFtdO1xuICB2YXIgcGVuZGluZ0NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNXYXJuaW5ncyA9IFtdO1xuICB2YXIgcGVuZGluZ0NvbXBvbmVudFdpbGxVcGRhdGVXYXJuaW5ncyA9IFtdO1xuICB2YXIgcGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzID0gbmV3IE1hcCgpO1xuICB2YXIgcGVuZGluZ0xlZ2FjeUNvbnRleHRXYXJuaW5nID0gbmV3IE1hcCgpO1xuXG4gIC8vIFRyYWNrcyBjb21wb25lbnRzIHdlIGhhdmUgYWxyZWFkeSB3YXJuZWQgYWJvdXQuXG4gIHZhciBkaWRXYXJuQWJvdXREZXByZWNhdGVkTGlmZWN5Y2xlcyA9IG5ldyBTZXQoKTtcbiAgdmFyIGRpZFdhcm5BYm91dFVuc2FmZUxpZmVjeWNsZXMgPSBuZXcgU2V0KCk7XG4gIHZhciBkaWRXYXJuQWJvdXRMZWdhY3lDb250ZXh0ID0gbmV3IFNldCgpO1xuXG4gIHZhciBzZXRUb1NvcnRlZFN0cmluZyA9IGZ1bmN0aW9uIChzZXQpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGFycmF5LnB1c2godmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBhcnJheS5zb3J0KCkuam9pbignLCAnKTtcbiAgfTtcblxuICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5kaXNjYXJkUGVuZGluZ1dhcm5pbmdzID0gZnVuY3Rpb24gKCkge1xuICAgIHBlbmRpbmdDb21wb25lbnRXaWxsTW91bnRXYXJuaW5ncyA9IFtdO1xuICAgIHBlbmRpbmdDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzV2FybmluZ3MgPSBbXTtcbiAgICBwZW5kaW5nQ29tcG9uZW50V2lsbFVwZGF0ZVdhcm5pbmdzID0gW107XG4gICAgcGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzID0gbmV3IE1hcCgpO1xuICAgIHBlbmRpbmdMZWdhY3lDb250ZXh0V2FybmluZyA9IG5ldyBNYXAoKTtcbiAgfTtcblxuICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5mbHVzaFBlbmRpbmdVbnNhZmVMaWZlY3ljbGVXYXJuaW5ncyA9IGZ1bmN0aW9uICgpIHtcbiAgICBwZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MuZm9yRWFjaChmdW5jdGlvbiAobGlmZWN5Y2xlV2FybmluZ3NNYXAsIHN0cmljdFJvb3QpIHtcbiAgICAgIHZhciBsaWZlY3ljbGVzV2FybmluZ01lc2FnZXMgPSBbXTtcblxuICAgICAgT2JqZWN0LmtleXMobGlmZWN5Y2xlV2FybmluZ3NNYXApLmZvckVhY2goZnVuY3Rpb24gKGxpZmVjeWNsZSkge1xuICAgICAgICB2YXIgbGlmZWN5Y2xlV2FybmluZ3MgPSBsaWZlY3ljbGVXYXJuaW5nc01hcFtsaWZlY3ljbGVdO1xuICAgICAgICBpZiAobGlmZWN5Y2xlV2FybmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBjb21wb25lbnROYW1lcyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICBsaWZlY3ljbGVXYXJuaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChmaWJlcikge1xuICAgICAgICAgICAgY29tcG9uZW50TmFtZXMuYWRkKGdldENvbXBvbmVudE5hbWUoZmliZXIudHlwZSkgfHwgJ0NvbXBvbmVudCcpO1xuICAgICAgICAgICAgZGlkV2FybkFib3V0VW5zYWZlTGlmZWN5Y2xlcy5hZGQoZmliZXIudHlwZSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgZm9ybWF0dGVkID0gbGlmZWN5Y2xlLnJlcGxhY2UoJ1VOU0FGRV8nLCAnJyk7XG4gICAgICAgICAgdmFyIHN1Z2dlc3Rpb24gPSBMSUZFQ1lDTEVfU1VHR0VTVElPTlNbbGlmZWN5Y2xlXTtcbiAgICAgICAgICB2YXIgc29ydGVkQ29tcG9uZW50TmFtZXMgPSBzZXRUb1NvcnRlZFN0cmluZyhjb21wb25lbnROYW1lcyk7XG5cbiAgICAgICAgICBsaWZlY3ljbGVzV2FybmluZ01lc2FnZXMucHVzaChmb3JtYXR0ZWQgKyAnOiBQbGVhc2UgdXBkYXRlIHRoZSBmb2xsb3dpbmcgY29tcG9uZW50cyB0byB1c2UgJyArIChzdWdnZXN0aW9uICsgJyBpbnN0ZWFkOiAnICsgc29ydGVkQ29tcG9uZW50TmFtZXMpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChsaWZlY3ljbGVzV2FybmluZ01lc2FnZXMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgc3RyaWN0Um9vdENvbXBvbmVudFN0YWNrID0gZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHN0cmljdFJvb3QpO1xuXG4gICAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ1Vuc2FmZSBsaWZlY3ljbGUgbWV0aG9kcyB3ZXJlIGZvdW5kIHdpdGhpbiBhIHN0cmljdC1tb2RlIHRyZWU6JXMnICsgJ1xcblxcbiVzJyArICdcXG5cXG5MZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOicgKyAnXFxuaHR0cHM6Ly9mYi5tZS9yZWFjdC1zdHJpY3QtbW9kZS13YXJuaW5ncycsIHN0cmljdFJvb3RDb21wb25lbnRTdGFjaywgbGlmZWN5Y2xlc1dhcm5pbmdNZXNhZ2VzLmpvaW4oJ1xcblxcbicpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHBlbmRpbmdVbnNhZmVMaWZlY3ljbGVXYXJuaW5ncyA9IG5ldyBNYXAoKTtcbiAgfTtcblxuICB2YXIgZmluZFN0cmljdFJvb3QgPSBmdW5jdGlvbiAoZmliZXIpIHtcbiAgICB2YXIgbWF5YmVTdHJpY3RSb290ID0gbnVsbDtcblxuICAgIHZhciBub2RlID0gZmliZXI7XG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIGlmIChub2RlLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICAgIG1heWJlU3RyaWN0Um9vdCA9IG5vZGU7XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIG1heWJlU3RyaWN0Um9vdDtcbiAgfTtcblxuICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5mbHVzaFBlbmRpbmdEZXByZWNhdGlvbldhcm5pbmdzID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChwZW5kaW5nQ29tcG9uZW50V2lsbE1vdW50V2FybmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIHVuaXF1ZU5hbWVzID0gbmV3IFNldCgpO1xuICAgICAgcGVuZGluZ0NvbXBvbmVudFdpbGxNb3VudFdhcm5pbmdzLmZvckVhY2goZnVuY3Rpb24gKGZpYmVyKSB7XG4gICAgICAgIHVuaXF1ZU5hbWVzLmFkZChnZXRDb21wb25lbnROYW1lKGZpYmVyLnR5cGUpIHx8ICdDb21wb25lbnQnKTtcbiAgICAgICAgZGlkV2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMuYWRkKGZpYmVyLnR5cGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBzb3J0ZWROYW1lcyA9IHNldFRvU29ydGVkU3RyaW5nKHVuaXF1ZU5hbWVzKTtcblxuICAgICAgbG93UHJpb3JpdHlXYXJuaW5nJDEoZmFsc2UsICdjb21wb25lbnRXaWxsTW91bnQgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uICcgKyAnVXNlIGNvbXBvbmVudERpZE1vdW50IGluc3RlYWQuIEFzIGEgdGVtcG9yYXJ5IHdvcmthcm91bmQsICcgKyAneW91IGNhbiByZW5hbWUgdG8gVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudC4nICsgJ1xcblxcblBsZWFzZSB1cGRhdGUgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOiAlcycgKyAnXFxuXFxuTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTonICsgJ1xcbmh0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rcycsIHNvcnRlZE5hbWVzKTtcblxuICAgICAgcGVuZGluZ0NvbXBvbmVudFdpbGxNb3VudFdhcm5pbmdzID0gW107XG4gICAgfVxuXG4gICAgaWYgKHBlbmRpbmdDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzV2FybmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIF91bmlxdWVOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzV2FybmluZ3MuZm9yRWFjaChmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgICAgX3VuaXF1ZU5hbWVzLmFkZChnZXRDb21wb25lbnROYW1lKGZpYmVyLnR5cGUpIHx8ICdDb21wb25lbnQnKTtcbiAgICAgICAgZGlkV2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMuYWRkKGZpYmVyLnR5cGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBfc29ydGVkTmFtZXMgPSBzZXRUb1NvcnRlZFN0cmluZyhfdW5pcXVlTmFtZXMpO1xuXG4gICAgICBsb3dQcmlvcml0eVdhcm5pbmckMShmYWxzZSwgJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uICcgKyAnVXNlIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgaW5zdGVhZC4nICsgJ1xcblxcblBsZWFzZSB1cGRhdGUgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOiAlcycgKyAnXFxuXFxuTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTonICsgJ1xcbmh0dHBzOi8vZmIubWUvcmVhY3QtYXN5bmMtY29tcG9uZW50LWxpZmVjeWNsZS1ob29rcycsIF9zb3J0ZWROYW1lcyk7XG5cbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzV2FybmluZ3MgPSBbXTtcbiAgICB9XG5cbiAgICBpZiAocGVuZGluZ0NvbXBvbmVudFdpbGxVcGRhdGVXYXJuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgX3VuaXF1ZU5hbWVzMiA9IG5ldyBTZXQoKTtcbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MuZm9yRWFjaChmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgICAgX3VuaXF1ZU5hbWVzMi5hZGQoZ2V0Q29tcG9uZW50TmFtZShmaWJlci50eXBlKSB8fCAnQ29tcG9uZW50Jyk7XG4gICAgICAgIGRpZFdhcm5BYm91dERlcHJlY2F0ZWRMaWZlY3ljbGVzLmFkZChmaWJlci50eXBlKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3NvcnRlZE5hbWVzMiA9IHNldFRvU29ydGVkU3RyaW5nKF91bmlxdWVOYW1lczIpO1xuXG4gICAgICBsb3dQcmlvcml0eVdhcm5pbmckMShmYWxzZSwgJ2NvbXBvbmVudFdpbGxVcGRhdGUgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uICcgKyAnVXNlIGNvbXBvbmVudERpZFVwZGF0ZSBpbnN0ZWFkLiBBcyBhIHRlbXBvcmFyeSB3b3JrYXJvdW5kLCAnICsgJ3lvdSBjYW4gcmVuYW1lIHRvIFVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlLicgKyAnXFxuXFxuUGxlYXNlIHVwZGF0ZSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6ICVzJyArICdcXG5cXG5MZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOicgKyAnXFxuaHR0cHM6Ly9mYi5tZS9yZWFjdC1hc3luYy1jb21wb25lbnQtbGlmZWN5Y2xlLWhvb2tzJywgX3NvcnRlZE5hbWVzMik7XG5cbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MgPSBbXTtcbiAgICB9XG4gIH07XG5cbiAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MucmVjb3JkRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZ1bmN0aW9uIChmaWJlciwgaW5zdGFuY2UpIHtcbiAgICAvLyBEZWR1cCBzdHJhdGVneTogV2FybiBvbmNlIHBlciBjb21wb25lbnQuXG4gICAgaWYgKGRpZFdhcm5BYm91dERlcHJlY2F0ZWRMaWZlY3ljbGVzLmhhcyhmaWJlci50eXBlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIERvbid0IHdhcm4gYWJvdXQgcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQgcG9seWZpbGxlZCBjb21wb25lbnRzLlxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nICYmIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nICE9PSB0cnVlKSB7XG4gICAgICBwZW5kaW5nQ29tcG9uZW50V2lsbE1vdW50V2FybmluZ3MucHVzaChmaWJlcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgIT09IHRydWUpIHtcbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzV2FybmluZ3MucHVzaChmaWJlcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgIT09IHRydWUpIHtcbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MucHVzaChmaWJlcik7XG4gICAgfVxuICB9O1xuXG4gIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLnJlY29yZFVuc2FmZUxpZmVjeWNsZVdhcm5pbmdzID0gZnVuY3Rpb24gKGZpYmVyLCBpbnN0YW5jZSkge1xuICAgIHZhciBzdHJpY3RSb290ID0gZmluZFN0cmljdFJvb3QoZmliZXIpO1xuICAgIGlmIChzdHJpY3RSb290ID09PSBudWxsKSB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdFeHBlY3RlZCB0byBmaW5kIGEgU3RyaWN0TW9kZSBjb21wb25lbnQgaW4gYSBzdHJpY3QgbW9kZSB0cmVlLiAnICsgJ1RoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRGVkdXAgc3RyYXRlZ3k6IFdhcm4gb25jZSBwZXIgY29tcG9uZW50LlxuICAgIC8vIFRoaXMgaXMgZGlmZmljdWx0IHRvIHRyYWNrIGFueSBvdGhlciB3YXkgc2luY2UgY29tcG9uZW50IG5hbWVzXG4gICAgLy8gYXJlIG9mdGVuIHZhZ3VlIGFuZCBhcmUgbGlrZWx5IHRvIGNvbGxpZGUgYmV0d2VlbiAzcmQgcGFydHkgbGlicmFyaWVzLlxuICAgIC8vIEFuIGV4cGFuZCBwcm9wZXJ0eSBpcyBwcm9iYWJseSBva2F5IHRvIHVzZSBoZXJlIHNpbmNlIGl0J3MgREVWLW9ubHksXG4gICAgLy8gYW5kIHdpbGwgb25seSBiZSBzZXQgaW4gdGhlIGV2ZW50IG9mIHNlcmlvdXMgd2FybmluZ3MuXG4gICAgaWYgKGRpZFdhcm5BYm91dFVuc2FmZUxpZmVjeWNsZXMuaGFzKGZpYmVyLnR5cGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHdhcm5pbmdzRm9yUm9vdCA9IHZvaWQgMDtcbiAgICBpZiAoIXBlbmRpbmdVbnNhZmVMaWZlY3ljbGVXYXJuaW5ncy5oYXMoc3RyaWN0Um9vdCkpIHtcbiAgICAgIHdhcm5pbmdzRm9yUm9vdCA9IHtcbiAgICAgICAgVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudDogW10sXG4gICAgICAgIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBbXSxcbiAgICAgICAgVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGU6IFtdXG4gICAgICB9O1xuXG4gICAgICBwZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3Muc2V0KHN0cmljdFJvb3QsIHdhcm5pbmdzRm9yUm9vdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmdzRm9yUm9vdCA9IHBlbmRpbmdVbnNhZmVMaWZlY3ljbGVXYXJuaW5ncy5nZXQoc3RyaWN0Um9vdCk7XG4gICAgfVxuXG4gICAgdmFyIHVuc2FmZUxpZmVjeWNsZXMgPSBbXTtcbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyAhPT0gdHJ1ZSB8fCB0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdW5zYWZlTGlmZWN5Y2xlcy5wdXNoKCdVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50Jyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgIT09IHRydWUgfHwgdHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB1bnNhZmVMaWZlY3ljbGVzLnB1c2goJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgIT09IHRydWUgfHwgdHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB1bnNhZmVMaWZlY3ljbGVzLnB1c2goJ1VOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJyk7XG4gICAgfVxuXG4gICAgaWYgKHVuc2FmZUxpZmVjeWNsZXMubGVuZ3RoID4gMCkge1xuICAgICAgdW5zYWZlTGlmZWN5Y2xlcy5mb3JFYWNoKGZ1bmN0aW9uIChsaWZlY3ljbGUpIHtcbiAgICAgICAgd2FybmluZ3NGb3JSb290W2xpZmVjeWNsZV0ucHVzaChmaWJlcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MucmVjb3JkTGVnYWN5Q29udGV4dFdhcm5pbmcgPSBmdW5jdGlvbiAoZmliZXIsIGluc3RhbmNlKSB7XG4gICAgdmFyIHN0cmljdFJvb3QgPSBmaW5kU3RyaWN0Um9vdChmaWJlcik7XG4gICAgaWYgKHN0cmljdFJvb3QgPT09IG51bGwpIHtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0V4cGVjdGVkIHRvIGZpbmQgYSBTdHJpY3RNb2RlIGNvbXBvbmVudCBpbiBhIHN0cmljdCBtb2RlIHRyZWUuICcgKyAnVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEZWR1cCBzdHJhdGVneTogV2FybiBvbmNlIHBlciBjb21wb25lbnQuXG4gICAgaWYgKGRpZFdhcm5BYm91dExlZ2FjeUNvbnRleHQuaGFzKGZpYmVyLnR5cGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHdhcm5pbmdzRm9yUm9vdCA9IHBlbmRpbmdMZWdhY3lDb250ZXh0V2FybmluZy5nZXQoc3RyaWN0Um9vdCk7XG5cbiAgICBpZiAoZmliZXIudHlwZS5jb250ZXh0VHlwZXMgIT0gbnVsbCB8fCBmaWJlci50eXBlLmNoaWxkQ29udGV4dFR5cGVzICE9IG51bGwgfHwgaW5zdGFuY2UgIT09IG51bGwgJiYgdHlwZW9mIGluc3RhbmNlLmdldENoaWxkQ29udGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKHdhcm5pbmdzRm9yUm9vdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHdhcm5pbmdzRm9yUm9vdCA9IFtdO1xuICAgICAgICBwZW5kaW5nTGVnYWN5Q29udGV4dFdhcm5pbmcuc2V0KHN0cmljdFJvb3QsIHdhcm5pbmdzRm9yUm9vdCk7XG4gICAgICB9XG4gICAgICB3YXJuaW5nc0ZvclJvb3QucHVzaChmaWJlcik7XG4gICAgfVxuICB9O1xuXG4gIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLmZsdXNoTGVnYWN5Q29udGV4dFdhcm5pbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcGVuZGluZ0xlZ2FjeUNvbnRleHRXYXJuaW5nLmZvckVhY2goZnVuY3Rpb24gKGZpYmVyQXJyYXksIHN0cmljdFJvb3QpIHtcbiAgICAgIHZhciB1bmlxdWVOYW1lcyA9IG5ldyBTZXQoKTtcbiAgICAgIGZpYmVyQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgICAgdW5pcXVlTmFtZXMuYWRkKGdldENvbXBvbmVudE5hbWUoZmliZXIudHlwZSkgfHwgJ0NvbXBvbmVudCcpO1xuICAgICAgICBkaWRXYXJuQWJvdXRMZWdhY3lDb250ZXh0LmFkZChmaWJlci50eXBlKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgc29ydGVkTmFtZXMgPSBzZXRUb1NvcnRlZFN0cmluZyh1bmlxdWVOYW1lcyk7XG4gICAgICB2YXIgc3RyaWN0Um9vdENvbXBvbmVudFN0YWNrID0gZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHN0cmljdFJvb3QpO1xuXG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdMZWdhY3kgY29udGV4dCBBUEkgaGFzIGJlZW4gZGV0ZWN0ZWQgd2l0aGluIGEgc3RyaWN0LW1vZGUgdHJlZTogJXMnICsgJ1xcblxcblBsZWFzZSB1cGRhdGUgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOiAlcycgKyAnXFxuXFxuTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTonICsgJ1xcbmh0dHBzOi8vZmIubWUvcmVhY3Qtc3RyaWN0LW1vZGUtd2FybmluZ3MnLCBzdHJpY3RSb290Q29tcG9uZW50U3RhY2ssIHNvcnRlZE5hbWVzKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuLy8gVGhpcyBsZXRzIHVzIGhvb2sgaW50byBGaWJlciB0byBkZWJ1ZyB3aGF0IGl0J3MgZG9pbmcuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvODAzMy5cbi8vIFRoaXMgaXMgbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBBUEksIG5vdCBldmVuIGZvciBSZWFjdCBEZXZUb29scy5cbi8vIFlvdSBtYXkgb25seSBpbmplY3QgYSBkZWJ1Z1Rvb2wgaWYgeW91IHdvcmsgb24gUmVhY3QgRmliZXIgaXRzZWxmLlxudmFyIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24gPSB7XG4gIGRlYnVnVG9vbDogbnVsbFxufTtcblxudmFyIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMSA9IFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb247XG5cbi8vIFRPRE86IE9mZnNjcmVlbiB1cGRhdGVzIHNob3VsZCBuZXZlciBzdXNwZW5kLiBIb3dldmVyLCBhIHByb21pc2UgdGhhdFxuLy8gc3VzcGVuZGVkIGluc2lkZSBhbiBvZmZzY3JlZW4gc3VidHJlZSBzaG91bGQgYmUgYWJsZSB0byBwaW5nIGF0IHRoZSBwcmlvcml0eVxuLy8gb2YgdGhlIG91dGVyIHJlbmRlci5cblxuZnVuY3Rpb24gbWFya1BlbmRpbmdQcmlvcml0eUxldmVsKHJvb3QsIGV4cGlyYXRpb25UaW1lKSB7XG4gIC8vIElmIHRoZXJlJ3MgYSBnYXAgYmV0d2VlbiBjb21wbGV0aW5nIGEgZmFpbGVkIHJvb3QgYW5kIHJldHJ5aW5nIGl0LFxuICAvLyBhZGRpdGlvbmFsIHVwZGF0ZXMgbWF5IGJlIHNjaGVkdWxlZC4gQ2xlYXIgYGRpZEVycm9yYCwgaW4gY2FzZSB0aGUgdXBkYXRlXG4gIC8vIGlzIHN1ZmZpY2llbnQgdG8gZml4IHRoZSBlcnJvci5cbiAgcm9vdC5kaWRFcnJvciA9IGZhbHNlO1xuXG4gIC8vIFVwZGF0ZSB0aGUgbGF0ZXN0IGFuZCBlYXJsaWVzdCBwZW5kaW5nIHRpbWVzXG4gIHZhciBlYXJsaWVzdFBlbmRpbmdUaW1lID0gcm9vdC5lYXJsaWVzdFBlbmRpbmdUaW1lO1xuICBpZiAoZWFybGllc3RQZW5kaW5nVGltZSA9PT0gTm9Xb3JrKSB7XG4gICAgLy8gTm8gb3RoZXIgcGVuZGluZyB1cGRhdGVzLlxuICAgIHJvb3QuZWFybGllc3RQZW5kaW5nVGltZSA9IHJvb3QubGF0ZXN0UGVuZGluZ1RpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZWFybGllc3RQZW5kaW5nVGltZSA+IGV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAvLyBUaGlzIGlzIHRoZSBlYXJsaWVzdCBwZW5kaW5nIHVwZGF0ZS5cbiAgICAgIHJvb3QuZWFybGllc3RQZW5kaW5nVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGF0ZXN0UGVuZGluZ1RpbWUgPSByb290LmxhdGVzdFBlbmRpbmdUaW1lO1xuICAgICAgaWYgKGxhdGVzdFBlbmRpbmdUaW1lIDwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgbGF0ZXN0IHBlbmRpbmcgdXBkYXRlXG4gICAgICAgIHJvb3QubGF0ZXN0UGVuZGluZ1RpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZmluZE5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uKGV4cGlyYXRpb25UaW1lLCByb290KTtcbn1cblxuZnVuY3Rpb24gbWFya0NvbW1pdHRlZFByaW9yaXR5TGV2ZWxzKHJvb3QsIGVhcmxpZXN0UmVtYWluaW5nVGltZSkge1xuICByb290LmRpZEVycm9yID0gZmFsc2U7XG5cbiAgaWYgKGVhcmxpZXN0UmVtYWluaW5nVGltZSA9PT0gTm9Xb3JrKSB7XG4gICAgLy8gRmFzdCBwYXRoLiBUaGVyZSdzIG5vIHJlbWFpbmluZyB3b3JrLiBDbGVhciBldmVyeXRoaW5nLlxuICAgIHJvb3QuZWFybGllc3RQZW5kaW5nVGltZSA9IE5vV29yaztcbiAgICByb290LmxhdGVzdFBlbmRpbmdUaW1lID0gTm9Xb3JrO1xuICAgIHJvb3QuZWFybGllc3RTdXNwZW5kZWRUaW1lID0gTm9Xb3JrO1xuICAgIHJvb3QubGF0ZXN0U3VzcGVuZGVkVGltZSA9IE5vV29yaztcbiAgICByb290LmxhdGVzdFBpbmdlZFRpbWUgPSBOb1dvcms7XG4gICAgZmluZE5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uKE5vV29yaywgcm9vdCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gTGV0J3Mgc2VlIGlmIHRoZSBwcmV2aW91cyBsYXRlc3Qga25vd24gcGVuZGluZyBsZXZlbCB3YXMganVzdCBmbHVzaGVkLlxuICB2YXIgbGF0ZXN0UGVuZGluZ1RpbWUgPSByb290LmxhdGVzdFBlbmRpbmdUaW1lO1xuICBpZiAobGF0ZXN0UGVuZGluZ1RpbWUgIT09IE5vV29yaykge1xuICAgIGlmIChsYXRlc3RQZW5kaW5nVGltZSA8IGVhcmxpZXN0UmVtYWluaW5nVGltZSkge1xuICAgICAgLy8gV2UndmUgZmx1c2hlZCBhbGwgdGhlIGtub3duIHBlbmRpbmcgbGV2ZWxzLlxuICAgICAgcm9vdC5lYXJsaWVzdFBlbmRpbmdUaW1lID0gcm9vdC5sYXRlc3RQZW5kaW5nVGltZSA9IE5vV29yaztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGVhcmxpZXN0UGVuZGluZ1RpbWUgPSByb290LmVhcmxpZXN0UGVuZGluZ1RpbWU7XG4gICAgICBpZiAoZWFybGllc3RQZW5kaW5nVGltZSA8IGVhcmxpZXN0UmVtYWluaW5nVGltZSkge1xuICAgICAgICAvLyBXZSd2ZSBmbHVzaGVkIHRoZSBlYXJsaWVzdCBrbm93biBwZW5kaW5nIGxldmVsLiBTZXQgdGhpcyB0byB0aGVcbiAgICAgICAgLy8gbGF0ZXN0IHBlbmRpbmcgdGltZS5cbiAgICAgICAgcm9vdC5lYXJsaWVzdFBlbmRpbmdUaW1lID0gcm9vdC5sYXRlc3RQZW5kaW5nVGltZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBOb3cgbGV0J3MgaGFuZGxlIHRoZSBlYXJsaWVzdCByZW1haW5pbmcgbGV2ZWwgaW4gdGhlIHdob2xlIHRyZWUuIFdlIG5lZWQgdG9cbiAgLy8gZGVjaWRlIHdoZXRoZXIgdG8gdHJlYXQgaXQgYXMgYSBwZW5kaW5nIGxldmVsIG9yIGFzIHN1c3BlbmRlZC4gQ2hlY2tcbiAgLy8gaXQgZmFsbHMgd2l0aGluIHRoZSByYW5nZSBvZiBrbm93biBzdXNwZW5kZWQgbGV2ZWxzLlxuXG4gIHZhciBlYXJsaWVzdFN1c3BlbmRlZFRpbWUgPSByb290LmVhcmxpZXN0U3VzcGVuZGVkVGltZTtcbiAgaWYgKGVhcmxpZXN0U3VzcGVuZGVkVGltZSA9PT0gTm9Xb3JrKSB7XG4gICAgLy8gVGhlcmUncyBubyBzdXNwZW5kZWQgd29yay4gVHJlYXQgdGhlIGVhcmxpZXN0IHJlbWFpbmluZyBsZXZlbCBhcyBhXG4gICAgLy8gcGVuZGluZyBsZXZlbC5cbiAgICBtYXJrUGVuZGluZ1ByaW9yaXR5TGV2ZWwocm9vdCwgZWFybGllc3RSZW1haW5pbmdUaW1lKTtcbiAgICBmaW5kTmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24oTm9Xb3JrLCByb290KTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbGF0ZXN0U3VzcGVuZGVkVGltZSA9IHJvb3QubGF0ZXN0U3VzcGVuZGVkVGltZTtcbiAgaWYgKGVhcmxpZXN0UmVtYWluaW5nVGltZSA+IGxhdGVzdFN1c3BlbmRlZFRpbWUpIHtcbiAgICAvLyBUaGUgZWFybGllc3QgcmVtYWluaW5nIGxldmVsIGlzIGxhdGVyIHRoYW4gYWxsIHRoZSBzdXNwZW5kZWQgd29yay4gVGhhdFxuICAgIC8vIG1lYW5zIHdlJ3ZlIGZsdXNoZWQgYWxsIHRoZSBzdXNwZW5kZWQgd29yay5cbiAgICByb290LmVhcmxpZXN0U3VzcGVuZGVkVGltZSA9IE5vV29yaztcbiAgICByb290LmxhdGVzdFN1c3BlbmRlZFRpbWUgPSBOb1dvcms7XG4gICAgcm9vdC5sYXRlc3RQaW5nZWRUaW1lID0gTm9Xb3JrO1xuXG4gICAgLy8gVGhlcmUncyBubyBzdXNwZW5kZWQgd29yay4gVHJlYXQgdGhlIGVhcmxpZXN0IHJlbWFpbmluZyBsZXZlbCBhcyBhXG4gICAgLy8gcGVuZGluZyBsZXZlbC5cbiAgICBtYXJrUGVuZGluZ1ByaW9yaXR5TGV2ZWwocm9vdCwgZWFybGllc3RSZW1haW5pbmdUaW1lKTtcbiAgICBmaW5kTmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24oTm9Xb3JrLCByb290KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWFybGllc3RSZW1haW5pbmdUaW1lIDwgZWFybGllc3RTdXNwZW5kZWRUaW1lKSB7XG4gICAgLy8gVGhlIGVhcmxpZXN0IHJlbWFpbmluZyB0aW1lIGlzIGVhcmxpZXIgdGhhbiBhbGwgdGhlIHN1c3BlbmRlZCB3b3JrLlxuICAgIC8vIFRyZWF0IGl0IGFzIGEgcGVuZGluZyB1cGRhdGUuXG4gICAgbWFya1BlbmRpbmdQcmlvcml0eUxldmVsKHJvb3QsIGVhcmxpZXN0UmVtYWluaW5nVGltZSk7XG4gICAgZmluZE5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uKE5vV29yaywgcm9vdCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVGhlIGVhcmxpZXN0IHJlbWFpbmluZyB0aW1lIGZhbGxzIHdpdGhpbiB0aGUgcmFuZ2Ugb2Yga25vd24gc3VzcGVuZGVkXG4gIC8vIGxldmVscy4gV2Ugc2hvdWxkIHRyZWF0IHRoaXMgYXMgc3VzcGVuZGVkIHdvcmsuXG4gIGZpbmROZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbihOb1dvcmssIHJvb3QpO1xufVxuXG5mdW5jdGlvbiBoYXNMb3dlclByaW9yaXR5V29yayhyb290LCBlcnJvcmVkRXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIGxhdGVzdFBlbmRpbmdUaW1lID0gcm9vdC5sYXRlc3RQZW5kaW5nVGltZTtcbiAgdmFyIGxhdGVzdFN1c3BlbmRlZFRpbWUgPSByb290LmxhdGVzdFN1c3BlbmRlZFRpbWU7XG4gIHZhciBsYXRlc3RQaW5nZWRUaW1lID0gcm9vdC5sYXRlc3RQaW5nZWRUaW1lO1xuICByZXR1cm4gbGF0ZXN0UGVuZGluZ1RpbWUgIT09IE5vV29yayAmJiBsYXRlc3RQZW5kaW5nVGltZSA+IGVycm9yZWRFeHBpcmF0aW9uVGltZSB8fCBsYXRlc3RTdXNwZW5kZWRUaW1lICE9PSBOb1dvcmsgJiYgbGF0ZXN0U3VzcGVuZGVkVGltZSA+IGVycm9yZWRFeHBpcmF0aW9uVGltZSB8fCBsYXRlc3RQaW5nZWRUaW1lICE9PSBOb1dvcmsgJiYgbGF0ZXN0UGluZ2VkVGltZSA+IGVycm9yZWRFeHBpcmF0aW9uVGltZTtcbn1cblxuZnVuY3Rpb24gaXNQcmlvcml0eUxldmVsU3VzcGVuZGVkKHJvb3QsIGV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciBlYXJsaWVzdFN1c3BlbmRlZFRpbWUgPSByb290LmVhcmxpZXN0U3VzcGVuZGVkVGltZTtcbiAgdmFyIGxhdGVzdFN1c3BlbmRlZFRpbWUgPSByb290LmxhdGVzdFN1c3BlbmRlZFRpbWU7XG4gIHJldHVybiBlYXJsaWVzdFN1c3BlbmRlZFRpbWUgIT09IE5vV29yayAmJiBleHBpcmF0aW9uVGltZSA+PSBlYXJsaWVzdFN1c3BlbmRlZFRpbWUgJiYgZXhwaXJhdGlvblRpbWUgPD0gbGF0ZXN0U3VzcGVuZGVkVGltZTtcbn1cblxuZnVuY3Rpb24gbWFya1N1c3BlbmRlZFByaW9yaXR5TGV2ZWwocm9vdCwgc3VzcGVuZGVkVGltZSkge1xuICByb290LmRpZEVycm9yID0gZmFsc2U7XG4gIGNsZWFyUGluZyhyb290LCBzdXNwZW5kZWRUaW1lKTtcblxuICAvLyBGaXJzdCwgY2hlY2sgdGhlIGtub3duIHBlbmRpbmcgbGV2ZWxzIGFuZCB1cGRhdGUgdGhlbSBpZiBuZWVkZWQuXG4gIHZhciBlYXJsaWVzdFBlbmRpbmdUaW1lID0gcm9vdC5lYXJsaWVzdFBlbmRpbmdUaW1lO1xuICB2YXIgbGF0ZXN0UGVuZGluZ1RpbWUgPSByb290LmxhdGVzdFBlbmRpbmdUaW1lO1xuICBpZiAoZWFybGllc3RQZW5kaW5nVGltZSA9PT0gc3VzcGVuZGVkVGltZSkge1xuICAgIGlmIChsYXRlc3RQZW5kaW5nVGltZSA9PT0gc3VzcGVuZGVkVGltZSkge1xuICAgICAgLy8gQm90aCBrbm93biBwZW5kaW5nIGxldmVscyB3ZXJlIHN1c3BlbmRlZC4gQ2xlYXIgdGhlbS5cbiAgICAgIHJvb3QuZWFybGllc3RQZW5kaW5nVGltZSA9IHJvb3QubGF0ZXN0UGVuZGluZ1RpbWUgPSBOb1dvcms7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSBlYXJsaWVzdCBwZW5kaW5nIGxldmVsIHdhcyBzdXNwZW5kZWQuIENsZWFyIGJ5IHNldHRpbmcgaXQgdG8gdGhlXG4gICAgICAvLyBsYXRlc3QgcGVuZGluZyBsZXZlbC5cbiAgICAgIHJvb3QuZWFybGllc3RQZW5kaW5nVGltZSA9IGxhdGVzdFBlbmRpbmdUaW1lO1xuICAgIH1cbiAgfSBlbHNlIGlmIChsYXRlc3RQZW5kaW5nVGltZSA9PT0gc3VzcGVuZGVkVGltZSkge1xuICAgIC8vIFRoZSBsYXRlc3QgcGVuZGluZyBsZXZlbCB3YXMgc3VzcGVuZGVkLiBDbGVhciBieSBzZXR0aW5nIGl0IHRvIHRoZVxuICAgIC8vIGxhdGVzdCBwZW5kaW5nIGxldmVsLlxuICAgIHJvb3QubGF0ZXN0UGVuZGluZ1RpbWUgPSBlYXJsaWVzdFBlbmRpbmdUaW1lO1xuICB9XG5cbiAgLy8gRmluYWxseSwgdXBkYXRlIHRoZSBrbm93biBzdXNwZW5kZWQgbGV2ZWxzLlxuICB2YXIgZWFybGllc3RTdXNwZW5kZWRUaW1lID0gcm9vdC5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7XG4gIHZhciBsYXRlc3RTdXNwZW5kZWRUaW1lID0gcm9vdC5sYXRlc3RTdXNwZW5kZWRUaW1lO1xuICBpZiAoZWFybGllc3RTdXNwZW5kZWRUaW1lID09PSBOb1dvcmspIHtcbiAgICAvLyBObyBvdGhlciBzdXNwZW5kZWQgbGV2ZWxzLlxuICAgIHJvb3QuZWFybGllc3RTdXNwZW5kZWRUaW1lID0gcm9vdC5sYXRlc3RTdXNwZW5kZWRUaW1lID0gc3VzcGVuZGVkVGltZTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZWFybGllc3RTdXNwZW5kZWRUaW1lID4gc3VzcGVuZGVkVGltZSkge1xuICAgICAgLy8gVGhpcyBpcyB0aGUgZWFybGllc3Qgc3VzcGVuZGVkIGxldmVsLlxuICAgICAgcm9vdC5lYXJsaWVzdFN1c3BlbmRlZFRpbWUgPSBzdXNwZW5kZWRUaW1lO1xuICAgIH0gZWxzZSBpZiAobGF0ZXN0U3VzcGVuZGVkVGltZSA8IHN1c3BlbmRlZFRpbWUpIHtcbiAgICAgIC8vIFRoaXMgaXMgdGhlIGxhdGVzdCBzdXNwZW5kZWQgbGV2ZWxcbiAgICAgIHJvb3QubGF0ZXN0U3VzcGVuZGVkVGltZSA9IHN1c3BlbmRlZFRpbWU7XG4gICAgfVxuICB9XG5cbiAgZmluZE5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uKHN1c3BlbmRlZFRpbWUsIHJvb3QpO1xufVxuXG5mdW5jdGlvbiBtYXJrUGluZ2VkUHJpb3JpdHlMZXZlbChyb290LCBwaW5nZWRUaW1lKSB7XG4gIHJvb3QuZGlkRXJyb3IgPSBmYWxzZTtcblxuICAvLyBUT0RPOiBXaGVuIHdlIGFkZCBiYWNrIHJlc3VtaW5nLCB3ZSBuZWVkIHRvIGVuc3VyZSB0aGUgcHJvZ3Jlc3NlZCB3b3JrXG4gIC8vIGlzIHRocm93biBvdXQgYW5kIG5vdCByZXVzZWQgZHVyaW5nIHRoZSByZXN0YXJ0ZWQgcmVuZGVyLiBPbmUgd2F5IHRvXG4gIC8vIGludmFsaWRhdGUgdGhlIHByb2dyZXNzZWQgd29yayBpcyB0byByZXN0YXJ0IGF0IGV4cGlyYXRpb25UaW1lICsgMS5cbiAgdmFyIGxhdGVzdFBpbmdlZFRpbWUgPSByb290LmxhdGVzdFBpbmdlZFRpbWU7XG4gIGlmIChsYXRlc3RQaW5nZWRUaW1lID09PSBOb1dvcmsgfHwgbGF0ZXN0UGluZ2VkVGltZSA8IHBpbmdlZFRpbWUpIHtcbiAgICByb290LmxhdGVzdFBpbmdlZFRpbWUgPSBwaW5nZWRUaW1lO1xuICB9XG4gIGZpbmROZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbihwaW5nZWRUaW1lLCByb290KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJQaW5nKHJvb3QsIGNvbXBsZXRlZFRpbWUpIHtcbiAgLy8gVE9ETzogVHJhY2sgd2hldGhlciB0aGUgcm9vdCB3YXMgcGluZ2VkIGR1cmluZyB0aGUgcmVuZGVyIHBoYXNlLiBJZiBzbyxcbiAgLy8gd2UgbmVlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3QgbG9zZSB0cmFjayBvZiBpdC5cbiAgdmFyIGxhdGVzdFBpbmdlZFRpbWUgPSByb290LmxhdGVzdFBpbmdlZFRpbWU7XG4gIGlmIChsYXRlc3RQaW5nZWRUaW1lICE9PSBOb1dvcmsgJiYgbGF0ZXN0UGluZ2VkVGltZSA8PSBjb21wbGV0ZWRUaW1lKSB7XG4gICAgcm9vdC5sYXRlc3RQaW5nZWRUaW1lID0gTm9Xb3JrO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRFYXJsaWVzdE91dHN0YW5kaW5nUHJpb3JpdHlMZXZlbChyb290LCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICB2YXIgZWFybGllc3RFeHBpcmF0aW9uVGltZSA9IHJlbmRlckV4cGlyYXRpb25UaW1lO1xuXG4gIHZhciBlYXJsaWVzdFBlbmRpbmdUaW1lID0gcm9vdC5lYXJsaWVzdFBlbmRpbmdUaW1lO1xuICB2YXIgZWFybGllc3RTdXNwZW5kZWRUaW1lID0gcm9vdC5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7XG4gIGlmIChlYXJsaWVzdEV4cGlyYXRpb25UaW1lID09PSBOb1dvcmsgfHwgZWFybGllc3RQZW5kaW5nVGltZSAhPT0gTm9Xb3JrICYmIGVhcmxpZXN0UGVuZGluZ1RpbWUgPCBlYXJsaWVzdEV4cGlyYXRpb25UaW1lKSB7XG4gICAgZWFybGllc3RFeHBpcmF0aW9uVGltZSA9IGVhcmxpZXN0UGVuZGluZ1RpbWU7XG4gIH1cbiAgaWYgKGVhcmxpZXN0RXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBlYXJsaWVzdFN1c3BlbmRlZFRpbWUgIT09IE5vV29yayAmJiBlYXJsaWVzdFN1c3BlbmRlZFRpbWUgPCBlYXJsaWVzdEV4cGlyYXRpb25UaW1lKSB7XG4gICAgZWFybGllc3RFeHBpcmF0aW9uVGltZSA9IGVhcmxpZXN0U3VzcGVuZGVkVGltZTtcbiAgfVxuICByZXR1cm4gZWFybGllc3RFeHBpcmF0aW9uVGltZTtcbn1cblxuZnVuY3Rpb24gZGlkRXhwaXJlQXRFeHBpcmF0aW9uVGltZShyb290LCBjdXJyZW50VGltZSkge1xuICB2YXIgZXhwaXJhdGlvblRpbWUgPSByb290LmV4cGlyYXRpb25UaW1lO1xuICBpZiAoZXhwaXJhdGlvblRpbWUgIT09IE5vV29yayAmJiBjdXJyZW50VGltZSA+PSBleHBpcmF0aW9uVGltZSkge1xuICAgIC8vIFRoZSByb290IGhhcyBleHBpcmVkLiBGbHVzaCBhbGwgd29yayB1cCB0byB0aGUgY3VycmVudCB0aW1lLlxuICAgIHJvb3QubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24gPSBjdXJyZW50VGltZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kTmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24oY29tcGxldGVkRXhwaXJhdGlvblRpbWUsIHJvb3QpIHtcbiAgdmFyIGVhcmxpZXN0U3VzcGVuZGVkVGltZSA9IHJvb3QuZWFybGllc3RTdXNwZW5kZWRUaW1lO1xuICB2YXIgbGF0ZXN0U3VzcGVuZGVkVGltZSA9IHJvb3QubGF0ZXN0U3VzcGVuZGVkVGltZTtcbiAgdmFyIGVhcmxpZXN0UGVuZGluZ1RpbWUgPSByb290LmVhcmxpZXN0UGVuZGluZ1RpbWU7XG4gIHZhciBsYXRlc3RQaW5nZWRUaW1lID0gcm9vdC5sYXRlc3RQaW5nZWRUaW1lO1xuXG4gIC8vIFdvcmsgb24gdGhlIGVhcmxpZXN0IHBlbmRpbmcgdGltZS4gRmFpbGluZyB0aGF0LCB3b3JrIG9uIHRoZSBsYXRlc3RcbiAgLy8gcGluZ2VkIHRpbWUuXG4gIHZhciBuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbiA9IGVhcmxpZXN0UGVuZGluZ1RpbWUgIT09IE5vV29yayA/IGVhcmxpZXN0UGVuZGluZ1RpbWUgOiBsYXRlc3RQaW5nZWRUaW1lO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vIHBlbmRpbmcgb3IgcGluZ2VkIHdvcmssIGNoZWNrIGlmIHRoZXJlJ3Mgc3VzcGVuZGVkIHdvcmtcbiAgLy8gdGhhdCdzIGxvd2VyIHByaW9yaXR5IHRoYW4gd2hhdCB3ZSBqdXN0IGNvbXBsZXRlZC5cbiAgaWYgKG5leHRFeHBpcmF0aW9uVGltZVRvV29ya09uID09PSBOb1dvcmsgJiYgKGNvbXBsZXRlZEV4cGlyYXRpb25UaW1lID09PSBOb1dvcmsgfHwgbGF0ZXN0U3VzcGVuZGVkVGltZSA+IGNvbXBsZXRlZEV4cGlyYXRpb25UaW1lKSkge1xuICAgIC8vIFRoZSBsb3dlc3QgcHJpb3JpdHkgc3VzcGVuZGVkIHdvcmsgaXMgdGhlIHdvcmsgbW9zdCBsaWtlbHkgdG8gYmVcbiAgICAvLyBjb21taXR0ZWQgbmV4dC4gTGV0J3Mgc3RhcnQgcmVuZGVyaW5nIGl0IGFnYWluLCBzbyB0aGF0IGlmIGl0IHRpbWVzIG91dCxcbiAgICAvLyBpdCdzIHJlYWR5IHRvIGNvbW1pdC5cbiAgICBuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbiA9IGxhdGVzdFN1c3BlbmRlZFRpbWU7XG4gIH1cblxuICB2YXIgZXhwaXJhdGlvblRpbWUgPSBuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjtcbiAgaWYgKGV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmsgJiYgZWFybGllc3RTdXNwZW5kZWRUaW1lICE9PSBOb1dvcmsgJiYgZWFybGllc3RTdXNwZW5kZWRUaW1lIDwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICAvLyBFeHBpcmUgdXNpbmcgdGhlIGVhcmxpZXN0IGtub3duIGV4cGlyYXRpb24gdGltZS5cbiAgICBleHBpcmF0aW9uVGltZSA9IGVhcmxpZXN0U3VzcGVuZGVkVGltZTtcbiAgfVxuXG4gIHJvb3QubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24gPSBuZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjtcbiAgcm9vdC5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xufVxuXG4vLyBVcGRhdGVRdWV1ZSBpcyBhIGxpbmtlZCBsaXN0IG9mIHByaW9yaXRpemVkIHVwZGF0ZXMuXG4vL1xuLy8gTGlrZSBmaWJlcnMsIHVwZGF0ZSBxdWV1ZXMgY29tZSBpbiBwYWlyczogYSBjdXJyZW50IHF1ZXVlLCB3aGljaCByZXByZXNlbnRzXG4vLyB0aGUgdmlzaWJsZSBzdGF0ZSBvZiB0aGUgc2NyZWVuLCBhbmQgYSB3b3JrLWluLXByb2dyZXNzIHF1ZXVlLCB3aGljaCBpc1xuLy8gY2FuIGJlIG11dGF0ZWQgYW5kIHByb2Nlc3NlZCBhc3luY2hyb25vdXNseSBiZWZvcmUgaXQgaXMgY29tbWl0dGVkIOKAlCBhIGZvcm1cbi8vIG9mIGRvdWJsZSBidWZmZXJpbmcuIElmIGEgd29yay1pbi1wcm9ncmVzcyByZW5kZXIgaXMgZGlzY2FyZGVkIGJlZm9yZVxuLy8gZmluaXNoaW5nLCB3ZSBjcmVhdGUgYSBuZXcgd29yay1pbi1wcm9ncmVzcyBieSBjbG9uaW5nIHRoZSBjdXJyZW50IHF1ZXVlLlxuLy9cbi8vIEJvdGggcXVldWVzIHNoYXJlIGEgcGVyc2lzdGVudCwgc2luZ2x5LWxpbmtlZCBsaXN0IHN0cnVjdHVyZS4gVG8gc2NoZWR1bGUgYW5cbi8vIHVwZGF0ZSwgd2UgYXBwZW5kIGl0IHRvIHRoZSBlbmQgb2YgYm90aCBxdWV1ZXMuIEVhY2ggcXVldWUgbWFpbnRhaW5zIGFcbi8vIHBvaW50ZXIgdG8gZmlyc3QgdXBkYXRlIGluIHRoZSBwZXJzaXN0ZW50IGxpc3QgdGhhdCBoYXNuJ3QgYmVlbiBwcm9jZXNzZWQuXG4vLyBUaGUgd29yay1pbi1wcm9ncmVzcyBwb2ludGVyIGFsd2F5cyBoYXMgYSBwb3NpdGlvbiBlcXVhbCB0byBvciBncmVhdGVyIHRoYW5cbi8vIHRoZSBjdXJyZW50IHF1ZXVlLCBzaW5jZSB3ZSBhbHdheXMgd29yayBvbiB0aGF0IG9uZS4gVGhlIGN1cnJlbnQgcXVldWUnc1xuLy8gcG9pbnRlciBpcyBvbmx5IHVwZGF0ZWQgZHVyaW5nIHRoZSBjb21taXQgcGhhc2UsIHdoZW4gd2Ugc3dhcCBpbiB0aGVcbi8vIHdvcmstaW4tcHJvZ3Jlc3MuXG4vL1xuLy8gRm9yIGV4YW1wbGU6XG4vL1xuLy8gICBDdXJyZW50IHBvaW50ZXI6ICAgICAgICAgICBBIC0gQiAtIEMgLSBEIC0gRSAtIEZcbi8vICAgV29yay1pbi1wcm9ncmVzcyBwb2ludGVyOiAgICAgICAgICAgICAgRCAtIEUgLSBGXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5cbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHdvcmstaW4tcHJvZ3Jlc3MgcXVldWUgaGFzXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NlZCBtb3JlIHVwZGF0ZXMgdGhhbiBjdXJyZW50LlxuLy9cbi8vIFRoZSByZWFzb24gd2UgYXBwZW5kIHRvIGJvdGggcXVldWVzIGlzIGJlY2F1c2Ugb3RoZXJ3aXNlIHdlIG1pZ2h0IGRyb3Bcbi8vIHVwZGF0ZXMgd2l0aG91dCBldmVyIHByb2Nlc3NpbmcgdGhlbS4gRm9yIGV4YW1wbGUsIGlmIHdlIG9ubHkgYWRkIHVwZGF0ZXMgdG9cbi8vIHRoZSB3b3JrLWluLXByb2dyZXNzIHF1ZXVlLCBzb21lIHVwZGF0ZXMgY291bGQgYmUgbG9zdCB3aGVuZXZlciBhIHdvcmstaW5cbi8vIC1wcm9ncmVzcyByZW5kZXIgcmVzdGFydHMgYnkgY2xvbmluZyBmcm9tIGN1cnJlbnQuIFNpbWlsYXJseSwgaWYgd2Ugb25seSBhZGRcbi8vIHVwZGF0ZXMgdG8gdGhlIGN1cnJlbnQgcXVldWUsIHRoZSB1cGRhdGVzIHdpbGwgYmUgbG9zdCB3aGVuZXZlciBhbiBhbHJlYWR5XG4vLyBpbi1wcm9ncmVzcyBxdWV1ZSBjb21taXRzIGFuZCBzd2FwcyB3aXRoIHRoZSBjdXJyZW50IHF1ZXVlLiBIb3dldmVyLCBieVxuLy8gYWRkaW5nIHRvIGJvdGggcXVldWVzLCB3ZSBndWFyYW50ZWUgdGhhdCB0aGUgdXBkYXRlIHdpbGwgYmUgcGFydCBvZiB0aGUgbmV4dFxuLy8gd29yay1pbi1wcm9ncmVzcy4gKEFuZCBiZWNhdXNlIHRoZSB3b3JrLWluLXByb2dyZXNzIHF1ZXVlIGJlY29tZXMgdGhlXG4vLyBjdXJyZW50IHF1ZXVlIG9uY2UgaXQgY29tbWl0cywgdGhlcmUncyBubyBkYW5nZXIgb2YgYXBwbHlpbmcgdGhlIHNhbWVcbi8vIHVwZGF0ZSB0d2ljZS4pXG4vL1xuLy8gUHJpb3JpdGl6YXRpb25cbi8vIC0tLS0tLS0tLS0tLS0tXG4vL1xuLy8gVXBkYXRlcyBhcmUgbm90IHNvcnRlZCBieSBwcmlvcml0eSwgYnV0IGJ5IGluc2VydGlvbjsgbmV3IHVwZGF0ZXMgYXJlIGFsd2F5c1xuLy8gYXBwZW5kZWQgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdC5cbi8vXG4vLyBUaGUgcHJpb3JpdHkgaXMgc3RpbGwgaW1wb3J0YW50LCB0aG91Z2guIFdoZW4gcHJvY2Vzc2luZyB0aGUgdXBkYXRlIHF1ZXVlXG4vLyBkdXJpbmcgdGhlIHJlbmRlciBwaGFzZSwgb25seSB0aGUgdXBkYXRlcyB3aXRoIHN1ZmZpY2llbnQgcHJpb3JpdHkgYXJlXG4vLyBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0LiBJZiB3ZSBza2lwIGFuIHVwZGF0ZSBiZWNhdXNlIGl0IGhhcyBpbnN1ZmZpY2llbnRcbi8vIHByaW9yaXR5LCBpdCByZW1haW5zIGluIHRoZSBxdWV1ZSB0byBiZSBwcm9jZXNzZWQgbGF0ZXIsIGR1cmluZyBhIGxvd2VyXG4vLyBwcmlvcml0eSByZW5kZXIuIENydWNpYWxseSwgYWxsIHVwZGF0ZXMgc3Vic2VxdWVudCB0byBhIHNraXBwZWQgdXBkYXRlIGFsc29cbi8vIHJlbWFpbiBpbiB0aGUgcXVldWUgKnJlZ2FyZGxlc3Mgb2YgdGhlaXIgcHJpb3JpdHkqLiBUaGF0IG1lYW5zIGhpZ2ggcHJpb3JpdHlcbi8vIHVwZGF0ZXMgYXJlIHNvbWV0aW1lcyBwcm9jZXNzZWQgdHdpY2UsIGF0IHR3byBzZXBhcmF0ZSBwcmlvcml0aWVzLiBXZSBhbHNvXG4vLyBrZWVwIHRyYWNrIG9mIGEgYmFzZSBzdGF0ZSwgdGhhdCByZXByZXNlbnRzIHRoZSBzdGF0ZSBiZWZvcmUgdGhlIGZpcnN0XG4vLyB1cGRhdGUgaW4gdGhlIHF1ZXVlIGlzIGFwcGxpZWQuXG4vL1xuLy8gRm9yIGV4YW1wbGU6XG4vL1xuLy8gICBHaXZlbiBhIGJhc2Ugc3RhdGUgb2YgJycsIGFuZCB0aGUgZm9sbG93aW5nIHF1ZXVlIG9mIHVwZGF0ZXNcbi8vXG4vLyAgICAgQTEgLSBCMiAtIEMxIC0gRDJcbi8vXG4vLyAgIHdoZXJlIHRoZSBudW1iZXIgaW5kaWNhdGVzIHRoZSBwcmlvcml0eSwgYW5kIHRoZSB1cGRhdGUgaXMgYXBwbGllZCB0byB0aGVcbi8vICAgcHJldmlvdXMgc3RhdGUgYnkgYXBwZW5kaW5nIGEgbGV0dGVyLCBSZWFjdCB3aWxsIHByb2Nlc3MgdGhlc2UgdXBkYXRlcyBhc1xuLy8gICB0d28gc2VwYXJhdGUgcmVuZGVycywgb25lIHBlciBkaXN0aW5jdCBwcmlvcml0eSBsZXZlbDpcbi8vXG4vLyAgIEZpcnN0IHJlbmRlciwgYXQgcHJpb3JpdHkgMTpcbi8vICAgICBCYXNlIHN0YXRlOiAnJ1xuLy8gICAgIFVwZGF0ZXM6IFtBMSwgQzFdXG4vLyAgICAgUmVzdWx0IHN0YXRlOiAnQUMnXG4vL1xuLy8gICBTZWNvbmQgcmVuZGVyLCBhdCBwcmlvcml0eSAyOlxuLy8gICAgIEJhc2Ugc3RhdGU6ICdBJyAgICAgICAgICAgIDwtICBUaGUgYmFzZSBzdGF0ZSBkb2VzIG5vdCBpbmNsdWRlIEMxLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIEIyIHdhcyBza2lwcGVkLlxuLy8gICAgIFVwZGF0ZXM6IFtCMiwgQzEsIEQyXSAgICAgIDwtICBDMSB3YXMgcmViYXNlZCBvbiB0b3Agb2YgQjJcbi8vICAgICBSZXN1bHQgc3RhdGU6ICdBQkNEJ1xuLy9cbi8vIEJlY2F1c2Ugd2UgcHJvY2VzcyB1cGRhdGVzIGluIGluc2VydGlvbiBvcmRlciwgYW5kIHJlYmFzZSBoaWdoIHByaW9yaXR5XG4vLyB1cGRhdGVzIHdoZW4gcHJlY2VkaW5nIHVwZGF0ZXMgYXJlIHNraXBwZWQsIHRoZSBmaW5hbCByZXN1bHQgaXMgZGV0ZXJtaW5pc3RpY1xuLy8gcmVnYXJkbGVzcyBvZiBwcmlvcml0eS4gSW50ZXJtZWRpYXRlIHN0YXRlIG1heSB2YXJ5IGFjY29yZGluZyB0byBzeXN0ZW1cbi8vIHJlc291cmNlcywgYnV0IHRoZSBmaW5hbCBzdGF0ZSBpcyBhbHdheXMgdGhlIHNhbWUuXG5cbnZhciBVcGRhdGVTdGF0ZSA9IDA7XG52YXIgUmVwbGFjZVN0YXRlID0gMTtcbnZhciBGb3JjZVVwZGF0ZSA9IDI7XG52YXIgQ2FwdHVyZVVwZGF0ZSA9IDM7XG5cbi8vIEdsb2JhbCBzdGF0ZSB0aGF0IGlzIHJlc2V0IGF0IHRoZSBiZWdpbm5pbmcgb2YgY2FsbGluZyBgcHJvY2Vzc1VwZGF0ZVF1ZXVlYC5cbi8vIEl0IHNob3VsZCBvbmx5IGJlIHJlYWQgcmlnaHQgYWZ0ZXIgY2FsbGluZyBgcHJvY2Vzc1VwZGF0ZVF1ZXVlYCwgdmlhXG4vLyBgY2hlY2tIYXNGb3JjZVVwZGF0ZUFmdGVyUHJvY2Vzc2luZ2AuXG52YXIgaGFzRm9yY2VVcGRhdGUgPSBmYWxzZTtcblxudmFyIGRpZFdhcm5VcGRhdGVJbnNpZGVVcGRhdGUgPSB2b2lkIDA7XG52YXIgY3VycmVudGx5UHJvY2Vzc2luZ1F1ZXVlID0gdm9pZCAwO1xudmFyIHJlc2V0Q3VycmVudGx5UHJvY2Vzc2luZ1F1ZXVlID0gdm9pZCAwO1xue1xuICBkaWRXYXJuVXBkYXRlSW5zaWRlVXBkYXRlID0gZmFsc2U7XG4gIGN1cnJlbnRseVByb2Nlc3NpbmdRdWV1ZSA9IG51bGw7XG4gIHJlc2V0Q3VycmVudGx5UHJvY2Vzc2luZ1F1ZXVlID0gZnVuY3Rpb24gKCkge1xuICAgIGN1cnJlbnRseVByb2Nlc3NpbmdRdWV1ZSA9IG51bGw7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVwZGF0ZVF1ZXVlKGJhc2VTdGF0ZSkge1xuICB2YXIgcXVldWUgPSB7XG4gICAgYmFzZVN0YXRlOiBiYXNlU3RhdGUsXG4gICAgZmlyc3RVcGRhdGU6IG51bGwsXG4gICAgbGFzdFVwZGF0ZTogbnVsbCxcbiAgICBmaXJzdENhcHR1cmVkVXBkYXRlOiBudWxsLFxuICAgIGxhc3RDYXB0dXJlZFVwZGF0ZTogbnVsbCxcbiAgICBmaXJzdEVmZmVjdDogbnVsbCxcbiAgICBsYXN0RWZmZWN0OiBudWxsLFxuICAgIGZpcnN0Q2FwdHVyZWRFZmZlY3Q6IG51bGwsXG4gICAgbGFzdENhcHR1cmVkRWZmZWN0OiBudWxsXG4gIH07XG4gIHJldHVybiBxdWV1ZTtcbn1cblxuZnVuY3Rpb24gY2xvbmVVcGRhdGVRdWV1ZShjdXJyZW50UXVldWUpIHtcbiAgdmFyIHF1ZXVlID0ge1xuICAgIGJhc2VTdGF0ZTogY3VycmVudFF1ZXVlLmJhc2VTdGF0ZSxcbiAgICBmaXJzdFVwZGF0ZTogY3VycmVudFF1ZXVlLmZpcnN0VXBkYXRlLFxuICAgIGxhc3RVcGRhdGU6IGN1cnJlbnRRdWV1ZS5sYXN0VXBkYXRlLFxuXG4gICAgLy8gVE9ETzogV2l0aCByZXN1bWluZywgaWYgd2UgYmFpbCBvdXQgYW5kIHJlc3VzZSB0aGUgY2hpbGQgdHJlZSwgd2Ugc2hvdWxkXG4gICAgLy8ga2VlcCB0aGVzZSBlZmZlY3RzLlxuICAgIGZpcnN0Q2FwdHVyZWRVcGRhdGU6IG51bGwsXG4gICAgbGFzdENhcHR1cmVkVXBkYXRlOiBudWxsLFxuXG4gICAgZmlyc3RFZmZlY3Q6IG51bGwsXG4gICAgbGFzdEVmZmVjdDogbnVsbCxcblxuICAgIGZpcnN0Q2FwdHVyZWRFZmZlY3Q6IG51bGwsXG4gICAgbGFzdENhcHR1cmVkRWZmZWN0OiBudWxsXG4gIH07XG4gIHJldHVybiBxdWV1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVXBkYXRlKGV4cGlyYXRpb25UaW1lKSB7XG4gIHJldHVybiB7XG4gICAgZXhwaXJhdGlvblRpbWU6IGV4cGlyYXRpb25UaW1lLFxuXG4gICAgdGFnOiBVcGRhdGVTdGF0ZSxcbiAgICBwYXlsb2FkOiBudWxsLFxuICAgIGNhbGxiYWNrOiBudWxsLFxuXG4gICAgbmV4dDogbnVsbCxcbiAgICBuZXh0RWZmZWN0OiBudWxsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGFwcGVuZFVwZGF0ZVRvUXVldWUocXVldWUsIHVwZGF0ZSkge1xuICAvLyBBcHBlbmQgdGhlIHVwZGF0ZSB0byB0aGUgZW5kIG9mIHRoZSBsaXN0LlxuICBpZiAocXVldWUubGFzdFVwZGF0ZSA9PT0gbnVsbCkge1xuICAgIC8vIFF1ZXVlIGlzIGVtcHR5XG4gICAgcXVldWUuZmlyc3RVcGRhdGUgPSBxdWV1ZS5sYXN0VXBkYXRlID0gdXBkYXRlO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlLmxhc3RVcGRhdGUubmV4dCA9IHVwZGF0ZTtcbiAgICBxdWV1ZS5sYXN0VXBkYXRlID0gdXBkYXRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoZmliZXIsIHVwZGF0ZSkge1xuICAvLyBVcGRhdGUgcXVldWVzIGFyZSBjcmVhdGVkIGxhemlseS5cbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgdmFyIHF1ZXVlMSA9IHZvaWQgMDtcbiAgdmFyIHF1ZXVlMiA9IHZvaWQgMDtcbiAgaWYgKGFsdGVybmF0ZSA9PT0gbnVsbCkge1xuICAgIC8vIFRoZXJlJ3Mgb25seSBvbmUgZmliZXIuXG4gICAgcXVldWUxID0gZmliZXIudXBkYXRlUXVldWU7XG4gICAgcXVldWUyID0gbnVsbDtcbiAgICBpZiAocXVldWUxID09PSBudWxsKSB7XG4gICAgICBxdWV1ZTEgPSBmaWJlci51cGRhdGVRdWV1ZSA9IGNyZWF0ZVVwZGF0ZVF1ZXVlKGZpYmVyLm1lbW9pemVkU3RhdGUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGVyZSBhcmUgdHdvIG93bmVycy5cbiAgICBxdWV1ZTEgPSBmaWJlci51cGRhdGVRdWV1ZTtcbiAgICBxdWV1ZTIgPSBhbHRlcm5hdGUudXBkYXRlUXVldWU7XG4gICAgaWYgKHF1ZXVlMSA9PT0gbnVsbCkge1xuICAgICAgaWYgKHF1ZXVlMiA9PT0gbnVsbCkge1xuICAgICAgICAvLyBOZWl0aGVyIGZpYmVyIGhhcyBhbiB1cGRhdGUgcXVldWUuIENyZWF0ZSBuZXcgb25lcy5cbiAgICAgICAgcXVldWUxID0gZmliZXIudXBkYXRlUXVldWUgPSBjcmVhdGVVcGRhdGVRdWV1ZShmaWJlci5tZW1vaXplZFN0YXRlKTtcbiAgICAgICAgcXVldWUyID0gYWx0ZXJuYXRlLnVwZGF0ZVF1ZXVlID0gY3JlYXRlVXBkYXRlUXVldWUoYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT25seSBvbmUgZmliZXIgaGFzIGFuIHVwZGF0ZSBxdWV1ZS4gQ2xvbmUgdG8gY3JlYXRlIGEgbmV3IG9uZS5cbiAgICAgICAgcXVldWUxID0gZmliZXIudXBkYXRlUXVldWUgPSBjbG9uZVVwZGF0ZVF1ZXVlKHF1ZXVlMik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChxdWV1ZTIgPT09IG51bGwpIHtcbiAgICAgICAgLy8gT25seSBvbmUgZmliZXIgaGFzIGFuIHVwZGF0ZSBxdWV1ZS4gQ2xvbmUgdG8gY3JlYXRlIGEgbmV3IG9uZS5cbiAgICAgICAgcXVldWUyID0gYWx0ZXJuYXRlLnVwZGF0ZVF1ZXVlID0gY2xvbmVVcGRhdGVRdWV1ZShxdWV1ZTEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQm90aCBvd25lcnMgaGF2ZSBhbiB1cGRhdGUgcXVldWUuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChxdWV1ZTIgPT09IG51bGwgfHwgcXVldWUxID09PSBxdWV1ZTIpIHtcbiAgICAvLyBUaGVyZSdzIG9ubHkgYSBzaW5nbGUgcXVldWUuXG4gICAgYXBwZW5kVXBkYXRlVG9RdWV1ZShxdWV1ZTEsIHVwZGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlcmUgYXJlIHR3byBxdWV1ZXMuIFdlIG5lZWQgdG8gYXBwZW5kIHRoZSB1cGRhdGUgdG8gYm90aCBxdWV1ZXMsXG4gICAgLy8gd2hpbGUgYWNjb3VudGluZyBmb3IgdGhlIHBlcnNpc3RlbnQgc3RydWN0dXJlIG9mIHRoZSBsaXN0IOKAlCB3ZSBkb24ndFxuICAgIC8vIHdhbnQgdGhlIHNhbWUgdXBkYXRlIHRvIGJlIGFkZGVkIG11bHRpcGxlIHRpbWVzLlxuICAgIGlmIChxdWV1ZTEubGFzdFVwZGF0ZSA9PT0gbnVsbCB8fCBxdWV1ZTIubGFzdFVwZGF0ZSA9PT0gbnVsbCkge1xuICAgICAgLy8gT25lIG9mIHRoZSBxdWV1ZXMgaXMgbm90IGVtcHR5LiBXZSBtdXN0IGFkZCB0aGUgdXBkYXRlIHRvIGJvdGggcXVldWVzLlxuICAgICAgYXBwZW5kVXBkYXRlVG9RdWV1ZShxdWV1ZTEsIHVwZGF0ZSk7XG4gICAgICBhcHBlbmRVcGRhdGVUb1F1ZXVlKHF1ZXVlMiwgdXBkYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQm90aCBxdWV1ZXMgYXJlIG5vbi1lbXB0eS4gVGhlIGxhc3QgdXBkYXRlIGlzIHRoZSBzYW1lIGluIGJvdGggbGlzdHMsXG4gICAgICAvLyBiZWNhdXNlIG9mIHN0cnVjdHVyYWwgc2hhcmluZy4gU28sIG9ubHkgYXBwZW5kIHRvIG9uZSBvZiB0aGUgbGlzdHMuXG4gICAgICBhcHBlbmRVcGRhdGVUb1F1ZXVlKHF1ZXVlMSwgdXBkYXRlKTtcbiAgICAgIC8vIEJ1dCB3ZSBzdGlsbCBuZWVkIHRvIHVwZGF0ZSB0aGUgYGxhc3RVcGRhdGVgIHBvaW50ZXIgb2YgcXVldWUyLlxuICAgICAgcXVldWUyLmxhc3RVcGRhdGUgPSB1cGRhdGU7XG4gICAgfVxuICB9XG5cbiAge1xuICAgIGlmIChmaWJlci50YWcgPT09IENsYXNzQ29tcG9uZW50ICYmIChjdXJyZW50bHlQcm9jZXNzaW5nUXVldWUgPT09IHF1ZXVlMSB8fCBxdWV1ZTIgIT09IG51bGwgJiYgY3VycmVudGx5UHJvY2Vzc2luZ1F1ZXVlID09PSBxdWV1ZTIpICYmICFkaWRXYXJuVXBkYXRlSW5zaWRlVXBkYXRlKSB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdBbiB1cGRhdGUgKHNldFN0YXRlLCByZXBsYWNlU3RhdGUsIG9yIGZvcmNlVXBkYXRlKSB3YXMgc2NoZWR1bGVkICcgKyAnZnJvbSBpbnNpZGUgYW4gdXBkYXRlIGZ1bmN0aW9uLiBVcGRhdGUgZnVuY3Rpb25zIHNob3VsZCBiZSBwdXJlLCAnICsgJ3dpdGggemVybyBzaWRlLWVmZmVjdHMuIENvbnNpZGVyIHVzaW5nIGNvbXBvbmVudERpZFVwZGF0ZSBvciBhICcgKyAnY2FsbGJhY2suJyk7XG4gICAgICBkaWRXYXJuVXBkYXRlSW5zaWRlVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5xdWV1ZUNhcHR1cmVkVXBkYXRlKHdvcmtJblByb2dyZXNzLCB1cGRhdGUpIHtcbiAgLy8gQ2FwdHVyZWQgdXBkYXRlcyBnbyBpbnRvIGEgc2VwYXJhdGUgbGlzdCwgYW5kIG9ubHkgb24gdGhlIHdvcmstaW4tXG4gIC8vIHByb2dyZXNzIHF1ZXVlLlxuICB2YXIgd29ya0luUHJvZ3Jlc3NRdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICBpZiAod29ya0luUHJvZ3Jlc3NRdWV1ZSA9PT0gbnVsbCkge1xuICAgIHdvcmtJblByb2dyZXNzUXVldWUgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGNyZWF0ZVVwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIC8vIFRPRE86IEkgcHV0IHRoaXMgaGVyZSByYXRoZXIgdGhhbiBjcmVhdGVXb3JrSW5Qcm9ncmVzcyBzbyB0aGF0IHdlIGRvbid0XG4gICAgLy8gY2xvbmUgdGhlIHF1ZXVlIHVubmVjZXNzYXJpbHkuIFRoZXJlJ3MgcHJvYmFibHkgYSBiZXR0ZXIgd2F5IHRvXG4gICAgLy8gc3RydWN0dXJlIHRoaXMuXG4gICAgd29ya0luUHJvZ3Jlc3NRdWV1ZSA9IGVuc3VyZVdvcmtJblByb2dyZXNzUXVldWVJc0FDbG9uZSh3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3NRdWV1ZSk7XG4gIH1cblxuICAvLyBBcHBlbmQgdGhlIHVwZGF0ZSB0byB0aGUgZW5kIG9mIHRoZSBsaXN0LlxuICBpZiAod29ya0luUHJvZ3Jlc3NRdWV1ZS5sYXN0Q2FwdHVyZWRVcGRhdGUgPT09IG51bGwpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCByZW5kZXIgcGhhc2UgdXBkYXRlXG4gICAgd29ya0luUHJvZ3Jlc3NRdWV1ZS5maXJzdENhcHR1cmVkVXBkYXRlID0gd29ya0luUHJvZ3Jlc3NRdWV1ZS5sYXN0Q2FwdHVyZWRVcGRhdGUgPSB1cGRhdGU7XG4gIH0gZWxzZSB7XG4gICAgd29ya0luUHJvZ3Jlc3NRdWV1ZS5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dCA9IHVwZGF0ZTtcbiAgICB3b3JrSW5Qcm9ncmVzc1F1ZXVlLmxhc3RDYXB0dXJlZFVwZGF0ZSA9IHVwZGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbnN1cmVXb3JrSW5Qcm9ncmVzc1F1ZXVlSXNBQ2xvbmUod29ya0luUHJvZ3Jlc3MsIHF1ZXVlKSB7XG4gIHZhciBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlO1xuICBpZiAoY3VycmVudCAhPT0gbnVsbCkge1xuICAgIC8vIElmIHRoZSB3b3JrLWluLXByb2dyZXNzIHF1ZXVlIGlzIGVxdWFsIHRvIHRoZSBjdXJyZW50IHF1ZXVlLFxuICAgIC8vIHdlIG5lZWQgdG8gY2xvbmUgaXQgZmlyc3QuXG4gICAgaWYgKHF1ZXVlID09PSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSB7XG4gICAgICBxdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY2xvbmVVcGRhdGVRdWV1ZShxdWV1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBxdWV1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0U3RhdGVGcm9tVXBkYXRlKHdvcmtJblByb2dyZXNzLCBxdWV1ZSwgdXBkYXRlLCBwcmV2U3RhdGUsIG5leHRQcm9wcywgaW5zdGFuY2UpIHtcbiAgc3dpdGNoICh1cGRhdGUudGFnKSB7XG4gICAgY2FzZSBSZXBsYWNlU3RhdGU6XG4gICAgICB7XG4gICAgICAgIHZhciBfcGF5bG9hZCA9IHVwZGF0ZS5wYXlsb2FkO1xuICAgICAgICBpZiAodHlwZW9mIF9wYXlsb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgLy8gVXBkYXRlciBmdW5jdGlvblxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHMgfHwgZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzRm9yU3RyaWN0TW9kZSAmJiB3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0TW9kZSkge1xuICAgICAgICAgICAgICBfcGF5bG9hZC5jYWxsKGluc3RhbmNlLCBwcmV2U3RhdGUsIG5leHRQcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBfcGF5bG9hZC5jYWxsKGluc3RhbmNlLCBwcmV2U3RhdGUsIG5leHRQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RhdGUgb2JqZWN0XG4gICAgICAgIHJldHVybiBfcGF5bG9hZDtcbiAgICAgIH1cbiAgICBjYXNlIENhcHR1cmVVcGRhdGU6XG4gICAgICB7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyA9IHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyAmIH5TaG91bGRDYXB0dXJlIHwgRGlkQ2FwdHVyZTtcbiAgICAgIH1cbiAgICAvLyBJbnRlbnRpb25hbCBmYWxsdGhyb3VnaFxuICAgIGNhc2UgVXBkYXRlU3RhdGU6XG4gICAgICB7XG4gICAgICAgIHZhciBfcGF5bG9hZDIgPSB1cGRhdGUucGF5bG9hZDtcbiAgICAgICAgdmFyIHBhcnRpYWxTdGF0ZSA9IHZvaWQgMDtcbiAgICAgICAgaWYgKHR5cGVvZiBfcGF5bG9hZDIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBVcGRhdGVyIGZ1bmN0aW9uXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0cyB8fCBkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHNGb3JTdHJpY3RNb2RlICYmIHdvcmtJblByb2dyZXNzLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICAgICAgICAgIF9wYXlsb2FkMi5jYWxsKGluc3RhbmNlLCBwcmV2U3RhdGUsIG5leHRQcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcnRpYWxTdGF0ZSA9IF9wYXlsb2FkMi5jYWxsKGluc3RhbmNlLCBwcmV2U3RhdGUsIG5leHRQcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUGFydGlhbCBzdGF0ZSBvYmplY3RcbiAgICAgICAgICBwYXJ0aWFsU3RhdGUgPSBfcGF5bG9hZDI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxTdGF0ZSA9PT0gbnVsbCB8fCBwYXJ0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIE51bGwgYW5kIHVuZGVmaW5lZCBhcmUgdHJlYXRlZCBhcyBuby1vcHMuXG4gICAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNZXJnZSB0aGUgcGFydGlhbCBzdGF0ZSBhbmQgdGhlIHByZXZpb3VzIHN0YXRlLlxuICAgICAgICByZXR1cm4gX2Fzc2lnbih7fSwgcHJldlN0YXRlLCBwYXJ0aWFsU3RhdGUpO1xuICAgICAgfVxuICAgIGNhc2UgRm9yY2VVcGRhdGU6XG4gICAgICB7XG4gICAgICAgIGhhc0ZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gcHJldlN0YXRlO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIHF1ZXVlLCBwcm9wcywgaW5zdGFuY2UsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIGhhc0ZvcmNlVXBkYXRlID0gZmFsc2U7XG5cbiAgcXVldWUgPSBlbnN1cmVXb3JrSW5Qcm9ncmVzc1F1ZXVlSXNBQ2xvbmUod29ya0luUHJvZ3Jlc3MsIHF1ZXVlKTtcblxuICB7XG4gICAgY3VycmVudGx5UHJvY2Vzc2luZ1F1ZXVlID0gcXVldWU7XG4gIH1cblxuICAvLyBUaGVzZSB2YWx1ZXMgbWF5IGNoYW5nZSBhcyB3ZSBwcm9jZXNzIHRoZSBxdWV1ZS5cbiAgdmFyIG5ld0Jhc2VTdGF0ZSA9IHF1ZXVlLmJhc2VTdGF0ZTtcbiAgdmFyIG5ld0ZpcnN0VXBkYXRlID0gbnVsbDtcbiAgdmFyIG5ld0V4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xuXG4gIC8vIEl0ZXJhdGUgdGhyb3VnaCB0aGUgbGlzdCBvZiB1cGRhdGVzIHRvIGNvbXB1dGUgdGhlIHJlc3VsdC5cbiAgdmFyIHVwZGF0ZSA9IHF1ZXVlLmZpcnN0VXBkYXRlO1xuICB2YXIgcmVzdWx0U3RhdGUgPSBuZXdCYXNlU3RhdGU7XG4gIHdoaWxlICh1cGRhdGUgIT09IG51bGwpIHtcbiAgICB2YXIgdXBkYXRlRXhwaXJhdGlvblRpbWUgPSB1cGRhdGUuZXhwaXJhdGlvblRpbWU7XG4gICAgaWYgKHVwZGF0ZUV4cGlyYXRpb25UaW1lID4gcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgIC8vIFRoaXMgdXBkYXRlIGRvZXMgbm90IGhhdmUgc3VmZmljaWVudCBwcmlvcml0eS4gU2tpcCBpdC5cbiAgICAgIGlmIChuZXdGaXJzdFVwZGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCBza2lwcGVkIHVwZGF0ZS4gSXQgd2lsbCBiZSB0aGUgZmlyc3QgdXBkYXRlIGluXG4gICAgICAgIC8vIHRoZSBuZXcgbGlzdC5cbiAgICAgICAgbmV3Rmlyc3RVcGRhdGUgPSB1cGRhdGU7XG4gICAgICAgIC8vIFNpbmNlIHRoaXMgaXMgdGhlIGZpcnN0IHVwZGF0ZSB0aGF0IHdhcyBza2lwcGVkLCB0aGUgY3VycmVudCByZXN1bHRcbiAgICAgICAgLy8gaXMgdGhlIG5ldyBiYXNlIHN0YXRlLlxuICAgICAgICBuZXdCYXNlU3RhdGUgPSByZXN1bHRTdGF0ZTtcbiAgICAgIH1cbiAgICAgIC8vIFNpbmNlIHRoaXMgdXBkYXRlIHdpbGwgcmVtYWluIGluIHRoZSBsaXN0LCB1cGRhdGUgdGhlIHJlbWFpbmluZ1xuICAgICAgLy8gZXhwaXJhdGlvbiB0aW1lLlxuICAgICAgaWYgKG5ld0V4cGlyYXRpb25UaW1lID09PSBOb1dvcmsgfHwgbmV3RXhwaXJhdGlvblRpbWUgPiB1cGRhdGVFeHBpcmF0aW9uVGltZSkge1xuICAgICAgICBuZXdFeHBpcmF0aW9uVGltZSA9IHVwZGF0ZUV4cGlyYXRpb25UaW1lO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGlzIHVwZGF0ZSBkb2VzIGhhdmUgc3VmZmljaWVudCBwcmlvcml0eS4gUHJvY2VzcyBpdCBhbmQgY29tcHV0ZVxuICAgICAgLy8gYSBuZXcgcmVzdWx0LlxuICAgICAgcmVzdWx0U3RhdGUgPSBnZXRTdGF0ZUZyb21VcGRhdGUod29ya0luUHJvZ3Jlc3MsIHF1ZXVlLCB1cGRhdGUsIHJlc3VsdFN0YXRlLCBwcm9wcywgaW5zdGFuY2UpO1xuICAgICAgdmFyIF9jYWxsYmFjayA9IHVwZGF0ZS5jYWxsYmFjaztcbiAgICAgIGlmIChfY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IENhbGxiYWNrO1xuICAgICAgICAvLyBTZXQgdGhpcyB0byBudWxsLCBpbiBjYXNlIGl0IHdhcyBtdXRhdGVkIGR1cmluZyBhbiBhYm9ydGVkIHJlbmRlci5cbiAgICAgICAgdXBkYXRlLm5leHRFZmZlY3QgPSBudWxsO1xuICAgICAgICBpZiAocXVldWUubGFzdEVmZmVjdCA9PT0gbnVsbCkge1xuICAgICAgICAgIHF1ZXVlLmZpcnN0RWZmZWN0ID0gcXVldWUubGFzdEVmZmVjdCA9IHVwZGF0ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBxdWV1ZS5sYXN0RWZmZWN0Lm5leHRFZmZlY3QgPSB1cGRhdGU7XG4gICAgICAgICAgcXVldWUubGFzdEVmZmVjdCA9IHVwZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBDb250aW51ZSB0byB0aGUgbmV4dCB1cGRhdGUuXG4gICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gIH1cblxuICAvLyBTZXBhcmF0ZWx5LCBpdGVyYXRlIHRob3VnaCB0aGUgbGlzdCBvZiBjYXB0dXJlZCB1cGRhdGVzLlxuICB2YXIgbmV3Rmlyc3RDYXB0dXJlZFVwZGF0ZSA9IG51bGw7XG4gIHVwZGF0ZSA9IHF1ZXVlLmZpcnN0Q2FwdHVyZWRVcGRhdGU7XG4gIHdoaWxlICh1cGRhdGUgIT09IG51bGwpIHtcbiAgICB2YXIgX3VwZGF0ZUV4cGlyYXRpb25UaW1lID0gdXBkYXRlLmV4cGlyYXRpb25UaW1lO1xuICAgIGlmIChfdXBkYXRlRXhwaXJhdGlvblRpbWUgPiByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgICAgLy8gVGhpcyB1cGRhdGUgZG9lcyBub3QgaGF2ZSBzdWZmaWNpZW50IHByaW9yaXR5LiBTa2lwIGl0LlxuICAgICAgaWYgKG5ld0ZpcnN0Q2FwdHVyZWRVcGRhdGUgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3Qgc2tpcHBlZCBjYXB0dXJlZCB1cGRhdGUuIEl0IHdpbGwgYmUgdGhlIGZpcnN0XG4gICAgICAgIC8vIHVwZGF0ZSBpbiB0aGUgbmV3IGxpc3QuXG4gICAgICAgIG5ld0ZpcnN0Q2FwdHVyZWRVcGRhdGUgPSB1cGRhdGU7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IHVwZGF0ZSB0aGF0IHdhcyBza2lwcGVkLCB0aGUgY3VycmVudCByZXN1bHQgaXNcbiAgICAgICAgLy8gdGhlIG5ldyBiYXNlIHN0YXRlLlxuICAgICAgICBpZiAobmV3Rmlyc3RVcGRhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICBuZXdCYXNlU3RhdGUgPSByZXN1bHRTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2luY2UgdGhpcyB1cGRhdGUgd2lsbCByZW1haW4gaW4gdGhlIGxpc3QsIHVwZGF0ZSB0aGUgcmVtYWluaW5nXG4gICAgICAvLyBleHBpcmF0aW9uIHRpbWUuXG4gICAgICBpZiAobmV3RXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBuZXdFeHBpcmF0aW9uVGltZSA+IF91cGRhdGVFeHBpcmF0aW9uVGltZSkge1xuICAgICAgICBuZXdFeHBpcmF0aW9uVGltZSA9IF91cGRhdGVFeHBpcmF0aW9uVGltZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyB1cGRhdGUgZG9lcyBoYXZlIHN1ZmZpY2llbnQgcHJpb3JpdHkuIFByb2Nlc3MgaXQgYW5kIGNvbXB1dGVcbiAgICAgIC8vIGEgbmV3IHJlc3VsdC5cbiAgICAgIHJlc3VsdFN0YXRlID0gZ2V0U3RhdGVGcm9tVXBkYXRlKHdvcmtJblByb2dyZXNzLCBxdWV1ZSwgdXBkYXRlLCByZXN1bHRTdGF0ZSwgcHJvcHMsIGluc3RhbmNlKTtcbiAgICAgIHZhciBfY2FsbGJhY2syID0gdXBkYXRlLmNhbGxiYWNrO1xuICAgICAgaWYgKF9jYWxsYmFjazIgIT09IG51bGwpIHtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IENhbGxiYWNrO1xuICAgICAgICAvLyBTZXQgdGhpcyB0byBudWxsLCBpbiBjYXNlIGl0IHdhcyBtdXRhdGVkIGR1cmluZyBhbiBhYm9ydGVkIHJlbmRlci5cbiAgICAgICAgdXBkYXRlLm5leHRFZmZlY3QgPSBudWxsO1xuICAgICAgICBpZiAocXVldWUubGFzdENhcHR1cmVkRWZmZWN0ID09PSBudWxsKSB7XG4gICAgICAgICAgcXVldWUuZmlyc3RDYXB0dXJlZEVmZmVjdCA9IHF1ZXVlLmxhc3RDYXB0dXJlZEVmZmVjdCA9IHVwZGF0ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBxdWV1ZS5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdCA9IHVwZGF0ZTtcbiAgICAgICAgICBxdWV1ZS5sYXN0Q2FwdHVyZWRFZmZlY3QgPSB1cGRhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gIH1cblxuICBpZiAobmV3Rmlyc3RVcGRhdGUgPT09IG51bGwpIHtcbiAgICBxdWV1ZS5sYXN0VXBkYXRlID0gbnVsbDtcbiAgfVxuICBpZiAobmV3Rmlyc3RDYXB0dXJlZFVwZGF0ZSA9PT0gbnVsbCkge1xuICAgIHF1ZXVlLmxhc3RDYXB0dXJlZFVwZGF0ZSA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IENhbGxiYWNrO1xuICB9XG4gIGlmIChuZXdGaXJzdFVwZGF0ZSA9PT0gbnVsbCAmJiBuZXdGaXJzdENhcHR1cmVkVXBkYXRlID09PSBudWxsKSB7XG4gICAgLy8gV2UgcHJvY2Vzc2VkIGV2ZXJ5IHVwZGF0ZSwgd2l0aG91dCBza2lwcGluZy4gVGhhdCBtZWFucyB0aGUgbmV3IGJhc2VcbiAgICAvLyBzdGF0ZSBpcyB0aGUgc2FtZSBhcyB0aGUgcmVzdWx0IHN0YXRlLlxuICAgIG5ld0Jhc2VTdGF0ZSA9IHJlc3VsdFN0YXRlO1xuICB9XG5cbiAgcXVldWUuYmFzZVN0YXRlID0gbmV3QmFzZVN0YXRlO1xuICBxdWV1ZS5maXJzdFVwZGF0ZSA9IG5ld0ZpcnN0VXBkYXRlO1xuICBxdWV1ZS5maXJzdENhcHR1cmVkVXBkYXRlID0gbmV3Rmlyc3RDYXB0dXJlZFVwZGF0ZTtcblxuICAvLyBTZXQgdGhlIHJlbWFpbmluZyBleHBpcmF0aW9uIHRpbWUgdG8gYmUgd2hhdGV2ZXIgaXMgcmVtYWluaW5nIGluIHRoZSBxdWV1ZS5cbiAgLy8gVGhpcyBzaG91bGQgYmUgZmluZSBiZWNhdXNlIHRoZSBvbmx5IHR3byBvdGhlciB0aGluZ3MgdGhhdCBjb250cmlidXRlIHRvXG4gIC8vIGV4cGlyYXRpb24gdGltZSBhcmUgcHJvcHMgYW5kIGNvbnRleHQuIFdlJ3JlIGFscmVhZHkgaW4gdGhlIG1pZGRsZSBvZiB0aGVcbiAgLy8gYmVnaW4gcGhhc2UgYnkgdGhlIHRpbWUgd2Ugc3RhcnQgcHJvY2Vzc2luZyB0aGUgcXVldWUsIHNvIHdlJ3ZlIGFscmVhZHlcbiAgLy8gZGVhbHQgd2l0aCB0aGUgcHJvcHMuIENvbnRleHQgaW4gY29tcG9uZW50cyB0aGF0IHNwZWNpZnlcbiAgLy8gc2hvdWxkQ29tcG9uZW50VXBkYXRlIGlzIHRyaWNreTsgYnV0IHdlJ2xsIGhhdmUgdG8gYWNjb3VudCBmb3JcbiAgLy8gdGhhdCByZWdhcmRsZXNzLlxuICB3b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZSA9IG5ld0V4cGlyYXRpb25UaW1lO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gcmVzdWx0U3RhdGU7XG5cbiAge1xuICAgIGN1cnJlbnRseVByb2Nlc3NpbmdRdWV1ZSA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbENhbGxiYWNrKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICEodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSA/IGludmFyaWFudChmYWxzZSwgJ0ludmFsaWQgYXJndW1lbnQgcGFzc2VkIGFzIGNhbGxiYWNrLiBFeHBlY3RlZCBhIGZ1bmN0aW9uLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcycsIGNhbGxiYWNrKSA6IHZvaWQgMDtcbiAgY2FsbGJhY2suY2FsbChjb250ZXh0KTtcbn1cblxuZnVuY3Rpb24gcmVzZXRIYXNGb3JjZVVwZGF0ZUJlZm9yZVByb2Nlc3NpbmcoKSB7XG4gIGhhc0ZvcmNlVXBkYXRlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSGFzRm9yY2VVcGRhdGVBZnRlclByb2Nlc3NpbmcoKSB7XG4gIHJldHVybiBoYXNGb3JjZVVwZGF0ZTtcbn1cblxuZnVuY3Rpb24gY29tbWl0VXBkYXRlUXVldWUoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFF1ZXVlLCBpbnN0YW5jZSwgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgLy8gSWYgdGhlIGZpbmlzaGVkIHJlbmRlciBpbmNsdWRlZCBjYXB0dXJlZCB1cGRhdGVzLCBhbmQgdGhlcmUgYXJlIHN0aWxsXG4gIC8vIGxvd2VyIHByaW9yaXR5IHVwZGF0ZXMgbGVmdCBvdmVyLCB3ZSBuZWVkIHRvIGtlZXAgdGhlIGNhcHR1cmVkIHVwZGF0ZXNcbiAgLy8gaW4gdGhlIHF1ZXVlIHNvIHRoYXQgdGhleSBhcmUgcmViYXNlZCBhbmQgbm90IGRyb3BwZWQgb25jZSB3ZSBwcm9jZXNzIHRoZVxuICAvLyBxdWV1ZSBhZ2FpbiBhdCB0aGUgbG93ZXIgcHJpb3JpdHkuXG4gIGlmIChmaW5pc2hlZFF1ZXVlLmZpcnN0Q2FwdHVyZWRVcGRhdGUgIT09IG51bGwpIHtcbiAgICAvLyBKb2luIHRoZSBjYXB0dXJlZCB1cGRhdGUgbGlzdCB0byB0aGUgZW5kIG9mIHRoZSBub3JtYWwgbGlzdC5cbiAgICBpZiAoZmluaXNoZWRRdWV1ZS5sYXN0VXBkYXRlICE9PSBudWxsKSB7XG4gICAgICBmaW5pc2hlZFF1ZXVlLmxhc3RVcGRhdGUubmV4dCA9IGZpbmlzaGVkUXVldWUuZmlyc3RDYXB0dXJlZFVwZGF0ZTtcbiAgICAgIGZpbmlzaGVkUXVldWUubGFzdFVwZGF0ZSA9IGZpbmlzaGVkUXVldWUubGFzdENhcHR1cmVkVXBkYXRlO1xuICAgIH1cbiAgICAvLyBDbGVhciB0aGUgbGlzdCBvZiBjYXB0dXJlZCB1cGRhdGVzLlxuICAgIGZpbmlzaGVkUXVldWUuZmlyc3RDYXB0dXJlZFVwZGF0ZSA9IGZpbmlzaGVkUXVldWUubGFzdENhcHR1cmVkVXBkYXRlID0gbnVsbDtcbiAgfVxuXG4gIC8vIENvbW1pdCB0aGUgZWZmZWN0c1xuICBjb21taXRVcGRhdGVFZmZlY3RzKGZpbmlzaGVkUXVldWUuZmlyc3RFZmZlY3QsIGluc3RhbmNlKTtcbiAgZmluaXNoZWRRdWV1ZS5maXJzdEVmZmVjdCA9IGZpbmlzaGVkUXVldWUubGFzdEVmZmVjdCA9IG51bGw7XG5cbiAgY29tbWl0VXBkYXRlRWZmZWN0cyhmaW5pc2hlZFF1ZXVlLmZpcnN0Q2FwdHVyZWRFZmZlY3QsIGluc3RhbmNlKTtcbiAgZmluaXNoZWRRdWV1ZS5maXJzdENhcHR1cmVkRWZmZWN0ID0gZmluaXNoZWRRdWV1ZS5sYXN0Q2FwdHVyZWRFZmZlY3QgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBjb21taXRVcGRhdGVFZmZlY3RzKGVmZmVjdCwgaW5zdGFuY2UpIHtcbiAgd2hpbGUgKGVmZmVjdCAhPT0gbnVsbCkge1xuICAgIHZhciBfY2FsbGJhY2szID0gZWZmZWN0LmNhbGxiYWNrO1xuICAgIGlmIChfY2FsbGJhY2szICE9PSBudWxsKSB7XG4gICAgICBlZmZlY3QuY2FsbGJhY2sgPSBudWxsO1xuICAgICAgY2FsbENhbGxiYWNrKF9jYWxsYmFjazMsIGluc3RhbmNlKTtcbiAgICB9XG4gICAgZWZmZWN0ID0gZWZmZWN0Lm5leHRFZmZlY3Q7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQ2FwdHVyZWRWYWx1ZSh2YWx1ZSwgc291cmNlKSB7XG4gIC8vIElmIHRoZSB2YWx1ZSBpcyBhbiBlcnJvciwgY2FsbCB0aGlzIGZ1bmN0aW9uIGltbWVkaWF0ZWx5IGFmdGVyIGl0IGlzIHRocm93blxuICAvLyBzbyB0aGUgc3RhY2sgaXMgYWNjdXJhdGUuXG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIHNvdXJjZTogc291cmNlLFxuICAgIHN0YWNrOiBnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2Qoc291cmNlKVxuICB9O1xufVxuXG52YXIgdmFsdWVDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCk7XG5cbnZhciByZW5kZXJlclNpZ2lsID0gdm9pZCAwO1xue1xuICAvLyBVc2UgdGhpcyB0byBkZXRlY3QgbXVsdGlwbGUgcmVuZGVyZXJzIHVzaW5nIHRoZSBzYW1lIGNvbnRleHRcbiAgcmVuZGVyZXJTaWdpbCA9IHt9O1xufVxuXG52YXIgY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsO1xudmFyIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IG51bGw7XG52YXIgbGFzdENvbnRleHRXaXRoQWxsQml0c09ic2VydmVkID0gbnVsbDtcblxuZnVuY3Rpb24gcmVzZXRDb250ZXh0RGVwZW5kZW5jZXMoKSB7XG4gIC8vIFRoaXMgaXMgY2FsbGVkIHJpZ2h0IGJlZm9yZSBSZWFjdCB5aWVsZHMgZXhlY3V0aW9uLCB0byBlbnN1cmUgYHJlYWRDb250ZXh0YFxuICAvLyBjYW5ub3QgYmUgY2FsbGVkIG91dHNpZGUgdGhlIHJlbmRlciBwaGFzZS5cbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBudWxsO1xuICBsYXN0Q29udGV4dFdpdGhBbGxCaXRzT2JzZXJ2ZWQgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBwdXNoUHJvdmlkZXIocHJvdmlkZXJGaWJlciwgbmV4dFZhbHVlKSB7XG4gIHZhciBjb250ZXh0ID0gcHJvdmlkZXJGaWJlci50eXBlLl9jb250ZXh0O1xuXG4gIGlmIChpc1ByaW1hcnlSZW5kZXJlcikge1xuICAgIHB1c2godmFsdWVDdXJzb3IsIGNvbnRleHQuX2N1cnJlbnRWYWx1ZSwgcHJvdmlkZXJGaWJlcik7XG5cbiAgICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSBuZXh0VmFsdWU7XG4gICAge1xuICAgICAgIShjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIgPT09IHVuZGVmaW5lZCB8fCBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIgPT09IG51bGwgfHwgY29udGV4dC5fY3VycmVudFJlbmRlcmVyID09PSByZW5kZXJlclNpZ2lsKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0RldGVjdGVkIG11bHRpcGxlIHJlbmRlcmVycyBjb25jdXJyZW50bHkgcmVuZGVyaW5nIHRoZSAnICsgJ3NhbWUgY29udGV4dCBwcm92aWRlci4gVGhpcyBpcyBjdXJyZW50bHkgdW5zdXBwb3J0ZWQuJykgOiB2b2lkIDA7XG4gICAgICBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIgPSByZW5kZXJlclNpZ2lsO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwdXNoKHZhbHVlQ3Vyc29yLCBjb250ZXh0Ll9jdXJyZW50VmFsdWUyLCBwcm92aWRlckZpYmVyKTtcblxuICAgIGNvbnRleHQuX2N1cnJlbnRWYWx1ZTIgPSBuZXh0VmFsdWU7XG4gICAge1xuICAgICAgIShjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIyID09PSB1bmRlZmluZWQgfHwgY29udGV4dC5fY3VycmVudFJlbmRlcmVyMiA9PT0gbnVsbCB8fCBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIyID09PSByZW5kZXJlclNpZ2lsKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0RldGVjdGVkIG11bHRpcGxlIHJlbmRlcmVycyBjb25jdXJyZW50bHkgcmVuZGVyaW5nIHRoZSAnICsgJ3NhbWUgY29udGV4dCBwcm92aWRlci4gVGhpcyBpcyBjdXJyZW50bHkgdW5zdXBwb3J0ZWQuJykgOiB2b2lkIDA7XG4gICAgICBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIyID0gcmVuZGVyZXJTaWdpbDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9wUHJvdmlkZXIocHJvdmlkZXJGaWJlcikge1xuICB2YXIgY3VycmVudFZhbHVlID0gdmFsdWVDdXJzb3IuY3VycmVudDtcblxuICBwb3AodmFsdWVDdXJzb3IsIHByb3ZpZGVyRmliZXIpO1xuXG4gIHZhciBjb250ZXh0ID0gcHJvdmlkZXJGaWJlci50eXBlLl9jb250ZXh0O1xuICBpZiAoaXNQcmltYXJ5UmVuZGVyZXIpIHtcbiAgICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSBjdXJyZW50VmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dC5fY3VycmVudFZhbHVlMiA9IGN1cnJlbnRWYWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVDaGFuZ2VkQml0cyhjb250ZXh0LCBuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgLy8gVXNlIE9iamVjdC5pcyB0byBjb21wYXJlIHRoZSBuZXcgY29udGV4dCB2YWx1ZSB0byB0aGUgb2xkIHZhbHVlLiBJbmxpbmVkXG4gIC8vIE9iamVjdC5pcyBwb2x5ZmlsbC5cbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gIGlmIChvbGRWYWx1ZSA9PT0gbmV3VmFsdWUgJiYgKG9sZFZhbHVlICE9PSAwIHx8IDEgLyBvbGRWYWx1ZSA9PT0gMSAvIG5ld1ZhbHVlKSB8fCBvbGRWYWx1ZSAhPT0gb2xkVmFsdWUgJiYgbmV3VmFsdWUgIT09IG5ld1ZhbHVlIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICkge1xuICAgICAgLy8gTm8gY2hhbmdlXG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgIHZhciBjaGFuZ2VkQml0cyA9IHR5cGVvZiBjb250ZXh0Ll9jYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRleHQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSkgOiBtYXhTaWduZWQzMUJpdEludDtcblxuICAgIHtcbiAgICAgICEoKGNoYW5nZWRCaXRzICYgbWF4U2lnbmVkMzFCaXRJbnQpID09PSBjaGFuZ2VkQml0cykgPyB3YXJuaW5nJDEoZmFsc2UsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICVzJywgY2hhbmdlZEJpdHMpIDogdm9pZCAwO1xuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZEJpdHMgfCAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2Uod29ya0luUHJvZ3Jlc3MsIGNvbnRleHQsIGNoYW5nZWRCaXRzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICB2YXIgZmliZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgaWYgKGZpYmVyICE9PSBudWxsKSB7XG4gICAgLy8gU2V0IHRoZSByZXR1cm4gcG9pbnRlciBvZiB0aGUgY2hpbGQgdG8gdGhlIHdvcmstaW4tcHJvZ3Jlc3MgZmliZXIuXG4gICAgZmliZXIucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gIH1cbiAgd2hpbGUgKGZpYmVyICE9PSBudWxsKSB7XG4gICAgdmFyIG5leHRGaWJlciA9IHZvaWQgMDtcblxuICAgIC8vIFZpc2l0IHRoaXMgZmliZXIuXG4gICAgdmFyIGRlcGVuZGVuY3kgPSBmaWJlci5maXJzdENvbnRleHREZXBlbmRlbmN5O1xuICAgIGlmIChkZXBlbmRlbmN5ICE9PSBudWxsKSB7XG4gICAgICBkbyB7XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBjb250ZXh0IG1hdGNoZXMuXG4gICAgICAgIGlmIChkZXBlbmRlbmN5LmNvbnRleHQgPT09IGNvbnRleHQgJiYgKGRlcGVuZGVuY3kub2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgLy8gTWF0Y2ghIFNjaGVkdWxlIGFuIHVwZGF0ZSBvbiB0aGlzIGZpYmVyLlxuXG4gICAgICAgICAgaWYgKGZpYmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQpIHtcbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIGEgZm9yY2UgdXBkYXRlIG9uIHRoZSB3b3JrLWluLXByb2dyZXNzLlxuICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShyZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgICB1cGRhdGUudGFnID0gRm9yY2VVcGRhdGU7XG4gICAgICAgICAgICAvLyBUT0RPOiBCZWNhdXNlIHdlIGRvbid0IGhhdmUgYSB3b3JrLWluLXByb2dyZXNzLCB0aGlzIHdpbGwgYWRkIHRoZVxuICAgICAgICAgICAgLy8gdXBkYXRlIHRvIHRoZSBjdXJyZW50IGZpYmVyLCB0b28sIHdoaWNoIG1lYW5zIGl0IHdpbGwgcGVyc2lzdCBldmVuIGlmXG4gICAgICAgICAgICAvLyB0aGlzIHJlbmRlciBpcyB0aHJvd24gYXdheS4gU2luY2UgaXQncyBhIHJhY2UgY29uZGl0aW9uLCBub3Qgc3VyZSBpdCdzXG4gICAgICAgICAgICAvLyB3b3J0aCBmaXhpbmcuXG4gICAgICAgICAgICBlbnF1ZXVlVXBkYXRlKGZpYmVyLCB1cGRhdGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChmaWJlci5leHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IGZpYmVyLmV4cGlyYXRpb25UaW1lID4gcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgICAgIGZpYmVyLmV4cGlyYXRpb25UaW1lID0gcmVuZGVyRXhwaXJhdGlvblRpbWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gICAgICAgICAgaWYgKGFsdGVybmF0ZSAhPT0gbnVsbCAmJiAoYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lID09PSBOb1dvcmsgfHwgYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lID4gcmVuZGVyRXhwaXJhdGlvblRpbWUpKSB7XG4gICAgICAgICAgICBhbHRlcm5hdGUuZXhwaXJhdGlvblRpbWUgPSByZW5kZXJFeHBpcmF0aW9uVGltZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSBjaGlsZCBleHBpcmF0aW9uIHRpbWUgb2YgYWxsIHRoZSBhbmNlc3RvcnMsIGluY2x1ZGluZ1xuICAgICAgICAgIC8vIHRoZSBhbHRlcm5hdGVzLlxuICAgICAgICAgIHZhciBub2RlID0gZmliZXIucmV0dXJuO1xuICAgICAgICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBhbHRlcm5hdGUgPSBub2RlLmFsdGVybmF0ZTtcbiAgICAgICAgICAgIGlmIChub2RlLmNoaWxkRXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBub2RlLmNoaWxkRXhwaXJhdGlvblRpbWUgPiByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgICAgICAgICAgICBub2RlLmNoaWxkRXhwaXJhdGlvblRpbWUgPSByZW5kZXJFeHBpcmF0aW9uVGltZTtcbiAgICAgICAgICAgICAgaWYgKGFsdGVybmF0ZSAhPT0gbnVsbCAmJiAoYWx0ZXJuYXRlLmNoaWxkRXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBhbHRlcm5hdGUuY2hpbGRFeHBpcmF0aW9uVGltZSA+IHJlbmRlckV4cGlyYXRpb25UaW1lKSkge1xuICAgICAgICAgICAgICAgIGFsdGVybmF0ZS5jaGlsZEV4cGlyYXRpb25UaW1lID0gcmVuZGVyRXhwaXJhdGlvblRpbWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWx0ZXJuYXRlICE9PSBudWxsICYmIChhbHRlcm5hdGUuY2hpbGRFeHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IGFsdGVybmF0ZS5jaGlsZEV4cGlyYXRpb25UaW1lID4gcmVuZGVyRXhwaXJhdGlvblRpbWUpKSB7XG4gICAgICAgICAgICAgIGFsdGVybmF0ZS5jaGlsZEV4cGlyYXRpb25UaW1lID0gcmVuZGVyRXhwaXJhdGlvblRpbWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBOZWl0aGVyIGFsdGVybmF0ZSB3YXMgdXBkYXRlZCwgd2hpY2ggbWVhbnMgdGhlIHJlc3Qgb2YgdGhlXG4gICAgICAgICAgICAgIC8vIGFuY2VzdG9yIHBhdGggYWxyZWFkeSBoYXMgc3VmZmljaWVudCBwcmlvcml0eS5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5leHRGaWJlciA9IGZpYmVyLmNoaWxkO1xuICAgICAgICBkZXBlbmRlbmN5ID0gZGVwZW5kZW5jeS5uZXh0O1xuICAgICAgfSB3aGlsZSAoZGVwZW5kZW5jeSAhPT0gbnVsbCk7XG4gICAgfSBlbHNlIGlmIChmaWJlci50YWcgPT09IENvbnRleHRQcm92aWRlcikge1xuICAgICAgLy8gRG9uJ3Qgc2NhbiBkZWVwZXIgaWYgdGhpcyBpcyBhIG1hdGNoaW5nIHByb3ZpZGVyXG4gICAgICBuZXh0RmliZXIgPSBmaWJlci50eXBlID09PSB3b3JrSW5Qcm9ncmVzcy50eXBlID8gbnVsbCA6IGZpYmVyLmNoaWxkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUcmF2ZXJzZSBkb3duLlxuICAgICAgbmV4dEZpYmVyID0gZmliZXIuY2hpbGQ7XG4gICAgfVxuXG4gICAgaWYgKG5leHRGaWJlciAhPT0gbnVsbCkge1xuICAgICAgLy8gU2V0IHRoZSByZXR1cm4gcG9pbnRlciBvZiB0aGUgY2hpbGQgdG8gdGhlIHdvcmstaW4tcHJvZ3Jlc3MgZmliZXIuXG4gICAgICBuZXh0RmliZXIucmV0dXJuID0gZmliZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5vIGNoaWxkLiBUcmF2ZXJzZSB0byBuZXh0IHNpYmxpbmcuXG4gICAgICBuZXh0RmliZXIgPSBmaWJlcjtcbiAgICAgIHdoaWxlIChuZXh0RmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKG5leHRGaWJlciA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAvLyBXZSdyZSBiYWNrIHRvIHRoZSByb290IG9mIHRoaXMgc3VidHJlZS4gRXhpdC5cbiAgICAgICAgICBuZXh0RmliZXIgPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzaWJsaW5nID0gbmV4dEZpYmVyLnNpYmxpbmc7XG4gICAgICAgIGlmIChzaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gU2V0IHRoZSByZXR1cm4gcG9pbnRlciBvZiB0aGUgc2libGluZyB0byB0aGUgd29yay1pbi1wcm9ncmVzcyBmaWJlci5cbiAgICAgICAgICBzaWJsaW5nLnJldHVybiA9IG5leHRGaWJlci5yZXR1cm47XG4gICAgICAgICAgbmV4dEZpYmVyID0gc2libGluZztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBObyBtb3JlIHNpYmxpbmdzLiBUcmF2ZXJzZSB1cC5cbiAgICAgICAgbmV4dEZpYmVyID0gbmV4dEZpYmVyLnJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgZmliZXIgPSBuZXh0RmliZXI7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gd29ya0luUHJvZ3Jlc3M7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IG51bGw7XG4gIGxhc3RDb250ZXh0V2l0aEFsbEJpdHNPYnNlcnZlZCA9IG51bGw7XG5cbiAgLy8gUmVzZXQgdGhlIHdvcmstaW4tcHJvZ3Jlc3MgbGlzdFxuICB3b3JrSW5Qcm9ncmVzcy5maXJzdENvbnRleHREZXBlbmRlbmN5ID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gcmVhZENvbnRleHQoY29udGV4dCwgb2JzZXJ2ZWRCaXRzKSB7XG4gIGlmIChsYXN0Q29udGV4dFdpdGhBbGxCaXRzT2JzZXJ2ZWQgPT09IGNvbnRleHQpIHtcbiAgICAvLyBOb3RoaW5nIHRvIGRvLiBXZSBhbHJlYWR5IG9ic2VydmUgZXZlcnl0aGluZyBpbiB0aGlzIGNvbnRleHQuXG4gIH0gZWxzZSBpZiAob2JzZXJ2ZWRCaXRzID09PSBmYWxzZSB8fCBvYnNlcnZlZEJpdHMgPT09IDApIHtcbiAgICAvLyBEbyBub3Qgb2JzZXJ2ZSBhbnkgdXBkYXRlcy5cbiAgfSBlbHNlIHtcbiAgICB2YXIgcmVzb2x2ZWRPYnNlcnZlZEJpdHMgPSB2b2lkIDA7IC8vIEF2b2lkIGRlb3B0aW5nIG9uIG9ic2VydmFibGUgYXJndW1lbnRzIG9yIGhldGVyb2dlbmVvdXMgdHlwZXMuXG4gICAgaWYgKHR5cGVvZiBvYnNlcnZlZEJpdHMgIT09ICdudW1iZXInIHx8IG9ic2VydmVkQml0cyA9PT0gbWF4U2lnbmVkMzFCaXRJbnQpIHtcbiAgICAgIC8vIE9ic2VydmUgYWxsIHVwZGF0ZXMuXG4gICAgICBsYXN0Q29udGV4dFdpdGhBbGxCaXRzT2JzZXJ2ZWQgPSBjb250ZXh0O1xuICAgICAgcmVzb2x2ZWRPYnNlcnZlZEJpdHMgPSBtYXhTaWduZWQzMUJpdEludDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZWRPYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHM7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRleHRJdGVtID0ge1xuICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgIG9ic2VydmVkQml0czogcmVzb2x2ZWRPYnNlcnZlZEJpdHMsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcblxuICAgIGlmIChsYXN0Q29udGV4dERlcGVuZGVuY3kgPT09IG51bGwpIHtcbiAgICAgICEoY3VycmVudGx5UmVuZGVyaW5nRmliZXIgIT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnQ29udGV4dCBjYW4gb25seSBiZSByZWFkIHdoaWxlIFJlYWN0IGlzIHJlbmRlcmluZywgZS5nLiBpbnNpZGUgdGhlIHJlbmRlciBtZXRob2Qgb3IgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLicpIDogdm9pZCAwO1xuICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgZGVwZW5kZW5jeSBpbiB0aGUgbGlzdFxuICAgICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIuZmlyc3RDb250ZXh0RGVwZW5kZW5jeSA9IGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGNvbnRleHRJdGVtO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBcHBlbmQgYSBuZXcgY29udGV4dCBpdGVtLlxuICAgICAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gbGFzdENvbnRleHREZXBlbmRlbmN5Lm5leHQgPSBjb250ZXh0SXRlbTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGlzUHJpbWFyeVJlbmRlcmVyID8gY29udGV4dC5fY3VycmVudFZhbHVlIDogY29udGV4dC5fY3VycmVudFZhbHVlMjtcbn1cblxudmFyIE5PX0NPTlRFWFQgPSB7fTtcblxudmFyIGNvbnRleHRTdGFja0N1cnNvciQxID0gY3JlYXRlQ3Vyc29yKE5PX0NPTlRFWFQpO1xudmFyIGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKE5PX0NPTlRFWFQpO1xudmFyIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKE5PX0NPTlRFWFQpO1xuXG5mdW5jdGlvbiByZXF1aXJlZENvbnRleHQoYykge1xuICAhKGMgIT09IE5PX0NPTlRFWFQpID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgaG9zdCBjb250ZXh0IHRvIGV4aXN0LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICByZXR1cm4gYztcbn1cblxuZnVuY3Rpb24gZ2V0Um9vdEhvc3RDb250YWluZXIoKSB7XG4gIHZhciByb290SW5zdGFuY2UgPSByZXF1aXJlZENvbnRleHQocm9vdEluc3RhbmNlU3RhY2tDdXJzb3IuY3VycmVudCk7XG4gIHJldHVybiByb290SW5zdGFuY2U7XG59XG5cbmZ1bmN0aW9uIHB1c2hIb3N0Q29udGFpbmVyKGZpYmVyLCBuZXh0Um9vdEluc3RhbmNlKSB7XG4gIC8vIFB1c2ggY3VycmVudCByb290IGluc3RhbmNlIG9udG8gdGhlIHN0YWNrO1xuICAvLyBUaGlzIGFsbG93cyB1cyB0byByZXNldCByb290IHdoZW4gcG9ydGFscyBhcmUgcG9wcGVkLlxuICBwdXNoKHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLCBuZXh0Um9vdEluc3RhbmNlLCBmaWJlcik7XG4gIC8vIFRyYWNrIHRoZSBjb250ZXh0IGFuZCB0aGUgRmliZXIgdGhhdCBwcm92aWRlZCBpdC5cbiAgLy8gVGhpcyBlbmFibGVzIHVzIHRvIHBvcCBvbmx5IEZpYmVycyB0aGF0IHByb3ZpZGUgdW5pcXVlIGNvbnRleHRzLlxuICBwdXNoKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlciwgZmliZXIpO1xuXG4gIC8vIEZpbmFsbHksIHdlIG5lZWQgdG8gcHVzaCB0aGUgaG9zdCBjb250ZXh0IHRvIHRoZSBzdGFjay5cbiAgLy8gSG93ZXZlciwgd2UgY2FuJ3QganVzdCBjYWxsIGdldFJvb3RIb3N0Q29udGV4dCgpIGFuZCBwdXNoIGl0IGJlY2F1c2VcbiAgLy8gd2UnZCBoYXZlIGEgZGlmZmVyZW50IG51bWJlciBvZiBlbnRyaWVzIG9uIHRoZSBzdGFjayBkZXBlbmRpbmcgb25cbiAgLy8gd2hldGhlciBnZXRSb290SG9zdENvbnRleHQoKSB0aHJvd3Mgc29tZXdoZXJlIGluIHJlbmRlcmVyIGNvZGUgb3Igbm90LlxuICAvLyBTbyB3ZSBwdXNoIGFuIGVtcHR5IHZhbHVlIGZpcnN0LiBUaGlzIGxldHMgdXMgc2FmZWx5IHVud2luZCBvbiBlcnJvcnMuXG4gIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yJDEsIE5PX0NPTlRFWFQsIGZpYmVyKTtcbiAgdmFyIG5leHRSb290Q29udGV4dCA9IGdldFJvb3RIb3N0Q29udGV4dChuZXh0Um9vdEluc3RhbmNlKTtcbiAgLy8gTm93IHRoYXQgd2Uga25vdyB0aGlzIGZ1bmN0aW9uIGRvZXNuJ3QgdGhyb3csIHJlcGxhY2UgaXQuXG4gIHBvcChjb250ZXh0U3RhY2tDdXJzb3IkMSwgZmliZXIpO1xuICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciQxLCBuZXh0Um9vdENvbnRleHQsIGZpYmVyKTtcbn1cblxuZnVuY3Rpb24gcG9wSG9zdENvbnRhaW5lcihmaWJlcikge1xuICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yJDEsIGZpYmVyKTtcbiAgcG9wKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlcik7XG4gIHBvcChyb290SW5zdGFuY2VTdGFja0N1cnNvciwgZmliZXIpO1xufVxuXG5mdW5jdGlvbiBnZXRIb3N0Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHQgPSByZXF1aXJlZENvbnRleHQoY29udGV4dFN0YWNrQ3Vyc29yJDEuY3VycmVudCk7XG4gIHJldHVybiBjb250ZXh0O1xufVxuXG5mdW5jdGlvbiBwdXNoSG9zdENvbnRleHQoZmliZXIpIHtcbiAgdmFyIHJvb3RJbnN0YW5jZSA9IHJlcXVpcmVkQ29udGV4dChyb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50KTtcbiAgdmFyIGNvbnRleHQgPSByZXF1aXJlZENvbnRleHQoY29udGV4dFN0YWNrQ3Vyc29yJDEuY3VycmVudCk7XG4gIHZhciBuZXh0Q29udGV4dCA9IGdldENoaWxkSG9zdENvbnRleHQoY29udGV4dCwgZmliZXIudHlwZSwgcm9vdEluc3RhbmNlKTtcblxuICAvLyBEb24ndCBwdXNoIHRoaXMgRmliZXIncyBjb250ZXh0IHVubGVzcyBpdCdzIHVuaXF1ZS5cbiAgaWYgKGNvbnRleHQgPT09IG5leHRDb250ZXh0KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVHJhY2sgdGhlIGNvbnRleHQgYW5kIHRoZSBGaWJlciB0aGF0IHByb3ZpZGVkIGl0LlxuICAvLyBUaGlzIGVuYWJsZXMgdXMgdG8gcG9wIG9ubHkgRmliZXJzIHRoYXQgcHJvdmlkZSB1bmlxdWUgY29udGV4dHMuXG4gIHB1c2goY29udGV4dEZpYmVyU3RhY2tDdXJzb3IsIGZpYmVyLCBmaWJlcik7XG4gIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yJDEsIG5leHRDb250ZXh0LCBmaWJlcik7XG59XG5cbmZ1bmN0aW9uIHBvcEhvc3RDb250ZXh0KGZpYmVyKSB7XG4gIC8vIERvIG5vdCBwb3AgdW5sZXNzIHRoaXMgRmliZXIgcHJvdmlkZWQgdGhlIGN1cnJlbnQgY29udGV4dC5cbiAgLy8gcHVzaEhvc3RDb250ZXh0KCkgb25seSBwdXNoZXMgRmliZXJzIHRoYXQgcHJvdmlkZSB1bmlxdWUgY29udGV4dHMuXG4gIGlmIChjb250ZXh0RmliZXJTdGFja0N1cnNvci5jdXJyZW50ICE9PSBmaWJlcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBvcChjb250ZXh0U3RhY2tDdXJzb3IkMSwgZmliZXIpO1xuICBwb3AoY29udGV4dEZpYmVyU3RhY2tDdXJzb3IsIGZpYmVyKTtcbn1cblxudmFyIGNvbW1pdFRpbWUgPSAwO1xudmFyIHByb2ZpbGVyU3RhcnRUaW1lID0gLTE7XG5cbmZ1bmN0aW9uIGdldENvbW1pdFRpbWUoKSB7XG4gIHJldHVybiBjb21taXRUaW1lO1xufVxuXG5mdW5jdGlvbiByZWNvcmRDb21taXRUaW1lKCkge1xuICBpZiAoIWVuYWJsZVByb2ZpbGVyVGltZXIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29tbWl0VGltZSA9IHNjaGVkdWxlci51bnN0YWJsZV9ub3coKTtcbn1cblxuZnVuY3Rpb24gc3RhcnRQcm9maWxlclRpbWVyKGZpYmVyKSB7XG4gIGlmICghZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByb2ZpbGVyU3RhcnRUaW1lID0gc2NoZWR1bGVyLnVuc3RhYmxlX25vdygpO1xuXG4gIGlmIChmaWJlci5hY3R1YWxTdGFydFRpbWUgPCAwKSB7XG4gICAgZmliZXIuYWN0dWFsU3RhcnRUaW1lID0gc2NoZWR1bGVyLnVuc3RhYmxlX25vdygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0b3BQcm9maWxlclRpbWVySWZSdW5uaW5nKGZpYmVyKSB7XG4gIGlmICghZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgIHJldHVybjtcbiAgfVxuICBwcm9maWxlclN0YXJ0VGltZSA9IC0xO1xufVxuXG5mdW5jdGlvbiBzdG9wUHJvZmlsZXJUaW1lcklmUnVubmluZ0FuZFJlY29yZERlbHRhKGZpYmVyLCBvdmVycmlkZUJhc2VUaW1lKSB7XG4gIGlmICghZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChwcm9maWxlclN0YXJ0VGltZSA+PSAwKSB7XG4gICAgdmFyIGVsYXBzZWRUaW1lID0gc2NoZWR1bGVyLnVuc3RhYmxlX25vdygpIC0gcHJvZmlsZXJTdGFydFRpbWU7XG4gICAgZmliZXIuYWN0dWFsRHVyYXRpb24gKz0gZWxhcHNlZFRpbWU7XG4gICAgaWYgKG92ZXJyaWRlQmFzZVRpbWUpIHtcbiAgICAgIGZpYmVyLnNlbGZCYXNlRHVyYXRpb24gPSBlbGFwc2VkVGltZTtcbiAgICB9XG4gICAgcHJvZmlsZXJTdGFydFRpbWUgPSAtMTtcbiAgfVxufVxuXG52YXIgUmVhY3RDdXJyZW50T3duZXIkNCA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0Q3VycmVudE93bmVyO1xuXG5mdW5jdGlvbiByZWFkQ29udGV4dCQxKGNvbnRleHRUeXBlKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50T3duZXIkNC5jdXJyZW50RGlzcGF0Y2hlcjtcbiAgcmV0dXJuIGRpc3BhdGNoZXIucmVhZENvbnRleHQoY29udGV4dFR5cGUpO1xufVxuXG52YXIgZmFrZUludGVybmFsSW5zdGFuY2UgPSB7fTtcbnZhciBpc0FycmF5JDEgPSBBcnJheS5pc0FycmF5O1xuXG4vLyBSZWFjdC5Db21wb25lbnQgdXNlcyBhIHNoYXJlZCBmcm96ZW4gb2JqZWN0IGJ5IGRlZmF1bHQuXG4vLyBXZSdsbCB1c2UgaXQgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgd2UgbmVlZCB0byBpbml0aWFsaXplIGxlZ2FjeSByZWZzLlxudmFyIGVtcHR5UmVmc09iamVjdCA9IG5ldyBSZWFjdC5Db21wb25lbnQoKS5yZWZzO1xuXG52YXIgZGlkV2FybkFib3V0U3RhdGVBc3NpZ25tZW50Rm9yQ29tcG9uZW50ID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dFVuaW5pdGlhbGl6ZWRTdGF0ZSA9IHZvaWQgMDtcbnZhciBkaWRXYXJuQWJvdXRHZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZVdpdGhvdXREaWRVcGRhdGUgPSB2b2lkIDA7XG52YXIgZGlkV2FybkFib3V0TGVnYWN5TGlmZWN5Y2xlc0FuZERlcml2ZWRTdGF0ZSA9IHZvaWQgMDtcbnZhciBkaWRXYXJuQWJvdXRVbmRlZmluZWREZXJpdmVkU3RhdGUgPSB2b2lkIDA7XG52YXIgd2Fybk9uVW5kZWZpbmVkRGVyaXZlZFN0YXRlID0gdm9pZCAwO1xudmFyIHdhcm5PbkludmFsaWRDYWxsYmFjayQxID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dERpcmVjdGx5QXNzaWduaW5nUHJvcHNUb1N0YXRlID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dENvbnRleHRUeXBlQW5kQ29udGV4dFR5cGVzID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dEludmFsaWRhdGVDb250ZXh0VHlwZSA9IHZvaWQgMDtcblxue1xuICBkaWRXYXJuQWJvdXRTdGF0ZUFzc2lnbm1lbnRGb3JDb21wb25lbnQgPSBuZXcgU2V0KCk7XG4gIGRpZFdhcm5BYm91dFVuaW5pdGlhbGl6ZWRTdGF0ZSA9IG5ldyBTZXQoKTtcbiAgZGlkV2FybkFib3V0R2V0U25hcHNob3RCZWZvcmVVcGRhdGVXaXRob3V0RGlkVXBkYXRlID0gbmV3IFNldCgpO1xuICBkaWRXYXJuQWJvdXRMZWdhY3lMaWZlY3ljbGVzQW5kRGVyaXZlZFN0YXRlID0gbmV3IFNldCgpO1xuICBkaWRXYXJuQWJvdXREaXJlY3RseUFzc2lnbmluZ1Byb3BzVG9TdGF0ZSA9IG5ldyBTZXQoKTtcbiAgZGlkV2FybkFib3V0VW5kZWZpbmVkRGVyaXZlZFN0YXRlID0gbmV3IFNldCgpO1xuICBkaWRXYXJuQWJvdXRDb250ZXh0VHlwZUFuZENvbnRleHRUeXBlcyA9IG5ldyBTZXQoKTtcbiAgZGlkV2FybkFib3V0SW52YWxpZGF0ZUNvbnRleHRUeXBlID0gbmV3IFNldCgpO1xuXG4gIHZhciBkaWRXYXJuT25JbnZhbGlkQ2FsbGJhY2sgPSBuZXcgU2V0KCk7XG5cbiAgd2Fybk9uSW52YWxpZENhbGxiYWNrJDEgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGNhbGxlck5hbWUpIHtcbiAgICBpZiAoY2FsbGJhY2sgPT09IG51bGwgfHwgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBrZXkgPSBjYWxsZXJOYW1lICsgJ18nICsgY2FsbGJhY2s7XG4gICAgaWYgKCFkaWRXYXJuT25JbnZhbGlkQ2FsbGJhY2suaGFzKGtleSkpIHtcbiAgICAgIGRpZFdhcm5PbkludmFsaWRDYWxsYmFjay5hZGQoa2V5KTtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzKC4uLik6IEV4cGVjdGVkIHRoZSBsYXN0IG9wdGlvbmFsIGBjYWxsYmFja2AgYXJndW1lbnQgdG8gYmUgYSAnICsgJ2Z1bmN0aW9uLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcy4nLCBjYWxsZXJOYW1lLCBjYWxsYmFjayk7XG4gICAgfVxuICB9O1xuXG4gIHdhcm5PblVuZGVmaW5lZERlcml2ZWRTdGF0ZSA9IGZ1bmN0aW9uICh0eXBlLCBwYXJ0aWFsU3RhdGUpIHtcbiAgICBpZiAocGFydGlhbFN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZSh0eXBlKSB8fCAnQ29tcG9uZW50JztcbiAgICAgIGlmICghZGlkV2FybkFib3V0VW5kZWZpbmVkRGVyaXZlZFN0YXRlLmhhcyhjb21wb25lbnROYW1lKSkge1xuICAgICAgICBkaWRXYXJuQWJvdXRVbmRlZmluZWREZXJpdmVkU3RhdGUuYWRkKGNvbXBvbmVudE5hbWUpO1xuICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKTogQSB2YWxpZCBzdGF0ZSBvYmplY3QgKG9yIG51bGwpIG11c3QgYmUgcmV0dXJuZWQuICcgKyAnWW91IGhhdmUgcmV0dXJuZWQgdW5kZWZpbmVkLicsIGNvbXBvbmVudE5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBUaGlzIGlzIHNvIGdyb3NzIGJ1dCBpdCdzIGF0IGxlYXN0IG5vbi1jcml0aWNhbCBhbmQgY2FuIGJlIHJlbW92ZWQgaWZcbiAgLy8gaXQgY2F1c2VzIHByb2JsZW1zLiBUaGlzIGlzIG1lYW50IHRvIGdpdmUgYSBuaWNlciBlcnJvciBtZXNzYWdlIGZvclxuICAvLyBSZWFjdERPTTE1LnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHJlYWN0RE9NMTZDb21wb25lbnQsXG4gIC8vIC4uLikpIHdoaWNoIG90aGVyd2lzZSB0aHJvd3MgYSBcIl9wcm9jZXNzQ2hpbGRDb250ZXh0IGlzIG5vdCBhIGZ1bmN0aW9uXCJcbiAgLy8gZXhjZXB0aW9uLlxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZmFrZUludGVybmFsSW5zdGFuY2UsICdfcHJvY2Vzc0NoaWxkQ29udGV4dCcsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgaW52YXJpYW50KGZhbHNlLCAnX3Byb2Nlc3NDaGlsZENvbnRleHQgaXMgbm90IGF2YWlsYWJsZSBpbiBSZWFjdCAxNisuIFRoaXMgbGlrZWx5IG1lYW5zIHlvdSBoYXZlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBhbmQgYXJlIGF0dGVtcHRpbmcgdG8gbmVzdCBhIFJlYWN0IDE1IHRyZWUgaW5zaWRlIGEgUmVhY3QgMTYgdHJlZSB1c2luZyB1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciwgd2hpY2ggaXNuXFwndCBzdXBwb3J0ZWQuIFRyeSB0byBtYWtlIHN1cmUgeW91IGhhdmUgb25seSBvbmUgY29weSBvZiBSZWFjdCAoYW5kIGlkZWFsbHksIHN3aXRjaCB0byBSZWFjdERPTS5jcmVhdGVQb3J0YWwpLicpO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5mcmVlemUoZmFrZUludGVybmFsSW5zdGFuY2UpO1xufVxuXG5mdW5jdGlvbiBhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyh3b3JrSW5Qcm9ncmVzcywgY3RvciwgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLCBuZXh0UHJvcHMpIHtcbiAgdmFyIHByZXZTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG5cbiAge1xuICAgIGlmIChkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHMgfHwgZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzRm9yU3RyaWN0TW9kZSAmJiB3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0TW9kZSkge1xuICAgICAgLy8gSW52b2tlIHRoZSBmdW5jdGlvbiBhbiBleHRyYSB0aW1lIHRvIGhlbHAgZGV0ZWN0IHNpZGUtZWZmZWN0cy5cbiAgICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBhcnRpYWxTdGF0ZSA9IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG5cbiAge1xuICAgIHdhcm5PblVuZGVmaW5lZERlcml2ZWRTdGF0ZShjdG9yLCBwYXJ0aWFsU3RhdGUpO1xuICB9XG4gIC8vIE1lcmdlIHRoZSBwYXJ0aWFsIHN0YXRlIGFuZCB0aGUgcHJldmlvdXMgc3RhdGUuXG4gIHZhciBtZW1vaXplZFN0YXRlID0gcGFydGlhbFN0YXRlID09PSBudWxsIHx8IHBhcnRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkID8gcHJldlN0YXRlIDogX2Fzc2lnbih7fSwgcHJldlN0YXRlLCBwYXJ0aWFsU3RhdGUpO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbWVtb2l6ZWRTdGF0ZTtcblxuICAvLyBPbmNlIHRoZSB1cGRhdGUgcXVldWUgaXMgZW1wdHksIHBlcnNpc3QgdGhlIGRlcml2ZWQgc3RhdGUgb250byB0aGVcbiAgLy8gYmFzZSBzdGF0ZS5cbiAgdmFyIHVwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gIGlmICh1cGRhdGVRdWV1ZSAhPT0gbnVsbCAmJiB3b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrKSB7XG4gICAgdXBkYXRlUXVldWUuYmFzZVN0YXRlID0gbWVtb2l6ZWRTdGF0ZTtcbiAgfVxufVxuXG52YXIgY2xhc3NDb21wb25lbnRVcGRhdGVyID0ge1xuICBpc01vdW50ZWQ6IGlzTW91bnRlZCxcbiAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbiAoaW5zdCwgcGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICB2YXIgZmliZXIgPSBnZXQoaW5zdCk7XG4gICAgdmFyIGN1cnJlbnRUaW1lID0gcmVxdWVzdEN1cnJlbnRUaW1lKCk7XG4gICAgdmFyIGV4cGlyYXRpb25UaW1lID0gY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcihjdXJyZW50VGltZSwgZmliZXIpO1xuXG4gICAgdmFyIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShleHBpcmF0aW9uVGltZSk7XG4gICAgdXBkYXRlLnBheWxvYWQgPSBwYXlsb2FkO1xuICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkICYmIGNhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB7XG4gICAgICAgIHdhcm5PbkludmFsaWRDYWxsYmFjayQxKGNhbGxiYWNrLCAnc2V0U3RhdGUnKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZS5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGVucXVldWVVcGRhdGUoZmliZXIsIHVwZGF0ZSk7XG4gICAgc2NoZWR1bGVXb3JrKGZpYmVyLCBleHBpcmF0aW9uVGltZSk7XG4gIH0sXG4gIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIChpbnN0LCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIHZhciBmaWJlciA9IGdldChpbnN0KTtcbiAgICB2YXIgY3VycmVudFRpbWUgPSByZXF1ZXN0Q3VycmVudFRpbWUoKTtcbiAgICB2YXIgZXhwaXJhdGlvblRpbWUgPSBjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyKGN1cnJlbnRUaW1lLCBmaWJlcik7XG5cbiAgICB2YXIgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGV4cGlyYXRpb25UaW1lKTtcbiAgICB1cGRhdGUudGFnID0gUmVwbGFjZVN0YXRlO1xuICAgIHVwZGF0ZS5wYXlsb2FkID0gcGF5bG9hZDtcblxuICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkICYmIGNhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB7XG4gICAgICAgIHdhcm5PbkludmFsaWRDYWxsYmFjayQxKGNhbGxiYWNrLCAncmVwbGFjZVN0YXRlJyk7XG4gICAgICB9XG4gICAgICB1cGRhdGUuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGZpYmVyLCB1cGRhdGUpO1xuICAgIHNjaGVkdWxlV29yayhmaWJlciwgZXhwaXJhdGlvblRpbWUpO1xuICB9LFxuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChpbnN0LCBjYWxsYmFjaykge1xuICAgIHZhciBmaWJlciA9IGdldChpbnN0KTtcbiAgICB2YXIgY3VycmVudFRpbWUgPSByZXF1ZXN0Q3VycmVudFRpbWUoKTtcbiAgICB2YXIgZXhwaXJhdGlvblRpbWUgPSBjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyKGN1cnJlbnRUaW1lLCBmaWJlcik7XG5cbiAgICB2YXIgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGV4cGlyYXRpb25UaW1lKTtcbiAgICB1cGRhdGUudGFnID0gRm9yY2VVcGRhdGU7XG5cbiAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCAmJiBjYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAge1xuICAgICAgICB3YXJuT25JbnZhbGlkQ2FsbGJhY2skMShjYWxsYmFjaywgJ2ZvcmNlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgICB1cGRhdGUuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGZpYmVyLCB1cGRhdGUpO1xuICAgIHNjaGVkdWxlV29yayhmaWJlciwgZXhwaXJhdGlvblRpbWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgY3Rvciwgb2xkUHJvcHMsIG5ld1Byb3BzLCBvbGRTdGF0ZSwgbmV3U3RhdGUsIG5leHRDb250ZXh0KSB7XG4gIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgaWYgKHR5cGVvZiBpbnN0YW5jZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzdGFydFBoYXNlVGltZXIod29ya0luUHJvZ3Jlc3MsICdzaG91bGRDb21wb25lbnRVcGRhdGUnKTtcbiAgICB2YXIgc2hvdWxkVXBkYXRlID0gaW5zdGFuY2Uuc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5ld1Byb3BzLCBuZXdTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgIHN0b3BQaGFzZVRpbWVyKCk7XG5cbiAgICB7XG4gICAgICAhKHNob3VsZFVwZGF0ZSAhPT0gdW5kZWZpbmVkKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzLnNob3VsZENvbXBvbmVudFVwZGF0ZSgpOiBSZXR1cm5lZCB1bmRlZmluZWQgaW5zdGVhZCBvZiBhICcgKyAnYm9vbGVhbiB2YWx1ZS4gTWFrZSBzdXJlIHRvIHJldHVybiB0cnVlIG9yIGZhbHNlLicsIGdldENvbXBvbmVudE5hbWUoY3RvcikgfHwgJ0NvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiBzaG91bGRVcGRhdGU7XG4gIH1cblxuICBpZiAoY3Rvci5wcm90b3R5cGUgJiYgY3Rvci5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQpIHtcbiAgICByZXR1cm4gIXNoYWxsb3dFcXVhbChvbGRQcm9wcywgbmV3UHJvcHMpIHx8ICFzaGFsbG93RXF1YWwob2xkU3RhdGUsIG5ld1N0YXRlKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjaGVja0NsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIGN0b3IsIG5ld1Byb3BzKSB7XG4gIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAge1xuICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjdG9yKSB8fCAnQ29tcG9uZW50JztcbiAgICB2YXIgcmVuZGVyUHJlc2VudCA9IGluc3RhbmNlLnJlbmRlcjtcblxuICAgIGlmICghcmVuZGVyUHJlc2VudCkge1xuICAgICAgaWYgKGN0b3IucHJvdG90eXBlICYmIHR5cGVvZiBjdG9yLnByb3RvdHlwZS5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMoLi4uKTogTm8gYHJlbmRlcmAgbWV0aG9kIGZvdW5kIG9uIHRoZSByZXR1cm5lZCBjb21wb25lbnQgJyArICdpbnN0YW5jZTogZGlkIHlvdSBhY2NpZGVudGFsbHkgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHRoZSBjb25zdHJ1Y3Rvcj8nLCBuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzKC4uLik6IE5vIGByZW5kZXJgIG1ldGhvZCBmb3VuZCBvbiB0aGUgcmV0dXJuZWQgY29tcG9uZW50ICcgKyAnaW5zdGFuY2U6IHlvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gZGVmaW5lIGByZW5kZXJgLicsIG5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBub0dldEluaXRpYWxTdGF0ZU9uRVM2ID0gIWluc3RhbmNlLmdldEluaXRpYWxTdGF0ZSB8fCBpbnN0YW5jZS5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQgfHwgaW5zdGFuY2Uuc3RhdGU7XG4gICAgIW5vR2V0SW5pdGlhbFN0YXRlT25FUzYgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdnZXRJbml0aWFsU3RhdGUgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gJyArICdUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuICcgKyAnRGlkIHlvdSBtZWFuIHRvIGRlZmluZSBhIHN0YXRlIHByb3BlcnR5IGluc3RlYWQ/JywgbmFtZSkgOiB2b2lkIDA7XG4gICAgdmFyIG5vR2V0RGVmYXVsdFByb3BzT25FUzYgPSAhaW5zdGFuY2UuZ2V0RGVmYXVsdFByb3BzIHx8IGluc3RhbmNlLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZDtcbiAgICAhbm9HZXREZWZhdWx0UHJvcHNPbkVTNiA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ2dldERlZmF1bHRQcm9wcyB3YXMgZGVmaW5lZCBvbiAlcywgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzLiAnICsgJ1RoaXMgaXMgb25seSBzdXBwb3J0ZWQgZm9yIGNsYXNzZXMgY3JlYXRlZCB1c2luZyBSZWFjdC5jcmVhdGVDbGFzcy4gJyArICdVc2UgYSBzdGF0aWMgcHJvcGVydHkgdG8gZGVmaW5lIGRlZmF1bHRQcm9wcyBpbnN0ZWFkLicsIG5hbWUpIDogdm9pZCAwO1xuICAgIHZhciBub0luc3RhbmNlUHJvcFR5cGVzID0gIWluc3RhbmNlLnByb3BUeXBlcztcbiAgICAhbm9JbnN0YW5jZVByb3BUeXBlcyA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ3Byb3BUeXBlcyB3YXMgZGVmaW5lZCBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBvbiAlcy4gVXNlIGEgc3RhdGljICcgKyAncHJvcGVydHkgdG8gZGVmaW5lIHByb3BUeXBlcyBpbnN0ZWFkLicsIG5hbWUpIDogdm9pZCAwO1xuICAgIHZhciBub0luc3RhbmNlQ29udGV4dFR5cGUgPSAhaW5zdGFuY2UuY29udGV4dFR5cGU7XG4gICAgIW5vSW5zdGFuY2VDb250ZXh0VHlwZSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ2NvbnRleHRUeXBlIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSBzdGF0aWMgJyArICdwcm9wZXJ0eSB0byBkZWZpbmUgY29udGV4dFR5cGUgaW5zdGVhZC4nLCBuYW1lKSA6IHZvaWQgMDtcbiAgICB2YXIgbm9JbnN0YW5jZUNvbnRleHRUeXBlcyA9ICFpbnN0YW5jZS5jb250ZXh0VHlwZXM7XG4gICAgIW5vSW5zdGFuY2VDb250ZXh0VHlwZXMgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdjb250ZXh0VHlwZXMgd2FzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMuIFVzZSBhIHN0YXRpYyAnICsgJ3Byb3BlcnR5IHRvIGRlZmluZSBjb250ZXh0VHlwZXMgaW5zdGVhZC4nLCBuYW1lKSA6IHZvaWQgMDtcblxuICAgIGlmIChjdG9yLmNvbnRleHRUeXBlICYmIGN0b3IuY29udGV4dFR5cGVzICYmICFkaWRXYXJuQWJvdXRDb250ZXh0VHlwZUFuZENvbnRleHRUeXBlcy5oYXMoY3RvcikpIHtcbiAgICAgIGRpZFdhcm5BYm91dENvbnRleHRUeXBlQW5kQ29udGV4dFR5cGVzLmFkZChjdG9yKTtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzIGRlY2xhcmVzIGJvdGggY29udGV4dFR5cGVzIGFuZCBjb250ZXh0VHlwZSBzdGF0aWMgcHJvcGVydGllcy4gJyArICdUaGUgbGVnYWN5IGNvbnRleHRUeXBlcyBwcm9wZXJ0eSB3aWxsIGJlIGlnbm9yZWQuJywgbmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIG5vQ29tcG9uZW50U2hvdWxkVXBkYXRlID0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFNob3VsZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJztcbiAgICAhbm9Db21wb25lbnRTaG91bGRVcGRhdGUgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArICdUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgJyArICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nLCBuYW1lKSA6IHZvaWQgMDtcbiAgICBpZiAoY3Rvci5wcm90b3R5cGUgJiYgY3Rvci5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQgJiYgdHlwZW9mIGluc3RhbmNlLnNob3VsZENvbXBvbmVudFVwZGF0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkuICcgKyAnc2hvdWxkQ29tcG9uZW50VXBkYXRlIHNob3VsZCBub3QgYmUgdXNlZCB3aGVuIGV4dGVuZGluZyBSZWFjdC5QdXJlQ29tcG9uZW50LiAnICsgJ1BsZWFzZSBleHRlbmQgUmVhY3QuQ29tcG9uZW50IGlmIHNob3VsZENvbXBvbmVudFVwZGF0ZSBpcyB1c2VkLicsIGdldENvbXBvbmVudE5hbWUoY3RvcikgfHwgJ0EgcHVyZSBjb21wb25lbnQnKTtcbiAgICB9XG4gICAgdmFyIG5vQ29tcG9uZW50RGlkVW5tb3VudCA9IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRVbm1vdW50ICE9PSAnZnVuY3Rpb24nO1xuICAgICFub0NvbXBvbmVudERpZFVubW91bnQgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50RGlkVW5tb3VudCgpLiBCdXQgdGhlcmUgaXMgbm8gc3VjaCBsaWZlY3ljbGUgbWV0aG9kLiAnICsgJ0RpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsVW5tb3VudCgpPycsIG5hbWUpIDogdm9pZCAwO1xuICAgIHZhciBub0NvbXBvbmVudERpZFJlY2VpdmVQcm9wcyA9IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRSZWNlaXZlUHJvcHMgIT09ICdmdW5jdGlvbic7XG4gICAgIW5vQ29tcG9uZW50RGlkUmVjZWl2ZVByb3BzID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudERpZFJlY2VpdmVQcm9wcygpLiBCdXQgdGhlcmUgaXMgbm8gc3VjaCBsaWZlY3ljbGUgbWV0aG9kLiAnICsgJ0lmIHlvdSBtZWFudCB0byB1cGRhdGUgdGhlIHN0YXRlIGluIHJlc3BvbnNlIHRvIGNoYW5naW5nIHByb3BzLCAnICsgJ3VzZSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCkuIElmIHlvdSBtZWFudCB0byBmZXRjaCBkYXRhIG9yICcgKyAncnVuIHNpZGUtZWZmZWN0cyBvciBtdXRhdGlvbnMgYWZ0ZXIgUmVhY3QgaGFzIHVwZGF0ZWQgdGhlIFVJLCB1c2UgY29tcG9uZW50RGlkVXBkYXRlKCkuJywgbmFtZSkgOiB2b2lkIDA7XG4gICAgdmFyIG5vQ29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyA9IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzICE9PSAnZnVuY3Rpb24nO1xuICAgICFub0NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcygpLiBEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpPycsIG5hbWUpIDogdm9pZCAwO1xuICAgIHZhciBub1Vuc2FmZUNvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMgPSB0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMgIT09ICdmdW5jdGlvbic7XG4gICAgIW5vVW5zYWZlQ29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdVTlNBRkVfY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcygpLiBEaWQgeW91IG1lYW4gVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKT8nLCBuYW1lKSA6IHZvaWQgMDtcbiAgICB2YXIgaGFzTXV0YXRlZFByb3BzID0gaW5zdGFuY2UucHJvcHMgIT09IG5ld1Byb3BzO1xuICAgICEoaW5zdGFuY2UucHJvcHMgPT09IHVuZGVmaW5lZCB8fCAhaGFzTXV0YXRlZFByb3BzKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzKC4uLik6IFdoZW4gY2FsbGluZyBzdXBlcigpIGluIGAlc2AsIG1ha2Ugc3VyZSB0byBwYXNzICcgKyBcInVwIHRoZSBzYW1lIHByb3BzIHRoYXQgeW91ciBjb21wb25lbnQncyBjb25zdHJ1Y3RvciB3YXMgcGFzc2VkLlwiLCBuYW1lLCBuYW1lKSA6IHZvaWQgMDtcbiAgICB2YXIgbm9JbnN0YW5jZURlZmF1bHRQcm9wcyA9ICFpbnN0YW5jZS5kZWZhdWx0UHJvcHM7XG4gICAgIW5vSW5zdGFuY2VEZWZhdWx0UHJvcHMgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdTZXR0aW5nIGRlZmF1bHRQcm9wcyBhcyBhbiBpbnN0YW5jZSBwcm9wZXJ0eSBvbiAlcyBpcyBub3Qgc3VwcG9ydGVkIGFuZCB3aWxsIGJlIGlnbm9yZWQuJyArICcgSW5zdGVhZCwgZGVmaW5lIGRlZmF1bHRQcm9wcyBhcyBhIHN0YXRpYyBwcm9wZXJ0eSBvbiAlcy4nLCBuYW1lLCBuYW1lKSA6IHZvaWQgMDtcblxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJyAmJiAhZGlkV2FybkFib3V0R2V0U25hcHNob3RCZWZvcmVVcGRhdGVXaXRob3V0RGlkVXBkYXRlLmhhcyhjdG9yKSkge1xuICAgICAgZGlkV2FybkFib3V0R2V0U25hcHNob3RCZWZvcmVVcGRhdGVXaXRob3V0RGlkVXBkYXRlLmFkZChjdG9yKTtcbiAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzOiBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIHNob3VsZCBiZSB1c2VkIHdpdGggY29tcG9uZW50RGlkVXBkYXRlKCkuICcgKyAnVGhpcyBjb21wb25lbnQgZGVmaW5lcyBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIG9ubHkuJywgZ2V0Q29tcG9uZW50TmFtZShjdG9yKSk7XG4gICAgfVxuXG4gICAgdmFyIG5vSW5zdGFuY2VHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSB0eXBlb2YgaW5zdGFuY2UuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICE9PSAnZnVuY3Rpb24nO1xuICAgICFub0luc3RhbmNlR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXM6IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpIGlzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgbWV0aG9kICcgKyAnYW5kIHdpbGwgYmUgaWdub3JlZC4gSW5zdGVhZCwgZGVjbGFyZSBpdCBhcyBhIHN0YXRpYyBtZXRob2QuJywgbmFtZSkgOiB2b2lkIDA7XG4gICAgdmFyIG5vSW5zdGFuY2VHZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2ggPSB0eXBlb2YgaW5zdGFuY2UuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yICE9PSAnZnVuY3Rpb24nO1xuICAgICFub0luc3RhbmNlR2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXM6IGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcigpIGlzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgbWV0aG9kICcgKyAnYW5kIHdpbGwgYmUgaWdub3JlZC4gSW5zdGVhZCwgZGVjbGFyZSBpdCBhcyBhIHN0YXRpYyBtZXRob2QuJywgbmFtZSkgOiB2b2lkIDA7XG4gICAgdmFyIG5vU3RhdGljR2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPSB0eXBlb2YgY3Rvci5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJztcbiAgICAhbm9TdGF0aWNHZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzOiBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIGlzIGRlZmluZWQgYXMgYSBzdGF0aWMgbWV0aG9kICcgKyAnYW5kIHdpbGwgYmUgaWdub3JlZC4gSW5zdGVhZCwgZGVjbGFyZSBpdCBhcyBhbiBpbnN0YW5jZSBtZXRob2QuJywgbmFtZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9zdGF0ZSA9IGluc3RhbmNlLnN0YXRlO1xuICAgIGlmIChfc3RhdGUgJiYgKHR5cGVvZiBfc3RhdGUgIT09ICdvYmplY3QnIHx8IGlzQXJyYXkkMShfc3RhdGUpKSkge1xuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMuc3RhdGU6IG11c3QgYmUgc2V0IHRvIGFuIG9iamVjdCBvciBudWxsJywgbmFtZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuZ2V0Q2hpbGRDb250ZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAhKHR5cGVvZiBjdG9yLmNoaWxkQ29udGV4dFR5cGVzID09PSAnb2JqZWN0JykgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcy5nZXRDaGlsZENvbnRleHQoKTogY2hpbGRDb250ZXh0VHlwZXMgbXVzdCBiZSBkZWZpbmVkIGluIG9yZGVyIHRvICcgKyAndXNlIGdldENoaWxkQ29udGV4dCgpLicsIG5hbWUpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZG9wdENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnVwZGF0ZXIgPSBjbGFzc0NvbXBvbmVudFVwZGF0ZXI7XG4gIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGluc3RhbmNlO1xuICAvLyBUaGUgaW5zdGFuY2UgbmVlZHMgYWNjZXNzIHRvIHRoZSBmaWJlciBzbyB0aGF0IGl0IGNhbiBzY2hlZHVsZSB1cGRhdGVzXG4gIHNldChpbnN0YW5jZSwgd29ya0luUHJvZ3Jlc3MpO1xuICB7XG4gICAgaW5zdGFuY2UuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSA9IGZha2VJbnRlcm5hbEluc3RhbmNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIGN0b3IsIHByb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICB2YXIgaXNMZWdhY3lDb250ZXh0Q29uc3VtZXIgPSBmYWxzZTtcbiAgdmFyIHVubWFza2VkQ29udGV4dCA9IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgdmFyIGNvbnRleHQgPSBudWxsO1xuICB2YXIgY29udGV4dFR5cGUgPSBjdG9yLmNvbnRleHRUeXBlO1xuICBpZiAodHlwZW9mIGNvbnRleHRUeXBlID09PSAnb2JqZWN0JyAmJiBjb250ZXh0VHlwZSAhPT0gbnVsbCkge1xuICAgIHtcbiAgICAgIGlmIChjb250ZXh0VHlwZS4kJHR5cGVvZiAhPT0gUkVBQ1RfQ09OVEVYVF9UWVBFICYmICFkaWRXYXJuQWJvdXRJbnZhbGlkYXRlQ29udGV4dFR5cGUuaGFzKGN0b3IpKSB7XG4gICAgICAgIGRpZFdhcm5BYm91dEludmFsaWRhdGVDb250ZXh0VHlwZS5hZGQoY3Rvcik7XG4gICAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJyVzIGRlZmluZXMgYW4gaW52YWxpZCBjb250ZXh0VHlwZS4gJyArICdjb250ZXh0VHlwZSBzaG91bGQgcG9pbnQgdG8gdGhlIENvbnRleHQgb2JqZWN0IHJldHVybmVkIGJ5IFJlYWN0LmNyZWF0ZUNvbnRleHQoKS4gJyArICdEaWQgeW91IGFjY2lkZW50YWxseSBwYXNzIHRoZSBDb250ZXh0LlByb3ZpZGVyIGluc3RlYWQ/JywgZ2V0Q29tcG9uZW50TmFtZShjdG9yKSB8fCAnQ29tcG9uZW50Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29udGV4dCA9IHJlYWRDb250ZXh0JDEoY29udGV4dFR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHVubWFza2VkQ29udGV4dCA9IGdldFVubWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgY3RvciwgdHJ1ZSk7XG4gICAgdmFyIGNvbnRleHRUeXBlcyA9IGN0b3IuY29udGV4dFR5cGVzO1xuICAgIGlzTGVnYWN5Q29udGV4dENvbnN1bWVyID0gY29udGV4dFR5cGVzICE9PSBudWxsICYmIGNvbnRleHRUeXBlcyAhPT0gdW5kZWZpbmVkO1xuICAgIGNvbnRleHQgPSBpc0xlZ2FjeUNvbnRleHRDb25zdW1lciA/IGdldE1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCkgOiBlbXB0eUNvbnRleHRPYmplY3Q7XG4gIH1cblxuICAvLyBJbnN0YW50aWF0ZSB0d2ljZSB0byBoZWxwIGRldGVjdCBzaWRlLWVmZmVjdHMuXG4gIHtcbiAgICBpZiAoZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzIHx8IGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0c0ZvclN0cmljdE1vZGUgJiYgd29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdE1vZGUpIHtcbiAgICAgIG5ldyBjdG9yKHByb3BzLCBjb250ZXh0KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9XG4gIH1cblxuICB2YXIgaW5zdGFuY2UgPSBuZXcgY3Rvcihwcm9wcywgY29udGV4dCk7XG4gIHZhciBzdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBpbnN0YW5jZS5zdGF0ZSAhPT0gbnVsbCAmJiBpbnN0YW5jZS5zdGF0ZSAhPT0gdW5kZWZpbmVkID8gaW5zdGFuY2Uuc3RhdGUgOiBudWxsO1xuICBhZG9wdENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlKTtcblxuICB7XG4gICAgaWYgKHR5cGVvZiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyAmJiBzdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKGN0b3IpIHx8ICdDb21wb25lbnQnO1xuICAgICAgaWYgKCFkaWRXYXJuQWJvdXRVbmluaXRpYWxpemVkU3RhdGUuaGFzKGNvbXBvbmVudE5hbWUpKSB7XG4gICAgICAgIGRpZFdhcm5BYm91dFVuaW5pdGlhbGl6ZWRTdGF0ZS5hZGQoY29tcG9uZW50TmFtZSk7XG4gICAgICAgIHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ2Alc2AgdXNlcyBgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzYCBidXQgaXRzIGluaXRpYWwgc3RhdGUgaXMgJyArICclcy4gVGhpcyBpcyBub3QgcmVjb21tZW5kZWQuIEluc3RlYWQsIGRlZmluZSB0aGUgaW5pdGlhbCBzdGF0ZSBieSAnICsgJ2Fzc2lnbmluZyBhbiBvYmplY3QgdG8gYHRoaXMuc3RhdGVgIGluIHRoZSBjb25zdHJ1Y3RvciBvZiBgJXNgLiAnICsgJ1RoaXMgZW5zdXJlcyB0aGF0IGBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNgIGFyZ3VtZW50cyBoYXZlIGEgY29uc2lzdGVudCBzaGFwZS4nLCBjb21wb25lbnROYW1lLCBpbnN0YW5jZS5zdGF0ZSA9PT0gbnVsbCA/ICdudWxsJyA6ICd1bmRlZmluZWQnLCBjb21wb25lbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBuZXcgY29tcG9uZW50IEFQSXMgYXJlIGRlZmluZWQsIFwidW5zYWZlXCIgbGlmZWN5Y2xlcyB3b24ndCBiZSBjYWxsZWQuXG4gICAgLy8gV2FybiBhYm91dCB0aGVzZSBsaWZlY3ljbGVzIGlmIHRoZXkgYXJlIHByZXNlbnQuXG4gICAgLy8gRG9uJ3Qgd2FybiBhYm91dCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIG1ldGhvZHMgdGhvdWdoLlxuICAgIGlmICh0eXBlb2YgY3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGluc3RhbmNlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgZm91bmRXaWxsTW91bnROYW1lID0gbnVsbDtcbiAgICAgIHZhciBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gbnVsbDtcbiAgICAgIHZhciBmb3VuZFdpbGxVcGRhdGVOYW1lID0gbnVsbDtcbiAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nICYmIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nICE9PSB0cnVlKSB7XG4gICAgICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdjb21wb25lbnRXaWxsTW91bnQnO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCc7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicgJiYgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcy5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nICE9PSB0cnVlKSB7XG4gICAgICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgIT09IHRydWUpIHtcbiAgICAgICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdjb21wb25lbnRXaWxsVXBkYXRlJztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICAgICAgfVxuICAgICAgaWYgKGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCB8fCBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsIHx8IGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIF9jb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjdG9yKSB8fCAnQ29tcG9uZW50JztcbiAgICAgICAgdmFyIG5ld0FwaU5hbWUgPSB0eXBlb2YgY3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicgPyAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKCknIDogJ2dldFNuYXBzaG90QmVmb3JlVXBkYXRlKCknO1xuICAgICAgICBpZiAoIWRpZFdhcm5BYm91dExlZ2FjeUxpZmVjeWNsZXNBbmREZXJpdmVkU3RhdGUuaGFzKF9jb21wb25lbnROYW1lKSkge1xuICAgICAgICAgIGRpZFdhcm5BYm91dExlZ2FjeUxpZmVjeWNsZXNBbmREZXJpdmVkU3RhdGUuYWRkKF9jb21wb25lbnROYW1lKTtcbiAgICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdVbnNhZmUgbGVnYWN5IGxpZmVjeWNsZXMgd2lsbCBub3QgYmUgY2FsbGVkIGZvciBjb21wb25lbnRzIHVzaW5nIG5ldyBjb21wb25lbnQgQVBJcy5cXG5cXG4nICsgJyVzIHVzZXMgJXMgYnV0IGFsc28gY29udGFpbnMgdGhlIGZvbGxvd2luZyBsZWdhY3kgbGlmZWN5Y2xlczolcyVzJXNcXG5cXG4nICsgJ1RoZSBhYm92ZSBsaWZlY3ljbGVzIHNob3VsZCBiZSByZW1vdmVkLiBMZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOlxcbicgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1hc3luYy1jb21wb25lbnQtbGlmZWN5Y2xlLWhvb2tzJywgX2NvbXBvbmVudE5hbWUsIG5ld0FwaU5hbWUsIGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxNb3VudE5hbWUgOiAnJywgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lIDogJycsIGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsVXBkYXRlTmFtZSA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENhY2hlIHVubWFza2VkIGNvbnRleHQgc28gd2UgY2FuIGF2b2lkIHJlY3JlYXRpbmcgbWFza2VkIGNvbnRleHQgdW5sZXNzIG5lY2Vzc2FyeS5cbiAgLy8gUmVhY3RGaWJlckNvbnRleHQgdXN1YWxseSB1cGRhdGVzIHRoaXMgY2FjaGUgYnV0IGNhbid0IGZvciBuZXdseS1jcmVhdGVkIGluc3RhbmNlcy5cbiAgaWYgKGlzTGVnYWN5Q29udGV4dENvbnN1bWVyKSB7XG4gICAgY2FjaGVDb250ZXh0KHdvcmtJblByb2dyZXNzLCB1bm1hc2tlZENvbnRleHQsIGNvbnRleHQpO1xuICB9XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG5mdW5jdGlvbiBjYWxsQ29tcG9uZW50V2lsbE1vdW50KHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSkge1xuICBzdGFydFBoYXNlVGltZXIod29ya0luUHJvZ3Jlc3MsICdjb21wb25lbnRXaWxsTW91bnQnKTtcbiAgdmFyIG9sZFN0YXRlID0gaW5zdGFuY2Uuc3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQoKTtcbiAgfVxuICBpZiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCk7XG4gIH1cblxuICBzdG9wUGhhc2VUaW1lcigpO1xuXG4gIGlmIChvbGRTdGF0ZSAhPT0gaW5zdGFuY2Uuc3RhdGUpIHtcbiAgICB7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcy5jb21wb25lbnRXaWxsTW91bnQoKTogQXNzaWduaW5nIGRpcmVjdGx5IHRvIHRoaXMuc3RhdGUgaXMgJyArIFwiZGVwcmVjYXRlZCAoZXhjZXB0IGluc2lkZSBhIGNvbXBvbmVudCdzIFwiICsgJ2NvbnN0cnVjdG9yKS4gVXNlIHNldFN0YXRlIGluc3RlYWQuJywgZ2V0Q29tcG9uZW50TmFtZSh3b3JrSW5Qcm9ncmVzcy50eXBlKSB8fCAnQ29tcG9uZW50Jyk7XG4gICAgfVxuICAgIGNsYXNzQ29tcG9uZW50VXBkYXRlci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGluc3RhbmNlLCBpbnN0YW5jZS5zdGF0ZSwgbnVsbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlLCBuZXdQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgdmFyIG9sZFN0YXRlID0gaW5zdGFuY2Uuc3RhdGU7XG4gIHN0YXJ0UGhhc2VUaW1lcih3b3JrSW5Qcm9ncmVzcywgJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnKTtcbiAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcywgbmV4dENvbnRleHQpO1xuICB9XG4gIGlmICh0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcywgbmV4dENvbnRleHQpO1xuICB9XG4gIHN0b3BQaGFzZVRpbWVyKCk7XG5cbiAgaWYgKGluc3RhbmNlLnN0YXRlICE9PSBvbGRTdGF0ZSkge1xuICAgIHtcbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZSh3b3JrSW5Qcm9ncmVzcy50eXBlKSB8fCAnQ29tcG9uZW50JztcbiAgICAgIGlmICghZGlkV2FybkFib3V0U3RhdGVBc3NpZ25tZW50Rm9yQ29tcG9uZW50Lmhhcyhjb21wb25lbnROYW1lKSkge1xuICAgICAgICBkaWRXYXJuQWJvdXRTdGF0ZUFzc2lnbm1lbnRGb3JDb21wb25lbnQuYWRkKGNvbXBvbmVudE5hbWUpO1xuICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk6IEFzc2lnbmluZyBkaXJlY3RseSB0byAnICsgXCJ0aGlzLnN0YXRlIGlzIGRlcHJlY2F0ZWQgKGV4Y2VwdCBpbnNpZGUgYSBjb21wb25lbnQncyBcIiArICdjb25zdHJ1Y3RvcikuIFVzZSBzZXRTdGF0ZSBpbnN0ZWFkLicsIGNvbXBvbmVudE5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBjbGFzc0NvbXBvbmVudFVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShpbnN0YW5jZSwgaW5zdGFuY2Uuc3RhdGUsIG51bGwpO1xuICB9XG59XG5cbi8vIEludm9rZXMgdGhlIG1vdW50IGxpZmUtY3ljbGVzIG9uIGEgcHJldmlvdXNseSBuZXZlciByZW5kZXJlZCBpbnN0YW5jZS5cbmZ1bmN0aW9uIG1vdW50Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3RvciwgbmV3UHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHtcbiAgICBjaGVja0NsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIGN0b3IsIG5ld1Byb3BzKTtcbiAgfVxuXG4gIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgaW5zdGFuY2UucHJvcHMgPSBuZXdQcm9wcztcbiAgaW5zdGFuY2Uuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICBpbnN0YW5jZS5yZWZzID0gZW1wdHlSZWZzT2JqZWN0O1xuXG4gIHZhciBjb250ZXh0VHlwZSA9IGN0b3IuY29udGV4dFR5cGU7XG4gIGlmICh0eXBlb2YgY29udGV4dFR5cGUgPT09ICdvYmplY3QnICYmIGNvbnRleHRUeXBlICE9PSBudWxsKSB7XG4gICAgaW5zdGFuY2UuY29udGV4dCA9IHJlYWRDb250ZXh0JDEoY29udGV4dFR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB1bm1hc2tlZENvbnRleHQgPSBnZXRVbm1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIGN0b3IsIHRydWUpO1xuICAgIGluc3RhbmNlLmNvbnRleHQgPSBnZXRNYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCB1bm1hc2tlZENvbnRleHQpO1xuICB9XG5cbiAge1xuICAgIGlmIChpbnN0YW5jZS5zdGF0ZSA9PT0gbmV3UHJvcHMpIHtcbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjdG9yKSB8fCAnQ29tcG9uZW50JztcbiAgICAgIGlmICghZGlkV2FybkFib3V0RGlyZWN0bHlBc3NpZ25pbmdQcm9wc1RvU3RhdGUuaGFzKGNvbXBvbmVudE5hbWUpKSB7XG4gICAgICAgIGRpZFdhcm5BYm91dERpcmVjdGx5QXNzaWduaW5nUHJvcHNUb1N0YXRlLmFkZChjb21wb25lbnROYW1lKTtcbiAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXM6IEl0IGlzIG5vdCByZWNvbW1lbmRlZCB0byBhc3NpZ24gcHJvcHMgZGlyZWN0bHkgdG8gc3RhdGUgJyArIFwiYmVjYXVzZSB1cGRhdGVzIHRvIHByb3BzIHdvbid0IGJlIHJlZmxlY3RlZCBpbiBzdGF0ZS4gXCIgKyAnSW4gbW9zdCBjYXNlcywgaXQgaXMgYmV0dGVyIHRvIHVzZSBwcm9wcyBkaXJlY3RseS4nLCBjb21wb25lbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAod29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdE1vZGUpIHtcbiAgICAgIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLnJlY29yZFVuc2FmZUxpZmVjeWNsZVdhcm5pbmdzKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSk7XG5cbiAgICAgIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLnJlY29yZExlZ2FjeUNvbnRleHRXYXJuaW5nKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgaWYgKHdhcm5BYm91dERlcHJlY2F0ZWRMaWZlY3ljbGVzKSB7XG4gICAgICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5yZWNvcmREZXByZWNhdGlvbldhcm5pbmdzKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHVwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gIGlmICh1cGRhdGVRdWV1ZSAhPT0gbnVsbCkge1xuICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgdXBkYXRlUXVldWUsIG5ld1Byb3BzLCBpbnN0YW5jZSwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIGluc3RhbmNlLnN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgfVxuXG4gIHZhciBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgaWYgKHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyh3b3JrSW5Qcm9ncmVzcywgY3RvciwgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLCBuZXdQcm9wcyk7XG4gICAgaW5zdGFuY2Uuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICB9XG5cbiAgLy8gSW4gb3JkZXIgdG8gc3VwcG9ydCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIGNvbXBvbmVudHMsXG4gIC8vIFVuc2FmZSBsaWZlY3ljbGVzIHNob3VsZCBub3QgYmUgaW52b2tlZCBmb3IgY29tcG9uZW50cyB1c2luZyB0aGUgbmV3IEFQSXMuXG4gIGlmICh0eXBlb2YgY3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGluc3RhbmNlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICE9PSAnZnVuY3Rpb24nICYmICh0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSkge1xuICAgIGNhbGxDb21wb25lbnRXaWxsTW91bnQod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlKTtcbiAgICAvLyBJZiB3ZSBoYWQgYWRkaXRpb25hbCBzdGF0ZSB1cGRhdGVzIGR1cmluZyB0aGlzIGxpZmUtY3ljbGUsIGxldCdzXG4gICAgLy8gcHJvY2VzcyB0aGVtIG5vdy5cbiAgICB1cGRhdGVRdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICAgIGlmICh1cGRhdGVRdWV1ZSAhPT0gbnVsbCkge1xuICAgICAgcHJvY2Vzc1VwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLCB1cGRhdGVRdWV1ZSwgbmV3UHJvcHMsIGluc3RhbmNlLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICBpbnN0YW5jZS5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lTW91bnRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBjdG9yLCBuZXdQcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuXG4gIHZhciBvbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gIGluc3RhbmNlLnByb3BzID0gb2xkUHJvcHM7XG5cbiAgdmFyIG9sZENvbnRleHQgPSBpbnN0YW5jZS5jb250ZXh0O1xuICB2YXIgY29udGV4dFR5cGUgPSBjdG9yLmNvbnRleHRUeXBlO1xuICB2YXIgbmV4dENvbnRleHQgPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgY29udGV4dFR5cGUgPT09ICdvYmplY3QnICYmIGNvbnRleHRUeXBlICE9PSBudWxsKSB7XG4gICAgbmV4dENvbnRleHQgPSByZWFkQ29udGV4dCQxKGNvbnRleHRUeXBlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbmV4dExlZ2FjeVVubWFza2VkQ29udGV4dCA9IGdldFVubWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgY3RvciwgdHJ1ZSk7XG4gICAgbmV4dENvbnRleHQgPSBnZXRNYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCBuZXh0TGVnYWN5VW5tYXNrZWRDb250ZXh0KTtcbiAgfVxuXG4gIHZhciBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgdmFyIGhhc05ld0xpZmVjeWNsZXMgPSB0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJztcblxuICAvLyBOb3RlOiBEdXJpbmcgdGhlc2UgbGlmZS1jeWNsZXMsIGluc3RhbmNlLnByb3BzL2luc3RhbmNlLnN0YXRlIGFyZSB3aGF0XG4gIC8vIGV2ZXIgdGhlIHByZXZpb3VzbHkgYXR0ZW1wdGVkIHRvIHJlbmRlciAtIG5vdCB0aGUgXCJjdXJyZW50XCIuIEhvd2V2ZXIsXG4gIC8vIGR1cmluZyBjb21wb25lbnREaWRVcGRhdGUgd2UgcGFzcyB0aGUgXCJjdXJyZW50XCIgcHJvcHMuXG5cbiAgLy8gSW4gb3JkZXIgdG8gc3VwcG9ydCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIGNvbXBvbmVudHMsXG4gIC8vIFVuc2FmZSBsaWZlY3ljbGVzIHNob3VsZCBub3QgYmUgaW52b2tlZCBmb3IgY29tcG9uZW50cyB1c2luZyB0aGUgbmV3IEFQSXMuXG4gIGlmICghaGFzTmV3TGlmZWN5Y2xlcyAmJiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSkge1xuICAgIGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMgfHwgb2xkQ29udGV4dCAhPT0gbmV4dENvbnRleHQpIHtcbiAgICAgIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSwgbmV3UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICByZXNldEhhc0ZvcmNlVXBkYXRlQmVmb3JlUHJvY2Vzc2luZygpO1xuXG4gIHZhciBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIHZhciBuZXdTdGF0ZSA9IGluc3RhbmNlLnN0YXRlID0gb2xkU3RhdGU7XG4gIHZhciB1cGRhdGVRdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICBpZiAodXBkYXRlUXVldWUgIT09IG51bGwpIHtcbiAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIHVwZGF0ZVF1ZXVlLCBuZXdQcm9wcywgaW5zdGFuY2UsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICBuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIH1cbiAgaWYgKG9sZFByb3BzID09PSBuZXdQcm9wcyAmJiBvbGRTdGF0ZSA9PT0gbmV3U3RhdGUgJiYgIWhhc0NvbnRleHRDaGFuZ2VkKCkgJiYgIWNoZWNrSGFzRm9yY2VVcGRhdGVBZnRlclByb2Nlc3NpbmcoKSkge1xuICAgIC8vIElmIGFuIHVwZGF0ZSB3YXMgYWxyZWFkeSBpbiBwcm9ncmVzcywgd2Ugc2hvdWxkIHNjaGVkdWxlIGFuIFVwZGF0ZVxuICAgIC8vIGVmZmVjdCBldmVuIHRob3VnaCB3ZSdyZSBiYWlsaW5nIG91dCwgc28gdGhhdCBjV1UvY0RVIGFyZSBjYWxsZWQuXG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFVwZGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyh3b3JrSW5Qcm9ncmVzcywgY3RvciwgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLCBuZXdQcm9wcyk7XG4gICAgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICB9XG5cbiAgdmFyIHNob3VsZFVwZGF0ZSA9IGNoZWNrSGFzRm9yY2VVcGRhdGVBZnRlclByb2Nlc3NpbmcoKSB8fCBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgY3Rvciwgb2xkUHJvcHMsIG5ld1Byb3BzLCBvbGRTdGF0ZSwgbmV3U3RhdGUsIG5leHRDb250ZXh0KTtcblxuICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgLy8gSW4gb3JkZXIgdG8gc3VwcG9ydCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIGNvbXBvbmVudHMsXG4gICAgLy8gVW5zYWZlIGxpZmVjeWNsZXMgc2hvdWxkIG5vdCBiZSBpbnZva2VkIGZvciBjb21wb25lbnRzIHVzaW5nIHRoZSBuZXcgQVBJcy5cbiAgICBpZiAoIWhhc05ld0xpZmVjeWNsZXMgJiYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICBzdGFydFBoYXNlVGltZXIod29ya0luUHJvZ3Jlc3MsICdjb21wb25lbnRXaWxsTW91bnQnKTtcbiAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKTtcbiAgICAgIH1cbiAgICAgIHN0b3BQaGFzZVRpbWVyKCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElmIGFuIHVwZGF0ZSB3YXMgYWxyZWFkeSBpbiBwcm9ncmVzcywgd2Ugc2hvdWxkIHNjaGVkdWxlIGFuIFVwZGF0ZVxuICAgIC8vIGVmZmVjdCBldmVuIHRob3VnaCB3ZSdyZSBiYWlsaW5nIG91dCwgc28gdGhhdCBjV1UvY0RVIGFyZSBjYWxsZWQuXG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFVwZGF0ZTtcbiAgICB9XG5cbiAgICAvLyBJZiBzaG91bGRDb21wb25lbnRVcGRhdGUgcmV0dXJuZWQgZmFsc2UsIHdlIHNob3VsZCBzdGlsbCB1cGRhdGUgdGhlXG4gICAgLy8gbWVtb2l6ZWQgc3RhdGUgdG8gaW5kaWNhdGUgdGhhdCB0aGlzIHdvcmsgY2FuIGJlIHJldXNlZC5cbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV3UHJvcHM7XG4gICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlO1xuICB9XG5cbiAgLy8gVXBkYXRlIHRoZSBleGlzdGluZyBpbnN0YW5jZSdzIHN0YXRlLCBwcm9wcywgYW5kIGNvbnRleHQgcG9pbnRlcnMgZXZlblxuICAvLyBpZiBzaG91bGRDb21wb25lbnRVcGRhdGUgcmV0dXJucyBmYWxzZS5cbiAgaW5zdGFuY2UucHJvcHMgPSBuZXdQcm9wcztcbiAgaW5zdGFuY2Uuc3RhdGUgPSBuZXdTdGF0ZTtcbiAgaW5zdGFuY2UuY29udGV4dCA9IG5leHRDb250ZXh0O1xuXG4gIHJldHVybiBzaG91bGRVcGRhdGU7XG59XG5cbi8vIEludm9rZXMgdGhlIHVwZGF0ZSBsaWZlLWN5Y2xlcyBhbmQgcmV0dXJucyBmYWxzZSBpZiBpdCBzaG91bGRuJ3QgcmVyZW5kZXIuXG5mdW5jdGlvbiB1cGRhdGVDbGFzc0luc3RhbmNlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBjdG9yLCBuZXdQcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuXG4gIHZhciBvbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gIGluc3RhbmNlLnByb3BzID0gb2xkUHJvcHM7XG5cbiAgdmFyIG9sZENvbnRleHQgPSBpbnN0YW5jZS5jb250ZXh0O1xuICB2YXIgY29udGV4dFR5cGUgPSBjdG9yLmNvbnRleHRUeXBlO1xuICB2YXIgbmV4dENvbnRleHQgPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgY29udGV4dFR5cGUgPT09ICdvYmplY3QnICYmIGNvbnRleHRUeXBlICE9PSBudWxsKSB7XG4gICAgbmV4dENvbnRleHQgPSByZWFkQ29udGV4dCQxKGNvbnRleHRUeXBlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbmV4dFVubWFza2VkQ29udGV4dCA9IGdldFVubWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgY3RvciwgdHJ1ZSk7XG4gICAgbmV4dENvbnRleHQgPSBnZXRNYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCBuZXh0VW5tYXNrZWRDb250ZXh0KTtcbiAgfVxuXG4gIHZhciBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgdmFyIGhhc05ld0xpZmVjeWNsZXMgPSB0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJztcblxuICAvLyBOb3RlOiBEdXJpbmcgdGhlc2UgbGlmZS1jeWNsZXMsIGluc3RhbmNlLnByb3BzL2luc3RhbmNlLnN0YXRlIGFyZSB3aGF0XG4gIC8vIGV2ZXIgdGhlIHByZXZpb3VzbHkgYXR0ZW1wdGVkIHRvIHJlbmRlciAtIG5vdCB0aGUgXCJjdXJyZW50XCIuIEhvd2V2ZXIsXG4gIC8vIGR1cmluZyBjb21wb25lbnREaWRVcGRhdGUgd2UgcGFzcyB0aGUgXCJjdXJyZW50XCIgcHJvcHMuXG5cbiAgLy8gSW4gb3JkZXIgdG8gc3VwcG9ydCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIGNvbXBvbmVudHMsXG4gIC8vIFVuc2FmZSBsaWZlY3ljbGVzIHNob3VsZCBub3QgYmUgaW52b2tlZCBmb3IgY29tcG9uZW50cyB1c2luZyB0aGUgbmV3IEFQSXMuXG4gIGlmICghaGFzTmV3TGlmZWN5Y2xlcyAmJiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSkge1xuICAgIGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMgfHwgb2xkQ29udGV4dCAhPT0gbmV4dENvbnRleHQpIHtcbiAgICAgIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSwgbmV3UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICByZXNldEhhc0ZvcmNlVXBkYXRlQmVmb3JlUHJvY2Vzc2luZygpO1xuXG4gIHZhciBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIHZhciBuZXdTdGF0ZSA9IGluc3RhbmNlLnN0YXRlID0gb2xkU3RhdGU7XG4gIHZhciB1cGRhdGVRdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICBpZiAodXBkYXRlUXVldWUgIT09IG51bGwpIHtcbiAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIHVwZGF0ZVF1ZXVlLCBuZXdQcm9wcywgaW5zdGFuY2UsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICBuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIH1cblxuICBpZiAob2xkUHJvcHMgPT09IG5ld1Byb3BzICYmIG9sZFN0YXRlID09PSBuZXdTdGF0ZSAmJiAhaGFzQ29udGV4dENoYW5nZWQoKSAmJiAhY2hlY2tIYXNGb3JjZVVwZGF0ZUFmdGVyUHJvY2Vzc2luZygpKSB7XG4gICAgLy8gSWYgYW4gdXBkYXRlIHdhcyBhbHJlYWR5IGluIHByb2dyZXNzLCB3ZSBzaG91bGQgc2NoZWR1bGUgYW4gVXBkYXRlXG4gICAgLy8gZWZmZWN0IGV2ZW4gdGhvdWdoIHdlJ3JlIGJhaWxpbmcgb3V0LCBzbyB0aGF0IGNXVS9jRFUgYXJlIGNhbGxlZC5cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKG9sZFByb3BzICE9PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgfHwgb2xkU3RhdGUgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkge1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gVXBkYXRlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAob2xkUHJvcHMgIT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyB8fCBvbGRTdGF0ZSAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBTbmFwc2hvdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyh3b3JrSW5Qcm9ncmVzcywgY3RvciwgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLCBuZXdQcm9wcyk7XG4gICAgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICB9XG5cbiAgdmFyIHNob3VsZFVwZGF0ZSA9IGNoZWNrSGFzRm9yY2VVcGRhdGVBZnRlclByb2Nlc3NpbmcoKSB8fCBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgY3Rvciwgb2xkUHJvcHMsIG5ld1Byb3BzLCBvbGRTdGF0ZSwgbmV3U3RhdGUsIG5leHRDb250ZXh0KTtcblxuICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgLy8gSW4gb3JkZXIgdG8gc3VwcG9ydCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIGNvbXBvbmVudHMsXG4gICAgLy8gVW5zYWZlIGxpZmVjeWNsZXMgc2hvdWxkIG5vdCBiZSBpbnZva2VkIGZvciBjb21wb25lbnRzIHVzaW5nIHRoZSBuZXcgQVBJcy5cbiAgICBpZiAoIWhhc05ld0xpZmVjeWNsZXMgJiYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgIHN0YXJ0UGhhc2VUaW1lcih3b3JrSW5Qcm9ncmVzcywgJ2NvbXBvbmVudFdpbGxVcGRhdGUnKTtcbiAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsVXBkYXRlKG5ld1Byb3BzLCBuZXdTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShuZXdQcm9wcywgbmV3U3RhdGUsIG5leHRDb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIHN0b3BQaGFzZVRpbWVyKCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gVXBkYXRlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gU25hcHNob3Q7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElmIGFuIHVwZGF0ZSB3YXMgYWxyZWFkeSBpbiBwcm9ncmVzcywgd2Ugc2hvdWxkIHNjaGVkdWxlIGFuIFVwZGF0ZVxuICAgIC8vIGVmZmVjdCBldmVuIHRob3VnaCB3ZSdyZSBiYWlsaW5nIG91dCwgc28gdGhhdCBjV1UvY0RVIGFyZSBjYWxsZWQuXG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChvbGRQcm9wcyAhPT0gY3VycmVudC5tZW1vaXplZFByb3BzIHx8IG9sZFN0YXRlICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFVwZGF0ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKG9sZFByb3BzICE9PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgfHwgb2xkU3RhdGUgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkge1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gU25hcHNob3Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHJldHVybmVkIGZhbHNlLCB3ZSBzaG91bGQgc3RpbGwgdXBkYXRlIHRoZVxuICAgIC8vIG1lbW9pemVkIHByb3BzL3N0YXRlIHRvIGluZGljYXRlIHRoYXQgdGhpcyB3b3JrIGNhbiBiZSByZXVzZWQuXG4gICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG5ld1Byb3BzO1xuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBuZXdTdGF0ZTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSB0aGUgZXhpc3RpbmcgaW5zdGFuY2UncyBzdGF0ZSwgcHJvcHMsIGFuZCBjb250ZXh0IHBvaW50ZXJzIGV2ZW5cbiAgLy8gaWYgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHJldHVybnMgZmFsc2UuXG4gIGluc3RhbmNlLnByb3BzID0gbmV3UHJvcHM7XG4gIGluc3RhbmNlLnN0YXRlID0gbmV3U3RhdGU7XG4gIGluc3RhbmNlLmNvbnRleHQgPSBuZXh0Q29udGV4dDtcblxuICByZXR1cm4gc2hvdWxkVXBkYXRlO1xufVxuXG52YXIgZGlkV2FybkFib3V0TWFwcyA9IHZvaWQgMDtcbnZhciBkaWRXYXJuQWJvdXRHZW5lcmF0b3JzID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dFN0cmluZ1JlZkluU3RyaWN0TW9kZSA9IHZvaWQgMDtcbnZhciBvd25lckhhc0tleVVzZVdhcm5pbmcgPSB2b2lkIDA7XG52YXIgb3duZXJIYXNGdW5jdGlvblR5cGVXYXJuaW5nID0gdm9pZCAwO1xudmFyIHdhcm5Gb3JNaXNzaW5nS2V5ID0gZnVuY3Rpb24gKGNoaWxkKSB7fTtcblxue1xuICBkaWRXYXJuQWJvdXRNYXBzID0gZmFsc2U7XG4gIGRpZFdhcm5BYm91dEdlbmVyYXRvcnMgPSBmYWxzZTtcbiAgZGlkV2FybkFib3V0U3RyaW5nUmVmSW5TdHJpY3RNb2RlID0ge307XG5cbiAgLyoqXG4gICAqIFdhcm4gaWYgdGhlcmUncyBubyBrZXkgZXhwbGljaXRseSBzZXQgb24gZHluYW1pYyBhcnJheXMgb2YgY2hpbGRyZW4gb3JcbiAgICogb2JqZWN0IGtleXMgYXJlIG5vdCB2YWxpZC4gVGhpcyBhbGxvd3MgdXMgdG8ga2VlcCB0cmFjayBvZiBjaGlsZHJlbiBiZXR3ZWVuXG4gICAqIHVwZGF0ZXMuXG4gICAqL1xuICBvd25lckhhc0tleVVzZVdhcm5pbmcgPSB7fTtcbiAgb3duZXJIYXNGdW5jdGlvblR5cGVXYXJuaW5nID0ge307XG5cbiAgd2FybkZvck1pc3NpbmdLZXkgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgPT09IG51bGwgfHwgdHlwZW9mIGNoaWxkICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWNoaWxkLl9zdG9yZSB8fCBjaGlsZC5fc3RvcmUudmFsaWRhdGVkIHx8IGNoaWxkLmtleSAhPSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgICEodHlwZW9mIGNoaWxkLl9zdG9yZSA9PT0gJ29iamVjdCcpID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3QgQ29tcG9uZW50IGluIHdhcm5Gb3JNaXNzaW5nS2V5IHNob3VsZCBoYXZlIGEgX3N0b3JlLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICAgIGNoaWxkLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuXG4gICAgdmFyIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8gPSAnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSAnICsgJ1wia2V5XCIgcHJvcC4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1rZXlzIGZvciAnICsgJ21vcmUgaW5mb3JtYXRpb24uJyArIGdldEN1cnJlbnRGaWJlclN0YWNrSW5EZXYoKTtcbiAgICBpZiAob3duZXJIYXNLZXlVc2VXYXJuaW5nW2N1cnJlbnRDb21wb25lbnRFcnJvckluZm9dKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7XG5cbiAgICB3YXJuaW5nJDEoZmFsc2UsICdFYWNoIGNoaWxkIGluIGFuIGFycmF5IG9yIGl0ZXJhdG9yIHNob3VsZCBoYXZlIGEgdW5pcXVlICcgKyAnXCJrZXlcIiBwcm9wLiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWtleXMgZm9yICcgKyAnbW9yZSBpbmZvcm1hdGlvbi4nKTtcbiAgfTtcbn1cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5mdW5jdGlvbiBjb2VyY2VSZWYocmV0dXJuRmliZXIsIGN1cnJlbnQkJDEsIGVsZW1lbnQpIHtcbiAgdmFyIG1peGVkUmVmID0gZWxlbWVudC5yZWY7XG4gIGlmIChtaXhlZFJlZiAhPT0gbnVsbCAmJiB0eXBlb2YgbWl4ZWRSZWYgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG1peGVkUmVmICE9PSAnb2JqZWN0Jykge1xuICAgIHtcbiAgICAgIGlmIChyZXR1cm5GaWJlci5tb2RlICYgU3RyaWN0TW9kZSkge1xuICAgICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUocmV0dXJuRmliZXIudHlwZSkgfHwgJ0NvbXBvbmVudCc7XG4gICAgICAgIGlmICghZGlkV2FybkFib3V0U3RyaW5nUmVmSW5TdHJpY3RNb2RlW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnQSBzdHJpbmcgcmVmLCBcIiVzXCIsIGhhcyBiZWVuIGZvdW5kIHdpdGhpbiBhIHN0cmljdCBtb2RlIHRyZWUuICcgKyAnU3RyaW5nIHJlZnMgYXJlIGEgc291cmNlIG9mIHBvdGVudGlhbCBidWdzIGFuZCBzaG91bGQgYmUgYXZvaWRlZC4gJyArICdXZSByZWNvbW1lbmQgdXNpbmcgY3JlYXRlUmVmKCkgaW5zdGVhZC4nICsgJ1xcbiVzJyArICdcXG5cXG5MZWFybiBtb3JlIGFib3V0IHVzaW5nIHJlZnMgc2FmZWx5IGhlcmU6JyArICdcXG5odHRwczovL2ZiLm1lL3JlYWN0LXN0cmljdC1tb2RlLXN0cmluZy1yZWYnLCBtaXhlZFJlZiwgZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHJldHVybkZpYmVyKSk7XG4gICAgICAgICAgZGlkV2FybkFib3V0U3RyaW5nUmVmSW5TdHJpY3RNb2RlW2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbGVtZW50Ll9vd25lcikge1xuICAgICAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7XG4gICAgICB2YXIgaW5zdCA9IHZvaWQgMDtcbiAgICAgIGlmIChvd25lcikge1xuICAgICAgICB2YXIgb3duZXJGaWJlciA9IG93bmVyO1xuICAgICAgICAhKG93bmVyRmliZXIudGFnID09PSBDbGFzc0NvbXBvbmVudCkgPyBpbnZhcmlhbnQoZmFsc2UsICdGdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBoYXZlIHJlZnMuJykgOiB2b2lkIDA7XG4gICAgICAgIGluc3QgPSBvd25lckZpYmVyLnN0YXRlTm9kZTtcbiAgICAgIH1cbiAgICAgICFpbnN0ID8gaW52YXJpYW50KGZhbHNlLCAnTWlzc2luZyBvd25lciBmb3Igc3RyaW5nIHJlZiAlcy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nLCBtaXhlZFJlZikgOiB2b2lkIDA7XG4gICAgICB2YXIgc3RyaW5nUmVmID0gJycgKyBtaXhlZFJlZjtcbiAgICAgIC8vIENoZWNrIGlmIHByZXZpb3VzIHN0cmluZyByZWYgbWF0Y2hlcyBuZXcgc3RyaW5nIHJlZlxuICAgICAgaWYgKGN1cnJlbnQkJDEgIT09IG51bGwgJiYgY3VycmVudCQkMS5yZWYgIT09IG51bGwgJiYgdHlwZW9mIGN1cnJlbnQkJDEucmVmID09PSAnZnVuY3Rpb24nICYmIGN1cnJlbnQkJDEucmVmLl9zdHJpbmdSZWYgPT09IHN0cmluZ1JlZikge1xuICAgICAgICByZXR1cm4gY3VycmVudCQkMS5yZWY7XG4gICAgICB9XG4gICAgICB2YXIgcmVmID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciByZWZzID0gaW5zdC5yZWZzO1xuICAgICAgICBpZiAocmVmcyA9PT0gZW1wdHlSZWZzT2JqZWN0KSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBhIGxhenkgcG9vbGVkIGZyb3plbiBvYmplY3QsIHNvIHdlIG5lZWQgdG8gaW5pdGlhbGl6ZS5cbiAgICAgICAgICByZWZzID0gaW5zdC5yZWZzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgZGVsZXRlIHJlZnNbc3RyaW5nUmVmXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWZzW3N0cmluZ1JlZl0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJlZi5fc3RyaW5nUmVmID0gc3RyaW5nUmVmO1xuICAgICAgcmV0dXJuIHJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgISh0eXBlb2YgbWl4ZWRSZWYgPT09ICdzdHJpbmcnKSA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHJlZiB0byBiZSBhIGZ1bmN0aW9uLCBhIHN0cmluZywgYW4gb2JqZWN0IHJldHVybmVkIGJ5IFJlYWN0LmNyZWF0ZVJlZigpLCBvciBudWxsLicpIDogdm9pZCAwO1xuICAgICAgIWVsZW1lbnQuX293bmVyID8gaW52YXJpYW50KGZhbHNlLCAnRWxlbWVudCByZWYgd2FzIHNwZWNpZmllZCBhcyBhIHN0cmluZyAoJXMpIGJ1dCBubyBvd25lciB3YXMgc2V0LiBUaGlzIGNvdWxkIGhhcHBlbiBmb3Igb25lIG9mIHRoZSBmb2xsb3dpbmcgcmVhc29uczpcXG4xLiBZb3UgbWF5IGJlIGFkZGluZyBhIHJlZiB0byBhIGZ1bmN0aW9uIGNvbXBvbmVudFxcbjIuIFlvdSBtYXkgYmUgYWRkaW5nIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgd2FzIG5vdCBjcmVhdGVkIGluc2lkZSBhIGNvbXBvbmVudFxcJ3MgcmVuZGVyIG1ldGhvZFxcbjMuIFlvdSBoYXZlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBsb2FkZWRcXG5TZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1yZWZzLW11c3QtaGF2ZS1vd25lciBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLCBtaXhlZFJlZikgOiB2b2lkIDA7XG4gICAgfVxuICB9XG4gIHJldHVybiBtaXhlZFJlZjtcbn1cblxuZnVuY3Rpb24gdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCkge1xuICBpZiAocmV0dXJuRmliZXIudHlwZSAhPT0gJ3RleHRhcmVhJykge1xuICAgIHZhciBhZGRlbmR1bSA9ICcnO1xuICAgIHtcbiAgICAgIGFkZGVuZHVtID0gJyBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5ICcgKyAnaW5zdGVhZC4nICsgZ2V0Q3VycmVudEZpYmVyU3RhY2tJbkRldigpO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoZmFsc2UsICdPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6ICVzKS4lcycsIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdDaGlsZCkgPT09ICdbb2JqZWN0IE9iamVjdF0nID8gJ29iamVjdCB3aXRoIGtleXMgeycgKyBPYmplY3Qua2V5cyhuZXdDaGlsZCkuam9pbignLCAnKSArICd9JyA6IG5ld0NoaWxkLCBhZGRlbmR1bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2Fybk9uRnVuY3Rpb25UeXBlKCkge1xuICB2YXIgY3VycmVudENvbXBvbmVudEVycm9ySW5mbyA9ICdGdW5jdGlvbnMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkLiBUaGlzIG1heSBoYXBwZW4gaWYgJyArICd5b3UgcmV0dXJuIGEgQ29tcG9uZW50IGluc3RlYWQgb2YgPENvbXBvbmVudCAvPiBmcm9tIHJlbmRlci4gJyArICdPciBtYXliZSB5b3UgbWVhbnQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHJldHVybiBpdC4nICsgZ2V0Q3VycmVudEZpYmVyU3RhY2tJbkRldigpO1xuXG4gIGlmIChvd25lckhhc0Z1bmN0aW9uVHlwZVdhcm5pbmdbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgb3duZXJIYXNGdW5jdGlvblR5cGVXYXJuaW5nW2N1cnJlbnRDb21wb25lbnRFcnJvckluZm9dID0gdHJ1ZTtcblxuICB3YXJuaW5nJDEoZmFsc2UsICdGdW5jdGlvbnMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkLiBUaGlzIG1heSBoYXBwZW4gaWYgJyArICd5b3UgcmV0dXJuIGEgQ29tcG9uZW50IGluc3RlYWQgb2YgPENvbXBvbmVudCAvPiBmcm9tIHJlbmRlci4gJyArICdPciBtYXliZSB5b3UgbWVhbnQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHJldHVybiBpdC4nKTtcbn1cblxuLy8gVGhpcyB3cmFwcGVyIGZ1bmN0aW9uIGV4aXN0cyBiZWNhdXNlIEkgZXhwZWN0IHRvIGNsb25lIHRoZSBjb2RlIGluIGVhY2ggcGF0aFxuLy8gdG8gYmUgYWJsZSB0byBvcHRpbWl6ZSBlYWNoIHBhdGggaW5kaXZpZHVhbGx5IGJ5IGJyYW5jaGluZyBlYXJseS4gVGhpcyBuZWVkc1xuLy8gYSBjb21waWxlciBvciB3ZSBjYW4gZG8gaXQgbWFudWFsbHkuIEhlbHBlcnMgdGhhdCBkb24ndCBuZWVkIHRoaXMgYnJhbmNoaW5nXG4vLyBsaXZlIG91dHNpZGUgb2YgdGhpcyBmdW5jdGlvbi5cbmZ1bmN0aW9uIENoaWxkUmVjb25jaWxlcihzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gIGZ1bmN0aW9uIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZFRvRGVsZXRlKSB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAvLyBOb29wLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBEZWxldGlvbnMgYXJlIGFkZGVkIGluIHJldmVyc2VkIG9yZGVyIHNvIHdlIGFkZCBpdCB0byB0aGUgZnJvbnQuXG4gICAgLy8gQXQgdGhpcyBwb2ludCwgdGhlIHJldHVybiBmaWJlcidzIGVmZmVjdCBsaXN0IGlzIGVtcHR5IGV4Y2VwdCBmb3JcbiAgICAvLyBkZWxldGlvbnMsIHNvIHdlIGNhbiBqdXN0IGFwcGVuZCB0aGUgZGVsZXRpb24gdG8gdGhlIGxpc3QuIFRoZSByZW1haW5pbmdcbiAgICAvLyBlZmZlY3RzIGFyZW4ndCBhZGRlZCB1bnRpbCB0aGUgY29tcGxldGUgcGhhc2UuIE9uY2Ugd2UgaW1wbGVtZW50XG4gICAgLy8gcmVzdW1pbmcsIHRoaXMgbWF5IG5vdCBiZSB0cnVlLlxuICAgIHZhciBsYXN0ID0gcmV0dXJuRmliZXIubGFzdEVmZmVjdDtcbiAgICBpZiAobGFzdCAhPT0gbnVsbCkge1xuICAgICAgbGFzdC5uZXh0RWZmZWN0ID0gY2hpbGRUb0RlbGV0ZTtcbiAgICAgIHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm5GaWJlci5maXJzdEVmZmVjdCA9IHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgIH1cbiAgICBjaGlsZFRvRGVsZXRlLm5leHRFZmZlY3QgPSBudWxsO1xuICAgIGNoaWxkVG9EZWxldGUuZWZmZWN0VGFnID0gRGVsZXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpIHtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgIC8vIE5vb3AuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBGb3IgdGhlIHNob3VsZENsb25lIGNhc2UsIHRoaXMgY291bGQgYmUgbWljcm8tb3B0aW1pemVkIGEgYml0IGJ5XG4gICAgLy8gYXNzdW1pbmcgdGhhdCBhZnRlciB0aGUgZmlyc3QgY2hpbGQgd2UndmUgYWxyZWFkeSBhZGRlZCBldmVyeXRoaW5nLlxuICAgIHZhciBjaGlsZFRvRGVsZXRlID0gY3VycmVudEZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKGNoaWxkVG9EZWxldGUgIT09IG51bGwpIHtcbiAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZFRvRGVsZXRlKTtcbiAgICAgIGNoaWxkVG9EZWxldGUgPSBjaGlsZFRvRGVsZXRlLnNpYmxpbmc7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFwUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgLy8gQWRkIHRoZSByZW1haW5pbmcgY2hpbGRyZW4gdG8gYSB0ZW1wb3JhcnkgbWFwIHNvIHRoYXQgd2UgY2FuIGZpbmQgdGhlbSBieVxuICAgIC8vIGtleXMgcXVpY2tseS4gSW1wbGljaXQgKG51bGwpIGtleXMgZ2V0IGFkZGVkIHRvIHRoaXMgc2V0IHdpdGggdGhlaXIgaW5kZXhcbiAgICB2YXIgZXhpc3RpbmdDaGlsZHJlbiA9IG5ldyBNYXAoKTtcblxuICAgIHZhciBleGlzdGluZ0NoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKGV4aXN0aW5nQ2hpbGQgIT09IG51bGwpIHtcbiAgICAgIGlmIChleGlzdGluZ0NoaWxkLmtleSAhPT0gbnVsbCkge1xuICAgICAgICBleGlzdGluZ0NoaWxkcmVuLnNldChleGlzdGluZ0NoaWxkLmtleSwgZXhpc3RpbmdDaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGlzdGluZ0NoaWxkcmVuLnNldChleGlzdGluZ0NoaWxkLmluZGV4LCBleGlzdGluZ0NoaWxkKTtcbiAgICAgIH1cbiAgICAgIGV4aXN0aW5nQ2hpbGQgPSBleGlzdGluZ0NoaWxkLnNpYmxpbmc7XG4gICAgfVxuICAgIHJldHVybiBleGlzdGluZ0NoaWxkcmVuO1xuICB9XG5cbiAgZnVuY3Rpb24gdXNlRmliZXIoZmliZXIsIHBlbmRpbmdQcm9wcywgZXhwaXJhdGlvblRpbWUpIHtcbiAgICAvLyBXZSBjdXJyZW50bHkgc2V0IHNpYmxpbmcgdG8gbnVsbCBhbmQgaW5kZXggdG8gMCBoZXJlIGJlY2F1c2UgaXQgaXMgZWFzeVxuICAgIC8vIHRvIGZvcmdldCB0byBkbyBiZWZvcmUgcmV0dXJuaW5nIGl0LiBFLmcuIGZvciB0aGUgc2luZ2xlIGNoaWxkIGNhc2UuXG4gICAgdmFyIGNsb25lID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoZmliZXIsIHBlbmRpbmdQcm9wcywgZXhwaXJhdGlvblRpbWUpO1xuICAgIGNsb25lLmluZGV4ID0gMDtcbiAgICBjbG9uZS5zaWJsaW5nID0gbnVsbDtcbiAgICByZXR1cm4gY2xvbmU7XG4gIH1cblxuICBmdW5jdGlvbiBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0luZGV4KSB7XG4gICAgbmV3RmliZXIuaW5kZXggPSBuZXdJbmRleDtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgIC8vIE5vb3AuXG4gICAgICByZXR1cm4gbGFzdFBsYWNlZEluZGV4O1xuICAgIH1cbiAgICB2YXIgY3VycmVudCQkMSA9IG5ld0ZpYmVyLmFsdGVybmF0ZTtcbiAgICBpZiAoY3VycmVudCQkMSAhPT0gbnVsbCkge1xuICAgICAgdmFyIG9sZEluZGV4ID0gY3VycmVudCQkMS5pbmRleDtcbiAgICAgIGlmIChvbGRJbmRleCA8IGxhc3RQbGFjZWRJbmRleCkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgbW92ZS5cbiAgICAgICAgbmV3RmliZXIuZWZmZWN0VGFnID0gUGxhY2VtZW50O1xuICAgICAgICByZXR1cm4gbGFzdFBsYWNlZEluZGV4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBpdGVtIGNhbiBzdGF5IGluIHBsYWNlLlxuICAgICAgICByZXR1cm4gb2xkSW5kZXg7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoaXMgaXMgYW4gaW5zZXJ0aW9uLlxuICAgICAgbmV3RmliZXIuZWZmZWN0VGFnID0gUGxhY2VtZW50O1xuICAgICAgcmV0dXJuIGxhc3RQbGFjZWRJbmRleDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwbGFjZVNpbmdsZUNoaWxkKG5ld0ZpYmVyKSB7XG4gICAgLy8gVGhpcyBpcyBzaW1wbGVyIGZvciB0aGUgc2luZ2xlIGNoaWxkIGNhc2UuIFdlIG9ubHkgbmVlZCB0byBkbyBhXG4gICAgLy8gcGxhY2VtZW50IGZvciBpbnNlcnRpbmcgbmV3IGNoaWxkcmVuLlxuICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmIG5ld0ZpYmVyLmFsdGVybmF0ZSA9PT0gbnVsbCkge1xuICAgICAgbmV3RmliZXIuZWZmZWN0VGFnID0gUGxhY2VtZW50O1xuICAgIH1cbiAgICByZXR1cm4gbmV3RmliZXI7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgY3VycmVudCQkMSwgdGV4dENvbnRlbnQsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgaWYgKGN1cnJlbnQkJDEgPT09IG51bGwgfHwgY3VycmVudCQkMS50YWcgIT09IEhvc3RUZXh0KSB7XG4gICAgICAvLyBJbnNlcnRcbiAgICAgIHZhciBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tVGV4dCh0ZXh0Q29udGVudCwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgY3JlYXRlZC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBjcmVhdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVcGRhdGVcbiAgICAgIHZhciBleGlzdGluZyA9IHVzZUZpYmVyKGN1cnJlbnQkJDEsIHRleHRDb250ZW50LCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBleGlzdGluZztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBjdXJyZW50JCQxLCBlbGVtZW50LCBleHBpcmF0aW9uVGltZSkge1xuICAgIGlmIChjdXJyZW50JCQxICE9PSBudWxsICYmIGN1cnJlbnQkJDEuZWxlbWVudFR5cGUgPT09IGVsZW1lbnQudHlwZSkge1xuICAgICAgLy8gTW92ZSBiYXNlZCBvbiBpbmRleFxuICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY3VycmVudCQkMSwgZWxlbWVudC5wcm9wcywgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgZXhpc3RpbmcucmVmID0gY29lcmNlUmVmKHJldHVybkZpYmVyLCBjdXJyZW50JCQxLCBlbGVtZW50KTtcbiAgICAgIGV4aXN0aW5nLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAge1xuICAgICAgICBleGlzdGluZy5fZGVidWdTb3VyY2UgPSBlbGVtZW50Ll9zb3VyY2U7XG4gICAgICAgIGV4aXN0aW5nLl9kZWJ1Z093bmVyID0gZWxlbWVudC5fb3duZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEluc2VydFxuICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21FbGVtZW50KGVsZW1lbnQsIHJldHVybkZpYmVyLm1vZGUsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGNyZWF0ZWQucmVmID0gY29lcmNlUmVmKHJldHVybkZpYmVyLCBjdXJyZW50JCQxLCBlbGVtZW50KTtcbiAgICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gY3JlYXRlZDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVQb3J0YWwocmV0dXJuRmliZXIsIGN1cnJlbnQkJDEsIHBvcnRhbCwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICBpZiAoY3VycmVudCQkMSA9PT0gbnVsbCB8fCBjdXJyZW50JCQxLnRhZyAhPT0gSG9zdFBvcnRhbCB8fCBjdXJyZW50JCQxLnN0YXRlTm9kZS5jb250YWluZXJJbmZvICE9PSBwb3J0YWwuY29udGFpbmVySW5mbyB8fCBjdXJyZW50JCQxLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiAhPT0gcG9ydGFsLmltcGxlbWVudGF0aW9uKSB7XG4gICAgICAvLyBJbnNlcnRcbiAgICAgIHZhciBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKHBvcnRhbCwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgY3JlYXRlZC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBjcmVhdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVcGRhdGVcbiAgICAgIHZhciBleGlzdGluZyA9IHVzZUZpYmVyKGN1cnJlbnQkJDEsIHBvcnRhbC5jaGlsZHJlbiB8fCBbXSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgZXhpc3RpbmcucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQkJDEsIGZyYWdtZW50LCBleHBpcmF0aW9uVGltZSwga2V5KSB7XG4gICAgaWYgKGN1cnJlbnQkJDEgPT09IG51bGwgfHwgY3VycmVudCQkMS50YWcgIT09IEZyYWdtZW50KSB7XG4gICAgICAvLyBJbnNlcnRcbiAgICAgIHZhciBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoZnJhZ21lbnQsIHJldHVybkZpYmVyLm1vZGUsIGV4cGlyYXRpb25UaW1lLCBrZXkpO1xuICAgICAgY3JlYXRlZC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBjcmVhdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVcGRhdGVcbiAgICAgIHZhciBleGlzdGluZyA9IHVzZUZpYmVyKGN1cnJlbnQkJDEsIGZyYWdtZW50LCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBleGlzdGluZztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5ld0NoaWxkID09PSAnbnVtYmVyJykge1xuICAgICAgLy8gVGV4dCBub2RlcyBkb24ndCBoYXZlIGtleXMuIElmIHRoZSBwcmV2aW91cyBub2RlIGlzIGltcGxpY2l0bHkga2V5ZWRcbiAgICAgIC8vIHdlIGNhbiBjb250aW51ZSB0byByZXBsYWNlIGl0IHdpdGhvdXQgYWJvcnRpbmcgZXZlbiBpZiBpdCBpcyBub3QgYSB0ZXh0XG4gICAgICAvLyBub2RlLlxuICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21UZXh0KCcnICsgbmV3Q2hpbGQsIHJldHVybkZpYmVyLm1vZGUsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gY3JlYXRlZDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnb2JqZWN0JyAmJiBuZXdDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgc3dpdGNoIChuZXdDaGlsZC4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgX2NyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21FbGVtZW50KG5ld0NoaWxkLCByZXR1cm5GaWJlci5tb2RlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgICBfY3JlYXRlZC5yZWYgPSBjb2VyY2VSZWYocmV0dXJuRmliZXIsIG51bGwsIG5ld0NoaWxkKTtcbiAgICAgICAgICAgIF9jcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVkO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgX2NyZWF0ZWQyID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKG5ld0NoaWxkLCByZXR1cm5GaWJlci5tb2RlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgICBfY3JlYXRlZDIucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgICByZXR1cm4gX2NyZWF0ZWQyO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzQXJyYXkobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKSB7XG4gICAgICAgIHZhciBfY3JlYXRlZDMgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChuZXdDaGlsZCwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUsIG51bGwpO1xuICAgICAgICBfY3JlYXRlZDMucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgIHJldHVybiBfY3JlYXRlZDM7XG4gICAgICB9XG5cbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2Fybk9uRnVuY3Rpb25UeXBlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVTbG90KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gVXBkYXRlIHRoZSBmaWJlciBpZiB0aGUga2V5cyBtYXRjaCwgb3RoZXJ3aXNlIHJldHVybiBudWxsLlxuXG4gICAgdmFyIGtleSA9IG9sZEZpYmVyICE9PSBudWxsID8gb2xkRmliZXIua2V5IDogbnVsbDtcblxuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBuZXdDaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIC8vIFRleHQgbm9kZXMgZG9uJ3QgaGF2ZSBrZXlzLiBJZiB0aGUgcHJldmlvdXMgbm9kZSBpcyBpbXBsaWNpdGx5IGtleWVkXG4gICAgICAvLyB3ZSBjYW4gY29udGludWUgdG8gcmVwbGFjZSBpdCB3aXRob3V0IGFib3J0aW5nIGV2ZW4gaWYgaXQgaXMgbm90IGEgdGV4dFxuICAgICAgLy8gbm9kZS5cbiAgICAgIGlmIChrZXkgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIG9sZEZpYmVyLCAnJyArIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ29iamVjdCcgJiYgbmV3Q2hpbGQgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKG5ld0NoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgIGlmIChuZXdDaGlsZC50eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW4sIGV4cGlyYXRpb25UaW1lLCBrZXkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAobmV3Q2hpbGQua2V5ID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0FycmF5KG5ld0NoaWxkKSB8fCBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSkge1xuICAgICAgICBpZiAoa2V5ICE9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUsIG51bGwpO1xuICAgICAgfVxuXG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG5cbiAgICB7XG4gICAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm5PbkZ1bmN0aW9uVHlwZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRnJvbU1hcChleGlzdGluZ0NoaWxkcmVuLCByZXR1cm5GaWJlciwgbmV3SWR4LCBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbmV3Q2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICAvLyBUZXh0IG5vZGVzIGRvbid0IGhhdmUga2V5cywgc28gd2UgbmVpdGhlciBoYXZlIHRvIGNoZWNrIHRoZSBvbGQgbm9yXG4gICAgICAvLyBuZXcgbm9kZSBmb3IgdGhlIGtleS4gSWYgYm90aCBhcmUgdGV4dCBub2RlcywgdGhleSBtYXRjaC5cbiAgICAgIHZhciBtYXRjaGVkRmliZXIgPSBleGlzdGluZ0NoaWxkcmVuLmdldChuZXdJZHgpIHx8IG51bGw7XG4gICAgICByZXR1cm4gdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIG1hdGNoZWRGaWJlciwgJycgKyBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdvYmplY3QnICYmIG5ld0NoaWxkICE9PSBudWxsKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBfbWF0Y2hlZEZpYmVyID0gZXhpc3RpbmdDaGlsZHJlbi5nZXQobmV3Q2hpbGQua2V5ID09PSBudWxsID8gbmV3SWR4IDogbmV3Q2hpbGQua2V5KSB8fCBudWxsO1xuICAgICAgICAgICAgaWYgKG5ld0NoaWxkLnR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBfbWF0Y2hlZEZpYmVyLCBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlbiwgZXhwaXJhdGlvblRpbWUsIG5ld0NoaWxkLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlRWxlbWVudChyZXR1cm5GaWJlciwgX21hdGNoZWRGaWJlciwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIF9tYXRjaGVkRmliZXIyID0gZXhpc3RpbmdDaGlsZHJlbi5nZXQobmV3Q2hpbGQua2V5ID09PSBudWxsID8gbmV3SWR4IDogbmV3Q2hpbGQua2V5KSB8fCBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgX21hdGNoZWRGaWJlcjIsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNBcnJheShuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpIHtcbiAgICAgICAgdmFyIF9tYXRjaGVkRmliZXIzID0gZXhpc3RpbmdDaGlsZHJlbi5nZXQobmV3SWR4KSB8fCBudWxsO1xuICAgICAgICByZXR1cm4gdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIF9tYXRjaGVkRmliZXIzLCBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUsIG51bGwpO1xuICAgICAgfVxuXG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG5cbiAgICB7XG4gICAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm5PbkZ1bmN0aW9uVHlwZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhcm5zIGlmIHRoZXJlIGlzIGEgZHVwbGljYXRlIG9yIG1pc3Npbmcga2V5XG4gICAqL1xuICBmdW5jdGlvbiB3YXJuT25JbnZhbGlkS2V5KGNoaWxkLCBrbm93bktleXMpIHtcbiAgICB7XG4gICAgICBpZiAodHlwZW9mIGNoaWxkICE9PSAnb2JqZWN0JyB8fCBjaGlsZCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ga25vd25LZXlzO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChjaGlsZC4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICB3YXJuRm9yTWlzc2luZ0tleShjaGlsZCk7XG4gICAgICAgICAgdmFyIGtleSA9IGNoaWxkLmtleTtcbiAgICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoa25vd25LZXlzID09PSBudWxsKSB7XG4gICAgICAgICAgICBrbm93bktleXMgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICBrbm93bktleXMuYWRkKGtleSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFrbm93bktleXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIGtub3duS2V5cy5hZGQoa2V5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3YXJuaW5nJDEoZmFsc2UsICdFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksIGAlc2AuICcgKyAnS2V5cyBzaG91bGQgYmUgdW5pcXVlIHNvIHRoYXQgY29tcG9uZW50cyBtYWludGFpbiB0aGVpciBpZGVudGl0eSAnICsgJ2Fjcm9zcyB1cGRhdGVzLiBOb24tdW5pcXVlIGtleXMgbWF5IGNhdXNlIGNoaWxkcmVuIHRvIGJlICcgKyAnZHVwbGljYXRlZCBhbmQvb3Igb21pdHRlZCDigJQgdGhlIGJlaGF2aW9yIGlzIHVuc3VwcG9ydGVkIGFuZCAnICsgJ2NvdWxkIGNoYW5nZSBpbiBhIGZ1dHVyZSB2ZXJzaW9uLicsIGtleSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrbm93bktleXM7XG4gIH1cblxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkFycmF5KHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGRyZW4sIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gVGhpcyBhbGdvcml0aG0gY2FuJ3Qgb3B0aW1pemUgYnkgc2VhcmNoaW5nIGZyb20gYm90aHMgZW5kcyBzaW5jZSB3ZVxuICAgIC8vIGRvbid0IGhhdmUgYmFja3BvaW50ZXJzIG9uIGZpYmVycy4gSSdtIHRyeWluZyB0byBzZWUgaG93IGZhciB3ZSBjYW4gZ2V0XG4gICAgLy8gd2l0aCB0aGF0IG1vZGVsLiBJZiBpdCBlbmRzIHVwIG5vdCBiZWluZyB3b3J0aCB0aGUgdHJhZGVvZmZzLCB3ZSBjYW5cbiAgICAvLyBhZGQgaXQgbGF0ZXIuXG5cbiAgICAvLyBFdmVuIHdpdGggYSB0d28gZW5kZWQgb3B0aW1pemF0aW9uLCB3ZSdkIHdhbnQgdG8gb3B0aW1pemUgZm9yIHRoZSBjYXNlXG4gICAgLy8gd2hlcmUgdGhlcmUgYXJlIGZldyBjaGFuZ2VzIGFuZCBicnV0ZSBmb3JjZSB0aGUgY29tcGFyaXNvbiBpbnN0ZWFkIG9mXG4gICAgLy8gZ29pbmcgZm9yIHRoZSBNYXAuIEl0J2QgbGlrZSB0byBleHBsb3JlIGhpdHRpbmcgdGhhdCBwYXRoIGZpcnN0IGluXG4gICAgLy8gZm9yd2FyZC1vbmx5IG1vZGUgYW5kIG9ubHkgZ28gZm9yIHRoZSBNYXAgb25jZSB3ZSBub3RpY2UgdGhhdCB3ZSBuZWVkXG4gICAgLy8gbG90cyBvZiBsb29rIGFoZWFkLiBUaGlzIGRvZXNuJ3QgaGFuZGxlIHJldmVyc2FsIGFzIHdlbGwgYXMgdHdvIGVuZGVkXG4gICAgLy8gc2VhcmNoIGJ1dCB0aGF0J3MgdW51c3VhbC4gQmVzaWRlcywgZm9yIHRoZSB0d28gZW5kZWQgb3B0aW1pemF0aW9uIHRvXG4gICAgLy8gd29yayBvbiBJdGVyYWJsZXMsIHdlJ2QgbmVlZCB0byBjb3B5IHRoZSB3aG9sZSBzZXQuXG5cbiAgICAvLyBJbiB0aGlzIGZpcnN0IGl0ZXJhdGlvbiwgd2UnbGwganVzdCBsaXZlIHdpdGggaGl0dGluZyB0aGUgYmFkIGNhc2VcbiAgICAvLyAoYWRkaW5nIGV2ZXJ5dGhpbmcgdG8gYSBNYXApIGluIGZvciBldmVyeSBpbnNlcnQvbW92ZS5cblxuICAgIC8vIElmIHlvdSBjaGFuZ2UgdGhpcyBjb2RlLCBhbHNvIHVwZGF0ZSByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKCkgd2hpY2hcbiAgICAvLyB1c2VzIHRoZSBzYW1lIGFsZ29yaXRobS5cblxuICAgIHtcbiAgICAgIC8vIEZpcnN0LCB2YWxpZGF0ZSBrZXlzLlxuICAgICAgdmFyIGtub3duS2V5cyA9IG51bGw7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5ld0NoaWxkcmVuW2ldO1xuICAgICAgICBrbm93bktleXMgPSB3YXJuT25JbnZhbGlkS2V5KGNoaWxkLCBrbm93bktleXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXN1bHRpbmdGaXJzdENoaWxkID0gbnVsbDtcbiAgICB2YXIgcHJldmlvdXNOZXdGaWJlciA9IG51bGw7XG5cbiAgICB2YXIgb2xkRmliZXIgPSBjdXJyZW50Rmlyc3RDaGlsZDtcbiAgICB2YXIgbGFzdFBsYWNlZEluZGV4ID0gMDtcbiAgICB2YXIgbmV3SWR4ID0gMDtcbiAgICB2YXIgbmV4dE9sZEZpYmVyID0gbnVsbDtcbiAgICBmb3IgKDsgb2xkRmliZXIgIT09IG51bGwgJiYgbmV3SWR4IDwgbmV3Q2hpbGRyZW4ubGVuZ3RoOyBuZXdJZHgrKykge1xuICAgICAgaWYgKG9sZEZpYmVyLmluZGV4ID4gbmV3SWR4KSB7XG4gICAgICAgIG5leHRPbGRGaWJlciA9IG9sZEZpYmVyO1xuICAgICAgICBvbGRGaWJlciA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0T2xkRmliZXIgPSBvbGRGaWJlci5zaWJsaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0ZpYmVyID0gdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkcmVuW25ld0lkeF0sIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGlmIChuZXdGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAvLyBUT0RPOiBUaGlzIGJyZWFrcyBvbiBlbXB0eSBzbG90cyBsaWtlIG51bGwgY2hpbGRyZW4uIFRoYXQnc1xuICAgICAgICAvLyB1bmZvcnR1bmF0ZSBiZWNhdXNlIGl0IHRyaWdnZXJzIHRoZSBzbG93IHBhdGggYWxsIHRoZSB0aW1lLiBXZSBuZWVkXG4gICAgICAgIC8vIGEgYmV0dGVyIHdheSB0byBjb21tdW5pY2F0ZSB3aGV0aGVyIHRoaXMgd2FzIGEgbWlzcyBvciBudWxsLFxuICAgICAgICAvLyBib29sZWFuLCB1bmRlZmluZWQsIGV0Yy5cbiAgICAgICAgaWYgKG9sZEZpYmVyID09PSBudWxsKSB7XG4gICAgICAgICAgb2xkRmliZXIgPSBuZXh0T2xkRmliZXI7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgICBpZiAob2xkRmliZXIgJiYgbmV3RmliZXIuYWx0ZXJuYXRlID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gV2UgbWF0Y2hlZCB0aGUgc2xvdCwgYnV0IHdlIGRpZG4ndCByZXVzZSB0aGUgZXhpc3RpbmcgZmliZXIsIHNvIHdlXG4gICAgICAgICAgLy8gbmVlZCB0byBkZWxldGUgdGhlIGV4aXN0aW5nIGNoaWxkLlxuICAgICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBvbGRGaWJlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxhc3RQbGFjZWRJbmRleCA9IHBsYWNlQ2hpbGQobmV3RmliZXIsIGxhc3RQbGFjZWRJbmRleCwgbmV3SWR4KTtcbiAgICAgIGlmIChwcmV2aW91c05ld0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IE1vdmUgb3V0IG9mIHRoZSBsb29wLiBUaGlzIG9ubHkgaGFwcGVucyBmb3IgdGhlIGZpcnN0IHJ1bi5cbiAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG5ld0ZpYmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVE9ETzogRGVmZXIgc2libGluZ3MgaWYgd2UncmUgbm90IGF0IHRoZSByaWdodCBpbmRleCBmb3IgdGhpcyBzbG90LlxuICAgICAgICAvLyBJLmUuIGlmIHdlIGhhZCBudWxsIHZhbHVlcyBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byBkZWZlciB0aGlzXG4gICAgICAgIC8vIGZvciBlYWNoIG51bGwgdmFsdWUuIEhvd2V2ZXIsIHdlIGFsc28gZG9uJ3Qgd2FudCB0byBjYWxsIHVwZGF0ZVNsb3RcbiAgICAgICAgLy8gd2l0aCB0aGUgcHJldmlvdXMgb25lLlxuICAgICAgICBwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBuZXdGaWJlcjtcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBuZXdGaWJlcjtcbiAgICAgIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgIH1cblxuICAgIGlmIChuZXdJZHggPT09IG5ld0NoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgLy8gV2UndmUgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBuZXcgY2hpbGRyZW4uIFdlIGNhbiBkZWxldGUgdGhlIHJlc3QuXG4gICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgaWYgKG9sZEZpYmVyID09PSBudWxsKSB7XG4gICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGFueSBtb3JlIGV4aXN0aW5nIGNoaWxkcmVuIHdlIGNhbiBjaG9vc2UgYSBmYXN0IHBhdGhcbiAgICAgIC8vIHNpbmNlIHRoZSByZXN0IHdpbGwgYWxsIGJlIGluc2VydGlvbnMuXG4gICAgICBmb3IgKDsgbmV3SWR4IDwgbmV3Q2hpbGRyZW4ubGVuZ3RoOyBuZXdJZHgrKykge1xuICAgICAgICB2YXIgX25ld0ZpYmVyID0gY3JlYXRlQ2hpbGQocmV0dXJuRmliZXIsIG5ld0NoaWxkcmVuW25ld0lkeF0sIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgaWYgKCFfbmV3RmliZXIpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKF9uZXdGaWJlciwgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpO1xuICAgICAgICBpZiAocHJldmlvdXNOZXdGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIFRPRE86IE1vdmUgb3V0IG9mIHRoZSBsb29wLiBUaGlzIG9ubHkgaGFwcGVucyBmb3IgdGhlIGZpcnN0IHJ1bi5cbiAgICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkID0gX25ld0ZpYmVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IF9uZXdGaWJlcjtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91c05ld0ZpYmVyID0gX25ld0ZpYmVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgLy8gQWRkIGFsbCBjaGlsZHJlbiB0byBhIGtleSBtYXAgZm9yIHF1aWNrIGxvb2t1cHMuXG4gICAgdmFyIGV4aXN0aW5nQ2hpbGRyZW4gPSBtYXBSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuXG4gICAgLy8gS2VlcCBzY2FubmluZyBhbmQgdXNlIHRoZSBtYXAgdG8gcmVzdG9yZSBkZWxldGVkIGl0ZW1zIGFzIG1vdmVzLlxuICAgIGZvciAoOyBuZXdJZHggPCBuZXdDaGlsZHJlbi5sZW5ndGg7IG5ld0lkeCsrKSB7XG4gICAgICB2YXIgX25ld0ZpYmVyMiA9IHVwZGF0ZUZyb21NYXAoZXhpc3RpbmdDaGlsZHJlbiwgcmV0dXJuRmliZXIsIG5ld0lkeCwgbmV3Q2hpbGRyZW5bbmV3SWR4XSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgaWYgKF9uZXdGaWJlcjIpIHtcbiAgICAgICAgaWYgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgICAgICBpZiAoX25ld0ZpYmVyMi5hbHRlcm5hdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFRoZSBuZXcgZmliZXIgaXMgYSB3b3JrIGluIHByb2dyZXNzLCBidXQgaWYgdGhlcmUgZXhpc3RzIGFcbiAgICAgICAgICAgIC8vIGN1cnJlbnQsIHRoYXQgbWVhbnMgdGhhdCB3ZSByZXVzZWQgdGhlIGZpYmVyLiBXZSBuZWVkIHRvIGRlbGV0ZVxuICAgICAgICAgICAgLy8gaXQgZnJvbSB0aGUgY2hpbGQgbGlzdCBzbyB0aGF0IHdlIGRvbid0IGFkZCBpdCB0byB0aGUgZGVsZXRpb25cbiAgICAgICAgICAgIC8vIGxpc3QuXG4gICAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLmRlbGV0ZShfbmV3RmliZXIyLmtleSA9PT0gbnVsbCA/IG5ld0lkeCA6IF9uZXdGaWJlcjIua2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFBsYWNlZEluZGV4ID0gcGxhY2VDaGlsZChfbmV3RmliZXIyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0lkeCk7XG4gICAgICAgIGlmIChwcmV2aW91c05ld0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IF9uZXdGaWJlcjI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gX25ld0ZpYmVyMjtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91c05ld0ZpYmVyID0gX25ld0ZpYmVyMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgLy8gQW55IGV4aXN0aW5nIGNoaWxkcmVuIHRoYXQgd2VyZW4ndCBjb25zdW1lZCBhYm92ZSB3ZXJlIGRlbGV0ZWQuIFdlIG5lZWRcbiAgICAgIC8vIHRvIGFkZCB0aGVtIHRvIHRoZSBkZWxldGlvbiBsaXN0LlxuICAgICAgZXhpc3RpbmdDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW5JdGVyYXRvcihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkcmVuSXRlcmFibGUsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgc2FtZSBpbXBsZW1lbnRhdGlvbiBhcyByZWNvbmNpbGVDaGlsZHJlbkFycmF5KCksXG4gICAgLy8gYnV0IHVzaW5nIHRoZSBpdGVyYXRvciBpbnN0ZWFkLlxuXG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG5ld0NoaWxkcmVuSXRlcmFibGUpO1xuICAgICEodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpID8gaW52YXJpYW50KGZhbHNlLCAnQW4gb2JqZWN0IGlzIG5vdCBhbiBpdGVyYWJsZS4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcblxuICAgIHtcbiAgICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgcmVuZGVyaW5nIEdlbmVyYXRvcnMgYmVjYXVzZSBpdCdzIGEgbXV0YXRpb24uXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMjk5NVxuICAgICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIC8vICRGbG93Rml4TWUgRmxvdyBkb2Vzbid0IGtub3cgYWJvdXQgdG9TdHJpbmdUYWdcbiAgICAgIG5ld0NoaWxkcmVuSXRlcmFibGVbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0dlbmVyYXRvcicpIHtcbiAgICAgICAgIWRpZFdhcm5BYm91dEdlbmVyYXRvcnMgPyB3YXJuaW5nJDEoZmFsc2UsICdVc2luZyBHZW5lcmF0b3JzIGFzIGNoaWxkcmVuIGlzIHVuc3VwcG9ydGVkIGFuZCB3aWxsIGxpa2VseSB5aWVsZCAnICsgJ3VuZXhwZWN0ZWQgcmVzdWx0cyBiZWNhdXNlIGVudW1lcmF0aW5nIGEgZ2VuZXJhdG9yIG11dGF0ZXMgaXQuICcgKyAnWW91IG1heSBjb252ZXJ0IGl0IHRvIGFuIGFycmF5IHdpdGggYEFycmF5LmZyb20oKWAgb3IgdGhlICcgKyAnYFsuLi5zcHJlYWRdYCBvcGVyYXRvciBiZWZvcmUgcmVuZGVyaW5nLiBLZWVwIGluIG1pbmQgJyArICd5b3UgbWlnaHQgbmVlZCB0byBwb2x5ZmlsbCB0aGVzZSBmZWF0dXJlcyBmb3Igb2xkZXIgYnJvd3NlcnMuJykgOiB2b2lkIDA7XG4gICAgICAgIGRpZFdhcm5BYm91dEdlbmVyYXRvcnMgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBXYXJuIGFib3V0IHVzaW5nIE1hcHMgYXMgY2hpbGRyZW5cbiAgICAgIGlmIChuZXdDaGlsZHJlbkl0ZXJhYmxlLmVudHJpZXMgPT09IGl0ZXJhdG9yRm4pIHtcbiAgICAgICAgIWRpZFdhcm5BYm91dE1hcHMgPyB3YXJuaW5nJDEoZmFsc2UsICdVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIHVuc3VwcG9ydGVkIGFuZCB3aWxsIGxpa2VseSB5aWVsZCAnICsgJ3VuZXhwZWN0ZWQgcmVzdWx0cy4gQ29udmVydCBpdCB0byBhIHNlcXVlbmNlL2l0ZXJhYmxlIG9mIGtleWVkICcgKyAnUmVhY3RFbGVtZW50cyBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gRmlyc3QsIHZhbGlkYXRlIGtleXMuXG4gICAgICAvLyBXZSdsbCBnZXQgYSBkaWZmZXJlbnQgaXRlcmF0b3IgbGF0ZXIgZm9yIHRoZSBtYWluIHBhc3MuXG4gICAgICB2YXIgX25ld0NoaWxkcmVuID0gaXRlcmF0b3JGbi5jYWxsKG5ld0NoaWxkcmVuSXRlcmFibGUpO1xuICAgICAgaWYgKF9uZXdDaGlsZHJlbikge1xuICAgICAgICB2YXIga25vd25LZXlzID0gbnVsbDtcbiAgICAgICAgdmFyIF9zdGVwID0gX25ld0NoaWxkcmVuLm5leHQoKTtcbiAgICAgICAgZm9yICg7ICFfc3RlcC5kb25lOyBfc3RlcCA9IF9uZXdDaGlsZHJlbi5uZXh0KCkpIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICBrbm93bktleXMgPSB3YXJuT25JbnZhbGlkS2V5KGNoaWxkLCBrbm93bktleXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG5ld0NoaWxkcmVuID0gaXRlcmF0b3JGbi5jYWxsKG5ld0NoaWxkcmVuSXRlcmFibGUpO1xuICAgICEobmV3Q2hpbGRyZW4gIT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdBbiBpdGVyYWJsZSBvYmplY3QgcHJvdmlkZWQgbm8gaXRlcmF0b3IuJykgOiB2b2lkIDA7XG5cbiAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGw7XG4gICAgdmFyIHByZXZpb3VzTmV3RmliZXIgPSBudWxsO1xuXG4gICAgdmFyIG9sZEZpYmVyID0gY3VycmVudEZpcnN0Q2hpbGQ7XG4gICAgdmFyIGxhc3RQbGFjZWRJbmRleCA9IDA7XG4gICAgdmFyIG5ld0lkeCA9IDA7XG4gICAgdmFyIG5leHRPbGRGaWJlciA9IG51bGw7XG5cbiAgICB2YXIgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKTtcbiAgICBmb3IgKDsgb2xkRmliZXIgIT09IG51bGwgJiYgIXN0ZXAuZG9uZTsgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCkpIHtcbiAgICAgIGlmIChvbGRGaWJlci5pbmRleCA+IG5ld0lkeCkge1xuICAgICAgICBuZXh0T2xkRmliZXIgPSBvbGRGaWJlcjtcbiAgICAgICAgb2xkRmliZXIgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gb2xkRmliZXIuc2libGluZztcbiAgICAgIH1cbiAgICAgIHZhciBuZXdGaWJlciA9IHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBzdGVwLnZhbHVlLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBpZiAobmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBicmVha3Mgb24gZW1wdHkgc2xvdHMgbGlrZSBudWxsIGNoaWxkcmVuLiBUaGF0J3NcbiAgICAgICAgLy8gdW5mb3J0dW5hdGUgYmVjYXVzZSBpdCB0cmlnZ2VycyB0aGUgc2xvdyBwYXRoIGFsbCB0aGUgdGltZS4gV2UgbmVlZFxuICAgICAgICAvLyBhIGJldHRlciB3YXkgdG8gY29tbXVuaWNhdGUgd2hldGhlciB0aGlzIHdhcyBhIG1pc3Mgb3IgbnVsbCxcbiAgICAgICAgLy8gYm9vbGVhbiwgdW5kZWZpbmVkLCBldGMuXG4gICAgICAgIGlmICghb2xkRmliZXIpIHtcbiAgICAgICAgICBvbGRGaWJlciA9IG5leHRPbGRGaWJlcjtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAgIGlmIChvbGRGaWJlciAmJiBuZXdGaWJlci5hbHRlcm5hdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBXZSBtYXRjaGVkIHRoZSBzbG90LCBidXQgd2UgZGlkbid0IHJldXNlIHRoZSBleGlzdGluZyBmaWJlciwgc28gd2VcbiAgICAgICAgICAvLyBuZWVkIHRvIGRlbGV0ZSB0aGUgZXhpc3RpbmcgY2hpbGQuXG4gICAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGFzdFBsYWNlZEluZGV4ID0gcGxhY2VDaGlsZChuZXdGaWJlciwgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpO1xuICAgICAgaWYgKHByZXZpb3VzTmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETzogTW92ZSBvdXQgb2YgdGhlIGxvb3AuIFRoaXMgb25seSBoYXBwZW5zIGZvciB0aGUgZmlyc3QgcnVuLlxuICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkID0gbmV3RmliZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPOiBEZWZlciBzaWJsaW5ncyBpZiB3ZSdyZSBub3QgYXQgdGhlIHJpZ2h0IGluZGV4IGZvciB0aGlzIHNsb3QuXG4gICAgICAgIC8vIEkuZS4gaWYgd2UgaGFkIG51bGwgdmFsdWVzIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIGRlZmVyIHRoaXNcbiAgICAgICAgLy8gZm9yIGVhY2ggbnVsbCB2YWx1ZS4gSG93ZXZlciwgd2UgYWxzbyBkb24ndCB3YW50IHRvIGNhbGwgdXBkYXRlU2xvdFxuICAgICAgICAvLyB3aXRoIHRoZSBwcmV2aW91cyBvbmUuXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyO1xuICAgICAgfVxuICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG5ld0ZpYmVyO1xuICAgICAgb2xkRmliZXIgPSBuZXh0T2xkRmliZXI7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgLy8gV2UndmUgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBuZXcgY2hpbGRyZW4uIFdlIGNhbiBkZWxldGUgdGhlIHJlc3QuXG4gICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgaWYgKG9sZEZpYmVyID09PSBudWxsKSB7XG4gICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGFueSBtb3JlIGV4aXN0aW5nIGNoaWxkcmVuIHdlIGNhbiBjaG9vc2UgYSBmYXN0IHBhdGhcbiAgICAgIC8vIHNpbmNlIHRoZSByZXN0IHdpbGwgYWxsIGJlIGluc2VydGlvbnMuXG4gICAgICBmb3IgKDsgIXN0ZXAuZG9uZTsgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCkpIHtcbiAgICAgICAgdmFyIF9uZXdGaWJlcjMgPSBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgc3RlcC52YWx1ZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICBpZiAoX25ld0ZpYmVyMyA9PT0gbnVsbCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RQbGFjZWRJbmRleCA9IHBsYWNlQ2hpbGQoX25ld0ZpYmVyMywgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpO1xuICAgICAgICBpZiAocHJldmlvdXNOZXdGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIFRPRE86IE1vdmUgb3V0IG9mIHRoZSBsb29wLiBUaGlzIG9ubHkgaGFwcGVucyBmb3IgdGhlIGZpcnN0IHJ1bi5cbiAgICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkID0gX25ld0ZpYmVyMztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBfbmV3RmliZXIzO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBfbmV3RmliZXIzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgLy8gQWRkIGFsbCBjaGlsZHJlbiB0byBhIGtleSBtYXAgZm9yIHF1aWNrIGxvb2t1cHMuXG4gICAgdmFyIGV4aXN0aW5nQ2hpbGRyZW4gPSBtYXBSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuXG4gICAgLy8gS2VlcCBzY2FubmluZyBhbmQgdXNlIHRoZSBtYXAgdG8gcmVzdG9yZSBkZWxldGVkIGl0ZW1zIGFzIG1vdmVzLlxuICAgIGZvciAoOyAhc3RlcC5kb25lOyBuZXdJZHgrKywgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKSkge1xuICAgICAgdmFyIF9uZXdGaWJlcjQgPSB1cGRhdGVGcm9tTWFwKGV4aXN0aW5nQ2hpbGRyZW4sIHJldHVybkZpYmVyLCBuZXdJZHgsIHN0ZXAudmFsdWUsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGlmIChfbmV3RmliZXI0ICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAgICAgaWYgKF9uZXdGaWJlcjQuYWx0ZXJuYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmV3IGZpYmVyIGlzIGEgd29yayBpbiBwcm9ncmVzcywgYnV0IGlmIHRoZXJlIGV4aXN0cyBhXG4gICAgICAgICAgICAvLyBjdXJyZW50LCB0aGF0IG1lYW5zIHRoYXQgd2UgcmV1c2VkIHRoZSBmaWJlci4gV2UgbmVlZCB0byBkZWxldGVcbiAgICAgICAgICAgIC8vIGl0IGZyb20gdGhlIGNoaWxkIGxpc3Qgc28gdGhhdCB3ZSBkb24ndCBhZGQgaXQgdG8gdGhlIGRlbGV0aW9uXG4gICAgICAgICAgICAvLyBsaXN0LlxuICAgICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbi5kZWxldGUoX25ld0ZpYmVyNC5rZXkgPT09IG51bGwgPyBuZXdJZHggOiBfbmV3RmliZXI0LmtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxhc3RQbGFjZWRJbmRleCA9IHBsYWNlQ2hpbGQoX25ld0ZpYmVyNCwgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpO1xuICAgICAgICBpZiAocHJldmlvdXNOZXdGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBfbmV3RmliZXI0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IF9uZXdGaWJlcjQ7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXNOZXdGaWJlciA9IF9uZXdGaWJlcjQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgIC8vIEFueSBleGlzdGluZyBjaGlsZHJlbiB0aGF0IHdlcmVuJ3QgY29uc3VtZWQgYWJvdmUgd2VyZSBkZWxldGVkLiBXZSBuZWVkXG4gICAgICAvLyB0byBhZGQgdGhlbSB0byB0aGUgZGVsZXRpb24gbGlzdC5cbiAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29uY2lsZVNpbmdsZVRleHROb2RlKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgdGV4dENvbnRlbnQsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIGNoZWNrIGZvciBrZXlzIG9uIHRleHQgbm9kZXMgc2luY2Ugd2UgZG9uJ3QgaGF2ZSBhXG4gICAgLy8gd2F5IHRvIGRlZmluZSB0aGVtLlxuICAgIGlmIChjdXJyZW50Rmlyc3RDaGlsZCAhPT0gbnVsbCAmJiBjdXJyZW50Rmlyc3RDaGlsZC50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICAvLyBXZSBhbHJlYWR5IGhhdmUgYW4gZXhpc3Rpbmcgbm9kZSBzbyBsZXQncyBqdXN0IHVwZGF0ZSBpdCBhbmQgZGVsZXRlXG4gICAgICAvLyB0aGUgcmVzdC5cbiAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nKTtcbiAgICAgIHZhciBleGlzdGluZyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCB0ZXh0Q29udGVudCwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgZXhpc3RpbmcucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgfVxuICAgIC8vIFRoZSBleGlzdGluZyBmaXJzdCBjaGlsZCBpcyBub3QgYSB0ZXh0IG5vZGUgc28gd2UgbmVlZCB0byBjcmVhdGUgb25lXG4gICAgLy8gYW5kIGRlbGV0ZSB0aGUgZXhpc3Rpbmcgb25lcy5cbiAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgIHZhciBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tVGV4dCh0ZXh0Q29udGVudCwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgcmV0dXJuIGNyZWF0ZWQ7XG4gIH1cblxuICBmdW5jdGlvbiByZWNvbmNpbGVTaW5nbGVFbGVtZW50KHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgZWxlbWVudCwgZXhwaXJhdGlvblRpbWUpIHtcbiAgICB2YXIga2V5ID0gZWxlbWVudC5rZXk7XG4gICAgdmFyIGNoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgICAvLyBUT0RPOiBJZiBrZXkgPT09IG51bGwgYW5kIGNoaWxkLmtleSA9PT0gbnVsbCwgdGhlbiB0aGlzIG9ubHkgYXBwbGllcyB0b1xuICAgICAgLy8gdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIGxpc3QuXG4gICAgICBpZiAoY2hpbGQua2V5ID09PSBrZXkpIHtcbiAgICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gRnJhZ21lbnQgPyBlbGVtZW50LnR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgOiBjaGlsZC5lbGVtZW50VHlwZSA9PT0gZWxlbWVudC50eXBlKSB7XG4gICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGNoaWxkLnNpYmxpbmcpO1xuICAgICAgICAgIHZhciBleGlzdGluZyA9IHVzZUZpYmVyKGNoaWxkLCBlbGVtZW50LnR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgPyBlbGVtZW50LnByb3BzLmNoaWxkcmVuIDogZWxlbWVudC5wcm9wcywgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgIGV4aXN0aW5nLnJlZiA9IGNvZXJjZVJlZihyZXR1cm5GaWJlciwgY2hpbGQsIGVsZW1lbnQpO1xuICAgICAgICAgIGV4aXN0aW5nLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGV4aXN0aW5nLl9kZWJ1Z1NvdXJjZSA9IGVsZW1lbnQuX3NvdXJjZTtcbiAgICAgICAgICAgIGV4aXN0aW5nLl9kZWJ1Z093bmVyID0gZWxlbWVudC5fb3duZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY2hpbGQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY2hpbGQpO1xuICAgICAgfVxuICAgICAgY2hpbGQgPSBjaGlsZC5zaWJsaW5nO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LnR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICAgIHZhciBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUsIGVsZW1lbnQua2V5KTtcbiAgICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gY3JlYXRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9jcmVhdGVkNCA9IGNyZWF0ZUZpYmVyRnJvbUVsZW1lbnQoZWxlbWVudCwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgX2NyZWF0ZWQ0LnJlZiA9IGNvZXJjZVJlZihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIGVsZW1lbnQpO1xuICAgICAgX2NyZWF0ZWQ0LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIF9jcmVhdGVkNDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWNvbmNpbGVTaW5nbGVQb3J0YWwocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBwb3J0YWwsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgdmFyIGtleSA9IHBvcnRhbC5rZXk7XG4gICAgdmFyIGNoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgICAvLyBUT0RPOiBJZiBrZXkgPT09IG51bGwgYW5kIGNoaWxkLmtleSA9PT0gbnVsbCwgdGhlbiB0aGlzIG9ubHkgYXBwbGllcyB0b1xuICAgICAgLy8gdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIGxpc3QuXG4gICAgICBpZiAoY2hpbGQua2V5ID09PSBrZXkpIHtcbiAgICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gSG9zdFBvcnRhbCAmJiBjaGlsZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyA9PT0gcG9ydGFsLmNvbnRhaW5lckluZm8gJiYgY2hpbGQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uID09PSBwb3J0YWwuaW1wbGVtZW50YXRpb24pIHtcbiAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY2hpbGQuc2libGluZyk7XG4gICAgICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY2hpbGQsIHBvcnRhbC5jaGlsZHJlbiB8fCBbXSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgIGV4aXN0aW5nLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY2hpbGQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY2hpbGQpO1xuICAgICAgfVxuICAgICAgY2hpbGQgPSBjaGlsZC5zaWJsaW5nO1xuICAgIH1cblxuICAgIHZhciBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKHBvcnRhbCwgcmV0dXJuRmliZXIubW9kZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgcmV0dXJuIGNyZWF0ZWQ7XG4gIH1cblxuICAvLyBUaGlzIEFQSSB3aWxsIHRhZyB0aGUgY2hpbGRyZW4gd2l0aCB0aGUgc2lkZS1lZmZlY3Qgb2YgdGhlIHJlY29uY2lsaWF0aW9uXG4gIC8vIGl0c2VsZi4gVGhleSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBzaWRlLWVmZmVjdCBsaXN0IGFzIHdlIHBhc3MgdGhyb3VnaCB0aGVcbiAgLy8gY2hpbGRyZW4gYW5kIHRoZSBwYXJlbnQuXG4gIGZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkRmliZXJzKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBub3QgcmVjdXJzaXZlLlxuICAgIC8vIElmIHRoZSB0b3AgbGV2ZWwgaXRlbSBpcyBhbiBhcnJheSwgd2UgdHJlYXQgaXQgYXMgYSBzZXQgb2YgY2hpbGRyZW4sXG4gICAgLy8gbm90IGFzIGEgZnJhZ21lbnQuIE5lc3RlZCBhcnJheXMgb24gdGhlIG90aGVyIGhhbmQgd2lsbCBiZSB0cmVhdGVkIGFzXG4gICAgLy8gZnJhZ21lbnQgbm9kZXMuIFJlY3Vyc2lvbiBoYXBwZW5zIGF0IHRoZSBub3JtYWwgZmxvdy5cblxuICAgIC8vIEhhbmRsZSB0b3AgbGV2ZWwgdW5rZXllZCBmcmFnbWVudHMgYXMgaWYgdGhleSB3ZXJlIGFycmF5cy5cbiAgICAvLyBUaGlzIGxlYWRzIHRvIGFuIGFtYmlndWl0eSBiZXR3ZWVuIDw+e1suLi5dfTwvPiBhbmQgPD4uLi48Lz4uXG4gICAgLy8gV2UgdHJlYXQgdGhlIGFtYmlndW91cyBjYXNlcyBhYm92ZSB0aGUgc2FtZS5cbiAgICB2YXIgaXNVbmtleWVkVG9wTGV2ZWxGcmFnbWVudCA9IHR5cGVvZiBuZXdDaGlsZCA9PT0gJ29iamVjdCcgJiYgbmV3Q2hpbGQgIT09IG51bGwgJiYgbmV3Q2hpbGQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSAmJiBuZXdDaGlsZC5rZXkgPT09IG51bGw7XG4gICAgaWYgKGlzVW5rZXllZFRvcExldmVsRnJhZ21lbnQpIHtcbiAgICAgIG5ld0NoaWxkID0gbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIG9iamVjdCB0eXBlc1xuICAgIHZhciBpc09iamVjdCA9IHR5cGVvZiBuZXdDaGlsZCA9PT0gJ29iamVjdCcgJiYgbmV3Q2hpbGQgIT09IG51bGw7XG5cbiAgICBpZiAoaXNPYmplY3QpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIHBsYWNlU2luZ2xlQ2hpbGQocmVjb25jaWxlU2luZ2xlRWxlbWVudChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSkpO1xuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJlY29uY2lsZVNpbmdsZVBvcnRhbChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkLCBleHBpcmF0aW9uVGltZSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBuZXdDaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJlY29uY2lsZVNpbmdsZVRleHROb2RlKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgJycgKyBuZXdDaGlsZCwgZXhwaXJhdGlvblRpbWUpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNBcnJheShuZXdDaGlsZCkpIHtcbiAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZHJlbkFycmF5KHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG5cbiAgICBpZiAoZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpIHtcbiAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3QpIHtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2Fybk9uRnVuY3Rpb25UeXBlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICd1bmRlZmluZWQnICYmICFpc1Vua2V5ZWRUb3BMZXZlbEZyYWdtZW50KSB7XG4gICAgICAvLyBJZiB0aGUgbmV3IGNoaWxkIGlzIHVuZGVmaW5lZCwgYW5kIHRoZSByZXR1cm4gZmliZXIgaXMgYSBjb21wb3NpdGVcbiAgICAgIC8vIGNvbXBvbmVudCwgdGhyb3cgYW4gZXJyb3IuIElmIEZpYmVyIHJldHVybiB0eXBlcyBhcmUgZGlzYWJsZWQsXG4gICAgICAvLyB3ZSBhbHJlYWR5IHRocmV3IGFib3ZlLlxuICAgICAgc3dpdGNoIChyZXR1cm5GaWJlci50YWcpIHtcbiAgICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHJldHVybkZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLnJlbmRlci5faXNNb2NrRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBhbGxvdyBhdXRvLW1vY2tzIHRvIHByb2NlZWQgYXMgaWYgdGhleSdyZSByZXR1cm5pbmcgbnVsbC5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgLy8gSW50ZW50aW9uYWxseSBmYWxsIHRocm91Z2ggdG8gdGhlIG5leHQgY2FzZSwgd2hpY2ggaGFuZGxlcyBib3RoXG4gICAgICAgIC8vIGZ1bmN0aW9ucyBhbmQgY2xhc3Nlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVkIG5vLWZhbGx0aHJvdWdoXG4gICAgICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIENvbXBvbmVudCA9IHJldHVybkZpYmVyLnR5cGU7XG4gICAgICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICclcyguLi4pOiBOb3RoaW5nIHdhcyByZXR1cm5lZCBmcm9tIHJlbmRlci4gVGhpcyB1c3VhbGx5IG1lYW5zIGEgcmV0dXJuIHN0YXRlbWVudCBpcyBtaXNzaW5nLiBPciwgdG8gcmVuZGVyIG5vdGhpbmcsIHJldHVybiBudWxsLicsIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50Jyk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbWFpbmluZyBjYXNlcyBhcmUgYWxsIHRyZWF0ZWQgYXMgZW1wdHkuXG4gICAgcmV0dXJuIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gIH1cblxuICByZXR1cm4gcmVjb25jaWxlQ2hpbGRGaWJlcnM7XG59XG5cbnZhciByZWNvbmNpbGVDaGlsZEZpYmVycyA9IENoaWxkUmVjb25jaWxlcih0cnVlKTtcbnZhciBtb3VudENoaWxkRmliZXJzID0gQ2hpbGRSZWNvbmNpbGVyKGZhbHNlKTtcblxuZnVuY3Rpb24gY2xvbmVDaGlsZEZpYmVycyhjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcykge1xuICAhKGN1cnJlbnQkJDEgPT09IG51bGwgfHwgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPT09IGN1cnJlbnQkJDEuY2hpbGQpID8gaW52YXJpYW50KGZhbHNlLCAnUmVzdW1pbmcgd29yayBub3QgeWV0IGltcGxlbWVudGVkLicpIDogdm9pZCAwO1xuXG4gIGlmICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjdXJyZW50Q2hpbGQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgdmFyIG5ld0NoaWxkID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoY3VycmVudENoaWxkLCBjdXJyZW50Q2hpbGQucGVuZGluZ1Byb3BzLCBjdXJyZW50Q2hpbGQuZXhwaXJhdGlvblRpbWUpO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG5ld0NoaWxkO1xuXG4gIG5ld0NoaWxkLnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICB3aGlsZSAoY3VycmVudENoaWxkLnNpYmxpbmcgIT09IG51bGwpIHtcbiAgICBjdXJyZW50Q2hpbGQgPSBjdXJyZW50Q2hpbGQuc2libGluZztcbiAgICBuZXdDaGlsZCA9IG5ld0NoaWxkLnNpYmxpbmcgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50Q2hpbGQsIGN1cnJlbnRDaGlsZC5wZW5kaW5nUHJvcHMsIGN1cnJlbnRDaGlsZC5leHBpcmF0aW9uVGltZSk7XG4gICAgbmV3Q2hpbGQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gIH1cbiAgbmV3Q2hpbGQuc2libGluZyA9IG51bGw7XG59XG5cbi8vIFRoZSBkZWVwZXN0IEZpYmVyIG9uIHRoZSBzdGFjayBpbnZvbHZlZCBpbiBhIGh5ZHJhdGlvbiBjb250ZXh0LlxuLy8gVGhpcyBtYXkgaGF2ZSBiZWVuIGFuIGluc2VydGlvbiBvciBhIGh5ZHJhdGlvbi5cbnZhciBoeWRyYXRpb25QYXJlbnRGaWJlciA9IG51bGw7XG52YXIgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNIeWRyYXRpbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZW50ZXJIeWRyYXRpb25TdGF0ZShmaWJlcikge1xuICBpZiAoIXN1cHBvcnRzSHlkcmF0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHBhcmVudEluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZChwYXJlbnRJbnN0YW5jZSk7XG4gIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gZmliZXI7XG4gIGlzSHlkcmF0aW5nID0gdHJ1ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZUh5ZHJhdGFibGVJbnN0YW5jZShyZXR1cm5GaWJlciwgaW5zdGFuY2UpIHtcbiAge1xuICAgIHN3aXRjaCAocmV0dXJuRmliZXIudGFnKSB7XG4gICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICBkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2UocmV0dXJuRmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8sIGluc3RhbmNlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgIGRpZE5vdEh5ZHJhdGVJbnN0YW5jZShyZXR1cm5GaWJlci50eXBlLCByZXR1cm5GaWJlci5tZW1vaXplZFByb3BzLCByZXR1cm5GaWJlci5zdGF0ZU5vZGUsIGluc3RhbmNlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNoaWxkVG9EZWxldGUgPSBjcmVhdGVGaWJlckZyb21Ib3N0SW5zdGFuY2VGb3JEZWxldGlvbigpO1xuICBjaGlsZFRvRGVsZXRlLnN0YXRlTm9kZSA9IGluc3RhbmNlO1xuICBjaGlsZFRvRGVsZXRlLnJldHVybiA9IHJldHVybkZpYmVyO1xuICBjaGlsZFRvRGVsZXRlLmVmZmVjdFRhZyA9IERlbGV0aW9uO1xuXG4gIC8vIFRoaXMgbWlnaHQgc2VlbSBsaWtlIGl0IGJlbG9uZ3Mgb24gcHJvZ3Jlc3NlZEZpcnN0RGVsZXRpb24uIEhvd2V2ZXIsXG4gIC8vIHRoZXNlIGNoaWxkcmVuIGFyZSBub3QgcGFydCBvZiB0aGUgcmVjb25jaWxpYXRpb24gbGlzdCBvZiBjaGlsZHJlbi5cbiAgLy8gRXZlbiBpZiB3ZSBhYm9ydCBhbmQgcmVyZWNvbmNpbGUgdGhlIGNoaWxkcmVuLCB0aGF0IHdpbGwgdHJ5IHRvIGh5ZHJhdGVcbiAgLy8gYWdhaW4gYW5kIHRoZSBub2RlcyBhcmUgc3RpbGwgaW4gdGhlIGhvc3QgdHJlZSBzbyB0aGVzZSB3aWxsIGJlXG4gIC8vIHJlY3JlYXRlZC5cbiAgaWYgKHJldHVybkZpYmVyLmxhc3RFZmZlY3QgIT09IG51bGwpIHtcbiAgICByZXR1cm5GaWJlci5sYXN0RWZmZWN0Lm5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgIHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybkZpYmVyLmZpcnN0RWZmZWN0ID0gcmV0dXJuRmliZXIubGFzdEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0Tm9uSHlkcmF0ZWRJbnN0YW5jZShyZXR1cm5GaWJlciwgZmliZXIpIHtcbiAgZmliZXIuZWZmZWN0VGFnIHw9IFBsYWNlbWVudDtcbiAge1xuICAgIHN3aXRjaCAocmV0dXJuRmliZXIudGFnKSB7XG4gICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHBhcmVudENvbnRhaW5lciA9IHJldHVybkZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgICAgIHZhciB0eXBlID0gZmliZXIudHlwZTtcbiAgICAgICAgICAgICAgdmFyIHByb3BzID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlKHBhcmVudENvbnRhaW5lciwgdHlwZSwgcHJvcHMpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgICAgICAgICAgIHZhciB0ZXh0ID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZShwYXJlbnRDb250YWluZXIsIHRleHQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBwYXJlbnRUeXBlID0gcmV0dXJuRmliZXIudHlwZTtcbiAgICAgICAgICB2YXIgcGFyZW50UHJvcHMgPSByZXR1cm5GaWJlci5tZW1vaXplZFByb3BzO1xuICAgICAgICAgIHZhciBwYXJlbnRJbnN0YW5jZSA9IHJldHVybkZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICAgICAgICB2YXIgX3R5cGUgPSBmaWJlci50eXBlO1xuICAgICAgICAgICAgICB2YXIgX3Byb3BzID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlKHBhcmVudFR5cGUsIHBhcmVudFByb3BzLCBwYXJlbnRJbnN0YW5jZSwgX3R5cGUsIF9wcm9wcyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgICAgICAgICAgdmFyIF90ZXh0ID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZShwYXJlbnRUeXBlLCBwYXJlbnRQcm9wcywgcGFyZW50SW5zdGFuY2UsIF90ZXh0KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm47XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRyeUh5ZHJhdGUoZmliZXIsIG5leHRJbnN0YW5jZSkge1xuICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIHR5cGUgPSBmaWJlci50eXBlO1xuICAgICAgICB2YXIgcHJvcHMgPSBmaWJlci5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGNhbkh5ZHJhdGVJbnN0YW5jZShuZXh0SW5zdGFuY2UsIHR5cGUsIHByb3BzKTtcbiAgICAgICAgaWYgKGluc3RhbmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgZmliZXIuc3RhdGVOb2RlID0gaW5zdGFuY2U7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgICB7XG4gICAgICAgIHZhciB0ZXh0ID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICB2YXIgdGV4dEluc3RhbmNlID0gY2FuSHlkcmF0ZVRleHRJbnN0YW5jZShuZXh0SW5zdGFuY2UsIHRleHQpO1xuICAgICAgICBpZiAodGV4dEluc3RhbmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgZmliZXIuc3RhdGVOb2RlID0gdGV4dEluc3RhbmNlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlKGZpYmVyKSB7XG4gIGlmICghaXNIeWRyYXRpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5leHRJbnN0YW5jZSA9IG5leHRIeWRyYXRhYmxlSW5zdGFuY2U7XG4gIGlmICghbmV4dEluc3RhbmNlKSB7XG4gICAgLy8gTm90aGluZyB0byBoeWRyYXRlLiBNYWtlIGl0IGFuIGluc2VydGlvbi5cbiAgICBpbnNlcnROb25IeWRyYXRlZEluc3RhbmNlKGh5ZHJhdGlvblBhcmVudEZpYmVyLCBmaWJlcik7XG4gICAgaXNIeWRyYXRpbmcgPSBmYWxzZTtcbiAgICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IGZpYmVyO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgZmlyc3RBdHRlbXB0ZWRJbnN0YW5jZSA9IG5leHRJbnN0YW5jZTtcbiAgaWYgKCF0cnlIeWRyYXRlKGZpYmVyLCBuZXh0SW5zdGFuY2UpKSB7XG4gICAgLy8gSWYgd2UgY2FuJ3QgaHlkcmF0ZSB0aGlzIGluc3RhbmNlIGxldCdzIHRyeSB0aGUgbmV4dCBvbmUuXG4gICAgLy8gV2UgdXNlIHRoaXMgYXMgYSBoZXVyaXN0aWMuIEl0J3MgYmFzZWQgb24gaW50dWl0aW9uIGFuZCBub3QgZGF0YSBzbyBpdFxuICAgIC8vIG1pZ2h0IGJlIGZsYXdlZCBvciB1bm5lY2Vzc2FyeS5cbiAgICBuZXh0SW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcoZmlyc3RBdHRlbXB0ZWRJbnN0YW5jZSk7XG4gICAgaWYgKCFuZXh0SW5zdGFuY2UgfHwgIXRyeUh5ZHJhdGUoZmliZXIsIG5leHRJbnN0YW5jZSkpIHtcbiAgICAgIC8vIE5vdGhpbmcgdG8gaHlkcmF0ZS4gTWFrZSBpdCBhbiBpbnNlcnRpb24uXG4gICAgICBpbnNlcnROb25IeWRyYXRlZEluc3RhbmNlKGh5ZHJhdGlvblBhcmVudEZpYmVyLCBmaWJlcik7XG4gICAgICBpc0h5ZHJhdGluZyA9IGZhbHNlO1xuICAgICAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBmaWJlcjtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gV2UgbWF0Y2hlZCB0aGUgbmV4dCBvbmUsIHdlJ2xsIG5vdyBhc3N1bWUgdGhhdCB0aGUgZmlyc3Qgb25lIHdhc1xuICAgIC8vIHN1cGVyZmx1b3VzIGFuZCB3ZSdsbCBkZWxldGUgaXQuIFNpbmNlIHdlIGNhbid0IGVhZ2VybHkgZGVsZXRlIGl0XG4gICAgLy8gd2UnbGwgaGF2ZSB0byBzY2hlZHVsZSBhIGRlbGV0aW9uLiBUbyBkbyB0aGF0LCB0aGlzIG5vZGUgbmVlZHMgYSBkdW1teVxuICAgIC8vIGZpYmVyIGFzc29jaWF0ZWQgd2l0aCBpdC5cbiAgICBkZWxldGVIeWRyYXRhYmxlSW5zdGFuY2UoaHlkcmF0aW9uUGFyZW50RmliZXIsIGZpcnN0QXR0ZW1wdGVkSW5zdGFuY2UpO1xuICB9XG4gIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gZmliZXI7XG4gIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZChuZXh0SW5zdGFuY2UpO1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlKGZpYmVyLCByb290Q29udGFpbmVySW5zdGFuY2UsIGhvc3RDb250ZXh0KSB7XG4gIGlmICghc3VwcG9ydHNIeWRyYXRpb24pIHtcbiAgICBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlKCkgdG8gbmV2ZXIgYmUgY2FsbGVkLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICB9XG5cbiAgdmFyIGluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlO1xuICB2YXIgdXBkYXRlUGF5bG9hZCA9IGh5ZHJhdGVJbnN0YW5jZShpbnN0YW5jZSwgZmliZXIudHlwZSwgZmliZXIubWVtb2l6ZWRQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCwgZmliZXIpO1xuICAvLyBUT0RPOiBUeXBlIHRoaXMgc3BlY2lmaWMgdG8gdGhpcyB0eXBlIG9mIGNvbXBvbmVudC5cbiAgZmliZXIudXBkYXRlUXVldWUgPSB1cGRhdGVQYXlsb2FkO1xuICAvLyBJZiB0aGUgdXBkYXRlIHBheWxvYWQgaW5kaWNhdGVzIHRoYXQgdGhlcmUgaXMgYSBjaGFuZ2Ugb3IgaWYgdGhlcmVcbiAgLy8gaXMgYSBuZXcgcmVmIHdlIG1hcmsgdGhpcyBhcyBhbiB1cGRhdGUuXG4gIGlmICh1cGRhdGVQYXlsb2FkICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZShmaWJlcikge1xuICBpZiAoIXN1cHBvcnRzSHlkcmF0aW9uKSB7XG4gICAgaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgcHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UoKSB0byBuZXZlciBiZSBjYWxsZWQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gIH1cblxuICB2YXIgdGV4dEluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlO1xuICB2YXIgdGV4dENvbnRlbnQgPSBmaWJlci5tZW1vaXplZFByb3BzO1xuICB2YXIgc2hvdWxkVXBkYXRlID0gaHlkcmF0ZVRleHRJbnN0YW5jZSh0ZXh0SW5zdGFuY2UsIHRleHRDb250ZW50LCBmaWJlcik7XG4gIHtcbiAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICAvLyBXZSBhc3N1bWUgdGhhdCBwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSBpcyBjYWxsZWQgaW4gYSBjb250ZXh0IHdoZXJlIHRoZVxuICAgICAgLy8gaHlkcmF0aW9uIHBhcmVudCBpcyB0aGUgcGFyZW50IGhvc3QgY29tcG9uZW50IG9mIHRoaXMgaG9zdCB0ZXh0LlxuICAgICAgdmFyIHJldHVybkZpYmVyID0gaHlkcmF0aW9uUGFyZW50RmliZXI7XG4gICAgICBpZiAocmV0dXJuRmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgc3dpdGNoIChyZXR1cm5GaWJlci50YWcpIHtcbiAgICAgICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB2YXIgcGFyZW50Q29udGFpbmVyID0gcmV0dXJuRmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICAgIGRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UocGFyZW50Q29udGFpbmVyLCB0ZXh0SW5zdGFuY2UsIHRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB2YXIgcGFyZW50VHlwZSA9IHJldHVybkZpYmVyLnR5cGU7XG4gICAgICAgICAgICAgIHZhciBwYXJlbnRQcm9wcyA9IHJldHVybkZpYmVyLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICAgIHZhciBwYXJlbnRJbnN0YW5jZSA9IHJldHVybkZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZShwYXJlbnRUeXBlLCBwYXJlbnRQcm9wcywgcGFyZW50SW5zdGFuY2UsIHRleHRJbnN0YW5jZSwgdGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gc2hvdWxkVXBkYXRlO1xufVxuXG5mdW5jdGlvbiBwb3BUb05leHRIb3N0UGFyZW50KGZpYmVyKSB7XG4gIHZhciBwYXJlbnQgPSBmaWJlci5yZXR1cm47XG4gIHdoaWxlIChwYXJlbnQgIT09IG51bGwgJiYgcGFyZW50LnRhZyAhPT0gSG9zdENvbXBvbmVudCAmJiBwYXJlbnQudGFnICE9PSBIb3N0Um9vdCkge1xuICAgIHBhcmVudCA9IHBhcmVudC5yZXR1cm47XG4gIH1cbiAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBwYXJlbnQ7XG59XG5cbmZ1bmN0aW9uIHBvcEh5ZHJhdGlvblN0YXRlKGZpYmVyKSB7XG4gIGlmICghc3VwcG9ydHNIeWRyYXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGZpYmVyICE9PSBoeWRyYXRpb25QYXJlbnRGaWJlcikge1xuICAgIC8vIFdlJ3JlIGRlZXBlciB0aGFuIHRoZSBjdXJyZW50IGh5ZHJhdGlvbiBjb250ZXh0LCBpbnNpZGUgYW4gaW5zZXJ0ZWRcbiAgICAvLyB0cmVlLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoIWlzSHlkcmF0aW5nKSB7XG4gICAgLy8gSWYgd2UncmUgbm90IGN1cnJlbnRseSBoeWRyYXRpbmcgYnV0IHdlJ3JlIGluIGEgaHlkcmF0aW9uIGNvbnRleHQsIHRoZW5cbiAgICAvLyB3ZSB3ZXJlIGFuIGluc2VydGlvbiBhbmQgbm93IG5lZWQgdG8gcG9wIHVwIHJlZW50ZXIgaHlkcmF0aW9uIG9mIG91clxuICAgIC8vIHNpYmxpbmdzLlxuICAgIHBvcFRvTmV4dEhvc3RQYXJlbnQoZmliZXIpO1xuICAgIGlzSHlkcmF0aW5nID0gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgdHlwZSA9IGZpYmVyLnR5cGU7XG5cbiAgLy8gSWYgd2UgaGF2ZSBhbnkgcmVtYWluaW5nIGh5ZHJhdGFibGUgbm9kZXMsIHdlIG5lZWQgdG8gZGVsZXRlIHRoZW0gbm93LlxuICAvLyBXZSBvbmx5IGRvIHRoaXMgZGVlcGVyIHRoYW4gaGVhZCBhbmQgYm9keSBzaW5jZSB0aGV5IHRlbmQgdG8gaGF2ZSByYW5kb21cbiAgLy8gb3RoZXIgbm9kZXMgaW4gdGhlbS4gV2UgYWxzbyBpZ25vcmUgY29tcG9uZW50cyB3aXRoIHB1cmUgdGV4dCBjb250ZW50IGluXG4gIC8vIHNpZGUgb2YgdGhlbS5cbiAgLy8gVE9ETzogQmV0dGVyIGhldXJpc3RpYy5cbiAgaWYgKGZpYmVyLnRhZyAhPT0gSG9zdENvbXBvbmVudCB8fCB0eXBlICE9PSAnaGVhZCcgJiYgdHlwZSAhPT0gJ2JvZHknICYmICFzaG91bGRTZXRUZXh0Q29udGVudCh0eXBlLCBmaWJlci5tZW1vaXplZFByb3BzKSkge1xuICAgIHZhciBuZXh0SW5zdGFuY2UgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuICAgIHdoaWxlIChuZXh0SW5zdGFuY2UpIHtcbiAgICAgIGRlbGV0ZUh5ZHJhdGFibGVJbnN0YW5jZShmaWJlciwgbmV4dEluc3RhbmNlKTtcbiAgICAgIG5leHRJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlU2libGluZyhuZXh0SW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIHBvcFRvTmV4dEhvc3RQYXJlbnQoZmliZXIpO1xuICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gaHlkcmF0aW9uUGFyZW50RmliZXIgPyBnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcoZmliZXIuc3RhdGVOb2RlKSA6IG51bGw7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXNldEh5ZHJhdGlvblN0YXRlKCkge1xuICBpZiAoIXN1cHBvcnRzSHlkcmF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBudWxsO1xuICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gbnVsbDtcbiAgaXNIeWRyYXRpbmcgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVhZExhenlDb21wb25lbnRUeXBlKGxhenlDb21wb25lbnQpIHtcbiAgdmFyIHN0YXR1cyA9IGxhenlDb21wb25lbnQuX3N0YXR1cztcbiAgdmFyIHJlc3VsdCA9IGxhenlDb21wb25lbnQuX3Jlc3VsdDtcbiAgc3dpdGNoIChzdGF0dXMpIHtcbiAgICBjYXNlIFJlc29sdmVkOlxuICAgICAge1xuICAgICAgICB2YXIgQ29tcG9uZW50ID0gcmVzdWx0O1xuICAgICAgICByZXR1cm4gQ29tcG9uZW50O1xuICAgICAgfVxuICAgIGNhc2UgUmVqZWN0ZWQ6XG4gICAgICB7XG4gICAgICAgIHZhciBlcnJvciA9IHJlc3VsdDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgY2FzZSBQZW5kaW5nOlxuICAgICAge1xuICAgICAgICB2YXIgdGhlbmFibGUgPSByZXN1bHQ7XG4gICAgICAgIHRocm93IHRoZW5hYmxlO1xuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICB7XG4gICAgICAgIGxhenlDb21wb25lbnQuX3N0YXR1cyA9IFBlbmRpbmc7XG4gICAgICAgIHZhciBjdG9yID0gbGF6eUNvbXBvbmVudC5fY3RvcjtcbiAgICAgICAgdmFyIF90aGVuYWJsZSA9IGN0b3IoKTtcbiAgICAgICAgX3RoZW5hYmxlLnRoZW4oZnVuY3Rpb24gKG1vZHVsZU9iamVjdCkge1xuICAgICAgICAgIGlmIChsYXp5Q29tcG9uZW50Ll9zdGF0dXMgPT09IFBlbmRpbmcpIHtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0RXhwb3J0ID0gbW9kdWxlT2JqZWN0LmRlZmF1bHQ7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlmIChkZWZhdWx0RXhwb3J0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB3YXJuaW5nJDEoZmFsc2UsICdsYXp5OiBFeHBlY3RlZCB0aGUgcmVzdWx0IG9mIGEgZHluYW1pYyBpbXBvcnQoKSBjYWxsLiAnICsgJ0luc3RlYWQgcmVjZWl2ZWQ6ICVzXFxuXFxuWW91ciBjb2RlIHNob3VsZCBsb29rIGxpa2U6IFxcbiAgJyArIFwiY29uc3QgTXlDb21wb25lbnQgPSBsYXp5KCgpID0+IGltcG9ydCgnLi9NeUNvbXBvbmVudCcpKVwiLCBtb2R1bGVPYmplY3QpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXp5Q29tcG9uZW50Ll9zdGF0dXMgPSBSZXNvbHZlZDtcbiAgICAgICAgICAgIGxhenlDb21wb25lbnQuX3Jlc3VsdCA9IGRlZmF1bHRFeHBvcnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAobGF6eUNvbXBvbmVudC5fc3RhdHVzID09PSBQZW5kaW5nKSB7XG4gICAgICAgICAgICBsYXp5Q29tcG9uZW50Ll9zdGF0dXMgPSBSZWplY3RlZDtcbiAgICAgICAgICAgIGxhenlDb21wb25lbnQuX3Jlc3VsdCA9IGVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGxhenlDb21wb25lbnQuX3Jlc3VsdCA9IF90aGVuYWJsZTtcbiAgICAgICAgdGhyb3cgX3RoZW5hYmxlO1xuICAgICAgfVxuICB9XG59XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciQzID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXI7XG5cbnZhciBkaWRXYXJuQWJvdXRCYWRDbGFzcyA9IHZvaWQgMDtcbnZhciBkaWRXYXJuQWJvdXRDb250ZXh0VHlwZU9uRnVuY3Rpb25Db21wb25lbnQgPSB2b2lkIDA7XG52YXIgZGlkV2FybkFib3V0R2V0RGVyaXZlZFN0YXRlT25GdW5jdGlvbkNvbXBvbmVudCA9IHZvaWQgMDtcbnZhciBkaWRXYXJuQWJvdXRGdW5jdGlvblJlZnMgPSB2b2lkIDA7XG5cbntcbiAgZGlkV2FybkFib3V0QmFkQ2xhc3MgPSB7fTtcbiAgZGlkV2FybkFib3V0Q29udGV4dFR5cGVPbkZ1bmN0aW9uQ29tcG9uZW50ID0ge307XG4gIGRpZFdhcm5BYm91dEdldERlcml2ZWRTdGF0ZU9uRnVuY3Rpb25Db21wb25lbnQgPSB7fTtcbiAgZGlkV2FybkFib3V0RnVuY3Rpb25SZWZzID0ge307XG59XG5cbmZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIGlmIChjdXJyZW50JCQxID09PSBudWxsKSB7XG4gICAgLy8gSWYgdGhpcyBpcyBhIGZyZXNoIG5ldyBjb21wb25lbnQgdGhhdCBoYXNuJ3QgYmVlbiByZW5kZXJlZCB5ZXQsIHdlXG4gICAgLy8gd29uJ3QgdXBkYXRlIGl0cyBjaGlsZCBzZXQgYnkgYXBwbHlpbmcgbWluaW1hbCBzaWRlLWVmZmVjdHMuIEluc3RlYWQsXG4gICAgLy8gd2Ugd2lsbCBhZGQgdGhlbSBhbGwgdG8gdGhlIGNoaWxkIGJlZm9yZSBpdCBnZXRzIHJlbmRlcmVkLiBUaGF0IG1lYW5zXG4gICAgLy8gd2UgY2FuIG9wdGltaXplIHRoaXMgcmVjb25jaWxpYXRpb24gcGFzcyBieSBub3QgdHJhY2tpbmcgc2lkZS1lZmZlY3RzLlxuICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gbW91bnRDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgbmV4dENoaWxkcmVuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhlIGN1cnJlbnQgY2hpbGQgaXMgdGhlIHNhbWUgYXMgdGhlIHdvcmsgaW4gcHJvZ3Jlc3MsIGl0IG1lYW5zIHRoYXRcbiAgICAvLyB3ZSBoYXZlbid0IHlldCBzdGFydGVkIGFueSB3b3JrIG9uIHRoZXNlIGNoaWxkcmVuLiBUaGVyZWZvcmUsIHdlIHVzZVxuICAgIC8vIHRoZSBjbG9uZSBhbGdvcml0aG0gdG8gY3JlYXRlIGEgY29weSBvZiBhbGwgdGhlIGN1cnJlbnQgY2hpbGRyZW4uXG5cbiAgICAvLyBJZiB3ZSBoYWQgYW55IHByb2dyZXNzZWQgd29yayBhbHJlYWR5LCB0aGF0IGlzIGludmFsaWQgYXQgdGhpcyBwb2ludCBzb1xuICAgIC8vIGxldCdzIHRocm93IGl0IG91dC5cbiAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBjdXJyZW50JCQxLmNoaWxkLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JjZVVubW91bnRDdXJyZW50QW5kUmVjb25jaWxlKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIC8vIFRoaXMgZnVuY3Rpb24gaXMgZm9yayBvZiByZWNvbmNpbGVDaGlsZHJlbi4gSXQncyB1c2VkIGluIGNhc2VzIHdoZXJlIHdlXG4gIC8vIHdhbnQgdG8gcmVjb25jaWxlIHdpdGhvdXQgbWF0Y2hpbmcgYWdhaW5zdCB0aGUgZXhpc3Rpbmcgc2V0LiBUaGlzIGhhcyB0aGVcbiAgLy8gZWZmZWN0IG9mIGFsbCBjdXJyZW50IGNoaWxkcmVuIGJlaW5nIHVubW91bnRlZDsgZXZlbiBpZiB0aGUgdHlwZSBhbmQga2V5XG4gIC8vIGFyZSB0aGUgc2FtZSwgdGhlIG9sZCBjaGlsZCBpcyB1bm1vdW50ZWQgYW5kIGEgbmV3IGNoaWxkIGlzIGNyZWF0ZWQuXG4gIC8vXG4gIC8vIFRvIGRvIHRoaXMsIHdlJ3JlIGdvaW5nIHRvIGdvIHRocm91Z2ggdGhlIHJlY29uY2lsZSBhbGdvcml0aG0gdHdpY2UuIEluXG4gIC8vIHRoZSBmaXJzdCBwYXNzLCB3ZSBzY2hlZHVsZSBhIGRlbGV0aW9uIGZvciBhbGwgdGhlIGN1cnJlbnQgY2hpbGRyZW4gYnlcbiAgLy8gcGFzc2luZyBudWxsLlxuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBjdXJyZW50JCQxLmNoaWxkLCBudWxsLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIC8vIEluIHRoZSBzZWNvbmQgcGFzcywgd2UgbW91bnQgdGhlIG5ldyBjaGlsZHJlbi4gVGhlIHRyaWNrIGhlcmUgaXMgdGhhdCB3ZVxuICAvLyBwYXNzIG51bGwgaW4gcGxhY2Ugb2Ygd2hlcmUgd2UgdXN1YWxseSBwYXNzIHRoZSBjdXJyZW50IGNoaWxkIHNldC4gVGhpcyBoYXNcbiAgLy8gdGhlIGVmZmVjdCBvZiByZW1vdW50aW5nIGFsbCBjaGlsZHJlbiByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlaXIgdGhlaXJcbiAgLy8gaWRlbnRpdHkgbWF0Y2hlcy5cbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgbmV4dENoaWxkcmVuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUZvcndhcmRSZWYoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHR5cGUsIG5leHRQcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIHJlbmRlciA9IHR5cGUucmVuZGVyO1xuICB2YXIgcmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICBpZiAoaGFzQ29udGV4dENoYW5nZWQoKSkge1xuICAgIC8vIE5vcm1hbGx5IHdlIGNhbiBiYWlsIG91dCBvbiBwcm9wcyBlcXVhbGl0eSBidXQgaWYgY29udGV4dCBoYXMgY2hhbmdlZFxuICAgIC8vIHdlIGRvbid0IGRvIHRoZSBiYWlsb3V0IGFuZCB3ZSBoYXZlIHRvIHJldXNlIGV4aXN0aW5nIHByb3BzIGluc3RlYWQuXG4gIH0gZWxzZSBpZiAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9PT0gbmV4dFByb3BzKSB7XG4gICAgdmFyIGN1cnJlbnRSZWYgPSBjdXJyZW50JCQxICE9PSBudWxsID8gY3VycmVudCQkMS5yZWYgOiBudWxsO1xuICAgIGlmIChyZWYgPT09IGN1cnJlbnRSZWYpIHtcbiAgICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG5leHRDaGlsZHJlbiA9IHZvaWQgMDtcbiAge1xuICAgIFJlYWN0Q3VycmVudE93bmVyJDMuY3VycmVudCA9IHdvcmtJblByb2dyZXNzO1xuICAgIHNldEN1cnJlbnRQaGFzZSgncmVuZGVyJyk7XG4gICAgbmV4dENoaWxkcmVuID0gcmVuZGVyKG5leHRQcm9wcywgcmVmKTtcbiAgICBzZXRDdXJyZW50UGhhc2UobnVsbCk7XG4gIH1cblxuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlTWVtb0NvbXBvbmVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBuZXh0UHJvcHMsIHVwZGF0ZUV4cGlyYXRpb25UaW1lLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICBpZiAoY3VycmVudCQkMSA9PT0gbnVsbCkge1xuICAgIHZhciB0eXBlID0gQ29tcG9uZW50LnR5cGU7XG4gICAgaWYgKGlzU2ltcGxlRnVuY3Rpb25Db21wb25lbnQodHlwZSkgJiYgQ29tcG9uZW50LmNvbXBhcmUgPT09IG51bGwpIHtcbiAgICAgIC8vIElmIHRoaXMgaXMgYSBwbGFpbiBmdW5jdGlvbiBjb21wb25lbnQgd2l0aG91dCBkZWZhdWx0IHByb3BzLFxuICAgICAgLy8gYW5kIHdpdGggb25seSB0aGUgZGVmYXVsdCBzaGFsbG93IGNvbXBhcmlzb24sIHdlIHVwZ3JhZGUgaXRcbiAgICAgIC8vIHRvIGEgU2ltcGxlTWVtb0NvbXBvbmVudCB0byBhbGxvdyBmYXN0IHBhdGggdXBkYXRlcy5cbiAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IFNpbXBsZU1lbW9Db21wb25lbnQ7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlID0gdHlwZTtcbiAgICAgIHJldHVybiB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCB0eXBlLCBuZXh0UHJvcHMsIHVwZGF0ZUV4cGlyYXRpb25UaW1lLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgfVxuICAgIHZhciBjaGlsZCA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhDb21wb25lbnQudHlwZSwgbnVsbCwgbmV4dFByb3BzLCBudWxsLCB3b3JrSW5Qcm9ncmVzcy5tb2RlLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2hpbGQucmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICAgIGNoaWxkLnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gY2hpbGQ7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG4gIHZhciBjdXJyZW50Q2hpbGQgPSBjdXJyZW50JCQxLmNoaWxkOyAvLyBUaGlzIGlzIGFsd2F5cyBleGFjdGx5IG9uZSBjaGlsZFxuICBpZiAodXBkYXRlRXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCB1cGRhdGVFeHBpcmF0aW9uVGltZSA+IHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gVGhpcyB3aWxsIGJlIHRoZSBwcm9wcyB3aXRoIHJlc29sdmVkIGRlZmF1bHRQcm9wcyxcbiAgICAvLyB1bmxpa2UgY3VycmVudC5tZW1vaXplZFByb3BzIHdoaWNoIHdpbGwgYmUgdGhlIHVucmVzb2x2ZWQgb25lcy5cbiAgICB2YXIgcHJldlByb3BzID0gY3VycmVudENoaWxkLm1lbW9pemVkUHJvcHM7XG4gICAgLy8gRGVmYXVsdCB0byBzaGFsbG93IGNvbXBhcmlzb25cbiAgICB2YXIgY29tcGFyZSA9IENvbXBvbmVudC5jb21wYXJlO1xuICAgIGNvbXBhcmUgPSBjb21wYXJlICE9PSBudWxsID8gY29tcGFyZSA6IHNoYWxsb3dFcXVhbDtcbiAgICBpZiAoY29tcGFyZShwcmV2UHJvcHMsIG5leHRQcm9wcykgJiYgY3VycmVudCQkMS5yZWYgPT09IHdvcmtJblByb2dyZXNzLnJlZikge1xuICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG4gIH1cbiAgdmFyIG5ld0NoaWxkID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoY3VycmVudENoaWxkLCBuZXh0UHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgbmV3Q2hpbGQucmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICBuZXdDaGlsZC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBuZXdDaGlsZDtcbiAgcmV0dXJuIG5ld0NoaWxkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgdXBkYXRlRXhwaXJhdGlvblRpbWUsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIGlmIChjdXJyZW50JCQxICE9PSBudWxsICYmICh1cGRhdGVFeHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IHVwZGF0ZUV4cGlyYXRpb25UaW1lID4gcmVuZGVyRXhwaXJhdGlvblRpbWUpKSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IGN1cnJlbnQkJDEubWVtb2l6ZWRQcm9wcztcbiAgICBpZiAoc2hhbGxvd0VxdWFsKHByZXZQcm9wcywgbmV4dFByb3BzKSAmJiBjdXJyZW50JCQxLnJlZiA9PT0gd29ya0luUHJvZ3Jlc3MucmVmKSB7XG4gICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUZyYWdtZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICB2YXIgbmV4dENoaWxkcmVuID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlTW9kZShjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIG5leHRDaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbjtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVByb2ZpbGVyKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGU7XG4gIH1cbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgdmFyIG5leHRDaGlsZHJlbiA9IG5leHRQcm9wcy5jaGlsZHJlbjtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIG1hcmtSZWYoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgdmFyIHJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgaWYgKGN1cnJlbnQkJDEgPT09IG51bGwgJiYgcmVmICE9PSBudWxsIHx8IGN1cnJlbnQkJDEgIT09IG51bGwgJiYgY3VycmVudCQkMS5yZWYgIT09IHJlZikge1xuICAgIC8vIFNjaGVkdWxlIGEgUmVmIGVmZmVjdFxuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBSZWY7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICB2YXIgdW5tYXNrZWRDb250ZXh0ID0gZ2V0VW5tYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHRydWUpO1xuICB2YXIgY29udGV4dCA9IGdldE1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCk7XG5cbiAgdmFyIG5leHRDaGlsZHJlbiA9IHZvaWQgMDtcbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAge1xuICAgIFJlYWN0Q3VycmVudE93bmVyJDMuY3VycmVudCA9IHdvcmtJblByb2dyZXNzO1xuICAgIHNldEN1cnJlbnRQaGFzZSgncmVuZGVyJyk7XG4gICAgbmV4dENoaWxkcmVuID0gQ29tcG9uZW50KG5leHRQcm9wcywgY29udGV4dCk7XG4gICAgc2V0Q3VycmVudFBoYXNlKG51bGwpO1xuICB9XG5cbiAgLy8gUmVhY3QgRGV2VG9vbHMgcmVhZHMgdGhpcyBmbGFnLlxuICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gUGVyZm9ybWVkV29yaztcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgLy8gUHVzaCBjb250ZXh0IHByb3ZpZGVycyBlYXJseSB0byBwcmV2ZW50IGNvbnRleHQgc3RhY2sgbWlzbWF0Y2hlcy5cbiAgLy8gRHVyaW5nIG1vdW50aW5nIHdlIGRvbid0IGtub3cgdGhlIGNoaWxkIGNvbnRleHQgeWV0IGFzIHRoZSBpbnN0YW5jZSBkb2Vzbid0IGV4aXN0LlxuICAvLyBXZSB3aWxsIGludmFsaWRhdGUgdGhlIGNoaWxkIGNvbnRleHQgaW4gZmluaXNoQ2xhc3NDb21wb25lbnQoKSByaWdodCBhZnRlciByZW5kZXJpbmcuXG4gIHZhciBoYXNDb250ZXh0ID0gdm9pZCAwO1xuICBpZiAoaXNDb250ZXh0UHJvdmlkZXIoQ29tcG9uZW50KSkge1xuICAgIGhhc0NvbnRleHQgPSB0cnVlO1xuICAgIHB1c2hDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICB9IGVsc2Uge1xuICAgIGhhc0NvbnRleHQgPSBmYWxzZTtcbiAgfVxuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuXG4gIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgdmFyIHNob3VsZFVwZGF0ZSA9IHZvaWQgMDtcbiAgaWYgKGluc3RhbmNlID09PSBudWxsKSB7XG4gICAgaWYgKGN1cnJlbnQkJDEgIT09IG51bGwpIHtcbiAgICAgIC8vIEFuIGNsYXNzIGNvbXBvbmVudCB3aXRob3V0IGFuIGluc3RhbmNlIG9ubHkgbW91bnRzIGlmIGl0IHN1c3BlbmRlZFxuICAgICAgLy8gaW5zaWRlIGEgbm9uLSBjb25jdXJyZW50IHRyZWUsIGluIGFuIGluY29uc2lzdGVudCBzdGF0ZS4gV2Ugd2FudCB0b1xuICAgICAgLy8gdHJlZSBpdCBsaWtlIGEgbmV3IG1vdW50LCBldmVuIHRob3VnaCBhbiBlbXB0eSB2ZXJzaW9uIG9mIGl0IGFscmVhZHlcbiAgICAgIC8vIGNvbW1pdHRlZC4gRGlzY29ubmVjdCB0aGUgYWx0ZXJuYXRlIHBvaW50ZXJzLlxuICAgICAgY3VycmVudCQkMS5hbHRlcm5hdGUgPSBudWxsO1xuICAgICAgd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlID0gbnVsbDtcbiAgICAgIC8vIFNpbmNlIHRoaXMgaXMgY29uY2VwdHVhbGx5IGEgbmV3IGZpYmVyLCBzY2hlZHVsZSBhIFBsYWNlbWVudCBlZmZlY3RcbiAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQbGFjZW1lbnQ7XG4gICAgfVxuICAgIC8vIEluIHRoZSBpbml0aWFsIHBhc3Mgd2UgbWlnaHQgbmVlZCB0byBjb25zdHJ1Y3QgdGhlIGluc3RhbmNlLlxuICAgIGNvbnN0cnVjdENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgbW91bnRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIHNob3VsZFVwZGF0ZSA9IHRydWU7XG4gIH0gZWxzZSBpZiAoY3VycmVudCQkMSA9PT0gbnVsbCkge1xuICAgIC8vIEluIGEgcmVzdW1lLCB3ZSdsbCBhbHJlYWR5IGhhdmUgYW4gaW5zdGFuY2Ugd2UgY2FuIHJldXNlLlxuICAgIHNob3VsZFVwZGF0ZSA9IHJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBuZXh0UHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgfSBlbHNlIHtcbiAgICBzaG91bGRVcGRhdGUgPSB1cGRhdGVDbGFzc0luc3RhbmNlKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICB9XG4gIHJldHVybiBmaW5pc2hDbGFzc0NvbXBvbmVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBzaG91bGRVcGRhdGUsIGhhc0NvbnRleHQsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbn1cblxuZnVuY3Rpb24gZmluaXNoQ2xhc3NDb21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgc2hvdWxkVXBkYXRlLCBoYXNDb250ZXh0LCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAvLyBSZWZzIHNob3VsZCB1cGRhdGUgZXZlbiBpZiBzaG91bGRDb21wb25lbnRVcGRhdGUgcmV0dXJucyBmYWxzZVxuICBtYXJrUmVmKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzKTtcblxuICB2YXIgZGlkQ2FwdHVyZUVycm9yID0gKHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyAmIERpZENhcHR1cmUpICE9PSBOb0VmZmVjdDtcblxuICBpZiAoIXNob3VsZFVwZGF0ZSAmJiAhZGlkQ2FwdHVyZUVycm9yKSB7XG4gICAgLy8gQ29udGV4dCBwcm92aWRlcnMgc2hvdWxkIGRlZmVyIHRvIHNDVSBmb3IgcmVuZGVyaW5nXG4gICAgaWYgKGhhc0NvbnRleHQpIHtcbiAgICAgIGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIH1cblxuICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG5cbiAgLy8gUmVyZW5kZXJcbiAgUmVhY3RDdXJyZW50T3duZXIkMy5jdXJyZW50ID0gd29ya0luUHJvZ3Jlc3M7XG4gIHZhciBuZXh0Q2hpbGRyZW4gPSB2b2lkIDA7XG4gIGlmIChkaWRDYXB0dXJlRXJyb3IgJiYgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBJZiB3ZSBjYXB0dXJlZCBhbiBlcnJvciwgYnV0IGdldERlcml2ZWRTdGF0ZUZyb20gY2F0Y2ggaXMgbm90IGRlZmluZWQsXG4gICAgLy8gdW5tb3VudCBhbGwgdGhlIGNoaWxkcmVuLiBjb21wb25lbnREaWRDYXRjaCB3aWxsIHNjaGVkdWxlIGFuIHVwZGF0ZSB0b1xuICAgIC8vIHJlLXJlbmRlciBhIGZhbGxiYWNrLiBUaGlzIGlzIHRlbXBvcmFyeSB1bnRpbCB3ZSBtaWdyYXRlIGV2ZXJ5b25lIHRvXG4gICAgLy8gdGhlIG5ldyBBUEkuXG4gICAgLy8gVE9ETzogV2FybiBpbiBhIGZ1dHVyZSByZWxlYXNlLlxuICAgIG5leHRDaGlsZHJlbiA9IG51bGw7XG5cbiAgICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgICAgc3RvcFByb2ZpbGVyVGltZXJJZlJ1bm5pbmcod29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB7XG4gICAgICBzZXRDdXJyZW50UGhhc2UoJ3JlbmRlcicpO1xuICAgICAgbmV4dENoaWxkcmVuID0gaW5zdGFuY2UucmVuZGVyKCk7XG4gICAgICBpZiAoZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzIHx8IGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0c0ZvclN0cmljdE1vZGUgJiYgd29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdE1vZGUpIHtcbiAgICAgICAgaW5zdGFuY2UucmVuZGVyKCk7XG4gICAgICB9XG4gICAgICBzZXRDdXJyZW50UGhhc2UobnVsbCk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVhY3QgRGV2VG9vbHMgcmVhZHMgdGhpcyBmbGFnLlxuICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gUGVyZm9ybWVkV29yaztcbiAgaWYgKGN1cnJlbnQkJDEgIT09IG51bGwgJiYgZGlkQ2FwdHVyZUVycm9yKSB7XG4gICAgLy8gSWYgd2UncmUgcmVjb3ZlcmluZyBmcm9tIGFuIGVycm9yLCByZWNvbmNpbGUgd2l0aG91dCByZXVzaW5nIGFueSBvZlxuICAgIC8vIHRoZSBleGlzdGluZyBjaGlsZHJlbi4gQ29uY2VwdHVhbGx5LCB0aGUgbm9ybWFsIGNoaWxkcmVuIGFuZCB0aGUgY2hpbGRyZW5cbiAgICAvLyB0aGF0IGFyZSBzaG93biBvbiBlcnJvciBhcmUgdHdvIGRpZmZlcmVudCBzZXRzLCBzbyB3ZSBzaG91bGRuJ3QgcmV1c2VcbiAgICAvLyBub3JtYWwgY2hpbGRyZW4gZXZlbiBpZiB0aGVpciBpZGVudGl0aWVzIG1hdGNoLlxuICAgIGZvcmNlVW5tb3VudEN1cnJlbnRBbmRSZWNvbmNpbGUoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICB9IGVsc2Uge1xuICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgfVxuXG4gIC8vIE1lbW9pemUgc3RhdGUgdXNpbmcgdGhlIHZhbHVlcyB3ZSBqdXN0IHVzZWQgdG8gcmVuZGVyLlxuICAvLyBUT0RPOiBSZXN0cnVjdHVyZSBzbyB3ZSBuZXZlciByZWFkIHZhbHVlcyBmcm9tIHRoZSBpbnN0YW5jZS5cbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGluc3RhbmNlLnN0YXRlO1xuXG4gIC8vIFRoZSBjb250ZXh0IG1pZ2h0IGhhdmUgY2hhbmdlZCBzbyB3ZSBuZWVkIHRvIHJlY2FsY3VsYXRlIGl0LlxuICBpZiAoaGFzQ29udGV4dCkge1xuICAgIGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgdHJ1ZSk7XG4gIH1cblxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHB1c2hIb3N0Um9vdENvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgdmFyIHJvb3QgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gIGlmIChyb290LnBlbmRpbmdDb250ZXh0KSB7XG4gICAgcHVzaFRvcExldmVsQ29udGV4dE9iamVjdCh3b3JrSW5Qcm9ncmVzcywgcm9vdC5wZW5kaW5nQ29udGV4dCwgcm9vdC5wZW5kaW5nQ29udGV4dCAhPT0gcm9vdC5jb250ZXh0KTtcbiAgfSBlbHNlIGlmIChyb290LmNvbnRleHQpIHtcbiAgICAvLyBTaG91bGQgYWx3YXlzIGJlIHNldFxuICAgIHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3Qod29ya0luUHJvZ3Jlc3MsIHJvb3QuY29udGV4dCwgZmFsc2UpO1xuICB9XG4gIHB1c2hIb3N0Q29udGFpbmVyKHdvcmtJblByb2dyZXNzLCByb290LmNvbnRhaW5lckluZm8pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVIb3N0Um9vdChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgcHVzaEhvc3RSb290Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gIHZhciB1cGRhdGVRdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICAhKHVwZGF0ZVF1ZXVlICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ0lmIHRoZSByb290IGRvZXMgbm90IGhhdmUgYW4gdXBkYXRlUXVldWUsIHdlIHNob3VsZCBoYXZlIGFscmVhZHkgYmFpbGVkIG91dC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgdmFyIHByZXZTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIHZhciBwcmV2Q2hpbGRyZW4gPSBwcmV2U3RhdGUgIT09IG51bGwgPyBwcmV2U3RhdGUuZWxlbWVudCA6IG51bGw7XG4gIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgdXBkYXRlUXVldWUsIG5leHRQcm9wcywgbnVsbCwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICB2YXIgbmV4dFN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgLy8gQ2F1dGlvbjogUmVhY3QgRGV2VG9vbHMgY3VycmVudGx5IGRlcGVuZHMgb24gdGhpcyBwcm9wZXJ0eVxuICAvLyBiZWluZyBjYWxsZWQgXCJlbGVtZW50XCIuXG4gIHZhciBuZXh0Q2hpbGRyZW4gPSBuZXh0U3RhdGUuZWxlbWVudDtcbiAgaWYgKG5leHRDaGlsZHJlbiA9PT0gcHJldkNoaWxkcmVuKSB7XG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIHRoZSBzYW1lIGFzIGJlZm9yZSwgdGhhdCdzIGEgYmFpbG91dCBiZWNhdXNlIHdlIGhhZFxuICAgIC8vIG5vIHdvcmsgdGhhdCBleHBpcmVzIGF0IHRoaXMgdGltZS5cbiAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgfVxuICB2YXIgcm9vdCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgaWYgKChjdXJyZW50JCQxID09PSBudWxsIHx8IGN1cnJlbnQkJDEuY2hpbGQgPT09IG51bGwpICYmIHJvb3QuaHlkcmF0ZSAmJiBlbnRlckh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKSkge1xuICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYW55IGN1cnJlbnQgY2hpbGRyZW4gdGhpcyBtaWdodCBiZSB0aGUgZmlyc3QgcGFzcy5cbiAgICAvLyBXZSBhbHdheXMgdHJ5IHRvIGh5ZHJhdGUuIElmIHRoaXMgaXNuJ3QgYSBoeWRyYXRpb24gcGFzcyB0aGVyZSB3b24ndFxuICAgIC8vIGJlIGFueSBjaGlsZHJlbiB0byBoeWRyYXRlIHdoaWNoIGlzIGVmZmVjdGl2ZWx5IHRoZSBzYW1lIHRoaW5nIGFzXG4gICAgLy8gbm90IGh5ZHJhdGluZy5cblxuICAgIC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSB0cmFjayB0aGUgaG9zdCByb290IGFzIGEgcGxhY2VtZW50IHRvXG4gICAgLy8ga25vdyB0aGF0IHdlJ3JlIGN1cnJlbnRseSBpbiBhIG1vdW50aW5nIHN0YXRlLiBUaGF0IHdheSBpc01vdW50ZWRcbiAgICAvLyB3b3JrcyBhcyBleHBlY3RlZC4gV2UgbXVzdCByZXNldCB0aGlzIGJlZm9yZSBjb21taXR0aW5nLlxuICAgIC8vIFRPRE86IERlbGV0ZSB0aGlzIHdoZW4gd2UgZGVsZXRlIGlzTW91bnRlZCBhbmQgZmluZERPTU5vZGUuXG4gICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFBsYWNlbWVudDtcblxuICAgIC8vIEVuc3VyZSB0aGF0IGNoaWxkcmVuIG1vdW50IGludG8gdGhpcyByb290IHdpdGhvdXQgdHJhY2tpbmdcbiAgICAvLyBzaWRlLWVmZmVjdHMuIFRoaXMgZW5zdXJlcyB0aGF0IHdlIGRvbid0IHN0b3JlIFBsYWNlbWVudCBlZmZlY3RzIG9uXG4gICAgLy8gbm9kZXMgdGhhdCB3aWxsIGJlIGh5ZHJhdGVkLlxuICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gbW91bnRDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgbmV4dENoaWxkcmVuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gT3RoZXJ3aXNlIHJlc2V0IGh5ZHJhdGlvbiBzdGF0ZSBpbiBjYXNlIHdlIGFib3J0ZWQgYW5kIHJlc3VtZWQgYW5vdGhlclxuICAgIC8vIHJvb3QuXG4gICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIHJlc2V0SHlkcmF0aW9uU3RhdGUoKTtcbiAgfVxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUhvc3RDb21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHB1c2hIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgaWYgKGN1cnJlbnQkJDEgPT09IG51bGwpIHtcbiAgICB0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcyk7XG4gIH1cblxuICB2YXIgdHlwZSA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gIHZhciBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHZhciBwcmV2UHJvcHMgPSBjdXJyZW50JCQxICE9PSBudWxsID8gY3VycmVudCQkMS5tZW1vaXplZFByb3BzIDogbnVsbDtcblxuICB2YXIgbmV4dENoaWxkcmVuID0gbmV4dFByb3BzLmNoaWxkcmVuO1xuICB2YXIgaXNEaXJlY3RUZXh0Q2hpbGQgPSBzaG91bGRTZXRUZXh0Q29udGVudCh0eXBlLCBuZXh0UHJvcHMpO1xuXG4gIGlmIChpc0RpcmVjdFRleHRDaGlsZCkge1xuICAgIC8vIFdlIHNwZWNpYWwgY2FzZSBhIGRpcmVjdCB0ZXh0IGNoaWxkIG9mIGEgaG9zdCBub2RlLiBUaGlzIGlzIGEgY29tbW9uXG4gICAgLy8gY2FzZS4gV2Ugd29uJ3QgaGFuZGxlIGl0IGFzIGEgcmVpZmllZCBjaGlsZC4gV2Ugd2lsbCBpbnN0ZWFkIGhhbmRsZVxuICAgIC8vIHRoaXMgaW4gdGhlIGhvc3QgZW52aXJvbm1lbnQgdGhhdCBhbHNvIGhhdmUgYWNjZXNzIHRvIHRoaXMgcHJvcC4gVGhhdFxuICAgIC8vIGF2b2lkcyBhbGxvY2F0aW5nIGFub3RoZXIgSG9zdFRleHQgZmliZXIgYW5kIHRyYXZlcnNpbmcgaXQuXG4gICAgbmV4dENoaWxkcmVuID0gbnVsbDtcbiAgfSBlbHNlIGlmIChwcmV2UHJvcHMgIT09IG51bGwgJiYgc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgcHJldlByb3BzKSkge1xuICAgIC8vIElmIHdlJ3JlIHN3aXRjaGluZyBmcm9tIGEgZGlyZWN0IHRleHQgY2hpbGQgdG8gYSBub3JtYWwgY2hpbGQsIG9yIHRvXG4gICAgLy8gZW1wdHksIHdlIG5lZWQgdG8gc2NoZWR1bGUgdGhlIHRleHQgY29udGVudCB0byBiZSByZXNldC5cbiAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gQ29udGVudFJlc2V0O1xuICB9XG5cbiAgbWFya1JlZihjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgLy8gQ2hlY2sgdGhlIGhvc3QgY29uZmlnIHRvIHNlZSBpZiB0aGUgY2hpbGRyZW4gYXJlIG9mZnNjcmVlbi9oaWRkZW4uXG4gIGlmIChyZW5kZXJFeHBpcmF0aW9uVGltZSAhPT0gTmV2ZXIgJiYgd29ya0luUHJvZ3Jlc3MubW9kZSAmIENvbmN1cnJlbnRNb2RlICYmIHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUodHlwZSwgbmV4dFByb3BzKSkge1xuICAgIC8vIFNjaGVkdWxlIHRoaXMgZmliZXIgdG8gcmUtcmVuZGVyIGF0IG9mZnNjcmVlbiBwcmlvcml0eS4gVGhlbiBiYWlsb3V0LlxuICAgIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID0gTmV2ZXI7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlSG9zdFRleHQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgaWYgKGN1cnJlbnQkJDEgPT09IG51bGwpIHtcbiAgICB0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcyk7XG4gIH1cbiAgLy8gTm90aGluZyB0byBkbyBoZXJlLiBUaGlzIGlzIHRlcm1pbmFsLiBXZSdsbCBkbyB0aGUgY29tcGxldGlvbiBzdGVwXG4gIC8vIGltbWVkaWF0ZWx5IGFmdGVyLlxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZURlZmF1bHRQcm9wcyhDb21wb25lbnQsIGJhc2VQcm9wcykge1xuICBpZiAoQ29tcG9uZW50ICYmIENvbXBvbmVudC5kZWZhdWx0UHJvcHMpIHtcbiAgICAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHMuIFRha2VuIGZyb20gUmVhY3RFbGVtZW50XG4gICAgdmFyIHByb3BzID0gX2Fzc2lnbih7fSwgYmFzZVByb3BzKTtcbiAgICB2YXIgZGVmYXVsdFByb3BzID0gQ29tcG9uZW50LmRlZmF1bHRQcm9wcztcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cbiAgcmV0dXJuIGJhc2VQcm9wcztcbn1cblxuZnVuY3Rpb24gbW91bnRMYXp5Q29tcG9uZW50KF9jdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgZWxlbWVudFR5cGUsIHVwZGF0ZUV4cGlyYXRpb25UaW1lLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICBpZiAoX2N1cnJlbnQgIT09IG51bGwpIHtcbiAgICAvLyBBbiBsYXp5IGNvbXBvbmVudCBvbmx5IG1vdW50cyBpZiBpdCBzdXNwZW5kZWQgaW5zaWRlIGEgbm9uLVxuICAgIC8vIGNvbmN1cnJlbnQgdHJlZSwgaW4gYW4gaW5jb25zaXN0ZW50IHN0YXRlLiBXZSB3YW50IHRvIHRyZWUgaXQgbGlrZVxuICAgIC8vIGEgbmV3IG1vdW50LCBldmVuIHRob3VnaCBhbiBlbXB0eSB2ZXJzaW9uIG9mIGl0IGFscmVhZHkgY29tbWl0dGVkLlxuICAgIC8vIERpc2Nvbm5lY3QgdGhlIGFsdGVybmF0ZSBwb2ludGVycy5cbiAgICBfY3VycmVudC5hbHRlcm5hdGUgPSBudWxsO1xuICAgIHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IG51bGw7XG4gICAgLy8gU2luY2UgdGhpcyBpcyBjb25jZXB0dWFsbHkgYSBuZXcgZmliZXIsIHNjaGVkdWxlIGEgUGxhY2VtZW50IGVmZmVjdFxuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgcHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIC8vIFdlIGNhbid0IHN0YXJ0IGEgVXNlciBUaW1pbmcgbWVhc3VyZW1lbnQgd2l0aCBjb3JyZWN0IGxhYmVsIHlldC5cbiAgLy8gQ2FuY2VsIGFuZCByZXN1bWUgcmlnaHQgYWZ0ZXIgd2Uga25vdyB0aGUgdGFnLlxuICBjYW5jZWxXb3JrVGltZXIod29ya0luUHJvZ3Jlc3MpO1xuICB2YXIgQ29tcG9uZW50ID0gcmVhZExhenlDb21wb25lbnRUeXBlKGVsZW1lbnRUeXBlKTtcbiAgLy8gU3RvcmUgdGhlIHVud3JhcHBlZCBjb21wb25lbnQgaW4gdGhlIHR5cGUuXG4gIHdvcmtJblByb2dyZXNzLnR5cGUgPSBDb21wb25lbnQ7XG4gIHZhciByZXNvbHZlZFRhZyA9IHdvcmtJblByb2dyZXNzLnRhZyA9IHJlc29sdmVMYXp5Q29tcG9uZW50VGFnKENvbXBvbmVudCk7XG4gIHN0YXJ0V29ya1RpbWVyKHdvcmtJblByb2dyZXNzKTtcbiAgdmFyIHJlc29sdmVkUHJvcHMgPSByZXNvbHZlRGVmYXVsdFByb3BzKENvbXBvbmVudCwgcHJvcHMpO1xuICB2YXIgY2hpbGQgPSB2b2lkIDA7XG4gIHN3aXRjaCAocmVzb2x2ZWRUYWcpIHtcbiAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICBjaGlsZCA9IHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KG51bGwsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlc29sdmVkUHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgY2hpbGQgPSB1cGRhdGVDbGFzc0NvbXBvbmVudChudWxsLCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCByZXNvbHZlZFByb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIGNhc2UgRm9yd2FyZFJlZjpcbiAgICAgIHtcbiAgICAgICAgY2hpbGQgPSB1cGRhdGVGb3J3YXJkUmVmKG51bGwsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlc29sdmVkUHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBNZW1vQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICBjaGlsZCA9IHVwZGF0ZU1lbW9Db21wb25lbnQobnVsbCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcmVzb2x2ZURlZmF1bHRQcm9wcyhDb21wb25lbnQudHlwZSwgcmVzb2x2ZWRQcm9wcyksIC8vIFRoZSBpbm5lciB0eXBlIGNhbiBoYXZlIGRlZmF1bHRzIHRvb1xuICAgICAgICB1cGRhdGVFeHBpcmF0aW9uVGltZSwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAge1xuICAgICAgICAvLyBUaGlzIG1lc3NhZ2UgaW50ZW50aW9uYWxseSBkb2Vzbid0IG1ldGlvbiBGb3J3YXJkUmVmIG9yIE1lbW9Db21wb25lbnRcbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgZmFjdCB0aGF0IGl0J3MgYSBzZXBhcmF0ZSB0eXBlIG9mIHdvcmsgaXMgYW5cbiAgICAgICAgLy8gaW1wbGVtZW50YXRpb24gZGV0YWlsLlxuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdFbGVtZW50IHR5cGUgaXMgaW52YWxpZC4gUmVjZWl2ZWQgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG86ICVzLiBQcm9taXNlIGVsZW1lbnRzIG11c3QgcmVzb2x2ZSB0byBhIGNsYXNzIG9yIGZ1bmN0aW9uLicsIENvbXBvbmVudCk7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkO1xufVxuXG5mdW5jdGlvbiBtb3VudEluY29tcGxldGVDbGFzc0NvbXBvbmVudChfY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICBpZiAoX2N1cnJlbnQgIT09IG51bGwpIHtcbiAgICAvLyBBbiBpbmNvbXBsZXRlIGNvbXBvbmVudCBvbmx5IG1vdW50cyBpZiBpdCBzdXNwZW5kZWQgaW5zaWRlIGEgbm9uLVxuICAgIC8vIGNvbmN1cnJlbnQgdHJlZSwgaW4gYW4gaW5jb25zaXN0ZW50IHN0YXRlLiBXZSB3YW50IHRvIHRyZWUgaXQgbGlrZVxuICAgIC8vIGEgbmV3IG1vdW50LCBldmVuIHRob3VnaCBhbiBlbXB0eSB2ZXJzaW9uIG9mIGl0IGFscmVhZHkgY29tbWl0dGVkLlxuICAgIC8vIERpc2Nvbm5lY3QgdGhlIGFsdGVybmF0ZSBwb2ludGVycy5cbiAgICBfY3VycmVudC5hbHRlcm5hdGUgPSBudWxsO1xuICAgIHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IG51bGw7XG4gICAgLy8gU2luY2UgdGhpcyBpcyBjb25jZXB0dWFsbHkgYSBuZXcgZmliZXIsIHNjaGVkdWxlIGEgUGxhY2VtZW50IGVmZmVjdFxuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQbGFjZW1lbnQ7XG4gIH1cblxuICAvLyBQcm9tb3RlIHRoZSBmaWJlciB0byBhIGNsYXNzIGFuZCB0cnkgcmVuZGVyaW5nIGFnYWluLlxuICB3b3JrSW5Qcm9ncmVzcy50YWcgPSBDbGFzc0NvbXBvbmVudDtcblxuICAvLyBUaGUgcmVzdCBvZiB0aGlzIGZ1bmN0aW9uIGlzIGEgZm9yayBvZiBgdXBkYXRlQ2xhc3NDb21wb25lbnRgXG5cbiAgLy8gUHVzaCBjb250ZXh0IHByb3ZpZGVycyBlYXJseSB0byBwcmV2ZW50IGNvbnRleHQgc3RhY2sgbWlzbWF0Y2hlcy5cbiAgLy8gRHVyaW5nIG1vdW50aW5nIHdlIGRvbid0IGtub3cgdGhlIGNoaWxkIGNvbnRleHQgeWV0IGFzIHRoZSBpbnN0YW5jZSBkb2Vzbid0IGV4aXN0LlxuICAvLyBXZSB3aWxsIGludmFsaWRhdGUgdGhlIGNoaWxkIGNvbnRleHQgaW4gZmluaXNoQ2xhc3NDb21wb25lbnQoKSByaWdodCBhZnRlciByZW5kZXJpbmcuXG4gIHZhciBoYXNDb250ZXh0ID0gdm9pZCAwO1xuICBpZiAoaXNDb250ZXh0UHJvdmlkZXIoQ29tcG9uZW50KSkge1xuICAgIGhhc0NvbnRleHQgPSB0cnVlO1xuICAgIHB1c2hDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICB9IGVsc2Uge1xuICAgIGhhc0NvbnRleHQgPSBmYWxzZTtcbiAgfVxuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuXG4gIGNvbnN0cnVjdENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIG1vdW50Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBuZXh0UHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcblxuICByZXR1cm4gZmluaXNoQ2xhc3NDb21wb25lbnQobnVsbCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgdHJ1ZSwgaGFzQ29udGV4dCwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xufVxuXG5mdW5jdGlvbiBtb3VudEluZGV0ZXJtaW5hdGVDb21wb25lbnQoX2N1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIGlmIChfY3VycmVudCAhPT0gbnVsbCkge1xuICAgIC8vIEFuIGluZGV0ZXJtaW5hdGUgY29tcG9uZW50IG9ubHkgbW91bnRzIGlmIGl0IHN1c3BlbmRlZCBpbnNpZGUgYSBub24tXG4gICAgLy8gY29uY3VycmVudCB0cmVlLCBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuIFdlIHdhbnQgdG8gdHJlZSBpdCBsaWtlXG4gICAgLy8gYSBuZXcgbW91bnQsIGV2ZW4gdGhvdWdoIGFuIGVtcHR5IHZlcnNpb24gb2YgaXQgYWxyZWFkeSBjb21taXR0ZWQuXG4gICAgLy8gRGlzY29ubmVjdCB0aGUgYWx0ZXJuYXRlIHBvaW50ZXJzLlxuICAgIF9jdXJyZW50LmFsdGVybmF0ZSA9IG51bGw7XG4gICAgd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlID0gbnVsbDtcbiAgICAvLyBTaW5jZSB0aGlzIGlzIGNvbmNlcHR1YWxseSBhIG5ldyBmaWJlciwgc2NoZWR1bGUgYSBQbGFjZW1lbnQgZWZmZWN0XG4gICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFBsYWNlbWVudDtcbiAgfVxuXG4gIHZhciBwcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgdmFyIHVubWFza2VkQ29udGV4dCA9IGdldFVubWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBmYWxzZSk7XG4gIHZhciBjb250ZXh0ID0gZ2V0TWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0KTtcblxuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuXG4gIHZhciB2YWx1ZSA9IHZvaWQgMDtcblxuICB7XG4gICAgaWYgKENvbXBvbmVudC5wcm90b3R5cGUgJiYgdHlwZW9mIENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50KSB8fCAnVW5rbm93bic7XG5cbiAgICAgIGlmICghZGlkV2FybkFib3V0QmFkQ2xhc3NbY29tcG9uZW50TmFtZV0pIHtcbiAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCBcIlRoZSA8JXMgLz4gY29tcG9uZW50IGFwcGVhcnMgdG8gaGF2ZSBhIHJlbmRlciBtZXRob2QsIGJ1dCBkb2Vzbid0IGV4dGVuZCBSZWFjdC5Db21wb25lbnQuIFwiICsgJ1RoaXMgaXMgbGlrZWx5IHRvIGNhdXNlIGVycm9ycy4gQ2hhbmdlICVzIHRvIGV4dGVuZCBSZWFjdC5Db21wb25lbnQgaW5zdGVhZC4nLCBjb21wb25lbnROYW1lLCBjb21wb25lbnROYW1lKTtcbiAgICAgICAgZGlkV2FybkFib3V0QmFkQ2xhc3NbY29tcG9uZW50TmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0TW9kZSkge1xuICAgICAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MucmVjb3JkTGVnYWN5Q29udGV4dFdhcm5pbmcod29ya0luUHJvZ3Jlc3MsIG51bGwpO1xuICAgIH1cblxuICAgIFJlYWN0Q3VycmVudE93bmVyJDMuY3VycmVudCA9IHdvcmtJblByb2dyZXNzO1xuICAgIHZhbHVlID0gQ29tcG9uZW50KHByb3BzLCBjb250ZXh0KTtcbiAgfVxuICAvLyBSZWFjdCBEZXZUb29scyByZWFkcyB0aGlzIGZsYWcuXG4gIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQZXJmb3JtZWRXb3JrO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZS5yZW5kZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsdWUuJCR0eXBlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIFByb2NlZWQgdW5kZXIgdGhlIGFzc3VtcHRpb24gdGhhdCB0aGlzIGlzIGEgY2xhc3MgaW5zdGFuY2VcbiAgICB3b3JrSW5Qcm9ncmVzcy50YWcgPSBDbGFzc0NvbXBvbmVudDtcblxuICAgIC8vIFB1c2ggY29udGV4dCBwcm92aWRlcnMgZWFybHkgdG8gcHJldmVudCBjb250ZXh0IHN0YWNrIG1pc21hdGNoZXMuXG4gICAgLy8gRHVyaW5nIG1vdW50aW5nIHdlIGRvbid0IGtub3cgdGhlIGNoaWxkIGNvbnRleHQgeWV0IGFzIHRoZSBpbnN0YW5jZSBkb2Vzbid0IGV4aXN0LlxuICAgIC8vIFdlIHdpbGwgaW52YWxpZGF0ZSB0aGUgY2hpbGQgY29udGV4dCBpbiBmaW5pc2hDbGFzc0NvbXBvbmVudCgpIHJpZ2h0IGFmdGVyIHJlbmRlcmluZy5cbiAgICB2YXIgaGFzQ29udGV4dCA9IGZhbHNlO1xuICAgIGlmIChpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgICBoYXNDb250ZXh0ID0gdHJ1ZTtcbiAgICAgIHB1c2hDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYXNDb250ZXh0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHZhbHVlLnN0YXRlICE9PSBudWxsICYmIHZhbHVlLnN0YXRlICE9PSB1bmRlZmluZWQgPyB2YWx1ZS5zdGF0ZSA6IG51bGw7XG5cbiAgICB2YXIgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgICBpZiAodHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYXBwbHlEZXJpdmVkU3RhdGVGcm9tUHJvcHMod29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgYWRvcHRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCB2YWx1ZSk7XG4gICAgbW91bnRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHByb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgcmV0dXJuIGZpbmlzaENsYXNzQ29tcG9uZW50KG51bGwsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHRydWUsIGhhc0NvbnRleHQsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBQcm9jZWVkIHVuZGVyIHRoZSBhc3N1bXB0aW9uIHRoYXQgdGhpcyBpcyBhIGZ1bmN0aW9uIGNvbXBvbmVudFxuICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IEZ1bmN0aW9uQ29tcG9uZW50O1xuICAgIHtcbiAgICAgIGlmIChDb21wb25lbnQpIHtcbiAgICAgICAgISFDb21wb25lbnQuY2hpbGRDb250ZXh0VHlwZXMgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcyguLi4pOiBjaGlsZENvbnRleHRUeXBlcyBjYW5ub3QgYmUgZGVmaW5lZCBvbiBhIGZ1bmN0aW9uIGNvbXBvbmVudC4nLCBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKHdvcmtJblByb2dyZXNzLnJlZiAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgaW5mbyA9ICcnO1xuICAgICAgICB2YXIgb3duZXJOYW1lID0gZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lSW5EZXZPck51bGwoKTtcbiAgICAgICAgaWYgKG93bmVyTmFtZSkge1xuICAgICAgICAgIGluZm8gKz0gJ1xcblxcbkNoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgb3duZXJOYW1lICsgJ2AuJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB3YXJuaW5nS2V5ID0gb3duZXJOYW1lIHx8IHdvcmtJblByb2dyZXNzLl9kZWJ1Z0lEIHx8ICcnO1xuICAgICAgICB2YXIgZGVidWdTb3VyY2UgPSB3b3JrSW5Qcm9ncmVzcy5fZGVidWdTb3VyY2U7XG4gICAgICAgIGlmIChkZWJ1Z1NvdXJjZSkge1xuICAgICAgICAgIHdhcm5pbmdLZXkgPSBkZWJ1Z1NvdXJjZS5maWxlTmFtZSArICc6JyArIGRlYnVnU291cmNlLmxpbmVOdW1iZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkaWRXYXJuQWJvdXRGdW5jdGlvblJlZnNbd2FybmluZ0tleV0pIHtcbiAgICAgICAgICBkaWRXYXJuQWJvdXRGdW5jdGlvblJlZnNbd2FybmluZ0tleV0gPSB0cnVlO1xuICAgICAgICAgIHdhcm5pbmckMShmYWxzZSwgJ0Z1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGJlIGdpdmVuIHJlZnMuICcgKyAnQXR0ZW1wdHMgdG8gYWNjZXNzIHRoaXMgcmVmIHdpbGwgZmFpbC4lcycsIGluZm8pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgX2NvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCkgfHwgJ1Vua25vd24nO1xuXG4gICAgICAgIGlmICghZGlkV2FybkFib3V0R2V0RGVyaXZlZFN0YXRlT25GdW5jdGlvbkNvbXBvbmVudFtfY29tcG9uZW50TmFtZV0pIHtcbiAgICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclczogRnVuY3Rpb24gY29tcG9uZW50cyBkbyBub3Qgc3VwcG9ydCBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuJywgX2NvbXBvbmVudE5hbWUpO1xuICAgICAgICAgIGRpZFdhcm5BYm91dEdldERlcml2ZWRTdGF0ZU9uRnVuY3Rpb25Db21wb25lbnRbX2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIENvbXBvbmVudC5jb250ZXh0VHlwZSA9PT0gJ29iamVjdCcgJiYgQ29tcG9uZW50LmNvbnRleHRUeXBlICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBfY29tcG9uZW50TmFtZTIgPSBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCkgfHwgJ1Vua25vd24nO1xuXG4gICAgICAgIGlmICghZGlkV2FybkFib3V0Q29udGV4dFR5cGVPbkZ1bmN0aW9uQ29tcG9uZW50W19jb21wb25lbnROYW1lMl0pIHtcbiAgICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclczogRnVuY3Rpb24gY29tcG9uZW50cyBkbyBub3Qgc3VwcG9ydCBjb250ZXh0VHlwZS4nLCBfY29tcG9uZW50TmFtZTIpO1xuICAgICAgICAgIGRpZFdhcm5BYm91dENvbnRleHRUeXBlT25GdW5jdGlvbkNvbXBvbmVudFtfY29tcG9uZW50TmFtZTJdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZWNvbmNpbGVDaGlsZHJlbihudWxsLCB3b3JrSW5Qcm9ncmVzcywgdmFsdWUsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciBtb2RlID0gd29ya0luUHJvZ3Jlc3MubW9kZTtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcblxuICAvLyBXZSBzaG91bGQgYXR0ZW1wdCB0byByZW5kZXIgdGhlIHByaW1hcnkgY2hpbGRyZW4gdW5sZXNzIHRoaXMgYm91bmRhcnlcbiAgLy8gYWxyZWFkeSBzdXNwZW5kZWQgZHVyaW5nIHRoaXMgcmVuZGVyIChgYWxyZWFkeUNhcHR1cmVkYCBpcyB0cnVlKS5cbiAgdmFyIG5leHRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIGlmIChuZXh0U3RhdGUgPT09IG51bGwpIHtcbiAgICAvLyBBbiBlbXB0eSBzdXNwZW5zZSBzdGF0ZSBtZWFucyB0aGlzIGJvdW5kYXJ5IGhhcyBub3QgeWV0IHRpbWVkIG91dC5cbiAgfSBlbHNlIHtcbiAgICBpZiAoIW5leHRTdGF0ZS5hbHJlYWR5Q2FwdHVyZWQpIHtcbiAgICAgIC8vIFNpbmNlIHdlIGhhdmVuJ3QgYWxyZWFkeSBzdXNwZW5kZWQgZHVyaW5nIHRoaXMgY29tbWl0LCBjbGVhciB0aGVcbiAgICAgIC8vIGV4aXN0aW5nIHN1c3BlbnNlIHN0YXRlLiBXZSdsbCB0cnkgcmVuZGVyaW5nIGFnYWluLlxuICAgICAgbmV4dFN0YXRlID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU29tZXRoaW5nIGluIHRoaXMgYm91bmRhcnkncyBzdWJ0cmVlIGFscmVhZHkgc3VzcGVuZGVkLiBTd2l0Y2ggdG9cbiAgICAgIC8vIHJlbmRlcmluZyB0aGUgZmFsbGJhY2sgY2hpbGRyZW4uIFNldCBgYWxyZWFkeUNhcHR1cmVkYCB0byB0cnVlLlxuICAgICAgaWYgKGN1cnJlbnQkJDEgIT09IG51bGwgJiYgbmV4dFN0YXRlID09PSBjdXJyZW50JCQxLm1lbW9pemVkU3RhdGUpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHN1c3BlbnNlIHN0YXRlIHRvIGF2b2lkIG11dGF0aW5nIHRoZSBjdXJyZW50IHRyZWUncy5cbiAgICAgICAgbmV4dFN0YXRlID0ge1xuICAgICAgICAgIGFscmVhZHlDYXB0dXJlZDogdHJ1ZSxcbiAgICAgICAgICBkaWRUaW1lb3V0OiB0cnVlLFxuICAgICAgICAgIHRpbWVkT3V0QXQ6IG5leHRTdGF0ZS50aW1lZE91dEF0XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBbHJlYWR5IGhhdmUgYSBjbG9uZSwgc28gaXQncyBzYWZlIHRvIG11dGF0ZS5cbiAgICAgICAgbmV4dFN0YXRlLmFscmVhZHlDYXB0dXJlZCA9IHRydWU7XG4gICAgICAgIG5leHRTdGF0ZS5kaWRUaW1lb3V0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFyIG5leHREaWRUaW1lb3V0ID0gbmV4dFN0YXRlICE9PSBudWxsICYmIG5leHRTdGF0ZS5kaWRUaW1lb3V0O1xuXG4gIC8vIFRoaXMgbmV4dCBwYXJ0IGlzIGEgYml0IGNvbmZ1c2luZy4gSWYgdGhlIGNoaWxkcmVuIHRpbWVvdXQsIHdlIHN3aXRjaCB0b1xuICAvLyBzaG93aW5nIHRoZSBmYWxsYmFjayBjaGlsZHJlbiBpbiBwbGFjZSBvZiB0aGUgXCJwcmltYXJ5XCIgY2hpbGRyZW4uXG4gIC8vIEhvd2V2ZXIsIHdlIGRvbid0IHdhbnQgdG8gZGVsZXRlIHRoZSBwcmltYXJ5IGNoaWxkcmVuIGJlY2F1c2UgdGhlbiB0aGVpclxuICAvLyBzdGF0ZSB3aWxsIGJlIGxvc3QgKGJvdGggdGhlIFJlYWN0IHN0YXRlIGFuZCB0aGUgaG9zdCBzdGF0ZSwgZS5nLlxuICAvLyB1bmNvbnRyb2xsZWQgZm9ybSBpbnB1dHMpLiBJbnN0ZWFkIHdlIGtlZXAgdGhlbSBtb3VudGVkIGFuZCBoaWRlIHRoZW0uXG4gIC8vIEJvdGggdGhlIGZhbGxiYWNrIGNoaWxkcmVuIEFORCB0aGUgcHJpbWFyeSBjaGlsZHJlbiBhcmUgcmVuZGVyZWQgYXQgdGhlXG4gIC8vIHNhbWUgdGltZS4gT25jZSB0aGUgcHJpbWFyeSBjaGlsZHJlbiBhcmUgdW4tc3VzcGVuZGVkLCB3ZSBjYW4gZGVsZXRlXG4gIC8vIHRoZSBmYWxsYmFjayBjaGlsZHJlbiDigJQgZG9uJ3QgbmVlZCB0byBwcmVzZXJ2ZSB0aGVpciBzdGF0ZS5cbiAgLy9cbiAgLy8gVGhlIHR3byBzZXRzIG9mIGNoaWxkcmVuIGFyZSBzaWJsaW5ncyBpbiB0aGUgaG9zdCBlbnZpcm9ubWVudCwgYnV0XG4gIC8vIHNlbWFudGljYWxseSwgZm9yIHB1cnBvc2VzIG9mIHJlY29uY2lsaWF0aW9uLCB0aGV5IGFyZSB0d28gc2VwYXJhdGUgc2V0cy5cbiAgLy8gU28gd2Ugc3RvcmUgdGhlbSB1c2luZyB0d28gZnJhZ21lbnQgZmliZXJzLlxuICAvL1xuICAvLyBIb3dldmVyLCB3ZSB3YW50IHRvIGF2b2lkIGFsbG9jYXRpbmcgZXh0cmEgZmliZXJzIGZvciBldmVyeSBwbGFjZWhvbGRlci5cbiAgLy8gVGhleSdyZSBvbmx5IG5lY2Vzc2FyeSB3aGVuIHRoZSBjaGlsZHJlbiB0aW1lIG91dCwgYmVjYXVzZSB0aGF0J3MgdGhlXG4gIC8vIG9ubHkgdGltZSB3aGVuIGJvdGggc2V0cyBhcmUgbW91bnRlZC5cbiAgLy9cbiAgLy8gU28sIHRoZSBleHRyYSBmcmFnbWVudCBmaWJlcnMgYXJlIG9ubHkgdXNlZCBpZiB0aGUgY2hpbGRyZW4gdGltZSBvdXQuXG4gIC8vIE90aGVyd2lzZSwgd2UgcmVuZGVyIHRoZSBwcmltYXJ5IGNoaWxkcmVuIGRpcmVjdGx5LiBUaGlzIHJlcXVpcmVzIHNvbWVcbiAgLy8gY3VzdG9tIHJlY29uY2lsaWF0aW9uIGxvZ2ljIHRvIHByZXNlcnZlIHRoZSBzdGF0ZSBvZiB0aGUgcHJpbWFyeVxuICAvLyBjaGlsZHJlbi4gSXQncyBlc3NlbnRpYWxseSBhIHZlcnkgYmFzaWMgZm9ybSBvZiByZS1wYXJlbnRpbmcuXG5cbiAgLy8gYGNoaWxkYCBwb2ludHMgdG8gdGhlIGNoaWxkIGZpYmVyLiBJbiB0aGUgbm9ybWFsIGNhc2UsIHRoaXMgaXMgdGhlIGZpcnN0XG4gIC8vIGZpYmVyIG9mIHRoZSBwcmltYXJ5IGNoaWxkcmVuIHNldC4gSW4gdGhlIHRpbWVkLW91dCBjYXNlLCBpdCdzIGFcbiAgLy8gYSBmcmFnbWVudCBmaWJlciBjb250YWluaW5nIHRoZSBwcmltYXJ5IGNoaWxkcmVuLlxuICB2YXIgY2hpbGQgPSB2b2lkIDA7XG4gIC8vIGBuZXh0YCBwb2ludHMgdG8gdGhlIG5leHQgZmliZXIgUmVhY3Qgc2hvdWxkIHJlbmRlci4gSW4gdGhlIG5vcm1hbCBjYXNlLFxuICAvLyBpdCdzIHRoZSBzYW1lIGFzIGBjaGlsZGA6IHRoZSBmaXJzdCBmaWJlciBvZiB0aGUgcHJpbWFyeSBjaGlsZHJlbiBzZXQuXG4gIC8vIEluIHRoZSB0aW1lZC1vdXQgY2FzZSwgaXQncyBhIGZyYWdtZW50IGZpYmVyIGNvbnRhaW5pbmcgdGhlICpmYWxsYmFjaypcbiAgLy8gY2hpbGRyZW4gLS0gd2Ugc2tpcCBvdmVyIHRoZSBwcmltYXJ5IGNoaWxkcmVuIGVudGlyZWx5LlxuICB2YXIgbmV4dCA9IHZvaWQgMDtcbiAgaWYgKGN1cnJlbnQkJDEgPT09IG51bGwpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBpbml0aWFsIG1vdW50LiBUaGlzIGJyYW5jaCBpcyBwcmV0dHkgc2ltcGxlIGJlY2F1c2UgdGhlcmUnc1xuICAgIC8vIG5vIHByZXZpb3VzIHN0YXRlIHRoYXQgbmVlZHMgdG8gYmUgcHJlc2VydmVkLlxuICAgIGlmIChuZXh0RGlkVGltZW91dCkge1xuICAgICAgLy8gTW91bnQgc2VwYXJhdGUgZnJhZ21lbnRzIGZvciBwcmltYXJ5IGFuZCBmYWxsYmFjayBjaGlsZHJlbi5cbiAgICAgIHZhciBuZXh0RmFsbGJhY2tDaGlsZHJlbiA9IG5leHRQcm9wcy5mYWxsYmFjaztcbiAgICAgIHZhciBwcmltYXJ5Q2hpbGRGcmFnbWVudCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KG51bGwsIG1vZGUsIE5vV29yaywgbnVsbCk7XG4gICAgICB2YXIgZmFsbGJhY2tDaGlsZEZyYWdtZW50ID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQobmV4dEZhbGxiYWNrQ2hpbGRyZW4sIG1vZGUsIHJlbmRlckV4cGlyYXRpb25UaW1lLCBudWxsKTtcbiAgICAgIHByaW1hcnlDaGlsZEZyYWdtZW50LnNpYmxpbmcgPSBmYWxsYmFja0NoaWxkRnJhZ21lbnQ7XG4gICAgICBjaGlsZCA9IHByaW1hcnlDaGlsZEZyYWdtZW50O1xuICAgICAgLy8gU2tpcCB0aGUgcHJpbWFyeSBjaGlsZHJlbiwgYW5kIGNvbnRpbnVlIHdvcmtpbmcgb24gdGhlXG4gICAgICAvLyBmYWxsYmFjayBjaGlsZHJlbi5cbiAgICAgIG5leHQgPSBmYWxsYmFja0NoaWxkRnJhZ21lbnQ7XG4gICAgICBjaGlsZC5yZXR1cm4gPSBuZXh0LnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBNb3VudCB0aGUgcHJpbWFyeSBjaGlsZHJlbiB3aXRob3V0IGFuIGludGVybWVkaWF0ZSBmcmFnbWVudCBmaWJlci5cbiAgICAgIHZhciBuZXh0UHJpbWFyeUNoaWxkcmVuID0gbmV4dFByb3BzLmNoaWxkcmVuO1xuICAgICAgY2hpbGQgPSBuZXh0ID0gbW91bnRDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgbmV4dFByaW1hcnlDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIGlzIGFuIHVwZGF0ZS4gVGhpcyBicmFuY2ggaXMgbW9yZSBjb21wbGljYXRlZCBiZWNhdXNlIHdlIG5lZWQgdG9cbiAgICAvLyBlbnN1cmUgdGhlIHN0YXRlIG9mIHRoZSBwcmltYXJ5IGNoaWxkcmVuIGlzIHByZXNlcnZlZC5cbiAgICB2YXIgcHJldlN0YXRlID0gY3VycmVudCQkMS5tZW1vaXplZFN0YXRlO1xuICAgIHZhciBwcmV2RGlkVGltZW91dCA9IHByZXZTdGF0ZSAhPT0gbnVsbCAmJiBwcmV2U3RhdGUuZGlkVGltZW91dDtcbiAgICBpZiAocHJldkRpZFRpbWVvdXQpIHtcbiAgICAgIC8vIFRoZSBjdXJyZW50IHRyZWUgYWxyZWFkeSB0aW1lZCBvdXQuIFRoYXQgbWVhbnMgZWFjaCBjaGlsZCBzZXQgaXNcbiAgICAgIHZhciBjdXJyZW50UHJpbWFyeUNoaWxkRnJhZ21lbnQgPSBjdXJyZW50JCQxLmNoaWxkO1xuICAgICAgdmFyIGN1cnJlbnRGYWxsYmFja0NoaWxkRnJhZ21lbnQgPSBjdXJyZW50UHJpbWFyeUNoaWxkRnJhZ21lbnQuc2libGluZztcbiAgICAgIGlmIChuZXh0RGlkVGltZW91dCkge1xuICAgICAgICAvLyBTdGlsbCB0aW1lZCBvdXQuIFJldXNlIHRoZSBjdXJyZW50IHByaW1hcnkgY2hpbGRyZW4gYnkgY2xvbmluZ1xuICAgICAgICAvLyBpdHMgZnJhZ21lbnQuIFdlJ3JlIGdvaW5nIHRvIHNraXAgb3ZlciB0aGVzZSBlbnRpcmVseS5cbiAgICAgICAgdmFyIF9uZXh0RmFsbGJhY2tDaGlsZHJlbiA9IG5leHRQcm9wcy5mYWxsYmFjaztcbiAgICAgICAgdmFyIF9wcmltYXJ5Q2hpbGRGcmFnbWVudCA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnRQcmltYXJ5Q2hpbGRGcmFnbWVudCwgY3VycmVudFByaW1hcnlDaGlsZEZyYWdtZW50LnBlbmRpbmdQcm9wcywgTm9Xb3JrKTtcbiAgICAgICAgX3ByaW1hcnlDaGlsZEZyYWdtZW50LmVmZmVjdFRhZyB8PSBQbGFjZW1lbnQ7XG4gICAgICAgIC8vIENsb25lIHRoZSBmYWxsYmFjayBjaGlsZCBmcmFnbWVudCwgdG9vLiBUaGVzZSB3ZSdsbCBjb250aW51ZVxuICAgICAgICAvLyB3b3JraW5nIG9uLlxuICAgICAgICB2YXIgX2ZhbGxiYWNrQ2hpbGRGcmFnbWVudCA9IF9wcmltYXJ5Q2hpbGRGcmFnbWVudC5zaWJsaW5nID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoY3VycmVudEZhbGxiYWNrQ2hpbGRGcmFnbWVudCwgX25leHRGYWxsYmFja0NoaWxkcmVuLCBjdXJyZW50RmFsbGJhY2tDaGlsZEZyYWdtZW50LmV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgX2ZhbGxiYWNrQ2hpbGRGcmFnbWVudC5lZmZlY3RUYWcgfD0gUGxhY2VtZW50O1xuICAgICAgICBjaGlsZCA9IF9wcmltYXJ5Q2hpbGRGcmFnbWVudDtcbiAgICAgICAgX3ByaW1hcnlDaGlsZEZyYWdtZW50LmNoaWxkRXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gICAgICAgIC8vIFNraXAgdGhlIHByaW1hcnkgY2hpbGRyZW4sIGFuZCBjb250aW51ZSB3b3JraW5nIG9uIHRoZVxuICAgICAgICAvLyBmYWxsYmFjayBjaGlsZHJlbi5cbiAgICAgICAgbmV4dCA9IF9mYWxsYmFja0NoaWxkRnJhZ21lbnQ7XG4gICAgICAgIGNoaWxkLnJldHVybiA9IG5leHQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBObyBsb25nZXIgc3VzcGVuZGVkLiBTd2l0Y2ggYmFjayB0byBzaG93aW5nIHRoZSBwcmltYXJ5IGNoaWxkcmVuLFxuICAgICAgICAvLyBhbmQgcmVtb3ZlIHRoZSBpbnRlcm1lZGlhdGUgZnJhZ21lbnQgZmliZXIuXG4gICAgICAgIHZhciBfbmV4dFByaW1hcnlDaGlsZHJlbiA9IG5leHRQcm9wcy5jaGlsZHJlbjtcbiAgICAgICAgdmFyIGN1cnJlbnRQcmltYXJ5Q2hpbGQgPSBjdXJyZW50UHJpbWFyeUNoaWxkRnJhZ21lbnQuY2hpbGQ7XG4gICAgICAgIHZhciBjdXJyZW50RmFsbGJhY2tDaGlsZCA9IGN1cnJlbnRGYWxsYmFja0NoaWxkRnJhZ21lbnQuY2hpbGQ7XG4gICAgICAgIHZhciBwcmltYXJ5Q2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgY3VycmVudFByaW1hcnlDaGlsZCwgX25leHRQcmltYXJ5Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgLy8gRGVsZXRlIHRoZSBmYWxsYmFjayBjaGlsZHJlbi5cbiAgICAgICAgcmVjb25jaWxlQ2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnRGYWxsYmFja0NoaWxkLCBudWxsLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgIC8vIENvbnRpbnVlIHJlbmRlcmluZyB0aGUgY2hpbGRyZW4sIGxpa2Ugd2Ugbm9ybWFsbHkgZG8uXG4gICAgICAgIGNoaWxkID0gbmV4dCA9IHByaW1hcnlDaGlsZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIGN1cnJlbnQgdHJlZSBoYXMgbm90IGFscmVhZHkgdGltZWQgb3V0LiBUaGF0IG1lYW5zIHRoZSBwcmltYXJ5XG4gICAgICB2YXIgX2N1cnJlbnRQcmltYXJ5Q2hpbGQgPSBjdXJyZW50JCQxLmNoaWxkO1xuICAgICAgaWYgKG5leHREaWRUaW1lb3V0KSB7XG4gICAgICAgIC8vIFRpbWVkIG91dC4gV3JhcCB0aGUgY2hpbGRyZW4gaW4gYSBmcmFnbWVudCBmaWJlciB0byBrZWVwIHRoZW1cbiAgICAgICAgLy8gc2VwYXJhdGUgZnJvbSB0aGUgZmFsbGJhY2sgY2hpbGRyZW4uXG4gICAgICAgIHZhciBfbmV4dEZhbGxiYWNrQ2hpbGRyZW4yID0gbmV4dFByb3BzLmZhbGxiYWNrO1xuICAgICAgICB2YXIgX3ByaW1hcnlDaGlsZEZyYWdtZW50MiA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAvLyBJdCBzaG91bGRuJ3QgbWF0dGVyIHdoYXQgdGhlIHBlbmRpbmcgcHJvcHMgYXJlIGJlY2F1c2Ugd2UgYXJlbid0XG4gICAgICAgIC8vIGdvaW5nIHRvIHJlbmRlciB0aGlzIGZyYWdtZW50LlxuICAgICAgICBudWxsLCBtb2RlLCBOb1dvcmssIG51bGwpO1xuICAgICAgICBfcHJpbWFyeUNoaWxkRnJhZ21lbnQyLmVmZmVjdFRhZyB8PSBQbGFjZW1lbnQ7XG4gICAgICAgIF9wcmltYXJ5Q2hpbGRGcmFnbWVudDIuY2hpbGQgPSBfY3VycmVudFByaW1hcnlDaGlsZDtcbiAgICAgICAgX2N1cnJlbnRQcmltYXJ5Q2hpbGQucmV0dXJuID0gX3ByaW1hcnlDaGlsZEZyYWdtZW50MjtcbiAgICAgICAgLy8gQ3JlYXRlIGEgZnJhZ21lbnQgZnJvbSB0aGUgZmFsbGJhY2sgY2hpbGRyZW4sIHRvby5cbiAgICAgICAgdmFyIF9mYWxsYmFja0NoaWxkRnJhZ21lbnQyID0gX3ByaW1hcnlDaGlsZEZyYWdtZW50Mi5zaWJsaW5nID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoX25leHRGYWxsYmFja0NoaWxkcmVuMiwgbW9kZSwgcmVuZGVyRXhwaXJhdGlvblRpbWUsIG51bGwpO1xuICAgICAgICBfZmFsbGJhY2tDaGlsZEZyYWdtZW50Mi5lZmZlY3RUYWcgfD0gUGxhY2VtZW50O1xuICAgICAgICBjaGlsZCA9IF9wcmltYXJ5Q2hpbGRGcmFnbWVudDI7XG4gICAgICAgIF9wcmltYXJ5Q2hpbGRGcmFnbWVudDIuY2hpbGRFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgICAgICAgLy8gU2tpcCB0aGUgcHJpbWFyeSBjaGlsZHJlbiwgYW5kIGNvbnRpbnVlIHdvcmtpbmcgb24gdGhlXG4gICAgICAgIC8vIGZhbGxiYWNrIGNoaWxkcmVuLlxuICAgICAgICBuZXh0ID0gX2ZhbGxiYWNrQ2hpbGRGcmFnbWVudDI7XG4gICAgICAgIGNoaWxkLnJldHVybiA9IG5leHQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTdGlsbCBoYXZlbid0IHRpbWVkIG91dC4gIENvbnRpbnVlIHJlbmRlcmluZyB0aGUgY2hpbGRyZW4sIGxpa2Ugd2VcbiAgICAgICAgLy8gbm9ybWFsbHkgZG8uXG4gICAgICAgIHZhciBfbmV4dFByaW1hcnlDaGlsZHJlbjIgPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gICAgICAgIG5leHQgPSBjaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBfY3VycmVudFByaW1hcnlDaGlsZCwgX25leHRQcmltYXJ5Q2hpbGRyZW4yLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG5leHRTdGF0ZTtcbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjaGlsZDtcbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVBvcnRhbENvbXBvbmVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgcHVzaEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgdmFyIG5leHRDaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgaWYgKGN1cnJlbnQkJDEgPT09IG51bGwpIHtcbiAgICAvLyBQb3J0YWxzIGFyZSBzcGVjaWFsIGJlY2F1c2Ugd2UgZG9uJ3QgYXBwZW5kIHRoZSBjaGlsZHJlbiBkdXJpbmcgbW91bnRcbiAgICAvLyBidXQgYXQgY29tbWl0LiBUaGVyZWZvcmUgd2UgbmVlZCB0byB0cmFjayBpbnNlcnRpb25zIHdoaWNoIHRoZSBub3JtYWxcbiAgICAvLyBmbG93IGRvZXNuJ3QgZG8gZHVyaW5nIG1vdW50LiBUaGlzIGRvZXNuJ3QgaGFwcGVuIGF0IHRoZSByb290IGJlY2F1c2VcbiAgICAvLyB0aGUgcm9vdCBhbHdheXMgc3RhcnRzIHdpdGggYSBcImN1cnJlbnRcIiB3aXRoIGEgbnVsbCBjaGlsZC5cbiAgICAvLyBUT0RPOiBDb25zaWRlciB1bmlmeWluZyB0aGlzIHdpdGggaG93IHRoZSByb290IHdvcmtzLlxuICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIG51bGwsIG5leHRDaGlsZHJlbiwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICB9IGVsc2Uge1xuICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgfVxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbnRleHRQcm92aWRlcihjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgdmFyIHByb3ZpZGVyVHlwZSA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gIHZhciBjb250ZXh0ID0gcHJvdmlkZXJUeXBlLl9jb250ZXh0O1xuXG4gIHZhciBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgdmFyIG9sZFByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcblxuICB2YXIgbmV3VmFsdWUgPSBuZXdQcm9wcy52YWx1ZTtcblxuICB7XG4gICAgdmFyIHByb3ZpZGVyUHJvcFR5cGVzID0gd29ya0luUHJvZ3Jlc3MudHlwZS5wcm9wVHlwZXM7XG5cbiAgICBpZiAocHJvdmlkZXJQcm9wVHlwZXMpIHtcbiAgICAgIGNoZWNrUHJvcFR5cGVzKHByb3ZpZGVyUHJvcFR5cGVzLCBuZXdQcm9wcywgJ3Byb3AnLCAnQ29udGV4dC5Qcm92aWRlcicsIGdldEN1cnJlbnRGaWJlclN0YWNrSW5EZXYpO1xuICAgIH1cbiAgfVxuXG4gIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgbmV3VmFsdWUpO1xuXG4gIGlmIChvbGRQcm9wcyAhPT0gbnVsbCkge1xuICAgIHZhciBvbGRWYWx1ZSA9IG9sZFByb3BzLnZhbHVlO1xuICAgIHZhciBjaGFuZ2VkQml0cyA9IGNhbGN1bGF0ZUNoYW5nZWRCaXRzKGNvbnRleHQsIG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgaWYgKGNoYW5nZWRCaXRzID09PSAwKSB7XG4gICAgICAvLyBObyBjaGFuZ2UuIEJhaWxvdXQgZWFybHkgaWYgY2hpbGRyZW4gYXJlIHRoZSBzYW1lLlxuICAgICAgaWYgKG9sZFByb3BzLmNoaWxkcmVuID09PSBuZXdQcm9wcy5jaGlsZHJlbiAmJiAhaGFzQ29udGV4dENoYW5nZWQoKSkge1xuICAgICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgY29udGV4dCB2YWx1ZSBjaGFuZ2VkLiBTZWFyY2ggZm9yIG1hdGNoaW5nIGNvbnN1bWVycyBhbmQgc2NoZWR1bGVcbiAgICAgIC8vIHRoZW0gdG8gdXBkYXRlLlxuICAgICAgcHJvcGFnYXRlQ29udGV4dENoYW5nZSh3b3JrSW5Qcm9ncmVzcywgY29udGV4dCwgY2hhbmdlZEJpdHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbmV3Q2hpbGRyZW4gPSBuZXdQcm9wcy5jaGlsZHJlbjtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5ld0NoaWxkcmVuLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cblxudmFyIGhhc1dhcm5lZEFib3V0VXNpbmdDb250ZXh0QXNDb25zdW1lciA9IGZhbHNlO1xuXG5mdW5jdGlvbiB1cGRhdGVDb250ZXh0Q29uc3VtZXIoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciBjb250ZXh0ID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgLy8gVGhlIGxvZ2ljIGJlbG93IGZvciBDb250ZXh0IGRpZmZlcnMgZGVwZW5kaW5nIG9uIFBST0Qgb3IgREVWIG1vZGUuIEluXG4gIC8vIERFViBtb2RlLCB3ZSBjcmVhdGUgYSBzZXBhcmF0ZSBvYmplY3QgZm9yIENvbnRleHQuQ29uc3VtZXIgdGhhdCBhY3RzXG4gIC8vIGxpa2UgYSBwcm94eSB0byBDb250ZXh0LiBUaGlzIHByb3h5IG9iamVjdCBhZGRzIHVubmVjZXNzYXJ5IGNvZGUgaW4gUFJPRFxuICAvLyBzbyB3ZSB1c2UgdGhlIG9sZCBiZWhhdmlvdXIgKENvbnRleHQuQ29uc3VtZXIgcmVmZXJlbmNlcyBDb250ZXh0KSB0b1xuICAvLyByZWR1Y2Ugc2l6ZSBhbmQgb3ZlcmhlYWQuIFRoZSBzZXBhcmF0ZSBvYmplY3QgcmVmZXJlbmNlcyBjb250ZXh0IHZpYVxuICAvLyBhIHByb3BlcnR5IGNhbGxlZCBcIl9jb250ZXh0XCIsIHdoaWNoIGFsc28gZ2l2ZXMgdXMgdGhlIGFiaWxpdHkgdG8gY2hlY2tcbiAgLy8gaW4gREVWIG1vZGUgaWYgdGhpcyBwcm9wZXJ0eSBleGlzdHMgb3Igbm90IGFuZCB3YXJuIGlmIGl0IGRvZXMgbm90LlxuICB7XG4gICAgaWYgKGNvbnRleHQuX2NvbnRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gVGhpcyBtYXkgYmUgYmVjYXVzZSBpdCdzIGEgQ29udGV4dCAocmF0aGVyIHRoYW4gYSBDb25zdW1lcikuXG4gICAgICAvLyBPciBpdCBtYXkgYmUgYmVjYXVzZSBpdCdzIG9sZGVyIFJlYWN0IHdoZXJlIHRoZXkncmUgdGhlIHNhbWUgdGhpbmcuXG4gICAgICAvLyBXZSBvbmx5IHdhbnQgdG8gd2FybiBpZiB3ZSdyZSBzdXJlIGl0J3MgYSBuZXcgUmVhY3QuXG4gICAgICBpZiAoY29udGV4dCAhPT0gY29udGV4dC5Db25zdW1lcikge1xuICAgICAgICBpZiAoIWhhc1dhcm5lZEFib3V0VXNpbmdDb250ZXh0QXNDb25zdW1lcikge1xuICAgICAgICAgIGhhc1dhcm5lZEFib3V0VXNpbmdDb250ZXh0QXNDb25zdW1lciA9IHRydWU7XG4gICAgICAgICAgd2FybmluZyQxKGZhbHNlLCAnUmVuZGVyaW5nIDxDb250ZXh0PiBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gJyArICdhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiBEaWQgeW91IG1lYW4gdG8gcmVuZGVyIDxDb250ZXh0LkNvbnN1bWVyPiBpbnN0ZWFkPycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0Ll9jb250ZXh0O1xuICAgIH1cbiAgfVxuICB2YXIgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHZhciByZW5kZXIgPSBuZXdQcm9wcy5jaGlsZHJlbjtcblxuICB7XG4gICAgISh0eXBlb2YgcmVuZGVyID09PSAnZnVuY3Rpb24nKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ0EgY29udGV4dCBjb25zdW1lciB3YXMgcmVuZGVyZWQgd2l0aCBtdWx0aXBsZSBjaGlsZHJlbiwgb3IgYSBjaGlsZCAnICsgXCJ0aGF0IGlzbid0IGEgZnVuY3Rpb24uIEEgY29udGV4dCBjb25zdW1lciBleHBlY3RzIGEgc2luZ2xlIGNoaWxkIFwiICsgJ3RoYXQgaXMgYSBmdW5jdGlvbi4gSWYgeW91IGRpZCBwYXNzIGEgZnVuY3Rpb24sIG1ha2Ugc3VyZSB0aGVyZSAnICsgJ2lzIG5vIHRyYWlsaW5nIG9yIGxlYWRpbmcgd2hpdGVzcGFjZSBhcm91bmQgaXQuJykgOiB2b2lkIDA7XG4gIH1cblxuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICB2YXIgbmV3VmFsdWUgPSByZWFkQ29udGV4dChjb250ZXh0LCBuZXdQcm9wcy51bnN0YWJsZV9vYnNlcnZlZEJpdHMpO1xuICB2YXIgbmV3Q2hpbGRyZW4gPSB2b2lkIDA7XG4gIHtcbiAgICBSZWFjdEN1cnJlbnRPd25lciQzLmN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICBzZXRDdXJyZW50UGhhc2UoJ3JlbmRlcicpO1xuICAgIG5ld0NoaWxkcmVuID0gcmVuZGVyKG5ld1ZhbHVlKTtcbiAgICBzZXRDdXJyZW50UGhhc2UobnVsbCk7XG4gIH1cblxuICAvLyBSZWFjdCBEZXZUb29scyByZWFkcyB0aGlzIGZsYWcuXG4gIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQZXJmb3JtZWRXb3JrO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgbmV3Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuXG4vKlxuICBmdW5jdGlvbiByZXVzZUNoaWxkcmVuRWZmZWN0cyhyZXR1cm5GaWJlciA6IEZpYmVyLCBmaXJzdENoaWxkIDogRmliZXIpIHtcbiAgICBsZXQgY2hpbGQgPSBmaXJzdENoaWxkO1xuICAgIGRvIHtcbiAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBmaXJzdCBhbmQgbGFzdCBlZmZlY3Qgb2YgdGhlIHBhcmVudCBjb3JyZXNwb25kc1xuICAgICAgLy8gdG8gdGhlIGNoaWxkcmVuJ3MgZmlyc3QgYW5kIGxhc3QgZWZmZWN0LlxuICAgICAgaWYgKCFyZXR1cm5GaWJlci5maXJzdEVmZmVjdCkge1xuICAgICAgICByZXR1cm5GaWJlci5maXJzdEVmZmVjdCA9IGNoaWxkLmZpcnN0RWZmZWN0O1xuICAgICAgfVxuICAgICAgaWYgKGNoaWxkLmxhc3RFZmZlY3QpIHtcbiAgICAgICAgaWYgKHJldHVybkZpYmVyLmxhc3RFZmZlY3QpIHtcbiAgICAgICAgICByZXR1cm5GaWJlci5sYXN0RWZmZWN0Lm5leHRFZmZlY3QgPSBjaGlsZC5maXJzdEVmZmVjdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5GaWJlci5sYXN0RWZmZWN0ID0gY2hpbGQubGFzdEVmZmVjdDtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChjaGlsZCA9IGNoaWxkLnNpYmxpbmcpO1xuICB9XG4gICovXG5cbmZ1bmN0aW9uIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIGNhbmNlbFdvcmtUaW1lcih3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgaWYgKGN1cnJlbnQkJDEgIT09IG51bGwpIHtcbiAgICAvLyBSZXVzZSBwcmV2aW91cyBjb250ZXh0IGxpc3RcbiAgICB3b3JrSW5Qcm9ncmVzcy5maXJzdENvbnRleHREZXBlbmRlbmN5ID0gY3VycmVudCQkMS5maXJzdENvbnRleHREZXBlbmRlbmN5O1xuICB9XG5cbiAgaWYgKGVuYWJsZVByb2ZpbGVyVGltZXIpIHtcbiAgICAvLyBEb24ndCB1cGRhdGUgXCJiYXNlXCIgcmVuZGVyIHRpbWVzIGZvciBiYWlsb3V0cy5cbiAgICBzdG9wUHJvZmlsZXJUaW1lcklmUnVubmluZyh3b3JrSW5Qcm9ncmVzcyk7XG4gIH1cblxuICAvLyBDaGVjayBpZiB0aGUgY2hpbGRyZW4gaGF2ZSBhbnkgcGVuZGluZyB3b3JrLlxuICB2YXIgY2hpbGRFeHBpcmF0aW9uVGltZSA9IHdvcmtJblByb2dyZXNzLmNoaWxkRXhwaXJhdGlvblRpbWU7XG4gIGlmIChjaGlsZEV4cGlyYXRpb25UaW1lID09PSBOb1dvcmsgfHwgY2hpbGRFeHBpcmF0aW9uVGltZSA+IHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgLy8gVGhlIGNoaWxkcmVuIGRvbid0IGhhdmUgYW55IHdvcmsgZWl0aGVyLiBXZSBjYW4gc2tpcCB0aGVtLlxuICAgIC8vIFRPRE86IE9uY2Ugd2UgYWRkIGJhY2sgcmVzdW1pbmcsIHdlIHNob3VsZCBjaGVjayBpZiB0aGUgY2hpbGRyZW4gYXJlXG4gICAgLy8gYSB3b3JrLWluLXByb2dyZXNzIHNldC4gSWYgc28sIHdlIG5lZWQgdG8gdHJhbnNmZXIgdGhlaXIgZWZmZWN0cy5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIGZpYmVyIGRvZXNuJ3QgaGF2ZSB3b3JrLCBidXQgaXRzIHN1YnRyZWUgZG9lcy4gQ2xvbmUgdGhlIGNoaWxkXG4gICAgLy8gZmliZXJzIGFuZCBjb250aW51ZS5cbiAgICBjbG9uZUNoaWxkRmliZXJzKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzKTtcbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmVnaW5Xb3JrKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICB2YXIgdXBkYXRlRXhwaXJhdGlvblRpbWUgPSB3b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZTtcblxuICBpZiAoY3VycmVudCQkMSAhPT0gbnVsbCkge1xuICAgIHZhciBvbGRQcm9wcyA9IGN1cnJlbnQkJDEubWVtb2l6ZWRQcm9wcztcbiAgICB2YXIgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgaWYgKG9sZFByb3BzID09PSBuZXdQcm9wcyAmJiAhaGFzQ29udGV4dENoYW5nZWQoKSAmJiAodXBkYXRlRXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCB1cGRhdGVFeHBpcmF0aW9uVGltZSA+IHJlbmRlckV4cGlyYXRpb25UaW1lKSkge1xuICAgICAgLy8gVGhpcyBmaWJlciBkb2VzIG5vdCBoYXZlIGFueSBwZW5kaW5nIHdvcmsuIEJhaWxvdXQgd2l0aG91dCBlbnRlcmluZ1xuICAgICAgLy8gdGhlIGJlZ2luIHBoYXNlLiBUaGVyZSdzIHN0aWxsIHNvbWUgYm9va2tlZXBpbmcgd2UgdGhhdCBuZWVkcyB0byBiZSBkb25lXG4gICAgICAvLyBpbiB0aGlzIG9wdGltaXplZCBwYXRoLCBtb3N0bHkgcHVzaGluZyBzdHVmZiBvbnRvIHRoZSBzdGFjay5cbiAgICAgIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgICAgcHVzaEhvc3RSb290Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgcHVzaEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgQ29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgICAgIGlmIChpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgICAgICAgICAgIHB1c2hDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICAgICAgcHVzaEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcy52YWx1ZTtcbiAgICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgbmV3VmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlIFByb2ZpbGVyOlxuICAgICAgICAgIGlmIChlbmFibGVQcm9maWxlclRpbWVyKSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gVXBkYXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTdXNwZW5zZUNvbXBvbmVudDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgdmFyIGRpZFRpbWVvdXQgPSBzdGF0ZSAhPT0gbnVsbCAmJiBzdGF0ZS5kaWRUaW1lb3V0O1xuICAgICAgICAgICAgaWYgKGRpZFRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgLy8gSWYgdGhpcyBib3VuZGFyeSBpcyBjdXJyZW50bHkgdGltZWQgb3V0LCB3ZSBuZWVkIHRvIGRlY2lkZVxuICAgICAgICAgICAgICAvLyB3aGV0aGVyIHRvIHJldHJ5IHRoZSBwcmltYXJ5IGNoaWxkcmVuLCBvciB0byBza2lwIG92ZXIgaXQgYW5kXG4gICAgICAgICAgICAgIC8vIGdvIHN0cmFpZ2h0IHRvIHRoZSBmYWxsYmFjay4gQ2hlY2sgdGhlIHByaW9yaXR5IG9mIHRoZSBwcmltYXJ5XG4gICAgICAgICAgICAgIHZhciBwcmltYXJ5Q2hpbGRGcmFnbWVudCA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICAgICAgICB2YXIgcHJpbWFyeUNoaWxkRXhwaXJhdGlvblRpbWUgPSBwcmltYXJ5Q2hpbGRGcmFnbWVudC5jaGlsZEV4cGlyYXRpb25UaW1lO1xuICAgICAgICAgICAgICBpZiAocHJpbWFyeUNoaWxkRXhwaXJhdGlvblRpbWUgIT09IE5vV29yayAmJiBwcmltYXJ5Q2hpbGRFeHBpcmF0aW9uVGltZSA8PSByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBwcmltYXJ5IGNoaWxkcmVuIGhhdmUgcGVuZGluZyB3b3JrLiBVc2UgdGhlIG5vcm1hbCBwYXRoXG4gICAgICAgICAgICAgICAgLy8gdG8gYXR0ZW1wdCB0byByZW5kZXIgdGhlIHByaW1hcnkgY2hpbGRyZW4gYWdhaW4uXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHByaW1hcnkgY2hpbGRyZW4gZG8gbm90IGhhdmUgcGVuZGluZyB3b3JrIHdpdGggc3VmZmljaWVudFxuICAgICAgICAgICAgICAgIC8vIHByaW9yaXR5LiBCYWlsb3V0LlxuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFRoZSBmYWxsYmFjayBjaGlsZHJlbiBoYXZlIHBlbmRpbmcgd29yay4gU2tpcCBvdmVyIHRoZVxuICAgICAgICAgICAgICAgICAgLy8gcHJpbWFyeSBjaGlsZHJlbiBhbmQgd29yayBvbiB0aGUgZmFsbGJhY2suXG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGQuc2libGluZztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEJlZm9yZSBlbnRlcmluZyB0aGUgYmVnaW4gcGhhc2UsIGNsZWFyIHRoZSBleHBpcmF0aW9uIHRpbWUuXG4gIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xuXG4gIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgY2FzZSBJbmRldGVybWluYXRlQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgZWxlbWVudFR5cGUgPSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZTtcbiAgICAgICAgcmV0dXJuIG1vdW50SW5kZXRlcm1pbmF0ZUNvbXBvbmVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgZWxlbWVudFR5cGUsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIH1cbiAgICBjYXNlIExhenlDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciBfZWxlbWVudFR5cGUgPSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZTtcbiAgICAgICAgcmV0dXJuIG1vdW50TGF6eUNvbXBvbmVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgX2VsZW1lbnRUeXBlLCB1cGRhdGVFeHBpcmF0aW9uVGltZSwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgfVxuICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciBfQ29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgdmFyIHVucmVzb2x2ZWRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgICAgICAgdmFyIHJlc29sdmVkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZSA9PT0gX0NvbXBvbmVudCA/IHVucmVzb2x2ZWRQcm9wcyA6IHJlc29sdmVEZWZhdWx0UHJvcHMoX0NvbXBvbmVudCwgdW5yZXNvbHZlZFByb3BzKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBfQ29tcG9uZW50LCByZXNvbHZlZFByb3BzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICB9XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIF9Db21wb25lbnQyID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgdmFyIF91bnJlc29sdmVkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBfcmVzb2x2ZWRQcm9wcyA9IHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlID09PSBfQ29tcG9uZW50MiA/IF91bnJlc29sdmVkUHJvcHMgOiByZXNvbHZlRGVmYXVsdFByb3BzKF9Db21wb25lbnQyLCBfdW5yZXNvbHZlZFByb3BzKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUNsYXNzQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBfQ29tcG9uZW50MiwgX3Jlc29sdmVkUHJvcHMsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RSb290OlxuICAgICAgcmV0dXJuIHVwZGF0ZUhvc3RSb290KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgcmV0dXJuIHVwZGF0ZUhvc3RDb21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICBjYXNlIEhvc3RUZXh0OlxuICAgICAgcmV0dXJuIHVwZGF0ZUhvc3RUZXh0KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzKTtcbiAgICBjYXNlIFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgcmV0dXJuIHVwZGF0ZVBvcnRhbENvbXBvbmVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgIGNhc2UgRm9yd2FyZFJlZjpcbiAgICAgIHtcbiAgICAgICAgdmFyIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgICB2YXIgX3VucmVzb2x2ZWRQcm9wczIgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBfcmVzb2x2ZWRQcm9wczIgPSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZSA9PT0gdHlwZSA/IF91bnJlc29sdmVkUHJvcHMyIDogcmVzb2x2ZURlZmF1bHRQcm9wcyh0eXBlLCBfdW5yZXNvbHZlZFByb3BzMik7XG4gICAgICAgIHJldHVybiB1cGRhdGVGb3J3YXJkUmVmKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCB0eXBlLCBfcmVzb2x2ZWRQcm9wczIsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIH1cbiAgICBjYXNlIEZyYWdtZW50OlxuICAgICAgcmV0dXJuIHVwZGF0ZUZyYWdtZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2FzZSBNb2RlOlxuICAgICAgcmV0dXJuIHVwZGF0ZU1vZGUoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICBjYXNlIFByb2ZpbGVyOlxuICAgICAgcmV0dXJuIHVwZGF0ZVByb2ZpbGVyKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgICByZXR1cm4gdXBkYXRlQ29udGV4dFByb3ZpZGVyKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2FzZSBDb250ZXh0Q29uc3VtZXI6XG4gICAgICByZXR1cm4gdXBkYXRlQ29udGV4dENvbnN1bWVyKGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgY2FzZSBNZW1vQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgX3R5cGUgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgICB2YXIgX3VucmVzb2x2ZWRQcm9wczMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBfcmVzb2x2ZWRQcm9wczMgPSByZXNvbHZlRGVmYXVsdFByb3BzKF90eXBlLnR5cGUsIF91bnJlc29sdmVkUHJvcHMzKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZU1lbW9Db21wb25lbnQoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIF90eXBlLCBfcmVzb2x2ZWRQcm9wczMsIHVwZGF0ZUV4cGlyYXRpb25UaW1lLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICB9XG4gICAgY2FzZSBTaW1wbGVNZW1vQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICByZXR1cm4gdXBkYXRlU2ltcGxlTWVtb0NvbXBvbmVudChjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3MudHlwZSwgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLCB1cGRhdGVFeHBpcmF0aW9uVGltZSwgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgfVxuICAgIGNhc2UgSW5jb21wbGV0ZUNsYXNzQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgX0NvbXBvbmVudDMgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgICB2YXIgX3VucmVzb2x2ZWRQcm9wczQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBfcmVzb2x2ZWRQcm9wczQgPSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZSA9PT0gX0NvbXBvbmVudDMgPyBfdW5yZXNvbHZlZFByb3BzNCA6IHJlc29sdmVEZWZhdWx0UHJvcHMoX0NvbXBvbmVudDMsIF91bnJlc29sdmVkUHJvcHM0KTtcbiAgICAgICAgcmV0dXJuIG1vdW50SW5jb21wbGV0ZUNsYXNzQ29tcG9uZW50KGN1cnJlbnQkJDEsIHdvcmtJblByb2dyZXNzLCBfQ29tcG9uZW50MywgX3Jlc29sdmVkUHJvcHM0LCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIGludmFyaWFudChmYWxzZSwgJ1Vua25vd24gdW5pdCBvZiB3b3JrIHRhZy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSB7XG4gIC8vIFRhZyB0aGUgZmliZXIgd2l0aCBhbiB1cGRhdGUgZWZmZWN0LiBUaGlzIHR1cm5zIGEgUGxhY2VtZW50IGludG9cbiAgLy8gYSBQbGFjZW1lbnRBbmRVcGRhdGUuXG4gIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGU7XG59XG5cbmZ1bmN0aW9uIG1hcmtSZWYkMSh3b3JrSW5Qcm9ncmVzcykge1xuICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gUmVmO1xufVxuXG52YXIgYXBwZW5kQWxsQ2hpbGRyZW4gPSB2b2lkIDA7XG52YXIgdXBkYXRlSG9zdENvbnRhaW5lciA9IHZvaWQgMDtcbnZhciB1cGRhdGVIb3N0Q29tcG9uZW50JDEgPSB2b2lkIDA7XG52YXIgdXBkYXRlSG9zdFRleHQkMSA9IHZvaWQgMDtcbmlmIChzdXBwb3J0c011dGF0aW9uKSB7XG4gIC8vIE11dGF0aW9uIG1vZGVcblxuICBhcHBlbmRBbGxDaGlsZHJlbiA9IGZ1bmN0aW9uIChwYXJlbnQsIHdvcmtJblByb2dyZXNzLCBuZWVkc1Zpc2liaWxpdHlUb2dnbGUsIGlzSGlkZGVuKSB7XG4gICAgLy8gV2Ugb25seSBoYXZlIHRoZSB0b3AgRmliZXIgdGhhdCB3YXMgY3JlYXRlZCBidXQgd2UgbmVlZCByZWN1cnNlIGRvd24gaXRzXG4gICAgLy8gY2hpbGRyZW4gdG8gZmluZCBhbGwgdGhlIHRlcm1pbmFsIG5vZGVzLlxuICAgIHZhciBub2RlID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIGlmIChub2RlLnRhZyA9PT0gSG9zdENvbXBvbmVudCB8fCBub2RlLnRhZyA9PT0gSG9zdFRleHQpIHtcbiAgICAgICAgYXBwZW5kSW5pdGlhbENoaWxkKHBhcmVudCwgbm9kZS5zdGF0ZU5vZGUpO1xuICAgICAgfSBlbHNlIGlmIChub2RlLnRhZyA9PT0gSG9zdFBvcnRhbCkge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgcG9ydGFsIGNoaWxkLCB0aGVuIHdlIGRvbid0IHdhbnQgdG8gdHJhdmVyc2VcbiAgICAgICAgLy8gZG93biBpdHMgY2hpbGRyZW4uIEluc3RlYWQsIHdlJ2xsIGdldCBpbnNlcnRpb25zIGZyb20gZWFjaCBjaGlsZCBpblxuICAgICAgICAvLyB0aGUgcG9ydGFsIGRpcmVjdGx5LlxuICAgICAgfSBlbHNlIGlmIChub2RlLmNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUgPT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChub2RlLnNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKG5vZGUucmV0dXJuID09PSBudWxsIHx8IG5vZGUucmV0dXJuID09PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgICB9XG4gICAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgIH1cbiAgfTtcblxuICB1cGRhdGVIb3N0Q29udGFpbmVyID0gZnVuY3Rpb24gKHdvcmtJblByb2dyZXNzKSB7XG4gICAgLy8gTm9vcFxuICB9O1xuICB1cGRhdGVIb3N0Q29tcG9uZW50JDEgPSBmdW5jdGlvbiAoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHR5cGUsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UpIHtcbiAgICAvLyBJZiB3ZSBoYXZlIGFuIGFsdGVybmF0ZSwgdGhhdCBtZWFucyB0aGlzIGlzIGFuIHVwZGF0ZSBhbmQgd2UgbmVlZCB0b1xuICAgIC8vIHNjaGVkdWxlIGEgc2lkZS1lZmZlY3QgdG8gZG8gdGhlIHVwZGF0ZXMuXG4gICAgdmFyIG9sZFByb3BzID0gY3VycmVudC5tZW1vaXplZFByb3BzO1xuICAgIGlmIChvbGRQcm9wcyA9PT0gbmV3UHJvcHMpIHtcbiAgICAgIC8vIEluIG11dGF0aW9uIG1vZGUsIHRoaXMgaXMgc3VmZmljaWVudCBmb3IgYSBiYWlsb3V0IGJlY2F1c2VcbiAgICAgIC8vIHdlIHdvbid0IHRvdWNoIHRoaXMgbm9kZSBldmVuIGlmIGNoaWxkcmVuIGNoYW5nZWQuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZ2V0IHVwZGF0ZWQgYmVjYXVzZSBvbmUgb2Ygb3VyIGNoaWxkcmVuIHVwZGF0ZWQsIHdlIGRvbid0XG4gICAgLy8gaGF2ZSBuZXdQcm9wcyBzbyB3ZSdsbCBoYXZlIHRvIHJldXNlIHRoZW0uXG4gICAgLy8gVE9ETzogU3BsaXQgdGhlIHVwZGF0ZSBBUEkgYXMgc2VwYXJhdGUgZm9yIHRoZSBwcm9wcyB2cy4gY2hpbGRyZW4uXG4gICAgLy8gRXZlbiBiZXR0ZXIgd291bGQgYmUgaWYgY2hpbGRyZW4gd2VyZW4ndCBzcGVjaWFsIGNhc2VkIGF0IGFsbCB0aG8uXG4gICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIHZhciBjdXJyZW50SG9zdENvbnRleHQgPSBnZXRIb3N0Q29udGV4dCgpO1xuICAgIC8vIFRPRE86IEV4cGVyaWVuY2luZyBhbiBlcnJvciB3aGVyZSBvbGRQcm9wcyBpcyBudWxsLiBTdWdnZXN0cyBhIGhvc3RcbiAgICAvLyBjb21wb25lbnQgaXMgaGl0dGluZyB0aGUgcmVzdW1lIHBhdGguIEZpZ3VyZSBvdXQgd2h5LiBQb3NzaWJseVxuICAgIC8vIHJlbGF0ZWQgdG8gYGhpZGRlbmAuXG4gICAgdmFyIHVwZGF0ZVBheWxvYWQgPSBwcmVwYXJlVXBkYXRlKGluc3RhbmNlLCB0eXBlLCBvbGRQcm9wcywgbmV3UHJvcHMsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgY3VycmVudEhvc3RDb250ZXh0KTtcbiAgICAvLyBUT0RPOiBUeXBlIHRoaXMgc3BlY2lmaWMgdG8gdGhpcyB0eXBlIG9mIGNvbXBvbmVudC5cbiAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IHVwZGF0ZVBheWxvYWQ7XG4gICAgLy8gSWYgdGhlIHVwZGF0ZSBwYXlsb2FkIGluZGljYXRlcyB0aGF0IHRoZXJlIGlzIGEgY2hhbmdlIG9yIGlmIHRoZXJlXG4gICAgLy8gaXMgYSBuZXcgcmVmIHdlIG1hcmsgdGhpcyBhcyBhbiB1cGRhdGUuIEFsbCB0aGUgd29yayBpcyBkb25lIGluIGNvbW1pdFdvcmsuXG4gICAgaWYgKHVwZGF0ZVBheWxvYWQpIHtcbiAgICAgIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cbiAgfTtcbiAgdXBkYXRlSG9zdFRleHQkMSA9IGZ1bmN0aW9uIChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgb2xkVGV4dCwgbmV3VGV4dCkge1xuICAgIC8vIElmIHRoZSB0ZXh0IGRpZmZlcnMsIG1hcmsgaXQgYXMgYW4gdXBkYXRlLiBBbGwgdGhlIHdvcmsgaW4gZG9uZSBpbiBjb21taXRXb3JrLlxuICAgIGlmIChvbGRUZXh0ICE9PSBuZXdUZXh0KSB7XG4gICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG4gIH07XG59IGVsc2UgaWYgKHN1cHBvcnRzUGVyc2lzdGVuY2UpIHtcbiAgLy8gUGVyc2lzdGVudCBob3N0IHRyZWUgbW9kZVxuXG4gIGFwcGVuZEFsbENoaWxkcmVuID0gZnVuY3Rpb24gKHBhcmVudCwgd29ya0luUHJvZ3Jlc3MsIG5lZWRzVmlzaWJpbGl0eVRvZ2dsZSwgaXNIaWRkZW4pIHtcbiAgICAvLyBXZSBvbmx5IGhhdmUgdGhlIHRvcCBGaWJlciB0aGF0IHdhcyBjcmVhdGVkIGJ1dCB3ZSBuZWVkIHJlY3Vyc2UgZG93biBpdHNcbiAgICAvLyBjaGlsZHJlbiB0byBmaW5kIGFsbCB0aGUgdGVybWluYWwgbm9kZXMuXG4gICAgdmFyIG5vZGUgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxhYmVsc1xuICAgICAgYnJhbmNoZXM6IGlmIChub2RlLnRhZyA9PT0gSG9zdENvbXBvbmVudCkge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBub2RlLnN0YXRlTm9kZTtcbiAgICAgICAgaWYgKG5lZWRzVmlzaWJpbGl0eVRvZ2dsZSkge1xuICAgICAgICAgIHZhciBwcm9wcyA9IG5vZGUubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICB2YXIgdHlwZSA9IG5vZGUudHlwZTtcbiAgICAgICAgICBpZiAoaXNIaWRkZW4pIHtcbiAgICAgICAgICAgIC8vIFRoaXMgY2hpbGQgaXMgaW5zaWRlIGEgdGltZWQgb3V0IHRyZWUuIEhpZGUgaXQuXG4gICAgICAgICAgICBpbnN0YW5jZSA9IGNsb25lSGlkZGVuSW5zdGFuY2UoaW5zdGFuY2UsIHR5cGUsIHByb3BzLCBub2RlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVGhpcyBjaGlsZCB3YXMgcHJldmlvdXNseSBpbnNpZGUgYSB0aW1lZCBvdXQgdHJlZS4gSWYgaXQgd2FzIG5vdFxuICAgICAgICAgICAgLy8gdXBkYXRlZCBkdXJpbmcgdGhpcyByZW5kZXIsIGl0IG1heSBuZWVkIHRvIGJlIHVuaGlkZGVuLiBDbG9uZVxuICAgICAgICAgICAgLy8gYWdhaW4gdG8gYmUgc3VyZS5cbiAgICAgICAgICAgIGluc3RhbmNlID0gY2xvbmVVbmhpZGRlbkluc3RhbmNlKGluc3RhbmNlLCB0eXBlLCBwcm9wcywgbm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUuc3RhdGVOb2RlID0gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgYXBwZW5kSW5pdGlhbENoaWxkKHBhcmVudCwgaW5zdGFuY2UpO1xuICAgICAgfSBlbHNlIGlmIChub2RlLnRhZyA9PT0gSG9zdFRleHQpIHtcbiAgICAgICAgdmFyIF9pbnN0YW5jZSA9IG5vZGUuc3RhdGVOb2RlO1xuICAgICAgICBpZiAobmVlZHNWaXNpYmlsaXR5VG9nZ2xlKSB7XG4gICAgICAgICAgdmFyIHRleHQgPSBub2RlLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgdmFyIHJvb3RDb250YWluZXJJbnN0YW5jZSA9IGdldFJvb3RIb3N0Q29udGFpbmVyKCk7XG4gICAgICAgICAgdmFyIGN1cnJlbnRIb3N0Q29udGV4dCA9IGdldEhvc3RDb250ZXh0KCk7XG4gICAgICAgICAgaWYgKGlzSGlkZGVuKSB7XG4gICAgICAgICAgICBfaW5zdGFuY2UgPSBjcmVhdGVIaWRkZW5UZXh0SW5zdGFuY2UodGV4dCwgcm9vdENvbnRhaW5lckluc3RhbmNlLCBjdXJyZW50SG9zdENvbnRleHQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2luc3RhbmNlID0gY3JlYXRlVGV4dEluc3RhbmNlKHRleHQsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgY3VycmVudEhvc3RDb250ZXh0LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUuc3RhdGVOb2RlID0gX2luc3RhbmNlO1xuICAgICAgICB9XG4gICAgICAgIGFwcGVuZEluaXRpYWxDaGlsZChwYXJlbnQsIF9pbnN0YW5jZSk7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUudGFnID09PSBIb3N0UG9ydGFsKSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBwb3J0YWwgY2hpbGQsIHRoZW4gd2UgZG9uJ3Qgd2FudCB0byB0cmF2ZXJzZVxuICAgICAgICAvLyBkb3duIGl0cyBjaGlsZHJlbi4gSW5zdGVhZCwgd2UnbGwgZ2V0IGluc2VydGlvbnMgZnJvbSBlYWNoIGNoaWxkIGluXG4gICAgICAgIC8vIHRoZSBwb3J0YWwgZGlyZWN0bHkuXG4gICAgICB9IGVsc2UgaWYgKG5vZGUudGFnID09PSBTdXNwZW5zZUNvbXBvbmVudCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IG5vZGUuYWx0ZXJuYXRlO1xuICAgICAgICBpZiAoY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBvbGRTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICB2YXIgbmV3U3RhdGUgPSBub2RlLm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgdmFyIG9sZElzSGlkZGVuID0gb2xkU3RhdGUgIT09IG51bGwgJiYgb2xkU3RhdGUuZGlkVGltZW91dDtcbiAgICAgICAgICB2YXIgbmV3SXNIaWRkZW4gPSBuZXdTdGF0ZSAhPT0gbnVsbCAmJiBuZXdTdGF0ZS5kaWRUaW1lb3V0O1xuICAgICAgICAgIGlmIChvbGRJc0hpZGRlbiAhPT0gbmV3SXNIaWRkZW4pIHtcbiAgICAgICAgICAgIC8vIFRoZSBwbGFjZWhvbGRlciBlaXRoZXIganVzdCB0aW1lZCBvdXQgb3Igc3dpdGNoZWQgYmFjayB0byB0aGUgbm9ybWFsXG4gICAgICAgICAgICAvLyBjaGlsZHJlbiBhZnRlciBoYXZpbmcgcHJldmlvdXNseSB0aW1lZCBvdXQuIFRvZ2dsZSB0aGUgdmlzaWJpbGl0eSBvZlxuICAgICAgICAgICAgLy8gdGhlIGRpcmVjdCBob3N0IGNoaWxkcmVuLlxuICAgICAgICAgICAgdmFyIHByaW1hcnlDaGlsZFBhcmVudCA9IG5ld0lzSGlkZGVuID8gbm9kZS5jaGlsZCA6IG5vZGU7XG4gICAgICAgICAgICBpZiAocHJpbWFyeUNoaWxkUGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGFwcGVuZEFsbENoaWxkcmVuKHBhcmVudCwgcHJpbWFyeUNoaWxkUGFyZW50LCB0cnVlLCBuZXdJc0hpZGRlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbGFiZWxzXG4gICAgICAgICAgICBicmVhayBicmFuY2hlcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUuY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBDb250aW51ZSB0cmF2ZXJzaW5nIGxpa2Ugbm9ybWFsXG4gICAgICAgICAgbm9kZS5jaGlsZC5yZXR1cm4gPSBub2RlO1xuICAgICAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgbm9kZS5jaGlsZC5yZXR1cm4gPSBub2RlO1xuICAgICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICAvLyAkRmxvd0ZpeE1lIFRoaXMgaXMgY29ycmVjdCBidXQgRmxvdyBpcyBjb25mdXNlZCBieSB0aGUgbGFiZWxlZCBicmVhay5cbiAgICAgIG5vZGUgPSBub2RlO1xuICAgICAgaWYgKG5vZGUgPT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChub2RlLnNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKG5vZGUucmV0dXJuID09PSBudWxsIHx8IG5vZGUucmV0dXJuID09PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgICB9XG4gICAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgIH1cbiAgfTtcblxuICAvLyBBbiB1bmZvcnR1bmF0ZSBmb3JrIG9mIGFwcGVuZEFsbENoaWxkcmVuIGJlY2F1c2Ugd2UgaGF2ZSB0d28gZGlmZmVyZW50IHBhcmVudCB0eXBlcy5cbiAgdmFyIGFwcGVuZEFsbENoaWxkcmVuVG9Db250YWluZXIgPSBmdW5jdGlvbiAoY29udGFpbmVyQ2hpbGRTZXQsIHdvcmtJblByb2dyZXNzLCBuZWVkc1Zpc2liaWxpdHlUb2dnbGUsIGlzSGlkZGVuKSB7XG4gICAgLy8gV2Ugb25seSBoYXZlIHRoZSB0b3AgRmliZXIgdGhhdCB3YXMgY3JlYXRlZCBidXQgd2UgbmVlZCByZWN1cnNlIGRvd24gaXRzXG4gICAgLy8gY2hpbGRyZW4gdG8gZmluZCBhbGwgdGhlIHRlcm1pbmFsIG5vZGVzLlxuICAgIHZhciBub2RlID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sYWJlbHNcbiAgICAgIGJyYW5jaGVzOiBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gbm9kZS5zdGF0ZU5vZGU7XG4gICAgICAgIGlmIChuZWVkc1Zpc2liaWxpdHlUb2dnbGUpIHtcbiAgICAgICAgICB2YXIgcHJvcHMgPSBub2RlLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgdmFyIHR5cGUgPSBub2RlLnR5cGU7XG4gICAgICAgICAgaWYgKGlzSGlkZGVuKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGNoaWxkIGlzIGluc2lkZSBhIHRpbWVkIG91dCB0cmVlLiBIaWRlIGl0LlxuICAgICAgICAgICAgaW5zdGFuY2UgPSBjbG9uZUhpZGRlbkluc3RhbmNlKGluc3RhbmNlLCB0eXBlLCBwcm9wcywgbm9kZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoaXMgY2hpbGQgd2FzIHByZXZpb3VzbHkgaW5zaWRlIGEgdGltZWQgb3V0IHRyZWUuIElmIGl0IHdhcyBub3RcbiAgICAgICAgICAgIC8vIHVwZGF0ZWQgZHVyaW5nIHRoaXMgcmVuZGVyLCBpdCBtYXkgbmVlZCB0byBiZSB1bmhpZGRlbi4gQ2xvbmVcbiAgICAgICAgICAgIC8vIGFnYWluIHRvIGJlIHN1cmUuXG4gICAgICAgICAgICBpbnN0YW5jZSA9IGNsb25lVW5oaWRkZW5JbnN0YW5jZShpbnN0YW5jZSwgdHlwZSwgcHJvcHMsIG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBub2RlLnN0YXRlTm9kZSA9IGluc3RhbmNlO1xuICAgICAgICB9XG4gICAgICAgIGFwcGVuZENoaWxkVG9Db250YWluZXJDaGlsZFNldChjb250YWluZXJDaGlsZFNldCwgaW5zdGFuY2UpO1xuICAgICAgfSBlbHNlIGlmIChub2RlLnRhZyA9PT0gSG9zdFRleHQpIHtcbiAgICAgICAgdmFyIF9pbnN0YW5jZTIgPSBub2RlLnN0YXRlTm9kZTtcbiAgICAgICAgaWYgKG5lZWRzVmlzaWJpbGl0eVRvZ2dsZSkge1xuICAgICAgICAgIHZhciB0ZXh0ID0gbm9kZS5tZW1vaXplZFByb3BzO1xuICAgICAgICAgIHZhciByb290Q29udGFpbmVySW5zdGFuY2UgPSBnZXRSb290SG9zdENvbnRhaW5lcigpO1xuICAgICAgICAgIHZhciBjdXJyZW50SG9zdENvbnRleHQgPSBnZXRIb3N0Q29udGV4dCgpO1xuICAgICAgICAgIGlmIChpc0hpZGRlbikge1xuICAgICAgICAgICAgX2luc3RhbmNlMiA9IGNyZWF0ZUhpZGRlblRleHRJbnN0YW5jZSh0ZXh0LCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfaW5zdGFuY2UyID0gY3JlYXRlVGV4dEluc3RhbmNlKHRleHQsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgY3VycmVudEhvc3RDb250ZXh0LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUuc3RhdGVOb2RlID0gX2luc3RhbmNlMjtcbiAgICAgICAgfVxuICAgICAgICBhcHBlbmRDaGlsZFRvQ29udGFpbmVyQ2hpbGRTZXQoY29udGFpbmVyQ2hpbGRTZXQsIF9pbnN0YW5jZTIpO1xuICAgICAgfSBlbHNlIGlmIChub2RlLnRhZyA9PT0gSG9zdFBvcnRhbCkge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgcG9ydGFsIGNoaWxkLCB0aGVuIHdlIGRvbid0IHdhbnQgdG8gdHJhdmVyc2VcbiAgICAgICAgLy8gZG93biBpdHMgY2hpbGRyZW4uIEluc3RlYWQsIHdlJ2xsIGdldCBpbnNlcnRpb25zIGZyb20gZWFjaCBjaGlsZCBpblxuICAgICAgICAvLyB0aGUgcG9ydGFsIGRpcmVjdGx5LlxuICAgICAgfSBlbHNlIGlmIChub2RlLnRhZyA9PT0gU3VzcGVuc2VDb21wb25lbnQpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBub2RlLmFsdGVybmF0ZTtcbiAgICAgICAgaWYgKGN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgb2xkU3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgdmFyIG5ld1N0YXRlID0gbm9kZS5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgIHZhciBvbGRJc0hpZGRlbiA9IG9sZFN0YXRlICE9PSBudWxsICYmIG9sZFN0YXRlLmRpZFRpbWVvdXQ7XG4gICAgICAgICAgdmFyIG5ld0lzSGlkZGVuID0gbmV3U3RhdGUgIT09IG51bGwgJiYgbmV3U3RhdGUuZGlkVGltZW91dDtcbiAgICAgICAgICBpZiAob2xkSXNIaWRkZW4gIT09IG5ld0lzSGlkZGVuKSB7XG4gICAgICAgICAgICAvLyBUaGUgcGxhY2Vob2xkZXIgZWl0aGVyIGp1c3QgdGltZWQgb3V0IG9yIHN3aXRjaGVkIGJhY2sgdG8gdGhlIG5vcm1hbFxuICAgICAgICAgICAgLy8gY2hpbGRyZW4gYWZ0ZXIgaGF2aW5nIHByZXZpb3VzbHkgdGltZWQgb3V0LiBUb2dnbGUgdGhlIHZpc2liaWxpdHkgb2ZcbiAgICAgICAgICAgIC8vIHRoZSBkaXJlY3QgaG9zdCBjaGlsZHJlbi5cbiAgICAgICAgICAgIHZhciBwcmltYXJ5Q2hpbGRQYXJlbnQgPSBuZXdJc0hpZGRlbiA/IG5vZGUuY2hpbGQgOiBub2RlO1xuICAgICAgICAgICAgaWYgKHByaW1hcnlDaGlsZFBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBhcHBlbmRBbGxDaGlsZHJlblRvQ29udGFpbmVyKGNvbnRhaW5lckNoaWxkU2V0LCBwcmltYXJ5Q2hpbGRQYXJlbnQsIHRydWUsIG5ld0lzSGlkZGVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sYWJlbHNcbiAgICAgICAgICAgIGJyZWFrIGJyYW5jaGVzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIENvbnRpbnVlIHRyYXZlcnNpbmcgbGlrZSBub3JtYWxcbiAgICAgICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9kZS5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIC8vICRGbG93Rml4TWUgVGhpcyBpcyBjb3JyZWN0IGJ1dCBGbG93IGlzIGNvbmZ1c2VkIGJ5IHRoZSBsYWJlbGVkIGJyZWFrLlxuICAgICAgbm9kZSA9IG5vZGU7XG4gICAgICBpZiAobm9kZSA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgd2hpbGUgKG5vZGUuc2libGluZyA9PT0gbnVsbCkge1xuICAgICAgICBpZiAobm9kZS5yZXR1cm4gPT09IG51bGwgfHwgbm9kZS5yZXR1cm4gPT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgfVxuICB9O1xuICB1cGRhdGVIb3N0Q29udGFpbmVyID0gZnVuY3Rpb24gKHdvcmtJblByb2dyZXNzKSB7XG4gICAgdmFyIHBvcnRhbE9yUm9vdCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICB2YXIgY2hpbGRyZW5VbmNoYW5nZWQgPSB3b3JrSW5Qcm9ncmVzcy5maXJzdEVmZmVjdCA9PT0gbnVsbDtcbiAgICBpZiAoY2hpbGRyZW5VbmNoYW5nZWQpIHtcbiAgICAgIC8vIE5vIGNoYW5nZXMsIGp1c3QgcmV1c2UgdGhlIGV4aXN0aW5nIGluc3RhbmNlLlxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY29udGFpbmVyID0gcG9ydGFsT3JSb290LmNvbnRhaW5lckluZm87XG4gICAgICB2YXIgbmV3Q2hpbGRTZXQgPSBjcmVhdGVDb250YWluZXJDaGlsZFNldChjb250YWluZXIpO1xuICAgICAgLy8gSWYgY2hpbGRyZW4gbWlnaHQgaGF2ZSBjaGFuZ2VkLCB3ZSBoYXZlIHRvIGFkZCB0aGVtIGFsbCB0byB0aGUgc2V0LlxuICAgICAgYXBwZW5kQWxsQ2hpbGRyZW5Ub0NvbnRhaW5lcihuZXdDaGlsZFNldCwgd29ya0luUHJvZ3Jlc3MsIGZhbHNlLCBmYWxzZSk7XG4gICAgICBwb3J0YWxPclJvb3QucGVuZGluZ0NoaWxkcmVuID0gbmV3Q2hpbGRTZXQ7XG4gICAgICAvLyBTY2hlZHVsZSBhbiB1cGRhdGUgb24gdGhlIGNvbnRhaW5lciB0byBzd2FwIG91dCB0aGUgY29udGFpbmVyLlxuICAgICAgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBmaW5hbGl6ZUNvbnRhaW5lckNoaWxkcmVuKGNvbnRhaW5lciwgbmV3Q2hpbGRTZXQpO1xuICAgIH1cbiAgfTtcbiAgdXBkYXRlSG9zdENvbXBvbmVudCQxID0gZnVuY3Rpb24gKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCB0eXBlLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKSB7XG4gICAgdmFyIGN1cnJlbnRJbnN0YW5jZSA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgIHZhciBvbGRQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcbiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gZWZmZWN0cyBhc3NvY2lhdGVkIHdpdGggdGhpcyBub2RlLCB0aGVuIG5vbmUgb2Ygb3VyIGNoaWxkcmVuIGhhZCBhbnkgdXBkYXRlcy5cbiAgICAvLyBUaGlzIGd1YXJhbnRlZXMgdGhhdCB3ZSBjYW4gcmV1c2UgYWxsIG9mIHRoZW0uXG4gICAgdmFyIGNoaWxkcmVuVW5jaGFuZ2VkID0gd29ya0luUHJvZ3Jlc3MuZmlyc3RFZmZlY3QgPT09IG51bGw7XG4gICAgaWYgKGNoaWxkcmVuVW5jaGFuZ2VkICYmIG9sZFByb3BzID09PSBuZXdQcm9wcykge1xuICAgICAgLy8gTm8gY2hhbmdlcywganVzdCByZXVzZSB0aGUgZXhpc3RpbmcgaW5zdGFuY2UuXG4gICAgICAvLyBOb3RlIHRoYXQgdGhpcyBtaWdodCByZWxlYXNlIGEgcHJldmlvdXMgY2xvbmUuXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjdXJyZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciByZWN5Y2xhYmxlSW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgdmFyIGN1cnJlbnRIb3N0Q29udGV4dCA9IGdldEhvc3RDb250ZXh0KCk7XG4gICAgdmFyIHVwZGF0ZVBheWxvYWQgPSBudWxsO1xuICAgIGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMpIHtcbiAgICAgIHVwZGF0ZVBheWxvYWQgPSBwcmVwYXJlVXBkYXRlKHJlY3ljbGFibGVJbnN0YW5jZSwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCk7XG4gICAgfVxuICAgIGlmIChjaGlsZHJlblVuY2hhbmdlZCAmJiB1cGRhdGVQYXlsb2FkID09PSBudWxsKSB7XG4gICAgICAvLyBObyBjaGFuZ2VzLCBqdXN0IHJldXNlIHRoZSBleGlzdGluZyBpbnN0YW5jZS5cbiAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIG1pZ2h0IHJlbGVhc2UgYSBwcmV2aW91cyBjbG9uZS5cbiAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG5ld0luc3RhbmNlID0gY2xvbmVJbnN0YW5jZShjdXJyZW50SW5zdGFuY2UsIHVwZGF0ZVBheWxvYWQsIHR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcywgd29ya0luUHJvZ3Jlc3MsIGNoaWxkcmVuVW5jaGFuZ2VkLCByZWN5Y2xhYmxlSW5zdGFuY2UpO1xuICAgIGlmIChmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbihuZXdJbnN0YW5jZSwgdHlwZSwgbmV3UHJvcHMsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgY3VycmVudEhvc3RDb250ZXh0KSkge1xuICAgICAgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IG5ld0luc3RhbmNlO1xuICAgIGlmIChjaGlsZHJlblVuY2hhbmdlZCkge1xuICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIG90aGVyIGVmZmVjdHMgaW4gdGhpcyB0cmVlLCB3ZSBuZWVkIHRvIGZsYWcgdGhpcyBub2RlIGFzIGhhdmluZyBvbmUuXG4gICAgICAvLyBFdmVuIHRob3VnaCB3ZSdyZSBub3QgZ29pbmcgdG8gdXNlIGl0IGZvciBhbnl0aGluZy5cbiAgICAgIC8vIE90aGVyd2lzZSBwYXJlbnRzIHdvbid0IGtub3cgdGhhdCB0aGVyZSBhcmUgbmV3IGNoaWxkcmVuIHRvIHByb3BhZ2F0ZSB1cHdhcmRzLlxuICAgICAgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIGNoaWxkcmVuIG1pZ2h0IGhhdmUgY2hhbmdlZCwgd2UgaGF2ZSB0byBhZGQgdGhlbSBhbGwgdG8gdGhlIHNldC5cbiAgICAgIGFwcGVuZEFsbENoaWxkcmVuKG5ld0luc3RhbmNlLCB3b3JrSW5Qcm9ncmVzcywgZmFsc2UsIGZhbHNlKTtcbiAgICB9XG4gIH07XG4gIHVwZGF0ZUhvc3RUZXh0JDEgPSBmdW5jdGlvbiAoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG9sZFRleHQsIG5ld1RleHQpIHtcbiAgICBpZiAob2xkVGV4dCAhPT0gbmV3VGV4dCkge1xuICAgICAgLy8gSWYgdGhlIHRleHQgY29udGVudCBkaWZmZXJzLCB3ZSdsbCBjcmVhdGUgYSBuZXcgdGV4dCBpbnN0YW5jZSBmb3IgaXQuXG4gICAgICB2YXIgcm9vdENvbnRhaW5lckluc3RhbmNlID0gZ2V0Um9vdEhvc3RDb250YWluZXIoKTtcbiAgICAgIHZhciBjdXJyZW50SG9zdENvbnRleHQgPSBnZXRIb3N0Q29udGV4dCgpO1xuICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3JlYXRlVGV4dEluc3RhbmNlKG5ld1RleHQsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgY3VycmVudEhvc3RDb250ZXh0LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAvLyBXZSdsbCBoYXZlIHRvIG1hcmsgaXQgYXMgaGF2aW5nIGFuIGVmZmVjdCwgZXZlbiB0aG91Z2ggd2Ugd29uJ3QgdXNlIHRoZSBlZmZlY3QgZm9yIGFueXRoaW5nLlxuICAgICAgLy8gVGhpcyBsZXRzIHRoZSBwYXJlbnRzIGtub3cgdGhhdCBhdCBsZWFzdCBvbmUgb2YgdGhlaXIgY2hpbGRyZW4gaGFzIGNoYW5nZWQuXG4gICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG4gIH07XG59IGVsc2Uge1xuICAvLyBObyBob3N0IG9wZXJhdGlvbnNcbiAgdXBkYXRlSG9zdENvbnRhaW5lciA9IGZ1bmN0aW9uICh3b3JrSW5Qcm9ncmVzcykge1xuICAgIC8vIE5vb3BcbiAgfTtcbiAgdXBkYXRlSG9zdENvbXBvbmVudCQxID0gZnVuY3Rpb24gKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCB0eXBlLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKSB7XG4gICAgLy8gTm9vcFxuICB9O1xuICB1cGRhdGVIb3N0VGV4dCQxID0gZnVuY3Rpb24gKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBvbGRUZXh0LCBuZXdUZXh0KSB7XG4gICAgLy8gTm9vcFxuICB9O1xufVxuXG5mdW5jdGlvbiBjb21wbGV0ZVdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcblxuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgSW5kZXRlcm1pbmF0ZUNvbXBvbmVudDpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgTGF6eUNvbXBvbmVudDpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIENvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgICAgIGlmIChpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgICAgICAgcG9wQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgIHtcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHBvcFRvcExldmVsQ29udGV4dE9iamVjdCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHZhciBmaWJlclJvb3QgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICAgIGlmIChmaWJlclJvb3QucGVuZGluZ0NvbnRleHQpIHtcbiAgICAgICAgICBmaWJlclJvb3QuY29udGV4dCA9IGZpYmVyUm9vdC5wZW5kaW5nQ29udGV4dDtcbiAgICAgICAgICBmaWJlclJvb3QucGVuZGluZ0NvbnRleHQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ID09PSBudWxsIHx8IGN1cnJlbnQuY2hpbGQgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBJZiB3ZSBoeWRyYXRlZCwgcG9wIHNvIHRoYXQgd2UgY2FuIGRlbGV0ZSBhbnkgcmVtYWluaW5nIGNoaWxkcmVuXG4gICAgICAgICAgLy8gdGhhdCB3ZXJlbid0IGh5ZHJhdGVkLlxuICAgICAgICAgIHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAvLyBUaGlzIHJlc2V0cyB0aGUgaGFja3kgc3RhdGUgdG8gZml4IGlzTW91bnRlZCBiZWZvcmUgY29tbWl0dGluZy5cbiAgICAgICAgICAvLyBUT0RPOiBEZWxldGUgdGhpcyB3aGVuIHdlIGRlbGV0ZSBpc01vdW50ZWQgYW5kIGZpbmRET01Ob2RlLlxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyAmPSB+UGxhY2VtZW50O1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgdmFyIHJvb3RDb250YWluZXJJbnN0YW5jZSA9IGdldFJvb3RIb3N0Q29udGFpbmVyKCk7XG4gICAgICAgIHZhciB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgaWYgKGN1cnJlbnQgIT09IG51bGwgJiYgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlICE9IG51bGwpIHtcbiAgICAgICAgICB1cGRhdGVIb3N0Q29tcG9uZW50JDEoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHR5cGUsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UpO1xuXG4gICAgICAgICAgaWYgKGN1cnJlbnQucmVmICE9PSB3b3JrSW5Qcm9ncmVzcy5yZWYpIHtcbiAgICAgICAgICAgIG1hcmtSZWYkMSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghbmV3UHJvcHMpIHtcbiAgICAgICAgICAgICEod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ1dlIG11c3QgaGF2ZSBuZXcgcHJvcHMgZm9yIG5ldyBtb3VudHMuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gd2hlbiB3ZSBhYm9ydCB3b3JrLlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGN1cnJlbnRIb3N0Q29udGV4dCA9IGdldEhvc3RDb250ZXh0KCk7XG4gICAgICAgICAgLy8gVE9ETzogTW92ZSBjcmVhdGVJbnN0YW5jZSB0byBiZWdpbldvcmsgYW5kIGtlZXAgaXQgb24gYSBjb250ZXh0XG4gICAgICAgICAgLy8gXCJzdGFja1wiIGFzIHRoZSBwYXJlbnQuIFRoZW4gYXBwZW5kIGNoaWxkcmVuIGFzIHdlIGdvIGluIGJlZ2luV29ya1xuICAgICAgICAgIC8vIG9yIGNvbXBsZXRlV29yayBkZXBlbmRpbmcgb24gd2Ugd2FudCB0byBhZGQgdGhlbiB0b3AtPmRvd24gb3JcbiAgICAgICAgICAvLyBib3R0b20tPnVwLiBUb3AtPmRvd24gaXMgZmFzdGVyIGluIElFMTEuXG4gICAgICAgICAgdmFyIHdhc0h5ZHJhdGVkID0gcG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIGlmICh3YXNIeWRyYXRlZCkge1xuICAgICAgICAgICAgLy8gVE9ETzogTW92ZSB0aGlzIGFuZCBjcmVhdGVJbnN0YW5jZSBzdGVwIGludG8gdGhlIGJlZ2luUGhhc2VcbiAgICAgICAgICAgIC8vIHRvIGNvbnNvbGlkYXRlLlxuICAgICAgICAgICAgaWYgKHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgY3VycmVudEhvc3RDb250ZXh0KSkge1xuICAgICAgICAgICAgICAvLyBJZiBjaGFuZ2VzIHRvIHRoZSBoeWRyYXRlZCBub2RlIG5lZWRzIHRvIGJlIGFwcGxpZWQgYXQgdGhlXG4gICAgICAgICAgICAgIC8vIGNvbW1pdC1waGFzZSB3ZSBtYXJrIHRoaXMgYXMgc3VjaC5cbiAgICAgICAgICAgICAgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZUluc3RhbmNlKHR5cGUsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCwgd29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgICAgICAgICBhcHBlbmRBbGxDaGlsZHJlbihpbnN0YW5jZSwgd29ya0luUHJvZ3Jlc3MsIGZhbHNlLCBmYWxzZSk7XG5cbiAgICAgICAgICAgIC8vIENlcnRhaW4gcmVuZGVyZXJzIHJlcXVpcmUgY29tbWl0LXRpbWUgZWZmZWN0cyBmb3IgaW5pdGlhbCBtb3VudC5cbiAgICAgICAgICAgIC8vIChlZyBET00gcmVuZGVyZXIgc3VwcG9ydHMgYXV0by1mb2N1cyBmb3IgY2VydGFpbiBlbGVtZW50cykuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgc3VjaCByZW5kZXJlcnMgZ2V0IHNjaGVkdWxlZCBmb3IgbGF0ZXIgd29yay5cbiAgICAgICAgICAgIGlmIChmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbihpbnN0YW5jZSwgdHlwZSwgbmV3UHJvcHMsIHJvb3RDb250YWluZXJJbnN0YW5jZSwgY3VycmVudEhvc3RDb250ZXh0KSkge1xuICAgICAgICAgICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGluc3RhbmNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5yZWYgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGEgcmVmIG9uIGEgaG9zdCBub2RlIHdlIG5lZWQgdG8gc2NoZWR1bGUgYSBjYWxsYmFja1xuICAgICAgICAgICAgbWFya1JlZiQxKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgIHtcbiAgICAgICAgdmFyIG5ld1RleHQgPSBuZXdQcm9wcztcbiAgICAgICAgaWYgKGN1cnJlbnQgJiYgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgb2xkVGV4dCA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGFuIGFsdGVybmF0ZSwgdGhhdCBtZWFucyB0aGlzIGlzIGFuIHVwZGF0ZSBhbmQgd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIHNjaGVkdWxlIGEgc2lkZS1lZmZlY3QgdG8gZG8gdGhlIHVwZGF0ZXMuXG4gICAgICAgICAgdXBkYXRlSG9zdFRleHQkMShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgb2xkVGV4dCwgbmV3VGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuZXdUZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgISh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgIT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnV2UgbXVzdCBoYXZlIG5ldyBwcm9wcyBmb3IgbmV3IG1vdW50cy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiB3aGVuIHdlIGFib3J0IHdvcmsuXG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBfcm9vdENvbnRhaW5lckluc3RhbmNlID0gZ2V0Um9vdEhvc3RDb250YWluZXIoKTtcbiAgICAgICAgICB2YXIgX2N1cnJlbnRIb3N0Q29udGV4dCA9IGdldEhvc3RDb250ZXh0KCk7XG4gICAgICAgICAgdmFyIF93YXNIeWRyYXRlZCA9IHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICBpZiAoX3dhc0h5ZHJhdGVkKSB7XG4gICAgICAgICAgICBpZiAocHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MpKSB7XG4gICAgICAgICAgICAgIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjcmVhdGVUZXh0SW5zdGFuY2UobmV3VGV4dCwgX3Jvb3RDb250YWluZXJJbnN0YW5jZSwgX2N1cnJlbnRIb3N0Q29udGV4dCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgbmV4dFN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgdmFyIHByZXZTdGF0ZSA9IGN1cnJlbnQgIT09IG51bGwgPyBjdXJyZW50Lm1lbW9pemVkU3RhdGUgOiBudWxsO1xuICAgICAgICB2YXIgbmV4dERpZFRpbWVvdXQgPSBuZXh0U3RhdGUgIT09IG51bGwgJiYgbmV4dFN0YXRlLmRpZFRpbWVvdXQ7XG4gICAgICAgIHZhciBwcmV2RGlkVGltZW91dCA9IHByZXZTdGF0ZSAhPT0gbnVsbCAmJiBwcmV2U3RhdGUuZGlkVGltZW91dDtcbiAgICAgICAgaWYgKG5leHREaWRUaW1lb3V0ICE9PSBwcmV2RGlkVGltZW91dCkge1xuICAgICAgICAgIC8vIElmIHRoaXMgcmVuZGVyIGNvbW1pdHMsIGFuZCBpdCBzd2l0Y2hlcyBiZXR3ZWVuIHRoZSBub3JtYWwgc3RhdGVcbiAgICAgICAgICAvLyBhbmQgdGhlIHRpbWVkLW91dCBzdGF0ZSwgc2NoZWR1bGUgYW4gZWZmZWN0LlxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBVcGRhdGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBGcmFnbWVudDpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgTW9kZTpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgUHJvZmlsZXI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICBwb3BIb3N0Q29udGFpbmVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHVwZGF0ZUhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgICAvLyBQb3AgcHJvdmlkZXIgZmliZXJcbiAgICAgIHBvcFByb3ZpZGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQ29udGV4dENvbnN1bWVyOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBNZW1vQ29tcG9uZW50OlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBJbmNvbXBsZXRlQ2xhc3NDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIC8vIFNhbWUgYXMgY2xhc3MgY29tcG9uZW50IGNhc2UuIEkgcHV0IGl0IGRvd24gaGVyZSBzbyB0aGF0IHRoZSB0YWdzIGFyZVxuICAgICAgICAvLyBzZXF1ZW50aWFsIHRvIGVuc3VyZSB0aGlzIHN3aXRjaCBpcyBjb21waWxlZCB0byBhIGp1bXAgdGFibGUuXG4gICAgICAgIHZhciBfQ29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgaWYgKGlzQ29udGV4dFByb3ZpZGVyKF9Db21wb25lbnQpKSB7XG4gICAgICAgICAgcG9wQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIGludmFyaWFudChmYWxzZSwgJ1Vua25vd24gdW5pdCBvZiB3b3JrIHRhZy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBzaG91bGRDYXB0dXJlU3VzcGVuc2UoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgLy8gSW4gb3JkZXIgdG8gY2FwdHVyZSwgdGhlIFN1c3BlbnNlIGNvbXBvbmVudCBtdXN0IGhhdmUgYSBmYWxsYmFjayBwcm9wLlxuICBpZiAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIElmIGl0IHdhcyB0aGUgcHJpbWFyeSBjaGlsZHJlbiB0aGF0IGp1c3Qgc3VzcGVuZGVkLCBjYXB0dXJlIGFuZCByZW5kZXIgdGhlXG4gIC8vIGZhbGxiYWNrLiBPdGhlcndpc2UsIGRvbid0IGNhcHR1cmUgYW5kIGJ1YmJsZSB0byB0aGUgbmV4dCBib3VuZGFyeS5cbiAgdmFyIG5leHRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIHJldHVybiBuZXh0U3RhdGUgPT09IG51bGwgfHwgIW5leHRTdGF0ZS5kaWRUaW1lb3V0O1xufVxuXG4vLyBUaGlzIG1vZHVsZSBpcyBmb3JrZWQgaW4gZGlmZmVyZW50IGVudmlyb25tZW50cy5cbi8vIEJ5IGRlZmF1bHQsIHJldHVybiBgdHJ1ZWAgdG8gbG9nIGVycm9ycyB0byB0aGUgY29uc29sZS5cbi8vIEZvcmtzIGNhbiByZXR1cm4gYGZhbHNlYCBpZiB0aGlzIGlzbid0IGRlc2lyYWJsZS5cbmZ1bmN0aW9uIHNob3dFcnJvckRpYWxvZyhjYXB0dXJlZEVycm9yKSB7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBsb2dDYXB0dXJlZEVycm9yKGNhcHR1cmVkRXJyb3IpIHtcbiAgdmFyIGxvZ0Vycm9yID0gc2hvd0Vycm9yRGlhbG9nKGNhcHR1cmVkRXJyb3IpO1xuXG4gIC8vIEFsbG93IGluamVjdGVkIHNob3dFcnJvckRpYWxvZygpIHRvIHByZXZlbnQgZGVmYXVsdCBjb25zb2xlLmVycm9yIGxvZ2dpbmcuXG4gIC8vIFRoaXMgZW5hYmxlcyByZW5kZXJlcnMgbGlrZSBSZWFjdE5hdGl2ZSB0byBiZXR0ZXIgbWFuYWdlIHJlZGJveCBiZWhhdmlvci5cbiAgaWYgKGxvZ0Vycm9yID09PSBmYWxzZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBlcnJvciA9IGNhcHR1cmVkRXJyb3IuZXJyb3I7XG4gIHtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IGNhcHR1cmVkRXJyb3IuY29tcG9uZW50TmFtZSxcbiAgICAgICAgY29tcG9uZW50U3RhY2sgPSBjYXB0dXJlZEVycm9yLmNvbXBvbmVudFN0YWNrLFxuICAgICAgICBlcnJvckJvdW5kYXJ5TmFtZSA9IGNhcHR1cmVkRXJyb3IuZXJyb3JCb3VuZGFyeU5hbWUsXG4gICAgICAgIGVycm9yQm91bmRhcnlGb3VuZCA9IGNhcHR1cmVkRXJyb3IuZXJyb3JCb3VuZGFyeUZvdW5kLFxuICAgICAgICB3aWxsUmV0cnkgPSBjYXB0dXJlZEVycm9yLndpbGxSZXRyeTtcblxuICAgIC8vIEJyb3dzZXJzIHN1cHBvcnQgc2lsZW5jaW5nIHVuY2F1Z2h0IGVycm9ycyBieSBjYWxsaW5nXG4gICAgLy8gYHByZXZlbnREZWZhdWx0KClgIGluIHdpbmRvdyBgZXJyb3JgIGhhbmRsZXIuXG4gICAgLy8gV2UgcmVjb3JkIHRoaXMgaW5mb3JtYXRpb24gYXMgYW4gZXhwYW5kbyBvbiB0aGUgZXJyb3IuXG5cbiAgICBpZiAoZXJyb3IgIT0gbnVsbCAmJiBlcnJvci5fc3VwcHJlc3NMb2dnaW5nKSB7XG4gICAgICBpZiAoZXJyb3JCb3VuZGFyeUZvdW5kICYmIHdpbGxSZXRyeSkge1xuICAgICAgICAvLyBUaGUgZXJyb3IgaXMgcmVjb3ZlcmFibGUgYW5kIHdhcyBzaWxlbmNlZC5cbiAgICAgICAgLy8gSWdub3JlIGl0IGFuZCBkb24ndCBwcmludCB0aGUgc3RhY2sgYWRkZW5kdW0uXG4gICAgICAgIC8vIFRoaXMgaXMgaGFuZHkgZm9yIHRlc3RpbmcgZXJyb3IgYm91bmRhcmllcyB3aXRob3V0IG5vaXNlLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBUaGUgZXJyb3IgaXMgZmF0YWwuIFNpbmNlIHRoZSBzaWxlbmNpbmcgbWlnaHQgaGF2ZVxuICAgICAgLy8gYmVlbiBhY2NpZGVudGFsLCB3ZSdsbCBzdXJmYWNlIGl0IGFueXdheS5cbiAgICAgIC8vIEhvd2V2ZXIsIHRoZSBicm93c2VyIHdvdWxkIGhhdmUgc2lsZW5jZWQgdGhlIG9yaWdpbmFsIGVycm9yXG4gICAgICAvLyBzbyB3ZSdsbCBwcmludCBpdCBmaXJzdCwgYW5kIHRoZW4gcHJpbnQgdGhlIHN0YWNrIGFkZGVuZHVtLlxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAvLyBGb3IgYSBtb3JlIGRldGFpbGVkIGRlc2NyaXB0aW9uIG9mIHRoaXMgYmxvY2ssIHNlZTpcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzEzMzg0XG4gICAgfVxuXG4gICAgdmFyIGNvbXBvbmVudE5hbWVNZXNzYWdlID0gY29tcG9uZW50TmFtZSA/ICdUaGUgYWJvdmUgZXJyb3Igb2NjdXJyZWQgaW4gdGhlIDwnICsgY29tcG9uZW50TmFtZSArICc+IGNvbXBvbmVudDonIDogJ1RoZSBhYm92ZSBlcnJvciBvY2N1cnJlZCBpbiBvbmUgb2YgeW91ciBSZWFjdCBjb21wb25lbnRzOic7XG5cbiAgICB2YXIgZXJyb3JCb3VuZGFyeU1lc3NhZ2UgPSB2b2lkIDA7XG4gICAgLy8gZXJyb3JCb3VuZGFyeUZvdW5kIGNoZWNrIGlzIHN1ZmZpY2llbnQ7IGVycm9yQm91bmRhcnlOYW1lIGNoZWNrIGlzIHRvIHNhdGlzZnkgRmxvdy5cbiAgICBpZiAoZXJyb3JCb3VuZGFyeUZvdW5kICYmIGVycm9yQm91bmRhcnlOYW1lKSB7XG4gICAgICBpZiAod2lsbFJldHJ5KSB7XG4gICAgICAgIGVycm9yQm91bmRhcnlNZXNzYWdlID0gJ1JlYWN0IHdpbGwgdHJ5IHRvIHJlY3JlYXRlIHRoaXMgY29tcG9uZW50IHRyZWUgZnJvbSBzY3JhdGNoICcgKyAoJ3VzaW5nIHRoZSBlcnJvciBib3VuZGFyeSB5b3UgcHJvdmlkZWQsICcgKyBlcnJvckJvdW5kYXJ5TmFtZSArICcuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvckJvdW5kYXJ5TWVzc2FnZSA9ICdUaGlzIGVycm9yIHdhcyBpbml0aWFsbHkgaGFuZGxlZCBieSB0aGUgZXJyb3IgYm91bmRhcnkgJyArIGVycm9yQm91bmRhcnlOYW1lICsgJy5cXG4nICsgJ1JlY3JlYXRpbmcgdGhlIHRyZWUgZnJvbSBzY3JhdGNoIGZhaWxlZCBzbyBSZWFjdCB3aWxsIHVubW91bnQgdGhlIHRyZWUuJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3JCb3VuZGFyeU1lc3NhZ2UgPSAnQ29uc2lkZXIgYWRkaW5nIGFuIGVycm9yIGJvdW5kYXJ5IHRvIHlvdXIgdHJlZSB0byBjdXN0b21pemUgZXJyb3IgaGFuZGxpbmcgYmVoYXZpb3IuXFxuJyArICdWaXNpdCBodHRwczovL2ZiLm1lL3JlYWN0LWVycm9yLWJvdW5kYXJpZXMgdG8gbGVhcm4gbW9yZSBhYm91dCBlcnJvciBib3VuZGFyaWVzLic7XG4gICAgfVxuICAgIHZhciBjb21iaW5lZE1lc3NhZ2UgPSAnJyArIGNvbXBvbmVudE5hbWVNZXNzYWdlICsgY29tcG9uZW50U3RhY2sgKyAnXFxuXFxuJyArICgnJyArIGVycm9yQm91bmRhcnlNZXNzYWdlKTtcblxuICAgIC8vIEluIGRldmVsb3BtZW50LCB3ZSBwcm92aWRlIG91ciBvd24gbWVzc2FnZSB3aXRoIGp1c3QgdGhlIGNvbXBvbmVudCBzdGFjay5cbiAgICAvLyBXZSBkb24ndCBpbmNsdWRlIHRoZSBvcmlnaW5hbCBlcnJvciBtZXNzYWdlIGFuZCBKUyBzdGFjayBiZWNhdXNlIHRoZSBicm93c2VyXG4gICAgLy8gaGFzIGFscmVhZHkgcHJpbnRlZCBpdC4gRXZlbiBpZiB0aGUgYXBwbGljYXRpb24gc3dhbGxvd3MgdGhlIGVycm9yLCBpdCBpcyBzdGlsbFxuICAgIC8vIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciB0aGFua3MgdG8gdGhlIERFVi1vbmx5IGZha2UgZXZlbnQgdHJpY2sgaW4gUmVhY3RFcnJvclV0aWxzLlxuICAgIGNvbnNvbGUuZXJyb3IoY29tYmluZWRNZXNzYWdlKTtcbiAgfVxufVxuXG52YXIgZGlkV2FybkFib3V0VW5kZWZpbmVkU25hcHNob3RCZWZvcmVVcGRhdGUgPSBudWxsO1xue1xuICBkaWRXYXJuQWJvdXRVbmRlZmluZWRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IG5ldyBTZXQoKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IoYm91bmRhcnksIGVycm9ySW5mbykge1xuICB2YXIgc291cmNlID0gZXJyb3JJbmZvLnNvdXJjZTtcbiAgdmFyIHN0YWNrID0gZXJyb3JJbmZvLnN0YWNrO1xuICBpZiAoc3RhY2sgPT09IG51bGwgJiYgc291cmNlICE9PSBudWxsKSB7XG4gICAgc3RhY2sgPSBnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2Qoc291cmNlKTtcbiAgfVxuXG4gIHZhciBjYXB0dXJlZEVycm9yID0ge1xuICAgIGNvbXBvbmVudE5hbWU6IHNvdXJjZSAhPT0gbnVsbCA/IGdldENvbXBvbmVudE5hbWUoc291cmNlLnR5cGUpIDogbnVsbCxcbiAgICBjb21wb25lbnRTdGFjazogc3RhY2sgIT09IG51bGwgPyBzdGFjayA6ICcnLFxuICAgIGVycm9yOiBlcnJvckluZm8udmFsdWUsXG4gICAgZXJyb3JCb3VuZGFyeTogbnVsbCxcbiAgICBlcnJvckJvdW5kYXJ5TmFtZTogbnVsbCxcbiAgICBlcnJvckJvdW5kYXJ5Rm91bmQ6IGZhbHNlLFxuICAgIHdpbGxSZXRyeTogZmFsc2VcbiAgfTtcblxuICBpZiAoYm91bmRhcnkgIT09IG51bGwgJiYgYm91bmRhcnkudGFnID09PSBDbGFzc0NvbXBvbmVudCkge1xuICAgIGNhcHR1cmVkRXJyb3IuZXJyb3JCb3VuZGFyeSA9IGJvdW5kYXJ5LnN0YXRlTm9kZTtcbiAgICBjYXB0dXJlZEVycm9yLmVycm9yQm91bmRhcnlOYW1lID0gZ2V0Q29tcG9uZW50TmFtZShib3VuZGFyeS50eXBlKTtcbiAgICBjYXB0dXJlZEVycm9yLmVycm9yQm91bmRhcnlGb3VuZCA9IHRydWU7XG4gICAgY2FwdHVyZWRFcnJvci53aWxsUmV0cnkgPSB0cnVlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2dDYXB0dXJlZEVycm9yKGNhcHR1cmVkRXJyb3IpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gVGhpcyBtZXRob2QgbXVzdCBub3QgdGhyb3csIG9yIFJlYWN0IGludGVybmFsIHN0YXRlIHdpbGwgZ2V0IG1lc3NlZCB1cC5cbiAgICAvLyBJZiBjb25zb2xlLmVycm9yIGlzIG92ZXJyaWRkZW4sIG9yIGxvZ0NhcHR1cmVkRXJyb3IoKSBzaG93cyBhIGRpYWxvZyB0aGF0IHRocm93cyxcbiAgICAvLyB3ZSB3YW50IHRvIHJlcG9ydCB0aGlzIGVycm9yIG91dHNpZGUgb2YgdGhlIG5vcm1hbCBzdGFjayBhcyBhIGxhc3QgcmVzb3J0LlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTMxODhcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIGNhbGxDb21wb25lbnRXaWxsVW5tb3VudFdpdGhUaW1lciA9IGZ1bmN0aW9uIChjdXJyZW50JCQxLCBpbnN0YW5jZSkge1xuICBzdGFydFBoYXNlVGltZXIoY3VycmVudCQkMSwgJ2NvbXBvbmVudFdpbGxVbm1vdW50Jyk7XG4gIGluc3RhbmNlLnByb3BzID0gY3VycmVudCQkMS5tZW1vaXplZFByb3BzO1xuICBpbnN0YW5jZS5zdGF0ZSA9IGN1cnJlbnQkJDEubWVtb2l6ZWRTdGF0ZTtcbiAgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVubW91bnQoKTtcbiAgc3RvcFBoYXNlVGltZXIoKTtcbn07XG5cbi8vIENhcHR1cmUgZXJyb3JzIHNvIHRoZXkgZG9uJ3QgaW50ZXJydXB0IHVubW91bnRpbmcuXG5mdW5jdGlvbiBzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQoY3VycmVudCQkMSwgaW5zdGFuY2UpIHtcbiAge1xuICAgIGludm9rZUd1YXJkZWRDYWxsYmFjayhudWxsLCBjYWxsQ29tcG9uZW50V2lsbFVubW91bnRXaXRoVGltZXIsIG51bGwsIGN1cnJlbnQkJDEsIGluc3RhbmNlKTtcbiAgICBpZiAoaGFzQ2F1Z2h0RXJyb3IoKSkge1xuICAgICAgdmFyIHVubW91bnRFcnJvciA9IGNsZWFyQ2F1Z2h0RXJyb3IoKTtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQkJDEsIHVubW91bnRFcnJvcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNhZmVseURldGFjaFJlZihjdXJyZW50JCQxKSB7XG4gIHZhciByZWYgPSBjdXJyZW50JCQxLnJlZjtcbiAgaWYgKHJlZiAhPT0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB7XG4gICAgICAgIGludm9rZUd1YXJkZWRDYWxsYmFjayhudWxsLCByZWYsIG51bGwsIG51bGwpO1xuICAgICAgICBpZiAoaGFzQ2F1Z2h0RXJyb3IoKSkge1xuICAgICAgICAgIHZhciByZWZFcnJvciA9IGNsZWFyQ2F1Z2h0RXJyb3IoKTtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50JCQxLCByZWZFcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXMoY3VycmVudCQkMSwgZmluaXNoZWRXb3JrKSB7XG4gIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIGlmIChmaW5pc2hlZFdvcmsuZWZmZWN0VGFnICYgU25hcHNob3QpIHtcbiAgICAgICAgICBpZiAoY3VycmVudCQkMSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHByZXZQcm9wcyA9IGN1cnJlbnQkJDEubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgIHZhciBwcmV2U3RhdGUgPSBjdXJyZW50JCQxLm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgICBzdGFydFBoYXNlVGltZXIoZmluaXNoZWRXb3JrLCAnZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUnKTtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgICAgICBpbnN0YW5jZS5wcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgaW5zdGFuY2Uuc3RhdGUgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgIHZhciBzbmFwc2hvdCA9IGluc3RhbmNlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKTtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdmFyIGRpZFdhcm5TZXQgPSBkaWRXYXJuQWJvdXRVbmRlZmluZWRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtcbiAgICAgICAgICAgICAgaWYgKHNuYXBzaG90ID09PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5TZXQuaGFzKGZpbmlzaGVkV29yay50eXBlKSkge1xuICAgICAgICAgICAgICAgIGRpZFdhcm5TZXQuYWRkKGZpbmlzaGVkV29yay50eXBlKTtcbiAgICAgICAgICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpOiBBIHNuYXBzaG90IHZhbHVlIChvciBudWxsKSAnICsgJ211c3QgYmUgcmV0dXJuZWQuIFlvdSBoYXZlIHJldHVybmVkIHVuZGVmaW5lZC4nLCBnZXRDb21wb25lbnROYW1lKGZpbmlzaGVkV29yay50eXBlKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluc3RhbmNlLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlID0gc25hcHNob3Q7XG4gICAgICAgICAgICBzdG9wUGhhc2VUaW1lcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgY2FzZSBIb3N0Um9vdDpcbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgY2FzZSBIb3N0VGV4dDpcbiAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgY2FzZSBJbmNvbXBsZXRlQ2xhc3NDb21wb25lbnQ6XG4gICAgICAvLyBOb3RoaW5nIHRvIGRvIGZvciB0aGVzZSBjb21wb25lbnQgdHlwZXNcbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0OlxuICAgICAge1xuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdUaGlzIHVuaXQgb2Ygd29yayB0YWcgc2hvdWxkIG5vdCBoYXZlIHNpZGUtZWZmZWN0cy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRMaWZlQ3ljbGVzKGZpbmlzaGVkUm9vdCwgY3VycmVudCQkMSwgZmluaXNoZWRXb3JrLCBjb21taXR0ZWRFeHBpcmF0aW9uVGltZSkge1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICBpZiAoZmluaXNoZWRXb3JrLmVmZmVjdFRhZyAmIFVwZGF0ZSkge1xuICAgICAgICAgIGlmIChjdXJyZW50JCQxID09PSBudWxsKSB7XG4gICAgICAgICAgICBzdGFydFBoYXNlVGltZXIoZmluaXNoZWRXb3JrLCAnY29tcG9uZW50RGlkTW91bnQnKTtcbiAgICAgICAgICAgIGluc3RhbmNlLnByb3BzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICBpbnN0YW5jZS5zdGF0ZSA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgaW5zdGFuY2UuY29tcG9uZW50RGlkTW91bnQoKTtcbiAgICAgICAgICAgIHN0b3BQaGFzZVRpbWVyKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBwcmV2UHJvcHMgPSBjdXJyZW50JCQxLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICB2YXIgcHJldlN0YXRlID0gY3VycmVudCQkMS5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgc3RhcnRQaGFzZVRpbWVyKGZpbmlzaGVkV29yaywgJ2NvbXBvbmVudERpZFVwZGF0ZScpO1xuICAgICAgICAgICAgaW5zdGFuY2UucHJvcHMgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgIGluc3RhbmNlLnN0YXRlID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgICBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUsIGluc3RhbmNlLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKTtcbiAgICAgICAgICAgIHN0b3BQaGFzZVRpbWVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB1cGRhdGVRdWV1ZSA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZTtcbiAgICAgICAgaWYgKHVwZGF0ZVF1ZXVlICE9PSBudWxsKSB7XG4gICAgICAgICAgaW5zdGFuY2UucHJvcHMgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICBpbnN0YW5jZS5zdGF0ZSA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgIGNvbW1pdFVwZGF0ZVF1ZXVlKGZpbmlzaGVkV29yaywgdXBkYXRlUXVldWUsIGluc3RhbmNlLCBjb21taXR0ZWRFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICB7XG4gICAgICAgIHZhciBfdXBkYXRlUXVldWUgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWU7XG4gICAgICAgIGlmIChfdXBkYXRlUXVldWUgIT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgX2luc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICBpZiAoZmluaXNoZWRXb3JrLmNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay5jaGlsZC50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICAgICAgICAgIF9pbnN0YW5jZSA9IGdldFB1YmxpY0luc3RhbmNlKGZpbmlzaGVkV29yay5jaGlsZC5zdGF0ZU5vZGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICAgICAgICAgIF9pbnN0YW5jZSA9IGZpbmlzaGVkV29yay5jaGlsZC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbW1pdFVwZGF0ZVF1ZXVlKGZpbmlzaGVkV29yaywgX3VwZGF0ZVF1ZXVlLCBfaW5zdGFuY2UsIGNvbW1pdHRlZEV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgX2luc3RhbmNlMiA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG5cbiAgICAgICAgLy8gUmVuZGVyZXJzIG1heSBzY2hlZHVsZSB3b3JrIHRvIGJlIGRvbmUgYWZ0ZXIgaG9zdCBjb21wb25lbnRzIGFyZSBtb3VudGVkXG4gICAgICAgIC8vIChlZyBET00gcmVuZGVyZXIgbWF5IHNjaGVkdWxlIGF1dG8tZm9jdXMgZm9yIGlucHV0cyBhbmQgZm9ybSBjb250cm9scykuXG4gICAgICAgIC8vIFRoZXNlIGVmZmVjdHMgc2hvdWxkIG9ubHkgYmUgY29tbWl0dGVkIHdoZW4gY29tcG9uZW50cyBhcmUgZmlyc3QgbW91bnRlZCxcbiAgICAgICAgLy8gYWthIHdoZW4gdGhlcmUgaXMgbm8gY3VycmVudC9hbHRlcm5hdGUuXG4gICAgICAgIGlmIChjdXJyZW50JCQxID09PSBudWxsICYmIGZpbmlzaGVkV29yay5lZmZlY3RUYWcgJiBVcGRhdGUpIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGZpbmlzaGVkV29yay50eXBlO1xuICAgICAgICAgIHZhciBwcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAgIGNvbW1pdE1vdW50KF9pbnN0YW5jZTIsIHR5cGUsIHByb3BzLCBmaW5pc2hlZFdvcmspO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgICB7XG4gICAgICAgIC8vIFdlIGhhdmUgbm8gbGlmZS1jeWNsZXMgYXNzb2NpYXRlZCB3aXRoIHRleHQuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICB7XG4gICAgICAgIC8vIFdlIGhhdmUgbm8gbGlmZS1jeWNsZXMgYXNzb2NpYXRlZCB3aXRoIHBvcnRhbHMuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBjYXNlIFByb2ZpbGVyOlxuICAgICAge1xuICAgICAgICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lcikge1xuICAgICAgICAgIHZhciBvblJlbmRlciA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLm9uUmVuZGVyO1xuXG4gICAgICAgICAgaWYgKGVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICAgICAgICAgIG9uUmVuZGVyKGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLmlkLCBjdXJyZW50JCQxID09PSBudWxsID8gJ21vdW50JyA6ICd1cGRhdGUnLCBmaW5pc2hlZFdvcmsuYWN0dWFsRHVyYXRpb24sIGZpbmlzaGVkV29yay50cmVlQmFzZUR1cmF0aW9uLCBmaW5pc2hlZFdvcmsuYWN0dWFsU3RhcnRUaW1lLCBnZXRDb21taXRUaW1lKCksIGZpbmlzaGVkUm9vdC5tZW1vaXplZEludGVyYWN0aW9ucyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9uUmVuZGVyKGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLmlkLCBjdXJyZW50JCQxID09PSBudWxsID8gJ21vdW50JyA6ICd1cGRhdGUnLCBmaW5pc2hlZFdvcmsuYWN0dWFsRHVyYXRpb24sIGZpbmlzaGVkV29yay50cmVlQmFzZUR1cmF0aW9uLCBmaW5pc2hlZFdvcmsuYWN0dWFsU3RhcnRUaW1lLCBnZXRDb21taXRUaW1lKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgY2FzZSBTdXNwZW5zZUNvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgaWYgKGZpbmlzaGVkV29yay5lZmZlY3RUYWcgJiBDYWxsYmFjaykge1xuICAgICAgICAgIC8vIEluIG5vbi1zdHJpY3QgbW9kZSwgYSBzdXNwZW5zZSBib3VuZGFyeSB0aW1lcyBvdXQgYnkgY29tbWl0aW5nXG4gICAgICAgICAgLy8gdHdpY2U6IGZpcnN0LCBieSBjb21taXR0aW5nIHRoZSBjaGlsZHJlbiBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUsXG4gICAgICAgICAgLy8gdGhlbiBoaWRpbmcgdGhlbSBhbmQgc2hvd2luZyB0aGUgZmFsbGJhY2sgY2hpbGRyZW4gaW4gYSBzdWJzZXF1ZW50XG4gICAgICAgICAgdmFyIF9uZXdTdGF0ZSA9IHtcbiAgICAgICAgICAgIGFscmVhZHlDYXB0dXJlZDogdHJ1ZSxcbiAgICAgICAgICAgIGRpZFRpbWVvdXQ6IGZhbHNlLFxuICAgICAgICAgICAgdGltZWRPdXRBdDogTm9Xb3JrXG4gICAgICAgICAgfTtcbiAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSA9IF9uZXdTdGF0ZTtcbiAgICAgICAgICBzY2hlZHVsZVdvcmsoZmluaXNoZWRXb3JrLCBTeW5jKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9sZFN0YXRlID0gY3VycmVudCQkMSAhPT0gbnVsbCA/IGN1cnJlbnQkJDEubWVtb2l6ZWRTdGF0ZSA6IG51bGw7XG4gICAgICAgIHZhciBuZXdTdGF0ZSA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlO1xuICAgICAgICB2YXIgb2xkRGlkVGltZW91dCA9IG9sZFN0YXRlICE9PSBudWxsID8gb2xkU3RhdGUuZGlkVGltZW91dCA6IGZhbHNlO1xuXG4gICAgICAgIHZhciBuZXdEaWRUaW1lb3V0ID0gdm9pZCAwO1xuICAgICAgICB2YXIgcHJpbWFyeUNoaWxkUGFyZW50ID0gZmluaXNoZWRXb3JrO1xuICAgICAgICBpZiAobmV3U3RhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICBuZXdEaWRUaW1lb3V0ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3RGlkVGltZW91dCA9IG5ld1N0YXRlLmRpZFRpbWVvdXQ7XG4gICAgICAgICAgaWYgKG5ld0RpZFRpbWVvdXQpIHtcbiAgICAgICAgICAgIHByaW1hcnlDaGlsZFBhcmVudCA9IGZpbmlzaGVkV29yay5jaGlsZDtcbiAgICAgICAgICAgIG5ld1N0YXRlLmFscmVhZHlDYXB0dXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKG5ld1N0YXRlLnRpbWVkT3V0QXQgPT09IE5vV29yaykge1xuICAgICAgICAgICAgICAvLyBJZiB0aGUgY2hpbGRyZW4gaGFkIG5vdCBhbHJlYWR5IHRpbWVkIG91dCwgcmVjb3JkIHRoZSB0aW1lLlxuICAgICAgICAgICAgICAvLyBUaGlzIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGUgZWxhcHNlZCB0aW1lIGR1cmluZyBzdWJzZXF1ZW50XG4gICAgICAgICAgICAgIC8vIGF0dGVtcHRzIHRvIHJlbmRlciB0aGUgY2hpbGRyZW4uXG4gICAgICAgICAgICAgIG5ld1N0YXRlLnRpbWVkT3V0QXQgPSByZXF1ZXN0Q3VycmVudFRpbWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3RGlkVGltZW91dCAhPT0gb2xkRGlkVGltZW91dCAmJiBwcmltYXJ5Q2hpbGRQYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICBoaWRlT3JVbmhpZGVBbGxDaGlsZHJlbihwcmltYXJ5Q2hpbGRQYXJlbnQsIG5ld0RpZFRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBjYXNlIEluY29tcGxldGVDbGFzc0NvbXBvbmVudDpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB7XG4gICAgICAgIGludmFyaWFudChmYWxzZSwgJ1RoaXMgdW5pdCBvZiB3b3JrIHRhZyBzaG91bGQgbm90IGhhdmUgc2lkZS1lZmZlY3RzLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGhpZGVPclVuaGlkZUFsbENoaWxkcmVuKGZpbmlzaGVkV29yaywgaXNIaWRkZW4pIHtcbiAgaWYgKHN1cHBvcnRzTXV0YXRpb24pIHtcbiAgICAvLyBXZSBvbmx5IGhhdmUgdGhlIHRvcCBGaWJlciB0aGF0IHdhcyBpbnNlcnRlZCBidXQgd2UgbmVlZCByZWN1cnNlIGRvd24gaXRzXG4gICAgdmFyIG5vZGUgPSBmaW5pc2hlZFdvcms7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmIChub2RlLnRhZyA9PT0gSG9zdENvbXBvbmVudCkge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBub2RlLnN0YXRlTm9kZTtcbiAgICAgICAgaWYgKGlzSGlkZGVuKSB7XG4gICAgICAgICAgaGlkZUluc3RhbmNlKGluc3RhbmNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1bmhpZGVJbnN0YW5jZShub2RlLnN0YXRlTm9kZSwgbm9kZS5tZW1vaXplZFByb3BzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub2RlLnRhZyA9PT0gSG9zdFRleHQpIHtcbiAgICAgICAgdmFyIF9pbnN0YW5jZTMgPSBub2RlLnN0YXRlTm9kZTtcbiAgICAgICAgaWYgKGlzSGlkZGVuKSB7XG4gICAgICAgICAgaGlkZVRleHRJbnN0YW5jZShfaW5zdGFuY2UzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1bmhpZGVUZXh0SW5zdGFuY2UoX2luc3RhbmNlMywgbm9kZS5tZW1vaXplZFByb3BzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub2RlLmNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUgPT09IGZpbmlzaGVkV29yaykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3aGlsZSAobm9kZS5zaWJsaW5nID09PSBudWxsKSB7XG4gICAgICAgIGlmIChub2RlLnJldHVybiA9PT0gbnVsbCB8fCBub2RlLnJldHVybiA9PT0gZmluaXNoZWRXb3JrKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdEF0dGFjaFJlZihmaW5pc2hlZFdvcmspIHtcbiAgdmFyIHJlZiA9IGZpbmlzaGVkV29yay5yZWY7XG4gIGlmIChyZWYgIT09IG51bGwpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgIHZhciBpbnN0YW5jZVRvVXNlID0gdm9pZCAwO1xuICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICBpbnN0YW5jZVRvVXNlID0gZ2V0UHVibGljSW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGluc3RhbmNlVG9Vc2UgPSBpbnN0YW5jZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlZihpbnN0YW5jZVRvVXNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAge1xuICAgICAgICBpZiAoIXJlZi5oYXNPd25Qcm9wZXJ0eSgnY3VycmVudCcpKSB7XG4gICAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnVW5leHBlY3RlZCByZWYgb2JqZWN0IHByb3ZpZGVkIGZvciAlcy4gJyArICdVc2UgZWl0aGVyIGEgcmVmLXNldHRlciBmdW5jdGlvbiBvciBSZWFjdC5jcmVhdGVSZWYoKS4lcycsIGdldENvbXBvbmVudE5hbWUoZmluaXNoZWRXb3JrLnR5cGUpLCBnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2QoZmluaXNoZWRXb3JrKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVmLmN1cnJlbnQgPSBpbnN0YW5jZVRvVXNlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXREZXRhY2hSZWYoY3VycmVudCQkMSkge1xuICB2YXIgY3VycmVudFJlZiA9IGN1cnJlbnQkJDEucmVmO1xuICBpZiAoY3VycmVudFJlZiAhPT0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgY3VycmVudFJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY3VycmVudFJlZihudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudFJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuLy8gVXNlci1vcmlnaW5hdGluZyBlcnJvcnMgKGxpZmVjeWNsZXMgYW5kIHJlZnMpIHNob3VsZCBub3QgaW50ZXJydXB0XG4vLyBkZWxldGlvbiwgc28gZG9uJ3QgbGV0IHRoZW0gdGhyb3cuIEhvc3Qtb3JpZ2luYXRpbmcgZXJyb3JzIHNob3VsZFxuLy8gaW50ZXJydXB0IGRlbGV0aW9uLCBzbyBpdCdzIG9rYXlcbmZ1bmN0aW9uIGNvbW1pdFVubW91bnQoY3VycmVudCQkMSkge1xuICBvbkNvbW1pdFVubW91bnQoY3VycmVudCQkMSk7XG5cbiAgc3dpdGNoIChjdXJyZW50JCQxLnRhZykge1xuICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50JCQxKTtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gY3VycmVudCQkMS5zdGF0ZU5vZGU7XG4gICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVubW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQoY3VycmVudCQkMSwgaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50JCQxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgIHtcbiAgICAgICAgLy8gVE9ETzogdGhpcyBpcyByZWN1cnNpdmUuXG4gICAgICAgIC8vIFdlIGFyZSBhbHNvIG5vdCB1c2luZyB0aGlzIHBhcmVudCBiZWNhdXNlXG4gICAgICAgIC8vIHRoZSBwb3J0YWwgd2lsbCBnZXQgcHVzaGVkIGltbWVkaWF0ZWx5LlxuICAgICAgICBpZiAoc3VwcG9ydHNNdXRhdGlvbikge1xuICAgICAgICAgIHVubW91bnRIb3N0Q29tcG9uZW50cyhjdXJyZW50JCQxKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0c1BlcnNpc3RlbmNlKSB7XG4gICAgICAgICAgZW1wdHlQb3J0YWxDb250YWluZXIoY3VycmVudCQkMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdE5lc3RlZFVubW91bnRzKHJvb3QpIHtcbiAgLy8gV2hpbGUgd2UncmUgaW5zaWRlIGEgcmVtb3ZlZCBob3N0IG5vZGUgd2UgZG9uJ3Qgd2FudCB0byBjYWxsXG4gIC8vIHJlbW92ZUNoaWxkIG9uIHRoZSBpbm5lciBub2RlcyBiZWNhdXNlIHRoZXkncmUgcmVtb3ZlZCBieSB0aGUgdG9wXG4gIC8vIGNhbGwgYW55d2F5LiBXZSBhbHNvIHdhbnQgdG8gY2FsbCBjb21wb25lbnRXaWxsVW5tb3VudCBvbiBhbGxcbiAgLy8gY29tcG9zaXRlcyBiZWZvcmUgdGhpcyBob3N0IG5vZGUgaXMgcmVtb3ZlZCBmcm9tIHRoZSB0cmVlLiBUaGVyZWZvcmVcbiAgdmFyIG5vZGUgPSByb290O1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbW1pdFVubW91bnQobm9kZSk7XG4gICAgLy8gVmlzaXQgY2hpbGRyZW4gYmVjYXVzZSB0aGV5IG1heSBjb250YWluIG1vcmUgY29tcG9zaXRlIG9yIGhvc3Qgbm9kZXMuXG4gICAgLy8gU2tpcCBwb3J0YWxzIGJlY2F1c2UgY29tbWl0VW5tb3VudCgpIGN1cnJlbnRseSB2aXNpdHMgdGhlbSByZWN1cnNpdmVseS5cbiAgICBpZiAobm9kZS5jaGlsZCAhPT0gbnVsbCAmJiAoXG4gICAgLy8gSWYgd2UgdXNlIG11dGF0aW9uIHdlIGRyaWxsIGRvd24gaW50byBwb3J0YWxzIHVzaW5nIGNvbW1pdFVubW91bnQgYWJvdmUuXG4gICAgLy8gSWYgd2UgZG9uJ3QgdXNlIG11dGF0aW9uIHdlIGRyaWxsIGRvd24gaW50byBwb3J0YWxzIGhlcmUgaW5zdGVhZC5cbiAgICAhc3VwcG9ydHNNdXRhdGlvbiB8fCBub2RlLnRhZyAhPT0gSG9zdFBvcnRhbCkpIHtcbiAgICAgIG5vZGUuY2hpbGQucmV0dXJuID0gbm9kZTtcbiAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChub2RlID09PSByb290KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdoaWxlIChub2RlLnNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgIGlmIChub2RlLnJldHVybiA9PT0gbnVsbCB8fCBub2RlLnJldHVybiA9PT0gcm9vdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfVxuICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRldGFjaEZpYmVyKGN1cnJlbnQkJDEpIHtcbiAgLy8gQ3V0IG9mZiB0aGUgcmV0dXJuIHBvaW50ZXJzIHRvIGRpc2Nvbm5lY3QgaXQgZnJvbSB0aGUgdHJlZS4gSWRlYWxseSwgd2VcbiAgLy8gc2hvdWxkIGNsZWFyIHRoZSBjaGlsZCBwb2ludGVyIG9mIHRoZSBwYXJlbnQgYWx0ZXJuYXRlIHRvIGxldCB0aGlzXG4gIC8vIGdldCBHQzplZCBidXQgd2UgZG9uJ3Qga25vdyB3aGljaCBmb3Igc3VyZSB3aGljaCBwYXJlbnQgaXMgdGhlIGN1cnJlbnRcbiAgLy8gb25lIHNvIHdlJ2xsIHNldHRsZSBmb3IgR0M6aW5nIHRoZSBzdWJ0cmVlIG9mIHRoaXMgY2hpbGQuIFRoaXMgY2hpbGRcbiAgLy8gaXRzZWxmIHdpbGwgYmUgR0M6ZWQgd2hlbiB0aGUgcGFyZW50IHVwZGF0ZXMgdGhlIG5leHQgdGltZS5cbiAgY3VycmVudCQkMS5yZXR1cm4gPSBudWxsO1xuICBjdXJyZW50JCQxLmNoaWxkID0gbnVsbDtcbiAgaWYgKGN1cnJlbnQkJDEuYWx0ZXJuYXRlKSB7XG4gICAgY3VycmVudCQkMS5hbHRlcm5hdGUuY2hpbGQgPSBudWxsO1xuICAgIGN1cnJlbnQkJDEuYWx0ZXJuYXRlLnJldHVybiA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1wdHlQb3J0YWxDb250YWluZXIoY3VycmVudCQkMSkge1xuICBpZiAoIXN1cHBvcnRzUGVyc2lzdGVuY2UpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcG9ydGFsID0gY3VycmVudCQkMS5zdGF0ZU5vZGU7XG4gIHZhciBjb250YWluZXJJbmZvID0gcG9ydGFsLmNvbnRhaW5lckluZm87XG5cbiAgdmFyIGVtcHR5Q2hpbGRTZXQgPSBjcmVhdGVDb250YWluZXJDaGlsZFNldChjb250YWluZXJJbmZvKTtcbiAgcmVwbGFjZUNvbnRhaW5lckNoaWxkcmVuKGNvbnRhaW5lckluZm8sIGVtcHR5Q2hpbGRTZXQpO1xufVxuXG5mdW5jdGlvbiBjb21taXRDb250YWluZXIoZmluaXNoZWRXb3JrKSB7XG4gIGlmICghc3VwcG9ydHNQZXJzaXN0ZW5jZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RUZXh0OlxuICAgICAge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgY2FzZSBIb3N0Um9vdDpcbiAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICB7XG4gICAgICAgIHZhciBwb3J0YWxPclJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICB2YXIgY29udGFpbmVySW5mbyA9IHBvcnRhbE9yUm9vdC5jb250YWluZXJJbmZvLFxuICAgICAgICAgICAgX3BlbmRpbmdDaGlsZHJlbiA9IHBvcnRhbE9yUm9vdC5wZW5kaW5nQ2hpbGRyZW47XG5cbiAgICAgICAgcmVwbGFjZUNvbnRhaW5lckNoaWxkcmVuKGNvbnRhaW5lckluZm8sIF9wZW5kaW5nQ2hpbGRyZW4pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgaW52YXJpYW50KGZhbHNlLCAnVGhpcyB1bml0IG9mIHdvcmsgdGFnIHNob3VsZCBub3QgaGF2ZSBzaWRlLWVmZmVjdHMuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SG9zdFBhcmVudEZpYmVyKGZpYmVyKSB7XG4gIHZhciBwYXJlbnQgPSBmaWJlci5yZXR1cm47XG4gIHdoaWxlIChwYXJlbnQgIT09IG51bGwpIHtcbiAgICBpZiAoaXNIb3N0UGFyZW50KHBhcmVudCkpIHtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5yZXR1cm47XG4gIH1cbiAgaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgdG8gZmluZCBhIGhvc3QgcGFyZW50LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xufVxuXG5mdW5jdGlvbiBpc0hvc3RQYXJlbnQoZmliZXIpIHtcbiAgcmV0dXJuIGZpYmVyLnRhZyA9PT0gSG9zdENvbXBvbmVudCB8fCBmaWJlci50YWcgPT09IEhvc3RSb290IHx8IGZpYmVyLnRhZyA9PT0gSG9zdFBvcnRhbDtcbn1cblxuZnVuY3Rpb24gZ2V0SG9zdFNpYmxpbmcoZmliZXIpIHtcbiAgLy8gV2UncmUgZ29pbmcgdG8gc2VhcmNoIGZvcndhcmQgaW50byB0aGUgdHJlZSB1bnRpbCB3ZSBmaW5kIGEgc2libGluZyBob3N0XG4gIC8vIG5vZGUuIFVuZm9ydHVuYXRlbHksIGlmIG11bHRpcGxlIGluc2VydGlvbnMgYXJlIGRvbmUgaW4gYSByb3cgd2UgaGF2ZSB0b1xuICAvLyBzZWFyY2ggcGFzdCB0aGVtLiBUaGlzIGxlYWRzIHRvIGV4cG9uZW50aWFsIHNlYXJjaCBmb3IgdGhlIG5leHQgc2libGluZy5cbiAgdmFyIG5vZGUgPSBmaWJlcjtcbiAgc2libGluZ3M6IHdoaWxlICh0cnVlKSB7XG4gICAgLy8gSWYgd2UgZGlkbid0IGZpbmQgYW55dGhpbmcsIGxldCdzIHRyeSB0aGUgbmV4dCBzaWJsaW5nLlxuICAgIHdoaWxlIChub2RlLnNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgIGlmIChub2RlLnJldHVybiA9PT0gbnVsbCB8fCBpc0hvc3RQYXJlbnQobm9kZS5yZXR1cm4pKSB7XG4gICAgICAgIC8vIElmIHdlIHBvcCBvdXQgb2YgdGhlIHJvb3Qgb3IgaGl0IHRoZSBwYXJlbnQgdGhlIGZpYmVyIHdlIGFyZSB0aGVcbiAgICAgICAgLy8gbGFzdCBzaWJsaW5nLlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICB9XG4gICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgd2hpbGUgKG5vZGUudGFnICE9PSBIb3N0Q29tcG9uZW50ICYmIG5vZGUudGFnICE9PSBIb3N0VGV4dCkge1xuICAgICAgLy8gSWYgaXQgaXMgbm90IGhvc3Qgbm9kZSBhbmQsIHdlIG1pZ2h0IGhhdmUgYSBob3N0IG5vZGUgaW5zaWRlIGl0LlxuICAgICAgLy8gVHJ5IHRvIHNlYXJjaCBkb3duIHVudGlsIHdlIGZpbmQgb25lLlxuICAgICAgaWYgKG5vZGUuZWZmZWN0VGFnICYgUGxhY2VtZW50KSB7XG4gICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBjaGlsZCwgdHJ5IHRoZSBzaWJsaW5ncyBpbnN0ZWFkLlxuICAgICAgICBjb250aW51ZSBzaWJsaW5ncztcbiAgICAgIH1cbiAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBjaGlsZCwgdHJ5IHRoZSBzaWJsaW5ncyBpbnN0ZWFkLlxuICAgICAgLy8gV2UgYWxzbyBza2lwIHBvcnRhbHMgYmVjYXVzZSB0aGV5IGFyZSBub3QgcGFydCBvZiB0aGlzIGhvc3QgdHJlZS5cbiAgICAgIGlmIChub2RlLmNoaWxkID09PSBudWxsIHx8IG5vZGUudGFnID09PSBIb3N0UG9ydGFsKSB7XG4gICAgICAgIGNvbnRpbnVlIHNpYmxpbmdzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5jaGlsZC5yZXR1cm4gPSBub2RlO1xuICAgICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQ2hlY2sgaWYgdGhpcyBob3N0IG5vZGUgaXMgc3RhYmxlIG9yIGFib3V0IHRvIGJlIHBsYWNlZC5cbiAgICBpZiAoIShub2RlLmVmZmVjdFRhZyAmIFBsYWNlbWVudCkpIHtcbiAgICAgIC8vIEZvdW5kIGl0IVxuICAgICAgcmV0dXJuIG5vZGUuc3RhdGVOb2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRQbGFjZW1lbnQoZmluaXNoZWRXb3JrKSB7XG4gIGlmICghc3VwcG9ydHNNdXRhdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJlY3Vyc2l2ZWx5IGluc2VydCBhbGwgaG9zdCBub2RlcyBpbnRvIHRoZSBwYXJlbnQuXG4gIHZhciBwYXJlbnRGaWJlciA9IGdldEhvc3RQYXJlbnRGaWJlcihmaW5pc2hlZFdvcmspO1xuXG4gIC8vIE5vdGU6IHRoZXNlIHR3byB2YXJpYWJsZXMgKm11c3QqIGFsd2F5cyBiZSB1cGRhdGVkIHRvZ2V0aGVyLlxuICB2YXIgcGFyZW50ID0gdm9pZCAwO1xuICB2YXIgaXNDb250YWluZXIgPSB2b2lkIDA7XG5cbiAgc3dpdGNoIChwYXJlbnRGaWJlci50YWcpIHtcbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICBwYXJlbnQgPSBwYXJlbnRGaWJlci5zdGF0ZU5vZGU7XG4gICAgICBpc0NvbnRhaW5lciA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgIHBhcmVudCA9IHBhcmVudEZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgaXNDb250YWluZXIgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgcGFyZW50ID0gcGFyZW50RmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICBpc0NvbnRhaW5lciA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaW52YXJpYW50KGZhbHNlLCAnSW52YWxpZCBob3N0IHBhcmVudCBmaWJlci4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgfVxuICBpZiAocGFyZW50RmliZXIuZWZmZWN0VGFnICYgQ29udGVudFJlc2V0KSB7XG4gICAgLy8gUmVzZXQgdGhlIHRleHQgY29udGVudCBvZiB0aGUgcGFyZW50IGJlZm9yZSBkb2luZyBhbnkgaW5zZXJ0aW9uc1xuICAgIHJlc2V0VGV4dENvbnRlbnQocGFyZW50KTtcbiAgICAvLyBDbGVhciBDb250ZW50UmVzZXQgZnJvbSB0aGUgZWZmZWN0IHRhZ1xuICAgIHBhcmVudEZpYmVyLmVmZmVjdFRhZyAmPSB+Q29udGVudFJlc2V0O1xuICB9XG5cbiAgdmFyIGJlZm9yZSA9IGdldEhvc3RTaWJsaW5nKGZpbmlzaGVkV29yayk7XG4gIC8vIFdlIG9ubHkgaGF2ZSB0aGUgdG9wIEZpYmVyIHRoYXQgd2FzIGluc2VydGVkIGJ1dCB3ZSBuZWVkIHJlY3Vyc2UgZG93biBpdHNcbiAgLy8gY2hpbGRyZW4gdG8gZmluZCBhbGwgdGhlIHRlcm1pbmFsIG5vZGVzLlxuICB2YXIgbm9kZSA9IGZpbmlzaGVkV29yaztcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgbm9kZS50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICBpZiAoYmVmb3JlKSB7XG4gICAgICAgIGlmIChpc0NvbnRhaW5lcikge1xuICAgICAgICAgIGluc2VydEluQ29udGFpbmVyQmVmb3JlKHBhcmVudCwgbm9kZS5zdGF0ZU5vZGUsIGJlZm9yZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5zZXJ0QmVmb3JlKHBhcmVudCwgbm9kZS5zdGF0ZU5vZGUsIGJlZm9yZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc0NvbnRhaW5lcikge1xuICAgICAgICAgIGFwcGVuZENoaWxkVG9Db250YWluZXIocGFyZW50LCBub2RlLnN0YXRlTm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXBwZW5kQ2hpbGQocGFyZW50LCBub2RlLnN0YXRlTm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vZGUudGFnID09PSBIb3N0UG9ydGFsKSB7XG4gICAgICAvLyBJZiB0aGUgaW5zZXJ0aW9uIGl0c2VsZiBpcyBhIHBvcnRhbCwgdGhlbiB3ZSBkb24ndCB3YW50IHRvIHRyYXZlcnNlXG4gICAgICAvLyBkb3duIGl0cyBjaGlsZHJlbi4gSW5zdGVhZCwgd2UnbGwgZ2V0IGluc2VydGlvbnMgZnJvbSBlYWNoIGNoaWxkIGluXG4gICAgICAvLyB0aGUgcG9ydGFsIGRpcmVjdGx5LlxuICAgIH0gZWxzZSBpZiAobm9kZS5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgbm9kZS5jaGlsZC5yZXR1cm4gPSBub2RlO1xuICAgICAgbm9kZSA9IG5vZGUuY2hpbGQ7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG5vZGUgPT09IGZpbmlzaGVkV29yaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3aGlsZSAobm9kZS5zaWJsaW5nID09PSBudWxsKSB7XG4gICAgICBpZiAobm9kZS5yZXR1cm4gPT09IG51bGwgfHwgbm9kZS5yZXR1cm4gPT09IGZpbmlzaGVkV29yaykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfVxuICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVubW91bnRIb3N0Q29tcG9uZW50cyhjdXJyZW50JCQxKSB7XG4gIC8vIFdlIG9ubHkgaGF2ZSB0aGUgdG9wIEZpYmVyIHRoYXQgd2FzIGRlbGV0ZWQgYnV0IHdlIG5lZWQgcmVjdXJzZSBkb3duIGl0c1xuICB2YXIgbm9kZSA9IGN1cnJlbnQkJDE7XG5cbiAgLy8gRWFjaCBpdGVyYXRpb24sIGN1cnJlbnRQYXJlbnQgaXMgcG9wdWxhdGVkIHdpdGggbm9kZSdzIGhvc3QgcGFyZW50IGlmIG5vdFxuICAvLyBjdXJyZW50UGFyZW50SXNWYWxpZC5cbiAgdmFyIGN1cnJlbnRQYXJlbnRJc1ZhbGlkID0gZmFsc2U7XG5cbiAgLy8gTm90ZTogdGhlc2UgdHdvIHZhcmlhYmxlcyAqbXVzdCogYWx3YXlzIGJlIHVwZGF0ZWQgdG9nZXRoZXIuXG4gIHZhciBjdXJyZW50UGFyZW50ID0gdm9pZCAwO1xuICB2YXIgY3VycmVudFBhcmVudElzQ29udGFpbmVyID0gdm9pZCAwO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKCFjdXJyZW50UGFyZW50SXNWYWxpZCkge1xuICAgICAgdmFyIHBhcmVudCA9IG5vZGUucmV0dXJuO1xuICAgICAgZmluZFBhcmVudDogd2hpbGUgKHRydWUpIHtcbiAgICAgICAgIShwYXJlbnQgIT09IG51bGwpID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgdG8gZmluZCBhIGhvc3QgcGFyZW50LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICAgICAgICBzd2l0Y2ggKHBhcmVudC50YWcpIHtcbiAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgICBjdXJyZW50UGFyZW50ID0gcGFyZW50LnN0YXRlTm9kZTtcbiAgICAgICAgICAgIGN1cnJlbnRQYXJlbnRJc0NvbnRhaW5lciA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWsgZmluZFBhcmVudDtcbiAgICAgICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICAgICAgY3VycmVudFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICAgIGN1cnJlbnRQYXJlbnRJc0NvbnRhaW5lciA9IHRydWU7XG4gICAgICAgICAgICBicmVhayBmaW5kUGFyZW50O1xuICAgICAgICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgICAgICAgIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICBjdXJyZW50UGFyZW50SXNDb250YWluZXIgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWsgZmluZFBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICAgICAgfVxuICAgICAgY3VycmVudFBhcmVudElzVmFsaWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChub2RlLnRhZyA9PT0gSG9zdENvbXBvbmVudCB8fCBub2RlLnRhZyA9PT0gSG9zdFRleHQpIHtcbiAgICAgIGNvbW1pdE5lc3RlZFVubW91bnRzKG5vZGUpO1xuICAgICAgLy8gQWZ0ZXIgYWxsIHRoZSBjaGlsZHJlbiBoYXZlIHVubW91bnRlZCwgaXQgaXMgbm93IHNhZmUgdG8gcmVtb3ZlIHRoZVxuICAgICAgLy8gbm9kZSBmcm9tIHRoZSB0cmVlLlxuICAgICAgaWYgKGN1cnJlbnRQYXJlbnRJc0NvbnRhaW5lcikge1xuICAgICAgICByZW1vdmVDaGlsZEZyb21Db250YWluZXIoY3VycmVudFBhcmVudCwgbm9kZS5zdGF0ZU5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVtb3ZlQ2hpbGQoY3VycmVudFBhcmVudCwgbm9kZS5zdGF0ZU5vZGUpO1xuICAgICAgfVxuICAgICAgLy8gRG9uJ3QgdmlzaXQgY2hpbGRyZW4gYmVjYXVzZSB3ZSBhbHJlYWR5IHZpc2l0ZWQgdGhlbS5cbiAgICB9IGVsc2UgaWYgKG5vZGUudGFnID09PSBIb3N0UG9ydGFsKSB7XG4gICAgICAvLyBXaGVuIHdlIGdvIGludG8gYSBwb3J0YWwsIGl0IGJlY29tZXMgdGhlIHBhcmVudCB0byByZW1vdmUgZnJvbS5cbiAgICAgIC8vIFdlIHdpbGwgcmVhc3NpZ24gaXQgYmFjayB3aGVuIHdlIHBvcCB0aGUgcG9ydGFsIG9uIHRoZSB3YXkgdXAuXG4gICAgICBjdXJyZW50UGFyZW50ID0gbm9kZS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgIGN1cnJlbnRQYXJlbnRJc0NvbnRhaW5lciA9IHRydWU7XG4gICAgICAvLyBWaXNpdCBjaGlsZHJlbiBiZWNhdXNlIHBvcnRhbHMgbWlnaHQgY29udGFpbiBob3N0IGNvbXBvbmVudHMuXG4gICAgICBpZiAobm9kZS5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29tbWl0VW5tb3VudChub2RlKTtcbiAgICAgIC8vIFZpc2l0IGNoaWxkcmVuIGJlY2F1c2Ugd2UgbWF5IGZpbmQgbW9yZSBob3N0IGNvbXBvbmVudHMgYmVsb3cuXG4gICAgICBpZiAobm9kZS5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUgPT09IGN1cnJlbnQkJDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2hpbGUgKG5vZGUuc2libGluZyA9PT0gbnVsbCkge1xuICAgICAgaWYgKG5vZGUucmV0dXJuID09PSBudWxsIHx8IG5vZGUucmV0dXJuID09PSBjdXJyZW50JCQxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICAgIGlmIChub2RlLnRhZyA9PT0gSG9zdFBvcnRhbCkge1xuICAgICAgICAvLyBXaGVuIHdlIGdvIG91dCBvZiB0aGUgcG9ydGFsLCB3ZSBuZWVkIHRvIHJlc3RvcmUgdGhlIHBhcmVudC5cbiAgICAgICAgLy8gU2luY2Ugd2UgZG9uJ3Qga2VlcCBhIHN0YWNrIG9mIHRoZW0sIHdlIHdpbGwgc2VhcmNoIGZvciBpdC5cbiAgICAgICAgY3VycmVudFBhcmVudElzVmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0RGVsZXRpb24oY3VycmVudCQkMSkge1xuICBpZiAoc3VwcG9ydHNNdXRhdGlvbikge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGRlbGV0ZSBhbGwgaG9zdCBub2RlcyBmcm9tIHRoZSBwYXJlbnQuXG4gICAgLy8gRGV0YWNoIHJlZnMgYW5kIGNhbGwgY29tcG9uZW50V2lsbFVubW91bnQoKSBvbiB0aGUgd2hvbGUgc3VidHJlZS5cbiAgICB1bm1vdW50SG9zdENvbXBvbmVudHMoY3VycmVudCQkMSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gRGV0YWNoIHJlZnMgYW5kIGNhbGwgY29tcG9uZW50V2lsbFVubW91bnQoKSBvbiB0aGUgd2hvbGUgc3VidHJlZS5cbiAgICBjb21taXROZXN0ZWRVbm1vdW50cyhjdXJyZW50JCQxKTtcbiAgfVxuICBkZXRhY2hGaWJlcihjdXJyZW50JCQxKTtcbn1cblxuZnVuY3Rpb24gY29tbWl0V29yayhjdXJyZW50JCQxLCBmaW5pc2hlZFdvcmspIHtcbiAgaWYgKCFzdXBwb3J0c011dGF0aW9uKSB7XG4gICAgY29tbWl0Q29udGFpbmVyKGZpbmlzaGVkV29yayk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgaWYgKGluc3RhbmNlICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBDb21taXQgdGhlIHdvcmsgcHJlcGFyZWQgZWFybGllci5cbiAgICAgICAgICB2YXIgbmV3UHJvcHMgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAvLyBGb3IgaHlkcmF0aW9uIHdlIHJldXNlIHRoZSB1cGRhdGUgcGF0aCBidXQgd2UgdHJlYXQgdGhlIG9sZFByb3BzXG4gICAgICAgICAgLy8gYXMgdGhlIG5ld1Byb3BzLiBUaGUgdXBkYXRlUGF5bG9hZCB3aWxsIGNvbnRhaW4gdGhlIHJlYWwgY2hhbmdlIGluXG4gICAgICAgICAgLy8gdGhpcyBjYXNlLlxuICAgICAgICAgIHZhciBvbGRQcm9wcyA9IGN1cnJlbnQkJDEgIT09IG51bGwgPyBjdXJyZW50JCQxLm1lbW9pemVkUHJvcHMgOiBuZXdQcm9wcztcbiAgICAgICAgICB2YXIgdHlwZSA9IGZpbmlzaGVkV29yay50eXBlO1xuICAgICAgICAgIC8vIFRPRE86IFR5cGUgdGhlIHVwZGF0ZVF1ZXVlIHRvIGJlIHNwZWNpZmljIHRvIGhvc3QgY29tcG9uZW50cy5cbiAgICAgICAgICB2YXIgdXBkYXRlUGF5bG9hZCA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZTtcbiAgICAgICAgICBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUgPSBudWxsO1xuICAgICAgICAgIGlmICh1cGRhdGVQYXlsb2FkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb21taXRVcGRhdGUoaW5zdGFuY2UsIHVwZGF0ZVBheWxvYWQsIHR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcywgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgICB7XG4gICAgICAgICEoZmluaXNoZWRXb3JrLnN0YXRlTm9kZSAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdUaGlzIHNob3VsZCBoYXZlIGEgdGV4dCBub2RlIGluaXRpYWxpemVkLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICAgICAgICB2YXIgdGV4dEluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgdmFyIG5ld1RleHQgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgLy8gRm9yIGh5ZHJhdGlvbiB3ZSByZXVzZSB0aGUgdXBkYXRlIHBhdGggYnV0IHdlIHRyZWF0IHRoZSBvbGRQcm9wc1xuICAgICAgICAvLyBhcyB0aGUgbmV3UHJvcHMuIFRoZSB1cGRhdGVQYXlsb2FkIHdpbGwgY29udGFpbiB0aGUgcmVhbCBjaGFuZ2UgaW5cbiAgICAgICAgLy8gdGhpcyBjYXNlLlxuICAgICAgICB2YXIgb2xkVGV4dCA9IGN1cnJlbnQkJDEgIT09IG51bGwgPyBjdXJyZW50JCQxLm1lbW9pemVkUHJvcHMgOiBuZXdUZXh0O1xuICAgICAgICBjb21taXRUZXh0VXBkYXRlKHRleHRJbnN0YW5jZSwgb2xkVGV4dCwgbmV3VGV4dCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RSb290OlxuICAgICAge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgY2FzZSBQcm9maWxlcjpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGNhc2UgU3VzcGVuc2VDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICBjYXNlIEluY29tcGxldGVDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICB7XG4gICAgICAgIGludmFyaWFudChmYWxzZSwgJ1RoaXMgdW5pdCBvZiB3b3JrIHRhZyBzaG91bGQgbm90IGhhdmUgc2lkZS1lZmZlY3RzLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdFJlc2V0VGV4dENvbnRlbnQoY3VycmVudCQkMSkge1xuICBpZiAoIXN1cHBvcnRzTXV0YXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcmVzZXRUZXh0Q29udGVudChjdXJyZW50JCQxLnN0YXRlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShmaWJlciwgZXJyb3JJbmZvLCBleHBpcmF0aW9uVGltZSkge1xuICB2YXIgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGV4cGlyYXRpb25UaW1lKTtcbiAgLy8gVW5tb3VudCB0aGUgcm9vdCBieSByZW5kZXJpbmcgbnVsbC5cbiAgdXBkYXRlLnRhZyA9IENhcHR1cmVVcGRhdGU7XG4gIC8vIENhdXRpb246IFJlYWN0IERldlRvb2xzIGN1cnJlbnRseSBkZXBlbmRzIG9uIHRoaXMgcHJvcGVydHlcbiAgLy8gYmVpbmcgY2FsbGVkIFwiZWxlbWVudFwiLlxuICB1cGRhdGUucGF5bG9hZCA9IHsgZWxlbWVudDogbnVsbCB9O1xuICB2YXIgZXJyb3IgPSBlcnJvckluZm8udmFsdWU7XG4gIHVwZGF0ZS5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICBvblVuY2F1Z2h0RXJyb3IoZXJyb3IpO1xuICAgIGxvZ0Vycm9yKGZpYmVyLCBlcnJvckluZm8pO1xuICB9O1xuICByZXR1cm4gdXBkYXRlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDbGFzc0Vycm9yVXBkYXRlKGZpYmVyLCBlcnJvckluZm8sIGV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciB1cGRhdGUgPSBjcmVhdGVVcGRhdGUoZXhwaXJhdGlvblRpbWUpO1xuICB1cGRhdGUudGFnID0gQ2FwdHVyZVVwZGF0ZTtcbiAgdmFyIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvciA9IGZpYmVyLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO1xuICBpZiAodHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBlcnJvciA9IGVycm9ySW5mby52YWx1ZTtcbiAgICB1cGRhdGUucGF5bG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaW5zdCA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgaWYgKGluc3QgIT09IG51bGwgJiYgdHlwZW9mIGluc3QuY29tcG9uZW50RGlkQ2F0Y2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICB1cGRhdGUuY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgIGlmICh0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIFRvIHByZXNlcnZlIHRoZSBwcmVleGlzdGluZyByZXRyeSBiZWhhdmlvciBvZiBlcnJvciBib3VuZGFyaWVzLFxuICAgICAgICAvLyB3ZSBrZWVwIHRyYWNrIG9mIHdoaWNoIG9uZXMgYWxyZWFkeSBmYWlsZWQgZHVyaW5nIHRoaXMgYmF0Y2guXG4gICAgICAgIC8vIFRoaXMgZ2V0cyByZXNldCBiZWZvcmUgd2UgeWllbGQgYmFjayB0byB0aGUgYnJvd3Nlci5cbiAgICAgICAgLy8gVE9ETzogV2FybiBpbiBzdHJpY3QgbW9kZSBpZiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgaXNcbiAgICAgICAgLy8gbm90IGRlZmluZWQuXG4gICAgICAgIG1hcmtMZWdhY3lFcnJvckJvdW5kYXJ5QXNGYWlsZWQodGhpcyk7XG4gICAgICB9XG4gICAgICB2YXIgZXJyb3IgPSBlcnJvckluZm8udmFsdWU7XG4gICAgICB2YXIgc3RhY2sgPSBlcnJvckluZm8uc3RhY2s7XG4gICAgICBsb2dFcnJvcihmaWJlciwgZXJyb3JJbmZvKTtcbiAgICAgIHRoaXMuY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIHtcbiAgICAgICAgY29tcG9uZW50U3RhY2s6IHN0YWNrICE9PSBudWxsID8gc3RhY2sgOiAnJ1xuICAgICAgfSk7XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgLy8gSWYgY29tcG9uZW50RGlkQ2F0Y2ggaXMgdGhlIG9ubHkgZXJyb3IgYm91bmRhcnkgbWV0aG9kIGRlZmluZWQsXG4gICAgICAgICAgLy8gdGhlbiBpdCBuZWVkcyB0byBjYWxsIHNldFN0YXRlIHRvIHJlY292ZXIgZnJvbSBlcnJvcnMuXG4gICAgICAgICAgLy8gSWYgbm8gc3RhdGUgdXBkYXRlIGlzIHNjaGVkdWxlZCB0aGVuIHRoZSBib3VuZGFyeSB3aWxsIHN3YWxsb3cgdGhlIGVycm9yLlxuICAgICAgICAgICEoZmliZXIuZXhwaXJhdGlvblRpbWUgPT09IFN5bmMpID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXM6IEVycm9yIGJvdW5kYXJpZXMgc2hvdWxkIGltcGxlbWVudCBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoKS4gJyArICdJbiB0aGF0IG1ldGhvZCwgcmV0dXJuIGEgc3RhdGUgdXBkYXRlIHRvIGRpc3BsYXkgYW4gZXJyb3IgbWVzc2FnZSBvciBmYWxsYmFjayBVSS4nLCBnZXRDb21wb25lbnROYW1lKGZpYmVyLnR5cGUpIHx8ICdVbmtub3duJykgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiB1cGRhdGU7XG59XG5cbmZ1bmN0aW9uIHRocm93RXhjZXB0aW9uKHJvb3QsIHJldHVybkZpYmVyLCBzb3VyY2VGaWJlciwgdmFsdWUsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gIC8vIFRoZSBzb3VyY2UgZmliZXIgZGlkIG5vdCBjb21wbGV0ZS5cbiAgc291cmNlRmliZXIuZWZmZWN0VGFnIHw9IEluY29tcGxldGU7XG4gIC8vIEl0cyBlZmZlY3QgbGlzdCBpcyBubyBsb25nZXIgdmFsaWQuXG4gIHNvdXJjZUZpYmVyLmZpcnN0RWZmZWN0ID0gc291cmNlRmliZXIubGFzdEVmZmVjdCA9IG51bGw7XG5cbiAgaWYgKHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBUaGlzIGlzIGEgdGhlbmFibGUuXG4gICAgdmFyIHRoZW5hYmxlID0gdmFsdWU7XG5cbiAgICAvLyBGaW5kIHRoZSBlYXJsaWVzdCB0aW1lb3V0IHRocmVzaG9sZCBvZiBhbGwgdGhlIHBsYWNlaG9sZGVycyBpbiB0aGVcbiAgICAvLyBhbmNlc3RvciBwYXRoLiBXZSBjb3VsZCBhdm9pZCB0aGlzIHRyYXZlcnNhbCBieSBzdG9yaW5nIHRoZSB0aHJlc2hvbGRzIG9uXG4gICAgLy8gdGhlIHN0YWNrLCBidXQgd2UgY2hvb3NlIG5vdCB0byBiZWNhdXNlIHdlIG9ubHkgaGl0IHRoaXMgcGF0aCBpZiB3ZSdyZVxuICAgIC8vIElPLWJvdW5kIChpLmUuIGlmIHNvbWV0aGluZyBzdXNwZW5kcykuIFdoZXJlYXMgdGhlIHN0YWNrIGlzIHVzZWQgZXZlbiBpblxuICAgIC8vIHRoZSBub24tSU8tIGJvdW5kIGNhc2UuXG4gICAgdmFyIF93b3JrSW5Qcm9ncmVzcyA9IHJldHVybkZpYmVyO1xuICAgIHZhciBlYXJsaWVzdFRpbWVvdXRNcyA9IC0xO1xuICAgIHZhciBzdGFydFRpbWVNcyA9IC0xO1xuICAgIGRvIHtcbiAgICAgIGlmIChfd29ya0luUHJvZ3Jlc3MudGFnID09PSBTdXNwZW5zZUNvbXBvbmVudCkge1xuICAgICAgICB2YXIgY3VycmVudCA9IF93b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGU7XG4gICAgICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICBpZiAoY3VycmVudFN0YXRlICE9PSBudWxsICYmIGN1cnJlbnRTdGF0ZS5kaWRUaW1lb3V0KSB7XG4gICAgICAgICAgICAvLyBSZWFjaGVkIGEgYm91bmRhcnkgdGhhdCBhbHJlYWR5IHRpbWVkIG91dC4gRG8gbm90IHNlYXJjaFxuICAgICAgICAgICAgLy8gYW55IGZ1cnRoZXIuXG4gICAgICAgICAgICB2YXIgdGltZWRPdXRBdCA9IGN1cnJlbnRTdGF0ZS50aW1lZE91dEF0O1xuICAgICAgICAgICAgc3RhcnRUaW1lTXMgPSBleHBpcmF0aW9uVGltZVRvTXModGltZWRPdXRBdCk7XG4gICAgICAgICAgICAvLyBEbyBub3Qgc2VhcmNoIGFueSBmdXJ0aGVyLlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB0aW1lb3V0UHJvcE1zID0gX3dvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5tYXhEdXJhdGlvbjtcbiAgICAgICAgaWYgKHR5cGVvZiB0aW1lb3V0UHJvcE1zID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGlmICh0aW1lb3V0UHJvcE1zIDw9IDApIHtcbiAgICAgICAgICAgIGVhcmxpZXN0VGltZW91dE1zID0gMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGVhcmxpZXN0VGltZW91dE1zID09PSAtMSB8fCB0aW1lb3V0UHJvcE1zIDwgZWFybGllc3RUaW1lb3V0TXMpIHtcbiAgICAgICAgICAgIGVhcmxpZXN0VGltZW91dE1zID0gdGltZW91dFByb3BNcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF93b3JrSW5Qcm9ncmVzcyA9IF93b3JrSW5Qcm9ncmVzcy5yZXR1cm47XG4gICAgfSB3aGlsZSAoX3dvcmtJblByb2dyZXNzICE9PSBudWxsKTtcblxuICAgIC8vIFNjaGVkdWxlIHRoZSBuZWFyZXN0IFN1c3BlbnNlIHRvIHJlLXJlbmRlciB0aGUgdGltZWQgb3V0IHZpZXcuXG4gICAgX3dvcmtJblByb2dyZXNzID0gcmV0dXJuRmliZXI7XG4gICAgZG8ge1xuICAgICAgaWYgKF93b3JrSW5Qcm9ncmVzcy50YWcgPT09IFN1c3BlbnNlQ29tcG9uZW50ICYmIHNob3VsZENhcHR1cmVTdXNwZW5zZShfd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlLCBfd29ya0luUHJvZ3Jlc3MpKSB7XG4gICAgICAgIC8vIEZvdW5kIHRoZSBuZWFyZXN0IGJvdW5kYXJ5LlxuXG4gICAgICAgIC8vIElmIHRoZSBib3VuZGFyeSBpcyBub3QgaW4gY29uY3VycmVudCBtb2RlLCB3ZSBzaG91bGQgbm90IHN1c3BlbmQsIGFuZFxuICAgICAgICAvLyBsaWtld2lzZSwgd2hlbiB0aGUgcHJvbWlzZSByZXNvbHZlcywgd2Ugc2hvdWxkIHBpbmcgc3luY2hyb25vdXNseS5cbiAgICAgICAgdmFyIHBpbmdUaW1lID0gKF93b3JrSW5Qcm9ncmVzcy5tb2RlICYgQ29uY3VycmVudE1vZGUpID09PSBOb0VmZmVjdCA/IFN5bmMgOiByZW5kZXJFeHBpcmF0aW9uVGltZTtcblxuICAgICAgICAvLyBBdHRhY2ggYSBsaXN0ZW5lciB0byB0aGUgcHJvbWlzZSB0byBcInBpbmdcIiB0aGUgcm9vdCBhbmQgcmV0cnkuXG4gICAgICAgIHZhciBvblJlc29sdmVPclJlamVjdCA9IHJldHJ5U3VzcGVuZGVkUm9vdC5iaW5kKG51bGwsIHJvb3QsIF93b3JrSW5Qcm9ncmVzcywgc291cmNlRmliZXIsIHBpbmdUaW1lKTtcbiAgICAgICAgaWYgKGVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICAgICAgICBvblJlc29sdmVPclJlamVjdCA9IHRyYWNpbmcudW5zdGFibGVfd3JhcChvblJlc29sdmVPclJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhlbmFibGUudGhlbihvblJlc29sdmVPclJlamVjdCwgb25SZXNvbHZlT3JSZWplY3QpO1xuXG4gICAgICAgIC8vIElmIHRoZSBib3VuZGFyeSBpcyBvdXRzaWRlIG9mIGNvbmN1cnJlbnQgbW9kZSwgd2Ugc2hvdWxkICpub3QqXG4gICAgICAgIC8vIHN1c3BlbmQgdGhlIGNvbW1pdC4gUHJldGVuZCBhcyBpZiB0aGUgc3VzcGVuZGVkIGNvbXBvbmVudCByZW5kZXJlZFxuICAgICAgICAvLyBudWxsIGFuZCBrZWVwIHJlbmRlcmluZy4gSW4gdGhlIGNvbW1pdCBwaGFzZSwgd2UnbGwgc2NoZWR1bGUgYVxuICAgICAgICAvLyBzdWJzZXF1ZW50IHN5bmNocm9ub3VzIHVwZGF0ZSB0byByZS1yZW5kZXIgdGhlIFN1c3BlbnNlLlxuICAgICAgICAvL1xuICAgICAgICAvLyBOb3RlOiBJdCBkb2Vzbid0IG1hdHRlciB3aGV0aGVyIHRoZSBjb21wb25lbnQgdGhhdCBzdXNwZW5kZWQgd2FzXG4gICAgICAgIC8vIGluc2lkZSBhIGNvbmN1cnJlbnQgbW9kZSB0cmVlLiBJZiB0aGUgU3VzcGVuc2UgaXMgb3V0c2lkZSBvZiBpdCwgd2VcbiAgICAgICAgLy8gc2hvdWxkICpub3QqIHN1c3BlbmQgdGhlIGNvbW1pdC5cbiAgICAgICAgaWYgKChfd29ya0luUHJvZ3Jlc3MubW9kZSAmIENvbmN1cnJlbnRNb2RlKSA9PT0gTm9FZmZlY3QpIHtcbiAgICAgICAgICBfd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IENhbGxiYWNrO1xuXG4gICAgICAgICAgLy8gVW5tb3VudCB0aGUgc291cmNlIGZpYmVyJ3MgY2hpbGRyZW5cbiAgICAgICAgICB2YXIgbmV4dENoaWxkcmVuID0gbnVsbDtcbiAgICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihzb3VyY2VGaWJlci5hbHRlcm5hdGUsIHNvdXJjZUZpYmVyLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICBzb3VyY2VGaWJlci5lZmZlY3RUYWcgJj0gfkluY29tcGxldGU7XG5cbiAgICAgICAgICBpZiAoc291cmNlRmliZXIudGFnID09PSBDbGFzc0NvbXBvbmVudCkge1xuICAgICAgICAgICAgLy8gV2UncmUgZ29pbmcgdG8gY29tbWl0IHRoaXMgZmliZXIgZXZlbiB0aG91Z2ggaXQgZGlkbid0IGNvbXBsZXRlLlxuICAgICAgICAgICAgLy8gQnV0IHdlIHNob3VsZG4ndCBjYWxsIGFueSBsaWZlY3ljbGUgbWV0aG9kcyBvciBjYWxsYmFja3MuIFJlbW92ZVxuICAgICAgICAgICAgLy8gYWxsIGxpZmVjeWNsZSBlZmZlY3QgdGFncy5cbiAgICAgICAgICAgIHNvdXJjZUZpYmVyLmVmZmVjdFRhZyAmPSB+TGlmZWN5Y2xlRWZmZWN0TWFzaztcbiAgICAgICAgICAgIHZhciBfY3VycmVudCA9IHNvdXJjZUZpYmVyLmFsdGVybmF0ZTtcbiAgICAgICAgICAgIGlmIChfY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbmV3IG1vdW50LiBDaGFuZ2UgdGhlIHRhZyBzbyBpdCdzIG5vdCBtaXN0YWtlbiBmb3IgYVxuICAgICAgICAgICAgICAvLyBjb21wbGV0ZWQgY29tcG9uZW50LiBGb3IgZXhhbXBsZSwgd2Ugc2hvdWxkIG5vdCBjYWxsXG4gICAgICAgICAgICAgIC8vIGNvbXBvbmVudFdpbGxVbm1vdW50IGlmIGl0IGlzIGRlbGV0ZWQuXG4gICAgICAgICAgICAgIHNvdXJjZUZpYmVyLnRhZyA9IEluY29tcGxldGVDbGFzc0NvbXBvbmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBFeGl0IHdpdGhvdXQgc3VzcGVuZGluZy5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb25maXJtZWQgdGhhdCB0aGUgYm91bmRhcnkgaXMgaW4gYSBjb25jdXJyZW50IG1vZGUgdHJlZS4gQ29udGludWVcbiAgICAgICAgLy8gd2l0aCB0aGUgbm9ybWFsIHN1c3BlbmQgcGF0aC5cblxuICAgICAgICB2YXIgYWJzb2x1dGVUaW1lb3V0TXMgPSB2b2lkIDA7XG4gICAgICAgIGlmIChlYXJsaWVzdFRpbWVvdXRNcyA9PT0gLTEpIHtcbiAgICAgICAgICAvLyBJZiBubyBleHBsaWNpdCB0aHJlc2hvbGQgaXMgZ2l2ZW4sIGRlZmF1bHQgdG8gYW4gYWJpdHJhcmlseSBsYXJnZVxuICAgICAgICAgIC8vIHZhbHVlLiBUaGUgYWN0dWFsIHNpemUgZG9lc24ndCBtYXR0ZXIgYmVjYXVzZSB0aGUgdGhyZXNob2xkIGZvciB0aGVcbiAgICAgICAgICAvLyB3aG9sZSB0cmVlIHdpbGwgYmUgY2xhbXBlZCB0byB0aGUgZXhwaXJhdGlvbiB0aW1lLlxuICAgICAgICAgIGFic29sdXRlVGltZW91dE1zID0gbWF4U2lnbmVkMzFCaXRJbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHN0YXJ0VGltZU1zID09PSAtMSkge1xuICAgICAgICAgICAgLy8gVGhpcyBzdXNwZW5kIGhhcHBlbmVkIG91dHNpZGUgb2YgYW55IGFscmVhZHkgdGltZWQtb3V0XG4gICAgICAgICAgICAvLyBwbGFjZWhvbGRlcnMuIFdlIGRvbid0IGtub3cgZXhhY3RseSB3aGVuIHRoZSB1cGRhdGUgd2FzXG4gICAgICAgICAgICAvLyBzY2hlZHVsZWQsIGJ1dCB3ZSBjYW4gaW5mZXIgYW4gYXBwcm94aW1hdGUgc3RhcnQgdGltZSBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gZXhwaXJhdGlvbiB0aW1lLiBGaXJzdCwgZmluZCB0aGUgZWFybGllc3QgdW5jb21taXR0ZWQgZXhwaXJhdGlvblxuICAgICAgICAgICAgLy8gdGltZSBpbiB0aGUgdHJlZSwgaW5jbHVkaW5nIHdvcmsgdGhhdCBpcyBzdXNwZW5kZWQuIFRoZW4gc3VidHJhY3RcbiAgICAgICAgICAgIC8vIHRoZSBvZmZzZXQgdXNlZCB0byBjb21wdXRlIGFuIGFzeW5jIHVwZGF0ZSdzIGV4cGlyYXRpb24gdGltZS5cbiAgICAgICAgICAgIC8vIFRoaXMgd2lsbCBjYXVzZSBoaWdoIHByaW9yaXR5IChpbnRlcmFjdGl2ZSkgd29yayB0byBleHBpcmVcbiAgICAgICAgICAgIC8vIGVhcmxpZXIgdGhhbiBuZWNlc3NhcnksIGJ1dCB3ZSBjYW4gYWNjb3VudCBmb3IgdGhpcyBieSBhZGp1c3RpbmdcbiAgICAgICAgICAgIC8vIGZvciB0aGUgSnVzdCBOb3RpY2VhYmxlIERpZmZlcmVuY2UuXG4gICAgICAgICAgICB2YXIgZWFybGllc3RFeHBpcmF0aW9uVGltZSA9IGZpbmRFYXJsaWVzdE91dHN0YW5kaW5nUHJpb3JpdHlMZXZlbChyb290LCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgICB2YXIgZWFybGllc3RFeHBpcmF0aW9uVGltZU1zID0gZXhwaXJhdGlvblRpbWVUb01zKGVhcmxpZXN0RXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgICAgc3RhcnRUaW1lTXMgPSBlYXJsaWVzdEV4cGlyYXRpb25UaW1lTXMgLSBMT1dfUFJJT1JJVFlfRVhQSVJBVElPTjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWJzb2x1dGVUaW1lb3V0TXMgPSBzdGFydFRpbWVNcyArIGVhcmxpZXN0VGltZW91dE1zO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTWFyayB0aGUgZWFybGllc3QgdGltZW91dCBpbiB0aGUgc3VzcGVuZGVkIGZpYmVyJ3MgYW5jZXN0b3IgcGF0aC5cbiAgICAgICAgLy8gQWZ0ZXIgY29tcGxldGluZyB0aGUgcm9vdCwgd2UnbGwgdGFrZSB0aGUgbGFyZ2VzdCBvZiBhbGwgdGhlXG4gICAgICAgIC8vIHN1c3BlbmRlZCBmaWJlcidzIHRpbWVvdXRzIGFuZCB1c2UgaXQgdG8gY29tcHV0ZSBhIHRpbWVvdXQgZm9yIHRoZVxuICAgICAgICAvLyB3aG9sZSB0cmVlLlxuICAgICAgICByZW5kZXJEaWRTdXNwZW5kKHJvb3QsIGFic29sdXRlVGltZW91dE1zLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG5cbiAgICAgICAgX3dvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBTaG91bGRDYXB0dXJlO1xuICAgICAgICBfd29ya0luUHJvZ3Jlc3MuZXhwaXJhdGlvblRpbWUgPSByZW5kZXJFeHBpcmF0aW9uVGltZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gVGhpcyBib3VuZGFyeSBhbHJlYWR5IGNhcHR1cmVkIGR1cmluZyB0aGlzIHJlbmRlci4gQ29udGludWUgdG8gdGhlIG5leHRcbiAgICAgIC8vIGJvdW5kYXJ5LlxuICAgICAgX3dvcmtJblByb2dyZXNzID0gX3dvcmtJblByb2dyZXNzLnJldHVybjtcbiAgICB9IHdoaWxlIChfd29ya0luUHJvZ3Jlc3MgIT09IG51bGwpO1xuICAgIC8vIE5vIGJvdW5kYXJ5IHdhcyBmb3VuZC4gRmFsbHRocm91Z2ggdG8gZXJyb3IgbW9kZS5cbiAgICB2YWx1ZSA9IG5ldyBFcnJvcignQW4gdXBkYXRlIHdhcyBzdXNwZW5kZWQsIGJ1dCBubyBwbGFjZWhvbGRlciBVSSB3YXMgcHJvdmlkZWQuJyk7XG4gIH1cblxuICAvLyBXZSBkaWRuJ3QgZmluZCBhIGJvdW5kYXJ5IHRoYXQgY291bGQgaGFuZGxlIHRoaXMgdHlwZSBvZiBleGNlcHRpb24uIFN0YXJ0XG4gIC8vIG92ZXIgYW5kIHRyYXZlcnNlIHBhcmVudCBwYXRoIGFnYWluLCB0aGlzIHRpbWUgdHJlYXRpbmcgdGhlIGV4Y2VwdGlvblxuICAvLyBhcyBhbiBlcnJvci5cbiAgcmVuZGVyRGlkRXJyb3IoKTtcbiAgdmFsdWUgPSBjcmVhdGVDYXB0dXJlZFZhbHVlKHZhbHVlLCBzb3VyY2VGaWJlcik7XG4gIHZhciB3b3JrSW5Qcm9ncmVzcyA9IHJldHVybkZpYmVyO1xuICBkbyB7XG4gICAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX2Vycm9ySW5mbyA9IHZhbHVlO1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBTaG91bGRDYXB0dXJlO1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID0gcmVuZGVyRXhwaXJhdGlvblRpbWU7XG4gICAgICAgICAgdmFyIHVwZGF0ZSA9IGNyZWF0ZVJvb3RFcnJvclVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgX2Vycm9ySW5mbywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgICAgIGVucXVldWVDYXB0dXJlZFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgdXBkYXRlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgIC8vIENhcHR1cmUgYW5kIHJldHJ5XG4gICAgICAgIHZhciBlcnJvckluZm8gPSB2YWx1ZTtcbiAgICAgICAgdmFyIGN0b3IgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICAgIGlmICgod29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnICYgRGlkQ2FwdHVyZSkgPT09IE5vRWZmZWN0ICYmICh0eXBlb2YgY3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgPT09ICdmdW5jdGlvbicgfHwgaW5zdGFuY2UgIT09IG51bGwgJiYgdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZENhdGNoID09PSAnZnVuY3Rpb24nICYmICFpc0FscmVhZHlGYWlsZWRMZWdhY3lFcnJvckJvdW5kYXJ5KGluc3RhbmNlKSkpIHtcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gU2hvdWxkQ2FwdHVyZTtcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZSA9IHJlbmRlckV4cGlyYXRpb25UaW1lO1xuICAgICAgICAgIC8vIFNjaGVkdWxlIHRoZSBlcnJvciBib3VuZGFyeSB0byByZS1yZW5kZXIgdXNpbmcgdXBkYXRlZCBzdGF0ZVxuICAgICAgICAgIHZhciBfdXBkYXRlID0gY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgZXJyb3JJbmZvLCByZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgZW5xdWV1ZUNhcHR1cmVkVXBkYXRlKHdvcmtJblByb2dyZXNzLCBfdXBkYXRlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5yZXR1cm47XG4gIH0gd2hpbGUgKHdvcmtJblByb2dyZXNzICE9PSBudWxsKTtcbn1cblxuZnVuY3Rpb24gdW53aW5kV29yayh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgQ29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgaWYgKGlzQ29udGV4dFByb3ZpZGVyKENvbXBvbmVudCkpIHtcbiAgICAgICAgICBwb3BDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZWZmZWN0VGFnID0gd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnO1xuICAgICAgICBpZiAoZWZmZWN0VGFnICYgU2hvdWxkQ2FwdHVyZSkge1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyA9IGVmZmVjdFRhZyAmIH5TaG91bGRDYXB0dXJlIHwgRGlkQ2FwdHVyZTtcbiAgICAgICAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgIHtcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHBvcFRvcExldmVsQ29udGV4dE9iamVjdCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHZhciBfZWZmZWN0VGFnID0gd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnO1xuICAgICAgICAhKChfZWZmZWN0VGFnICYgRGlkQ2FwdHVyZSkgPT09IE5vRWZmZWN0KSA/IGludmFyaWFudChmYWxzZSwgJ1RoZSByb290IGZhaWxlZCB0byB1bm1vdW50IGFmdGVyIGFuIGVycm9yLiBUaGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyA9IF9lZmZlY3RUYWcgJiB+U2hvdWxkQ2FwdHVyZSB8IERpZENhcHR1cmU7XG4gICAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgY2FzZSBTdXNwZW5zZUNvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIF9lZmZlY3RUYWcyID0gd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnO1xuICAgICAgICBpZiAoX2VmZmVjdFRhZzIgJiBTaG91bGRDYXB0dXJlKSB7XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnID0gX2VmZmVjdFRhZzIgJiB+U2hvdWxkQ2FwdHVyZSB8IERpZENhcHR1cmU7XG4gICAgICAgICAgLy8gQ2FwdHVyZWQgYSBzdXNwZW5zZSBlZmZlY3QuIFNldCB0aGUgYm91bmRhcnkncyBgYWxyZWFkeUNhcHR1cmVkYFxuICAgICAgICAgIC8vIHN0YXRlIHRvIHRydWUgc28gd2Uga25vdyB0byByZW5kZXIgdGhlIGZhbGxiYWNrLlxuICAgICAgICAgIHZhciBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlO1xuICAgICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSBjdXJyZW50ICE9PSBudWxsID8gY3VycmVudC5tZW1vaXplZFN0YXRlIDogbnVsbDtcbiAgICAgICAgICB2YXIgbmV4dFN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICBpZiAobmV4dFN0YXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBObyBleGlzdGluZyBzdGF0ZS4gQ3JlYXRlIGEgbmV3IG9iamVjdC5cbiAgICAgICAgICAgIG5leHRTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgYWxyZWFkeUNhcHR1cmVkOiB0cnVlLFxuICAgICAgICAgICAgICBkaWRUaW1lb3V0OiBmYWxzZSxcbiAgICAgICAgICAgICAgdGltZWRPdXRBdDogTm9Xb3JrXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFN0YXRlID09PSBuZXh0U3RhdGUpIHtcbiAgICAgICAgICAgIC8vIFRoZXJlIGlzIGFuIGV4aXN0aW5nIHN0YXRlIGJ1dCBpdCdzIHRoZSBzYW1lIGFzIHRoZSBjdXJyZW50IHRyZWUncy5cbiAgICAgICAgICAgIC8vIENsb25lIHRoZSBvYmplY3QuXG4gICAgICAgICAgICBuZXh0U3RhdGUgPSB7XG4gICAgICAgICAgICAgIGFscmVhZHlDYXB0dXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgZGlkVGltZW91dDogbmV4dFN0YXRlLmRpZFRpbWVvdXQsXG4gICAgICAgICAgICAgIHRpbWVkT3V0QXQ6IG5leHRTdGF0ZS50aW1lZE91dEF0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBBbHJlYWR5IGhhdmUgYSBjbG9uZSwgc28gaXQncyBzYWZlIHRvIG11dGF0ZS5cbiAgICAgICAgICAgIG5leHRTdGF0ZS5hbHJlYWR5Q2FwdHVyZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbmV4dFN0YXRlO1xuICAgICAgICAgIC8vIFJlLXJlbmRlciB0aGUgYm91bmRhcnkuXG4gICAgICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgIHBvcEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgICBwb3BQcm92aWRlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW53aW5kSW50ZXJydXB0ZWRXb3JrKGludGVycnVwdGVkV29yaykge1xuICBzd2l0Y2ggKGludGVycnVwdGVkV29yay50YWcpIHtcbiAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSBpbnRlcnJ1cHRlZFdvcmsudHlwZS5jaGlsZENvbnRleHRUeXBlcztcbiAgICAgICAgaWYgKGNoaWxkQ29udGV4dFR5cGVzICE9PSBudWxsICYmIGNoaWxkQ29udGV4dFR5cGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwb3BDb250ZXh0KGludGVycnVwdGVkV29yayk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgIHtcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgICBwb3BUb3BMZXZlbENvbnRleHRPYmplY3QoaW50ZXJydXB0ZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAge1xuICAgICAgICBwb3BIb3N0Q29udGV4dChpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICBwb3BIb3N0Q29udGFpbmVyKGludGVycnVwdGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIENvbnRleHRQcm92aWRlcjpcbiAgICAgIHBvcFByb3ZpZGVyKGludGVycnVwdGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gIH1cbn1cblxudmFyIERpc3BhdGNoZXIgPSB7XG4gIHJlYWRDb250ZXh0OiByZWFkQ29udGV4dFxufTtcblxudmFyIFJlYWN0Q3VycmVudE93bmVyJDIgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdEN1cnJlbnRPd25lcjtcblxuXG52YXIgZGlkV2FybkFib3V0U3RhdGVUcmFuc2l0aW9uID0gdm9pZCAwO1xudmFyIGRpZFdhcm5TZXRTdGF0ZUNoaWxkQ29udGV4dCA9IHZvaWQgMDtcbnZhciB3YXJuQWJvdXRVcGRhdGVPblVubW91bnRlZCA9IHZvaWQgMDtcbnZhciB3YXJuQWJvdXRJbnZhbGlkVXBkYXRlcyA9IHZvaWQgMDtcblxuaWYgKGVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgLy8gUHJvdmlkZSBleHBsaWNpdCBlcnJvciBtZXNzYWdlIHdoZW4gcHJvZHVjdGlvbitwcm9maWxpbmcgYnVuZGxlIG9mIGUuZy4gcmVhY3QtZG9tXG4gIC8vIGlzIHVzZWQgd2l0aCBwcm9kdWN0aW9uIChub24tcHJvZmlsaW5nKSBidW5kbGUgb2Ygc2NoZWR1bGUvdHJhY2luZ1xuICAhKHRyYWNpbmcuX19pbnRlcmFjdGlvbnNSZWYgIT0gbnVsbCAmJiB0cmFjaW5nLl9faW50ZXJhY3Rpb25zUmVmLmN1cnJlbnQgIT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdJdCBpcyBub3Qgc3VwcG9ydGVkIHRvIHJ1biB0aGUgcHJvZmlsaW5nIHZlcnNpb24gb2YgYSByZW5kZXJlciAoZm9yIGV4YW1wbGUsIGByZWFjdC1kb20vcHJvZmlsaW5nYCkgd2l0aG91dCBhbHNvIHJlcGxhY2luZyB0aGUgYHNjaGVkdWxlL3RyYWNpbmdgIG1vZHVsZSB3aXRoIGBzY2hlZHVsZS90cmFjaW5nLXByb2ZpbGluZ2AuIFlvdXIgYnVuZGxlciBtaWdodCBoYXZlIGEgc2V0dGluZyBmb3IgYWxpYXNpbmcgYm90aCBtb2R1bGVzLiBMZWFybiBtb3JlIGF0IGh0dHA6Ly9mYi5tZS9yZWFjdC1wcm9maWxpbmcnKSA6IHZvaWQgMDtcbn1cblxue1xuICBkaWRXYXJuQWJvdXRTdGF0ZVRyYW5zaXRpb24gPSBmYWxzZTtcbiAgZGlkV2FyblNldFN0YXRlQ2hpbGRDb250ZXh0ID0gZmFsc2U7XG4gIHZhciBkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnQgPSB7fTtcblxuICB3YXJuQWJvdXRVcGRhdGVPblVubW91bnRlZCA9IGZ1bmN0aW9uIChmaWJlcikge1xuICAgIC8vIFdlIHNob3cgdGhlIHdob2xlIHN0YWNrIGJ1dCBkZWR1cGUgb24gdGhlIHRvcCBjb21wb25lbnQncyBuYW1lIGJlY2F1c2VcbiAgICAvLyB0aGUgcHJvYmxlbWF0aWMgY29kZSBhbG1vc3QgYWx3YXlzIGxpZXMgaW5zaWRlIHRoYXQgY29tcG9uZW50LlxuICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZShmaWJlci50eXBlKSB8fCAnUmVhY3RDbGFzcyc7XG4gICAgaWYgKGRpZFdhcm5TdGF0ZVVwZGF0ZUZvclVubW91bnRlZENvbXBvbmVudFtjb21wb25lbnROYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsIFwiQ2FuJ3QgY2FsbCBzZXRTdGF0ZSAob3IgZm9yY2VVcGRhdGUpIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuIFRoaXMgXCIgKyAnaXMgYSBuby1vcCwgYnV0IGl0IGluZGljYXRlcyBhIG1lbW9yeSBsZWFrIGluIHlvdXIgYXBwbGljYXRpb24uIFRvICcgKyAnZml4LCBjYW5jZWwgYWxsIHN1YnNjcmlwdGlvbnMgYW5kIGFzeW5jaHJvbm91cyB0YXNrcyBpbiB0aGUgJyArICdjb21wb25lbnRXaWxsVW5tb3VudCBtZXRob2QuJXMnLCBnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2QoZmliZXIpKTtcbiAgICBkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnRbY29tcG9uZW50TmFtZV0gPSB0cnVlO1xuICB9O1xuXG4gIHdhcm5BYm91dEludmFsaWRVcGRhdGVzID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgc3dpdGNoIChwaGFzZSkge1xuICAgICAgY2FzZSAnZ2V0Q2hpbGRDb250ZXh0JzpcbiAgICAgICAgaWYgKGRpZFdhcm5TZXRTdGF0ZUNoaWxkQ29udGV4dCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdzZXRTdGF0ZSguLi4pOiBDYW5ub3QgY2FsbCBzZXRTdGF0ZSgpIGluc2lkZSBnZXRDaGlsZENvbnRleHQoKScpO1xuICAgICAgICBkaWRXYXJuU2V0U3RhdGVDaGlsZENvbnRleHQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlbmRlcic6XG4gICAgICAgIGlmIChkaWRXYXJuQWJvdXRTdGF0ZVRyYW5zaXRpb24pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnQ2Fubm90IHVwZGF0ZSBkdXJpbmcgYW4gZXhpc3Rpbmcgc3RhdGUgdHJhbnNpdGlvbiAoc3VjaCBhcyB3aXRoaW4gJyArICdgcmVuZGVyYCkuIFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLicpO1xuICAgICAgICBkaWRXYXJuQWJvdXRTdGF0ZVRyYW5zaXRpb24gPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH07XG59XG5cbi8vIFVzZWQgdG8gZW5zdXJlIGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24gaXMgbW9ub3RvbmljYWxseSBpbmNyZWFzaW5nLlxudmFyIGxhc3RVbmlxdWVBc3luY0V4cGlyYXRpb24gPSAwO1xuXG4vLyBSZXByZXNlbnRzIHRoZSBleHBpcmF0aW9uIHRpbWUgdGhhdCBpbmNvbWluZyB1cGRhdGVzIHNob3VsZCB1c2UuIChJZiB0aGlzXG4vLyBpcyBOb1dvcmssIHVzZSB0aGUgZGVmYXVsdCBzdHJhdGVneTogYXN5bmMgdXBkYXRlcyBpbiBhc3luYyBtb2RlLCBzeW5jXG4vLyB1cGRhdGVzIGluIHN5bmMgbW9kZS4pXG52YXIgZXhwaXJhdGlvbkNvbnRleHQgPSBOb1dvcms7XG5cbnZhciBpc1dvcmtpbmcgPSBmYWxzZTtcblxuLy8gVGhlIG5leHQgd29yayBpbiBwcm9ncmVzcyBmaWJlciB0aGF0IHdlJ3JlIGN1cnJlbnRseSB3b3JraW5nIG9uLlxudmFyIG5leHRVbml0T2ZXb3JrID0gbnVsbDtcbnZhciBuZXh0Um9vdCA9IG51bGw7XG4vLyBUaGUgdGltZSBhdCB3aGljaCB3ZSdyZSBjdXJyZW50bHkgcmVuZGVyaW5nIHdvcmsuXG52YXIgbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xudmFyIG5leHRMYXRlc3RBYnNvbHV0ZVRpbWVvdXRNcyA9IC0xO1xudmFyIG5leHRSZW5kZXJEaWRFcnJvciA9IGZhbHNlO1xuXG4vLyBUaGUgbmV4dCBmaWJlciB3aXRoIGFuIGVmZmVjdCB0aGF0IHdlJ3JlIGN1cnJlbnRseSBjb21taXR0aW5nLlxudmFyIG5leHRFZmZlY3QgPSBudWxsO1xuXG52YXIgaXNDb21taXR0aW5nJDEgPSBmYWxzZTtcblxudmFyIGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbnVsbDtcblxuLy8gVXNlZCBmb3IgcGVyZm9ybWFuY2UgdHJhY2tpbmcuXG52YXIgaW50ZXJydXB0ZWRCeSA9IG51bGw7XG5cbnZhciBzdGFzaGVkV29ya0luUHJvZ3Jlc3NQcm9wZXJ0aWVzID0gdm9pZCAwO1xudmFyIHJlcGxheVVuaXRPZldvcmsgPSB2b2lkIDA7XG52YXIgaXNSZXBsYXlpbmdGYWlsZWRVbml0T2ZXb3JrID0gdm9pZCAwO1xudmFyIG9yaWdpbmFsUmVwbGF5RXJyb3IgPSB2b2lkIDA7XG52YXIgcmV0aHJvd09yaWdpbmFsRXJyb3IgPSB2b2lkIDA7XG5pZiAodHJ1ZSAmJiByZXBsYXlGYWlsZWRVbml0T2ZXb3JrV2l0aEludm9rZUd1YXJkZWRDYWxsYmFjaykge1xuICBzdGFzaGVkV29ya0luUHJvZ3Jlc3NQcm9wZXJ0aWVzID0gbnVsbDtcbiAgaXNSZXBsYXlpbmdGYWlsZWRVbml0T2ZXb3JrID0gZmFsc2U7XG4gIG9yaWdpbmFsUmVwbGF5RXJyb3IgPSBudWxsO1xuICByZXBsYXlVbml0T2ZXb3JrID0gZnVuY3Rpb24gKGZhaWxlZFVuaXRPZldvcmssIHRocm93blZhbHVlLCBpc1lpZWxkeSkge1xuICAgIGlmICh0aHJvd25WYWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdGhyb3duVmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0aHJvd25WYWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBEb24ndCByZXBsYXkgcHJvbWlzZXMuIFRyZWF0IGV2ZXJ5dGhpbmcgZWxzZSBsaWtlIGFuIGVycm9yLlxuICAgICAgLy8gVE9ETzogTmVlZCB0byBmaWd1cmUgb3V0IGEgZGlmZmVyZW50IHN0cmF0ZWd5IGlmL3doZW4gd2UgYWRkXG4gICAgICAvLyBzdXBwb3J0IGZvciBjYXRjaGluZyBvdGhlciB0eXBlcy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBzdGF0ZSBvZiB0aGUgd29yay1pbi1wcm9ncmVzc1xuICAgIGlmIChzdGFzaGVkV29ya0luUHJvZ3Jlc3NQcm9wZXJ0aWVzID09PSBudWxsKSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4uIERvbid0IHRocm93IGJlY2F1c2UgdGhpcyBjb2RlIGlzIERFVi1vbmx5LlxuICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnQ291bGQgbm90IHJlcGxheSByZW5kZXJpbmcgYWZ0ZXIgYW4gZXJyb3IuIFRoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlYWN0LiAnICsgJ1BsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhc3NpZ25GaWJlclByb3BlcnRpZXNJbkRFVihmYWlsZWRVbml0T2ZXb3JrLCBzdGFzaGVkV29ya0luUHJvZ3Jlc3NQcm9wZXJ0aWVzKTtcblxuICAgIHN3aXRjaCAoZmFpbGVkVW5pdE9mV29yay50YWcpIHtcbiAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgIHBvcEhvc3RDb250YWluZXIoZmFpbGVkVW5pdE9mV29yayk7XG4gICAgICAgIHBvcFRvcExldmVsQ29udGV4dE9iamVjdChmYWlsZWRVbml0T2ZXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgIHBvcEhvc3RDb250ZXh0KGZhaWxlZFVuaXRPZldvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgQ29tcG9uZW50ID0gZmFpbGVkVW5pdE9mV29yay50eXBlO1xuICAgICAgICAgIGlmIChpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgICAgICAgICBwb3BDb250ZXh0KGZhaWxlZFVuaXRPZldvcmspO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgICBwb3BIb3N0Q29udGFpbmVyKGZhaWxlZFVuaXRPZldvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ29udGV4dFByb3ZpZGVyOlxuICAgICAgICBwb3BQcm92aWRlcihmYWlsZWRVbml0T2ZXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlcGxheSB0aGUgYmVnaW4gcGhhc2UuXG4gICAgaXNSZXBsYXlpbmdGYWlsZWRVbml0T2ZXb3JrID0gdHJ1ZTtcbiAgICBvcmlnaW5hbFJlcGxheUVycm9yID0gdGhyb3duVmFsdWU7XG4gICAgaW52b2tlR3VhcmRlZENhbGxiYWNrKG51bGwsIHdvcmtMb29wLCBudWxsLCBpc1lpZWxkeSk7XG4gICAgaXNSZXBsYXlpbmdGYWlsZWRVbml0T2ZXb3JrID0gZmFsc2U7XG4gICAgb3JpZ2luYWxSZXBsYXlFcnJvciA9IG51bGw7XG4gICAgaWYgKGhhc0NhdWdodEVycm9yKCkpIHtcbiAgICAgIHZhciByZXBsYXlFcnJvciA9IGNsZWFyQ2F1Z2h0RXJyb3IoKTtcbiAgICAgIGlmIChyZXBsYXlFcnJvciAhPSBudWxsICYmIHRocm93blZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBSZWFkaW5nIHRoZSBleHBhbmRvIHByb3BlcnR5IGlzIGludGVudGlvbmFsbHlcbiAgICAgICAgICAvLyBpbnNpZGUgYHRyeWAgYmVjYXVzZSBpdCBtaWdodCBiZSBhIGdldHRlciBvciBQcm94eS5cbiAgICAgICAgICBpZiAocmVwbGF5RXJyb3IuX3N1cHByZXNzTG9nZ2luZykge1xuICAgICAgICAgICAgLy8gQWxzbyBzdXBwcmVzcyBsb2dnaW5nIGZvciB0aGUgb3JpZ2luYWwgZXJyb3IuXG4gICAgICAgICAgICB0aHJvd25WYWx1ZS5fc3VwcHJlc3NMb2dnaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGlubmVyKSB7XG4gICAgICAgICAgLy8gSWdub3JlLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRoZSBiZWdpbiBwaGFzZSBkaWQgbm90IGZhaWwgdGhlIHNlY29uZCB0aW1lLCBzZXQgdGhpcyBwb2ludGVyXG4gICAgICAvLyBiYWNrIHRvIHRoZSBvcmlnaW5hbCB2YWx1ZS5cbiAgICAgIG5leHRVbml0T2ZXb3JrID0gZmFpbGVkVW5pdE9mV29yaztcbiAgICB9XG4gIH07XG4gIHJldGhyb3dPcmlnaW5hbEVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG9yaWdpbmFsUmVwbGF5RXJyb3I7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3RhY2soKSB7XG4gIGlmIChuZXh0VW5pdE9mV29yayAhPT0gbnVsbCkge1xuICAgIHZhciBpbnRlcnJ1cHRlZFdvcmsgPSBuZXh0VW5pdE9mV29yay5yZXR1cm47XG4gICAgd2hpbGUgKGludGVycnVwdGVkV29yayAhPT0gbnVsbCkge1xuICAgICAgdW53aW5kSW50ZXJydXB0ZWRXb3JrKGludGVycnVwdGVkV29yayk7XG4gICAgICBpbnRlcnJ1cHRlZFdvcmsgPSBpbnRlcnJ1cHRlZFdvcmsucmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHtcbiAgICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5kaXNjYXJkUGVuZGluZ1dhcm5pbmdzKCk7XG4gICAgY2hlY2tUaGF0U3RhY2tJc0VtcHR5KCk7XG4gIH1cblxuICBuZXh0Um9vdCA9IG51bGw7XG4gIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgbmV4dExhdGVzdEFic29sdXRlVGltZW91dE1zID0gLTE7XG4gIG5leHRSZW5kZXJEaWRFcnJvciA9IGZhbHNlO1xuICBuZXh0VW5pdE9mV29yayA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNvbW1pdEFsbEhvc3RFZmZlY3RzKCkge1xuICB3aGlsZSAobmV4dEVmZmVjdCAhPT0gbnVsbCkge1xuICAgIHtcbiAgICAgIHNldEN1cnJlbnRGaWJlcihuZXh0RWZmZWN0KTtcbiAgICB9XG4gICAgcmVjb3JkRWZmZWN0KCk7XG5cbiAgICB2YXIgZWZmZWN0VGFnID0gbmV4dEVmZmVjdC5lZmZlY3RUYWc7XG5cbiAgICBpZiAoZWZmZWN0VGFnICYgQ29udGVudFJlc2V0KSB7XG4gICAgICBjb21taXRSZXNldFRleHRDb250ZW50KG5leHRFZmZlY3QpO1xuICAgIH1cblxuICAgIGlmIChlZmZlY3RUYWcgJiBSZWYpIHtcbiAgICAgIHZhciBjdXJyZW50JCQxID0gbmV4dEVmZmVjdC5hbHRlcm5hdGU7XG4gICAgICBpZiAoY3VycmVudCQkMSAhPT0gbnVsbCkge1xuICAgICAgICBjb21taXREZXRhY2hSZWYoY3VycmVudCQkMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhlIGZvbGxvd2luZyBzd2l0Y2ggc3RhdGVtZW50IGlzIG9ubHkgY29uY2VybmVkIGFib3V0IHBsYWNlbWVudCxcbiAgICAvLyB1cGRhdGVzLCBhbmQgZGVsZXRpb25zLiBUbyBhdm9pZCBuZWVkaW5nIHRvIGFkZCBhIGNhc2UgZm9yIGV2ZXJ5XG4gICAgLy8gcG9zc2libGUgYml0bWFwIHZhbHVlLCB3ZSByZW1vdmUgdGhlIHNlY29uZGFyeSBlZmZlY3RzIGZyb20gdGhlXG4gICAgLy8gZWZmZWN0IHRhZyBhbmQgc3dpdGNoIG9uIHRoYXQgdmFsdWUuXG4gICAgdmFyIHByaW1hcnlFZmZlY3RUYWcgPSBlZmZlY3RUYWcgJiAoUGxhY2VtZW50IHwgVXBkYXRlIHwgRGVsZXRpb24pO1xuICAgIHN3aXRjaCAocHJpbWFyeUVmZmVjdFRhZykge1xuICAgICAgY2FzZSBQbGFjZW1lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICBjb21taXRQbGFjZW1lbnQobmV4dEVmZmVjdCk7XG4gICAgICAgICAgLy8gQ2xlYXIgdGhlIFwicGxhY2VtZW50XCIgZnJvbSBlZmZlY3QgdGFnIHNvIHRoYXQgd2Uga25vdyB0aGF0IHRoaXMgaXMgaW5zZXJ0ZWQsIGJlZm9yZVxuICAgICAgICAgIC8vIGFueSBsaWZlLWN5Y2xlcyBsaWtlIGNvbXBvbmVudERpZE1vdW50IGdldHMgY2FsbGVkLlxuICAgICAgICAgIC8vIFRPRE86IGZpbmRET01Ob2RlIGRvZXNuJ3QgcmVseSBvbiB0aGlzIGFueSBtb3JlIGJ1dCBpc01vdW50ZWRcbiAgICAgICAgICAvLyBkb2VzIGFuZCBpc01vdW50ZWQgaXMgZGVwcmVjYXRlZCBhbnl3YXkgc28gd2Ugc2hvdWxkIGJlIGFibGVcbiAgICAgICAgICAvLyB0byBraWxsIHRoaXMuXG4gICAgICAgICAgbmV4dEVmZmVjdC5lZmZlY3RUYWcgJj0gflBsYWNlbWVudDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBQbGFjZW1lbnRBbmRVcGRhdGU6XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBQbGFjZW1lbnRcbiAgICAgICAgICBjb21taXRQbGFjZW1lbnQobmV4dEVmZmVjdCk7XG4gICAgICAgICAgLy8gQ2xlYXIgdGhlIFwicGxhY2VtZW50XCIgZnJvbSBlZmZlY3QgdGFnIHNvIHRoYXQgd2Uga25vdyB0aGF0IHRoaXMgaXMgaW5zZXJ0ZWQsIGJlZm9yZVxuICAgICAgICAgIC8vIGFueSBsaWZlLWN5Y2xlcyBsaWtlIGNvbXBvbmVudERpZE1vdW50IGdldHMgY2FsbGVkLlxuICAgICAgICAgIG5leHRFZmZlY3QuZWZmZWN0VGFnICY9IH5QbGFjZW1lbnQ7XG5cbiAgICAgICAgICAvLyBVcGRhdGVcbiAgICAgICAgICB2YXIgX2N1cnJlbnQgPSBuZXh0RWZmZWN0LmFsdGVybmF0ZTtcbiAgICAgICAgICBjb21taXRXb3JrKF9jdXJyZW50LCBuZXh0RWZmZWN0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgY2FzZSBVcGRhdGU6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX2N1cnJlbnQyID0gbmV4dEVmZmVjdC5hbHRlcm5hdGU7XG4gICAgICAgICAgY29tbWl0V29yayhfY3VycmVudDIsIG5leHRFZmZlY3QpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIERlbGV0aW9uOlxuICAgICAgICB7XG4gICAgICAgICAgY29tbWl0RGVsZXRpb24obmV4dEVmZmVjdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmV4dEVmZmVjdCA9IG5leHRFZmZlY3QubmV4dEVmZmVjdDtcbiAgfVxuXG4gIHtcbiAgICByZXNldEN1cnJlbnRGaWJlcigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZWN5Y2xlcygpIHtcbiAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICB7XG4gICAgICBzZXRDdXJyZW50RmliZXIobmV4dEVmZmVjdCk7XG4gICAgfVxuXG4gICAgdmFyIGVmZmVjdFRhZyA9IG5leHRFZmZlY3QuZWZmZWN0VGFnO1xuICAgIGlmIChlZmZlY3RUYWcgJiBTbmFwc2hvdCkge1xuICAgICAgcmVjb3JkRWZmZWN0KCk7XG4gICAgICB2YXIgY3VycmVudCQkMSA9IG5leHRFZmZlY3QuYWx0ZXJuYXRlO1xuICAgICAgY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzKGN1cnJlbnQkJDEsIG5leHRFZmZlY3QpO1xuICAgIH1cblxuICAgIC8vIERvbid0IGNsZWFudXAgZWZmZWN0cyB5ZXQ7XG4gICAgLy8gVGhpcyB3aWxsIGJlIGRvbmUgYnkgY29tbWl0QWxsTGlmZUN5Y2xlcygpXG4gICAgbmV4dEVmZmVjdCA9IG5leHRFZmZlY3QubmV4dEVmZmVjdDtcbiAgfVxuXG4gIHtcbiAgICByZXNldEN1cnJlbnRGaWJlcigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdEFsbExpZmVDeWNsZXMoZmluaXNoZWRSb290LCBjb21taXR0ZWRFeHBpcmF0aW9uVGltZSkge1xuICB7XG4gICAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MuZmx1c2hQZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MoKTtcbiAgICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5mbHVzaExlZ2FjeUNvbnRleHRXYXJuaW5nKCk7XG5cbiAgICBpZiAod2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMpIHtcbiAgICAgIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLmZsdXNoUGVuZGluZ0RlcHJlY2F0aW9uV2FybmluZ3MoKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICB2YXIgZWZmZWN0VGFnID0gbmV4dEVmZmVjdC5lZmZlY3RUYWc7XG5cbiAgICBpZiAoZWZmZWN0VGFnICYgKFVwZGF0ZSB8IENhbGxiYWNrKSkge1xuICAgICAgcmVjb3JkRWZmZWN0KCk7XG4gICAgICB2YXIgY3VycmVudCQkMSA9IG5leHRFZmZlY3QuYWx0ZXJuYXRlO1xuICAgICAgY29tbWl0TGlmZUN5Y2xlcyhmaW5pc2hlZFJvb3QsIGN1cnJlbnQkJDEsIG5leHRFZmZlY3QsIGNvbW1pdHRlZEV4cGlyYXRpb25UaW1lKTtcbiAgICB9XG5cbiAgICBpZiAoZWZmZWN0VGFnICYgUmVmKSB7XG4gICAgICByZWNvcmRFZmZlY3QoKTtcbiAgICAgIGNvbW1pdEF0dGFjaFJlZihuZXh0RWZmZWN0KTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IG5leHRFZmZlY3QubmV4dEVmZmVjdDtcbiAgICAvLyBFbnN1cmUgdGhhdCB3ZSBjbGVhbiB0aGVzZSB1cCBzbyB0aGF0IHdlIGRvbid0IGFjY2lkZW50YWxseSBrZWVwIHRoZW0uXG4gICAgLy8gSSdtIG5vdCBhY3R1YWxseSBzdXJlIHRoaXMgbWF0dGVycyBiZWNhdXNlIHdlIGNhbid0IHJlc2V0IGZpcnN0RWZmZWN0XG4gICAgLy8gYW5kIGxhc3RFZmZlY3Qgc2luY2UgdGhleSdyZSBvbiBldmVyeSBub2RlLCBub3QganVzdCB0aGUgZWZmZWN0ZnVsXG4gICAgLy8gb25lcy4gU28gd2UgaGF2ZSB0byBjbGVhbiBldmVyeXRoaW5nIGFzIHdlIHJldXNlIG5vZGVzIGFueXdheS5cbiAgICBuZXh0RWZmZWN0Lm5leHRFZmZlY3QgPSBudWxsO1xuICAgIC8vIEVuc3VyZSB0aGF0IHdlIHJlc2V0IHRoZSBlZmZlY3RUYWcgaGVyZSBzbyB0aGF0IHdlIGNhbiByZWx5IG9uIGVmZmVjdFxuICAgIC8vIHRhZ3MgdG8gcmVhc29uIGFib3V0IHRoZSBjdXJyZW50IGxpZmUtY3ljbGUuXG4gICAgbmV4dEVmZmVjdCA9IG5leHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNBbHJlYWR5RmFpbGVkTGVnYWN5RXJyb3JCb3VuZGFyeShpbnN0YW5jZSkge1xuICByZXR1cm4gbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgIT09IG51bGwgJiYgbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuaGFzKGluc3RhbmNlKTtcbn1cblxuZnVuY3Rpb24gbWFya0xlZ2FjeUVycm9yQm91bmRhcnlBc0ZhaWxlZChpbnN0YW5jZSkge1xuICBpZiAobGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgPT09IG51bGwpIHtcbiAgICBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9IG5ldyBTZXQoW2luc3RhbmNlXSk7XG4gIH0gZWxzZSB7XG4gICAgbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuYWRkKGluc3RhbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRSb290KHJvb3QsIGZpbmlzaGVkV29yaykge1xuICBpc1dvcmtpbmcgPSB0cnVlO1xuICBpc0NvbW1pdHRpbmckMSA9IHRydWU7XG4gIHN0YXJ0Q29tbWl0VGltZXIoKTtcblxuICAhKHJvb3QuY3VycmVudCAhPT0gZmluaXNoZWRXb3JrKSA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBjb21taXQgdGhlIHNhbWUgdHJlZSBhcyBiZWZvcmUuIFRoaXMgaXMgcHJvYmFibHkgYSBidWcgcmVsYXRlZCB0byB0aGUgcmV0dXJuIGZpZWxkLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICB2YXIgY29tbWl0dGVkRXhwaXJhdGlvblRpbWUgPSByb290LnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTtcbiAgIShjb21taXR0ZWRFeHBpcmF0aW9uVGltZSAhPT0gTm9Xb3JrKSA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBjb21taXQgYW4gaW5jb21wbGV0ZSByb290LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICByb290LnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcblxuICAvLyBVcGRhdGUgdGhlIHBlbmRpbmcgcHJpb3JpdHkgbGV2ZWxzIHRvIGFjY291bnQgZm9yIHRoZSB3b3JrIHRoYXQgd2UgYXJlXG4gIC8vIGFib3V0IHRvIGNvbW1pdC4gVGhpcyBuZWVkcyB0byBoYXBwZW4gYmVmb3JlIGNhbGxpbmcgdGhlIGxpZmVjeWNsZXMsIHNpbmNlXG4gIC8vIHRoZXkgbWF5IHNjaGVkdWxlIGFkZGl0aW9uYWwgdXBkYXRlcy5cbiAgdmFyIHVwZGF0ZUV4cGlyYXRpb25UaW1lQmVmb3JlQ29tbWl0ID0gZmluaXNoZWRXb3JrLmV4cGlyYXRpb25UaW1lO1xuICB2YXIgY2hpbGRFeHBpcmF0aW9uVGltZUJlZm9yZUNvbW1pdCA9IGZpbmlzaGVkV29yay5jaGlsZEV4cGlyYXRpb25UaW1lO1xuICB2YXIgZWFybGllc3RSZW1haW5pbmdUaW1lQmVmb3JlQ29tbWl0ID0gdXBkYXRlRXhwaXJhdGlvblRpbWVCZWZvcmVDb21taXQgPT09IE5vV29yayB8fCBjaGlsZEV4cGlyYXRpb25UaW1lQmVmb3JlQ29tbWl0ICE9PSBOb1dvcmsgJiYgY2hpbGRFeHBpcmF0aW9uVGltZUJlZm9yZUNvbW1pdCA8IHVwZGF0ZUV4cGlyYXRpb25UaW1lQmVmb3JlQ29tbWl0ID8gY2hpbGRFeHBpcmF0aW9uVGltZUJlZm9yZUNvbW1pdCA6IHVwZGF0ZUV4cGlyYXRpb25UaW1lQmVmb3JlQ29tbWl0O1xuICBtYXJrQ29tbWl0dGVkUHJpb3JpdHlMZXZlbHMocm9vdCwgZWFybGllc3RSZW1haW5pbmdUaW1lQmVmb3JlQ29tbWl0KTtcblxuICB2YXIgcHJldkludGVyYWN0aW9ucyA9IG51bGw7XG4gIGlmIChlbmFibGVTY2hlZHVsZXJUcmFjaW5nKSB7XG4gICAgLy8gUmVzdG9yZSBhbnkgcGVuZGluZyBpbnRlcmFjdGlvbnMgYXQgdGhpcyBwb2ludCxcbiAgICAvLyBTbyB0aGF0IGNhc2NhZGluZyB3b3JrIHRyaWdnZXJlZCBkdXJpbmcgdGhlIHJlbmRlciBwaGFzZSB3aWxsIGJlIGFjY291bnRlZCBmb3IuXG4gICAgcHJldkludGVyYWN0aW9ucyA9IHRyYWNpbmcuX19pbnRlcmFjdGlvbnNSZWYuY3VycmVudDtcbiAgICB0cmFjaW5nLl9faW50ZXJhY3Rpb25zUmVmLmN1cnJlbnQgPSByb290Lm1lbW9pemVkSW50ZXJhY3Rpb25zO1xuICB9XG5cbiAgLy8gUmVzZXQgdGhpcyB0byBudWxsIGJlZm9yZSBjYWxsaW5nIGxpZmVjeWNsZXNcbiAgUmVhY3RDdXJyZW50T3duZXIkMi5jdXJyZW50ID0gbnVsbDtcblxuICB2YXIgZmlyc3RFZmZlY3QgPSB2b2lkIDA7XG4gIGlmIChmaW5pc2hlZFdvcmsuZWZmZWN0VGFnID4gUGVyZm9ybWVkV29yaykge1xuICAgIC8vIEEgZmliZXIncyBlZmZlY3QgbGlzdCBjb25zaXN0cyBvbmx5IG9mIGl0cyBjaGlsZHJlbiwgbm90IGl0c2VsZi4gU28gaWZcbiAgICAvLyB0aGUgcm9vdCBoYXMgYW4gZWZmZWN0LCB3ZSBuZWVkIHRvIGFkZCBpdCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0LiBUaGVcbiAgICAvLyByZXN1bHRpbmcgbGlzdCBpcyB0aGUgc2V0IHRoYXQgd291bGQgYmVsb25nIHRvIHRoZSByb290J3MgcGFyZW50LCBpZlxuICAgIC8vIGl0IGhhZCBvbmU7IHRoYXQgaXMsIGFsbCB0aGUgZWZmZWN0cyBpbiB0aGUgdHJlZSBpbmNsdWRpbmcgdGhlIHJvb3QuXG4gICAgaWYgKGZpbmlzaGVkV29yay5sYXN0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgICBmaW5pc2hlZFdvcmsubGFzdEVmZmVjdC5uZXh0RWZmZWN0ID0gZmluaXNoZWRXb3JrO1xuICAgICAgZmlyc3RFZmZlY3QgPSBmaW5pc2hlZFdvcmsuZmlyc3RFZmZlY3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZpcnN0RWZmZWN0ID0gZmluaXNoZWRXb3JrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGVyZSBpcyBubyBlZmZlY3Qgb24gdGhlIHJvb3QuXG4gICAgZmlyc3RFZmZlY3QgPSBmaW5pc2hlZFdvcmsuZmlyc3RFZmZlY3Q7XG4gIH1cblxuICBwcmVwYXJlRm9yQ29tbWl0KHJvb3QuY29udGFpbmVySW5mbyk7XG5cbiAgLy8gSW52b2tlIGluc3RhbmNlcyBvZiBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSBiZWZvcmUgbXV0YXRpb24uXG4gIG5leHRFZmZlY3QgPSBmaXJzdEVmZmVjdDtcbiAgc3RhcnRDb21taXRTbmFwc2hvdEVmZmVjdHNUaW1lcigpO1xuICB3aGlsZSAobmV4dEVmZmVjdCAhPT0gbnVsbCkge1xuICAgIHZhciBkaWRFcnJvciA9IGZhbHNlO1xuICAgIHZhciBlcnJvciA9IHZvaWQgMDtcbiAgICB7XG4gICAgICBpbnZva2VHdWFyZGVkQ2FsbGJhY2sobnVsbCwgY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlY3ljbGVzLCBudWxsKTtcbiAgICAgIGlmIChoYXNDYXVnaHRFcnJvcigpKSB7XG4gICAgICAgIGRpZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgZXJyb3IgPSBjbGVhckNhdWdodEVycm9yKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkaWRFcnJvcikge1xuICAgICAgIShuZXh0RWZmZWN0ICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ1Nob3VsZCBoYXZlIG5leHQgZWZmZWN0LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IobmV4dEVmZmVjdCwgZXJyb3IpO1xuICAgICAgLy8gQ2xlYW4tdXBcbiAgICAgIGlmIChuZXh0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgICAgIG5leHRFZmZlY3QgPSBuZXh0RWZmZWN0Lm5leHRFZmZlY3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN0b3BDb21taXRTbmFwc2hvdEVmZmVjdHNUaW1lcigpO1xuXG4gIGlmIChlbmFibGVQcm9maWxlclRpbWVyKSB7XG4gICAgLy8gTWFyayB0aGUgY3VycmVudCBjb21taXQgdGltZSB0byBiZSBzaGFyZWQgYnkgYWxsIFByb2ZpbGVycyBpbiB0aGlzIGJhdGNoLlxuICAgIC8vIFRoaXMgZW5hYmxlcyB0aGVtIHRvIGJlIGdyb3VwZWQgbGF0ZXIuXG4gICAgcmVjb3JkQ29tbWl0VGltZSgpO1xuICB9XG5cbiAgLy8gQ29tbWl0IGFsbCB0aGUgc2lkZS1lZmZlY3RzIHdpdGhpbiBhIHRyZWUuIFdlJ2xsIGRvIHRoaXMgaW4gdHdvIHBhc3Nlcy5cbiAgLy8gVGhlIGZpcnN0IHBhc3MgcGVyZm9ybXMgYWxsIHRoZSBob3N0IGluc2VydGlvbnMsIHVwZGF0ZXMsIGRlbGV0aW9ucyBhbmRcbiAgLy8gcmVmIHVubW91bnRzLlxuICBuZXh0RWZmZWN0ID0gZmlyc3RFZmZlY3Q7XG4gIHN0YXJ0Q29tbWl0SG9zdEVmZmVjdHNUaW1lcigpO1xuICB3aGlsZSAobmV4dEVmZmVjdCAhPT0gbnVsbCkge1xuICAgIHZhciBfZGlkRXJyb3IgPSBmYWxzZTtcbiAgICB2YXIgX2Vycm9yID0gdm9pZCAwO1xuICAgIHtcbiAgICAgIGludm9rZUd1YXJkZWRDYWxsYmFjayhudWxsLCBjb21taXRBbGxIb3N0RWZmZWN0cywgbnVsbCk7XG4gICAgICBpZiAoaGFzQ2F1Z2h0RXJyb3IoKSkge1xuICAgICAgICBfZGlkRXJyb3IgPSB0cnVlO1xuICAgICAgICBfZXJyb3IgPSBjbGVhckNhdWdodEVycm9yKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChfZGlkRXJyb3IpIHtcbiAgICAgICEobmV4dEVmZmVjdCAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgaGF2ZSBuZXh0IGVmZmVjdC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKG5leHRFZmZlY3QsIF9lcnJvcik7XG4gICAgICAvLyBDbGVhbi11cFxuICAgICAgaWYgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICAgICAgbmV4dEVmZmVjdCA9IG5leHRFZmZlY3QubmV4dEVmZmVjdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3RvcENvbW1pdEhvc3RFZmZlY3RzVGltZXIoKTtcblxuICByZXNldEFmdGVyQ29tbWl0KHJvb3QuY29udGFpbmVySW5mbyk7XG5cbiAgLy8gVGhlIHdvcmstaW4tcHJvZ3Jlc3MgdHJlZSBpcyBub3cgdGhlIGN1cnJlbnQgdHJlZS4gVGhpcyBtdXN0IGNvbWUgYWZ0ZXJcbiAgLy8gdGhlIGZpcnN0IHBhc3Mgb2YgdGhlIGNvbW1pdCBwaGFzZSwgc28gdGhhdCB0aGUgcHJldmlvdXMgdHJlZSBpcyBzdGlsbFxuICAvLyBjdXJyZW50IGR1cmluZyBjb21wb25lbnRXaWxsVW5tb3VudCwgYnV0IGJlZm9yZSB0aGUgc2Vjb25kIHBhc3MsIHNvIHRoYXRcbiAgLy8gdGhlIGZpbmlzaGVkIHdvcmsgaXMgY3VycmVudCBkdXJpbmcgY29tcG9uZW50RGlkTW91bnQvVXBkYXRlLlxuICByb290LmN1cnJlbnQgPSBmaW5pc2hlZFdvcms7XG5cbiAgLy8gSW4gdGhlIHNlY29uZCBwYXNzIHdlJ2xsIHBlcmZvcm0gYWxsIGxpZmUtY3ljbGVzIGFuZCByZWYgY2FsbGJhY2tzLlxuICAvLyBMaWZlLWN5Y2xlcyBoYXBwZW4gYXMgYSBzZXBhcmF0ZSBwYXNzIHNvIHRoYXQgYWxsIHBsYWNlbWVudHMsIHVwZGF0ZXMsXG4gIC8vIGFuZCBkZWxldGlvbnMgaW4gdGhlIGVudGlyZSB0cmVlIGhhdmUgYWxyZWFkeSBiZWVuIGludm9rZWQuXG4gIC8vIFRoaXMgcGFzcyBhbHNvIHRyaWdnZXJzIGFueSByZW5kZXJlci1zcGVjaWZpYyBpbml0aWFsIGVmZmVjdHMuXG4gIG5leHRFZmZlY3QgPSBmaXJzdEVmZmVjdDtcbiAgc3RhcnRDb21taXRMaWZlQ3ljbGVzVGltZXIoKTtcbiAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICB2YXIgX2RpZEVycm9yMiA9IGZhbHNlO1xuICAgIHZhciBfZXJyb3IyID0gdm9pZCAwO1xuICAgIHtcbiAgICAgIGludm9rZUd1YXJkZWRDYWxsYmFjayhudWxsLCBjb21taXRBbGxMaWZlQ3ljbGVzLCBudWxsLCByb290LCBjb21taXR0ZWRFeHBpcmF0aW9uVGltZSk7XG4gICAgICBpZiAoaGFzQ2F1Z2h0RXJyb3IoKSkge1xuICAgICAgICBfZGlkRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgX2Vycm9yMiA9IGNsZWFyQ2F1Z2h0RXJyb3IoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKF9kaWRFcnJvcjIpIHtcbiAgICAgICEobmV4dEVmZmVjdCAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgaGF2ZSBuZXh0IGVmZmVjdC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKG5leHRFZmZlY3QsIF9lcnJvcjIpO1xuICAgICAgaWYgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICAgICAgbmV4dEVmZmVjdCA9IG5leHRFZmZlY3QubmV4dEVmZmVjdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpc0NvbW1pdHRpbmckMSA9IGZhbHNlO1xuICBpc1dvcmtpbmcgPSBmYWxzZTtcbiAgc3RvcENvbW1pdExpZmVDeWNsZXNUaW1lcigpO1xuICBzdG9wQ29tbWl0VGltZXIoKTtcbiAgb25Db21taXRSb290KGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpO1xuICBpZiAodHJ1ZSAmJiBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sKSB7XG4gICAgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbC5vbkNvbW1pdFdvcmsoZmluaXNoZWRXb3JrKTtcbiAgfVxuXG4gIHZhciB1cGRhdGVFeHBpcmF0aW9uVGltZUFmdGVyQ29tbWl0ID0gZmluaXNoZWRXb3JrLmV4cGlyYXRpb25UaW1lO1xuICB2YXIgY2hpbGRFeHBpcmF0aW9uVGltZUFmdGVyQ29tbWl0ID0gZmluaXNoZWRXb3JrLmNoaWxkRXhwaXJhdGlvblRpbWU7XG4gIHZhciBlYXJsaWVzdFJlbWFpbmluZ1RpbWVBZnRlckNvbW1pdCA9IHVwZGF0ZUV4cGlyYXRpb25UaW1lQWZ0ZXJDb21taXQgPT09IE5vV29yayB8fCBjaGlsZEV4cGlyYXRpb25UaW1lQWZ0ZXJDb21taXQgIT09IE5vV29yayAmJiBjaGlsZEV4cGlyYXRpb25UaW1lQWZ0ZXJDb21taXQgPCB1cGRhdGVFeHBpcmF0aW9uVGltZUFmdGVyQ29tbWl0ID8gY2hpbGRFeHBpcmF0aW9uVGltZUFmdGVyQ29tbWl0IDogdXBkYXRlRXhwaXJhdGlvblRpbWVBZnRlckNvbW1pdDtcbiAgaWYgKGVhcmxpZXN0UmVtYWluaW5nVGltZUFmdGVyQ29tbWl0ID09PSBOb1dvcmspIHtcbiAgICAvLyBJZiB0aGVyZSdzIG5vIHJlbWFpbmluZyB3b3JrLCB3ZSBjYW4gY2xlYXIgdGhlIHNldCBvZiBhbHJlYWR5IGZhaWxlZFxuICAgIC8vIGVycm9yIGJvdW5kYXJpZXMuXG4gICAgbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgPSBudWxsO1xuICB9XG4gIG9uQ29tbWl0KHJvb3QsIGVhcmxpZXN0UmVtYWluaW5nVGltZUFmdGVyQ29tbWl0KTtcblxuICBpZiAoZW5hYmxlU2NoZWR1bGVyVHJhY2luZykge1xuICAgIHRyYWNpbmcuX19pbnRlcmFjdGlvbnNSZWYuY3VycmVudCA9IHByZXZJbnRlcmFjdGlvbnM7XG5cbiAgICB2YXIgc3Vic2NyaWJlciA9IHZvaWQgMDtcblxuICAgIHRyeSB7XG4gICAgICBzdWJzY3JpYmVyID0gdHJhY2luZy5fX3N1YnNjcmliZXJSZWYuY3VycmVudDtcbiAgICAgIGlmIChzdWJzY3JpYmVyICE9PSBudWxsICYmIHJvb3QubWVtb2l6ZWRJbnRlcmFjdGlvbnMuc2l6ZSA+IDApIHtcbiAgICAgICAgdmFyIHRocmVhZElEID0gY29tcHV0ZVRocmVhZElEKGNvbW1pdHRlZEV4cGlyYXRpb25UaW1lLCByb290LmludGVyYWN0aW9uVGhyZWFkSUQpO1xuICAgICAgICBzdWJzY3JpYmVyLm9uV29ya1N0b3BwZWQocm9vdC5tZW1vaXplZEludGVyYWN0aW9ucywgdGhyZWFkSUQpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBJdCdzIG5vdCBzYWZlIGZvciBjb21taXRSb290KCkgdG8gdGhyb3cuXG4gICAgICAvLyBTdG9yZSB0aGUgZXJyb3IgZm9yIG5vdyBhbmQgd2UnbGwgcmUtdGhyb3cgaW4gZmluaXNoUmVuZGVyaW5nKCkuXG4gICAgICBpZiAoIWhhc1VuaGFuZGxlZEVycm9yKSB7XG4gICAgICAgIGhhc1VuaGFuZGxlZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgdW5oYW5kbGVkRXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gQ2xlYXIgY29tcGxldGVkIGludGVyYWN0aW9ucyBmcm9tIHRoZSBwZW5kaW5nIE1hcC5cbiAgICAgIC8vIFVubGVzcyB0aGUgcmVuZGVyIHdhcyBzdXNwZW5kZWQgb3IgY2FzY2FkaW5nIHdvcmsgd2FzIHNjaGVkdWxlZCxcbiAgICAgIC8vIEluIHdoaWNoIGNhc2XigJMgbGVhdmUgcGVuZGluZyBpbnRlcmFjdGlvbnMgdW50aWwgdGhlIHN1YnNlcXVlbnQgcmVuZGVyLlxuICAgICAgdmFyIHBlbmRpbmdJbnRlcmFjdGlvbk1hcCA9IHJvb3QucGVuZGluZ0ludGVyYWN0aW9uTWFwO1xuICAgICAgcGVuZGluZ0ludGVyYWN0aW9uTWFwLmZvckVhY2goZnVuY3Rpb24gKHNjaGVkdWxlZEludGVyYWN0aW9ucywgc2NoZWR1bGVkRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgLy8gT25seSBkZWNyZW1lbnQgdGhlIHBlbmRpbmcgaW50ZXJhY3Rpb24gY291bnQgaWYgd2UncmUgZG9uZS5cbiAgICAgICAgLy8gSWYgdGhlcmUncyBzdGlsbCB3b3JrIGF0IHRoZSBjdXJyZW50IHByaW9yaXR5LFxuICAgICAgICAvLyBUaGF0IGluZGljYXRlcyB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBzdXNwZW5zZSBkYXRhLlxuICAgICAgICBpZiAoZWFybGllc3RSZW1haW5pbmdUaW1lQWZ0ZXJDb21taXQgPT09IE5vV29yayB8fCBzY2hlZHVsZWRFeHBpcmF0aW9uVGltZSA8IGVhcmxpZXN0UmVtYWluaW5nVGltZUFmdGVyQ29tbWl0KSB7XG4gICAgICAgICAgcGVuZGluZ0ludGVyYWN0aW9uTWFwLmRlbGV0ZShzY2hlZHVsZWRFeHBpcmF0aW9uVGltZSk7XG5cbiAgICAgICAgICBzY2hlZHVsZWRJbnRlcmFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgIGludGVyYWN0aW9uLl9fY291bnQtLTtcblxuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIgIT09IG51bGwgJiYgaW50ZXJhY3Rpb24uX19jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIub25JbnRlcmFjdGlvblNjaGVkdWxlZFdvcmtDb21wbGV0ZWQoaW50ZXJhY3Rpb24pO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIEl0J3Mgbm90IHNhZmUgZm9yIGNvbW1pdFJvb3QoKSB0byB0aHJvdy5cbiAgICAgICAgICAgICAgICAvLyBTdG9yZSB0aGUgZXJyb3IgZm9yIG5vdyBhbmQgd2UnbGwgcmUtdGhyb3cgaW4gZmluaXNoUmVuZGVyaW5nKCkuXG4gICAgICAgICAgICAgICAgaWYgKCFoYXNVbmhhbmRsZWRFcnJvcikge1xuICAgICAgICAgICAgICAgICAgaGFzVW5oYW5kbGVkRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgdW5oYW5kbGVkRXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0Q2hpbGRFeHBpcmF0aW9uVGltZSh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyVGltZSkge1xuICBpZiAocmVuZGVyVGltZSAhPT0gTmV2ZXIgJiYgd29ya0luUHJvZ3Jlc3MuY2hpbGRFeHBpcmF0aW9uVGltZSA9PT0gTmV2ZXIpIHtcbiAgICAvLyBUaGUgY2hpbGRyZW4gb2YgdGhpcyBjb21wb25lbnQgYXJlIGhpZGRlbi4gRG9uJ3QgYnViYmxlIHRoZWlyXG4gICAgLy8gZXhwaXJhdGlvbiB0aW1lcy5cbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbmV3Q2hpbGRFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcblxuICAvLyBCdWJibGUgdXAgdGhlIGVhcmxpZXN0IGV4cGlyYXRpb24gdGltZS5cbiAgaWYgKGVuYWJsZVByb2ZpbGVyVGltZXIgJiYgd29ya0luUHJvZ3Jlc3MubW9kZSAmIFByb2ZpbGVNb2RlKSB7XG4gICAgLy8gV2UncmUgaW4gcHJvZmlsaW5nIG1vZGUuXG4gICAgLy8gTGV0J3MgdXNlIHRoaXMgc2FtZSB0cmF2ZXJzYWwgdG8gdXBkYXRlIHRoZSByZW5kZXIgZHVyYXRpb25zLlxuICAgIHZhciBhY3R1YWxEdXJhdGlvbiA9IHdvcmtJblByb2dyZXNzLmFjdHVhbER1cmF0aW9uO1xuICAgIHZhciB0cmVlQmFzZUR1cmF0aW9uID0gd29ya0luUHJvZ3Jlc3Muc2VsZkJhc2VEdXJhdGlvbjtcblxuICAgIC8vIFdoZW4gYSBmaWJlciBpcyBjbG9uZWQsIGl0cyBhY3R1YWxEdXJhdGlvbiBpcyByZXNldCB0byAwLlxuICAgIC8vIFRoaXMgdmFsdWUgd2lsbCBvbmx5IGJlIHVwZGF0ZWQgaWYgd29yayBpcyBkb25lIG9uIHRoZSBmaWJlciAoaS5lLiBpdCBkb2Vzbid0IGJhaWxvdXQpLlxuICAgIC8vIFdoZW4gd29yayBpcyBkb25lLCBpdCBzaG91bGQgYnViYmxlIHRvIHRoZSBwYXJlbnQncyBhY3R1YWxEdXJhdGlvbi5cbiAgICAvLyBJZiB0aGUgZmliZXIgaGFzIG5vdCBiZWVuIGNsb25lZCB0aG91Z2gsIChtZWFuaW5nIG5vIHdvcmsgd2FzIGRvbmUpLFxuICAgIC8vIFRoZW4gdGhpcyB2YWx1ZSB3aWxsIHJlZmxlY3QgdGhlIGFtb3VudCBvZiB0aW1lIHNwZW50IHdvcmtpbmcgb24gYSBwcmV2aW91cyByZW5kZXIuXG4gICAgLy8gSW4gdGhhdCBjYXNlIGl0IHNob3VsZCBub3QgYnViYmxlLlxuICAgIC8vIFdlIGRldGVybWluZSB3aGV0aGVyIGl0IHdhcyBjbG9uZWQgYnkgY29tcGFyaW5nIHRoZSBjaGlsZCBwb2ludGVyLlxuICAgIHZhciBzaG91bGRCdWJibGVBY3R1YWxEdXJhdGlvbnMgPSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGUgPT09IG51bGwgfHwgd29ya0luUHJvZ3Jlc3MuY2hpbGQgIT09IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZS5jaGlsZDtcblxuICAgIHZhciBjaGlsZCA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIHdoaWxlIChjaGlsZCAhPT0gbnVsbCkge1xuICAgICAgdmFyIGNoaWxkVXBkYXRlRXhwaXJhdGlvblRpbWUgPSBjaGlsZC5leHBpcmF0aW9uVGltZTtcbiAgICAgIHZhciBjaGlsZENoaWxkRXhwaXJhdGlvblRpbWUgPSBjaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO1xuICAgICAgaWYgKG5ld0NoaWxkRXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBjaGlsZFVwZGF0ZUV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmsgJiYgY2hpbGRVcGRhdGVFeHBpcmF0aW9uVGltZSA8IG5ld0NoaWxkRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgbmV3Q2hpbGRFeHBpcmF0aW9uVGltZSA9IGNoaWxkVXBkYXRlRXhwaXJhdGlvblRpbWU7XG4gICAgICB9XG4gICAgICBpZiAobmV3Q2hpbGRFeHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IGNoaWxkQ2hpbGRFeHBpcmF0aW9uVGltZSAhPT0gTm9Xb3JrICYmIGNoaWxkQ2hpbGRFeHBpcmF0aW9uVGltZSA8IG5ld0NoaWxkRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgbmV3Q2hpbGRFeHBpcmF0aW9uVGltZSA9IGNoaWxkQ2hpbGRFeHBpcmF0aW9uVGltZTtcbiAgICAgIH1cbiAgICAgIGlmIChzaG91bGRCdWJibGVBY3R1YWxEdXJhdGlvbnMpIHtcbiAgICAgICAgYWN0dWFsRHVyYXRpb24gKz0gY2hpbGQuYWN0dWFsRHVyYXRpb247XG4gICAgICB9XG4gICAgICB0cmVlQmFzZUR1cmF0aW9uICs9IGNoaWxkLnRyZWVCYXNlRHVyYXRpb247XG4gICAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gICAgfVxuICAgIHdvcmtJblByb2dyZXNzLmFjdHVhbER1cmF0aW9uID0gYWN0dWFsRHVyYXRpb247XG4gICAgd29ya0luUHJvZ3Jlc3MudHJlZUJhc2VEdXJhdGlvbiA9IHRyZWVCYXNlRHVyYXRpb247XG4gIH0gZWxzZSB7XG4gICAgdmFyIF9jaGlsZCA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIHdoaWxlIChfY2hpbGQgIT09IG51bGwpIHtcbiAgICAgIHZhciBfY2hpbGRVcGRhdGVFeHBpcmF0aW9uVGltZSA9IF9jaGlsZC5leHBpcmF0aW9uVGltZTtcbiAgICAgIHZhciBfY2hpbGRDaGlsZEV4cGlyYXRpb25UaW1lID0gX2NoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7XG4gICAgICBpZiAobmV3Q2hpbGRFeHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IF9jaGlsZFVwZGF0ZUV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmsgJiYgX2NoaWxkVXBkYXRlRXhwaXJhdGlvblRpbWUgPCBuZXdDaGlsZEV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgIG5ld0NoaWxkRXhwaXJhdGlvblRpbWUgPSBfY2hpbGRVcGRhdGVFeHBpcmF0aW9uVGltZTtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdDaGlsZEV4cGlyYXRpb25UaW1lID09PSBOb1dvcmsgfHwgX2NoaWxkQ2hpbGRFeHBpcmF0aW9uVGltZSAhPT0gTm9Xb3JrICYmIF9jaGlsZENoaWxkRXhwaXJhdGlvblRpbWUgPCBuZXdDaGlsZEV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgIG5ld0NoaWxkRXhwaXJhdGlvblRpbWUgPSBfY2hpbGRDaGlsZEV4cGlyYXRpb25UaW1lO1xuICAgICAgfVxuICAgICAgX2NoaWxkID0gX2NoaWxkLnNpYmxpbmc7XG4gICAgfVxuICB9XG5cbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGRFeHBpcmF0aW9uVGltZSA9IG5ld0NoaWxkRXhwaXJhdGlvblRpbWU7XG59XG5cbmZ1bmN0aW9uIGNvbXBsZXRlVW5pdE9mV29yayh3b3JrSW5Qcm9ncmVzcykge1xuICAvLyBBdHRlbXB0IHRvIGNvbXBsZXRlIHRoZSBjdXJyZW50IHVuaXQgb2Ygd29yaywgdGhlbiBtb3ZlIHRvIHRoZVxuICAvLyBuZXh0IHNpYmxpbmcuIElmIHRoZXJlIGFyZSBubyBtb3JlIHNpYmxpbmdzLCByZXR1cm4gdG8gdGhlXG4gIC8vIHBhcmVudCBmaWJlci5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICAvLyBUaGUgY3VycmVudCwgZmx1c2hlZCwgc3RhdGUgb2YgdGhpcyBmaWJlciBpcyB0aGUgYWx0ZXJuYXRlLlxuICAgIC8vIElkZWFsbHkgbm90aGluZyBzaG91bGQgcmVseSBvbiB0aGlzLCBidXQgcmVseWluZyBvbiBpdCBoZXJlXG4gICAgLy8gbWVhbnMgdGhhdCB3ZSBkb24ndCBuZWVkIGFuIGFkZGl0aW9uYWwgZmllbGQgb24gdGhlIHdvcmsgaW5cbiAgICAvLyBwcm9ncmVzcy5cbiAgICB2YXIgY3VycmVudCQkMSA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZTtcbiAgICB7XG4gICAgICBzZXRDdXJyZW50RmliZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIHZhciByZXR1cm5GaWJlciA9IHdvcmtJblByb2dyZXNzLnJldHVybjtcbiAgICB2YXIgc2libGluZ0ZpYmVyID0gd29ya0luUHJvZ3Jlc3Muc2libGluZztcblxuICAgIGlmICgod29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnICYgSW5jb21wbGV0ZSkgPT09IE5vRWZmZWN0KSB7XG4gICAgICAvLyBUaGlzIGZpYmVyIGNvbXBsZXRlZC5cbiAgICAgIGlmIChlbmFibGVQcm9maWxlclRpbWVyKSB7XG4gICAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgUHJvZmlsZU1vZGUpIHtcbiAgICAgICAgICBzdGFydFByb2ZpbGVyVGltZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dFVuaXRPZldvcmsgPSBjb21wbGV0ZVdvcmsoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSk7XG5cbiAgICAgICAgaWYgKHdvcmtJblByb2dyZXNzLm1vZGUgJiBQcm9maWxlTW9kZSkge1xuICAgICAgICAgIC8vIFVwZGF0ZSByZW5kZXIgZHVyYXRpb24gYXNzdW1pbmcgd2UgZGlkbid0IGVycm9yLlxuICAgICAgICAgIHN0b3BQcm9maWxlclRpbWVySWZSdW5uaW5nQW5kUmVjb3JkRGVsdGEod29ya0luUHJvZ3Jlc3MsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dFVuaXRPZldvcmsgPSBjb21wbGV0ZVdvcmsoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICB9XG4gICAgICBzdG9wV29ya1RpbWVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJlc2V0Q2hpbGRFeHBpcmF0aW9uVGltZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIHtcbiAgICAgICAgcmVzZXRDdXJyZW50RmliZXIoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJldHVybkZpYmVyICE9PSBudWxsICYmXG4gICAgICAvLyBEbyBub3QgYXBwZW5kIGVmZmVjdHMgdG8gcGFyZW50cyBpZiBhIHNpYmxpbmcgZmFpbGVkIHRvIGNvbXBsZXRlXG4gICAgICAocmV0dXJuRmliZXIuZWZmZWN0VGFnICYgSW5jb21wbGV0ZSkgPT09IE5vRWZmZWN0KSB7XG4gICAgICAgIC8vIEFwcGVuZCBhbGwgdGhlIGVmZmVjdHMgb2YgdGhlIHN1YnRyZWUgYW5kIHRoaXMgZmliZXIgb250byB0aGUgZWZmZWN0XG4gICAgICAgIC8vIGxpc3Qgb2YgdGhlIHBhcmVudC4gVGhlIGNvbXBsZXRpb24gb3JkZXIgb2YgdGhlIGNoaWxkcmVuIGFmZmVjdHMgdGhlXG4gICAgICAgIC8vIHNpZGUtZWZmZWN0IG9yZGVyLlxuICAgICAgICBpZiAocmV0dXJuRmliZXIuZmlyc3RFZmZlY3QgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm5GaWJlci5maXJzdEVmZmVjdCA9IHdvcmtJblByb2dyZXNzLmZpcnN0RWZmZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5sYXN0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKHJldHVybkZpYmVyLmxhc3RFZmZlY3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybkZpYmVyLmxhc3RFZmZlY3QubmV4dEVmZmVjdCA9IHdvcmtJblByb2dyZXNzLmZpcnN0RWZmZWN0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm5GaWJlci5sYXN0RWZmZWN0ID0gd29ya0luUHJvZ3Jlc3MubGFzdEVmZmVjdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoaXMgZmliZXIgaGFkIHNpZGUtZWZmZWN0cywgd2UgYXBwZW5kIGl0IEFGVEVSIHRoZSBjaGlsZHJlbidzXG4gICAgICAgIC8vIHNpZGUtZWZmZWN0cy4gV2UgY2FuIHBlcmZvcm0gY2VydGFpbiBzaWRlLWVmZmVjdHMgZWFybGllciBpZlxuICAgICAgICAvLyBuZWVkZWQsIGJ5IGRvaW5nIG11bHRpcGxlIHBhc3NlcyBvdmVyIHRoZSBlZmZlY3QgbGlzdC4gV2UgZG9uJ3Qgd2FudFxuICAgICAgICAvLyB0byBzY2hlZHVsZSBvdXIgb3duIHNpZGUtZWZmZWN0IG9uIG91ciBvd24gbGlzdCBiZWNhdXNlIGlmIGVuZCB1cFxuICAgICAgICAvLyByZXVzaW5nIGNoaWxkcmVuIHdlJ2xsIHNjaGVkdWxlIHRoaXMgZWZmZWN0IG9udG8gaXRzZWxmIHNpbmNlIHdlJ3JlXG4gICAgICAgIC8vIGF0IHRoZSBlbmQuXG4gICAgICAgIHZhciBlZmZlY3RUYWcgPSB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWc7XG4gICAgICAgIC8vIFNraXAgYm90aCBOb1dvcmsgYW5kIFBlcmZvcm1lZFdvcmsgdGFncyB3aGVuIGNyZWF0aW5nIHRoZSBlZmZlY3QgbGlzdC5cbiAgICAgICAgLy8gUGVyZm9ybWVkV29yayBlZmZlY3QgaXMgcmVhZCBieSBSZWFjdCBEZXZUb29scyBidXQgc2hvdWxkbid0IGJlIGNvbW1pdHRlZC5cbiAgICAgICAgaWYgKGVmZmVjdFRhZyA+IFBlcmZvcm1lZFdvcmspIHtcbiAgICAgICAgICBpZiAocmV0dXJuRmliZXIubGFzdEVmZmVjdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuRmliZXIubGFzdEVmZmVjdC5uZXh0RWZmZWN0ID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybkZpYmVyLmZpcnN0RWZmZWN0ID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHJ1ZSAmJiBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sKSB7XG4gICAgICAgIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wub25Db21wbGV0ZVdvcmsod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2libGluZ0ZpYmVyICE9PSBudWxsKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIG1vcmUgd29yayB0byBkbyBpbiB0aGlzIHJldHVybkZpYmVyLCBkbyB0aGF0IG5leHQuXG4gICAgICAgIHJldHVybiBzaWJsaW5nRmliZXI7XG4gICAgICB9IGVsc2UgaWYgKHJldHVybkZpYmVyICE9PSBudWxsKSB7XG4gICAgICAgIC8vIElmIHRoZXJlJ3Mgbm8gbW9yZSB3b3JrIGluIHRoaXMgcmV0dXJuRmliZXIuIENvbXBsZXRlIHRoZSByZXR1cm5GaWJlci5cbiAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSByZXR1cm5GaWJlcjtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSd2ZSByZWFjaGVkIHRoZSByb290LlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHdvcmtJblByb2dyZXNzLm1vZGUgJiBQcm9maWxlTW9kZSkge1xuICAgICAgICAvLyBSZWNvcmQgdGhlIHJlbmRlciBkdXJhdGlvbiBmb3IgdGhlIGZpYmVyIHRoYXQgZXJyb3JlZC5cbiAgICAgICAgc3RvcFByb2ZpbGVyVGltZXJJZlJ1bm5pbmdBbmRSZWNvcmREZWx0YSh3b3JrSW5Qcm9ncmVzcywgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGlzIGZpYmVyIGRpZCBub3QgY29tcGxldGUgYmVjYXVzZSBzb21ldGhpbmcgdGhyZXcuIFBvcCB2YWx1ZXMgb2ZmXG4gICAgICAvLyB0aGUgc3RhY2sgd2l0aG91dCBlbnRlcmluZyB0aGUgY29tcGxldGUgcGhhc2UuIElmIHRoaXMgaXMgYSBib3VuZGFyeSxcbiAgICAgIC8vIGNhcHR1cmUgdmFsdWVzIGlmIHBvc3NpYmxlLlxuICAgICAgdmFyIG5leHQgPSB1bndpbmRXb3JrKHdvcmtJblByb2dyZXNzLCBuZXh0UmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgLy8gQmVjYXVzZSB0aGlzIGZpYmVyIGRpZCBub3QgY29tcGxldGUsIGRvbid0IHJlc2V0IGl0cyBleHBpcmF0aW9uIHRpbWUuXG4gICAgICBpZiAod29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnICYgRGlkQ2FwdHVyZSkge1xuICAgICAgICAvLyBSZXN0YXJ0aW5nIGFuIGVycm9yIGJvdW5kYXJ5XG4gICAgICAgIHN0b3BGYWlsZWRXb3JrVGltZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RvcFdvcmtUaW1lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICB9XG5cbiAgICAgIHtcbiAgICAgICAgcmVzZXRDdXJyZW50RmliZXIoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHQgIT09IG51bGwpIHtcbiAgICAgICAgc3RvcFdvcmtUaW1lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIGlmICh0cnVlICYmIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wpIHtcbiAgICAgICAgICBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sLm9uQ29tcGxldGVXb3JrKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmFibGVQcm9maWxlclRpbWVyKSB7XG4gICAgICAgICAgLy8gSW5jbHVkZSB0aGUgdGltZSBzcGVudCB3b3JraW5nIG9uIGZhaWxlZCBjaGlsZHJlbiBiZWZvcmUgY29udGludWluZy5cbiAgICAgICAgICBpZiAobmV4dC5tb2RlICYgUHJvZmlsZU1vZGUpIHtcbiAgICAgICAgICAgIHZhciBhY3R1YWxEdXJhdGlvbiA9IG5leHQuYWN0dWFsRHVyYXRpb247XG4gICAgICAgICAgICB2YXIgY2hpbGQgPSBuZXh0LmNoaWxkO1xuICAgICAgICAgICAgd2hpbGUgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGFjdHVhbER1cmF0aW9uICs9IGNoaWxkLmFjdHVhbER1cmF0aW9uO1xuICAgICAgICAgICAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0LmFjdHVhbER1cmF0aW9uID0gYWN0dWFsRHVyYXRpb247XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgY29tcGxldGluZyB0aGlzIHdvcmsgc3Bhd25lZCBuZXcgd29yaywgZG8gdGhhdCBuZXh0LiBXZSdsbCBjb21lXG4gICAgICAgIC8vIGJhY2sgaGVyZSBhZ2Fpbi5cbiAgICAgICAgLy8gU2luY2Ugd2UncmUgcmVzdGFydGluZywgcmVtb3ZlIGFueXRoaW5nIHRoYXQgaXMgbm90IGEgaG9zdCBlZmZlY3RcbiAgICAgICAgLy8gZnJvbSB0aGUgZWZmZWN0IHRhZy5cbiAgICAgICAgbmV4dC5lZmZlY3RUYWcgJj0gSG9zdEVmZmVjdE1hc2s7XG4gICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgfVxuXG4gICAgICBpZiAocmV0dXJuRmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgLy8gTWFyayB0aGUgcGFyZW50IGZpYmVyIGFzIGluY29tcGxldGUgYW5kIGNsZWFyIGl0cyBlZmZlY3QgbGlzdC5cbiAgICAgICAgcmV0dXJuRmliZXIuZmlyc3RFZmZlY3QgPSByZXR1cm5GaWJlci5sYXN0RWZmZWN0ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuRmliZXIuZWZmZWN0VGFnIHw9IEluY29tcGxldGU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cnVlICYmIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wpIHtcbiAgICAgICAgUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbC5vbkNvbXBsZXRlV29yayh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaWJsaW5nRmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbW9yZSB3b3JrIHRvIGRvIGluIHRoaXMgcmV0dXJuRmliZXIsIGRvIHRoYXQgbmV4dC5cbiAgICAgICAgcmV0dXJuIHNpYmxpbmdGaWJlcjtcbiAgICAgIH0gZWxzZSBpZiAocmV0dXJuRmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgLy8gSWYgdGhlcmUncyBubyBtb3JlIHdvcmsgaW4gdGhpcyByZXR1cm5GaWJlci4gQ29tcGxldGUgdGhlIHJldHVybkZpYmVyLlxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHJldHVybkZpYmVyO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFdpdGhvdXQgdGhpcyBleHBsaWNpdCBudWxsIHJldHVybiBGbG93IGNvbXBsYWlucyBvZiBpbnZhbGlkIHJldHVybiB0eXBlXG4gIC8vIFRPRE8gUmVtb3ZlIHRoZSBhYm92ZSB3aGlsZSh0cnVlKSBsb29wXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnJlYWNoYWJsZVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gcGVyZm9ybVVuaXRPZldvcmsod29ya0luUHJvZ3Jlc3MpIHtcbiAgLy8gVGhlIGN1cnJlbnQsIGZsdXNoZWQsIHN0YXRlIG9mIHRoaXMgZmliZXIgaXMgdGhlIGFsdGVybmF0ZS5cbiAgLy8gSWRlYWxseSBub3RoaW5nIHNob3VsZCByZWx5IG9uIHRoaXMsIGJ1dCByZWx5aW5nIG9uIGl0IGhlcmVcbiAgLy8gbWVhbnMgdGhhdCB3ZSBkb24ndCBuZWVkIGFuIGFkZGl0aW9uYWwgZmllbGQgb24gdGhlIHdvcmsgaW5cbiAgLy8gcHJvZ3Jlc3MuXG4gIHZhciBjdXJyZW50JCQxID0gd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlO1xuXG4gIC8vIFNlZSBpZiBiZWdpbm5pbmcgdGhpcyB3b3JrIHNwYXducyBtb3JlIHdvcmsuXG4gIHN0YXJ0V29ya1RpbWVyKHdvcmtJblByb2dyZXNzKTtcbiAge1xuICAgIHNldEN1cnJlbnRGaWJlcih3b3JrSW5Qcm9ncmVzcyk7XG4gIH1cblxuICBpZiAodHJ1ZSAmJiByZXBsYXlGYWlsZWRVbml0T2ZXb3JrV2l0aEludm9rZUd1YXJkZWRDYWxsYmFjaykge1xuICAgIHN0YXNoZWRXb3JrSW5Qcm9ncmVzc1Byb3BlcnRpZXMgPSBhc3NpZ25GaWJlclByb3BlcnRpZXNJbkRFVihzdGFzaGVkV29ya0luUHJvZ3Jlc3NQcm9wZXJ0aWVzLCB3b3JrSW5Qcm9ncmVzcyk7XG4gIH1cblxuICB2YXIgbmV4dCA9IHZvaWQgMDtcbiAgaWYgKGVuYWJsZVByb2ZpbGVyVGltZXIpIHtcbiAgICBpZiAod29ya0luUHJvZ3Jlc3MubW9kZSAmIFByb2ZpbGVNb2RlKSB7XG4gICAgICBzdGFydFByb2ZpbGVyVGltZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIG5leHQgPSBiZWdpbldvcmsoY3VycmVudCQkMSwgd29ya0luUHJvZ3Jlc3MsIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcblxuICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgUHJvZmlsZU1vZGUpIHtcbiAgICAgIC8vIFJlY29yZCB0aGUgcmVuZGVyIGR1cmF0aW9uIGFzc3VtaW5nIHdlIGRpZG4ndCBiYWlsb3V0IChvciBlcnJvcikuXG4gICAgICBzdG9wUHJvZmlsZXJUaW1lcklmUnVubmluZ0FuZFJlY29yZERlbHRhKHdvcmtJblByb2dyZXNzLCB0cnVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbmV4dCA9IGJlZ2luV29yayhjdXJyZW50JCQxLCB3b3JrSW5Qcm9ncmVzcywgbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICB9XG5cbiAge1xuICAgIHJlc2V0Q3VycmVudEZpYmVyKCk7XG4gICAgaWYgKGlzUmVwbGF5aW5nRmFpbGVkVW5pdE9mV29yaykge1xuICAgICAgLy8gQ3VycmVudGx5IHJlcGxheWluZyBhIGZhaWxlZCB1bml0IG9mIHdvcmsuIFRoaXMgc2hvdWxkIGJlIHVucmVhY2hhYmxlLFxuICAgICAgLy8gYmVjYXVzZSB0aGUgcmVuZGVyIHBoYXNlIGlzIG1lYW50IHRvIGJlIGlkZW1wb3RlbnQsIGFuZCBpdCBzaG91bGRcbiAgICAgIC8vIGhhdmUgdGhyb3duIGFnYWluLiBTaW5jZSBpdCBkaWRuJ3QsIHJldGhyb3cgdGhlIG9yaWdpbmFsIGVycm9yLCBzb1xuICAgICAgLy8gUmVhY3QncyBpbnRlcm5hbCBzdGFjayBpcyBub3QgbWlzYWxpZ25lZC5cbiAgICAgIHJldGhyb3dPcmlnaW5hbEVycm9yKCk7XG4gICAgfVxuICB9XG4gIGlmICh0cnVlICYmIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wpIHtcbiAgICBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sLm9uQmVnaW5Xb3JrKHdvcmtJblByb2dyZXNzKTtcbiAgfVxuXG4gIGlmIChuZXh0ID09PSBudWxsKSB7XG4gICAgLy8gSWYgdGhpcyBkb2Vzbid0IHNwYXduIG5ldyB3b3JrLCBjb21wbGV0ZSB0aGUgY3VycmVudCB3b3JrLlxuICAgIG5leHQgPSBjb21wbGV0ZVVuaXRPZldvcmsod29ya0luUHJvZ3Jlc3MpO1xuICB9XG5cbiAgUmVhY3RDdXJyZW50T3duZXIkMi5jdXJyZW50ID0gbnVsbDtcblxuICByZXR1cm4gbmV4dDtcbn1cblxuZnVuY3Rpb24gd29ya0xvb3AoaXNZaWVsZHkpIHtcbiAgaWYgKCFpc1lpZWxkeSkge1xuICAgIC8vIEZsdXNoIHdvcmsgd2l0aG91dCB5aWVsZGluZ1xuICAgIHdoaWxlIChuZXh0VW5pdE9mV29yayAhPT0gbnVsbCkge1xuICAgICAgbmV4dFVuaXRPZldvcmsgPSBwZXJmb3JtVW5pdE9mV29yayhuZXh0VW5pdE9mV29yayk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEZsdXNoIGFzeW5jaHJvbm91cyB3b3JrIHVudGlsIHRoZSBkZWFkbGluZSBydW5zIG91dCBvZiB0aW1lLlxuICAgIHdoaWxlIChuZXh0VW5pdE9mV29yayAhPT0gbnVsbCAmJiAhc2hvdWxkWWllbGQoKSkge1xuICAgICAgbmV4dFVuaXRPZldvcmsgPSBwZXJmb3JtVW5pdE9mV29yayhuZXh0VW5pdE9mV29yayk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlclJvb3Qocm9vdCwgaXNZaWVsZHksIGlzRXhwaXJlZCkge1xuICAhIWlzV29ya2luZyA/IGludmFyaWFudChmYWxzZSwgJ3JlbmRlclJvb3Qgd2FzIGNhbGxlZCByZWN1cnNpdmVseS4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgaXNXb3JraW5nID0gdHJ1ZTtcbiAgUmVhY3RDdXJyZW50T3duZXIkMi5jdXJyZW50RGlzcGF0Y2hlciA9IERpc3BhdGNoZXI7XG5cbiAgdmFyIGV4cGlyYXRpb25UaW1lID0gcm9vdC5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbjtcblxuICAvLyBDaGVjayBpZiB3ZSdyZSBzdGFydGluZyBmcm9tIGEgZnJlc2ggc3RhY2ssIG9yIGlmIHdlJ3JlIHJlc3VtaW5nIGZyb21cbiAgLy8gcHJldmlvdXNseSB5aWVsZGVkIHdvcmsuXG4gIGlmIChleHBpcmF0aW9uVGltZSAhPT0gbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lIHx8IHJvb3QgIT09IG5leHRSb290IHx8IG5leHRVbml0T2ZXb3JrID09PSBudWxsKSB7XG4gICAgLy8gUmVzZXQgdGhlIHN0YWNrIGFuZCBzdGFydCB3b3JraW5nIGZyb20gdGhlIHJvb3QuXG4gICAgcmVzZXRTdGFjaygpO1xuICAgIG5leHRSb290ID0gcm9vdDtcbiAgICBuZXh0UmVuZGVyRXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgICBuZXh0VW5pdE9mV29yayA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKG5leHRSb290LmN1cnJlbnQsIG51bGwsIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgcm9vdC5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG5cbiAgICBpZiAoZW5hYmxlU2NoZWR1bGVyVHJhY2luZykge1xuICAgICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGludGVyYWN0aW9ucyB0aGlzIGJhdGNoIG9mIHdvcmsgY3VycmVudGx5IGluY2x1ZGVzLFxuICAgICAgLy8gU28gdGhhdCB3ZSBjYW4gYWNjdXJhdGVseSBhdHRyaWJ1dGUgdGltZSBzcGVudCB3b3JraW5nIG9uIGl0LFxuICAgICAgdmFyIGludGVyYWN0aW9ucyA9IG5ldyBTZXQoKTtcbiAgICAgIHJvb3QucGVuZGluZ0ludGVyYWN0aW9uTWFwLmZvckVhY2goZnVuY3Rpb24gKHNjaGVkdWxlZEludGVyYWN0aW9ucywgc2NoZWR1bGVkRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgaWYgKHNjaGVkdWxlZEV4cGlyYXRpb25UaW1lIDw9IGV4cGlyYXRpb25UaW1lKSB7XG4gICAgICAgICAgc2NoZWR1bGVkSW50ZXJhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGludGVyYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJhY3Rpb25zLmFkZChpbnRlcmFjdGlvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBTdG9yZSB0aGUgY3VycmVudCBzZXQgb2YgaW50ZXJhY3Rpb25zIG9uIHRoZSBGaWJlclJvb3QgZm9yIGEgZmV3IHJlYXNvbnM6XG4gICAgICAvLyBXZSBjYW4gcmUtdXNlIGl0IGluIGhvdCBmdW5jdGlvbnMgbGlrZSByZW5kZXJSb290KCkgd2l0aG91dCBoYXZpbmcgdG8gcmVjYWxjdWxhdGUgaXQuXG4gICAgICAvLyBXZSB3aWxsIGFsc28gdXNlIGl0IGluIGNvbW1pdFdvcmsoKSB0byBwYXNzIHRvIGFueSBQcm9maWxlciBvblJlbmRlcigpIGhvb2tzLlxuICAgICAgLy8gVGhpcyBhbHNvIHByb3ZpZGVzIERldlRvb2xzIHdpdGggYSB3YXkgdG8gYWNjZXNzIGl0IHdoZW4gdGhlIG9uQ29tbWl0Um9vdCgpIGhvb2sgaXMgY2FsbGVkLlxuICAgICAgcm9vdC5tZW1vaXplZEludGVyYWN0aW9ucyA9IGludGVyYWN0aW9ucztcblxuICAgICAgaWYgKGludGVyYWN0aW9ucy5zaXplID4gMCkge1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IHRyYWNpbmcuX19zdWJzY3JpYmVyUmVmLmN1cnJlbnQ7XG4gICAgICAgIGlmIChzdWJzY3JpYmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIHRocmVhZElEID0gY29tcHV0ZVRocmVhZElEKGV4cGlyYXRpb25UaW1lLCByb290LmludGVyYWN0aW9uVGhyZWFkSUQpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm9uV29ya1N0YXJ0ZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIFdvcmsgdGhyb3duIGJ5IGFuIGludGVyYWN0aW9uIHRyYWNpbmcgc3Vic2NyaWJlciBzaG91bGQgYmUgcmV0aHJvd24sXG4gICAgICAgICAgICAvLyBCdXQgb25seSBvbmNlIGl0J3Mgc2FmZSAodG8gYXZvaWQgbGVhdmVpbmcgdGhlIHNjaGVkdWxlciBpbiBhbiBpbnZhbGlkIHN0YXRlKS5cbiAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBlcnJvciBmb3Igbm93IGFuZCB3ZSdsbCByZS10aHJvdyBpbiBmaW5pc2hSZW5kZXJpbmcoKS5cbiAgICAgICAgICAgIGlmICghaGFzVW5oYW5kbGVkRXJyb3IpIHtcbiAgICAgICAgICAgICAgaGFzVW5oYW5kbGVkRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICB1bmhhbmRsZWRFcnJvciA9IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBwcmV2SW50ZXJhY3Rpb25zID0gbnVsbDtcbiAgaWYgKGVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICAvLyBXZSdyZSBhYm91dCB0byBzdGFydCBuZXcgdHJhY2VkIHdvcmsuXG4gICAgLy8gUmVzdG9yZSBwZW5kaW5nIGludGVyYWN0aW9ucyBzbyBjYXNjYWRpbmcgd29yayB0cmlnZ2VyZWQgZHVyaW5nIHRoZSByZW5kZXIgcGhhc2Ugd2lsbCBiZSBhY2NvdW50ZWQgZm9yLlxuICAgIHByZXZJbnRlcmFjdGlvbnMgPSB0cmFjaW5nLl9faW50ZXJhY3Rpb25zUmVmLmN1cnJlbnQ7XG4gICAgdHJhY2luZy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50ID0gcm9vdC5tZW1vaXplZEludGVyYWN0aW9ucztcbiAgfVxuXG4gIHZhciBkaWRGYXRhbCA9IGZhbHNlO1xuXG4gIHN0YXJ0V29ya0xvb3BUaW1lcihuZXh0VW5pdE9mV29yayk7XG5cbiAgZG8ge1xuICAgIHRyeSB7XG4gICAgICB3b3JrTG9vcChpc1lpZWxkeSk7XG4gICAgfSBjYXRjaCAodGhyb3duVmFsdWUpIHtcbiAgICAgIGlmIChuZXh0VW5pdE9mV29yayA9PT0gbnVsbCkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgZmF0YWwgZXJyb3IuXG4gICAgICAgIGRpZEZhdGFsID0gdHJ1ZTtcbiAgICAgICAgb25VbmNhdWdodEVycm9yKHRocm93blZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBSZXNldCBnbG9iYWwgZGVidWcgc3RhdGVcbiAgICAgICAgICAvLyBXZSBhc3N1bWUgdGhpcyBpcyBkZWZpbmVkIGluIERFVlxuICAgICAgICAgIHJlc2V0Q3VycmVudGx5UHJvY2Vzc2luZ1F1ZXVlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmFpbGVkVW5pdE9mV29yayA9IG5leHRVbml0T2ZXb3JrO1xuICAgICAgICBpZiAodHJ1ZSAmJiByZXBsYXlGYWlsZWRVbml0T2ZXb3JrV2l0aEludm9rZUd1YXJkZWRDYWxsYmFjaykge1xuICAgICAgICAgIHJlcGxheVVuaXRPZldvcmsoZmFpbGVkVW5pdE9mV29yaywgdGhyb3duVmFsdWUsIGlzWWllbGR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE86IHdlIGFscmVhZHkga25vdyB0aGlzIGlzbid0IHRydWUgaW4gc29tZSBjYXNlcy5cbiAgICAgICAgLy8gQXQgbGVhc3QgdGhpcyBzaG93cyBhIG5pY2VyIGVycm9yIG1lc3NhZ2UgdW50aWwgd2UgZmlndXJlIG91dCB0aGUgY2F1c2UuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTI0NDkjaXNzdWVjb21tZW50LTM4NjcyNzQzMVxuICAgICAgICAhKG5leHRVbml0T2ZXb3JrICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ0ZhaWxlZCB0byByZXBsYXkgcmVuZGVyaW5nIGFmdGVyIGFuIGVycm9yLiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlIHdpdGggYSByZXByb2R1Y2luZyBjYXNlIHRvIGhlbHAgdXMgZmluZCBpdC4nKSA6IHZvaWQgMDtcblxuICAgICAgICB2YXIgc291cmNlRmliZXIgPSBuZXh0VW5pdE9mV29yaztcbiAgICAgICAgdmFyIHJldHVybkZpYmVyID0gc291cmNlRmliZXIucmV0dXJuO1xuICAgICAgICBpZiAocmV0dXJuRmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIHRoZSByb290LiBUaGUgcm9vdCBjb3VsZCBjYXB0dXJlIGl0cyBvd24gZXJyb3JzLiBIb3dldmVyLFxuICAgICAgICAgIC8vIHdlIGRvbid0IGtub3cgaWYgaXQgZXJyb3JzIGJlZm9yZSBvciBhZnRlciB3ZSBwdXNoZWQgdGhlIGhvc3RcbiAgICAgICAgICAvLyBjb250ZXh0LiBUaGlzIGluZm9ybWF0aW9uIGlzIG5lZWRlZCB0byBhdm9pZCBhIHN0YWNrIG1pc21hdGNoLlxuICAgICAgICAgIC8vIEJlY2F1c2Ugd2UncmUgbm90IHN1cmUsIHRyZWF0IHRoaXMgYXMgYSBmYXRhbCBlcnJvci4gV2UgY291bGQgdHJhY2tcbiAgICAgICAgICAvLyB3aGljaCBwaGFzZSBpdCBmYWlscyBpbiwgYnV0IGRvZXNuJ3Qgc2VlbSB3b3J0aCBpdC4gQXQgbGVhc3RcbiAgICAgICAgICAvLyBmb3Igbm93LlxuICAgICAgICAgIGRpZEZhdGFsID0gdHJ1ZTtcbiAgICAgICAgICBvblVuY2F1Z2h0RXJyb3IodGhyb3duVmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93RXhjZXB0aW9uKHJvb3QsIHJldHVybkZpYmVyLCBzb3VyY2VGaWJlciwgdGhyb3duVmFsdWUsIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgbmV4dFVuaXRPZldvcmsgPSBjb21wbGV0ZVVuaXRPZldvcmsoc291cmNlRmliZXIpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGJyZWFrO1xuICB9IHdoaWxlICh0cnVlKTtcblxuICBpZiAoZW5hYmxlU2NoZWR1bGVyVHJhY2luZykge1xuICAgIC8vIFRyYWNlZCB3b3JrIGlzIGRvbmUgZm9yIG5vdzsgcmVzdG9yZSB0aGUgcHJldmlvdXMgaW50ZXJhY3Rpb25zLlxuICAgIHRyYWNpbmcuX19pbnRlcmFjdGlvbnNSZWYuY3VycmVudCA9IHByZXZJbnRlcmFjdGlvbnM7XG4gIH1cblxuICAvLyBXZSdyZSBkb25lIHBlcmZvcm1pbmcgd29yay4gVGltZSB0byBjbGVhbiB1cC5cbiAgaXNXb3JraW5nID0gZmFsc2U7XG4gIFJlYWN0Q3VycmVudE93bmVyJDIuY3VycmVudERpc3BhdGNoZXIgPSBudWxsO1xuICByZXNldENvbnRleHREZXBlbmRlbmNlcygpO1xuXG4gIC8vIFlpZWxkIGJhY2sgdG8gbWFpbiB0aHJlYWQuXG4gIGlmIChkaWRGYXRhbCkge1xuICAgIHZhciBfZGlkQ29tcGxldGVSb290ID0gZmFsc2U7XG4gICAgc3RvcFdvcmtMb29wVGltZXIoaW50ZXJydXB0ZWRCeSwgX2RpZENvbXBsZXRlUm9vdCk7XG4gICAgaW50ZXJydXB0ZWRCeSA9IG51bGw7XG4gICAgLy8gVGhlcmUgd2FzIGEgZmF0YWwgZXJyb3IuXG4gICAge1xuICAgICAgcmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2KCk7XG4gICAgfVxuICAgIC8vIGBuZXh0Um9vdGAgcG9pbnRzIHRvIHRoZSBpbi1wcm9ncmVzcyByb290LiBBIG5vbi1udWxsIHZhbHVlIGluZGljYXRlc1xuICAgIC8vIHRoYXQgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhbiBhc3luYyByZW5kZXIuIFNldCBpdCB0byBudWxsIHRvIGluZGljYXRlXG4gICAgLy8gdGhlcmUncyBubyBtb3JlIHdvcmsgdG8gYmUgZG9uZSBpbiB0aGUgY3VycmVudCBiYXRjaC5cbiAgICBuZXh0Um9vdCA9IG51bGw7XG4gICAgb25GYXRhbChyb290KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAobmV4dFVuaXRPZldvcmsgIT09IG51bGwpIHtcbiAgICAvLyBUaGVyZSdzIHN0aWxsIHJlbWFpbmluZyBhc3luYyB3b3JrIGluIHRoaXMgdHJlZSwgYnV0IHdlIHJhbiBvdXQgb2YgdGltZVxuICAgIC8vIGluIHRoZSBjdXJyZW50IGZyYW1lLiBZaWVsZCBiYWNrIHRvIHRoZSByZW5kZXJlci4gVW5sZXNzIHdlJ3JlXG4gICAgLy8gaW50ZXJydXB0ZWQgYnkgYSBoaWdoZXIgcHJpb3JpdHkgdXBkYXRlLCB3ZSdsbCBjb250aW51ZSBsYXRlciBmcm9tIHdoZXJlXG4gICAgLy8gd2UgbGVmdCBvZmYuXG4gICAgdmFyIF9kaWRDb21wbGV0ZVJvb3QyID0gZmFsc2U7XG4gICAgc3RvcFdvcmtMb29wVGltZXIoaW50ZXJydXB0ZWRCeSwgX2RpZENvbXBsZXRlUm9vdDIpO1xuICAgIGludGVycnVwdGVkQnkgPSBudWxsO1xuICAgIG9uWWllbGQocm9vdCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gV2UgY29tcGxldGVkIHRoZSB3aG9sZSB0cmVlLlxuICB2YXIgZGlkQ29tcGxldGVSb290ID0gdHJ1ZTtcbiAgc3RvcFdvcmtMb29wVGltZXIoaW50ZXJydXB0ZWRCeSwgZGlkQ29tcGxldGVSb290KTtcbiAgdmFyIHJvb3RXb3JrSW5Qcm9ncmVzcyA9IHJvb3QuY3VycmVudC5hbHRlcm5hdGU7XG4gICEocm9vdFdvcmtJblByb2dyZXNzICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ0ZpbmlzaGVkIHJvb3Qgc2hvdWxkIGhhdmUgYSB3b3JrLWluLXByb2dyZXNzLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpIDogdm9pZCAwO1xuXG4gIC8vIGBuZXh0Um9vdGAgcG9pbnRzIHRvIHRoZSBpbi1wcm9ncmVzcyByb290LiBBIG5vbi1udWxsIHZhbHVlIGluZGljYXRlc1xuICAvLyB0aGF0IHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYW4gYXN5bmMgcmVuZGVyLiBTZXQgaXQgdG8gbnVsbCB0byBpbmRpY2F0ZVxuICAvLyB0aGVyZSdzIG5vIG1vcmUgd29yayB0byBiZSBkb25lIGluIHRoZSBjdXJyZW50IGJhdGNoLlxuICBuZXh0Um9vdCA9IG51bGw7XG4gIGludGVycnVwdGVkQnkgPSBudWxsO1xuXG4gIGlmIChuZXh0UmVuZGVyRGlkRXJyb3IpIHtcbiAgICAvLyBUaGVyZSB3YXMgYW4gZXJyb3JcbiAgICBpZiAoaGFzTG93ZXJQcmlvcml0eVdvcmsocm9vdCwgZXhwaXJhdGlvblRpbWUpKSB7XG4gICAgICAvLyBUaGVyZSdzIGxvd2VyIHByaW9yaXR5IHdvcmsuIElmIHNvLCBpdCBtYXkgaGF2ZSB0aGUgZWZmZWN0IG9mIGZpeGluZ1xuICAgICAgLy8gdGhlIGV4Y2VwdGlvbiB0aGF0IHdhcyBqdXN0IHRocm93bi4gRXhpdCB3aXRob3V0IGNvbW1pdHRpbmcuIFRoaXMgaXNcbiAgICAgIC8vIHNpbWlsYXIgdG8gYSBzdXNwZW5kLCBidXQgd2l0aG91dCBhIHRpbWVvdXQgYmVjYXVzZSB3ZSdyZSBub3Qgd2FpdGluZ1xuICAgICAgLy8gZm9yIGEgcHJvbWlzZSB0byByZXNvbHZlLiBSZWFjdCB3aWxsIHJlc3RhcnQgYXQgdGhlIGxvd2VyXG4gICAgICAvLyBwcmlvcml0eSBsZXZlbC5cbiAgICAgIG1hcmtTdXNwZW5kZWRQcmlvcml0eUxldmVsKHJvb3QsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIHZhciBzdXNwZW5kZWRFeHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICAgICAgdmFyIHJvb3RFeHBpcmF0aW9uVGltZSA9IHJvb3QuZXhwaXJhdGlvblRpbWU7XG4gICAgICBvblN1c3BlbmQocm9vdCwgcm9vdFdvcmtJblByb2dyZXNzLCBzdXNwZW5kZWRFeHBpcmF0aW9uVGltZSwgcm9vdEV4cGlyYXRpb25UaW1lLCAtMSAvLyBJbmRpY2F0ZXMgbm8gdGltZW91dFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKFxuICAgIC8vIFRoZXJlJ3Mgbm8gbG93ZXIgcHJpb3JpdHkgd29yaywgYnV0IHdlJ3JlIHJlbmRlcmluZyBhc3luY2hyb25vdXNseS5cbiAgICAvLyBTeW5jaHJvbnNvdWx5IGF0dGVtcHQgdG8gcmVuZGVyIHRoZSBzYW1lIGxldmVsIG9uZSBtb3JlIHRpbWUuIFRoaXMgaXNcbiAgICAvLyBzaW1pbGFyIHRvIGEgc3VzcGVuZCwgYnV0IHdpdGhvdXQgYSB0aW1lb3V0IGJlY2F1c2Ugd2UncmUgbm90IHdhaXRpbmdcbiAgICAvLyBmb3IgYSBwcm9taXNlIHRvIHJlc29sdmUuXG4gICAgIXJvb3QuZGlkRXJyb3IgJiYgIWlzRXhwaXJlZCkge1xuICAgICAgcm9vdC5kaWRFcnJvciA9IHRydWU7XG4gICAgICB2YXIgX3N1c3BlbmRlZEV4cGlyYXRpb25UaW1lID0gcm9vdC5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbiA9IGV4cGlyYXRpb25UaW1lO1xuICAgICAgdmFyIF9yb290RXhwaXJhdGlvblRpbWUgPSByb290LmV4cGlyYXRpb25UaW1lID0gU3luYztcbiAgICAgIG9uU3VzcGVuZChyb290LCByb290V29ya0luUHJvZ3Jlc3MsIF9zdXNwZW5kZWRFeHBpcmF0aW9uVGltZSwgX3Jvb3RFeHBpcmF0aW9uVGltZSwgLTEgLy8gSW5kaWNhdGVzIG5vIHRpbWVvdXRcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKCFpc0V4cGlyZWQgJiYgbmV4dExhdGVzdEFic29sdXRlVGltZW91dE1zICE9PSAtMSkge1xuICAgIC8vIFRoZSB0cmVlIHdhcyBzdXNwZW5kZWQuXG4gICAgdmFyIF9zdXNwZW5kZWRFeHBpcmF0aW9uVGltZTIgPSBleHBpcmF0aW9uVGltZTtcbiAgICBtYXJrU3VzcGVuZGVkUHJpb3JpdHlMZXZlbChyb290LCBfc3VzcGVuZGVkRXhwaXJhdGlvblRpbWUyKTtcblxuICAgIC8vIEZpbmQgdGhlIGVhcmxpZXN0IHVuY29tbWl0dGVkIGV4cGlyYXRpb24gdGltZSBpbiB0aGUgdHJlZSwgaW5jbHVkaW5nXG4gICAgLy8gd29yayB0aGF0IGlzIHN1c3BlbmRlZC4gVGhlIHRpbWVvdXQgdGhyZXNob2xkIGNhbm5vdCBiZSBsb25nZXIgdGhhblxuICAgIC8vIHRoZSBvdmVyYWxsIGV4cGlyYXRpb24uXG4gICAgdmFyIGVhcmxpZXN0RXhwaXJhdGlvblRpbWUgPSBmaW5kRWFybGllc3RPdXRzdGFuZGluZ1ByaW9yaXR5TGV2ZWwocm9vdCwgZXhwaXJhdGlvblRpbWUpO1xuICAgIHZhciBlYXJsaWVzdEV4cGlyYXRpb25UaW1lTXMgPSBleHBpcmF0aW9uVGltZVRvTXMoZWFybGllc3RFeHBpcmF0aW9uVGltZSk7XG4gICAgaWYgKGVhcmxpZXN0RXhwaXJhdGlvblRpbWVNcyA8IG5leHRMYXRlc3RBYnNvbHV0ZVRpbWVvdXRNcykge1xuICAgICAgbmV4dExhdGVzdEFic29sdXRlVGltZW91dE1zID0gZWFybGllc3RFeHBpcmF0aW9uVGltZU1zO1xuICAgIH1cblxuICAgIC8vIFN1YnRyYWN0IHRoZSBjdXJyZW50IHRpbWUgZnJvbSB0aGUgYWJzb2x1dGUgdGltZW91dCB0byBnZXQgdGhlIG51bWJlclxuICAgIC8vIG9mIG1pbGxpc2Vjb25kcyB1bnRpbCB0aGUgdGltZW91dC4gSW4gb3RoZXIgd29yZHMsIGNvbnZlcnQgYW4gYWJzb2x1dGVcbiAgICAvLyB0aW1lc3RhbXAgdG8gYSByZWxhdGl2ZSB0aW1lLiBUaGlzIGlzIHRoZSB2YWx1ZSB0aGF0IGlzIHBhc3NlZFxuICAgIC8vIHRvIGBzZXRUaW1lb3V0YC5cbiAgICB2YXIgY3VycmVudFRpbWVNcyA9IGV4cGlyYXRpb25UaW1lVG9NcyhyZXF1ZXN0Q3VycmVudFRpbWUoKSk7XG4gICAgdmFyIG1zVW50aWxUaW1lb3V0ID0gbmV4dExhdGVzdEFic29sdXRlVGltZW91dE1zIC0gY3VycmVudFRpbWVNcztcbiAgICBtc1VudGlsVGltZW91dCA9IG1zVW50aWxUaW1lb3V0IDwgMCA/IDAgOiBtc1VudGlsVGltZW91dDtcblxuICAgIC8vIFRPRE86IEFjY291bnQgZm9yIHRoZSBKdXN0IE5vdGljZWFibGUgRGlmZmVyZW5jZVxuXG4gICAgdmFyIF9yb290RXhwaXJhdGlvblRpbWUyID0gcm9vdC5leHBpcmF0aW9uVGltZTtcbiAgICBvblN1c3BlbmQocm9vdCwgcm9vdFdvcmtJblByb2dyZXNzLCBfc3VzcGVuZGVkRXhwaXJhdGlvblRpbWUyLCBfcm9vdEV4cGlyYXRpb25UaW1lMiwgbXNVbnRpbFRpbWVvdXQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJlYWR5IHRvIGNvbW1pdC5cbiAgb25Db21wbGV0ZShyb290LCByb290V29ya0luUHJvZ3Jlc3MsIGV4cGlyYXRpb25UaW1lKTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2goc291cmNlRmliZXIsIHZhbHVlLCBleHBpcmF0aW9uVGltZSkge1xuICAhKCFpc1dvcmtpbmcgfHwgaXNDb21taXR0aW5nJDEpID8gaW52YXJpYW50KGZhbHNlLCAnZGlzcGF0Y2g6IENhbm5vdCBkaXNwYXRjaCBkdXJpbmcgdGhlIHJlbmRlciBwaGFzZS4nKSA6IHZvaWQgMDtcblxuICB2YXIgZmliZXIgPSBzb3VyY2VGaWJlci5yZXR1cm47XG4gIHdoaWxlIChmaWJlciAhPT0gbnVsbCkge1xuICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICB2YXIgY3RvciA9IGZpYmVyLnR5cGU7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgaWYgKHR5cGVvZiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkQ2F0Y2ggPT09ICdmdW5jdGlvbicgJiYgIWlzQWxyZWFkeUZhaWxlZExlZ2FjeUVycm9yQm91bmRhcnkoaW5zdGFuY2UpKSB7XG4gICAgICAgICAgdmFyIGVycm9ySW5mbyA9IGNyZWF0ZUNhcHR1cmVkVmFsdWUodmFsdWUsIHNvdXJjZUZpYmVyKTtcbiAgICAgICAgICB2YXIgdXBkYXRlID0gY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZShmaWJlciwgZXJyb3JJbmZvLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICAgICAgZW5xdWV1ZVVwZGF0ZShmaWJlciwgdXBkYXRlKTtcbiAgICAgICAgICBzY2hlZHVsZVdvcmsoZmliZXIsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIF9lcnJvckluZm8gPSBjcmVhdGVDYXB0dXJlZFZhbHVlKHZhbHVlLCBzb3VyY2VGaWJlcik7XG4gICAgICAgICAgdmFyIF91cGRhdGUgPSBjcmVhdGVSb290RXJyb3JVcGRhdGUoZmliZXIsIF9lcnJvckluZm8sIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICBlbnF1ZXVlVXBkYXRlKGZpYmVyLCBfdXBkYXRlKTtcbiAgICAgICAgICBzY2hlZHVsZVdvcmsoZmliZXIsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmliZXIgPSBmaWJlci5yZXR1cm47XG4gIH1cblxuICBpZiAoc291cmNlRmliZXIudGFnID09PSBIb3N0Um9vdCkge1xuICAgIC8vIEVycm9yIHdhcyB0aHJvd24gYXQgdGhlIHJvb3QuIFRoZXJlIGlzIG5vIHBhcmVudCwgc28gdGhlIHJvb3RcbiAgICAvLyBpdHNlbGYgc2hvdWxkIGNhcHR1cmUgaXQuXG4gICAgdmFyIHJvb3RGaWJlciA9IHNvdXJjZUZpYmVyO1xuICAgIHZhciBfZXJyb3JJbmZvMiA9IGNyZWF0ZUNhcHR1cmVkVmFsdWUodmFsdWUsIHJvb3RGaWJlcik7XG4gICAgdmFyIF91cGRhdGUyID0gY3JlYXRlUm9vdEVycm9yVXBkYXRlKHJvb3RGaWJlciwgX2Vycm9ySW5mbzIsIGV4cGlyYXRpb25UaW1lKTtcbiAgICBlbnF1ZXVlVXBkYXRlKHJvb3RGaWJlciwgX3VwZGF0ZTIpO1xuICAgIHNjaGVkdWxlV29yayhyb290RmliZXIsIGV4cGlyYXRpb25UaW1lKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaWJlciwgZXJyb3IpIHtcbiAgcmV0dXJuIGRpc3BhdGNoKGZpYmVyLCBlcnJvciwgU3luYyk7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVUaHJlYWRJRChleHBpcmF0aW9uVGltZSwgaW50ZXJhY3Rpb25UaHJlYWRJRCkge1xuICAvLyBJbnRlcmFjdGlvbiB0aHJlYWRzIGFyZSB1bmlxdWUgcGVyIHJvb3QgYW5kIGV4cGlyYXRpb24gdGltZS5cbiAgcmV0dXJuIGV4cGlyYXRpb25UaW1lICogMTAwMCArIGludGVyYWN0aW9uVGhyZWFkSUQ7XG59XG5cbi8vIENyZWF0ZXMgYSB1bmlxdWUgYXN5bmMgZXhwaXJhdGlvbiB0aW1lLlxuZnVuY3Rpb24gY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbigpIHtcbiAgdmFyIGN1cnJlbnRUaW1lID0gcmVxdWVzdEN1cnJlbnRUaW1lKCk7XG4gIHZhciByZXN1bHQgPSBjb21wdXRlQXN5bmNFeHBpcmF0aW9uKGN1cnJlbnRUaW1lKTtcbiAgaWYgKHJlc3VsdCA8PSBsYXN0VW5pcXVlQXN5bmNFeHBpcmF0aW9uKSB7XG4gICAgLy8gU2luY2Ugd2UgYXNzdW1lIHRoZSBjdXJyZW50IHRpbWUgbW9ub3RvbmljYWxseSBpbmNyZWFzZXMsIHdlIG9ubHkgaGl0XG4gICAgLy8gdGhpcyBicmFuY2ggd2hlbiBjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uIGlzIGZpcmVkIG11bHRpcGxlIHRpbWVzXG4gICAgLy8gd2l0aGluIGEgMjAwbXMgd2luZG93IChvciB3aGF0ZXZlciB0aGUgYXN5bmMgYnVja2V0IHNpemUgaXMpLlxuICAgIHJlc3VsdCA9IGxhc3RVbmlxdWVBc3luY0V4cGlyYXRpb24gKyAxO1xuICB9XG4gIGxhc3RVbmlxdWVBc3luY0V4cGlyYXRpb24gPSByZXN1bHQ7XG4gIHJldHVybiBsYXN0VW5pcXVlQXN5bmNFeHBpcmF0aW9uO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyKGN1cnJlbnRUaW1lLCBmaWJlcikge1xuICB2YXIgZXhwaXJhdGlvblRpbWUgPSB2b2lkIDA7XG4gIGlmIChleHBpcmF0aW9uQ29udGV4dCAhPT0gTm9Xb3JrKSB7XG4gICAgLy8gQW4gZXhwbGljaXQgZXhwaXJhdGlvbiBjb250ZXh0IHdhcyBzZXQ7XG4gICAgZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uQ29udGV4dDtcbiAgfSBlbHNlIGlmIChpc1dvcmtpbmcpIHtcbiAgICBpZiAoaXNDb21taXR0aW5nJDEpIHtcbiAgICAgIC8vIFVwZGF0ZXMgdGhhdCBvY2N1ciBkdXJpbmcgdGhlIGNvbW1pdCBwaGFzZSBzaG91bGQgaGF2ZSBzeW5jIHByaW9yaXR5XG4gICAgICAvLyBieSBkZWZhdWx0LlxuICAgICAgZXhwaXJhdGlvblRpbWUgPSBTeW5jO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVcGRhdGVzIGR1cmluZyB0aGUgcmVuZGVyIHBoYXNlIHNob3VsZCBleHBpcmUgYXQgdGhlIHNhbWUgdGltZSBhc1xuICAgICAgLy8gdGhlIHdvcmsgdGhhdCBpcyBiZWluZyByZW5kZXJlZC5cbiAgICAgIGV4cGlyYXRpb25UaW1lID0gbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBObyBleHBsaWNpdCBleHBpcmF0aW9uIGNvbnRleHQgd2FzIHNldCwgYW5kIHdlJ3JlIG5vdCBjdXJyZW50bHlcbiAgICAvLyBwZXJmb3JtaW5nIHdvcmsuIENhbGN1bGF0ZSBhIG5ldyBleHBpcmF0aW9uIHRpbWUuXG4gICAgaWYgKGZpYmVyLm1vZGUgJiBDb25jdXJyZW50TW9kZSkge1xuICAgICAgaWYgKGlzQmF0Y2hpbmdJbnRlcmFjdGl2ZVVwZGF0ZXMpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhbiBpbnRlcmFjdGl2ZSB1cGRhdGVcbiAgICAgICAgZXhwaXJhdGlvblRpbWUgPSBjb21wdXRlSW50ZXJhY3RpdmVFeHBpcmF0aW9uKGN1cnJlbnRUaW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYW4gYXN5bmMgdXBkYXRlXG4gICAgICAgIGV4cGlyYXRpb25UaW1lID0gY29tcHV0ZUFzeW5jRXhwaXJhdGlvbihjdXJyZW50VGltZSk7XG4gICAgICB9XG4gICAgICAvLyBJZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIHJlbmRlcmluZyBhIHRyZWUsIGRvIG5vdCB1cGRhdGUgYXQgdGhlIHNhbWVcbiAgICAgIC8vIGV4cGlyYXRpb24gdGltZSB0aGF0IGlzIGFscmVhZHkgcmVuZGVyaW5nLlxuICAgICAgaWYgKG5leHRSb290ICE9PSBudWxsICYmIGV4cGlyYXRpb25UaW1lID09PSBuZXh0UmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICAgICAgZXhwaXJhdGlvblRpbWUgKz0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBpcyBhIHN5bmMgdXBkYXRlXG4gICAgICBleHBpcmF0aW9uVGltZSA9IFN5bmM7XG4gICAgfVxuICB9XG4gIGlmIChpc0JhdGNoaW5nSW50ZXJhY3RpdmVVcGRhdGVzKSB7XG4gICAgLy8gVGhpcyBpcyBhbiBpbnRlcmFjdGl2ZSB1cGRhdGUuIEtlZXAgdHJhY2sgb2YgdGhlIGxvd2VzdCBwZW5kaW5nXG4gICAgLy8gaW50ZXJhY3RpdmUgZXhwaXJhdGlvbiB0aW1lLiBUaGlzIGFsbG93cyB1cyB0byBzeW5jaHJvbm91c2x5IGZsdXNoXG4gICAgLy8gYWxsIGludGVyYWN0aXZlIHVwZGF0ZXMgd2hlbiBuZWVkZWQuXG4gICAgaWYgKGV4cGlyYXRpb25UaW1lID4gbG93ZXN0UHJpb3JpdHlQZW5kaW5nSW50ZXJhY3RpdmVFeHBpcmF0aW9uVGltZSkge1xuICAgICAgbG93ZXN0UHJpb3JpdHlQZW5kaW5nSW50ZXJhY3RpdmVFeHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZXhwaXJhdGlvblRpbWU7XG59XG5cbmZ1bmN0aW9uIHJlbmRlckRpZFN1c3BlbmQocm9vdCwgYWJzb2x1dGVUaW1lb3V0TXMsIHN1c3BlbmRlZFRpbWUpIHtcbiAgLy8gU2NoZWR1bGUgdGhlIHRpbWVvdXQuXG4gIGlmIChhYnNvbHV0ZVRpbWVvdXRNcyA+PSAwICYmIG5leHRMYXRlc3RBYnNvbHV0ZVRpbWVvdXRNcyA8IGFic29sdXRlVGltZW91dE1zKSB7XG4gICAgbmV4dExhdGVzdEFic29sdXRlVGltZW91dE1zID0gYWJzb2x1dGVUaW1lb3V0TXM7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyRGlkRXJyb3IoKSB7XG4gIG5leHRSZW5kZXJEaWRFcnJvciA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHJ5U3VzcGVuZGVkUm9vdChyb290LCBib3VuZGFyeUZpYmVyLCBzb3VyY2VGaWJlciwgc3VzcGVuZGVkVGltZSkge1xuICB2YXIgcmV0cnlUaW1lID0gdm9pZCAwO1xuXG4gIGlmIChpc1ByaW9yaXR5TGV2ZWxTdXNwZW5kZWQocm9vdCwgc3VzcGVuZGVkVGltZSkpIHtcbiAgICAvLyBQaW5nIGF0IHRoZSBvcmlnaW5hbCBsZXZlbFxuICAgIHJldHJ5VGltZSA9IHN1c3BlbmRlZFRpbWU7XG5cbiAgICBtYXJrUGluZ2VkUHJpb3JpdHlMZXZlbChyb290LCByZXRyeVRpbWUpO1xuICB9IGVsc2Uge1xuICAgIC8vIFN1c3BlbnNlIGFscmVhZHkgdGltZWQgb3V0LiBDb21wdXRlIGEgbmV3IGV4cGlyYXRpb24gdGltZVxuICAgIHZhciBjdXJyZW50VGltZSA9IHJlcXVlc3RDdXJyZW50VGltZSgpO1xuICAgIHJldHJ5VGltZSA9IGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIoY3VycmVudFRpbWUsIGJvdW5kYXJ5RmliZXIpO1xuICAgIG1hcmtQZW5kaW5nUHJpb3JpdHlMZXZlbChyb290LCByZXRyeVRpbWUpO1xuICB9XG5cbiAgLy8gVE9ETzogSWYgdGhlIHN1c3BlbnNlIGZpYmVyIGhhcyBhbHJlYWR5IHJlbmRlcmVkIHRoZSBwcmltYXJ5IGNoaWxkcmVuXG4gIC8vIHdpdGhvdXQgc3VzcGVuZGluZyAodGhhdCBpcywgYWxsIG9mIHRoZSBwcm9taXNlcyBoYXZlIGFscmVhZHkgcmVzb2x2ZWQpLFxuICAvLyB3ZSBzaG91bGQgbm90IHRyaWdnZXIgYW5vdGhlciB1cGRhdGUgaGVyZS4gT25lIGNhc2UgdGhpcyBoYXBwZW5zIGlzIHdoZW5cbiAgLy8gd2UgYXJlIGluIHN5bmMgbW9kZSBhbmQgYSBzaW5nbGUgcHJvbWlzZSBpcyB0aHJvd24gYm90aCBvbiBpbml0aWFsIHJlbmRlclxuICAvLyBhbmQgb24gdXBkYXRlOyB3ZSBhdHRhY2ggdHdvIC50aGVuKHJldHJ5U3VzcGVuZGVkUm9vdCkgY2FsbGJhY2tzIGFuZCBlYWNoXG4gIC8vIG9uZSBwZXJmb3JtcyBTeW5jIHdvcmssIHJlcmVuZGVyaW5nIHRoZSBTdXNwZW5zZS5cblxuICBpZiAoKGJvdW5kYXJ5RmliZXIubW9kZSAmIENvbmN1cnJlbnRNb2RlKSAhPT0gTm9Db250ZXh0KSB7XG4gICAgaWYgKHJvb3QgPT09IG5leHRSb290ICYmIG5leHRSZW5kZXJFeHBpcmF0aW9uVGltZSA9PT0gc3VzcGVuZGVkVGltZSkge1xuICAgICAgLy8gUmVjZWl2ZWQgYSBwaW5nIGF0IHRoZSBzYW1lIHByaW9yaXR5IGxldmVsIGF0IHdoaWNoIHdlJ3JlIGN1cnJlbnRseVxuICAgICAgLy8gcmVuZGVyaW5nLiBSZXN0YXJ0IGZyb20gdGhlIHJvb3QuXG4gICAgICBuZXh0Um9vdCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgc2NoZWR1bGVXb3JrVG9Sb290KGJvdW5kYXJ5RmliZXIsIHJldHJ5VGltZSk7XG4gIGlmICgoYm91bmRhcnlGaWJlci5tb2RlICYgQ29uY3VycmVudE1vZGUpID09PSBOb0NvbnRleHQpIHtcbiAgICAvLyBPdXRzaWRlIG9mIGNvbmN1cnJlbnQgbW9kZSwgd2UgbXVzdCBzY2hlZHVsZSBhbiB1cGRhdGUgb24gdGhlIHNvdXJjZVxuICAgIC8vIGZpYmVyLCB0b28sIHNpbmNlIGl0IGFscmVhZHkgY29tbWl0dGVkIGluIGFuIGluY29uc2lzdGVudCBzdGF0ZSBhbmRcbiAgICAvLyB0aGVyZWZvcmUgZG9lcyBub3QgaGF2ZSBhbnkgcGVuZGluZyB3b3JrLlxuICAgIHNjaGVkdWxlV29ya1RvUm9vdChzb3VyY2VGaWJlciwgcmV0cnlUaW1lKTtcbiAgICB2YXIgc291cmNlVGFnID0gc291cmNlRmliZXIudGFnO1xuICAgIGlmIChzb3VyY2VUYWcgPT09IENsYXNzQ29tcG9uZW50ICYmIHNvdXJjZUZpYmVyLnN0YXRlTm9kZSAhPT0gbnVsbCkge1xuICAgICAgLy8gV2hlbiB3ZSB0cnkgcmVuZGVyaW5nIGFnYWluLCB3ZSBzaG91bGQgbm90IHJldXNlIHRoZSBjdXJyZW50IGZpYmVyLFxuICAgICAgLy8gc2luY2UgaXQncyBrbm93biB0byBiZSBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuIFVzZSBhIGZvcmNlIHVwZHRlIHRvXG4gICAgICAvLyBwcmV2ZW50IGEgYmFpbCBvdXQuXG4gICAgICB2YXIgdXBkYXRlID0gY3JlYXRlVXBkYXRlKHJldHJ5VGltZSk7XG4gICAgICB1cGRhdGUudGFnID0gRm9yY2VVcGRhdGU7XG4gICAgICBlbnF1ZXVlVXBkYXRlKHNvdXJjZUZpYmVyLCB1cGRhdGUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciByb290RXhwaXJhdGlvblRpbWUgPSByb290LmV4cGlyYXRpb25UaW1lO1xuICBpZiAocm9vdEV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmspIHtcbiAgICByZXF1ZXN0V29yayhyb290LCByb290RXhwaXJhdGlvblRpbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNjaGVkdWxlV29ya1RvUm9vdChmaWJlciwgZXhwaXJhdGlvblRpbWUpIHtcbiAgcmVjb3JkU2NoZWR1bGVVcGRhdGUoKTtcblxuICB7XG4gICAgaWYgKGZpYmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgICAgIHdhcm5BYm91dEludmFsaWRVcGRhdGVzKGluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICAvLyBVcGRhdGUgdGhlIHNvdXJjZSBmaWJlcidzIGV4cGlyYXRpb24gdGltZVxuICBpZiAoZmliZXIuZXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBmaWJlci5leHBpcmF0aW9uVGltZSA+IGV4cGlyYXRpb25UaW1lKSB7XG4gICAgZmliZXIuZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgfVxuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBpZiAoYWx0ZXJuYXRlICE9PSBudWxsICYmIChhbHRlcm5hdGUuZXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBhbHRlcm5hdGUuZXhwaXJhdGlvblRpbWUgPiBleHBpcmF0aW9uVGltZSkpIHtcbiAgICBhbHRlcm5hdGUuZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgfVxuICAvLyBXYWxrIHRoZSBwYXJlbnQgcGF0aCB0byB0aGUgcm9vdCBhbmQgdXBkYXRlIHRoZSBjaGlsZCBleHBpcmF0aW9uIHRpbWUuXG4gIHZhciBub2RlID0gZmliZXIucmV0dXJuO1xuICB2YXIgcm9vdCA9IG51bGw7XG4gIGlmIChub2RlID09PSBudWxsICYmIGZpYmVyLnRhZyA9PT0gSG9zdFJvb3QpIHtcbiAgICByb290ID0gZmliZXIuc3RhdGVOb2RlO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBhbHRlcm5hdGUgPSBub2RlLmFsdGVybmF0ZTtcbiAgICAgIGlmIChub2RlLmNoaWxkRXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBub2RlLmNoaWxkRXhwaXJhdGlvblRpbWUgPiBleHBpcmF0aW9uVGltZSkge1xuICAgICAgICBub2RlLmNoaWxkRXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgICAgICAgaWYgKGFsdGVybmF0ZSAhPT0gbnVsbCAmJiAoYWx0ZXJuYXRlLmNoaWxkRXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBhbHRlcm5hdGUuY2hpbGRFeHBpcmF0aW9uVGltZSA+IGV4cGlyYXRpb25UaW1lKSkge1xuICAgICAgICAgIGFsdGVybmF0ZS5jaGlsZEV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYWx0ZXJuYXRlICE9PSBudWxsICYmIChhbHRlcm5hdGUuY2hpbGRFeHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IGFsdGVybmF0ZS5jaGlsZEV4cGlyYXRpb25UaW1lID4gZXhwaXJhdGlvblRpbWUpKSB7XG4gICAgICAgIGFsdGVybmF0ZS5jaGlsZEV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5yZXR1cm4gPT09IG51bGwgJiYgbm9kZS50YWcgPT09IEhvc3RSb290KSB7XG4gICAgICAgIHJvb3QgPSBub2RlLnN0YXRlTm9kZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKHJvb3QgPT09IG51bGwpIHtcbiAgICBpZiAodHJ1ZSAmJiBmaWJlci50YWcgPT09IENsYXNzQ29tcG9uZW50KSB7XG4gICAgICB3YXJuQWJvdXRVcGRhdGVPblVubW91bnRlZChmaWJlcik7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICB2YXIgaW50ZXJhY3Rpb25zID0gdHJhY2luZy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50O1xuICAgIGlmIChpbnRlcmFjdGlvbnMuc2l6ZSA+IDApIHtcbiAgICAgIHZhciBwZW5kaW5nSW50ZXJhY3Rpb25NYXAgPSByb290LnBlbmRpbmdJbnRlcmFjdGlvbk1hcDtcbiAgICAgIHZhciBwZW5kaW5nSW50ZXJhY3Rpb25zID0gcGVuZGluZ0ludGVyYWN0aW9uTWFwLmdldChleHBpcmF0aW9uVGltZSk7XG4gICAgICBpZiAocGVuZGluZ0ludGVyYWN0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgIGludGVyYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChpbnRlcmFjdGlvbikge1xuICAgICAgICAgIGlmICghcGVuZGluZ0ludGVyYWN0aW9ucy5oYXMoaW50ZXJhY3Rpb24pKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHBlbmRpbmcgYXN5bmMgd29yayBjb3VudCBmb3IgcHJldmlvdXNseSB1bnNjaGVkdWxlZCBpbnRlcmFjdGlvbi5cbiAgICAgICAgICAgIGludGVyYWN0aW9uLl9fY291bnQrKztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwZW5kaW5nSW50ZXJhY3Rpb25zLmFkZChpbnRlcmFjdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVuZGluZ0ludGVyYWN0aW9uTWFwLnNldChleHBpcmF0aW9uVGltZSwgbmV3IFNldChpbnRlcmFjdGlvbnMpKTtcblxuICAgICAgICAvLyBVcGRhdGUgdGhlIHBlbmRpbmcgYXN5bmMgd29yayBjb3VudCBmb3IgdGhlIGN1cnJlbnQgaW50ZXJhY3Rpb25zLlxuICAgICAgICBpbnRlcmFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICBpbnRlcmFjdGlvbi5fX2NvdW50Kys7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3Vic2NyaWJlciA9IHRyYWNpbmcuX19zdWJzY3JpYmVyUmVmLmN1cnJlbnQ7XG4gICAgICBpZiAoc3Vic2NyaWJlciAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgdGhyZWFkSUQgPSBjb21wdXRlVGhyZWFkSUQoZXhwaXJhdGlvblRpbWUsIHJvb3QuaW50ZXJhY3Rpb25UaHJlYWRJRCk7XG4gICAgICAgIHN1YnNjcmliZXIub25Xb3JrU2NoZWR1bGVkKGludGVyYWN0aW9ucywgdGhyZWFkSUQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByb290O1xufVxuXG5mdW5jdGlvbiBzY2hlZHVsZVdvcmsoZmliZXIsIGV4cGlyYXRpb25UaW1lKSB7XG4gIHZhciByb290ID0gc2NoZWR1bGVXb3JrVG9Sb290KGZpYmVyLCBleHBpcmF0aW9uVGltZSk7XG4gIGlmIChyb290ID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFpc1dvcmtpbmcgJiYgbmV4dFJlbmRlckV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmsgJiYgZXhwaXJhdGlvblRpbWUgPCBuZXh0UmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICAvLyBUaGlzIGlzIGFuIGludGVycnVwdGlvbi4gKFVzZWQgZm9yIHBlcmZvcm1hbmNlIHRyYWNraW5nLilcbiAgICBpbnRlcnJ1cHRlZEJ5ID0gZmliZXI7XG4gICAgcmVzZXRTdGFjaygpO1xuICB9XG4gIG1hcmtQZW5kaW5nUHJpb3JpdHlMZXZlbChyb290LCBleHBpcmF0aW9uVGltZSk7XG4gIGlmIChcbiAgLy8gSWYgd2UncmUgaW4gdGhlIHJlbmRlciBwaGFzZSwgd2UgZG9uJ3QgbmVlZCB0byBzY2hlZHVsZSB0aGlzIHJvb3RcbiAgLy8gZm9yIGFuIHVwZGF0ZSwgYmVjYXVzZSB3ZSdsbCBkbyBpdCBiZWZvcmUgd2UgZXhpdC4uLlxuICAhaXNXb3JraW5nIHx8IGlzQ29tbWl0dGluZyQxIHx8XG4gIC8vIC4uLnVubGVzcyB0aGlzIGlzIGEgZGlmZmVyZW50IHJvb3QgdGhhbiB0aGUgb25lIHdlJ3JlIHJlbmRlcmluZy5cbiAgbmV4dFJvb3QgIT09IHJvb3QpIHtcbiAgICB2YXIgcm9vdEV4cGlyYXRpb25UaW1lID0gcm9vdC5leHBpcmF0aW9uVGltZTtcbiAgICByZXF1ZXN0V29yayhyb290LCByb290RXhwaXJhdGlvblRpbWUpO1xuICB9XG4gIGlmIChuZXN0ZWRVcGRhdGVDb3VudCA+IE5FU1RFRF9VUERBVEVfTElNSVQpIHtcbiAgICAvLyBSZXNldCB0aGlzIGJhY2sgdG8gemVybyBzbyBzdWJzZXF1ZW50IHVwZGF0ZXMgZG9uJ3QgdGhyb3cuXG4gICAgbmVzdGVkVXBkYXRlQ291bnQgPSAwO1xuICAgIGludmFyaWFudChmYWxzZSwgJ01heGltdW0gdXBkYXRlIGRlcHRoIGV4Y2VlZGVkLiBUaGlzIGNhbiBoYXBwZW4gd2hlbiBhIGNvbXBvbmVudCByZXBlYXRlZGx5IGNhbGxzIHNldFN0YXRlIGluc2lkZSBjb21wb25lbnRXaWxsVXBkYXRlIG9yIGNvbXBvbmVudERpZFVwZGF0ZS4gUmVhY3QgbGltaXRzIHRoZSBudW1iZXIgb2YgbmVzdGVkIHVwZGF0ZXMgdG8gcHJldmVudCBpbmZpbml0ZSBsb29wcy4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzeW5jVXBkYXRlcyhmbiwgYSwgYiwgYywgZCkge1xuICB2YXIgcHJldmlvdXNFeHBpcmF0aW9uQ29udGV4dCA9IGV4cGlyYXRpb25Db250ZXh0O1xuICBleHBpcmF0aW9uQ29udGV4dCA9IFN5bmM7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZuKGEsIGIsIGMsIGQpO1xuICB9IGZpbmFsbHkge1xuICAgIGV4cGlyYXRpb25Db250ZXh0ID0gcHJldmlvdXNFeHBpcmF0aW9uQ29udGV4dDtcbiAgfVxufVxuXG4vLyBUT0RPOiBFdmVyeXRoaW5nIGJlbG93IHRoaXMgaXMgd3JpdHRlbiBhcyBpZiBpdCBoYXMgYmVlbiBsaWZ0ZWQgdG8gdGhlXG4vLyByZW5kZXJlcnMuIEknbGwgZG8gdGhpcyBpbiBhIGZvbGxvdy11cC5cblxuLy8gTGlua2VkLWxpc3Qgb2Ygcm9vdHNcbnZhciBmaXJzdFNjaGVkdWxlZFJvb3QgPSBudWxsO1xudmFyIGxhc3RTY2hlZHVsZWRSb290ID0gbnVsbDtcblxudmFyIGNhbGxiYWNrRXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG52YXIgY2FsbGJhY2tJRCA9IHZvaWQgMDtcbnZhciBpc1JlbmRlcmluZyA9IGZhbHNlO1xudmFyIG5leHRGbHVzaGVkUm9vdCA9IG51bGw7XG52YXIgbmV4dEZsdXNoZWRFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbnZhciBsb3dlc3RQcmlvcml0eVBlbmRpbmdJbnRlcmFjdGl2ZUV4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xudmFyIGRlYWRsaW5lRGlkRXhwaXJlID0gZmFsc2U7XG52YXIgaGFzVW5oYW5kbGVkRXJyb3IgPSBmYWxzZTtcbnZhciB1bmhhbmRsZWRFcnJvciA9IG51bGw7XG52YXIgZGVhZGxpbmUgPSBudWxsO1xuXG52YXIgaXNCYXRjaGluZ1VwZGF0ZXMgPSBmYWxzZTtcbnZhciBpc1VuYmF0Y2hpbmdVcGRhdGVzID0gZmFsc2U7XG52YXIgaXNCYXRjaGluZ0ludGVyYWN0aXZlVXBkYXRlcyA9IGZhbHNlO1xuXG52YXIgY29tcGxldGVkQmF0Y2hlcyA9IG51bGw7XG5cbnZhciBvcmlnaW5hbFN0YXJ0VGltZU1zID0gc2NoZWR1bGVyLnVuc3RhYmxlX25vdygpO1xudmFyIGN1cnJlbnRSZW5kZXJlclRpbWUgPSBtc1RvRXhwaXJhdGlvblRpbWUob3JpZ2luYWxTdGFydFRpbWVNcyk7XG52YXIgY3VycmVudFNjaGVkdWxlclRpbWUgPSBjdXJyZW50UmVuZGVyZXJUaW1lO1xuXG4vLyBVc2UgdGhlc2UgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wIG9mIG5lc3RlZCB1cGRhdGVzXG52YXIgTkVTVEVEX1VQREFURV9MSU1JVCA9IDUwO1xudmFyIG5lc3RlZFVwZGF0ZUNvdW50ID0gMDtcbnZhciBsYXN0Q29tbWl0dGVkUm9vdER1cmluZ1RoaXNCYXRjaCA9IG51bGw7XG5cbnZhciB0aW1lSGV1cmlzdGljRm9yVW5pdE9mV29yayA9IDE7XG5cbmZ1bmN0aW9uIHJlY29tcHV0ZUN1cnJlbnRSZW5kZXJlclRpbWUoKSB7XG4gIHZhciBjdXJyZW50VGltZU1zID0gc2NoZWR1bGVyLnVuc3RhYmxlX25vdygpIC0gb3JpZ2luYWxTdGFydFRpbWVNcztcbiAgY3VycmVudFJlbmRlcmVyVGltZSA9IG1zVG9FeHBpcmF0aW9uVGltZShjdXJyZW50VGltZU1zKTtcbn1cblxuZnVuY3Rpb24gc2NoZWR1bGVDYWxsYmFja1dpdGhFeHBpcmF0aW9uVGltZShyb290LCBleHBpcmF0aW9uVGltZSkge1xuICBpZiAoY2FsbGJhY2tFeHBpcmF0aW9uVGltZSAhPT0gTm9Xb3JrKSB7XG4gICAgLy8gQSBjYWxsYmFjayBpcyBhbHJlYWR5IHNjaGVkdWxlZC4gQ2hlY2sgaXRzIGV4cGlyYXRpb24gdGltZSAodGltZW91dCkuXG4gICAgaWYgKGV4cGlyYXRpb25UaW1lID4gY2FsbGJhY2tFeHBpcmF0aW9uVGltZSkge1xuICAgICAgLy8gRXhpc3RpbmcgY2FsbGJhY2sgaGFzIHN1ZmZpY2llbnQgdGltZW91dC4gRXhpdC5cbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNhbGxiYWNrSUQgIT09IG51bGwpIHtcbiAgICAgICAgLy8gRXhpc3RpbmcgY2FsbGJhY2sgaGFzIGluc3VmZmljaWVudCB0aW1lb3V0LiBDYW5jZWwgYW5kIHNjaGVkdWxlIGFcbiAgICAgICAgLy8gbmV3IG9uZS5cbiAgICAgICAgc2NoZWR1bGVyLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrKGNhbGxiYWNrSUQpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBUaGUgcmVxdWVzdCBjYWxsYmFjayB0aW1lciBpcyBhbHJlYWR5IHJ1bm5pbmcuIERvbid0IHN0YXJ0IGEgbmV3IG9uZS5cbiAgfSBlbHNlIHtcbiAgICBzdGFydFJlcXVlc3RDYWxsYmFja1RpbWVyKCk7XG4gIH1cblxuICBjYWxsYmFja0V4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gIHZhciBjdXJyZW50TXMgPSBzY2hlZHVsZXIudW5zdGFibGVfbm93KCkgLSBvcmlnaW5hbFN0YXJ0VGltZU1zO1xuICB2YXIgZXhwaXJhdGlvblRpbWVNcyA9IGV4cGlyYXRpb25UaW1lVG9NcyhleHBpcmF0aW9uVGltZSk7XG4gIHZhciB0aW1lb3V0ID0gZXhwaXJhdGlvblRpbWVNcyAtIGN1cnJlbnRNcztcbiAgY2FsbGJhY2tJRCA9IHNjaGVkdWxlci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHBlcmZvcm1Bc3luY1dvcmssIHsgdGltZW91dDogdGltZW91dCB9KTtcbn1cblxuLy8gRm9yIGV2ZXJ5IGNhbGwgdG8gcmVuZGVyUm9vdCwgb25lIG9mIG9uRmF0YWwsIG9uQ29tcGxldGUsIG9uU3VzcGVuZCwgYW5kXG4vLyBvbllpZWxkIGlzIGNhbGxlZCB1cG9uIGV4aXRpbmcuIFdlIHVzZSB0aGVzZSBpbiBsaWV1IG9mIHJldHVybmluZyBhIHR1cGxlLlxuLy8gSSd2ZSBhbHNvIGNob3NlbiBub3QgdG8gaW5saW5lIHRoZW0gaW50byByZW5kZXJSb290IGJlY2F1c2UgdGhlc2Ugd2lsbFxuLy8gZXZlbnR1YWxseSBiZSBsaWZ0ZWQgaW50byB0aGUgcmVuZGVyZXIuXG5mdW5jdGlvbiBvbkZhdGFsKHJvb3QpIHtcbiAgcm9vdC5maW5pc2hlZFdvcmsgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBsZXRlKHJvb3QsIGZpbmlzaGVkV29yaywgZXhwaXJhdGlvblRpbWUpIHtcbiAgcm9vdC5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZTtcbiAgcm9vdC5maW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcms7XG59XG5cbmZ1bmN0aW9uIG9uU3VzcGVuZChyb290LCBmaW5pc2hlZFdvcmssIHN1c3BlbmRlZEV4cGlyYXRpb25UaW1lLCByb290RXhwaXJhdGlvblRpbWUsIG1zVW50aWxUaW1lb3V0KSB7XG4gIHJvb3QuZXhwaXJhdGlvblRpbWUgPSByb290RXhwaXJhdGlvblRpbWU7XG4gIGlmIChtc1VudGlsVGltZW91dCA9PT0gMCAmJiAhc2hvdWxkWWllbGQoKSkge1xuICAgIC8vIERvbid0IHdhaXQgYW4gYWRkaXRpb25hbCB0aWNrLiBDb21taXQgdGhlIHRyZWUgaW1tZWRpYXRlbHkuXG4gICAgcm9vdC5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUgPSBzdXNwZW5kZWRFeHBpcmF0aW9uVGltZTtcbiAgICByb290LmZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yaztcbiAgfSBlbHNlIGlmIChtc1VudGlsVGltZW91dCA+IDApIHtcbiAgICAvLyBXYWl0IGBtc1VudGlsVGltZW91dGAgbWlsbGlzZWNvbmRzIGJlZm9yZSBjb21taXR0aW5nLlxuICAgIHJvb3QudGltZW91dEhhbmRsZSA9IHNjaGVkdWxlVGltZW91dChvblRpbWVvdXQuYmluZChudWxsLCByb290LCBmaW5pc2hlZFdvcmssIHN1c3BlbmRlZEV4cGlyYXRpb25UaW1lKSwgbXNVbnRpbFRpbWVvdXQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uWWllbGQocm9vdCkge1xuICByb290LmZpbmlzaGVkV29yayA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIG9uVGltZW91dChyb290LCBmaW5pc2hlZFdvcmssIHN1c3BlbmRlZEV4cGlyYXRpb25UaW1lKSB7XG4gIC8vIFRoZSByb290IHRpbWVkIG91dC4gQ29tbWl0IGl0LlxuICByb290LnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSA9IHN1c3BlbmRlZEV4cGlyYXRpb25UaW1lO1xuICByb290LmZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yaztcbiAgLy8gUmVhZCB0aGUgY3VycmVudCB0aW1lIGJlZm9yZSBlbnRlcmluZyB0aGUgY29tbWl0IHBoYXNlLiBXZSBjYW4gYmVcbiAgLy8gY2VydGFpbiB0aGlzIHdvbid0IGNhdXNlIHRlYXJpbmcgcmVsYXRlZCB0byBiYXRjaGluZyBvZiBldmVudCB1cGRhdGVzXG4gIC8vIGJlY2F1c2Ugd2UncmUgYXQgdGhlIHRvcCBvZiBhIHRpbWVyIGV2ZW50LlxuICByZWNvbXB1dGVDdXJyZW50UmVuZGVyZXJUaW1lKCk7XG4gIGN1cnJlbnRTY2hlZHVsZXJUaW1lID0gY3VycmVudFJlbmRlcmVyVGltZTtcbiAgZmx1c2hSb290KHJvb3QsIHN1c3BlbmRlZEV4cGlyYXRpb25UaW1lKTtcbn1cblxuZnVuY3Rpb24gb25Db21taXQocm9vdCwgZXhwaXJhdGlvblRpbWUpIHtcbiAgcm9vdC5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICByb290LmZpbmlzaGVkV29yayA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3RDdXJyZW50VGltZSgpIHtcbiAgLy8gcmVxdWVzdEN1cnJlbnRUaW1lIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGNvbXB1dGUgYW4gZXhwaXJhdGlvblxuICAvLyB0aW1lLlxuICAvL1xuICAvLyBFeHBpcmF0aW9uIHRpbWVzIGFyZSBjb21wdXRlZCBieSBhZGRpbmcgdG8gdGhlIGN1cnJlbnQgdGltZSAodGhlIHN0YXJ0XG4gIC8vIHRpbWUpLiBIb3dldmVyLCBpZiB0d28gdXBkYXRlcyBhcmUgc2NoZWR1bGVkIHdpdGhpbiB0aGUgc2FtZSBldmVudCwgd2VcbiAgLy8gc2hvdWxkIHRyZWF0IHRoZWlyIHN0YXJ0IHRpbWVzIGFzIHNpbXVsdGFuZW91cywgZXZlbiBpZiB0aGUgYWN0dWFsIGNsb2NrXG4gIC8vIHRpbWUgaGFzIGFkdmFuY2VkIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBzZWNvbmQgY2FsbC5cblxuICAvLyBJbiBvdGhlciB3b3JkcywgYmVjYXVzZSBleHBpcmF0aW9uIHRpbWVzIGRldGVybWluZSBob3cgdXBkYXRlcyBhcmUgYmF0Y2hlZCxcbiAgLy8gd2Ugd2FudCBhbGwgdXBkYXRlcyBvZiBsaWtlIHByaW9yaXR5IHRoYXQgb2NjdXIgd2l0aGluIHRoZSBzYW1lIGV2ZW50IHRvXG4gIC8vIHJlY2VpdmUgdGhlIHNhbWUgZXhwaXJhdGlvbiB0aW1lLiBPdGhlcndpc2Ugd2UgZ2V0IHRlYXJpbmcuXG4gIC8vXG4gIC8vIFdlIGtlZXAgdHJhY2sgb2YgdHdvIHNlcGFyYXRlIHRpbWVzOiB0aGUgY3VycmVudCBcInJlbmRlcmVyXCIgdGltZSBhbmQgdGhlXG4gIC8vIGN1cnJlbnQgXCJzY2hlZHVsZXJcIiB0aW1lLiBUaGUgcmVuZGVyZXIgdGltZSBjYW4gYmUgdXBkYXRlZCB3aGVuZXZlcjsgaXRcbiAgLy8gb25seSBleGlzdHMgdG8gbWluaW1pemUgdGhlIGNhbGxzIHBlcmZvcm1hbmNlLm5vdy5cbiAgLy9cbiAgLy8gQnV0IHRoZSBzY2hlZHVsZXIgdGltZSBjYW4gb25seSBiZSB1cGRhdGVkIGlmIHRoZXJlJ3Mgbm8gcGVuZGluZyB3b3JrLCBvclxuICAvLyBpZiB3ZSBrbm93IGZvciBjZXJ0YWluIHRoYXQgd2UncmUgbm90IGluIHRoZSBtaWRkbGUgb2YgYW4gZXZlbnQuXG5cbiAgaWYgKGlzUmVuZGVyaW5nKSB7XG4gICAgLy8gV2UncmUgYWxyZWFkeSByZW5kZXJpbmcuIFJldHVybiB0aGUgbW9zdCByZWNlbnRseSByZWFkIHRpbWUuXG4gICAgcmV0dXJuIGN1cnJlbnRTY2hlZHVsZXJUaW1lO1xuICB9XG4gIC8vIENoZWNrIGlmIHRoZXJlJ3MgcGVuZGluZyB3b3JrLlxuICBmaW5kSGlnaGVzdFByaW9yaXR5Um9vdCgpO1xuICBpZiAobmV4dEZsdXNoZWRFeHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8IG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUgPT09IE5ldmVyKSB7XG4gICAgLy8gSWYgdGhlcmUncyBubyBwZW5kaW5nIHdvcmssIG9yIGlmIHRoZSBwZW5kaW5nIHdvcmsgaXMgb2Zmc2NyZWVuLCB3ZSBjYW5cbiAgICAvLyByZWFkIHRoZSBjdXJyZW50IHRpbWUgd2l0aG91dCByaXNrIG9mIHRlYXJpbmcuXG4gICAgcmVjb21wdXRlQ3VycmVudFJlbmRlcmVyVGltZSgpO1xuICAgIGN1cnJlbnRTY2hlZHVsZXJUaW1lID0gY3VycmVudFJlbmRlcmVyVGltZTtcbiAgICByZXR1cm4gY3VycmVudFNjaGVkdWxlclRpbWU7XG4gIH1cbiAgLy8gVGhlcmUncyBhbHJlYWR5IHBlbmRpbmcgd29yay4gV2UgbWlnaHQgYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGJyb3dzZXJcbiAgLy8gZXZlbnQuIElmIHdlIHdlcmUgdG8gcmVhZCB0aGUgY3VycmVudCB0aW1lLCBpdCBjb3VsZCBjYXVzZSBtdWx0aXBsZSB1cGRhdGVzXG4gIC8vIHdpdGhpbiB0aGUgc2FtZSBldmVudCB0byByZWNlaXZlIGRpZmZlcmVudCBleHBpcmF0aW9uIHRpbWVzLCBsZWFkaW5nIHRvXG4gIC8vIHRlYXJpbmcuIFJldHVybiB0aGUgbGFzdCByZWFkIHRpbWUuIER1cmluZyB0aGUgbmV4dCBpZGxlIGNhbGxiYWNrLCB0aGVcbiAgLy8gdGltZSB3aWxsIGJlIHVwZGF0ZWQuXG4gIHJldHVybiBjdXJyZW50U2NoZWR1bGVyVGltZTtcbn1cblxuLy8gcmVxdWVzdFdvcmsgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgd2hlbmV2ZXIgYSByb290IHJlY2VpdmVzIGFuIHVwZGF0ZS5cbi8vIEl0J3MgdXAgdG8gdGhlIHJlbmRlcmVyIHRvIGNhbGwgcmVuZGVyUm9vdCBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUuXG5mdW5jdGlvbiByZXF1ZXN0V29yayhyb290LCBleHBpcmF0aW9uVGltZSkge1xuICBhZGRSb290VG9TY2hlZHVsZShyb290LCBleHBpcmF0aW9uVGltZSk7XG4gIGlmIChpc1JlbmRlcmluZykge1xuICAgIC8vIFByZXZlbnQgcmVlbnRyYW5jeS4gUmVtYWluaW5nIHdvcmsgd2lsbCBiZSBzY2hlZHVsZWQgYXQgdGhlIGVuZCBvZlxuICAgIC8vIHRoZSBjdXJyZW50bHkgcmVuZGVyaW5nIGJhdGNoLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpc0JhdGNoaW5nVXBkYXRlcykge1xuICAgIC8vIEZsdXNoIHdvcmsgYXQgdGhlIGVuZCBvZiB0aGUgYmF0Y2guXG4gICAgaWYgKGlzVW5iYXRjaGluZ1VwZGF0ZXMpIHtcbiAgICAgIC8vIC4uLnVubGVzcyB3ZSdyZSBpbnNpZGUgdW5iYXRjaGVkVXBkYXRlcywgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGRcbiAgICAgIC8vIGZsdXNoIGl0IG5vdy5cbiAgICAgIG5leHRGbHVzaGVkUm9vdCA9IHJvb3Q7XG4gICAgICBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lID0gU3luYztcbiAgICAgIHBlcmZvcm1Xb3JrT25Sb290KHJvb3QsIFN5bmMsIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBUT0RPOiBHZXQgcmlkIG9mIFN5bmMgYW5kIHVzZSBjdXJyZW50IHRpbWU/XG4gIGlmIChleHBpcmF0aW9uVGltZSA9PT0gU3luYykge1xuICAgIHBlcmZvcm1TeW5jV29yaygpO1xuICB9IGVsc2Uge1xuICAgIHNjaGVkdWxlQ2FsbGJhY2tXaXRoRXhwaXJhdGlvblRpbWUocm9vdCwgZXhwaXJhdGlvblRpbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFJvb3RUb1NjaGVkdWxlKHJvb3QsIGV4cGlyYXRpb25UaW1lKSB7XG4gIC8vIEFkZCB0aGUgcm9vdCB0byB0aGUgc2NoZWR1bGUuXG4gIC8vIENoZWNrIGlmIHRoaXMgcm9vdCBpcyBhbHJlYWR5IHBhcnQgb2YgdGhlIHNjaGVkdWxlLlxuICBpZiAocm9vdC5uZXh0U2NoZWR1bGVkUm9vdCA9PT0gbnVsbCkge1xuICAgIC8vIFRoaXMgcm9vdCBpcyBub3QgYWxyZWFkeSBzY2hlZHVsZWQuIEFkZCBpdC5cbiAgICByb290LmV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gICAgaWYgKGxhc3RTY2hlZHVsZWRSb290ID09PSBudWxsKSB7XG4gICAgICBmaXJzdFNjaGVkdWxlZFJvb3QgPSBsYXN0U2NoZWR1bGVkUm9vdCA9IHJvb3Q7XG4gICAgICByb290Lm5leHRTY2hlZHVsZWRSb290ID0gcm9vdDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdFNjaGVkdWxlZFJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSByb290O1xuICAgICAgbGFzdFNjaGVkdWxlZFJvb3QgPSByb290O1xuICAgICAgbGFzdFNjaGVkdWxlZFJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSBmaXJzdFNjaGVkdWxlZFJvb3Q7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoaXMgcm9vdCBpcyBhbHJlYWR5IHNjaGVkdWxlZCwgYnV0IGl0cyBwcmlvcml0eSBtYXkgaGF2ZSBpbmNyZWFzZWQuXG4gICAgdmFyIHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lID0gcm9vdC5leHBpcmF0aW9uVGltZTtcbiAgICBpZiAocmVtYWluaW5nRXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBleHBpcmF0aW9uVGltZSA8IHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lKSB7XG4gICAgICAvLyBVcGRhdGUgdGhlIHByaW9yaXR5LlxuICAgICAgcm9vdC5leHBpcmF0aW9uVGltZSA9IGV4cGlyYXRpb25UaW1lO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kSGlnaGVzdFByaW9yaXR5Um9vdCgpIHtcbiAgdmFyIGhpZ2hlc3RQcmlvcml0eVdvcmsgPSBOb1dvcms7XG4gIHZhciBoaWdoZXN0UHJpb3JpdHlSb290ID0gbnVsbDtcbiAgaWYgKGxhc3RTY2hlZHVsZWRSb290ICE9PSBudWxsKSB7XG4gICAgdmFyIHByZXZpb3VzU2NoZWR1bGVkUm9vdCA9IGxhc3RTY2hlZHVsZWRSb290O1xuICAgIHZhciByb290ID0gZmlyc3RTY2hlZHVsZWRSb290O1xuICAgIHdoaWxlIChyb290ICE9PSBudWxsKSB7XG4gICAgICB2YXIgcmVtYWluaW5nRXhwaXJhdGlvblRpbWUgPSByb290LmV4cGlyYXRpb25UaW1lO1xuICAgICAgaWYgKHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lID09PSBOb1dvcmspIHtcbiAgICAgICAgLy8gVGhpcyByb290IG5vIGxvbmdlciBoYXMgd29yay4gUmVtb3ZlIGl0IGZyb20gdGhlIHNjaGVkdWxlci5cblxuICAgICAgICAvLyBUT0RPOiBUaGlzIGNoZWNrIGlzIHJlZHVkYW50LCBidXQgRmxvdyBpcyBjb25mdXNlZCBieSB0aGUgYnJhbmNoXG4gICAgICAgIC8vIGJlbG93IHdoZXJlIHdlIHNldCBsYXN0U2NoZWR1bGVkUm9vdCB0byBudWxsLCBldmVuIHRob3VnaCB3ZSBicmVha1xuICAgICAgICAvLyBmcm9tIHRoZSBsb29wIHJpZ2h0IGFmdGVyLlxuICAgICAgICAhKHByZXZpb3VzU2NoZWR1bGVkUm9vdCAhPT0gbnVsbCAmJiBsYXN0U2NoZWR1bGVkUm9vdCAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdTaG91bGQgaGF2ZSBhIHByZXZpb3VzIGFuZCBsYXN0IHJvb3QuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJykgOiB2b2lkIDA7XG4gICAgICAgIGlmIChyb290ID09PSByb290Lm5leHRTY2hlZHVsZWRSb290KSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyB0aGUgb25seSByb290IGluIHRoZSBsaXN0LlxuICAgICAgICAgIHJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSBudWxsO1xuICAgICAgICAgIGZpcnN0U2NoZWR1bGVkUm9vdCA9IGxhc3RTY2hlZHVsZWRSb290ID0gbnVsbDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIGlmIChyb290ID09PSBmaXJzdFNjaGVkdWxlZFJvb3QpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCByb290IGluIHRoZSBsaXN0LlxuICAgICAgICAgIHZhciBuZXh0ID0gcm9vdC5uZXh0U2NoZWR1bGVkUm9vdDtcbiAgICAgICAgICBmaXJzdFNjaGVkdWxlZFJvb3QgPSBuZXh0O1xuICAgICAgICAgIGxhc3RTY2hlZHVsZWRSb290Lm5leHRTY2hlZHVsZWRSb290ID0gbmV4dDtcbiAgICAgICAgICByb290Lm5leHRTY2hlZHVsZWRSb290ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChyb290ID09PSBsYXN0U2NoZWR1bGVkUm9vdCkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGxhc3Qgcm9vdCBpbiB0aGUgbGlzdC5cbiAgICAgICAgICBsYXN0U2NoZWR1bGVkUm9vdCA9IHByZXZpb3VzU2NoZWR1bGVkUm9vdDtcbiAgICAgICAgICBsYXN0U2NoZWR1bGVkUm9vdC5uZXh0U2NoZWR1bGVkUm9vdCA9IGZpcnN0U2NoZWR1bGVkUm9vdDtcbiAgICAgICAgICByb290Lm5leHRTY2hlZHVsZWRSb290ID0gbnVsbDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2aW91c1NjaGVkdWxlZFJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSByb290Lm5leHRTY2hlZHVsZWRSb290O1xuICAgICAgICAgIHJvb3QubmV4dFNjaGVkdWxlZFJvb3QgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJvb3QgPSBwcmV2aW91c1NjaGVkdWxlZFJvb3QubmV4dFNjaGVkdWxlZFJvb3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaGlnaGVzdFByaW9yaXR5V29yayA9PT0gTm9Xb3JrIHx8IHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lIDwgaGlnaGVzdFByaW9yaXR5V29yaykge1xuICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcHJpb3JpdHksIGlmIGl0J3MgaGlnaGVyXG4gICAgICAgICAgaGlnaGVzdFByaW9yaXR5V29yayA9IHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO1xuICAgICAgICAgIGhpZ2hlc3RQcmlvcml0eVJvb3QgPSByb290O1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb290ID09PSBsYXN0U2NoZWR1bGVkUm9vdCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoaWdoZXN0UHJpb3JpdHlXb3JrID09PSBTeW5jKSB7XG4gICAgICAgICAgLy8gU3luYyBpcyBoaWdoZXN0IHByaW9yaXR5IGJ5IGRlZmluaXRpb24gc29cbiAgICAgICAgICAvLyB3ZSBjYW4gc3RvcCBzZWFyY2hpbmcuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXNTY2hlZHVsZWRSb290ID0gcm9vdDtcbiAgICAgICAgcm9vdCA9IHJvb3QubmV4dFNjaGVkdWxlZFJvb3Q7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmV4dEZsdXNoZWRSb290ID0gaGlnaGVzdFByaW9yaXR5Um9vdDtcbiAgbmV4dEZsdXNoZWRFeHBpcmF0aW9uVGltZSA9IGhpZ2hlc3RQcmlvcml0eVdvcms7XG59XG5cbmZ1bmN0aW9uIHBlcmZvcm1Bc3luY1dvcmsoZGwpIHtcbiAgaWYgKGRsLmRpZFRpbWVvdXQpIHtcbiAgICAvLyBUaGUgY2FsbGJhY2sgdGltZWQgb3V0LiBUaGF0IG1lYW5zIGF0IGxlYXN0IG9uZSB1cGRhdGUgaGFzIGV4cGlyZWQuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIHRoZSByb290IHNjaGVkdWxlLiBJZiB0aGV5IGNvbnRhaW4gZXhwaXJlZCB3b3JrLCBzZXRcbiAgICAvLyB0aGUgbmV4dCByZW5kZXIgZXhwaXJhdGlvbiB0aW1lIHRvIHRoZSBjdXJyZW50IHRpbWUuIFRoaXMgaGFzIHRoZSBlZmZlY3RcbiAgICAvLyBvZiBmbHVzaGluZyBhbGwgZXhwaXJlZCB3b3JrIGluIGEgc2luZ2xlIGJhdGNoLCBpbnN0ZWFkIG9mIGZsdXNoaW5nIGVhY2hcbiAgICAvLyBsZXZlbCBvbmUgYXQgYSB0aW1lLlxuICAgIGlmIChmaXJzdFNjaGVkdWxlZFJvb3QgIT09IG51bGwpIHtcbiAgICAgIHJlY29tcHV0ZUN1cnJlbnRSZW5kZXJlclRpbWUoKTtcbiAgICAgIHZhciByb290ID0gZmlyc3RTY2hlZHVsZWRSb290O1xuICAgICAgZG8ge1xuICAgICAgICBkaWRFeHBpcmVBdEV4cGlyYXRpb25UaW1lKHJvb3QsIGN1cnJlbnRSZW5kZXJlclRpbWUpO1xuICAgICAgICAvLyBUaGUgcm9vdCBzY2hlZHVsZSBpcyBjaXJjdWxhciwgc28gdGhpcyBpcyBuZXZlciBudWxsLlxuICAgICAgICByb290ID0gcm9vdC5uZXh0U2NoZWR1bGVkUm9vdDtcbiAgICAgIH0gd2hpbGUgKHJvb3QgIT09IGZpcnN0U2NoZWR1bGVkUm9vdCk7XG4gICAgfVxuICB9XG4gIHBlcmZvcm1Xb3JrKE5vV29yaywgZGwpO1xufVxuXG5mdW5jdGlvbiBwZXJmb3JtU3luY1dvcmsoKSB7XG4gIHBlcmZvcm1Xb3JrKFN5bmMsIG51bGwpO1xufVxuXG5mdW5jdGlvbiBwZXJmb3JtV29yayhtaW5FeHBpcmF0aW9uVGltZSwgZGwpIHtcbiAgZGVhZGxpbmUgPSBkbDtcblxuICAvLyBLZWVwIHdvcmtpbmcgb24gcm9vdHMgdW50aWwgdGhlcmUncyBubyBtb3JlIHdvcmssIG9yIHVudGlsIHdlIHJlYWNoXG4gIC8vIHRoZSBkZWFkbGluZS5cbiAgZmluZEhpZ2hlc3RQcmlvcml0eVJvb3QoKTtcblxuICBpZiAoZGVhZGxpbmUgIT09IG51bGwpIHtcbiAgICByZWNvbXB1dGVDdXJyZW50UmVuZGVyZXJUaW1lKCk7XG4gICAgY3VycmVudFNjaGVkdWxlclRpbWUgPSBjdXJyZW50UmVuZGVyZXJUaW1lO1xuXG4gICAgaWYgKGVuYWJsZVVzZXJUaW1pbmdBUEkpIHtcbiAgICAgIHZhciBkaWRFeHBpcmUgPSBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lIDwgY3VycmVudFJlbmRlcmVyVGltZTtcbiAgICAgIHZhciB0aW1lb3V0ID0gZXhwaXJhdGlvblRpbWVUb01zKG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUpO1xuICAgICAgc3RvcFJlcXVlc3RDYWxsYmFja1RpbWVyKGRpZEV4cGlyZSwgdGltZW91dCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG5leHRGbHVzaGVkUm9vdCAhPT0gbnVsbCAmJiBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmsgJiYgKG1pbkV4cGlyYXRpb25UaW1lID09PSBOb1dvcmsgfHwgbWluRXhwaXJhdGlvblRpbWUgPj0gbmV4dEZsdXNoZWRFeHBpcmF0aW9uVGltZSkgJiYgKCFkZWFkbGluZURpZEV4cGlyZSB8fCBjdXJyZW50UmVuZGVyZXJUaW1lID49IG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUpKSB7XG4gICAgICBwZXJmb3JtV29ya09uUm9vdChuZXh0Rmx1c2hlZFJvb3QsIG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUsIGN1cnJlbnRSZW5kZXJlclRpbWUgPj0gbmV4dEZsdXNoZWRFeHBpcmF0aW9uVGltZSk7XG4gICAgICBmaW5kSGlnaGVzdFByaW9yaXR5Um9vdCgpO1xuICAgICAgcmVjb21wdXRlQ3VycmVudFJlbmRlcmVyVGltZSgpO1xuICAgICAgY3VycmVudFNjaGVkdWxlclRpbWUgPSBjdXJyZW50UmVuZGVyZXJUaW1lO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAobmV4dEZsdXNoZWRSb290ICE9PSBudWxsICYmIG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUgIT09IE5vV29yayAmJiAobWluRXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fCBtaW5FeHBpcmF0aW9uVGltZSA+PSBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lKSkge1xuICAgICAgcGVyZm9ybVdvcmtPblJvb3QobmV4dEZsdXNoZWRSb290LCBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lLCB0cnVlKTtcbiAgICAgIGZpbmRIaWdoZXN0UHJpb3JpdHlSb290KCk7XG4gICAgfVxuICB9XG5cbiAgLy8gV2UncmUgZG9uZSBmbHVzaGluZyB3b3JrLiBFaXRoZXIgd2UgcmFuIG91dCBvZiB0aW1lIGluIHRoaXMgY2FsbGJhY2ssXG4gIC8vIG9yIHRoZXJlJ3Mgbm8gbW9yZSB3b3JrIGxlZnQgd2l0aCBzdWZmaWNpZW50IHByaW9yaXR5LlxuXG4gIC8vIElmIHdlJ3JlIGluc2lkZSBhIGNhbGxiYWNrLCBzZXQgdGhpcyB0byBmYWxzZSBzaW5jZSB3ZSBqdXN0IGNvbXBsZXRlZCBpdC5cbiAgaWYgKGRlYWRsaW5lICE9PSBudWxsKSB7XG4gICAgY2FsbGJhY2tFeHBpcmF0aW9uVGltZSA9IE5vV29yaztcbiAgICBjYWxsYmFja0lEID0gbnVsbDtcbiAgfVxuICAvLyBJZiB0aGVyZSdzIHdvcmsgbGVmdCBvdmVyLCBzY2hlZHVsZSBhIG5ldyBjYWxsYmFjay5cbiAgaWYgKG5leHRGbHVzaGVkRXhwaXJhdGlvblRpbWUgIT09IE5vV29yaykge1xuICAgIHNjaGVkdWxlQ2FsbGJhY2tXaXRoRXhwaXJhdGlvblRpbWUobmV4dEZsdXNoZWRSb290LCBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lKTtcbiAgfVxuXG4gIC8vIENsZWFuLXVwLlxuICBkZWFkbGluZSA9IG51bGw7XG4gIGRlYWRsaW5lRGlkRXhwaXJlID0gZmFsc2U7XG5cbiAgZmluaXNoUmVuZGVyaW5nKCk7XG59XG5cbmZ1bmN0aW9uIGZsdXNoUm9vdChyb290LCBleHBpcmF0aW9uVGltZSkge1xuICAhIWlzUmVuZGVyaW5nID8gaW52YXJpYW50KGZhbHNlLCAnd29yay5jb21taXQoKTogQ2Fubm90IGNvbW1pdCB3aGlsZSBhbHJlYWR5IHJlbmRlcmluZy4gVGhpcyBsaWtlbHkgbWVhbnMgeW91IGF0dGVtcHRlZCB0byBjb21taXQgZnJvbSBpbnNpZGUgYSBsaWZlY3ljbGUgbWV0aG9kLicpIDogdm9pZCAwO1xuICAvLyBQZXJmb3JtIHdvcmsgb24gcm9vdCBhcyBpZiB0aGUgZ2l2ZW4gZXhwaXJhdGlvbiB0aW1lIGlzIHRoZSBjdXJyZW50IHRpbWUuXG4gIC8vIFRoaXMgaGFzIHRoZSBlZmZlY3Qgb2Ygc3luY2hyb25vdXNseSBmbHVzaGluZyBhbGwgd29yayB1cCB0byBhbmRcbiAgLy8gaW5jbHVkaW5nIHRoZSBnaXZlbiB0aW1lLlxuICBuZXh0Rmx1c2hlZFJvb3QgPSByb290O1xuICBuZXh0Rmx1c2hlZEV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gIHBlcmZvcm1Xb3JrT25Sb290KHJvb3QsIGV4cGlyYXRpb25UaW1lLCB0cnVlKTtcbiAgLy8gRmx1c2ggYW55IHN5bmMgd29yayB0aGF0IHdhcyBzY2hlZHVsZWQgYnkgbGlmZWN5Y2xlc1xuICBwZXJmb3JtU3luY1dvcmsoKTtcbn1cblxuZnVuY3Rpb24gZmluaXNoUmVuZGVyaW5nKCkge1xuICBuZXN0ZWRVcGRhdGVDb3VudCA9IDA7XG4gIGxhc3RDb21taXR0ZWRSb290RHVyaW5nVGhpc0JhdGNoID0gbnVsbDtcblxuICBpZiAoY29tcGxldGVkQmF0Y2hlcyAhPT0gbnVsbCkge1xuICAgIHZhciBiYXRjaGVzID0gY29tcGxldGVkQmF0Y2hlcztcbiAgICBjb21wbGV0ZWRCYXRjaGVzID0gbnVsbDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhdGNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiYXRjaCA9IGJhdGNoZXNbaV07XG4gICAgICB0cnkge1xuICAgICAgICBiYXRjaC5fb25Db21wbGV0ZSgpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKCFoYXNVbmhhbmRsZWRFcnJvcikge1xuICAgICAgICAgIGhhc1VuaGFuZGxlZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICB1bmhhbmRsZWRFcnJvciA9IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGhhc1VuaGFuZGxlZEVycm9yKSB7XG4gICAgdmFyIGVycm9yID0gdW5oYW5kbGVkRXJyb3I7XG4gICAgdW5oYW5kbGVkRXJyb3IgPSBudWxsO1xuICAgIGhhc1VuaGFuZGxlZEVycm9yID0gZmFsc2U7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGVyZm9ybVdvcmtPblJvb3Qocm9vdCwgZXhwaXJhdGlvblRpbWUsIGlzRXhwaXJlZCkge1xuICAhIWlzUmVuZGVyaW5nID8gaW52YXJpYW50KGZhbHNlLCAncGVyZm9ybVdvcmtPblJvb3Qgd2FzIGNhbGxlZCByZWN1cnNpdmVseS4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcblxuICBpc1JlbmRlcmluZyA9IHRydWU7XG5cbiAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhc3luYyB3b3JrIG9yIHN5bmMvZXhwaXJlZCB3b3JrLlxuICBpZiAoZGVhZGxpbmUgPT09IG51bGwgfHwgaXNFeHBpcmVkKSB7XG4gICAgLy8gRmx1c2ggd29yayB3aXRob3V0IHlpZWxkaW5nLlxuICAgIC8vIFRPRE86IE5vbi15aWVsZHkgd29yayBkb2VzIG5vdCBuZWNlc3NhcmlseSBpbXBseSBleHBpcmVkIHdvcmsuIEEgcmVuZGVyZXJcbiAgICAvLyBtYXkgd2FudCB0byBwZXJmb3JtIHNvbWUgd29yayB3aXRob3V0IHlpZWxkaW5nLCBidXQgYWxzbyB3aXRob3V0XG4gICAgLy8gcmVxdWlyaW5nIHRoZSByb290IHRvIGNvbXBsZXRlIChieSB0cmlnZ2VyaW5nIHBsYWNlaG9sZGVycykuXG5cbiAgICB2YXIgZmluaXNoZWRXb3JrID0gcm9vdC5maW5pc2hlZFdvcms7XG4gICAgaWYgKGZpbmlzaGVkV29yayAhPT0gbnVsbCkge1xuICAgICAgLy8gVGhpcyByb290IGlzIGFscmVhZHkgY29tcGxldGUuIFdlIGNhbiBjb21taXQgaXQuXG4gICAgICBjb21wbGV0ZVJvb3Qocm9vdCwgZmluaXNoZWRXb3JrLCBleHBpcmF0aW9uVGltZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3QuZmluaXNoZWRXb3JrID0gbnVsbDtcbiAgICAgIC8vIElmIHRoaXMgcm9vdCBwcmV2aW91c2x5IHN1c3BlbmRlZCwgY2xlYXIgaXRzIGV4aXN0aW5nIHRpbWVvdXQsIHNpbmNlXG4gICAgICAvLyB3ZSdyZSBhYm91dCB0byB0cnkgcmVuZGVyaW5nIGFnYWluLlxuICAgICAgdmFyIHRpbWVvdXRIYW5kbGUgPSByb290LnRpbWVvdXRIYW5kbGU7XG4gICAgICBpZiAodGltZW91dEhhbmRsZSAhPT0gbm9UaW1lb3V0KSB7XG4gICAgICAgIHJvb3QudGltZW91dEhhbmRsZSA9IG5vVGltZW91dDtcbiAgICAgICAgLy8gJEZsb3dGaXhNZSBDb21wbGFpbnMgbm9UaW1lb3V0IGlzIG5vdCBhIFRpbWVvdXRJRCwgZGVzcGl0ZSB0aGUgY2hlY2sgYWJvdmVcbiAgICAgICAgY2FuY2VsVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1lpZWxkeSA9IGZhbHNlO1xuICAgICAgcmVuZGVyUm9vdChyb290LCBpc1lpZWxkeSwgaXNFeHBpcmVkKTtcbiAgICAgIGZpbmlzaGVkV29yayA9IHJvb3QuZmluaXNoZWRXb3JrO1xuICAgICAgaWYgKGZpbmlzaGVkV29yayAhPT0gbnVsbCkge1xuICAgICAgICAvLyBXZSd2ZSBjb21wbGV0ZWQgdGhlIHJvb3QuIENvbW1pdCBpdC5cbiAgICAgICAgY29tcGxldGVSb290KHJvb3QsIGZpbmlzaGVkV29yaywgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBGbHVzaCBhc3luYyB3b3JrLlxuICAgIHZhciBfZmluaXNoZWRXb3JrID0gcm9vdC5maW5pc2hlZFdvcms7XG4gICAgaWYgKF9maW5pc2hlZFdvcmsgIT09IG51bGwpIHtcbiAgICAgIC8vIFRoaXMgcm9vdCBpcyBhbHJlYWR5IGNvbXBsZXRlLiBXZSBjYW4gY29tbWl0IGl0LlxuICAgICAgY29tcGxldGVSb290KHJvb3QsIF9maW5pc2hlZFdvcmssIGV4cGlyYXRpb25UaW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdC5maW5pc2hlZFdvcmsgPSBudWxsO1xuICAgICAgLy8gSWYgdGhpcyByb290IHByZXZpb3VzbHkgc3VzcGVuZGVkLCBjbGVhciBpdHMgZXhpc3RpbmcgdGltZW91dCwgc2luY2VcbiAgICAgIC8vIHdlJ3JlIGFib3V0IHRvIHRyeSByZW5kZXJpbmcgYWdhaW4uXG4gICAgICB2YXIgX3RpbWVvdXRIYW5kbGUgPSByb290LnRpbWVvdXRIYW5kbGU7XG4gICAgICBpZiAoX3RpbWVvdXRIYW5kbGUgIT09IG5vVGltZW91dCkge1xuICAgICAgICByb290LnRpbWVvdXRIYW5kbGUgPSBub1RpbWVvdXQ7XG4gICAgICAgIC8vICRGbG93Rml4TWUgQ29tcGxhaW5zIG5vVGltZW91dCBpcyBub3QgYSBUaW1lb3V0SUQsIGRlc3BpdGUgdGhlIGNoZWNrIGFib3ZlXG4gICAgICAgIGNhbmNlbFRpbWVvdXQoX3RpbWVvdXRIYW5kbGUpO1xuICAgICAgfVxuICAgICAgdmFyIF9pc1lpZWxkeSA9IHRydWU7XG4gICAgICByZW5kZXJSb290KHJvb3QsIF9pc1lpZWxkeSwgaXNFeHBpcmVkKTtcbiAgICAgIF9maW5pc2hlZFdvcmsgPSByb290LmZpbmlzaGVkV29yaztcbiAgICAgIGlmIChfZmluaXNoZWRXb3JrICE9PSBudWxsKSB7XG4gICAgICAgIC8vIFdlJ3ZlIGNvbXBsZXRlZCB0aGUgcm9vdC4gQ2hlY2sgdGhlIGRlYWRsaW5lIG9uZSBtb3JlIHRpbWVcbiAgICAgICAgLy8gYmVmb3JlIGNvbW1pdHRpbmcuXG4gICAgICAgIGlmICghc2hvdWxkWWllbGQoKSkge1xuICAgICAgICAgIC8vIFN0aWxsIHRpbWUgbGVmdC4gQ29tbWl0IHRoZSByb290LlxuICAgICAgICAgIGNvbXBsZXRlUm9vdChyb290LCBfZmluaXNoZWRXb3JrLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVGhlcmUncyBubyB0aW1lIGxlZnQuIE1hcmsgdGhpcyByb290IGFzIGNvbXBsZXRlLiBXZSdsbCBjb21lXG4gICAgICAgICAgLy8gYmFjayBhbmQgY29tbWl0IGl0IGxhdGVyLlxuICAgICAgICAgIHJvb3QuZmluaXNoZWRXb3JrID0gX2ZpbmlzaGVkV29yaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlzUmVuZGVyaW5nID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNvbXBsZXRlUm9vdChyb290LCBmaW5pc2hlZFdvcmssIGV4cGlyYXRpb25UaW1lKSB7XG4gIC8vIENoZWNrIGlmIHRoZXJlJ3MgYSBiYXRjaCB0aGF0IG1hdGNoZXMgdGhpcyBleHBpcmF0aW9uIHRpbWUuXG4gIHZhciBmaXJzdEJhdGNoID0gcm9vdC5maXJzdEJhdGNoO1xuICBpZiAoZmlyc3RCYXRjaCAhPT0gbnVsbCAmJiBmaXJzdEJhdGNoLl9leHBpcmF0aW9uVGltZSA8PSBleHBpcmF0aW9uVGltZSkge1xuICAgIGlmIChjb21wbGV0ZWRCYXRjaGVzID09PSBudWxsKSB7XG4gICAgICBjb21wbGV0ZWRCYXRjaGVzID0gW2ZpcnN0QmF0Y2hdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wbGV0ZWRCYXRjaGVzLnB1c2goZmlyc3RCYXRjaCk7XG4gICAgfVxuICAgIGlmIChmaXJzdEJhdGNoLl9kZWZlcikge1xuICAgICAgLy8gVGhpcyByb290IGlzIGJsb2NrZWQgZnJvbSBjb21taXR0aW5nIGJ5IGEgYmF0Y2guIFVuc2NoZWR1bGUgaXQgdW50aWxcbiAgICAgIC8vIHdlIHJlY2VpdmUgYW5vdGhlciB1cGRhdGUuXG4gICAgICByb290LmZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yaztcbiAgICAgIHJvb3QuZXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgLy8gQ29tbWl0IHRoZSByb290LlxuICByb290LmZpbmlzaGVkV29yayA9IG51bGw7XG5cbiAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhIG5lc3RlZCB1cGRhdGUgKGEgc3luYyB1cGRhdGUgc2NoZWR1bGVkIGR1cmluZyB0aGVcbiAgLy8gY29tbWl0IHBoYXNlKS5cbiAgaWYgKHJvb3QgPT09IGxhc3RDb21taXR0ZWRSb290RHVyaW5nVGhpc0JhdGNoKSB7XG4gICAgLy8gSWYgdGhlIG5leHQgcm9vdCBpcyB0aGUgc2FtZSBhcyB0aGUgcHJldmlvdXMgcm9vdCwgdGhpcyBpcyBhIG5lc3RlZFxuICAgIC8vIHVwZGF0ZS4gVG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wLCBpbmNyZW1lbnQgdGhlIG5lc3RlZCB1cGRhdGUgY291bnQuXG4gICAgbmVzdGVkVXBkYXRlQ291bnQrKztcbiAgfSBlbHNlIHtcbiAgICAvLyBSZXNldCB3aGVuZXZlciB3ZSBzd2l0Y2ggcm9vdHMuXG4gICAgbGFzdENvbW1pdHRlZFJvb3REdXJpbmdUaGlzQmF0Y2ggPSByb290O1xuICAgIG5lc3RlZFVwZGF0ZUNvdW50ID0gMDtcbiAgfVxuICBjb21taXRSb290KHJvb3QsIGZpbmlzaGVkV29yayk7XG59XG5cbi8vIFdoZW4gd29ya2luZyBvbiBhc3luYyB3b3JrLCB0aGUgcmVjb25jaWxlciBhc2tzIHRoZSByZW5kZXJlciBpZiBpdCBzaG91bGRcbi8vIHlpZWxkIGV4ZWN1dGlvbi4gRm9yIERPTSwgd2UgaW1wbGVtZW50IHRoaXMgd2l0aCByZXF1ZXN0SWRsZUNhbGxiYWNrLlxuZnVuY3Rpb24gc2hvdWxkWWllbGQoKSB7XG4gIGlmIChkZWFkbGluZURpZEV4cGlyZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChkZWFkbGluZSA9PT0gbnVsbCB8fCBkZWFkbGluZS50aW1lUmVtYWluaW5nKCkgPiB0aW1lSGV1cmlzdGljRm9yVW5pdE9mV29yaykge1xuICAgIC8vIERpc3JlZ2FyZCBkZWFkbGluZS5kaWRUaW1lb3V0LiBPbmx5IGV4cGlyZWQgd29yayBzaG91bGQgYmUgZmx1c2hlZFxuICAgIC8vIGR1cmluZyBhIHRpbWVvdXQuIFRoaXMgcGF0aCBpcyBvbmx5IGhpdCBmb3Igbm9uLWV4cGlyZWQgd29yay5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZGVhZGxpbmVEaWRFeHBpcmUgPSB0cnVlO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25VbmNhdWdodEVycm9yKGVycm9yKSB7XG4gICEobmV4dEZsdXNoZWRSb290ICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ1Nob3VsZCBiZSB3b3JraW5nIG9uIGEgcm9vdC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKSA6IHZvaWQgMDtcbiAgLy8gVW5zY2hlZHVsZSB0aGlzIHJvb3Qgc28gd2UgZG9uJ3Qgd29yayBvbiBpdCBhZ2FpbiB1bnRpbCB0aGVyZSdzXG4gIC8vIGFub3RoZXIgdXBkYXRlLlxuICBuZXh0Rmx1c2hlZFJvb3QuZXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gIGlmICghaGFzVW5oYW5kbGVkRXJyb3IpIHtcbiAgICBoYXNVbmhhbmRsZWRFcnJvciA9IHRydWU7XG4gICAgdW5oYW5kbGVkRXJyb3IgPSBlcnJvcjtcbiAgfVxufVxuXG4vLyBUT0RPOiBCYXRjaGluZyBzaG91bGQgYmUgaW1wbGVtZW50ZWQgYXQgdGhlIHJlbmRlcmVyIGxldmVsLCBub3QgaW5zaWRlXG4vLyB0aGUgcmVjb25jaWxlci5cbmZ1bmN0aW9uIGJhdGNoZWRVcGRhdGVzJDEoZm4sIGEpIHtcbiAgdmFyIHByZXZpb3VzSXNCYXRjaGluZ1VwZGF0ZXMgPSBpc0JhdGNoaW5nVXBkYXRlcztcbiAgaXNCYXRjaGluZ1VwZGF0ZXMgPSB0cnVlO1xuICB0cnkge1xuICAgIHJldHVybiBmbihhKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpc0JhdGNoaW5nVXBkYXRlcyA9IHByZXZpb3VzSXNCYXRjaGluZ1VwZGF0ZXM7XG4gICAgaWYgKCFpc0JhdGNoaW5nVXBkYXRlcyAmJiAhaXNSZW5kZXJpbmcpIHtcbiAgICAgIHBlcmZvcm1TeW5jV29yaygpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBUT0RPOiBCYXRjaGluZyBzaG91bGQgYmUgaW1wbGVtZW50ZWQgYXQgdGhlIHJlbmRlcmVyIGxldmVsLCBub3QgaW5zaWRlXG4vLyB0aGUgcmVjb25jaWxlci5cbmZ1bmN0aW9uIHVuYmF0Y2hlZFVwZGF0ZXMoZm4sIGEpIHtcbiAgaWYgKGlzQmF0Y2hpbmdVcGRhdGVzICYmICFpc1VuYmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgaXNVbmJhdGNoaW5nVXBkYXRlcyA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmbihhKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNVbmJhdGNoaW5nVXBkYXRlcyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZm4oYSk7XG59XG5cbi8vIFRPRE86IEJhdGNoaW5nIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBhdCB0aGUgcmVuZGVyZXIgbGV2ZWwsIG5vdCB3aXRoaW5cbi8vIHRoZSByZWNvbmNpbGVyLlxuZnVuY3Rpb24gZmx1c2hTeW5jKGZuLCBhKSB7XG4gICEhaXNSZW5kZXJpbmcgPyBpbnZhcmlhbnQoZmFsc2UsICdmbHVzaFN5bmMgd2FzIGNhbGxlZCBmcm9tIGluc2lkZSBhIGxpZmVjeWNsZSBtZXRob2QuIEl0IGNhbm5vdCBiZSBjYWxsZWQgd2hlbiBSZWFjdCBpcyBhbHJlYWR5IHJlbmRlcmluZy4nKSA6IHZvaWQgMDtcbiAgdmFyIHByZXZpb3VzSXNCYXRjaGluZ1VwZGF0ZXMgPSBpc0JhdGNoaW5nVXBkYXRlcztcbiAgaXNCYXRjaGluZ1VwZGF0ZXMgPSB0cnVlO1xuICB0cnkge1xuICAgIHJldHVybiBzeW5jVXBkYXRlcyhmbiwgYSk7XG4gIH0gZmluYWxseSB7XG4gICAgaXNCYXRjaGluZ1VwZGF0ZXMgPSBwcmV2aW91c0lzQmF0Y2hpbmdVcGRhdGVzO1xuICAgIHBlcmZvcm1TeW5jV29yaygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludGVyYWN0aXZlVXBkYXRlcyQxKGZuLCBhLCBiKSB7XG4gIGlmIChpc0JhdGNoaW5nSW50ZXJhY3RpdmVVcGRhdGVzKSB7XG4gICAgcmV0dXJuIGZuKGEsIGIpO1xuICB9XG4gIC8vIElmIHRoZXJlIGFyZSBhbnkgcGVuZGluZyBpbnRlcmFjdGl2ZSB1cGRhdGVzLCBzeW5jaHJvbm91c2x5IGZsdXNoIHRoZW0uXG4gIC8vIFRoaXMgbmVlZHMgdG8gaGFwcGVuIGJlZm9yZSB3ZSByZWFkIGFueSBoYW5kbGVycywgYmVjYXVzZSB0aGUgZWZmZWN0IG9mXG4gIC8vIHRoZSBwcmV2aW91cyBldmVudCBtYXkgaW5mbHVlbmNlIHdoaWNoIGhhbmRsZXJzIGFyZSBjYWxsZWQgZHVyaW5nXG4gIC8vIHRoaXMgZXZlbnQuXG4gIGlmICghaXNCYXRjaGluZ1VwZGF0ZXMgJiYgIWlzUmVuZGVyaW5nICYmIGxvd2VzdFByaW9yaXR5UGVuZGluZ0ludGVyYWN0aXZlRXhwaXJhdGlvblRpbWUgIT09IE5vV29yaykge1xuICAgIC8vIFN5bmNocm9ub3VzbHkgZmx1c2ggcGVuZGluZyBpbnRlcmFjdGl2ZSB1cGRhdGVzLlxuICAgIHBlcmZvcm1Xb3JrKGxvd2VzdFByaW9yaXR5UGVuZGluZ0ludGVyYWN0aXZlRXhwaXJhdGlvblRpbWUsIG51bGwpO1xuICAgIGxvd2VzdFByaW9yaXR5UGVuZGluZ0ludGVyYWN0aXZlRXhwaXJhdGlvblRpbWUgPSBOb1dvcms7XG4gIH1cbiAgdmFyIHByZXZpb3VzSXNCYXRjaGluZ0ludGVyYWN0aXZlVXBkYXRlcyA9IGlzQmF0Y2hpbmdJbnRlcmFjdGl2ZVVwZGF0ZXM7XG4gIHZhciBwcmV2aW91c0lzQmF0Y2hpbmdVcGRhdGVzID0gaXNCYXRjaGluZ1VwZGF0ZXM7XG4gIGlzQmF0Y2hpbmdJbnRlcmFjdGl2ZVVwZGF0ZXMgPSB0cnVlO1xuICBpc0JhdGNoaW5nVXBkYXRlcyA9IHRydWU7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZuKGEsIGIpO1xuICB9IGZpbmFsbHkge1xuICAgIGlzQmF0Y2hpbmdJbnRlcmFjdGl2ZVVwZGF0ZXMgPSBwcmV2aW91c0lzQmF0Y2hpbmdJbnRlcmFjdGl2ZVVwZGF0ZXM7XG4gICAgaXNCYXRjaGluZ1VwZGF0ZXMgPSBwcmV2aW91c0lzQmF0Y2hpbmdVcGRhdGVzO1xuICAgIGlmICghaXNCYXRjaGluZ1VwZGF0ZXMgJiYgIWlzUmVuZGVyaW5nKSB7XG4gICAgICBwZXJmb3JtU3luY1dvcmsoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMkMSgpIHtcbiAgaWYgKCFpc1JlbmRlcmluZyAmJiBsb3dlc3RQcmlvcml0eVBlbmRpbmdJbnRlcmFjdGl2ZUV4cGlyYXRpb25UaW1lICE9PSBOb1dvcmspIHtcbiAgICAvLyBTeW5jaHJvbm91c2x5IGZsdXNoIHBlbmRpbmcgaW50ZXJhY3RpdmUgdXBkYXRlcy5cbiAgICBwZXJmb3JtV29yayhsb3dlc3RQcmlvcml0eVBlbmRpbmdJbnRlcmFjdGl2ZUV4cGlyYXRpb25UaW1lLCBudWxsKTtcbiAgICBsb3dlc3RQcmlvcml0eVBlbmRpbmdJbnRlcmFjdGl2ZUV4cGlyYXRpb25UaW1lID0gTm9Xb3JrO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZsdXNoQ29udHJvbGxlZChmbikge1xuICB2YXIgcHJldmlvdXNJc0JhdGNoaW5nVXBkYXRlcyA9IGlzQmF0Y2hpbmdVcGRhdGVzO1xuICBpc0JhdGNoaW5nVXBkYXRlcyA9IHRydWU7XG4gIHRyeSB7XG4gICAgc3luY1VwZGF0ZXMoZm4pO1xuICB9IGZpbmFsbHkge1xuICAgIGlzQmF0Y2hpbmdVcGRhdGVzID0gcHJldmlvdXNJc0JhdGNoaW5nVXBkYXRlcztcbiAgICBpZiAoIWlzQmF0Y2hpbmdVcGRhdGVzICYmICFpc1JlbmRlcmluZykge1xuICAgICAgcGVyZm9ybVN5bmNXb3JrKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIDAgaXMgUFJPRCwgMSBpcyBERVYuXG4vLyBNaWdodCBhZGQgUFJPRklMRSBsYXRlci5cblxuXG52YXIgZGlkV2FybkFib3V0TmVzdGVkVXBkYXRlcyA9IHZvaWQgMDtcbnZhciBkaWRXYXJuQWJvdXRGaW5kTm9kZUluU3RyaWN0TW9kZSA9IHZvaWQgMDtcblxue1xuICBkaWRXYXJuQWJvdXROZXN0ZWRVcGRhdGVzID0gZmFsc2U7XG4gIGRpZFdhcm5BYm91dEZpbmROb2RlSW5TdHJpY3RNb2RlID0ge307XG59XG5cbmZ1bmN0aW9uIGdldENvbnRleHRGb3JTdWJ0cmVlKHBhcmVudENvbXBvbmVudCkge1xuICBpZiAoIXBhcmVudENvbXBvbmVudCkge1xuICAgIHJldHVybiBlbXB0eUNvbnRleHRPYmplY3Q7XG4gIH1cblxuICB2YXIgZmliZXIgPSBnZXQocGFyZW50Q29tcG9uZW50KTtcbiAgdmFyIHBhcmVudENvbnRleHQgPSBmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dChmaWJlcik7XG5cbiAgaWYgKGZpYmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQpIHtcbiAgICB2YXIgQ29tcG9uZW50ID0gZmliZXIudHlwZTtcbiAgICBpZiAoaXNDb250ZXh0UHJvdmlkZXIoQ29tcG9uZW50KSkge1xuICAgICAgcmV0dXJuIHByb2Nlc3NDaGlsZENvbnRleHQoZmliZXIsIENvbXBvbmVudCwgcGFyZW50Q29udGV4dCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcmVudENvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIHNjaGVkdWxlUm9vdFVwZGF0ZShjdXJyZW50JCQxLCBlbGVtZW50LCBleHBpcmF0aW9uVGltZSwgY2FsbGJhY2spIHtcbiAge1xuICAgIGlmIChwaGFzZSA9PT0gJ3JlbmRlcicgJiYgY3VycmVudCAhPT0gbnVsbCAmJiAhZGlkV2FybkFib3V0TmVzdGVkVXBkYXRlcykge1xuICAgICAgZGlkV2FybkFib3V0TmVzdGVkVXBkYXRlcyA9IHRydWU7XG4gICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZTsgJyArICd0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tIHJlbmRlciBpcyBub3QgYWxsb3dlZC4gJyArICdJZiBuZWNlc3NhcnksIHRyaWdnZXIgbmVzdGVkIHVwZGF0ZXMgaW4gY29tcG9uZW50RGlkVXBkYXRlLlxcblxcbicgKyAnQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgJXMuJywgZ2V0Q29tcG9uZW50TmFtZShjdXJyZW50LnR5cGUpIHx8ICdVbmtub3duJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShleHBpcmF0aW9uVGltZSk7XG4gIC8vIENhdXRpb246IFJlYWN0IERldlRvb2xzIGN1cnJlbnRseSBkZXBlbmRzIG9uIHRoaXMgcHJvcGVydHlcbiAgLy8gYmVpbmcgY2FsbGVkIFwiZWxlbWVudFwiLlxuICB1cGRhdGUucGF5bG9hZCA9IHsgZWxlbWVudDogZWxlbWVudCB9O1xuXG4gIGNhbGxiYWNrID0gY2FsbGJhY2sgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjYWxsYmFjaztcbiAgaWYgKGNhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgISh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAncmVuZGVyKC4uLik6IEV4cGVjdGVkIHRoZSBsYXN0IG9wdGlvbmFsIGBjYWxsYmFja2AgYXJndW1lbnQgdG8gYmUgYSAnICsgJ2Z1bmN0aW9uLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcy4nLCBjYWxsYmFjaykgOiB2b2lkIDA7XG4gICAgdXBkYXRlLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gIH1cbiAgZW5xdWV1ZVVwZGF0ZShjdXJyZW50JCQxLCB1cGRhdGUpO1xuXG4gIHNjaGVkdWxlV29yayhjdXJyZW50JCQxLCBleHBpcmF0aW9uVGltZSk7XG4gIHJldHVybiBleHBpcmF0aW9uVGltZTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZShlbGVtZW50LCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgZXhwaXJhdGlvblRpbWUsIGNhbGxiYWNrKSB7XG4gIC8vIFRPRE86IElmIHRoaXMgaXMgYSBuZXN0ZWQgY29udGFpbmVyLCB0aGlzIHdvbid0IGJlIHRoZSByb290LlxuICB2YXIgY3VycmVudCQkMSA9IGNvbnRhaW5lci5jdXJyZW50O1xuXG4gIHtcbiAgICBpZiAoUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbl8xLmRlYnVnVG9vbCkge1xuICAgICAgaWYgKGN1cnJlbnQkJDEuYWx0ZXJuYXRlID09PSBudWxsKSB7XG4gICAgICAgIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wub25Nb3VudENvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgfSBlbHNlIGlmIChlbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb25fMS5kZWJ1Z1Rvb2wub25Vbm1vdW50Q29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uXzEuZGVidWdUb29sLm9uVXBkYXRlQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbnRleHQgPSBnZXRDb250ZXh0Rm9yU3VidHJlZShwYXJlbnRDb21wb25lbnQpO1xuICBpZiAoY29udGFpbmVyLmNvbnRleHQgPT09IG51bGwpIHtcbiAgICBjb250YWluZXIuY29udGV4dCA9IGNvbnRleHQ7XG4gIH0gZWxzZSB7XG4gICAgY29udGFpbmVyLnBlbmRpbmdDb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIHJldHVybiBzY2hlZHVsZVJvb3RVcGRhdGUoY3VycmVudCQkMSwgZWxlbWVudCwgZXhwaXJhdGlvblRpbWUsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gZmluZEhvc3RJbnN0YW5jZShjb21wb25lbnQpIHtcbiAgdmFyIGZpYmVyID0gZ2V0KGNvbXBvbmVudCk7XG4gIGlmIChmaWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnQucmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbnZhcmlhbnQoZmFsc2UsICdVbmFibGUgdG8gZmluZCBub2RlIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGludmFyaWFudChmYWxzZSwgJ0FyZ3VtZW50IGFwcGVhcnMgdG8gbm90IGJlIGEgUmVhY3RDb21wb25lbnQuIEtleXM6ICVzJywgT2JqZWN0LmtleXMoY29tcG9uZW50KSk7XG4gICAgfVxuICB9XG4gIHZhciBob3N0RmliZXIgPSBmaW5kQ3VycmVudEhvc3RGaWJlcihmaWJlcik7XG4gIGlmIChob3N0RmliZXIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gaG9zdEZpYmVyLnN0YXRlTm9kZTtcbn1cblxuZnVuY3Rpb24gZmluZEhvc3RJbnN0YW5jZVdpdGhXYXJuaW5nKGNvbXBvbmVudCwgbWV0aG9kTmFtZSkge1xuICB7XG4gICAgdmFyIGZpYmVyID0gZ2V0KGNvbXBvbmVudCk7XG4gICAgaWYgKGZpYmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50LnJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdVbmFibGUgdG8gZmluZCBub2RlIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnZhcmlhbnQoZmFsc2UsICdBcmd1bWVudCBhcHBlYXJzIHRvIG5vdCBiZSBhIFJlYWN0Q29tcG9uZW50LiBLZXlzOiAlcycsIE9iamVjdC5rZXlzKGNvbXBvbmVudCkpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgaG9zdEZpYmVyID0gZmluZEN1cnJlbnRIb3N0RmliZXIoZmliZXIpO1xuICAgIGlmIChob3N0RmliZXIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaG9zdEZpYmVyLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoZmliZXIudHlwZSkgfHwgJ0NvbXBvbmVudCc7XG4gICAgICBpZiAoIWRpZFdhcm5BYm91dEZpbmROb2RlSW5TdHJpY3RNb2RlW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgIGRpZFdhcm5BYm91dEZpbmROb2RlSW5TdHJpY3RNb2RlW2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgICAgaWYgKGZpYmVyLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICAgICAgd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMgaXMgZGVwcmVjYXRlZCBpbiBTdHJpY3RNb2RlLiAnICsgJyVzIHdhcyBwYXNzZWQgYW4gaW5zdGFuY2Ugb2YgJXMgd2hpY2ggaXMgaW5zaWRlIFN0cmljdE1vZGUuICcgKyAnSW5zdGVhZCwgYWRkIGEgcmVmIGRpcmVjdGx5IHRvIHRoZSBlbGVtZW50IHlvdSB3YW50IHRvIHJlZmVyZW5jZS4nICsgJ1xcbiVzJyArICdcXG5cXG5MZWFybiBtb3JlIGFib3V0IHVzaW5nIHJlZnMgc2FmZWx5IGhlcmU6JyArICdcXG5odHRwczovL2ZiLm1lL3JlYWN0LXN0cmljdC1tb2RlLWZpbmQtbm9kZScsIG1ldGhvZE5hbWUsIG1ldGhvZE5hbWUsIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChob3N0RmliZXIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICclcyBpcyBkZXByZWNhdGVkIGluIFN0cmljdE1vZGUuICcgKyAnJXMgd2FzIHBhc3NlZCBhbiBpbnN0YW5jZSBvZiAlcyB3aGljaCByZW5kZXJzIFN0cmljdE1vZGUgY2hpbGRyZW4uICcgKyAnSW5zdGVhZCwgYWRkIGEgcmVmIGRpcmVjdGx5IHRvIHRoZSBlbGVtZW50IHlvdSB3YW50IHRvIHJlZmVyZW5jZS4nICsgJ1xcbiVzJyArICdcXG5cXG5MZWFybiBtb3JlIGFib3V0IHVzaW5nIHJlZnMgc2FmZWx5IGhlcmU6JyArICdcXG5odHRwczovL2ZiLm1lL3JlYWN0LXN0cmljdC1tb2RlLWZpbmQtbm9kZScsIG1ldGhvZE5hbWUsIG1ldGhvZE5hbWUsIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChob3N0RmliZXIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaG9zdEZpYmVyLnN0YXRlTm9kZTtcbiAgfVxuICByZXR1cm4gZmluZEhvc3RJbnN0YW5jZShjb21wb25lbnQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb250YWluZXIoY29udGFpbmVySW5mbywgaXNDb25jdXJyZW50LCBoeWRyYXRlKSB7XG4gIHJldHVybiBjcmVhdGVGaWJlclJvb3QoY29udGFpbmVySW5mbywgaXNDb25jdXJyZW50LCBoeWRyYXRlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29udGFpbmVyKGVsZW1lbnQsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBjYWxsYmFjaykge1xuICB2YXIgY3VycmVudCQkMSA9IGNvbnRhaW5lci5jdXJyZW50O1xuICB2YXIgY3VycmVudFRpbWUgPSByZXF1ZXN0Q3VycmVudFRpbWUoKTtcbiAgdmFyIGV4cGlyYXRpb25UaW1lID0gY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcihjdXJyZW50VGltZSwgY3VycmVudCQkMSk7XG4gIHJldHVybiB1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lKGVsZW1lbnQsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBleHBpcmF0aW9uVGltZSwgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBnZXRQdWJsaWNSb290SW5zdGFuY2UoY29udGFpbmVyKSB7XG4gIHZhciBjb250YWluZXJGaWJlciA9IGNvbnRhaW5lci5jdXJyZW50O1xuICBpZiAoIWNvbnRhaW5lckZpYmVyLmNoaWxkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgc3dpdGNoIChjb250YWluZXJGaWJlci5jaGlsZC50YWcpIHtcbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICByZXR1cm4gZ2V0UHVibGljSW5zdGFuY2UoY29udGFpbmVyRmliZXIuY2hpbGQuc3RhdGVOb2RlKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGNvbnRhaW5lckZpYmVyLmNoaWxkLnN0YXRlTm9kZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFscyhmaWJlcikge1xuICB2YXIgaG9zdEZpYmVyID0gZmluZEN1cnJlbnRIb3N0RmliZXJXaXRoTm9Qb3J0YWxzKGZpYmVyKTtcbiAgaWYgKGhvc3RGaWJlciA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBob3N0RmliZXIuc3RhdGVOb2RlO1xufVxuXG5mdW5jdGlvbiBpbmplY3RJbnRvRGV2VG9vbHMoZGV2VG9vbHNDb25maWcpIHtcbiAgdmFyIGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlID0gZGV2VG9vbHNDb25maWcuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7XG5cbiAgcmV0dXJuIGluamVjdEludGVybmFscyhfYXNzaWduKHt9LCBkZXZUb29sc0NvbmZpZywge1xuICAgIGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOiBmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgIHZhciBob3N0RmliZXIgPSBmaW5kQ3VycmVudEhvc3RGaWJlcihmaWJlcik7XG4gICAgICBpZiAoaG9zdEZpYmVyID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhvc3RGaWJlci5zdGF0ZU5vZGU7XG4gICAgfSxcbiAgICBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTogZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICBpZiAoIWZpbmRGaWJlckJ5SG9zdEluc3RhbmNlKSB7XG4gICAgICAgIC8vIE1pZ2h0IG5vdCBiZSBpbXBsZW1lbnRlZCBieSB0aGUgcmVuZGVyZXIuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlKGluc3RhbmNlKTtcbiAgICB9XG4gIH0pKTtcbn1cblxuLy8gVGhpcyBmaWxlIGludGVudGlvbmFsbHkgZG9lcyAqbm90KiBoYXZlIHRoZSBGbG93IGFubm90YXRpb24uXG4vLyBEb24ndCBhZGQgaXQuIFNlZSBgLi9pbmxpbmUtdHlwZWQuanNgIGZvciBhbiBleHBsYW5hdGlvbi5cblxuZnVuY3Rpb24gY3JlYXRlUG9ydGFsJDEoY2hpbGRyZW4sIGNvbnRhaW5lckluZm8sXG4vLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBBUEkgZm9yIGNyb3NzLXJlbmRlcmVyIGltcGxlbWVudGF0aW9uLlxuaW1wbGVtZW50YXRpb24pIHtcbiAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICByZXR1cm4ge1xuICAgIC8vIFRoaXMgdGFnIGFsbG93IHVzIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgYXMgYSBSZWFjdCBQb3J0YWxcbiAgICAkJHR5cGVvZjogUkVBQ1RfUE9SVEFMX1RZUEUsXG4gICAga2V5OiBrZXkgPT0gbnVsbCA/IG51bGwgOiAnJyArIGtleSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgY29udGFpbmVySW5mbzogY29udGFpbmVySW5mbyxcbiAgICBpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb25cbiAgfTtcbn1cblxuLy8gVE9ETzogdGhpcyBpcyBzcGVjaWFsIGJlY2F1c2UgaXQgZ2V0cyBpbXBvcnRlZCBkdXJpbmcgYnVpbGQuXG5cbnZhciBSZWFjdFZlcnNpb24gPSAnMTYuNi4wJztcblxuLy8gVE9ETzogVGhpcyB0eXBlIGlzIHNoYXJlZCBiZXR3ZWVuIHRoZSByZWNvbmNpbGVyIGFuZCBSZWFjdERPTSwgYnV0IHdpbGxcbi8vIGV2ZW50dWFsbHkgYmUgbGlmdGVkIG91dCB0byB0aGUgcmVuZGVyZXIuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdEN1cnJlbnRPd25lcjtcblxudmFyIHRvcExldmVsVXBkYXRlV2FybmluZ3MgPSB2b2lkIDA7XG52YXIgd2Fybk9uSW52YWxpZENhbGxiYWNrID0gdm9pZCAwO1xudmFyIGRpZFdhcm5BYm91dFVuc3RhYmxlQ3JlYXRlUG9ydGFsID0gZmFsc2U7XG5cbntcbiAgaWYgKHR5cGVvZiBNYXAgIT09ICdmdW5jdGlvbicgfHxcbiAgLy8gJEZsb3dJc3N1ZSBGbG93IGluY29ycmVjdGx5IHRoaW5rcyBNYXAgaGFzIG5vIHByb3RvdHlwZVxuICBNYXAucHJvdG90eXBlID09IG51bGwgfHwgdHlwZW9mIE1hcC5wcm90b3R5cGUuZm9yRWFjaCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgU2V0ICE9PSAnZnVuY3Rpb24nIHx8XG4gIC8vICRGbG93SXNzdWUgRmxvdyBpbmNvcnJlY3RseSB0aGlua3MgU2V0IGhhcyBubyBwcm90b3R5cGVcbiAgU2V0LnByb3RvdHlwZSA9PSBudWxsIHx8IHR5cGVvZiBTZXQucHJvdG90eXBlLmNsZWFyICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBTZXQucHJvdG90eXBlLmZvckVhY2ggIT09ICdmdW5jdGlvbicpIHtcbiAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdSZWFjdCBkZXBlbmRzIG9uIE1hcCBhbmQgU2V0IGJ1aWx0LWluIHR5cGVzLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhICcgKyAncG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzJyk7XG4gIH1cblxuICB0b3BMZXZlbFVwZGF0ZVdhcm5pbmdzID0gZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgIGlmIChjb250YWluZXIuX3JlYWN0Um9vdENvbnRhaW5lciAmJiBjb250YWluZXIubm9kZVR5cGUgIT09IENPTU1FTlRfTk9ERSkge1xuICAgICAgdmFyIGhvc3RJbnN0YW5jZSA9IGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzKGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyLl9pbnRlcm5hbFJvb3QuY3VycmVudCk7XG4gICAgICBpZiAoaG9zdEluc3RhbmNlKSB7XG4gICAgICAgICEoaG9zdEluc3RhbmNlLnBhcmVudE5vZGUgPT09IGNvbnRhaW5lcikgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdyZW5kZXIoLi4uKTogSXQgbG9va3MgbGlrZSB0aGUgUmVhY3QtcmVuZGVyZWQgY29udGVudCBvZiB0aGlzICcgKyAnY29udGFpbmVyIHdhcyByZW1vdmVkIHdpdGhvdXQgdXNpbmcgUmVhY3QuIFRoaXMgaXMgbm90ICcgKyAnc3VwcG9ydGVkIGFuZCB3aWxsIGNhdXNlIGVycm9ycy4gSW5zdGVhZCwgY2FsbCAnICsgJ1JlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUgdG8gZW1wdHkgYSBjb250YWluZXIuJykgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGlzUm9vdFJlbmRlcmVkQnlTb21lUmVhY3QgPSAhIWNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyO1xuICAgIHZhciByb290RWwgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICB2YXIgaGFzTm9uUm9vdFJlYWN0Q2hpbGQgPSAhIShyb290RWwgJiYgZ2V0SW5zdGFuY2VGcm9tTm9kZSQxKHJvb3RFbCkpO1xuXG4gICAgISghaGFzTm9uUm9vdFJlYWN0Q2hpbGQgfHwgaXNSb290UmVuZGVyZWRCeVNvbWVSZWFjdCkgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdyZW5kZXIoLi4uKTogUmVwbGFjaW5nIFJlYWN0LXJlbmRlcmVkIGNoaWxkcmVuIHdpdGggYSBuZXcgcm9vdCAnICsgJ2NvbXBvbmVudC4gSWYgeW91IGludGVuZGVkIHRvIHVwZGF0ZSB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlLCAnICsgJ3lvdSBzaG91bGQgaW5zdGVhZCBoYXZlIHRoZSBleGlzdGluZyBjaGlsZHJlbiB1cGRhdGUgdGhlaXIgc3RhdGUgJyArICdhbmQgcmVuZGVyIHRoZSBuZXcgY29tcG9uZW50cyBpbnN0ZWFkIG9mIGNhbGxpbmcgUmVhY3RET00ucmVuZGVyLicpIDogdm9pZCAwO1xuXG4gICAgIShjb250YWluZXIubm9kZVR5cGUgIT09IEVMRU1FTlRfTk9ERSB8fCAhY29udGFpbmVyLnRhZ05hbWUgfHwgY29udGFpbmVyLnRhZ05hbWUudG9VcHBlckNhc2UoKSAhPT0gJ0JPRFknKSA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgJ3JlbmRlcigpOiBSZW5kZXJpbmcgY29tcG9uZW50cyBkaXJlY3RseSBpbnRvIGRvY3VtZW50LmJvZHkgaXMgJyArICdkaXNjb3VyYWdlZCwgc2luY2UgaXRzIGNoaWxkcmVuIGFyZSBvZnRlbiBtYW5pcHVsYXRlZCBieSB0aGlyZC1wYXJ0eSAnICsgJ3NjcmlwdHMgYW5kIGJyb3dzZXIgZXh0ZW5zaW9ucy4gVGhpcyBtYXkgbGVhZCB0byBzdWJ0bGUgJyArICdyZWNvbmNpbGlhdGlvbiBpc3N1ZXMuIFRyeSByZW5kZXJpbmcgaW50byBhIGNvbnRhaW5lciBlbGVtZW50IGNyZWF0ZWQgJyArICdmb3IgeW91ciBhcHAuJykgOiB2b2lkIDA7XG4gIH07XG5cbiAgd2Fybk9uSW52YWxpZENhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjYWxsZXJOYW1lKSB7XG4gICAgIShjYWxsYmFjayA9PT0gbnVsbCB8fCB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMoLi4uKTogRXhwZWN0ZWQgdGhlIGxhc3Qgb3B0aW9uYWwgYGNhbGxiYWNrYCBhcmd1bWVudCB0byBiZSBhICcgKyAnZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzLicsIGNhbGxlck5hbWUsIGNhbGxiYWNrKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuc2V0UmVzdG9yZUltcGxlbWVudGF0aW9uKHJlc3RvcmVDb250cm9sbGVkU3RhdGUkMSk7XG5cbmZ1bmN0aW9uIFJlYWN0QmF0Y2gocm9vdCkge1xuICB2YXIgZXhwaXJhdGlvblRpbWUgPSBjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uKCk7XG4gIHRoaXMuX2V4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWU7XG4gIHRoaXMuX3Jvb3QgPSByb290O1xuICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgdGhpcy5fZGlkQ29tcGxldGUgPSBmYWxzZTtcbiAgdGhpcy5faGFzQ2hpbGRyZW4gPSBmYWxzZTtcbiAgdGhpcy5fY2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLl9kZWZlciA9IHRydWU7XG59XG5SZWFjdEJhdGNoLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgIXRoaXMuX2RlZmVyID8gaW52YXJpYW50KGZhbHNlLCAnYmF0Y2gucmVuZGVyOiBDYW5ub3QgcmVuZGVyIGEgYmF0Y2ggdGhhdCBhbHJlYWR5IGNvbW1pdHRlZC4nKSA6IHZvaWQgMDtcbiAgdGhpcy5faGFzQ2hpbGRyZW4gPSB0cnVlO1xuICB0aGlzLl9jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB2YXIgaW50ZXJuYWxSb290ID0gdGhpcy5fcm9vdC5faW50ZXJuYWxSb290O1xuICB2YXIgZXhwaXJhdGlvblRpbWUgPSB0aGlzLl9leHBpcmF0aW9uVGltZTtcbiAgdmFyIHdvcmsgPSBuZXcgUmVhY3RXb3JrKCk7XG4gIHVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUoY2hpbGRyZW4sIGludGVybmFsUm9vdCwgbnVsbCwgZXhwaXJhdGlvblRpbWUsIHdvcmsuX29uQ29tbWl0KTtcbiAgcmV0dXJuIHdvcms7XG59O1xuUmVhY3RCYXRjaC5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIChvbkNvbXBsZXRlKSB7XG4gIGlmICh0aGlzLl9kaWRDb21wbGV0ZSkge1xuICAgIG9uQ29tcGxldGUoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcztcbiAgaWYgKGNhbGxiYWNrcyA9PT0gbnVsbCkge1xuICAgIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyA9IFtdO1xuICB9XG4gIGNhbGxiYWNrcy5wdXNoKG9uQ29tcGxldGUpO1xufTtcblJlYWN0QmF0Y2gucHJvdG90eXBlLmNvbW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGludGVybmFsUm9vdCA9IHRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdDtcbiAgdmFyIGZpcnN0QmF0Y2ggPSBpbnRlcm5hbFJvb3QuZmlyc3RCYXRjaDtcbiAgISh0aGlzLl9kZWZlciAmJiBmaXJzdEJhdGNoICE9PSBudWxsKSA/IGludmFyaWFudChmYWxzZSwgJ2JhdGNoLmNvbW1pdDogQ2Fubm90IGNvbW1pdCBhIGJhdGNoIG11bHRpcGxlIHRpbWVzLicpIDogdm9pZCAwO1xuXG4gIGlmICghdGhpcy5faGFzQ2hpbGRyZW4pIHtcbiAgICAvLyBUaGlzIGJhdGNoIGlzIGVtcHR5LiBSZXR1cm4uXG4gICAgdGhpcy5fbmV4dCA9IG51bGw7XG4gICAgdGhpcy5fZGVmZXIgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZXhwaXJhdGlvblRpbWUgPSB0aGlzLl9leHBpcmF0aW9uVGltZTtcblxuICAvLyBFbnN1cmUgdGhpcyBpcyB0aGUgZmlyc3QgYmF0Y2ggaW4gdGhlIGxpc3QuXG4gIGlmIChmaXJzdEJhdGNoICE9PSB0aGlzKSB7XG4gICAgLy8gVGhpcyBiYXRjaCBpcyBub3QgdGhlIGVhcmxpZXN0IGJhdGNoLiBXZSBuZWVkIHRvIG1vdmUgaXQgdG8gdGhlIGZyb250LlxuICAgIC8vIFVwZGF0ZSBpdHMgZXhwaXJhdGlvbiB0aW1lIHRvIGJlIHRoZSBleHBpcmF0aW9uIHRpbWUgb2YgdGhlIGVhcmxpZXN0XG4gICAgLy8gYmF0Y2gsIHNvIHRoYXQgd2UgY2FuIGZsdXNoIGl0IHdpdGhvdXQgZmx1c2hpbmcgdGhlIG90aGVyIGJhdGNoZXMuXG4gICAgaWYgKHRoaXMuX2hhc0NoaWxkcmVuKSB7XG4gICAgICBleHBpcmF0aW9uVGltZSA9IHRoaXMuX2V4cGlyYXRpb25UaW1lID0gZmlyc3RCYXRjaC5fZXhwaXJhdGlvblRpbWU7XG4gICAgICAvLyBSZW5kZXJpbmcgdGhpcyBiYXRjaCBhZ2FpbiBlbnN1cmVzIGl0cyBjaGlsZHJlbiB3aWxsIGJlIHRoZSBmaW5hbCBzdGF0ZVxuICAgICAgLy8gd2hlbiB3ZSBmbHVzaCAodXBkYXRlcyBhcmUgcHJvY2Vzc2VkIGluIGluc2VydGlvbiBvcmRlcjogbGFzdFxuICAgICAgLy8gdXBkYXRlIHdpbnMpLlxuICAgICAgLy8gVE9ETzogVGhpcyBmb3JjZXMgYSByZXN0YXJ0LiBTaG91bGQgd2UgcHJpbnQgYSB3YXJuaW5nP1xuICAgICAgdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSB0aGUgYmF0Y2ggZnJvbSB0aGUgbGlzdC5cbiAgICB2YXIgcHJldmlvdXMgPSBudWxsO1xuICAgIHZhciBiYXRjaCA9IGZpcnN0QmF0Y2g7XG4gICAgd2hpbGUgKGJhdGNoICE9PSB0aGlzKSB7XG4gICAgICBwcmV2aW91cyA9IGJhdGNoO1xuICAgICAgYmF0Y2ggPSBiYXRjaC5fbmV4dDtcbiAgICB9XG4gICAgIShwcmV2aW91cyAhPT0gbnVsbCkgPyBpbnZhcmlhbnQoZmFsc2UsICdiYXRjaC5jb21taXQ6IENhbm5vdCBjb21taXQgYSBiYXRjaCBtdWx0aXBsZSB0aW1lcy4nKSA6IHZvaWQgMDtcbiAgICBwcmV2aW91cy5fbmV4dCA9IGJhdGNoLl9uZXh0O1xuXG4gICAgLy8gQWRkIGl0IHRvIHRoZSBmcm9udC5cbiAgICB0aGlzLl9uZXh0ID0gZmlyc3RCYXRjaDtcbiAgICBmaXJzdEJhdGNoID0gaW50ZXJuYWxSb290LmZpcnN0QmF0Y2ggPSB0aGlzO1xuICB9XG5cbiAgLy8gU3luY2hyb25vdXNseSBmbHVzaCBhbGwgdGhlIHdvcmsgdXAgdG8gdGhpcyBiYXRjaCdzIGV4cGlyYXRpb24gdGltZS5cbiAgdGhpcy5fZGVmZXIgPSBmYWxzZTtcbiAgZmx1c2hSb290KGludGVybmFsUm9vdCwgZXhwaXJhdGlvblRpbWUpO1xuXG4gIC8vIFBvcCB0aGUgYmF0Y2ggZnJvbSB0aGUgbGlzdC5cbiAgdmFyIG5leHQgPSB0aGlzLl9uZXh0O1xuICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgZmlyc3RCYXRjaCA9IGludGVybmFsUm9vdC5maXJzdEJhdGNoID0gbmV4dDtcblxuICAvLyBBcHBlbmQgdGhlIG5leHQgZWFybGllc3QgYmF0Y2gncyBjaGlsZHJlbiB0byB0aGUgdXBkYXRlIHF1ZXVlLlxuICBpZiAoZmlyc3RCYXRjaCAhPT0gbnVsbCAmJiBmaXJzdEJhdGNoLl9oYXNDaGlsZHJlbikge1xuICAgIGZpcnN0QmF0Y2gucmVuZGVyKGZpcnN0QmF0Y2guX2NoaWxkcmVuKTtcbiAgfVxufTtcblJlYWN0QmF0Y2gucHJvdG90eXBlLl9vbkNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fZGlkQ29tcGxldGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5fZGlkQ29tcGxldGUgPSB0cnVlO1xuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzO1xuICBpZiAoY2FsbGJhY2tzID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIFRPRE86IEVycm9yIGhhbmRsaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBfY2FsbGJhY2sgPSBjYWxsYmFja3NbaV07XG4gICAgX2NhbGxiYWNrKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFJlYWN0V29yaygpIHtcbiAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgdGhpcy5fZGlkQ29tbWl0ID0gZmFsc2U7XG4gIC8vIFRPRE86IEF2b2lkIG5lZWQgdG8gYmluZCBieSByZXBsYWNpbmcgY2FsbGJhY2tzIGluIHRoZSB1cGRhdGUgcXVldWUgd2l0aFxuICAvLyBsaXN0IG9mIFdvcmsgb2JqZWN0cy5cbiAgdGhpcy5fb25Db21taXQgPSB0aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpO1xufVxuUmVhY3RXb3JrLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gKG9uQ29tbWl0KSB7XG4gIGlmICh0aGlzLl9kaWRDb21taXQpIHtcbiAgICBvbkNvbW1pdCgpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzO1xuICBpZiAoY2FsbGJhY2tzID09PSBudWxsKSB7XG4gICAgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzID0gW107XG4gIH1cbiAgY2FsbGJhY2tzLnB1c2gob25Db21taXQpO1xufTtcblJlYWN0V29yay5wcm90b3R5cGUuX29uQ29tbWl0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fZGlkQ29tbWl0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuX2RpZENvbW1pdCA9IHRydWU7XG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3M7XG4gIGlmIChjYWxsYmFja3MgPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gVE9ETzogRXJyb3IgaGFuZGxpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9jYWxsYmFjazIgPSBjYWxsYmFja3NbaV07XG4gICAgISh0eXBlb2YgX2NhbGxiYWNrMiA9PT0gJ2Z1bmN0aW9uJykgPyBpbnZhcmlhbnQoZmFsc2UsICdJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCBhcyBjYWxsYmFjay4gRXhwZWN0ZWQgYSBmdW5jdGlvbi4gSW5zdGVhZCByZWNlaXZlZDogJXMnLCBfY2FsbGJhY2syKSA6IHZvaWQgMDtcbiAgICBfY2FsbGJhY2syKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFJlYWN0Um9vdChjb250YWluZXIsIGlzQ29uY3VycmVudCwgaHlkcmF0ZSkge1xuICB2YXIgcm9vdCA9IGNyZWF0ZUNvbnRhaW5lcihjb250YWluZXIsIGlzQ29uY3VycmVudCwgaHlkcmF0ZSk7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IHJvb3Q7XG59XG5SZWFjdFJvb3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChjaGlsZHJlbiwgY2FsbGJhY2spIHtcbiAgdmFyIHJvb3QgPSB0aGlzLl9pbnRlcm5hbFJvb3Q7XG4gIHZhciB3b3JrID0gbmV3IFJlYWN0V29yaygpO1xuICBjYWxsYmFjayA9IGNhbGxiYWNrID09PSB1bmRlZmluZWQgPyBudWxsIDogY2FsbGJhY2s7XG4gIHtcbiAgICB3YXJuT25JbnZhbGlkQ2FsbGJhY2soY2FsbGJhY2ssICdyZW5kZXInKTtcbiAgfVxuICBpZiAoY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICB3b3JrLnRoZW4oY2FsbGJhY2spO1xuICB9XG4gIHVwZGF0ZUNvbnRhaW5lcihjaGlsZHJlbiwgcm9vdCwgbnVsbCwgd29yay5fb25Db21taXQpO1xuICByZXR1cm4gd29yaztcbn07XG5SZWFjdFJvb3QucHJvdG90eXBlLnVubW91bnQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdmFyIHJvb3QgPSB0aGlzLl9pbnRlcm5hbFJvb3Q7XG4gIHZhciB3b3JrID0gbmV3IFJlYWN0V29yaygpO1xuICBjYWxsYmFjayA9IGNhbGxiYWNrID09PSB1bmRlZmluZWQgPyBudWxsIDogY2FsbGJhY2s7XG4gIHtcbiAgICB3YXJuT25JbnZhbGlkQ2FsbGJhY2soY2FsbGJhY2ssICdyZW5kZXInKTtcbiAgfVxuICBpZiAoY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICB3b3JrLnRoZW4oY2FsbGJhY2spO1xuICB9XG4gIHVwZGF0ZUNvbnRhaW5lcihudWxsLCByb290LCBudWxsLCB3b3JrLl9vbkNvbW1pdCk7XG4gIHJldHVybiB3b3JrO1xufTtcblJlYWN0Um9vdC5wcm90b3R5cGUubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyID0gZnVuY3Rpb24gKHBhcmVudENvbXBvbmVudCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG4gIHZhciByb290ID0gdGhpcy5faW50ZXJuYWxSb290O1xuICB2YXIgd29yayA9IG5ldyBSZWFjdFdvcmsoKTtcbiAgY2FsbGJhY2sgPSBjYWxsYmFjayA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNhbGxiYWNrO1xuICB7XG4gICAgd2Fybk9uSW52YWxpZENhbGxiYWNrKGNhbGxiYWNrLCAncmVuZGVyJyk7XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgd29yay50aGVuKGNhbGxiYWNrKTtcbiAgfVxuICB1cGRhdGVDb250YWluZXIoY2hpbGRyZW4sIHJvb3QsIHBhcmVudENvbXBvbmVudCwgd29yay5fb25Db21taXQpO1xuICByZXR1cm4gd29yaztcbn07XG5SZWFjdFJvb3QucHJvdG90eXBlLmNyZWF0ZUJhdGNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYmF0Y2ggPSBuZXcgUmVhY3RCYXRjaCh0aGlzKTtcbiAgdmFyIGV4cGlyYXRpb25UaW1lID0gYmF0Y2guX2V4cGlyYXRpb25UaW1lO1xuXG4gIHZhciBpbnRlcm5hbFJvb3QgPSB0aGlzLl9pbnRlcm5hbFJvb3Q7XG4gIHZhciBmaXJzdEJhdGNoID0gaW50ZXJuYWxSb290LmZpcnN0QmF0Y2g7XG4gIGlmIChmaXJzdEJhdGNoID09PSBudWxsKSB7XG4gICAgaW50ZXJuYWxSb290LmZpcnN0QmF0Y2ggPSBiYXRjaDtcbiAgICBiYXRjaC5fbmV4dCA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgLy8gSW5zZXJ0IHNvcnRlZCBieSBleHBpcmF0aW9uIHRpbWUgdGhlbiBpbnNlcnRpb24gb3JkZXJcbiAgICB2YXIgaW5zZXJ0QWZ0ZXIgPSBudWxsO1xuICAgIHZhciBpbnNlcnRCZWZvcmUgPSBmaXJzdEJhdGNoO1xuICAgIHdoaWxlIChpbnNlcnRCZWZvcmUgIT09IG51bGwgJiYgaW5zZXJ0QmVmb3JlLl9leHBpcmF0aW9uVGltZSA8PSBleHBpcmF0aW9uVGltZSkge1xuICAgICAgaW5zZXJ0QWZ0ZXIgPSBpbnNlcnRCZWZvcmU7XG4gICAgICBpbnNlcnRCZWZvcmUgPSBpbnNlcnRCZWZvcmUuX25leHQ7XG4gICAgfVxuICAgIGJhdGNoLl9uZXh0ID0gaW5zZXJ0QmVmb3JlO1xuICAgIGlmIChpbnNlcnRBZnRlciAhPT0gbnVsbCkge1xuICAgICAgaW5zZXJ0QWZ0ZXIuX25leHQgPSBiYXRjaDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYmF0Y2g7XG59O1xuXG4vKipcbiAqIFRydWUgaWYgdGhlIHN1cHBsaWVkIERPTSBub2RlIGlzIGEgdmFsaWQgbm9kZSBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7P0RPTUVsZW1lbnR9IG5vZGUgVGhlIGNhbmRpZGF0ZSBET00gbm9kZS5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIERPTSBpcyBhIHZhbGlkIERPTSBub2RlLlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRDb250YWluZXIobm9kZSkge1xuICByZXR1cm4gISEobm9kZSAmJiAobm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFIHx8IG5vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX05PREUgfHwgbm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSB8fCBub2RlLm5vZGVUeXBlID09PSBDT01NRU5UX05PREUgJiYgbm9kZS5ub2RlVmFsdWUgPT09ICcgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgJykpO1xufVxuXG5mdW5jdGlvbiBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKSB7XG4gIGlmICghY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5kb2N1bWVudEVsZW1lbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5maXJzdENoaWxkO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNob3VsZEh5ZHJhdGVEdWVUb0xlZ2FjeUhldXJpc3RpYyhjb250YWluZXIpIHtcbiAgdmFyIHJvb3RFbGVtZW50ID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gIHJldHVybiAhIShyb290RWxlbWVudCAmJiByb290RWxlbWVudC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFICYmIHJvb3RFbGVtZW50Lmhhc0F0dHJpYnV0ZShST09UX0FUVFJJQlVURV9OQU1FKSk7XG59XG5cbnNldEJhdGNoaW5nSW1wbGVtZW50YXRpb24oYmF0Y2hlZFVwZGF0ZXMkMSwgaW50ZXJhY3RpdmVVcGRhdGVzJDEsIGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzJDEpO1xuXG52YXIgd2FybmVkQWJvdXRIeWRyYXRlQVBJID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGxlZ2FjeUNyZWF0ZVJvb3RGcm9tRE9NQ29udGFpbmVyKGNvbnRhaW5lciwgZm9yY2VIeWRyYXRlKSB7XG4gIHZhciBzaG91bGRIeWRyYXRlID0gZm9yY2VIeWRyYXRlIHx8IHNob3VsZEh5ZHJhdGVEdWVUb0xlZ2FjeUhldXJpc3RpYyhjb250YWluZXIpO1xuICAvLyBGaXJzdCBjbGVhciBhbnkgZXhpc3RpbmcgY29udGVudC5cbiAgaWYgKCFzaG91bGRIeWRyYXRlKSB7XG4gICAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICAgIHZhciByb290U2libGluZyA9IHZvaWQgMDtcbiAgICB3aGlsZSAocm9vdFNpYmxpbmcgPSBjb250YWluZXIubGFzdENoaWxkKSB7XG4gICAgICB7XG4gICAgICAgIGlmICghd2FybmVkICYmIHJvb3RTaWJsaW5nLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgJiYgcm9vdFNpYmxpbmcuaGFzQXR0cmlidXRlKFJPT1RfQVRUUklCVVRFX05BTUUpKSB7XG4gICAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsICdyZW5kZXIoKTogVGFyZ2V0IG5vZGUgaGFzIG1hcmt1cCByZW5kZXJlZCBieSBSZWFjdCwgYnV0IHRoZXJlICcgKyAnYXJlIHVucmVsYXRlZCBub2RlcyBhcyB3ZWxsLiBUaGlzIGlzIG1vc3QgY29tbW9ubHkgY2F1c2VkIGJ5ICcgKyAnd2hpdGUtc3BhY2UgaW5zZXJ0ZWQgYXJvdW5kIHNlcnZlci1yZW5kZXJlZCBtYXJrdXAuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChyb290U2libGluZyk7XG4gICAgfVxuICB9XG4gIHtcbiAgICBpZiAoc2hvdWxkSHlkcmF0ZSAmJiAhZm9yY2VIeWRyYXRlICYmICF3YXJuZWRBYm91dEh5ZHJhdGVBUEkpIHtcbiAgICAgIHdhcm5lZEFib3V0SHlkcmF0ZUFQSSA9IHRydWU7XG4gICAgICBsb3dQcmlvcml0eVdhcm5pbmckMShmYWxzZSwgJ3JlbmRlcigpOiBDYWxsaW5nIFJlYWN0RE9NLnJlbmRlcigpIHRvIGh5ZHJhdGUgc2VydmVyLXJlbmRlcmVkIG1hcmt1cCAnICsgJ3dpbGwgc3RvcCB3b3JraW5nIGluIFJlYWN0IHYxNy4gUmVwbGFjZSB0aGUgUmVhY3RET00ucmVuZGVyKCkgY2FsbCAnICsgJ3dpdGggUmVhY3RET00uaHlkcmF0ZSgpIGlmIHlvdSB3YW50IFJlYWN0IHRvIGF0dGFjaCB0byB0aGUgc2VydmVyIEhUTUwuJyk7XG4gICAgfVxuICB9XG4gIC8vIExlZ2FjeSByb290cyBhcmUgbm90IGFzeW5jIGJ5IGRlZmF1bHQuXG4gIHZhciBpc0NvbmN1cnJlbnQgPSBmYWxzZTtcbiAgcmV0dXJuIG5ldyBSZWFjdFJvb3QoY29udGFpbmVyLCBpc0NvbmN1cnJlbnQsIHNob3VsZEh5ZHJhdGUpO1xufVxuXG5mdW5jdGlvbiBsZWdhY3lSZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihwYXJlbnRDb21wb25lbnQsIGNoaWxkcmVuLCBjb250YWluZXIsIGZvcmNlSHlkcmF0ZSwgY2FsbGJhY2spIHtcbiAgLy8gVE9ETzogRW5zdXJlIGFsbCBlbnRyeSBwb2ludHMgY29udGFpbiB0aGlzIGNoZWNrXG4gICFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikgPyBpbnZhcmlhbnQoZmFsc2UsICdUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LicpIDogdm9pZCAwO1xuXG4gIHtcbiAgICB0b3BMZXZlbFVwZGF0ZVdhcm5pbmdzKGNvbnRhaW5lcik7XG4gIH1cblxuICAvLyBUT0RPOiBXaXRob3V0IGBhbnlgIHR5cGUsIEZsb3cgc2F5cyBcIlByb3BlcnR5IGNhbm5vdCBiZSBhY2Nlc3NlZCBvbiBhbnlcbiAgLy8gbWVtYmVyIG9mIGludGVyc2VjdGlvbiB0eXBlLlwiIFdoeXl5eXl5LlxuICB2YXIgcm9vdCA9IGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyO1xuICBpZiAoIXJvb3QpIHtcbiAgICAvLyBJbml0aWFsIG1vdW50XG4gICAgcm9vdCA9IGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyID0gbGVnYWN5Q3JlYXRlUm9vdEZyb21ET01Db250YWluZXIoY29udGFpbmVyLCBmb3JjZUh5ZHJhdGUpO1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBvcmlnaW5hbENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZ2V0UHVibGljUm9vdEluc3RhbmNlKHJvb3QuX2ludGVybmFsUm9vdCk7XG4gICAgICAgIG9yaWdpbmFsQ2FsbGJhY2suY2FsbChpbnN0YW5jZSk7XG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBJbml0aWFsIG1vdW50IHNob3VsZCBub3QgYmUgYmF0Y2hlZC5cbiAgICB1bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwYXJlbnRDb21wb25lbnQgIT0gbnVsbCkge1xuICAgICAgICByb290LmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihwYXJlbnRDb21wb25lbnQsIGNoaWxkcmVuLCBjYWxsYmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290LnJlbmRlcihjaGlsZHJlbiwgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBfb3JpZ2luYWxDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGdldFB1YmxpY1Jvb3RJbnN0YW5jZShyb290Ll9pbnRlcm5hbFJvb3QpO1xuICAgICAgICBfb3JpZ2luYWxDYWxsYmFjay5jYWxsKGluc3RhbmNlKTtcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIFVwZGF0ZVxuICAgIGlmIChwYXJlbnRDb21wb25lbnQgIT0gbnVsbCkge1xuICAgICAgcm9vdC5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIocGFyZW50Q29tcG9uZW50LCBjaGlsZHJlbiwgY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290LnJlbmRlcihjaGlsZHJlbiwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZ2V0UHVibGljUm9vdEluc3RhbmNlKHJvb3QuX2ludGVybmFsUm9vdCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBvcnRhbChjaGlsZHJlbiwgY29udGFpbmVyKSB7XG4gIHZhciBrZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG5cbiAgIWlzVmFsaWRDb250YWluZXIoY29udGFpbmVyKSA/IGludmFyaWFudChmYWxzZSwgJ1RhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJykgOiB2b2lkIDA7XG4gIC8vIFRPRE86IHBhc3MgUmVhY3RET00gcG9ydGFsIGltcGxlbWVudGF0aW9uIGFzIHRoaXJkIGFyZ3VtZW50XG4gIHJldHVybiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVyLCBudWxsLCBrZXkpO1xufVxuXG52YXIgUmVhY3RET00gPSB7XG4gIGNyZWF0ZVBvcnRhbDogY3JlYXRlUG9ydGFsLFxuXG4gIGZpbmRET01Ob2RlOiBmdW5jdGlvbiAoY29tcG9uZW50T3JFbGVtZW50KSB7XG4gICAge1xuICAgICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICAgIGlmIChvd25lciAhPT0gbnVsbCAmJiBvd25lci5zdGF0ZU5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIHdhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gb3duZXIuc3RhdGVOb2RlLl93YXJuZWRBYm91dFJlZnNJblJlbmRlcjtcbiAgICAgICAgIXdhcm5lZEFib3V0UmVmc0luUmVuZGVyID8gd2FybmluZ1dpdGhvdXRTdGFjayQxKGZhbHNlLCAnJXMgaXMgYWNjZXNzaW5nIGZpbmRET01Ob2RlIGluc2lkZSBpdHMgcmVuZGVyKCkuICcgKyAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICsgJ25ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzICcgKyAncmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgJyArICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLCBnZXRDb21wb25lbnROYW1lKG93bmVyLnR5cGUpIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgICBvd25lci5zdGF0ZU5vZGUuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbXBvbmVudE9yRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGNvbXBvbmVudE9yRWxlbWVudC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICByZXR1cm4gY29tcG9uZW50T3JFbGVtZW50O1xuICAgIH1cbiAgICB7XG4gICAgICByZXR1cm4gZmluZEhvc3RJbnN0YW5jZVdpdGhXYXJuaW5nKGNvbXBvbmVudE9yRWxlbWVudCwgJ2ZpbmRET01Ob2RlJyk7XG4gICAgfVxuICAgIHJldHVybiBmaW5kSG9zdEluc3RhbmNlKGNvbXBvbmVudE9yRWxlbWVudCk7XG4gIH0sXG4gIGh5ZHJhdGU6IGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogdGhyb3cgb3Igd2FybiBpZiB3ZSBjb3VsZG4ndCBoeWRyYXRlP1xuICAgIHJldHVybiBsZWdhY3lSZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihudWxsLCBlbGVtZW50LCBjb250YWluZXIsIHRydWUsIGNhbGxiYWNrKTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiAoZWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBsZWdhY3lSZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihudWxsLCBlbGVtZW50LCBjb250YWluZXIsIGZhbHNlLCBjYWxsYmFjayk7XG4gIH0sXG4gIHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOiBmdW5jdGlvbiAocGFyZW50Q29tcG9uZW50LCBlbGVtZW50LCBjb250YWluZXJOb2RlLCBjYWxsYmFjaykge1xuICAgICEocGFyZW50Q29tcG9uZW50ICE9IG51bGwgJiYgaGFzKHBhcmVudENvbXBvbmVudCkpID8gaW52YXJpYW50KGZhbHNlLCAncGFyZW50Q29tcG9uZW50IG11c3QgYmUgYSB2YWxpZCBSZWFjdCBDb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbGVnYWN5UmVuZGVyU3VidHJlZUludG9Db250YWluZXIocGFyZW50Q29tcG9uZW50LCBlbGVtZW50LCBjb250YWluZXJOb2RlLCBmYWxzZSwgY2FsbGJhY2spO1xuICB9LFxuICB1bm1vdW50Q29tcG9uZW50QXROb2RlOiBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgIWlzVmFsaWRDb250YWluZXIoY29udGFpbmVyKSA/IGludmFyaWFudChmYWxzZSwgJ3VubW91bnRDb21wb25lbnRBdE5vZGUoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgYSBET00gZWxlbWVudC4nKSA6IHZvaWQgMDtcblxuICAgIGlmIChjb250YWluZXIuX3JlYWN0Um9vdENvbnRhaW5lcikge1xuICAgICAge1xuICAgICAgICB2YXIgcm9vdEVsID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICAgIHZhciByZW5kZXJlZEJ5RGlmZmVyZW50UmVhY3QgPSByb290RWwgJiYgIWdldEluc3RhbmNlRnJvbU5vZGUkMShyb290RWwpO1xuICAgICAgICAhIXJlbmRlcmVkQnlEaWZmZXJlbnRSZWFjdCA/IHdhcm5pbmdXaXRob3V0U3RhY2skMShmYWxzZSwgXCJ1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFRoZSBub2RlIHlvdSdyZSBhdHRlbXB0aW5nIHRvIHVubW91bnQgXCIgKyAnd2FzIHJlbmRlcmVkIGJ5IGFub3RoZXIgY29weSBvZiBSZWFjdC4nKSA6IHZvaWQgMDtcbiAgICAgIH1cblxuICAgICAgLy8gVW5tb3VudCBzaG91bGQgbm90IGJlIGJhdGNoZWQuXG4gICAgICB1bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGVnYWN5UmVuZGVyU3VidHJlZUludG9Db250YWluZXIobnVsbCwgbnVsbCwgY29udGFpbmVyLCBmYWxzZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC8vIElmIHlvdSBjYWxsIHVubW91bnRDb21wb25lbnRBdE5vZGUgdHdpY2UgaW4gcXVpY2sgc3VjY2Vzc2lvbiwgeW91J2xsXG4gICAgICAvLyBnZXQgYHRydWVgIHR3aWNlLiBUaGF0J3MgcHJvYmFibHkgZmluZT9cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB7XG4gICAgICAgIHZhciBfcm9vdEVsID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICAgIHZhciBoYXNOb25Sb290UmVhY3RDaGlsZCA9ICEhKF9yb290RWwgJiYgZ2V0SW5zdGFuY2VGcm9tTm9kZSQxKF9yb290RWwpKTtcblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgY29udGFpbmVyIGl0c2VsZiBpcyBhIFJlYWN0IHJvb3Qgbm9kZS5cbiAgICAgICAgdmFyIGlzQ29udGFpbmVyUmVhY3RSb290ID0gY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgJiYgaXNWYWxpZENvbnRhaW5lcihjb250YWluZXIucGFyZW50Tm9kZSkgJiYgISFjb250YWluZXIucGFyZW50Tm9kZS5fcmVhY3RSb290Q29udGFpbmVyO1xuXG4gICAgICAgICEhaGFzTm9uUm9vdFJlYWN0Q2hpbGQgPyB3YXJuaW5nV2l0aG91dFN0YWNrJDEoZmFsc2UsIFwidW5tb3VudENvbXBvbmVudEF0Tm9kZSgpOiBUaGUgbm9kZSB5b3UncmUgYXR0ZW1wdGluZyB0byB1bm1vdW50IFwiICsgJ3dhcyByZW5kZXJlZCBieSBSZWFjdCBhbmQgaXMgbm90IGEgdG9wLWxldmVsIGNvbnRhaW5lci4gJXMnLCBpc0NvbnRhaW5lclJlYWN0Um9vdCA/ICdZb3UgbWF5IGhhdmUgYWNjaWRlbnRhbGx5IHBhc3NlZCBpbiBhIFJlYWN0IHJvb3Qgbm9kZSBpbnN0ZWFkICcgKyAnb2YgaXRzIGNvbnRhaW5lci4nIDogJ0luc3RlYWQsIGhhdmUgdGhlIHBhcmVudCBjb21wb25lbnQgdXBkYXRlIGl0cyBzdGF0ZSBhbmQgJyArICdyZXJlbmRlciBpbiBvcmRlciB0byByZW1vdmUgdGhpcyBjb21wb25lbnQuJykgOiB2b2lkIDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG5cblxuICAvLyBUZW1wb3JhcnkgYWxpYXMgc2luY2Ugd2UgYWxyZWFkeSBzaGlwcGVkIFJlYWN0IDE2IFJDIHdpdGggaXQuXG4gIC8vIFRPRE86IHJlbW92ZSBpbiBSZWFjdCAxNy5cbiAgdW5zdGFibGVfY3JlYXRlUG9ydGFsOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkaWRXYXJuQWJvdXRVbnN0YWJsZUNyZWF0ZVBvcnRhbCkge1xuICAgICAgZGlkV2FybkFib3V0VW5zdGFibGVDcmVhdGVQb3J0YWwgPSB0cnVlO1xuICAgICAgbG93UHJpb3JpdHlXYXJuaW5nJDEoZmFsc2UsICdUaGUgUmVhY3RET00udW5zdGFibGVfY3JlYXRlUG9ydGFsKCkgYWxpYXMgaGFzIGJlZW4gZGVwcmVjYXRlZCwgJyArICdhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJlYWN0IDE3Ky4gVXBkYXRlIHlvdXIgY29kZSB0byB1c2UgJyArICdSZWFjdERPTS5jcmVhdGVQb3J0YWwoKSBpbnN0ZWFkLiBJdCBoYXMgdGhlIGV4YWN0IHNhbWUgQVBJLCAnICsgJ2J1dCB3aXRob3V0IHRoZSBcInVuc3RhYmxlX1wiIHByZWZpeC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZVBvcnRhbC5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIH0sXG5cblxuICB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczogYmF0Y2hlZFVwZGF0ZXMkMSxcblxuICB1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6IGludGVyYWN0aXZlVXBkYXRlcyQxLFxuXG4gIGZsdXNoU3luYzogZmx1c2hTeW5jLFxuXG4gIHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDogZmx1c2hDb250cm9sbGVkLFxuXG4gIF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOiB7XG4gICAgLy8gS2VlcCBpbiBzeW5jIHdpdGggUmVhY3RET01VbnN0YWJsZU5hdGl2ZURlcGVuZGVuY2llcy5qc1xuICAgIC8vIGFuZCBSZWFjdFRlc3RVdGlscy5qcy4gVGhpcyBpcyBhbiBhcnJheSBmb3IgYmV0dGVyIG1pbmlmaWNhdGlvbi5cbiAgICBFdmVudHM6IFtnZXRJbnN0YW5jZUZyb21Ob2RlJDEsIGdldE5vZGVGcm9tSW5zdGFuY2UkMSwgZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSQxLCBpbmplY3Rpb24uaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lLCBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MsIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMsIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzLCBlbnF1ZXVlU3RhdGVSZXN0b3JlLCByZXN0b3JlU3RhdGVJZk5lZWRlZCwgZGlzcGF0Y2hFdmVudCwgcnVuRXZlbnRzSW5CYXRjaF1cbiAgfVxufTtcblxuUmVhY3RET00udW5zdGFibGVfY3JlYXRlUm9vdCA9IGZ1bmN0aW9uIGNyZWF0ZVJvb3QoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikgPyBpbnZhcmlhbnQoZmFsc2UsICd1bnN0YWJsZV9jcmVhdGVSb290KC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJykgOiB2b2lkIDA7XG4gIHZhciBoeWRyYXRlID0gb3B0aW9ucyAhPSBudWxsICYmIG9wdGlvbnMuaHlkcmF0ZSA9PT0gdHJ1ZTtcbiAgcmV0dXJuIG5ldyBSZWFjdFJvb3QoY29udGFpbmVyLCB0cnVlLCBoeWRyYXRlKTtcbn07XG5cbnZhciBmb3VuZERldlRvb2xzID0gaW5qZWN0SW50b0RldlRvb2xzKHtcbiAgZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlLFxuICBidW5kbGVUeXBlOiAxLFxuICB2ZXJzaW9uOiBSZWFjdFZlcnNpb24sXG4gIHJlbmRlcmVyUGFja2FnZU5hbWU6ICdyZWFjdC1kb20nXG59KTtcblxue1xuICBpZiAoIWZvdW5kRGV2VG9vbHMgJiYgY2FuVXNlRE9NICYmIHdpbmRvdy50b3AgPT09IHdpbmRvdy5zZWxmKSB7XG4gICAgLy8gSWYgd2UncmUgaW4gQ2hyb21lIG9yIEZpcmVmb3gsIHByb3ZpZGUgYSBkb3dubG9hZCBsaW5rIGlmIG5vdCBpbnN0YWxsZWQuXG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgPiAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0VkZ2UnKSA9PT0gLTEgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPiAtMSkge1xuICAgICAgdmFyIHByb3RvY29sID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sO1xuICAgICAgLy8gRG9uJ3Qgd2FybiBpbiBleG90aWMgY2FzZXMgbGlrZSBjaHJvbWUtZXh0ZW5zaW9uOi8vLlxuICAgICAgaWYgKC9eKGh0dHBzP3xmaWxlKTokLy50ZXN0KHByb3RvY29sKSkge1xuICAgICAgICBjb25zb2xlLmluZm8oJyVjRG93bmxvYWQgdGhlIFJlYWN0IERldlRvb2xzICcgKyAnZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1kZXZ0b29scycgKyAocHJvdG9jb2wgPT09ICdmaWxlOicgPyAnXFxuWW91IG1pZ2h0IG5lZWQgdG8gdXNlIGEgbG9jYWwgSFRUUCBzZXJ2ZXIgKGluc3RlYWQgb2YgZmlsZTovLyk6ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1kZXZ0b29scy1mYXEnIDogJycpLCAnZm9udC13ZWlnaHQ6Ym9sZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cblxudmFyIFJlYWN0RE9NJDIgPSBPYmplY3QuZnJlZXplKHtcblx0ZGVmYXVsdDogUmVhY3RET01cbn0pO1xuXG52YXIgUmVhY3RET00kMyA9ICggUmVhY3RET00kMiAmJiBSZWFjdERPTSApIHx8IFJlYWN0RE9NJDI7XG5cbi8vIFRPRE86IGRlY2lkZSBvbiB0aGUgdG9wLWxldmVsIGV4cG9ydCBmb3JtLlxuLy8gVGhpcyBpcyBoYWNreSBidXQgbWFrZXMgaXQgd29yayB3aXRoIGJvdGggUm9sbHVwIGFuZCBKZXN0LlxudmFyIHJlYWN0RG9tID0gUmVhY3RET00kMy5kZWZhdWx0IHx8IFJlYWN0RE9NJDM7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVhY3REb207XG4gIH0pKCk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMiLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLXRyYWNpbmcucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLXRyYWNpbmcuZGV2ZWxvcG1lbnQuanMnKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvdHJhY2luZy5qcyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuNi4wXG4gKiBzY2hlZHVsZXItdHJhY2luZy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgYj0wO2V4cG9ydHMuX19pbnRlcmFjdGlvbnNSZWY9bnVsbDtleHBvcnRzLl9fc3Vic2NyaWJlclJlZj1udWxsO2V4cG9ydHMudW5zdGFibGVfY2xlYXI9ZnVuY3Rpb24oYSl7cmV0dXJuIGEoKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50PWZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9O2V4cG9ydHMudW5zdGFibGVfZ2V0VGhyZWFkSUQ9ZnVuY3Rpb24oKXtyZXR1cm4rK2J9O2V4cG9ydHMudW5zdGFibGVfdHJhY2U9ZnVuY3Rpb24oYSxkLGMpe3JldHVybiBjKCl9O2V4cG9ydHMudW5zdGFibGVfd3JhcD1mdW5jdGlvbihhKXtyZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9zdWJzY3JpYmU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfdW5zdWJzY3JpYmU9ZnVuY3Rpb24oKXt9O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLXRyYWNpbmcucHJvZHVjdGlvbi5taW4uanMiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjYuMFxuICogc2NoZWR1bGVyLXRyYWNpbmcuZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cblxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLy8gSGVscHMgaWRlbnRpZnkgc2lkZSBlZmZlY3RzIGluIGJlZ2luLXBoYXNlIGxpZmVjeWNsZSBob29rcyBhbmQgc2V0U3RhdGUgcmVkdWNlcnM6XG5cblxuLy8gSW4gc29tZSBjYXNlcywgU3RyaWN0TW9kZSBzaG91bGQgYWxzbyBkb3VibGUtcmVuZGVyIGxpZmVjeWNsZXMuXG4vLyBUaGlzIGNhbiBiZSBjb25mdXNpbmcgZm9yIHRlc3RzIHRob3VnaCxcbi8vIEFuZCBpdCBjYW4gYmUgYmFkIGZvciBwZXJmb3JtYW5jZSBpbiBwcm9kdWN0aW9uLlxuLy8gVGhpcyBmZWF0dXJlIGZsYWcgY2FuIGJlIHVzZWQgdG8gY29udHJvbCB0aGUgYmVoYXZpb3I6XG5cblxuLy8gVG8gcHJlc2VydmUgdGhlIFwiUGF1c2Ugb24gY2F1Z2h0IGV4Y2VwdGlvbnNcIiBiZWhhdmlvciBvZiB0aGUgZGVidWdnZXIsIHdlXG4vLyByZXBsYXkgdGhlIGJlZ2luIHBoYXNlIG9mIGEgZmFpbGVkIGNvbXBvbmVudCBpbnNpZGUgaW52b2tlR3VhcmRlZENhbGxiYWNrLlxuXG5cbi8vIFdhcm4gYWJvdXQgZGVwcmVjYXRlZCwgYXN5bmMtdW5zYWZlIGxpZmVjeWNsZXM7IHJlbGF0ZXMgdG8gUkZDICM2OlxuXG5cbi8vIEdhdGhlciBhZHZhbmNlZCB0aW1pbmcgbWV0cmljcyBmb3IgUHJvZmlsZXIgc3VidHJlZXMuXG5cblxuLy8gVHJhY2Ugd2hpY2ggaW50ZXJhY3Rpb25zIHRyaWdnZXIgZWFjaCBjb21taXQuXG52YXIgZW5hYmxlU2NoZWR1bGVyVHJhY2luZyA9IHRydWU7XG5cbi8vIE9ubHkgdXNlZCBpbiB3d3cgYnVpbGRzLlxuXG5cbi8vIE9ubHkgdXNlZCBpbiB3d3cgYnVpbGRzLlxuXG5cbi8vIFJlYWN0IEZpcmU6IHByZXZlbnQgdGhlIHZhbHVlIGFuZCBjaGVja2VkIGF0dHJpYnV0ZXMgZnJvbSBzeW5jaW5nXG4vLyB3aXRoIHRoZWlyIHJlbGF0ZWQgRE9NIHByb3BlcnRpZXNcblxudmFyIERFRkFVTFRfVEhSRUFEX0lEID0gMDtcblxuLy8gQ291bnRlcnMgdXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLlxudmFyIGludGVyYWN0aW9uSURDb3VudGVyID0gMDtcbnZhciB0aHJlYWRJRENvdW50ZXIgPSAwO1xuXG4vLyBTZXQgb2YgY3VycmVudGx5IHRyYWNlZCBpbnRlcmFjdGlvbnMuXG4vLyBJbnRlcmFjdGlvbnMgXCJzdGFja1wi4oCTXG4vLyBNZWFuaW5nIHRoYXQgbmV3bHkgdHJhY2VkIGludGVyYWN0aW9ucyBhcmUgYXBwZW5kZWQgdG8gdGhlIHByZXZpb3VzbHkgYWN0aXZlIHNldC5cbi8vIFdoZW4gYW4gaW50ZXJhY3Rpb24gZ29lcyBvdXQgb2Ygc2NvcGUsIHRoZSBwcmV2aW91cyBzZXQgKGlmIGFueSkgaXMgcmVzdG9yZWQuXG5leHBvcnRzLl9faW50ZXJhY3Rpb25zUmVmID0gbnVsbDtcblxuLy8gTGlzdGVuZXIocykgdG8gbm90aWZ5IHdoZW4gaW50ZXJhY3Rpb25zIGJlZ2luIGFuZCBlbmQuXG5leHBvcnRzLl9fc3Vic2NyaWJlclJlZiA9IG51bGw7XG5cbmlmIChlbmFibGVTY2hlZHVsZXJUcmFjaW5nKSB7XG4gIGV4cG9ydHMuX19pbnRlcmFjdGlvbnNSZWYgPSB7XG4gICAgY3VycmVudDogbmV3IFNldCgpXG4gIH07XG4gIGV4cG9ydHMuX19zdWJzY3JpYmVyUmVmID0ge1xuICAgIGN1cnJlbnQ6IG51bGxcbiAgfTtcbn1cblxuZnVuY3Rpb24gdW5zdGFibGVfY2xlYXIoY2FsbGJhY2spIHtcbiAgaWYgKCFlbmFibGVTY2hlZHVsZXJUcmFjaW5nKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH1cblxuICB2YXIgcHJldkludGVyYWN0aW9ucyA9IGV4cG9ydHMuX19pbnRlcmFjdGlvbnNSZWYuY3VycmVudDtcbiAgZXhwb3J0cy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50ID0gbmV3IFNldCgpO1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZXhwb3J0cy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50ID0gcHJldkludGVyYWN0aW9ucztcbiAgfVxufVxuXG5mdW5jdGlvbiB1bnN0YWJsZV9nZXRDdXJyZW50KCkge1xuICBpZiAoIWVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwb3J0cy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50O1xuICB9XG59XG5cbmZ1bmN0aW9uIHVuc3RhYmxlX2dldFRocmVhZElEKCkge1xuICByZXR1cm4gKyt0aHJlYWRJRENvdW50ZXI7XG59XG5cbmZ1bmN0aW9uIHVuc3RhYmxlX3RyYWNlKG5hbWUsIHRpbWVzdGFtcCwgY2FsbGJhY2spIHtcbiAgdmFyIHRocmVhZElEID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBERUZBVUxUX1RIUkVBRF9JRDtcblxuICBpZiAoIWVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfVxuXG4gIHZhciBpbnRlcmFjdGlvbiA9IHtcbiAgICBfX2NvdW50OiAxLFxuICAgIGlkOiBpbnRlcmFjdGlvbklEQ291bnRlcisrLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgdGltZXN0YW1wOiB0aW1lc3RhbXBcbiAgfTtcblxuICB2YXIgcHJldkludGVyYWN0aW9ucyA9IGV4cG9ydHMuX19pbnRlcmFjdGlvbnNSZWYuY3VycmVudDtcblxuICAvLyBUcmFjZWQgaW50ZXJhY3Rpb25zIHNob3VsZCBzdGFjay9hY2N1bXVsYXRlLlxuICAvLyBUbyBkbyB0aGF0LCBjbG9uZSB0aGUgY3VycmVudCBpbnRlcmFjdGlvbnMuXG4gIC8vIFRoZSBwcmV2aW91cyBzZXQgd2lsbCBiZSByZXN0b3JlZCB1cG9uIGNvbXBsZXRpb24uXG4gIHZhciBpbnRlcmFjdGlvbnMgPSBuZXcgU2V0KHByZXZJbnRlcmFjdGlvbnMpO1xuICBpbnRlcmFjdGlvbnMuYWRkKGludGVyYWN0aW9uKTtcbiAgZXhwb3J0cy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50ID0gaW50ZXJhY3Rpb25zO1xuXG4gIHZhciBzdWJzY3JpYmVyID0gZXhwb3J0cy5fX3N1YnNjcmliZXJSZWYuY3VycmVudDtcbiAgdmFyIHJldHVyblZhbHVlID0gdm9pZCAwO1xuXG4gIHRyeSB7XG4gICAgaWYgKHN1YnNjcmliZXIgIT09IG51bGwpIHtcbiAgICAgIHN1YnNjcmliZXIub25JbnRlcmFjdGlvblRyYWNlZChpbnRlcmFjdGlvbik7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoc3Vic2NyaWJlciAhPT0gbnVsbCkge1xuICAgICAgICBzdWJzY3JpYmVyLm9uV29ya1N0YXJ0ZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVyblZhbHVlID0gY2FsbGJhY2soKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGV4cG9ydHMuX19pbnRlcmFjdGlvbnNSZWYuY3VycmVudCA9IHByZXZJbnRlcmFjdGlvbnM7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc3Vic2NyaWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5vbldvcmtTdG9wcGVkKGludGVyYWN0aW9ucywgdGhyZWFkSUQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpbnRlcmFjdGlvbi5fX2NvdW50LS07XG5cbiAgICAgICAgICAvLyBJZiBubyBhc3luYyB3b3JrIHdhcyBzY2hlZHVsZWQgZm9yIHRoaXMgaW50ZXJhY3Rpb24sXG4gICAgICAgICAgLy8gTm90aWZ5IHN1YnNjcmliZXJzIHRoYXQgaXQncyBjb21wbGV0ZWQuXG4gICAgICAgICAgaWYgKHN1YnNjcmliZXIgIT09IG51bGwgJiYgaW50ZXJhY3Rpb24uX19jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5vbkludGVyYWN0aW9uU2NoZWR1bGVkV29ya0NvbXBsZXRlZChpbnRlcmFjdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG5mdW5jdGlvbiB1bnN0YWJsZV93cmFwKGNhbGxiYWNrKSB7XG4gIHZhciB0aHJlYWRJRCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogREVGQVVMVF9USFJFQURfSUQ7XG5cbiAgaWYgKCFlbmFibGVTY2hlZHVsZXJUcmFjaW5nKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrO1xuICB9XG5cbiAgdmFyIHdyYXBwZWRJbnRlcmFjdGlvbnMgPSBleHBvcnRzLl9faW50ZXJhY3Rpb25zUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIHN1YnNjcmliZXIgPSBleHBvcnRzLl9fc3Vic2NyaWJlclJlZi5jdXJyZW50O1xuICBpZiAoc3Vic2NyaWJlciAhPT0gbnVsbCkge1xuICAgIHN1YnNjcmliZXIub25Xb3JrU2NoZWR1bGVkKHdyYXBwZWRJbnRlcmFjdGlvbnMsIHRocmVhZElEKTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSB0aGUgcGVuZGluZyBhc3luYyB3b3JrIGNvdW50IGZvciB0aGUgY3VycmVudCBpbnRlcmFjdGlvbnMuXG4gIC8vIFVwZGF0ZSBhZnRlciBjYWxsaW5nIHN1YnNjcmliZXJzIGluIGNhc2Ugb2YgZXJyb3IuXG4gIHdyYXBwZWRJbnRlcmFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJhY3Rpb24pIHtcbiAgICBpbnRlcmFjdGlvbi5fX2NvdW50Kys7XG4gIH0pO1xuXG4gIHZhciBoYXNSdW4gPSBmYWxzZTtcblxuICBmdW5jdGlvbiB3cmFwcGVkKCkge1xuICAgIHZhciBwcmV2SW50ZXJhY3Rpb25zID0gZXhwb3J0cy5fX2ludGVyYWN0aW9uc1JlZi5jdXJyZW50O1xuICAgIGV4cG9ydHMuX19pbnRlcmFjdGlvbnNSZWYuY3VycmVudCA9IHdyYXBwZWRJbnRlcmFjdGlvbnM7XG5cbiAgICBzdWJzY3JpYmVyID0gZXhwb3J0cy5fX3N1YnNjcmliZXJSZWYuY3VycmVudDtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgcmV0dXJuVmFsdWUgPSB2b2lkIDA7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChzdWJzY3JpYmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgc3Vic2NyaWJlci5vbldvcmtTdGFydGVkKHdyYXBwZWRJbnRlcmFjdGlvbnMsIHRocmVhZElEKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm5WYWx1ZSA9IGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBleHBvcnRzLl9faW50ZXJhY3Rpb25zUmVmLmN1cnJlbnQgPSBwcmV2SW50ZXJhY3Rpb25zO1xuXG4gICAgICAgICAgaWYgKHN1YnNjcmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIub25Xb3JrU3RvcHBlZCh3cmFwcGVkSW50ZXJhY3Rpb25zLCB0aHJlYWRJRCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKCFoYXNSdW4pIHtcbiAgICAgICAgLy8gV2Ugb25seSBleHBlY3QgYSB3cmFwcGVkIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIG9uY2UsXG4gICAgICAgIC8vIEJ1dCBpbiB0aGUgZXZlbnQgdGhhdCBpdCdzIGV4ZWN1dGVkIG1vcmUgdGhhbiBvbmNl4oCTXG4gICAgICAgIC8vIE9ubHkgZGVjcmVtZW50IHRoZSBvdXRzdGFuZGluZyBpbnRlcmFjdGlvbiBjb3VudHMgb25jZS5cbiAgICAgICAgaGFzUnVuID0gdHJ1ZTtcblxuICAgICAgICAvLyBVcGRhdGUgcGVuZGluZyBhc3luYyBjb3VudHMgZm9yIGFsbCB3cmFwcGVkIGludGVyYWN0aW9ucy5cbiAgICAgICAgLy8gSWYgdGhpcyB3YXMgdGhlIGxhc3Qgc2NoZWR1bGVkIGFzeW5jIHdvcmsgZm9yIGFueSBvZiB0aGVtLFxuICAgICAgICAvLyBNYXJrIHRoZW0gYXMgY29tcGxldGVkLlxuICAgICAgICB3cmFwcGVkSW50ZXJhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGludGVyYWN0aW9uKSB7XG4gICAgICAgICAgaW50ZXJhY3Rpb24uX19jb3VudC0tO1xuXG4gICAgICAgICAgaWYgKHN1YnNjcmliZXIgIT09IG51bGwgJiYgaW50ZXJhY3Rpb24uX19jb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5vbkludGVyYWN0aW9uU2NoZWR1bGVkV29ya0NvbXBsZXRlZChpbnRlcmFjdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3cmFwcGVkLmNhbmNlbCA9IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBzdWJzY3JpYmVyID0gZXhwb3J0cy5fX3N1YnNjcmliZXJSZWYuY3VycmVudDtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoc3Vic2NyaWJlciAhPT0gbnVsbCkge1xuICAgICAgICBzdWJzY3JpYmVyLm9uV29ya0NhbmNlbGVkKHdyYXBwZWRJbnRlcmFjdGlvbnMsIHRocmVhZElEKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gVXBkYXRlIHBlbmRpbmcgYXN5bmMgY291bnRzIGZvciBhbGwgd3JhcHBlZCBpbnRlcmFjdGlvbnMuXG4gICAgICAvLyBJZiB0aGlzIHdhcyB0aGUgbGFzdCBzY2hlZHVsZWQgYXN5bmMgd29yayBmb3IgYW55IG9mIHRoZW0sXG4gICAgICAvLyBNYXJrIHRoZW0gYXMgY29tcGxldGVkLlxuICAgICAgd3JhcHBlZEludGVyYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChpbnRlcmFjdGlvbikge1xuICAgICAgICBpbnRlcmFjdGlvbi5fX2NvdW50LS07XG5cbiAgICAgICAgaWYgKHN1YnNjcmliZXIgJiYgaW50ZXJhY3Rpb24uX19jb3VudCA9PT0gMCkge1xuICAgICAgICAgIHN1YnNjcmliZXIub25JbnRlcmFjdGlvblNjaGVkdWxlZFdvcmtDb21wbGV0ZWQoaW50ZXJhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbnZhciBzdWJzY3JpYmVycyA9IG51bGw7XG5pZiAoZW5hYmxlU2NoZWR1bGVyVHJhY2luZykge1xuICBzdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbn1cblxuZnVuY3Rpb24gdW5zdGFibGVfc3Vic2NyaWJlKHN1YnNjcmliZXIpIHtcbiAgaWYgKGVuYWJsZVNjaGVkdWxlclRyYWNpbmcpIHtcbiAgICBzdWJzY3JpYmVycy5hZGQoc3Vic2NyaWJlcik7XG5cbiAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMSkge1xuICAgICAgZXhwb3J0cy5fX3N1YnNjcmliZXJSZWYuY3VycmVudCA9IHtcbiAgICAgICAgb25JbnRlcmFjdGlvblNjaGVkdWxlZFdvcmtDb21wbGV0ZWQ6IG9uSW50ZXJhY3Rpb25TY2hlZHVsZWRXb3JrQ29tcGxldGVkLFxuICAgICAgICBvbkludGVyYWN0aW9uVHJhY2VkOiBvbkludGVyYWN0aW9uVHJhY2VkLFxuICAgICAgICBvbldvcmtDYW5jZWxlZDogb25Xb3JrQ2FuY2VsZWQsXG4gICAgICAgIG9uV29ya1NjaGVkdWxlZDogb25Xb3JrU2NoZWR1bGVkLFxuICAgICAgICBvbldvcmtTdGFydGVkOiBvbldvcmtTdGFydGVkLFxuICAgICAgICBvbldvcmtTdG9wcGVkOiBvbldvcmtTdG9wcGVkXG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1bnN0YWJsZV91bnN1YnNjcmliZShzdWJzY3JpYmVyKSB7XG4gIGlmIChlbmFibGVTY2hlZHVsZXJUcmFjaW5nKSB7XG4gICAgc3Vic2NyaWJlcnMuZGVsZXRlKHN1YnNjcmliZXIpO1xuXG4gICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgIGV4cG9ydHMuX19zdWJzY3JpYmVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvbkludGVyYWN0aW9uVHJhY2VkKGludGVyYWN0aW9uKSB7XG4gIHZhciBkaWRDYXRjaEVycm9yID0gZmFsc2U7XG4gIHZhciBjYXVnaHRFcnJvciA9IG51bGw7XG5cbiAgc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgIHRyeSB7XG4gICAgICBzdWJzY3JpYmVyLm9uSW50ZXJhY3Rpb25UcmFjZWQoaW50ZXJhY3Rpb24pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoIWRpZENhdGNoRXJyb3IpIHtcbiAgICAgICAgZGlkQ2F0Y2hFcnJvciA9IHRydWU7XG4gICAgICAgIGNhdWdodEVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAoZGlkQ2F0Y2hFcnJvcikge1xuICAgIHRocm93IGNhdWdodEVycm9yO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uSW50ZXJhY3Rpb25TY2hlZHVsZWRXb3JrQ29tcGxldGVkKGludGVyYWN0aW9uKSB7XG4gIHZhciBkaWRDYXRjaEVycm9yID0gZmFsc2U7XG4gIHZhciBjYXVnaHRFcnJvciA9IG51bGw7XG5cbiAgc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgIHRyeSB7XG4gICAgICBzdWJzY3JpYmVyLm9uSW50ZXJhY3Rpb25TY2hlZHVsZWRXb3JrQ29tcGxldGVkKGludGVyYWN0aW9uKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKCFkaWRDYXRjaEVycm9yKSB7XG4gICAgICAgIGRpZENhdGNoRXJyb3IgPSB0cnVlO1xuICAgICAgICBjYXVnaHRFcnJvciA9IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGRpZENhdGNoRXJyb3IpIHtcbiAgICB0aHJvdyBjYXVnaHRFcnJvcjtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbldvcmtTY2hlZHVsZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCkge1xuICB2YXIgZGlkQ2F0Y2hFcnJvciA9IGZhbHNlO1xuICB2YXIgY2F1Z2h0RXJyb3IgPSBudWxsO1xuXG4gIHN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICB0cnkge1xuICAgICAgc3Vic2NyaWJlci5vbldvcmtTY2hlZHVsZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmICghZGlkQ2F0Y2hFcnJvcikge1xuICAgICAgICBkaWRDYXRjaEVycm9yID0gdHJ1ZTtcbiAgICAgICAgY2F1Z2h0RXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGlmIChkaWRDYXRjaEVycm9yKSB7XG4gICAgdGhyb3cgY2F1Z2h0RXJyb3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25Xb3JrU3RhcnRlZChpbnRlcmFjdGlvbnMsIHRocmVhZElEKSB7XG4gIHZhciBkaWRDYXRjaEVycm9yID0gZmFsc2U7XG4gIHZhciBjYXVnaHRFcnJvciA9IG51bGw7XG5cbiAgc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgIHRyeSB7XG4gICAgICBzdWJzY3JpYmVyLm9uV29ya1N0YXJ0ZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmICghZGlkQ2F0Y2hFcnJvcikge1xuICAgICAgICBkaWRDYXRjaEVycm9yID0gdHJ1ZTtcbiAgICAgICAgY2F1Z2h0RXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGlmIChkaWRDYXRjaEVycm9yKSB7XG4gICAgdGhyb3cgY2F1Z2h0RXJyb3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25Xb3JrU3RvcHBlZChpbnRlcmFjdGlvbnMsIHRocmVhZElEKSB7XG4gIHZhciBkaWRDYXRjaEVycm9yID0gZmFsc2U7XG4gIHZhciBjYXVnaHRFcnJvciA9IG51bGw7XG5cbiAgc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgIHRyeSB7XG4gICAgICBzdWJzY3JpYmVyLm9uV29ya1N0b3BwZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmICghZGlkQ2F0Y2hFcnJvcikge1xuICAgICAgICBkaWRDYXRjaEVycm9yID0gdHJ1ZTtcbiAgICAgICAgY2F1Z2h0RXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGlmIChkaWRDYXRjaEVycm9yKSB7XG4gICAgdGhyb3cgY2F1Z2h0RXJyb3I7XG4gIH1cbn1cblxuZnVuY3Rpb24gb25Xb3JrQ2FuY2VsZWQoaW50ZXJhY3Rpb25zLCB0aHJlYWRJRCkge1xuICB2YXIgZGlkQ2F0Y2hFcnJvciA9IGZhbHNlO1xuICB2YXIgY2F1Z2h0RXJyb3IgPSBudWxsO1xuXG4gIHN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICB0cnkge1xuICAgICAgc3Vic2NyaWJlci5vbldvcmtDYW5jZWxlZChpbnRlcmFjdGlvbnMsIHRocmVhZElEKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKCFkaWRDYXRjaEVycm9yKSB7XG4gICAgICAgIGRpZENhdGNoRXJyb3IgPSB0cnVlO1xuICAgICAgICBjYXVnaHRFcnJvciA9IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGRpZENhdGNoRXJyb3IpIHtcbiAgICB0aHJvdyBjYXVnaHRFcnJvcjtcbiAgfVxufVxuXG5leHBvcnRzLnVuc3RhYmxlX2NsZWFyID0gdW5zdGFibGVfY2xlYXI7XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnQgPSB1bnN0YWJsZV9nZXRDdXJyZW50O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRUaHJlYWRJRCA9IHVuc3RhYmxlX2dldFRocmVhZElEO1xuZXhwb3J0cy51bnN0YWJsZV90cmFjZSA9IHVuc3RhYmxlX3RyYWNlO1xuZXhwb3J0cy51bnN0YWJsZV93cmFwID0gdW5zdGFibGVfd3JhcDtcbmV4cG9ydHMudW5zdGFibGVfc3Vic2NyaWJlID0gdW5zdGFibGVfc3Vic2NyaWJlO1xuZXhwb3J0cy51bnN0YWJsZV91bnN1YnNjcmliZSA9IHVuc3RhYmxlX3Vuc3Vic2NyaWJlO1xuICB9KSgpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLXRyYWNpbmcuZGV2ZWxvcG1lbnQuanMiLCJpbXBvcnQgeyByZW5kZXJSb3V0ZXMgfSBmcm9tICdyZWFjdC1yb3V0ZXItY29uZmlnJ1xyXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCByb3V0ZXMgZnJvbSAnLi9yb3V0ZXMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8aDE+VGhpcyBpcyBBcHAgcm9vdCBwYWdlLjwvaDE+XHJcbiAgICAgICAgICAgICAgICA8aHIvPlxyXG4gICAgICAgICAgICAgICAge3JlbmRlclJvdXRlcyhyb3V0ZXMpfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zaGFyZWQvQXBwLmpzIiwiaW1wb3J0IHsgZmV0Y2hQb3B1bGFyUmVwb3MsIGZldGNoVXNlciB9IGZyb20gJy4vYXBpJ1xyXG5pbXBvcnQgTG9hZGFibGUgZnJvbSBcInJlYWN0LWxvYWRhYmxlXCJcclxuaW1wb3J0IExvYWRpbmcgZnJvbSAnLi9jb21wb25lbnRzL0xvYWRpbmcnXHJcblxyXG5jb25zdCByb3V0ZXMgPSAgW1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvJyxcclxuICAgICAgICBleGFjdDogdHJ1ZSxcclxuICAgICAgICBjb21wb25lbnQ6IExvYWRhYmxlKHtcclxuICAgICAgICAgICAgbG9hZGVyOiAoKSA9PiBpbXBvcnQoJy4vY29tcG9uZW50cy9Ib21lJyksXHJcbiAgICAgICAgICAgIGxvYWRpbmc6IExvYWRpbmdcclxuICAgICAgICB9KVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2xhbmd1YWdlcycsXHJcbiAgICAgICAgZXhhY3Q6IHRydWUsXHJcbiAgICAgICAgY29tcG9uZW50OiBMb2FkYWJsZSh7XHJcbiAgICAgICAgICAgIGxvYWRlcjogKCkgPT4gaW1wb3J0KCcuL2NvbXBvbmVudHMvTGFuZ3VhZ2VzJyksXHJcbiAgICAgICAgICAgIGxvYWRpbmc6IExvYWRpbmdcclxuICAgICAgICB9KVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2xhbmd1YWdlcy86aWQnLFxyXG4gICAgICAgIGNvbXBvbmVudDogTG9hZGFibGUoe1xyXG4gICAgICAgICAgICBsb2FkZXI6ICgpID0+IGltcG9ydCgnLi9jb21wb25lbnRzL3JlcG9HcmlkJyksXHJcbiAgICAgICAgICAgIGxvYWRpbmc6IExvYWRpbmdcclxuICAgICAgICB9KSxcclxuICAgICAgICBsb2FkRGF0YTogKHBhdGggPSAnJykgPT4gZmV0Y2hQb3B1bGFyUmVwb3MoXHJcbiAgICAgICAgICAgICAgICBwYXRoLnNwbGl0KCcvJykucG9wKClcclxuICAgICAgICAgICAgKVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3VzZXJzJyxcclxuICAgICAgICBleGFjdDogdHJ1ZSxcclxuICAgICAgICBjb21wb25lbnQ6IExvYWRhYmxlKHtcclxuICAgICAgICAgICAgbG9hZGVyOiAoKSA9PiBpbXBvcnQoJy4vY29tcG9uZW50cy9Vc2VycycpLFxyXG4gICAgICAgICAgICBsb2FkaW5nOiBMb2FkaW5nXHJcbiAgICAgICAgfSlcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy91c2Vycy86aWQnLFxyXG4gICAgICAgIGNvbXBvbmVudDogTG9hZGFibGUoe1xyXG4gICAgICAgICAgICBsb2FkZXI6ICgpID0+IGltcG9ydCgnLi9jb21wb25lbnRzL3VzZXJHcmlkJyksXHJcbiAgICAgICAgICAgIGxvYWRpbmc6IExvYWRpbmdcclxuICAgICAgICB9KSxcclxuICAgICAgICBsb2FkRGF0YTogKHBhdGggPSAnJykgPT4gZmV0Y2hVc2VyKFxyXG4gICAgICAgICAgICAgICAgcGF0aC5zcGxpdCgnLycpLnBvcCgpXHJcbiAgICAgICAgICAgIClcclxuICAgIH1cclxuXVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcm91dGVzXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NoYXJlZC9yb3V0ZXMuanMiLCIvLyB0aGUgd2hhdHdnLWZldGNoIHBvbHlmaWxsIGluc3RhbGxzIHRoZSBmZXRjaCgpIGZ1bmN0aW9uXG4vLyBvbiB0aGUgZ2xvYmFsIG9iamVjdCAod2luZG93IG9yIHNlbGYpXG4vL1xuLy8gUmV0dXJuIHRoYXQgYXMgdGhlIGV4cG9ydCBmb3IgdXNlIGluIFdlYnBhY2ssIEJyb3dzZXJpZnkgZXRjLlxucmVxdWlyZSgnd2hhdHdnLWZldGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHNlbGYuZmV0Y2guYmluZChzZWxmKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9pc29tb3JwaGljLWZldGNoL2ZldGNoLW5wbS1icm93c2VyaWZ5LmpzIiwidmFyIHN1cHBvcnQgPSB7XG4gIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gIGJsb2I6XG4gICAgJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiZcbiAgICAnQmxvYicgaW4gc2VsZiAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxufVxuXG5mdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikge1xuICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbn1cblxuaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gIF1cblxuICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPVxuICAgIEFycmF5QnVmZmVyLmlzVmlldyB8fFxuICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgfVxuICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5eX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICB9XG4gIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbmZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gIHZhciBpdGVyYXRvciA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGl0ZXJhdG9yXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdGhpcy5tYXAgPSB7fVxuXG4gIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgIH0sIHRoaXMpXG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV1cbiAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlICsgJywgJyArIHZhbHVlIDogdmFsdWVcbn1cblxuSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpXG4gICAgfVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChuYW1lKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpdGVtcy5wdXNoKHZhbHVlKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbmlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG59XG5cbmZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gIH1cbiAgYm9keS5ib2R5VXNlZCA9IHRydWVcbn1cblxuZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgIH1cbiAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pXG4gIH1cbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICB9IGVsc2Uge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSlcbiAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgfVxufVxuXG5mdW5jdGlvbiBCb2R5KCkge1xuICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSlcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVkKHRoaXMpIHx8IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3RlZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxudmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gIHJldHVybiBtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSA/IHVwY2FzZWQgOiBtZXRob2Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgIH1cbiAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICB0aGlzLnNpZ25hbCA9IGlucHV0LnNpZ25hbFxuICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICB9XG5cbiAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnc2FtZS1vcmlnaW4nXG4gIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgfVxuICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gIHRoaXMuc2lnbmFsID0gb3B0aW9ucy5zaWduYWwgfHwgdGhpcy5zaWduYWxcbiAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICB9XG4gIHRoaXMuX2luaXRCb2R5KGJvZHkpXG59XG5cblJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7Ym9keTogdGhpcy5fYm9keUluaXR9KVxufVxuXG5mdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gIGJvZHlcbiAgICAudHJpbSgpXG4gICAgLnNwbGl0KCcmJylcbiAgICAuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGZvcm1cbn1cblxuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJylcbiAgcHJlUHJvY2Vzc2VkSGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKVxuICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgIGlmIChrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKClcbiAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgfVxuICB9KVxuICByZXR1cm4gaGVhZGVyc1xufVxuXG5Cb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1c1xuICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gIHRoaXMuc3RhdHVzVGV4dCA9ICdzdGF0dXNUZXh0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogJ09LJ1xuICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG59XG5cbkJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cblJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICB1cmw6IHRoaXMudXJsXG4gIH0pXG59XG5cblJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gIHJldHVybiByZXNwb25zZVxufVxuXG52YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG59XG5cbmV4cG9ydCB2YXIgRE9NRXhjZXB0aW9uID0gc2VsZi5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgIH1cblxuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgIH1cblxuICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgIH1cblxuICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICB9KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsKSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gIH0pXG59XG5cbmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxuXG5pZiAoIXNlbGYuZmV0Y2gpIHtcbiAgc2VsZi5mZXRjaCA9IGZldGNoXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy93aGF0d2ctZmV0Y2gvZmV0Y2guanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcbnZhciBjaGVja1Byb3BUeXBlcyA9IHJlcXVpcmUoJy4vY2hlY2tQcm9wVHlwZXMnKTtcblxudmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgdGV4dDtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9O1xufVxuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcykge1xuICAvKiBnbG9iYWwgU3ltYm9sICovXG4gIHZhciBJVEVSQVRPUl9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcbiAgdmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InOyAvLyBCZWZvcmUgU3ltYm9sIHNwZWMuXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGl0ZXJhdG9yIG1ldGhvZCBmdW5jdGlvbiBjb250YWluZWQgb24gdGhlIGl0ZXJhYmxlIG9iamVjdC5cbiAgICpcbiAgICogQmUgc3VyZSB0byBpbnZva2UgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGl0ZXJhYmxlIGFzIGNvbnRleHQ6XG4gICAqXG4gICAqICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obXlJdGVyYWJsZSk7XG4gICAqICAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgKiAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwobXlJdGVyYWJsZSk7XG4gICAqICAgICAgIC4uLlxuICAgKiAgICAgfVxuICAgKlxuICAgKiBAcGFyYW0gez9vYmplY3R9IG1heWJlSXRlcmFibGVcbiAgICogQHJldHVybiB7P2Z1bmN0aW9ufVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBtYXliZUl0ZXJhYmxlICYmIChJVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtJVEVSQVRPUl9TWU1CT0xdIHx8IG1heWJlSXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdKTtcbiAgICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvckZuO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb2xsZWN0aW9uIG9mIG1ldGhvZHMgdGhhdCBhbGxvdyBkZWNsYXJhdGlvbiBhbmQgdmFsaWRhdGlvbiBvZiBwcm9wcyB0aGF0IGFyZVxuICAgKiBzdXBwbGllZCB0byBSZWFjdCBjb21wb25lbnRzLiBFeGFtcGxlIHVzYWdlOlxuICAgKlxuICAgKiAgIHZhciBQcm9wcyA9IHJlcXVpcmUoJ1JlYWN0UHJvcFR5cGVzJyk7XG4gICAqICAgdmFyIE15QXJ0aWNsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICogICAgIHByb3BUeXBlczoge1xuICAgKiAgICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgcHJvcCBuYW1lZCBcImRlc2NyaXB0aW9uXCIuXG4gICAqICAgICAgIGRlc2NyaXB0aW9uOiBQcm9wcy5zdHJpbmcsXG4gICAqXG4gICAqICAgICAgIC8vIEEgcmVxdWlyZWQgZW51bSBwcm9wIG5hbWVkIFwiY2F0ZWdvcnlcIi5cbiAgICogICAgICAgY2F0ZWdvcnk6IFByb3BzLm9uZU9mKFsnTmV3cycsJ1Bob3RvcyddKS5pc1JlcXVpcmVkLFxuICAgKlxuICAgKiAgICAgICAvLyBBIHByb3AgbmFtZWQgXCJkaWFsb2dcIiB0aGF0IHJlcXVpcmVzIGFuIGluc3RhbmNlIG9mIERpYWxvZy5cbiAgICogICAgICAgZGlhbG9nOiBQcm9wcy5pbnN0YW5jZU9mKERpYWxvZykuaXNSZXF1aXJlZFxuICAgKiAgICAgfSxcbiAgICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7IC4uLiB9XG4gICAqICAgfSk7XG4gICAqXG4gICAqIEEgbW9yZSBmb3JtYWwgc3BlY2lmaWNhdGlvbiBvZiBob3cgdGhlc2UgbWV0aG9kcyBhcmUgdXNlZDpcbiAgICpcbiAgICogICB0eXBlIDo9IGFycmF5fGJvb2x8ZnVuY3xvYmplY3R8bnVtYmVyfHN0cmluZ3xvbmVPZihbLi4uXSl8aW5zdGFuY2VPZiguLi4pXG4gICAqICAgZGVjbCA6PSBSZWFjdFByb3BUeXBlcy57dHlwZX0oLmlzUmVxdWlyZWQpP1xuICAgKlxuICAgKiBFYWNoIGFuZCBldmVyeSBkZWNsYXJhdGlvbiBwcm9kdWNlcyBhIGZ1bmN0aW9uIHdpdGggdGhlIHNhbWUgc2lnbmF0dXJlLiBUaGlzXG4gICAqIGFsbG93cyB0aGUgY3JlYXRpb24gb2YgY3VzdG9tIHZhbGlkYXRpb24gZnVuY3Rpb25zLiBGb3IgZXhhbXBsZTpcbiAgICpcbiAgICogIHZhciBNeUxpbmsgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAqICAgIHByb3BUeXBlczoge1xuICAgKiAgICAgIC8vIEFuIG9wdGlvbmFsIHN0cmluZyBvciBVUkkgcHJvcCBuYW1lZCBcImhyZWZcIi5cbiAgICogICAgICBocmVmOiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICogICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAqICAgICAgICBpZiAocHJvcFZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHByb3BWYWx1ZSAhPT0gJ3N0cmluZycgJiZcbiAgICogICAgICAgICAgICAhKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFVSSSkpIHtcbiAgICogICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcbiAgICogICAgICAgICAgICAnRXhwZWN0ZWQgYSBzdHJpbmcgb3IgYW4gVVJJIGZvciAnICsgcHJvcE5hbWUgKyAnIGluICcgK1xuICAgKiAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAgICogICAgICAgICAgKTtcbiAgICogICAgICAgIH1cbiAgICogICAgICB9XG4gICAqICAgIH0sXG4gICAqICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7Li4ufVxuICAgKiAgfSk7XG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cblxuICB2YXIgQU5PTllNT1VTID0gJzw8YW5vbnltb3VzPj4nO1xuXG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdhcnJheScpLFxuICAgIGJvb2w6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdib29sZWFuJyksXG4gICAgZnVuYzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Z1bmN0aW9uJyksXG4gICAgbnVtYmVyOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignbnVtYmVyJyksXG4gICAgb2JqZWN0OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignb2JqZWN0JyksXG4gICAgc3RyaW5nOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignc3RyaW5nJyksXG4gICAgc3ltYm9sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignc3ltYm9sJyksXG5cbiAgICBhbnk6IGNyZWF0ZUFueVR5cGVDaGVja2VyKCksXG4gICAgYXJyYXlPZjogY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyLFxuICAgIGVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpLFxuICAgIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG4gICAgbm9kZTogY3JlYXRlTm9kZUNoZWNrZXIoKSxcbiAgICBvYmplY3RPZjogY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcixcbiAgICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICAgIG9uZU9mVHlwZTogY3JlYXRlVW5pb25UeXBlQ2hlY2tlcixcbiAgICBzaGFwZTogY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcixcbiAgICBleGFjdDogY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcixcbiAgfTtcblxuICAvKipcbiAgICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAgICovXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlKi9cbiAgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSovXG5cbiAgLyoqXG4gICAqIFdlIHVzZSBhbiBFcnJvci1saWtlIG9iamVjdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhcyBwZW9wbGUgbWF5IGNhbGxcbiAgICogUHJvcFR5cGVzIGRpcmVjdGx5IGFuZCBpbnNwZWN0IHRoZWlyIG91dHB1dC4gSG93ZXZlciwgd2UgZG9uJ3QgdXNlIHJlYWxcbiAgICogRXJyb3JzIGFueW1vcmUuIFdlIGRvbid0IGluc3BlY3QgdGhlaXIgc3RhY2sgYW55d2F5LCBhbmQgY3JlYXRpbmcgdGhlbVxuICAgKiBpcyBwcm9oaWJpdGl2ZWx5IGV4cGVuc2l2ZSBpZiB0aGV5IGFyZSBjcmVhdGVkIHRvbyBvZnRlbiwgc3VjaCBhcyB3aGF0XG4gICAqIGhhcHBlbnMgaW4gb25lT2ZUeXBlKCkgZm9yIGFueSB0eXBlIGJlZm9yZSB0aGUgb25lIHRoYXQgbWF0Y2hlZC5cbiAgICovXG4gIGZ1bmN0aW9uIFByb3BUeXBlRXJyb3IobWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5zdGFjayA9ICcnO1xuICB9XG4gIC8vIE1ha2UgYGluc3RhbmNlb2YgRXJyb3JgIHN0aWxsIHdvcmsgZm9yIHJldHVybmVkIGVycm9ycy5cbiAgUHJvcFR5cGVFcnJvci5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGU7XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlID0ge307XG4gICAgICB2YXIgbWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQgPSAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgIHByb3BGdWxsTmFtZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICAgICAgaWYgKHNlY3JldCAhPT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgICAgaWYgKHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgICAgICAgICAvLyBOZXcgYmVoYXZpb3Igb25seSBmb3IgdXNlcnMgb2YgYHByb3AtdHlwZXNgIHBhY2thZ2VcbiAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgICAgICAgJ1VzZSBgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKClgIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAgICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICAgICAgICApO1xuICAgICAgICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIC8vIE9sZCBiZWhhdmlvciBmb3IgcGVvcGxlIHVzaW5nIFJlYWN0LlByb3BUeXBlc1xuICAgICAgICAgIHZhciBjYWNoZUtleSA9IGNvbXBvbmVudE5hbWUgKyAnOicgKyBwcm9wTmFtZTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGVbY2FjaGVLZXldICYmXG4gICAgICAgICAgICAvLyBBdm9pZCBzcGFtbWluZyB0aGUgY29uc29sZSBiZWNhdXNlIHRoZXkgYXJlIG9mdGVuIG5vdCBhY3Rpb25hYmxlIGV4Y2VwdCBmb3IgbGliIGF1dGhvcnNcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50IDwgM1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgICAnWW91IGFyZSBtYW51YWxseSBjYWxsaW5nIGEgUmVhY3QuUHJvcFR5cGVzIHZhbGlkYXRpb24gJyArXG4gICAgICAgICAgICAgICdmdW5jdGlvbiBmb3IgdGhlIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgcHJvcCBvbiBgJyArIGNvbXBvbmVudE5hbWUgICsgJ2AuIFRoaXMgaXMgZGVwcmVjYXRlZCAnICtcbiAgICAgICAgICAgICAgJ2FuZCB3aWxsIHRocm93IGluIHRoZSBzdGFuZGFsb25lIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICAgICAgICAgJ1lvdSBtYXkgYmUgc2VlaW5nIHRoaXMgd2FybmluZyBkdWUgdG8gYSB0aGlyZC1wYXJ0eSBQcm9wVHlwZXMgJyArXG4gICAgICAgICAgICAgICdsaWJyYXJ5LiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWRvbnQtY2FsbC1wcm9wdHlwZXMgJyArICdmb3IgZGV0YWlscy4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGVbY2FjaGVLZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkICcgKyAoJ2luIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGBudWxsYC4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignVGhlICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGJ1dCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7XG4gICAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG5cbiAgICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKGV4cGVjdGVkVHlwZSkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG4gICAgICAgIC8vIGBwcm9wVmFsdWVgIGJlaW5nIGluc3RhbmNlIG9mLCBzYXksIGRhdGUvcmVnZXhwLCBwYXNzIHRoZSAnb2JqZWN0J1xuICAgICAgICAvLyBjaGVjaywgYnV0IHdlIGNhbiBvZmZlciBhIG1vcmUgcHJlY2lzZSBlcnJvciBtZXNzYWdlIGhlcmUgcmF0aGVyIHRoYW5cbiAgICAgICAgLy8gJ29mIHR5cGUgYG9iamVjdGAnLlxuICAgICAgICB2YXIgcHJlY2lzZVR5cGUgPSBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByZWNpc2VUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkICcpICsgKCdgJyArIGV4cGVjdGVkVHlwZSArICdgLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGwpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignUHJvcGVydHkgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiBjb21wb25lbnQgYCcgKyBjb21wb25lbnROYW1lICsgJ2AgaGFzIGludmFsaWQgUHJvcFR5cGUgbm90YXRpb24gaW5zaWRlIGFycmF5T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gYXJyYXkuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBpLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJ1snICsgaSArICddJywgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgaWYgKCFpc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgc2luZ2xlIFJlYWN0RWxlbWVudC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCEocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgICAgdmFyIGFjdHVhbENsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pO1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBhY3R1YWxDbGFzc05hbWUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2luc3RhbmNlIG9mIGAnICsgZXhwZWN0ZWRDbGFzc05hbWUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFZhbHVlcykpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBwcmludFdhcm5pbmcoJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaXMocHJvcFZhbHVlLCBleHBlY3RlZFZhbHVlc1tpXSkpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWVzU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRWYWx1ZXMpO1xuICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB2YWx1ZSBgJyArIHByb3BWYWx1ZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBvbmUgb2YgJyArIHZhbHVlc1N0cmluZyArICcuJykpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBvYmplY3RPZi4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBvYmplY3QuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHByb3BWYWx1ZSkge1xuICAgICAgICBpZiAocHJvcFZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheU9mVHlwZUNoZWNrZXJzKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHByaW50V2FybmluZygnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGw7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAodHlwZW9mIGNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZS4gRXhwZWN0ZWQgYW4gYXJyYXkgb2YgY2hlY2sgZnVuY3Rpb25zLCBidXQgJyArXG4gICAgICAgICAgJ3JlY2VpdmVkICcgKyBnZXRQb3N0Zml4Rm9yVHlwZVdhcm5pbmcoY2hlY2tlcikgKyAnIGF0IGluZGV4ICcgKyBpICsgJy4nXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGVja2VyID0gYXJyYXlPZlR5cGVDaGVja2Vyc1tpXTtcbiAgICAgICAgaWYgKGNoZWNrZXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBSZWFjdFByb3BUeXBlc1NlY3JldCkgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AuJykpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTm9kZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAoIWlzTm9kZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3ROb2RlLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNoYXBlVHlwZXMpIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIoc2hhcGVUeXBlcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGBvYmplY3RgLicpKTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgYWxsIGtleXMgaW4gY2FzZSBzb21lIGFyZSByZXF1aXJlZCBidXQgbWlzc2luZyBmcm9tXG4gICAgICAvLyBwcm9wcy5cbiAgICAgIHZhciBhbGxLZXlzID0gYXNzaWduKHt9LCBwcm9wc1twcm9wTmFtZV0sIHNoYXBlVHlwZXMpO1xuICAgICAgZm9yICh2YXIga2V5IGluIGFsbEtleXMpIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBzaGFwZVR5cGVzW2tleV07XG4gICAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcihcbiAgICAgICAgICAgICdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBrZXkgYCcgKyBrZXkgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nICtcbiAgICAgICAgICAgICdcXG5CYWQgb2JqZWN0OiAnICsgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKSArXG4gICAgICAgICAgICAnXFxuVmFsaWQga2V5czogJyArICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzaGFwZVR5cGVzKSwgbnVsbCwgJyAgJylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNOb2RlKHByb3BWYWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZW9mIHByb3BWYWx1ZSkge1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICByZXR1cm4gIXByb3BWYWx1ZTtcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gcHJvcFZhbHVlLmV2ZXJ5KGlzTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BWYWx1ZSA9PT0gbnVsbCB8fCBpc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4ocHJvcFZhbHVlKTtcbiAgICAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwocHJvcFZhbHVlKTtcbiAgICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gcHJvcFZhbHVlLmVudHJpZXMpIHtcbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgaWYgKCFpc05vZGUoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSXRlcmF0b3Igd2lsbCBwcm92aWRlIGVudHJ5IFtrLHZdIHR1cGxlcyByYXRoZXIgdGhhbiB2YWx1ZXMuXG4gICAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNOb2RlKGVudHJ5WzFdKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSB7XG4gICAgLy8gTmF0aXZlIFN5bWJvbC5cbiAgICBpZiAocHJvcFR5cGUgPT09ICdzeW1ib2wnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddID09PSAnU3ltYm9sJ1xuICAgIGlmIChwcm9wVmFsdWVbJ0BAdG9TdHJpbmdUYWcnXSA9PT0gJ1N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIGZvciBub24tc3BlYyBjb21wbGlhbnQgU3ltYm9scyB3aGljaCBhcmUgcG9seWZpbGxlZC5cbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBwcm9wVmFsdWUgaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIEVxdWl2YWxlbnQgb2YgYHR5cGVvZmAgYnV0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgYXJyYXkgYW5kIHJlZ2V4cC5cbiAgZnVuY3Rpb24gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSB7XG4gICAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ2FycmF5JztcbiAgICB9XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgLy8gT2xkIHdlYmtpdHMgKGF0IGxlYXN0IHVudGlsIEFuZHJvaWQgNC4wKSByZXR1cm4gJ2Z1bmN0aW9uJyByYXRoZXIgdGhhblxuICAgICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4gICAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICAgIHJldHVybiAnb2JqZWN0JztcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ3N5bWJvbCc7XG4gICAgfVxuICAgIHJldHVybiBwcm9wVHlwZTtcbiAgfVxuXG4gIC8vIFRoaXMgaGFuZGxlcyBtb3JlIHR5cGVzIHRoYW4gYGdldFByb3BUeXBlYC4gT25seSB1c2VkIGZvciBlcnJvciBtZXNzYWdlcy5cbiAgLy8gU2VlIGBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcmAuXG4gIGZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJyB8fCBwcm9wVmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJyArIHByb3BWYWx1ZTtcbiAgICB9XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gJ2RhdGUnO1xuICAgICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmV0dXJuICdyZWdleHAnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG4gIH1cblxuICAvLyBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgaXMgcG9zdGZpeGVkIHRvIGEgd2FybmluZyBhYm91dCBhbiBpbnZhbGlkIHR5cGUuXG4gIC8vIEZvciBleGFtcGxlLCBcInVuZGVmaW5lZFwiIG9yIFwib2YgdHlwZSBhcnJheVwiXG4gIGZ1bmN0aW9uIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gZ2V0UHJlY2lzZVR5cGUodmFsdWUpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgcmV0dXJuICdhbiAnICsgdHlwZTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICBjYXNlICdyZWdleHAnOlxuICAgICAgICByZXR1cm4gJ2EgJyArIHR5cGU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm5zIGNsYXNzIG5hbWUgb2YgdGhlIG9iamVjdCwgaWYgYW55LlxuICBmdW5jdGlvbiBnZXRDbGFzc05hbWUocHJvcFZhbHVlKSB7XG4gICAgaWYgKCFwcm9wVmFsdWUuY29uc3RydWN0b3IgfHwgIXByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgICByZXR1cm4gQU5PTllNT1VTO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH1cblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGNoZWNrUHJvcFR5cGVzO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanMiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMgPSBlbXB0eUZ1bmN0aW9uO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCcm93c2VyUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJSb3V0ZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvQnJvd3NlclJvdXRlci5qcyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNIaXN0b3J5LCBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlLCBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBnZXRIaXN0b3J5U3RhdGUgPSBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cbnZhciBjcmVhdGVCcm93c2VySGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJyb3dzZXJIaXN0b3J5O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZUJyb3dzZXJIaXN0b3J5LmpzIiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bykge1xuICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG5cbiAgdmFyIHRvUGFydHMgPSB0byAmJiB0by5zcGxpdCgnLycpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IHZvaWQgMDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gIH1pZiAobXVzdEVuZEFicyAmJiBmcm9tUGFydHNbMF0gIT09ICcnICYmICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpKSBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFUeXBlID0gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpO1xuICB2YXIgYlR5cGUgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYik7XG5cbiAgaWYgKGFUeXBlICE9PSBiVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gYS52YWx1ZU9mKCk7XG4gICAgdmFyIGJWYWx1ZSA9IGIudmFsdWVPZigpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZUVxdWFsO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgc3RyaXBMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggfSBmcm9tICcuL0RPTVV0aWxzJztcblxudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbnZhciBnZXRIYXNoUGF0aCA9IGZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufTtcblxudmFyIHB1c2hIYXNoUGF0aCA9IGZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHJldHVybiB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59O1xuXG52YXIgcmVwbGFjZUhhc2hQYXRoID0gZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJyMnKTtcblxuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaHJlZi5zbGljZSgwLCBoYXNoSW5kZXggPj0gMCA/IGhhc2hJbmRleCA6IDApICsgJyMnICsgcGF0aCk7XG59O1xuXG52YXIgY3JlYXRlSGFzaEhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBwcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB1bmRlZmluZWQgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG5cbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpO1xuXG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlSGFzaEhpc3Rvcnk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlSGFzaEhpc3RvcnkuanMiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcblxudmFyIGNsYW1wID0gZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xudmFyIGNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBwcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB1bmRlZmluZWQgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBwcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB1bmRlZmluZWQgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNZW1vcnlIaXN0b3J5O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVIYXNoSGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIYXNoUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgSGFzaFJvdXRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9IYXNoUm91dGVyLmpzIiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBNZW1vcnlSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL01lbW9yeVJvdXRlci5qcyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgUm91dGUgZnJvbSBcIi4vUm91dGVcIjtcbmltcG9ydCBMaW5rIGZyb20gXCIuL0xpbmtcIjtcblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xudmFyIE5hdkxpbmsgPSBmdW5jdGlvbiBOYXZMaW5rKF9yZWYpIHtcbiAgdmFyIHRvID0gX3JlZi50byxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGdldElzQWN0aXZlID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1widG9cIiwgXCJleGFjdFwiLCBcInN0cmljdFwiLCBcImxvY2F0aW9uXCIsIFwiYWN0aXZlQ2xhc3NOYW1lXCIsIFwiY2xhc3NOYW1lXCIsIFwiYWN0aXZlU3R5bGVcIiwgXCJzdHlsZVwiLCBcImlzQWN0aXZlXCIsIFwiYXJpYS1jdXJyZW50XCJdKTtcblxuICB2YXIgcGF0aCA9ICh0eXBlb2YgdG8gPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih0bykpID09PSBcIm9iamVjdFwiID8gdG8ucGF0aG5hbWUgOiB0bztcblxuICAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuICB2YXIgZXNjYXBlZFBhdGggPSBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgZXhhY3Q6IGV4YWN0LFxuICAgIHN0cmljdDogc3RyaWN0LFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oX3JlZjIpIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF9yZWYyLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoID0gX3JlZjIubWF0Y2g7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICEhKGdldElzQWN0aXZlID8gZ2V0SXNBY3RpdmUobWF0Y2gsIGxvY2F0aW9uKSA6IG1hdGNoKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe1xuICAgICAgICB0bzogdG8sXG4gICAgICAgIGNsYXNzTmFtZTogaXNBY3RpdmUgPyBbY2xhc3NOYW1lLCBhY3RpdmVDbGFzc05hbWVdLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KS5qb2luKFwiIFwiKSA6IGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSkgOiBzdHlsZSxcbiAgICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbFxuICAgICAgfSwgcmVzdCkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5OYXZMaW5rLnByb3BUeXBlcyA9IHtcbiAgdG86IExpbmsucHJvcFR5cGVzLnRvLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIFwiYXJpYS1jdXJyZW50XCI6IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKVxufTtcblxuTmF2TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZUNsYXNzTmFtZTogXCJhY3RpdmVcIixcbiAgXCJhcmlhLWN1cnJlbnRcIjogXCJwYWdlXCJcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkxpbms7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTmF2TGluay5qcyIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBQcm9tcHQgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9Qcm9tcHRcIjtcblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1Byb21wdC5qcyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUmVkaXJlY3QgZnJvbSBcInJlYWN0LXJvdXRlci9lcy9SZWRpcmVjdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9SZWRpcmVjdC5qcyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3RhdGljUm91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvU3RhdGljUm91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9TdGF0aWNSb3V0ZXIuanMiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFN3aXRjaCBmcm9tIFwicmVhY3Qtcm91dGVyL2VzL1N3aXRjaFwiO1xuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3dpdGNoLmpzIiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBnZW5lcmF0ZVBhdGggZnJvbSBcInJlYWN0LXJvdXRlci9lcy9nZW5lcmF0ZVBhdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVQYXRoO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL2dlbmVyYXRlUGF0aC5qcyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCJyZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9tYXRjaFBhdGguanMiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IHdpdGhSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvd2l0aFJvdXRlci5qcyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgeyBDb21wb25lbnQsIENoaWxkcmVuIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHN0b3JlU2hhcGUsIHN1YnNjcmlwdGlvblNoYXBlIH0gZnJvbSAnLi4vdXRpbHMvUHJvcFR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4uL3V0aWxzL3dhcm5pbmcnO1xudmFyIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKCkge1xuICBpZiAoZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IHRydWU7XG4gIHdhcm5pbmcoJzxQcm92aWRlcj4gZG9lcyBub3Qgc3VwcG9ydCBjaGFuZ2luZyBgc3RvcmVgIG9uIHRoZSBmbHkuICcgKyAnSXQgaXMgbW9zdCBsaWtlbHkgdGhhdCB5b3Ugc2VlIHRoaXMgZXJyb3IgYmVjYXVzZSB5b3UgdXBkYXRlZCB0byAnICsgJ1JlZHV4IDIueCBhbmQgUmVhY3QgUmVkdXggMi54IHdoaWNoIG5vIGxvbmdlciBob3QgcmVsb2FkIHJlZHVjZXJzICcgKyAnYXV0b21hdGljYWxseS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWR1eGpzL3JlYWN0LXJlZHV4L3JlbGVhc2VzLycgKyAndGFnL3YyLjAuMCBmb3IgdGhlIG1pZ3JhdGlvbiBpbnN0cnVjdGlvbnMuJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm92aWRlcihzdG9yZUtleSkge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4O1xuXG4gIGlmIChzdG9yZUtleSA9PT0gdm9pZCAwKSB7XG4gICAgc3RvcmVLZXkgPSAnc3RvcmUnO1xuICB9XG5cbiAgdmFyIHN1YnNjcmlwdGlvbktleSA9IHN0b3JlS2V5ICsgXCJTdWJzY3JpcHRpb25cIjtcblxuICB2YXIgUHJvdmlkZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltzdG9yZUtleV0gPSB0aGlzW3N0b3JlS2V5XSwgX3JlZltzdWJzY3JpcHRpb25LZXldID0gbnVsbCwgX3JlZjtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gUHJvdmlkZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgICBfdGhpc1tzdG9yZUtleV0gPSBwcm9wcy5zdG9yZTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIENoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfTtcblxuICAgIHJldHVybiBQcm92aWRlcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUHJvdmlkZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiAobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpc1tzdG9yZUtleV0gIT09IG5leHRQcm9wcy5zdG9yZSkge1xuICAgICAgICB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IHN0b3JlU2hhcGUuaXNSZXF1aXJlZCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZFxuICB9O1xuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W3N0b3JlS2V5XSA9IHN0b3JlU2hhcGUuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W3N1YnNjcmlwdGlvbktleV0gPSBzdWJzY3JpcHRpb25TaGFwZSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcbiAgcmV0dXJuIFByb3ZpZGVyO1xufVxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlUHJvdmlkZXIoKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlOiB0cnVlLFxuICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICBtaXhpbnM6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgY2FsbGVlOiB0cnVlLFxuICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcml0eTogdHJ1ZVxufTtcblxudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgICByZW5kZXI6IHRydWVcbn07XG5cbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tSZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuXG4gICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0YXJnZXRTdGF0aWNzID0gVFlQRV9TVEFUSUNTW3RhcmdldENvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbiAgICAgICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBUWVBFX1NUQVRJQ1Nbc291cmNlQ29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjYuMFxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7XG52YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLG49Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTpcbjYwMTE2O2Z1bmN0aW9uIHQoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHA9YS4kJHR5cGVvZjtzd2l0Y2gocCl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBlOmNhc2UgZzpjYXNlIGY6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG06Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHB9fWNhc2UgZDpyZXR1cm4gcH19fWZ1bmN0aW9uIHUoYSl7cmV0dXJuIHQoYSk9PT1sfWV4cG9ydHMudHlwZU9mPXQ7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPWw7ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1tO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bHx8YT09PWd8fGE9PT1mfHxhPT09bnx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09cXx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bSl9O2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHUoYSl9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT11O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09aH07XG5leHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1tfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1lfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1nfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZH07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHQoYSk9PT1mfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjYuMFxuICogcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cblxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50LWxpa2UgdHlwZXMuIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2xcbi8vIG5vciBwb2x5ZmlsbCwgdGhlbiBhIHBsYWluIG51bWJlciBpcyB1c2VkIGZvciBwZXJmb3JtYW5jZS5cbnZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG52YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wb3J0YWwnKSA6IDB4ZWFjYTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZnJhZ21lbnQnKSA6IDB4ZWFjYjtcbnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3RyaWN0X21vZGUnKSA6IDB4ZWFjYztcbnZhciBSRUFDVF9QUk9GSUxFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucHJvZmlsZXInKSA6IDB4ZWFkMjtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucHJvdmlkZXInKSA6IDB4ZWFjZDtcbnZhciBSRUFDVF9DT05URVhUX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5jb250ZXh0JykgOiAweGVhY2U7XG52YXIgUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5jb25jdXJyZW50X21vZGUnKSA6IDB4ZWFjZjtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKSA6IDB4ZWFkMDtcbnZhciBSRUFDVF9TVVNQRU5TRV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2UnKSA6IDB4ZWFkMTtcbnZhciBSRUFDVF9NRU1PX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5tZW1vJykgOiAweGVhZDM7XG52YXIgUkVBQ1RfTEFaWV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QubGF6eScpIDogMHhlYWQ0O1xuXG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nIHx8XG4gIC8vIE5vdGU6IGl0cyB0eXBlb2YgbWlnaHQgYmUgb3RoZXIgdGhhbiAnc3ltYm9sJyBvciAnbnVtYmVyJyBpZiBpdCdzIGEgcG9seWZpbGwuXG4gIHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEUgfHwgdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwgJiYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSk7XG59XG5cbi8qKlxuICogRm9ya2VkIGZyb20gZmJqcy93YXJuaW5nOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9lNjZiYTIwYWQ1YmU0MzNlYjU0NDIzZjJiMDk3ZDgyOTMyNGQ5ZGU2L3BhY2thZ2VzL2ZianMvc3JjL19fZm9ya3NfXy93YXJuaW5nLmpzXG4gKlxuICogT25seSBjaGFuZ2UgaXMgd2UgdXNlIGNvbnNvbGUud2FybiBpbnN0ZWFkIG9mIGNvbnNvbGUuZXJyb3IsXG4gKiBhbmQgZG8gbm90aGluZyB3aGVuICdjb25zb2xlJyBpcyBub3Qgc3VwcG9ydGVkLlxuICogVGhpcyByZWFsbHkgc2ltcGxpZmllcyB0aGUgY29kZS5cbiAqIC0tLVxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciBsb3dQcmlvcml0eVdhcm5pbmcgPSBmdW5jdGlvbiAoKSB7fTtcblxue1xuICB2YXIgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcblxuICBsb3dQcmlvcml0eVdhcm5pbmcgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYGxvd1ByaW9yaXR5V2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBsb3dQcmlvcml0eVdhcm5pbmckMSA9IGxvd1ByaW9yaXR5V2FybmluZztcblxuZnVuY3Rpb24gdHlwZU9mKG9iamVjdCkge1xuICBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyICQkdHlwZW9mID0gb2JqZWN0LiQkdHlwZW9mO1xuXG4gICAgc3dpdGNoICgkJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgIHZhciB0eXBlID0gb2JqZWN0LnR5cGU7XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YXIgJCR0eXBlb2ZUeXBlID0gdHlwZSAmJiB0eXBlLiQkdHlwZW9mO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCQkdHlwZW9mVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICQkdHlwZW9mVHlwZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgIHJldHVybiAkJHR5cGVvZjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vLyBBc3luY01vZGUgYWxpYXMgaXMgZGVwcmVjYXRlZCBhbG9uZyB3aXRoIGlzQXN5bmNNb2RlXG52YXIgQXN5bmNNb2RlID0gUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU7XG52YXIgQ29uY3VycmVudE1vZGUgPSBSRUFDVF9DT05DVVJSRU5UX01PREVfVFlQRTtcbnZhciBDb250ZXh0Q29uc3VtZXIgPSBSRUFDVF9DT05URVhUX1RZUEU7XG52YXIgQ29udGV4dFByb3ZpZGVyID0gUkVBQ1RfUFJPVklERVJfVFlQRTtcbnZhciBFbGVtZW50ID0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xudmFyIEZvcndhcmRSZWYgPSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFO1xudmFyIEZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbnZhciBQcm9maWxlciA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG52YXIgUG9ydGFsID0gUkVBQ1RfUE9SVEFMX1RZUEU7XG52YXIgU3RyaWN0TW9kZSA9IFJFQUNUX1NUUklDVF9NT0RFX1RZUEU7XG5cbnZhciBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSA9IGZhbHNlO1xuXG4vLyBBc3luY01vZGUgc2hvdWxkIGJlIGRlcHJlY2F0ZWRcbmZ1bmN0aW9uIGlzQXN5bmNNb2RlKG9iamVjdCkge1xuICB7XG4gICAgaWYgKCFoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSkge1xuICAgICAgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUgPSB0cnVlO1xuICAgICAgbG93UHJpb3JpdHlXYXJuaW5nJDEoZmFsc2UsICdUaGUgUmVhY3RJcy5pc0FzeW5jTW9kZSgpIGFsaWFzIGhhcyBiZWVuIGRlcHJlY2F0ZWQsICcgKyAnYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBSZWFjdCAxNysuIFVwZGF0ZSB5b3VyIGNvZGUgdG8gdXNlICcgKyAnUmVhY3RJcy5pc0NvbmN1cnJlbnRNb2RlKCkgaW5zdGVhZC4gSXQgaGFzIHRoZSBleGFjdCBzYW1lIEFQSS4nKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGlzQ29uY3VycmVudE1vZGUob2JqZWN0KTtcbn1cbmZ1bmN0aW9uIGlzQ29uY3VycmVudE1vZGUob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU7XG59XG5mdW5jdGlvbiBpc0NvbnRleHRDb25zdW1lcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9DT05URVhUX1RZUEU7XG59XG5mdW5jdGlvbiBpc0NvbnRleHRQcm92aWRlcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QUk9WSURFUl9UWVBFO1xufVxuZnVuY3Rpb24gaXNFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNGb3J3YXJkUmVmKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU7XG59XG5mdW5jdGlvbiBpc0ZyYWdtZW50KG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG59XG5mdW5jdGlvbiBpc1Byb2ZpbGVyKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG59XG5mdW5jdGlvbiBpc1BvcnRhbChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QT1JUQUxfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzU3RyaWN0TW9kZShvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xufVxuXG5leHBvcnRzLnR5cGVPZiA9IHR5cGVPZjtcbmV4cG9ydHMuQXN5bmNNb2RlID0gQXN5bmNNb2RlO1xuZXhwb3J0cy5Db25jdXJyZW50TW9kZSA9IENvbmN1cnJlbnRNb2RlO1xuZXhwb3J0cy5Db250ZXh0Q29uc3VtZXIgPSBDb250ZXh0Q29uc3VtZXI7XG5leHBvcnRzLkNvbnRleHRQcm92aWRlciA9IENvbnRleHRQcm92aWRlcjtcbmV4cG9ydHMuRWxlbWVudCA9IEVsZW1lbnQ7XG5leHBvcnRzLkZvcndhcmRSZWYgPSBGb3J3YXJkUmVmO1xuZXhwb3J0cy5GcmFnbWVudCA9IEZyYWdtZW50O1xuZXhwb3J0cy5Qcm9maWxlciA9IFByb2ZpbGVyO1xuZXhwb3J0cy5Qb3J0YWwgPSBQb3J0YWw7XG5leHBvcnRzLlN0cmljdE1vZGUgPSBTdHJpY3RNb2RlO1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGUgPSBpc1ZhbGlkRWxlbWVudFR5cGU7XG5leHBvcnRzLmlzQXN5bmNNb2RlID0gaXNBc3luY01vZGU7XG5leHBvcnRzLmlzQ29uY3VycmVudE1vZGUgPSBpc0NvbmN1cnJlbnRNb2RlO1xuZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lciA9IGlzQ29udGV4dENvbnN1bWVyO1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlciA9IGlzQ29udGV4dFByb3ZpZGVyO1xuZXhwb3J0cy5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG5leHBvcnRzLmlzRm9yd2FyZFJlZiA9IGlzRm9yd2FyZFJlZjtcbmV4cG9ydHMuaXNGcmFnbWVudCA9IGlzRnJhZ21lbnQ7XG5leHBvcnRzLmlzUHJvZmlsZXIgPSBpc1Byb2ZpbGVyO1xuZXhwb3J0cy5pc1BvcnRhbCA9IGlzUG9ydGFsO1xuZXhwb3J0cy5pc1N0cmljdE1vZGUgPSBpc1N0cmljdE1vZGU7XG4gIH0pKCk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzIiwiLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcbnZhciBDTEVBUkVEID0gbnVsbDtcbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIC8vIHRoZSBjdXJyZW50L25leHQgcGF0dGVybiBpcyBjb3BpZWQgZnJvbSByZWR1eCdzIGNyZWF0ZVN0b3JlIGNvZGUuXG4gIC8vIFRPRE86IHJlZmFjdG9yK2V4cG9zZSB0aGF0IGNvZGUgdG8gYmUgcmV1c2FibGUgaGVyZT9cbiAgdmFyIGN1cnJlbnQgPSBbXTtcbiAgdmFyIG5leHQgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBuZXh0ID0gQ0xFQVJFRDtcbiAgICAgIGN1cnJlbnQgPSBDTEVBUkVEO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudCA9IG5leHQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpc3RlbmVyc1tpXSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgbmV4dC5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgY3VycmVudCA9PT0gQ0xFQVJFRCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG5leHQgPT09IGN1cnJlbnQpIG5leHQgPSBjdXJyZW50LnNsaWNlKCk7XG4gICAgICAgIG5leHQuc3BsaWNlKG5leHQuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yiwgb25TdGF0ZUNoYW5nZSkge1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLm9uU3RhdGVDaGFuZ2UgPSBvblN0YXRlQ2hhbmdlO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIF9wcm90by50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5vblN0YXRlQ2hhbmdlKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMub25TdGF0ZUNoYW5nZSk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXG4gIHNlbGVjdG9yRmFjdG9yeSwgd2hpY2ggaGFzIHRoZSBzaWduYXR1cmU6XG5cbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcbiAgXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxuXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxuICBtZXJnZVByb3BzRmFjdG9yaWVzLCBhbmQgcHVyZSBhcmdzLlxuXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxuICBpdCByZWNlaXZlcyBuZXcgcHJvcHMgb3Igc3RvcmUgc3RhdGUuXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJwdXJlXCIsIFwiYXJlU3RhdGVzRXF1YWxcIiwgXCJhcmVPd25Qcm9wc0VxdWFsXCIsIFwiYXJlU3RhdGVQcm9wc0VxdWFsXCIsIFwiYXJlTWVyZ2VkUHJvcHNFcXVhbFwiXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gXCJDb25uZWN0KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSxcbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb25uZWN0KCk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsInZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHJldHVybiB0cnVlO1xuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duLmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsImltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xyXG5cdGlmKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vICh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIi8qKlxyXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cclxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXHJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9pc1BsYWluT2JqZWN0LmpzIiwiaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24obWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwU3RhdGVUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmcobWFwU3RhdGVUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwU3RhdGVUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZ107XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3duUHJvcHMsIHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycyc7XG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcbiAgdmFyIGhhc1J1bkF0TGVhc3RPbmNlID0gZmFsc2U7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIG93blByb3BzO1xuICB2YXIgc3RhdGVQcm9wcztcbiAgdmFyIGRpc3BhdGNoUHJvcHM7XG4gIHZhciBtZXJnZWRQcm9wcztcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCkge1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICB2YXIgcHJvcHNDaGFuZ2VkID0gIWFyZU93blByb3BzRXF1YWwobmV4dE93blByb3BzLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFhcmVTdGF0ZXNFcXVhbChuZXh0U3RhdGUsIHN0YXRlKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufSAvLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJpbml0TWFwU3RhdGVUb1Byb3BzXCIsIFwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wc1wiLCBcImluaXRNZXJnZVByb3BzXCJdKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsImltcG9ydCB3YXJuaW5nIGZyb20gJy4uL3V0aWxzL3dhcm5pbmcnO1xuXG5mdW5jdGlvbiB2ZXJpZnkoc2VsZWN0b3IsIG1ldGhvZE5hbWUsIGRpc3BsYXlOYW1lKSB7XG4gIGlmICghc2VsZWN0b3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIHZhbHVlIGZvciBcIiArIG1ldGhvZE5hbWUgKyBcIiBpbiBcIiArIGRpc3BsYXlOYW1lICsgXCIuXCIpO1xuICB9IGVsc2UgaWYgKG1ldGhvZE5hbWUgPT09ICdtYXBTdGF0ZVRvUHJvcHMnIHx8IG1ldGhvZE5hbWUgPT09ICdtYXBEaXNwYXRjaFRvUHJvcHMnKSB7XG4gICAgaWYgKCFzZWxlY3Rvci5oYXNPd25Qcm9wZXJ0eSgnZGVwZW5kc09uT3duUHJvcHMnKSkge1xuICAgICAgd2FybmluZyhcIlRoZSBzZWxlY3RvciBmb3IgXCIgKyBtZXRob2ROYW1lICsgXCIgb2YgXCIgKyBkaXNwbGF5TmFtZSArIFwiIGRpZCBub3Qgc3BlY2lmeSBhIHZhbHVlIGZvciBkZXBlbmRzT25Pd25Qcm9wcy5cIik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGxheU5hbWUpIHtcbiAgdmVyaWZ5KG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycsIGRpc3BsYXlOYW1lKTtcbiAgdmVyaWZ5KG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycsIGRpc3BsYXlOYW1lKTtcbiAgdmVyaWZ5KG1lcmdlUHJvcHMsICdtZXJnZVByb3BzJywgZGlzcGxheU5hbWUpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3ZlcmlmeVN1YnNlbGVjdG9ycy5qcyIsImltcG9ydCB7IG1hdGNoUGF0aCwgUm91dGVyLCBTd2l0Y2gsIFJvdXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmZ1bmN0aW9uIG1hdGNoUm91dGVzKHJvdXRlcywgcGF0aG5hbWUsXG4vKm5vdCBwdWJsaWMgQVBJKi9cbmJyYW5jaCkge1xuICBpZiAoYnJhbmNoID09PSB2b2lkIDApIHtcbiAgICBicmFuY2ggPSBbXTtcbiAgfVxuXG4gIHJvdXRlcy5zb21lKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIHZhciBtYXRjaCA9IHJvdXRlLnBhdGggPyBtYXRjaFBhdGgocGF0aG5hbWUsIHJvdXRlKSA6IGJyYW5jaC5sZW5ndGggPyBicmFuY2hbYnJhbmNoLmxlbmd0aCAtIDFdLm1hdGNoIC8vIHVzZSBwYXJlbnQgbWF0Y2hcbiAgICA6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKTsgLy8gdXNlIGRlZmF1bHQgXCJyb290XCIgbWF0Y2hcblxuICAgIGlmIChtYXRjaCkge1xuICAgICAgYnJhbmNoLnB1c2goe1xuICAgICAgICByb3V0ZTogcm91dGUsXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChyb3V0ZS5yb3V0ZXMpIHtcbiAgICAgICAgbWF0Y2hSb3V0ZXMocm91dGUucm91dGVzLCBwYXRobmFtZSwgYnJhbmNoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoO1xufVxuXG5mdW5jdGlvbiByZW5kZXJSb3V0ZXMocm91dGVzLCBleHRyYVByb3BzLCBzd2l0Y2hQcm9wcykge1xuICBpZiAoZXh0cmFQcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgZXh0cmFQcm9wcyA9IHt9O1xuICB9XG5cbiAgaWYgKHN3aXRjaFByb3BzID09PSB2b2lkIDApIHtcbiAgICBzd2l0Y2hQcm9wcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHJvdXRlcyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3dpdGNoLCBzd2l0Y2hQcm9wcywgcm91dGVzLm1hcChmdW5jdGlvbiAocm91dGUsIGkpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwge1xuICAgICAga2V5OiByb3V0ZS5rZXkgfHwgaSxcbiAgICAgIHBhdGg6IHJvdXRlLnBhdGgsXG4gICAgICBleGFjdDogcm91dGUuZXhhY3QsXG4gICAgICBzdHJpY3Q6IHJvdXRlLnN0cmljdCxcbiAgICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHByb3BzKSB7XG4gICAgICAgIHJldHVybiByb3V0ZS5yZW5kZXIgPyByb3V0ZS5yZW5kZXIoX2V4dGVuZHMoe30sIHByb3BzLCBleHRyYVByb3BzLCB7XG4gICAgICAgICAgcm91dGU6IHJvdXRlXG4gICAgICAgIH0pKSA6IFJlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuY29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIGV4dHJhUHJvcHMsIHtcbiAgICAgICAgICByb3V0ZTogcm91dGVcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KSkgOiBudWxsO1xufVxuXG5leHBvcnQgeyBtYXRjaFJvdXRlcywgcmVuZGVyUm91dGVzIH07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWNvbmZpZy9lc20vcmVhY3Qtcm91dGVyLWNvbmZpZy5qcyIsImltcG9ydCBfTWVtb3J5Um91dGVyIGZyb20gXCIuL01lbW9yeVJvdXRlclwiO1xuZXhwb3J0IHsgX01lbW9yeVJvdXRlciBhcyBNZW1vcnlSb3V0ZXIgfTtcbmltcG9ydCBfUHJvbXB0IGZyb20gXCIuL1Byb21wdFwiO1xuZXhwb3J0IHsgX1Byb21wdCBhcyBQcm9tcHQgfTtcbmltcG9ydCBfUmVkaXJlY3QgZnJvbSBcIi4vUmVkaXJlY3RcIjtcbmV4cG9ydCB7IF9SZWRpcmVjdCBhcyBSZWRpcmVjdCB9O1xuaW1wb3J0IF9Sb3V0ZSBmcm9tIFwiLi9Sb3V0ZVwiO1xuZXhwb3J0IHsgX1JvdXRlIGFzIFJvdXRlIH07XG5pbXBvcnQgX1JvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcbmV4cG9ydCB7IF9Sb3V0ZXIgYXMgUm91dGVyIH07XG5pbXBvcnQgX1N0YXRpY1JvdXRlciBmcm9tIFwiLi9TdGF0aWNSb3V0ZXJcIjtcbmV4cG9ydCB7IF9TdGF0aWNSb3V0ZXIgYXMgU3RhdGljUm91dGVyIH07XG5pbXBvcnQgX1N3aXRjaCBmcm9tIFwiLi9Td2l0Y2hcIjtcbmV4cG9ydCB7IF9Td2l0Y2ggYXMgU3dpdGNoIH07XG5pbXBvcnQgX2dlbmVyYXRlUGF0aCBmcm9tIFwiLi9nZW5lcmF0ZVBhdGhcIjtcbmV4cG9ydCB7IF9nZW5lcmF0ZVBhdGggYXMgZ2VuZXJhdGVQYXRoIH07XG5pbXBvcnQgX21hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcbmV4cG9ydCB7IF9tYXRjaFBhdGggYXMgbWF0Y2hQYXRoIH07XG5pbXBvcnQgX3dpdGhSb3V0ZXIgZnJvbSBcIi4vd2l0aFJvdXRlclwiO1xuZXhwb3J0IHsgX3dpdGhSb3V0ZXIgYXMgd2l0aFJvdXRlciB9O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvaW5kZXguanMiLCJpbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XHJcbmltcG9ydCBjb3VudGVyIGZyb20gJy4vY291bnRlclJlZHVjZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29tYmluZVJlZHVjZXJzKHtcclxuICAgIGNvdW50ZXJcclxufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NoYXJlZC9yZWR1Y2Vycy9pbmRleC5qcyIsImltcG9ydCB7IElOQ1JFTUVOVCwgREVDUkVNRU5ULCBBRERfVVNFUiB9IGZyb20gJy4uL2NvbnN0YW50cydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRhdGFSZWR1Y2VyKHN0YXRlID0ge30sIGFjdGlvbil7XHJcbiAgICBzd2l0Y2goYWN0aW9uLnR5cGUpe1xyXG4gICAgICAgIGNhc2UgQUREX1VTRVI6XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgeyBbYWN0aW9uLnBheWxvYWRdOiAwIH0pXHJcbiAgICAgICAgY2FzZSBJTkNSRU1FTlQ6XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgeyBbYWN0aW9uLnBheWxvYWRdOiArK3N0YXRlW2FjdGlvbi5wYXlsb2FkXSB9KVxyXG4gICAgICAgIGNhc2UgREVDUkVNRU5UOlxyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHsgW2FjdGlvbi5wYXlsb2FkXTogLS1zdGF0ZVthY3Rpb24ucGF5bG9hZF0gfSlcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGVcclxuICAgIH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zaGFyZWQvcmVkdWNlcnMvY291bnRlclJlZHVjZXIuanMiLCJleHBvcnQgY29uc3QgSU5DUkVNRU5UID0gXCJJTkNSRU1FTlRcIjtcclxuZXhwb3J0IGNvbnN0IERFQ1JFTUVOVCA9IFwiREVDUkVNRU5UXCI7XHJcbmV4cG9ydCBjb25zdCBBRERfVVNFUiA9IFwiQUREX1VTRVJcIjtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3NoYXJlZC9jb25zdGFudHMvaW5kZXguanMiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBMb2FkaW5nKHByb3BzKSB7XHJcbiAgICBpZiAocHJvcHMuZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPHA+IEVycm9yISA8L3A+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eyBwcm9wcy5yZXRyeSB9PiBSZXRyeSA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIClcclxuICAgIH0gZWxzZSBpZiAocHJvcHMucGFzdERlbGF5KSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxwPkxvYWRpbmcuLi48L3A+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zaGFyZWQvY29tcG9uZW50cy9Mb2FkaW5nLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==